
F446RC_MQTT_monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cdd4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e00  0800cfa4  0800cfa4  0001cfa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dda4  0800dda4  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  0800dda4  0800dda4  0001dda4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ddac  0800ddac  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ddac  0800ddac  0001ddac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ddb0  0800ddb0  0001ddb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0800ddb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004fd0  2000009c  0800de50  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000506c  0800de50  0002506c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020177  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e41  00000000  00000000  00040243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b28  00000000  00000000  00044088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019d8  00000000  00000000  00045bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000049d8  00000000  00000000  00047588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f702  00000000  00000000  0004bf60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e07dd  00000000  00000000  0006b662  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014be3f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007cb8  00000000  00000000  0014be90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000009c 	.word	0x2000009c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800cf8c 	.word	0x0800cf8c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a0 	.word	0x200000a0
 800020c:	0800cf8c 	.word	0x0800cf8c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <usMBCRC16>:
 */

#include "ModBusCRC.h"

uint16_t usMBCRC16(uint8_t * pucFrame, uint16_t usLen)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	460b      	mov	r3, r1
 80005ce:	807b      	strh	r3, [r7, #2]
	uint8_t           ucCRCHi = 0xFF;
 80005d0:	23ff      	movs	r3, #255	; 0xff
 80005d2:	73fb      	strb	r3, [r7, #15]
	uint8_t           ucCRCLo = 0xFF;
 80005d4:	23ff      	movs	r3, #255	; 0xff
 80005d6:	73bb      	strb	r3, [r7, #14]
    int             iIndex;

    while( usLen-- )
 80005d8:	e013      	b.n	8000602 <usMBCRC16+0x3e>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	1c5a      	adds	r2, r3, #1
 80005de:	607a      	str	r2, [r7, #4]
 80005e0:	781a      	ldrb	r2, [r3, #0]
 80005e2:	7bbb      	ldrb	r3, [r7, #14]
 80005e4:	4053      	eors	r3, r2
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	60bb      	str	r3, [r7, #8]
        ucCRCLo = ( uint8_t )( ucCRCHi ^ aucCRCHi[iIndex] );
 80005ea:	4a0f      	ldr	r2, [pc, #60]	; (8000628 <usMBCRC16+0x64>)
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	4413      	add	r3, r2
 80005f0:	781a      	ldrb	r2, [r3, #0]
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	4053      	eors	r3, r2
 80005f6:	73bb      	strb	r3, [r7, #14]
        ucCRCHi = aucCRCLo[iIndex];
 80005f8:	4a0c      	ldr	r2, [pc, #48]	; (800062c <usMBCRC16+0x68>)
 80005fa:	68bb      	ldr	r3, [r7, #8]
 80005fc:	4413      	add	r3, r2
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	73fb      	strb	r3, [r7, #15]
    while( usLen-- )
 8000602:	887b      	ldrh	r3, [r7, #2]
 8000604:	1e5a      	subs	r2, r3, #1
 8000606:	807a      	strh	r2, [r7, #2]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d1e6      	bne.n	80005da <usMBCRC16+0x16>
    }
    return ( uint16_t )( ucCRCHi << 8 | ucCRCLo );
 800060c:	7bfb      	ldrb	r3, [r7, #15]
 800060e:	021b      	lsls	r3, r3, #8
 8000610:	b21a      	sxth	r2, r3
 8000612:	7bbb      	ldrb	r3, [r7, #14]
 8000614:	b21b      	sxth	r3, r3
 8000616:	4313      	orrs	r3, r2
 8000618:	b21b      	sxth	r3, r3
 800061a:	b29b      	uxth	r3, r3
}
 800061c:	4618      	mov	r0, r3
 800061e:	3714      	adds	r7, #20
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr
 8000628:	0800d7f8 	.word	0x0800d7f8
 800062c:	0800d8f8 	.word	0x0800d8f8

08000630 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000634:	f003 fa2a 	bl	8003a8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000638:	f000 f8ca 	bl	80007d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063c:	f000 fa34 	bl	8000aa8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000640:	f000 f9ec 	bl	8000a1c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000644:	f000 f996 	bl	8000974 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000648:	f000 f9be 	bl	80009c8 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 800064c:	f000 f95c 	bl	8000908 <MX_SPI2_Init>
  MX_I2C1_Init();
 8000650:	f000 f92c 	bl	80008ac <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000654:	f007 faf8 	bl	8007c48 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of UART1Mutex */
  UART1MutexHandle = osMutexNew(&UART1Mutex_attributes);
 8000658:	4839      	ldr	r0, [pc, #228]	; (8000740 <main+0x110>)
 800065a:	f007 fcd9 	bl	8008010 <osMutexNew>
 800065e:	4603      	mov	r3, r0
 8000660:	4a38      	ldr	r2, [pc, #224]	; (8000744 <main+0x114>)
 8000662:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of PINGSem */
  PINGSemHandle = osSemaphoreNew(1, 0, &PINGSem_attributes);
 8000664:	4a38      	ldr	r2, [pc, #224]	; (8000748 <main+0x118>)
 8000666:	2100      	movs	r1, #0
 8000668:	2001      	movs	r0, #1
 800066a:	f007 fddf 	bl	800822c <osSemaphoreNew>
 800066e:	4603      	mov	r3, r0
 8000670:	4a36      	ldr	r2, [pc, #216]	; (800074c <main+0x11c>)
 8000672:	6013      	str	r3, [r2, #0]

  /* creation of SemGetData */
  SemGetDataHandle = osSemaphoreNew(1, 0, &SemGetData_attributes);
 8000674:	4a36      	ldr	r2, [pc, #216]	; (8000750 <main+0x120>)
 8000676:	2100      	movs	r1, #0
 8000678:	2001      	movs	r0, #1
 800067a:	f007 fdd7 	bl	800822c <osSemaphoreNew>
 800067e:	4603      	mov	r3, r0
 8000680:	4a34      	ldr	r2, [pc, #208]	; (8000754 <main+0x124>)
 8000682:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of PingTimer */
  PingTimerHandle = osTimerNew(CallbackPingTimer, osTimerPeriodic, NULL, &PingTimer_attributes);
 8000684:	4b34      	ldr	r3, [pc, #208]	; (8000758 <main+0x128>)
 8000686:	2200      	movs	r2, #0
 8000688:	2101      	movs	r1, #1
 800068a:	4834      	ldr	r0, [pc, #208]	; (800075c <main+0x12c>)
 800068c:	f007 fc16 	bl	8007ebc <osTimerNew>
 8000690:	4603      	mov	r3, r0
 8000692:	4a33      	ldr	r2, [pc, #204]	; (8000760 <main+0x130>)
 8000694:	6013      	str	r3, [r2, #0]

  /* creation of DataTimer */
  DataTimerHandle = osTimerNew(CallbackDataTimer, osTimerPeriodic, NULL, &DataTimer_attributes);
 8000696:	4b33      	ldr	r3, [pc, #204]	; (8000764 <main+0x134>)
 8000698:	2200      	movs	r2, #0
 800069a:	2101      	movs	r1, #1
 800069c:	4832      	ldr	r0, [pc, #200]	; (8000768 <main+0x138>)
 800069e:	f007 fc0d 	bl	8007ebc <osTimerNew>
 80006a2:	4603      	mov	r3, r0
 80006a4:	4a31      	ldr	r2, [pc, #196]	; (800076c <main+0x13c>)
 80006a6:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of debugQueue */
  debugQueueHandle = osMessageQueueNew (10, sizeof(message_type), &debugQueue_attributes);
 80006a8:	4a31      	ldr	r2, [pc, #196]	; (8000770 <main+0x140>)
 80006aa:	2146      	movs	r1, #70	; 0x46
 80006ac:	200a      	movs	r0, #10
 80006ae:	f007 fedd 	bl	800846c <osMessageQueueNew>
 80006b2:	4603      	mov	r3, r0
 80006b4:	4a2f      	ldr	r2, [pc, #188]	; (8000774 <main+0x144>)
 80006b6:	6013      	str	r3, [r2, #0]

  /* creation of SIM800SendQueue */
  SIM800SendQueueHandle = osMessageQueueNew (10, sizeof(message_type), &SIM800SendQueue_attributes);
 80006b8:	4a2f      	ldr	r2, [pc, #188]	; (8000778 <main+0x148>)
 80006ba:	2146      	movs	r1, #70	; 0x46
 80006bc:	200a      	movs	r0, #10
 80006be:	f007 fed5 	bl	800846c <osMessageQueueNew>
 80006c2:	4603      	mov	r3, r0
 80006c4:	4a2d      	ldr	r2, [pc, #180]	; (800077c <main+0x14c>)
 80006c6:	6013      	str	r3, [r2, #0]

  /* creation of RxSIM800Queue */
  RxSIM800QueueHandle = osMessageQueueNew (10, sizeof(message_type), &RxSIM800Queue_attributes);
 80006c8:	4a2d      	ldr	r2, [pc, #180]	; (8000780 <main+0x150>)
 80006ca:	2146      	movs	r1, #70	; 0x46
 80006cc:	200a      	movs	r0, #10
 80006ce:	f007 fecd 	bl	800846c <osMessageQueueNew>
 80006d2:	4603      	mov	r3, r0
 80006d4:	4a2b      	ldr	r2, [pc, #172]	; (8000784 <main+0x154>)
 80006d6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006d8:	4a2b      	ldr	r2, [pc, #172]	; (8000788 <main+0x158>)
 80006da:	2100      	movs	r1, #0
 80006dc:	482b      	ldr	r0, [pc, #172]	; (800078c <main+0x15c>)
 80006de:	f007 fafd 	bl	8007cdc <osThreadNew>
 80006e2:	4603      	mov	r3, r0
 80006e4:	4a2a      	ldr	r2, [pc, #168]	; (8000790 <main+0x160>)
 80006e6:	6013      	str	r3, [r2, #0]

  /* creation of GetDataTask */
  GetDataTaskHandle = osThreadNew(StartGetDataTask, NULL, &GetDataTask_attributes);
 80006e8:	4a2a      	ldr	r2, [pc, #168]	; (8000794 <main+0x164>)
 80006ea:	2100      	movs	r1, #0
 80006ec:	482a      	ldr	r0, [pc, #168]	; (8000798 <main+0x168>)
 80006ee:	f007 faf5 	bl	8007cdc <osThreadNew>
 80006f2:	4603      	mov	r3, r0
 80006f4:	4a29      	ldr	r2, [pc, #164]	; (800079c <main+0x16c>)
 80006f6:	6013      	str	r3, [r2, #0]

  /* creation of DebugTask */
  DebugTaskHandle = osThreadNew(StartDebugTask, NULL, &DebugTask_attributes);
 80006f8:	4a29      	ldr	r2, [pc, #164]	; (80007a0 <main+0x170>)
 80006fa:	2100      	movs	r1, #0
 80006fc:	4829      	ldr	r0, [pc, #164]	; (80007a4 <main+0x174>)
 80006fe:	f007 faed 	bl	8007cdc <osThreadNew>
 8000702:	4603      	mov	r3, r0
 8000704:	4a28      	ldr	r2, [pc, #160]	; (80007a8 <main+0x178>)
 8000706:	6013      	str	r3, [r2, #0]

  /* creation of SIM800SendTask */
  SIM800SendTaskHandle = osThreadNew(StartSIM800SendTask, NULL, &SIM800SendTask_attributes);
 8000708:	4a28      	ldr	r2, [pc, #160]	; (80007ac <main+0x17c>)
 800070a:	2100      	movs	r1, #0
 800070c:	4828      	ldr	r0, [pc, #160]	; (80007b0 <main+0x180>)
 800070e:	f007 fae5 	bl	8007cdc <osThreadNew>
 8000712:	4603      	mov	r3, r0
 8000714:	4a27      	ldr	r2, [pc, #156]	; (80007b4 <main+0x184>)
 8000716:	6013      	str	r3, [r2, #0]

  /* creation of PINGTask */
  //PINGTaskHandle = osThreadNew(PINGStartTask, NULL, &PINGTask_attributes);

  /* creation of SIM800StartTask */
  SIM800StartTaskHandle = osThreadNew(StartSIM800Task, NULL, &SIM800StartTask_attributes);
 8000718:	4a27      	ldr	r2, [pc, #156]	; (80007b8 <main+0x188>)
 800071a:	2100      	movs	r1, #0
 800071c:	4827      	ldr	r0, [pc, #156]	; (80007bc <main+0x18c>)
 800071e:	f007 fadd 	bl	8007cdc <osThreadNew>
 8000722:	4603      	mov	r3, r0
 8000724:	4a26      	ldr	r2, [pc, #152]	; (80007c0 <main+0x190>)
 8000726:	6013      	str	r3, [r2, #0]

  /* creation of MQTTConnectTask */
  //MQTTConnectTaskHandle = osThreadNew(StartMQTTConnectTask, NULL, &MQTTConnectTask_attributes);

  /* creation of MessHandlerTask */
  MessHandlerTaskHandle = osThreadNew(StartMessHandlerTask, NULL, &MessHandlerTask_attributes);
 8000728:	4a26      	ldr	r2, [pc, #152]	; (80007c4 <main+0x194>)
 800072a:	2100      	movs	r1, #0
 800072c:	4826      	ldr	r0, [pc, #152]	; (80007c8 <main+0x198>)
 800072e:	f007 fad5 	bl	8007cdc <osThreadNew>
 8000732:	4603      	mov	r3, r0
 8000734:	4a25      	ldr	r2, [pc, #148]	; (80007cc <main+0x19c>)
 8000736:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000738:	f007 faaa 	bl	8007c90 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800073c:	e7fe      	b.n	800073c <main+0x10c>
 800073e:	bf00      	nop
 8000740:	0800dba4 	.word	0x0800dba4
 8000744:	200003a4 	.word	0x200003a4
 8000748:	0800dbb4 	.word	0x0800dbb4
 800074c:	200003a8 	.word	0x200003a8
 8000750:	0800dbc4 	.word	0x0800dbc4
 8000754:	200003ac 	.word	0x200003ac
 8000758:	0800db84 	.word	0x0800db84
 800075c:	08002c05 	.word	0x08002c05
 8000760:	2000039c 	.word	0x2000039c
 8000764:	0800db94 	.word	0x0800db94
 8000768:	08002c25 	.word	0x08002c25
 800076c:	200003a0 	.word	0x200003a0
 8000770:	0800db3c 	.word	0x0800db3c
 8000774:	20000390 	.word	0x20000390
 8000778:	0800db54 	.word	0x0800db54
 800077c:	20000394 	.word	0x20000394
 8000780:	0800db6c 	.word	0x0800db6c
 8000784:	20000398 	.word	0x20000398
 8000788:	0800d9f8 	.word	0x0800d9f8
 800078c:	08000fc5 	.word	0x08000fc5
 8000790:	2000036c 	.word	0x2000036c
 8000794:	0800da1c 	.word	0x0800da1c
 8000798:	08001049 	.word	0x08001049
 800079c:	20000370 	.word	0x20000370
 80007a0:	0800da40 	.word	0x0800da40
 80007a4:	08001205 	.word	0x08001205
 80007a8:	20000374 	.word	0x20000374
 80007ac:	0800da64 	.word	0x0800da64
 80007b0:	08001225 	.word	0x08001225
 80007b4:	20000378 	.word	0x20000378
 80007b8:	0800daac 	.word	0x0800daac
 80007bc:	08001641 	.word	0x08001641
 80007c0:	20000380 	.word	0x20000380
 80007c4:	0800daf4 	.word	0x0800daf4
 80007c8:	08002151 	.word	0x08002151
 80007cc:	20000388 	.word	0x20000388

080007d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b094      	sub	sp, #80	; 0x50
 80007d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	2234      	movs	r2, #52	; 0x34
 80007dc:	2100      	movs	r1, #0
 80007de:	4618      	mov	r0, r3
 80007e0:	f00b fa7c 	bl	800bcdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e4:	f107 0308 	add.w	r3, r7, #8
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f4:	2300      	movs	r3, #0
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	4b2a      	ldr	r3, [pc, #168]	; (80008a4 <SystemClock_Config+0xd4>)
 80007fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fc:	4a29      	ldr	r2, [pc, #164]	; (80008a4 <SystemClock_Config+0xd4>)
 80007fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000802:	6413      	str	r3, [r2, #64]	; 0x40
 8000804:	4b27      	ldr	r3, [pc, #156]	; (80008a4 <SystemClock_Config+0xd4>)
 8000806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000810:	2300      	movs	r3, #0
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	4b24      	ldr	r3, [pc, #144]	; (80008a8 <SystemClock_Config+0xd8>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800081c:	4a22      	ldr	r2, [pc, #136]	; (80008a8 <SystemClock_Config+0xd8>)
 800081e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000822:	6013      	str	r3, [r2, #0]
 8000824:	4b20      	ldr	r3, [pc, #128]	; (80008a8 <SystemClock_Config+0xd8>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800082c:	603b      	str	r3, [r7, #0]
 800082e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000830:	2302      	movs	r3, #2
 8000832:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000834:	2301      	movs	r3, #1
 8000836:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000838:	2310      	movs	r3, #16
 800083a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800083c:	2302      	movs	r3, #2
 800083e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000840:	2300      	movs	r3, #0
 8000842:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000844:	2310      	movs	r3, #16
 8000846:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000848:	23c0      	movs	r3, #192	; 0xc0
 800084a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800084c:	2302      	movs	r3, #2
 800084e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000850:	2302      	movs	r3, #2
 8000852:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000854:	2302      	movs	r3, #2
 8000856:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000858:	f107 031c 	add.w	r3, r7, #28
 800085c:	4618      	mov	r0, r3
 800085e:	f004 fc95 	bl	800518c <HAL_RCC_OscConfig>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000868:	f002 f9fe 	bl	8002c68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086c:	230f      	movs	r3, #15
 800086e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000870:	2302      	movs	r3, #2
 8000872:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000874:	2300      	movs	r3, #0
 8000876:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000878:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800087c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800087e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000882:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000884:	f107 0308 	add.w	r3, r7, #8
 8000888:	2103      	movs	r1, #3
 800088a:	4618      	mov	r0, r3
 800088c:	f004 f988 	bl	8004ba0 <HAL_RCC_ClockConfig>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000896:	f002 f9e7 	bl	8002c68 <Error_Handler>
  }
}
 800089a:	bf00      	nop
 800089c:	3750      	adds	r7, #80	; 0x50
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40007000 	.word	0x40007000

080008ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <MX_I2C1_Init+0x50>)
 80008b2:	4a13      	ldr	r2, [pc, #76]	; (8000900 <MX_I2C1_Init+0x54>)
 80008b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008b6:	4b11      	ldr	r3, [pc, #68]	; (80008fc <MX_I2C1_Init+0x50>)
 80008b8:	4a12      	ldr	r2, [pc, #72]	; (8000904 <MX_I2C1_Init+0x58>)
 80008ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008bc:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <MX_I2C1_Init+0x50>)
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <MX_I2C1_Init+0x50>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <MX_I2C1_Init+0x50>)
 80008ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008d0:	4b0a      	ldr	r3, [pc, #40]	; (80008fc <MX_I2C1_Init+0x50>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <MX_I2C1_Init+0x50>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008dc:	4b07      	ldr	r3, [pc, #28]	; (80008fc <MX_I2C1_Init+0x50>)
 80008de:	2200      	movs	r2, #0
 80008e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <MX_I2C1_Init+0x50>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008e8:	4804      	ldr	r0, [pc, #16]	; (80008fc <MX_I2C1_Init+0x50>)
 80008ea:	f004 f815 	bl	8004918 <HAL_I2C_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008f4:	f002 f9b8 	bl	8002c68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008f8:	bf00      	nop
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	200000b8 	.word	0x200000b8
 8000900:	40005400 	.word	0x40005400
 8000904:	000186a0 	.word	0x000186a0

08000908 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800090c:	4b17      	ldr	r3, [pc, #92]	; (800096c <MX_SPI2_Init+0x64>)
 800090e:	4a18      	ldr	r2, [pc, #96]	; (8000970 <MX_SPI2_Init+0x68>)
 8000910:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000912:	4b16      	ldr	r3, [pc, #88]	; (800096c <MX_SPI2_Init+0x64>)
 8000914:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000918:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800091a:	4b14      	ldr	r3, [pc, #80]	; (800096c <MX_SPI2_Init+0x64>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000920:	4b12      	ldr	r3, [pc, #72]	; (800096c <MX_SPI2_Init+0x64>)
 8000922:	2200      	movs	r2, #0
 8000924:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000926:	4b11      	ldr	r3, [pc, #68]	; (800096c <MX_SPI2_Init+0x64>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800092c:	4b0f      	ldr	r3, [pc, #60]	; (800096c <MX_SPI2_Init+0x64>)
 800092e:	2200      	movs	r2, #0
 8000930:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <MX_SPI2_Init+0x64>)
 8000934:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000938:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800093a:	4b0c      	ldr	r3, [pc, #48]	; (800096c <MX_SPI2_Init+0x64>)
 800093c:	2200      	movs	r2, #0
 800093e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000940:	4b0a      	ldr	r3, [pc, #40]	; (800096c <MX_SPI2_Init+0x64>)
 8000942:	2200      	movs	r2, #0
 8000944:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <MX_SPI2_Init+0x64>)
 8000948:	2200      	movs	r2, #0
 800094a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800094c:	4b07      	ldr	r3, [pc, #28]	; (800096c <MX_SPI2_Init+0x64>)
 800094e:	2200      	movs	r2, #0
 8000950:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000952:	4b06      	ldr	r3, [pc, #24]	; (800096c <MX_SPI2_Init+0x64>)
 8000954:	220a      	movs	r2, #10
 8000956:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000958:	4804      	ldr	r0, [pc, #16]	; (800096c <MX_SPI2_Init+0x64>)
 800095a:	f004 feb5 	bl	80056c8 <HAL_SPI_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000964:	f002 f980 	bl	8002c68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}
 800096c:	2000010c 	.word	0x2000010c
 8000970:	40003800 	.word	0x40003800

08000974 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000978:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <MX_USART1_UART_Init+0x4c>)
 800097a:	4a12      	ldr	r2, [pc, #72]	; (80009c4 <MX_USART1_UART_Init+0x50>)
 800097c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <MX_USART1_UART_Init+0x4c>)
 8000980:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000984:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000986:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <MX_USART1_UART_Init+0x4c>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800098c:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <MX_USART1_UART_Init+0x4c>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000992:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <MX_USART1_UART_Init+0x4c>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000998:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <MX_USART1_UART_Init+0x4c>)
 800099a:	220c      	movs	r2, #12
 800099c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099e:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <MX_USART1_UART_Init+0x4c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <MX_USART1_UART_Init+0x4c>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009aa:	4805      	ldr	r0, [pc, #20]	; (80009c0 <MX_USART1_UART_Init+0x4c>)
 80009ac:	f005 fd6c 	bl	8006488 <HAL_UART_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009b6:	f002 f957 	bl	8002c68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000164 	.word	0x20000164
 80009c4:	40011000 	.word	0x40011000

080009c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009cc:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <MX_USART2_UART_Init+0x4c>)
 80009ce:	4a12      	ldr	r2, [pc, #72]	; (8000a18 <MX_USART2_UART_Init+0x50>)
 80009d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80009d2:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <MX_USART2_UART_Init+0x4c>)
 80009d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009da:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <MX_USART2_UART_Init+0x4c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009e0:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <MX_USART2_UART_Init+0x4c>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009e6:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <MX_USART2_UART_Init+0x4c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009ec:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <MX_USART2_UART_Init+0x4c>)
 80009ee:	220c      	movs	r2, #12
 80009f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009f2:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <MX_USART2_UART_Init+0x4c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f8:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <MX_USART2_UART_Init+0x4c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009fe:	4805      	ldr	r0, [pc, #20]	; (8000a14 <MX_USART2_UART_Init+0x4c>)
 8000a00:	f005 fd42 	bl	8006488 <HAL_UART_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a0a:	f002 f92d 	bl	8002c68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	200001a8 	.word	0x200001a8
 8000a18:	40004400 	.word	0x40004400

08000a1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	4b1f      	ldr	r3, [pc, #124]	; (8000aa4 <MX_DMA_Init+0x88>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a1e      	ldr	r2, [pc, #120]	; (8000aa4 <MX_DMA_Init+0x88>)
 8000a2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b1c      	ldr	r3, [pc, #112]	; (8000aa4 <MX_DMA_Init+0x88>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	603b      	str	r3, [r7, #0]
 8000a42:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <MX_DMA_Init+0x88>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a17      	ldr	r2, [pc, #92]	; (8000aa4 <MX_DMA_Init+0x88>)
 8000a48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <MX_DMA_Init+0x88>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a56:	603b      	str	r3, [r7, #0]
 8000a58:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2105      	movs	r1, #5
 8000a5e:	2010      	movs	r0, #16
 8000a60:	f003 f949 	bl	8003cf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000a64:	2010      	movs	r0, #16
 8000a66:	f003 f962 	bl	8003d2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2105      	movs	r1, #5
 8000a6e:	2011      	movs	r0, #17
 8000a70:	f003 f941 	bl	8003cf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000a74:	2011      	movs	r0, #17
 8000a76:	f003 f95a 	bl	8003d2e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2105      	movs	r1, #5
 8000a7e:	203a      	movs	r0, #58	; 0x3a
 8000a80:	f003 f939 	bl	8003cf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000a84:	203a      	movs	r0, #58	; 0x3a
 8000a86:	f003 f952 	bl	8003d2e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2105      	movs	r1, #5
 8000a8e:	2046      	movs	r0, #70	; 0x46
 8000a90:	f003 f931 	bl	8003cf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000a94:	2046      	movs	r0, #70	; 0x46
 8000a96:	f003 f94a 	bl	8003d2e <HAL_NVIC_EnableIRQ>

}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40023800 	.word	0x40023800

08000aa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b088      	sub	sp, #32
 8000aac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aae:	f107 030c 	add.w	r3, r7, #12
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	60da      	str	r2, [r3, #12]
 8000abc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	4b44      	ldr	r3, [pc, #272]	; (8000bd4 <MX_GPIO_Init+0x12c>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a43      	ldr	r2, [pc, #268]	; (8000bd4 <MX_GPIO_Init+0x12c>)
 8000ac8:	f043 0304 	orr.w	r3, r3, #4
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b41      	ldr	r3, [pc, #260]	; (8000bd4 <MX_GPIO_Init+0x12c>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0304 	and.w	r3, r3, #4
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	4b3d      	ldr	r3, [pc, #244]	; (8000bd4 <MX_GPIO_Init+0x12c>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a3c      	ldr	r2, [pc, #240]	; (8000bd4 <MX_GPIO_Init+0x12c>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b3a      	ldr	r3, [pc, #232]	; (8000bd4 <MX_GPIO_Init+0x12c>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	603b      	str	r3, [r7, #0]
 8000afa:	4b36      	ldr	r3, [pc, #216]	; (8000bd4 <MX_GPIO_Init+0x12c>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a35      	ldr	r2, [pc, #212]	; (8000bd4 <MX_GPIO_Init+0x12c>)
 8000b00:	f043 0302 	orr.w	r3, r3, #2
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b33      	ldr	r3, [pc, #204]	; (8000bd4 <MX_GPIO_Init+0x12c>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f003 0302 	and.w	r3, r3, #2
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_3, GPIO_PIN_SET);
 8000b12:	2201      	movs	r2, #1
 8000b14:	210a      	movs	r1, #10
 8000b16:	4830      	ldr	r0, [pc, #192]	; (8000bd8 <MX_GPIO_Init+0x130>)
 8000b18:	f003 feca 	bl	80048b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	2140      	movs	r1, #64	; 0x40
 8000b20:	482e      	ldr	r0, [pc, #184]	; (8000bdc <MX_GPIO_Init+0x134>)
 8000b22:	f003 fec5 	bl	80048b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(temp_GPIO_Port, temp_Pin, GPIO_PIN_RESET);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2180      	movs	r1, #128	; 0x80
 8000b2a:	482c      	ldr	r0, [pc, #176]	; (8000bdc <MX_GPIO_Init+0x134>)
 8000b2c:	f003 fec0 	bl	80048b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SIM_START_Pin|SIM_RESET_Pin, GPIO_PIN_RESET);
 8000b30:	2200      	movs	r2, #0
 8000b32:	2130      	movs	r1, #48	; 0x30
 8000b34:	4828      	ldr	r0, [pc, #160]	; (8000bd8 <MX_GPIO_Init+0x130>)
 8000b36:	f003 febb 	bl	80048b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b40:	4827      	ldr	r0, [pc, #156]	; (8000be0 <MX_GPIO_Init+0x138>)
 8000b42:	f003 feb5 	bl	80048b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC3 SIM_START_Pin SIM_RESET_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|SIM_START_Pin|SIM_RESET_Pin;
 8000b46:	233a      	movs	r3, #58	; 0x3a
 8000b48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b56:	f107 030c 	add.w	r3, r7, #12
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	481e      	ldr	r0, [pc, #120]	; (8000bd8 <MX_GPIO_Init+0x130>)
 8000b5e:	f003 fcfb 	bl	8004558 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b62:	2304      	movs	r3, #4
 8000b64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b66:	2300      	movs	r3, #0
 8000b68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b6e:	f107 030c 	add.w	r3, r7, #12
 8000b72:	4619      	mov	r1, r3
 8000b74:	4818      	ldr	r0, [pc, #96]	; (8000bd8 <MX_GPIO_Init+0x130>)
 8000b76:	f003 fcef 	bl	8004558 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b7a:	2310      	movs	r3, #16
 8000b7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b82:	2301      	movs	r3, #1
 8000b84:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b86:	f107 030c 	add.w	r3, r7, #12
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4813      	ldr	r0, [pc, #76]	; (8000bdc <MX_GPIO_Init+0x134>)
 8000b8e:	f003 fce3 	bl	8004558 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 temp_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_6|temp_Pin;
 8000b92:	23c0      	movs	r3, #192	; 0xc0
 8000b94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b96:	2301      	movs	r3, #1
 8000b98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba2:	f107 030c 	add.w	r3, r7, #12
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	480c      	ldr	r0, [pc, #48]	; (8000bdc <MX_GPIO_Init+0x134>)
 8000baa:	f003 fcd5 	bl	8004558 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_CS_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 8000bae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bb2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 8000bc0:	f107 030c 	add.w	r3, r7, #12
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4806      	ldr	r0, [pc, #24]	; (8000be0 <MX_GPIO_Init+0x138>)
 8000bc8:	f003 fcc6 	bl	8004558 <HAL_GPIO_Init>

}
 8000bcc:	bf00      	nop
 8000bce:	3720      	adds	r7, #32
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40020800 	.word	0x40020800
 8000bdc:	40020000 	.word	0x40020000
 8000be0:	40020400 	.word	0x40020400

08000be4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4a06      	ldr	r2, [pc, #24]	; (8000c08 <HAL_UART_RxCpltCallback+0x24>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d102      	bne.n	8000bfa <HAL_UART_RxCpltCallback+0x16>
	{
		UART2_RX_finish = 1;
 8000bf4:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <HAL_UART_RxCpltCallback+0x28>)
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	701a      	strb	r2, [r3, #0]
	}
}
 8000bfa:	bf00      	nop
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	200001a8 	.word	0x200001a8
 8000c0c:	200003b8 	.word	0x200003b8

08000c10 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	4a06      	ldr	r2, [pc, #24]	; (8000c34 <HAL_UART_TxCpltCallback+0x24>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d102      	bne.n	8000c26 <HAL_UART_TxCpltCallback+0x16>
	{
		UART2_TX_finish = 1;
 8000c20:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <HAL_UART_TxCpltCallback+0x28>)
 8000c22:	2201      	movs	r2, #1
 8000c24:	701a      	strb	r2, [r3, #0]
	}
}
 8000c26:	bf00      	nop
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	200001a8 	.word	0x200001a8
 8000c38:	200003b7 	.word	0x200003b7

08000c3c <SPI2_Init_Master>:

void SPI2_Init_Master(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8000c50:	2201      	movs	r2, #1
 8000c52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c56:	4810      	ldr	r0, [pc, #64]	; (8000c98 <SPI2_Init_Master+0x5c>)
 8000c58:	f003 fe2a 	bl	80048b0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : FLASH_CS_Pin */
	GPIO_InitStruct.Pin = FLASH_CS_Pin;
 8000c5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c60:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c62:	2301      	movs	r3, #1
 8000c64:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	4619      	mov	r1, r3
 8000c72:	4809      	ldr	r0, [pc, #36]	; (8000c98 <SPI2_Init_Master+0x5c>)
 8000c74:	f003 fc70 	bl	8004558 <HAL_GPIO_Init>

	hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c78:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <SPI2_Init_Master+0x60>)
 8000c7a:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c7e:	605a      	str	r2, [r3, #4]
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c80:	4806      	ldr	r0, [pc, #24]	; (8000c9c <SPI2_Init_Master+0x60>)
 8000c82:	f004 fd21 	bl	80056c8 <HAL_SPI_Init>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <SPI2_Init_Master+0x54>
	{
		Error_Handler();
 8000c8c:	f001 ffec 	bl	8002c68 <Error_Handler>
	}
}
 8000c90:	bf00      	nop
 8000c92:	3718      	adds	r7, #24
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40020400 	.word	0x40020400
 8000c9c:	2000010c 	.word	0x2000010c

08000ca0 <Make_MQTT_send_string>:
  * @param  send_MQTT_message[] String, where will be result.
  * @param  msg[] struct with message for sending with MQTT.
 */

void Make_MQTT_send_string(uint8_t send_MQTT_message[], message_type msg)
{
 8000ca0:	b084      	sub	sp, #16
 8000ca2:	b590      	push	{r4, r7, lr}
 8000ca4:	b083      	sub	sp, #12
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
 8000caa:	f107 001c 	add.w	r0, r7, #28
 8000cae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	send_MQTT_message[0] = 0x30;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2230      	movs	r2, #48	; 0x30
 8000cb6:	701a      	strb	r2, [r3, #0]
    send_MQTT_message[1] = strlen(msg.str) + strlen(TOPIC) + 2;
 8000cb8:	f107 031c 	add.w	r3, r7, #28
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff faa7 	bl	8000210 <strlen>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	b2dc      	uxtb	r4, r3
 8000cc6:	4819      	ldr	r0, [pc, #100]	; (8000d2c <Make_MQTT_send_string+0x8c>)
 8000cc8:	f7ff faa2 	bl	8000210 <strlen>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	4423      	add	r3, r4
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	3202      	adds	r2, #2
 8000cda:	b2d2      	uxtb	r2, r2
 8000cdc:	701a      	strb	r2, [r3, #0]
    send_MQTT_message[2] = 0;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	3302      	adds	r3, #2
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	701a      	strb	r2, [r3, #0]
    send_MQTT_message[3] = strlen(TOPIC);
 8000ce6:	4811      	ldr	r0, [pc, #68]	; (8000d2c <Make_MQTT_send_string+0x8c>)
 8000ce8:	f7ff fa92 	bl	8000210 <strlen>
 8000cec:	4602      	mov	r2, r0
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	3303      	adds	r3, #3
 8000cf2:	b2d2      	uxtb	r2, r2
 8000cf4:	701a      	strb	r2, [r3, #0]
    sprintf(send_MQTT_message + 4,"%s",TOPIC);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	3304      	adds	r3, #4
 8000cfa:	4a0c      	ldr	r2, [pc, #48]	; (8000d2c <Make_MQTT_send_string+0x8c>)
 8000cfc:	490c      	ldr	r1, [pc, #48]	; (8000d30 <Make_MQTT_send_string+0x90>)
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f00b f828 	bl	800bd54 <siprintf>
    sprintf(send_MQTT_message + 4 + strlen(TOPIC),"%s",msg.str);
 8000d04:	4809      	ldr	r0, [pc, #36]	; (8000d2c <Make_MQTT_send_string+0x8c>)
 8000d06:	f7ff fa83 	bl	8000210 <strlen>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	3304      	adds	r3, #4
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	4413      	add	r3, r2
 8000d12:	f107 021c 	add.w	r2, r7, #28
 8000d16:	4906      	ldr	r1, [pc, #24]	; (8000d30 <Make_MQTT_send_string+0x90>)
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f00b f81b 	bl	800bd54 <siprintf>
}
 8000d1e:	bf00      	nop
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000d28:	b004      	add	sp, #16
 8000d2a:	4770      	bx	lr
 8000d2c:	20000010 	.word	0x20000010
 8000d30:	0800d088 	.word	0x0800d088

08000d34 <String_in_SIM800BuffRx>:
  * @param  exm[] String, that we search in Receive buffer SIM800.
  * @retval Is string in Receive buffer SIM800.
 */

uint8_t String_in_SIM800BuffRx(uint8_t exm[])
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(exm);
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f7ff fa67 	bl	8000210 <strlen>
 8000d42:	4603      	mov	r3, r0
 8000d44:	733b      	strb	r3, [r7, #12]
	uint8_t ans = 0;
 8000d46:	2300      	movs	r3, #0
 8000d48:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < BUFF_SIM_SIZE - len; i++)
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	73bb      	strb	r3, [r7, #14]
 8000d4e:	e025      	b.n	8000d9c <String_in_SIM800BuffRx+0x68>
	{
		if (SIM800BuffRx[i] == exm[0])
 8000d50:	7bbb      	ldrb	r3, [r7, #14]
 8000d52:	4a19      	ldr	r2, [pc, #100]	; (8000db8 <String_in_SIM800BuffRx+0x84>)
 8000d54:	5cd2      	ldrb	r2, [r2, r3]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d11b      	bne.n	8000d96 <String_in_SIM800BuffRx+0x62>
		{
			ans = 1;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	73fb      	strb	r3, [r7, #15]
			for (uint8_t k = 0; k < len; k++)
 8000d62:	2300      	movs	r3, #0
 8000d64:	737b      	strb	r3, [r7, #13]
 8000d66:	e00f      	b.n	8000d88 <String_in_SIM800BuffRx+0x54>
			{
				if (SIM800BuffRx[i+k] != exm[k])
 8000d68:	7bba      	ldrb	r2, [r7, #14]
 8000d6a:	7b7b      	ldrb	r3, [r7, #13]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	4a12      	ldr	r2, [pc, #72]	; (8000db8 <String_in_SIM800BuffRx+0x84>)
 8000d70:	5cd2      	ldrb	r2, [r2, r3]
 8000d72:	7b7b      	ldrb	r3, [r7, #13]
 8000d74:	6879      	ldr	r1, [r7, #4]
 8000d76:	440b      	add	r3, r1
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	d001      	beq.n	8000d82 <String_in_SIM800BuffRx+0x4e>
				{
					ans = 0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	73fb      	strb	r3, [r7, #15]
			for (uint8_t k = 0; k < len; k++)
 8000d82:	7b7b      	ldrb	r3, [r7, #13]
 8000d84:	3301      	adds	r3, #1
 8000d86:	737b      	strb	r3, [r7, #13]
 8000d88:	7b7a      	ldrb	r2, [r7, #13]
 8000d8a:	7b3b      	ldrb	r3, [r7, #12]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d3eb      	bcc.n	8000d68 <String_in_SIM800BuffRx+0x34>
				}
			}
			if (ans)
 8000d90:	7bfb      	ldrb	r3, [r7, #15]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d109      	bne.n	8000daa <String_in_SIM800BuffRx+0x76>
	for (uint8_t i = 0; i < BUFF_SIM_SIZE - len; i++)
 8000d96:	7bbb      	ldrb	r3, [r7, #14]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	73bb      	strb	r3, [r7, #14]
 8000d9c:	7bba      	ldrb	r2, [r7, #14]
 8000d9e:	7b3b      	ldrb	r3, [r7, #12]
 8000da0:	f1c3 034c 	rsb	r3, r3, #76	; 0x4c
 8000da4:	429a      	cmp	r2, r3
 8000da6:	dbd3      	blt.n	8000d50 <String_in_SIM800BuffRx+0x1c>
 8000da8:	e000      	b.n	8000dac <String_in_SIM800BuffRx+0x78>
				break;
 8000daa:	bf00      	nop
		}
	}
	return ans;
 8000dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	2000041c 	.word	0x2000041c

08000dbc <String_in_String>:

uint8_t String_in_String(uint8_t str[], uint8_t size, uint8_t exm[])
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	607a      	str	r2, [r7, #4]
 8000dc8:	72fb      	strb	r3, [r7, #11]
	uint8_t len = strlen(exm);
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f7ff fa20 	bl	8000210 <strlen>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	753b      	strb	r3, [r7, #20]
	uint8_t ans = 0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	75fb      	strb	r3, [r7, #23]
	for (uint8_t i = 0; i < size - len; i++)
 8000dd8:	2300      	movs	r3, #0
 8000dda:	75bb      	strb	r3, [r7, #22]
 8000ddc:	e028      	b.n	8000e30 <String_in_String+0x74>
	{
		if (str[i] == exm[0])
 8000dde:	7dbb      	ldrb	r3, [r7, #22]
 8000de0:	68fa      	ldr	r2, [r7, #12]
 8000de2:	4413      	add	r3, r2
 8000de4:	781a      	ldrb	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	429a      	cmp	r2, r3
 8000dec:	d11d      	bne.n	8000e2a <String_in_String+0x6e>
		{
			ans = 1;
 8000dee:	2301      	movs	r3, #1
 8000df0:	75fb      	strb	r3, [r7, #23]
			for (uint8_t k = 0; k < len; k++)
 8000df2:	2300      	movs	r3, #0
 8000df4:	757b      	strb	r3, [r7, #21]
 8000df6:	e011      	b.n	8000e1c <String_in_String+0x60>
			{
				if (str[i+k] != exm[k])
 8000df8:	7dba      	ldrb	r2, [r7, #22]
 8000dfa:	7d7b      	ldrb	r3, [r7, #21]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	461a      	mov	r2, r3
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	4413      	add	r3, r2
 8000e04:	781a      	ldrb	r2, [r3, #0]
 8000e06:	7d7b      	ldrb	r3, [r7, #21]
 8000e08:	6879      	ldr	r1, [r7, #4]
 8000e0a:	440b      	add	r3, r1
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	d001      	beq.n	8000e16 <String_in_String+0x5a>
				{
					ans = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	75fb      	strb	r3, [r7, #23]
			for (uint8_t k = 0; k < len; k++)
 8000e16:	7d7b      	ldrb	r3, [r7, #21]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	757b      	strb	r3, [r7, #21]
 8000e1c:	7d7a      	ldrb	r2, [r7, #21]
 8000e1e:	7d3b      	ldrb	r3, [r7, #20]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d3e9      	bcc.n	8000df8 <String_in_String+0x3c>
				}
			}
			if (ans)
 8000e24:	7dfb      	ldrb	r3, [r7, #23]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d109      	bne.n	8000e3e <String_in_String+0x82>
	for (uint8_t i = 0; i < size - len; i++)
 8000e2a:	7dbb      	ldrb	r3, [r7, #22]
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	75bb      	strb	r3, [r7, #22]
 8000e30:	7dba      	ldrb	r2, [r7, #22]
 8000e32:	7af9      	ldrb	r1, [r7, #11]
 8000e34:	7d3b      	ldrb	r3, [r7, #20]
 8000e36:	1acb      	subs	r3, r1, r3
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	dbd0      	blt.n	8000dde <String_in_String+0x22>
 8000e3c:	e000      	b.n	8000e40 <String_in_String+0x84>
				break;
 8000e3e:	bf00      	nop
		}
	}
	return ans;
 8000e40:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3718      	adds	r7, #24
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
	...

08000e4c <USER_UART_IRQHandler>:

void USER_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
	// file stm32f1xx_hal_uart.c
	// comment
	// Set the UART DMA Half transfer complete callback
	// huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt

	if(huart == &huart1) //Determine whether it is serial port 1
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a28      	ldr	r2, [pc, #160]	; (8000ef8 <USER_UART_IRQHandler+0xac>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d148      	bne.n	8000eee <USER_UART_IRQHandler+0xa2>
	{
		if(RESET != __HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE))   //Judging whether it is idle interruption
 8000e5c:	4b26      	ldr	r3, [pc, #152]	; (8000ef8 <USER_UART_IRQHandler+0xac>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f003 0310 	and.w	r3, r3, #16
 8000e66:	2b10      	cmp	r3, #16
 8000e68:	d141      	bne.n	8000eee <USER_UART_IRQHandler+0xa2>
		{
			HAL_UART_DMAStop(&huart1);
 8000e6a:	4823      	ldr	r0, [pc, #140]	; (8000ef8 <USER_UART_IRQHandler+0xac>)
 8000e6c:	f005 fcde 	bl	800682c <HAL_UART_DMAStop>
			__HAL_UART_CLEAR_IDLEFLAG(&huart1); //Clear idle interrupt sign (otherwise it will continue to enter interrupt)
 8000e70:	2300      	movs	r3, #0
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	4b20      	ldr	r3, [pc, #128]	; (8000ef8 <USER_UART_IRQHandler+0xac>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	4b1e      	ldr	r3, [pc, #120]	; (8000ef8 <USER_UART_IRQHandler+0xac>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
			RX = 1;
 8000e86:	4b1d      	ldr	r3, [pc, #116]	; (8000efc <USER_UART_IRQHandler+0xb0>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	701a      	strb	r2, [r3, #0]
			if (Broker_connect)
 8000e8c:	4b1c      	ldr	r3, [pc, #112]	; (8000f00 <USER_UART_IRQHandler+0xb4>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d02c      	beq.n	8000eee <USER_UART_IRQHandler+0xa2>
			{

				if (String_in_SIM800BuffRx(";;"))
 8000e94:	481b      	ldr	r0, [pc, #108]	; (8000f04 <USER_UART_IRQHandler+0xb8>)
 8000e96:	f7ff ff4d 	bl	8000d34 <String_in_SIM800BuffRx>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d018      	beq.n	8000ed2 <USER_UART_IRQHandler+0x86>
				{
					memcpy(&(Data_Queue.str), SIM800BuffRx, MESSAGE_TYPE_BUFF_SIZE);
 8000ea0:	4a19      	ldr	r2, [pc, #100]	; (8000f08 <USER_UART_IRQHandler+0xbc>)
 8000ea2:	4b1a      	ldr	r3, [pc, #104]	; (8000f0c <USER_UART_IRQHandler+0xc0>)
 8000ea4:	4610      	mov	r0, r2
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	2346      	movs	r3, #70	; 0x46
 8000eaa:	461a      	mov	r2, r3
 8000eac:	f00a ff08 	bl	800bcc0 <memcpy>
					memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8000eb0:	224c      	movs	r2, #76	; 0x4c
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4815      	ldr	r0, [pc, #84]	; (8000f0c <USER_UART_IRQHandler+0xc0>)
 8000eb6:	f00a ff11 	bl	800bcdc <memset>
					osMessageQueuePut(RxSIM800QueueHandle, &Data_Queue, 0, NULL);
 8000eba:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <USER_UART_IRQHandler+0xc4>)
 8000ebc:	6818      	ldr	r0, [r3, #0]
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	4911      	ldr	r1, [pc, #68]	; (8000f08 <USER_UART_IRQHandler+0xbc>)
 8000ec4:	f007 fb46 	bl	8008554 <osMessageQueuePut>
					HAL_UART_Receive_DMA(&huart1, SIM800BuffRx, BUFF_SIM_SIZE);
 8000ec8:	224c      	movs	r2, #76	; 0x4c
 8000eca:	4910      	ldr	r1, [pc, #64]	; (8000f0c <USER_UART_IRQHandler+0xc0>)
 8000ecc:	480a      	ldr	r0, [pc, #40]	; (8000ef8 <USER_UART_IRQHandler+0xac>)
 8000ece:	f005 fc7d 	bl	80067cc <HAL_UART_Receive_DMA>
				}

				if (!Tech_ans_wait)
 8000ed2:	4b10      	ldr	r3, [pc, #64]	; (8000f14 <USER_UART_IRQHandler+0xc8>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d109      	bne.n	8000eee <USER_UART_IRQHandler+0xa2>
				{
					memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8000eda:	224c      	movs	r2, #76	; 0x4c
 8000edc:	2100      	movs	r1, #0
 8000ede:	480b      	ldr	r0, [pc, #44]	; (8000f0c <USER_UART_IRQHandler+0xc0>)
 8000ee0:	f00a fefc 	bl	800bcdc <memset>
					HAL_UART_Receive_DMA(&huart1, SIM800BuffRx, BUFF_SIM_SIZE);
 8000ee4:	224c      	movs	r2, #76	; 0x4c
 8000ee6:	4909      	ldr	r1, [pc, #36]	; (8000f0c <USER_UART_IRQHandler+0xc0>)
 8000ee8:	4803      	ldr	r0, [pc, #12]	; (8000ef8 <USER_UART_IRQHandler+0xac>)
 8000eea:	f005 fc6f 	bl	80067cc <HAL_UART_Receive_DMA>

			}
			//HAL_UART_DMAStop(&huart1);
		}
	}
}
 8000eee:	bf00      	nop
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000164 	.word	0x20000164
 8000efc:	200003b3 	.word	0x200003b3
 8000f00:	200003b4 	.word	0x200003b4
 8000f04:	0800d08c 	.word	0x0800d08c
 8000f08:	200005f8 	.word	0x200005f8
 8000f0c:	2000041c 	.word	0x2000041c
 8000f10:	20000398 	.word	0x20000398
 8000f14:	200003b5 	.word	0x200003b5

08000f18 <SIM800_Ans>:
  * @brief  Waiting special answer from SIM800.
  * @param  exm[] String, that we expect.
  * @retval Is special answer in Receive buffer SIM800.
  */
uint8_t SIM800_Ans(uint8_t exm[])
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
	RX = 0;
 8000f20:	4b20      	ldr	r3, [pc, #128]	; (8000fa4 <SIM800_Ans+0x8c>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	701a      	strb	r2, [r3, #0]
	Tech_ans_wait = 1;
 8000f26:	4b20      	ldr	r3, [pc, #128]	; (8000fa8 <SIM800_Ans+0x90>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart1, SIM800BuffRx, BUFF_SIM_SIZE);
 8000f2c:	224c      	movs	r2, #76	; 0x4c
 8000f2e:	491f      	ldr	r1, [pc, #124]	; (8000fac <SIM800_Ans+0x94>)
 8000f30:	481f      	ldr	r0, [pc, #124]	; (8000fb0 <SIM800_Ans+0x98>)
 8000f32:	f005 fc4b 	bl	80067cc <HAL_UART_Receive_DMA>

	SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // permission counter
 8000f36:	4b1f      	ldr	r3, [pc, #124]	; (8000fb4 <SIM800_Ans+0x9c>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a1e      	ldr	r2, [pc, #120]	; (8000fb4 <SIM800_Ans+0x9c>)
 8000f3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f40:	6013      	str	r3, [r2, #0]
	DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;   // start counter
 8000f42:	4b1d      	ldr	r3, [pc, #116]	; (8000fb8 <SIM800_Ans+0xa0>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a1c      	ldr	r2, [pc, #112]	; (8000fb8 <SIM800_Ans+0xa0>)
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	6013      	str	r3, [r2, #0]

	uint32_t tacts = HAL_RCC_GetSysClockFreq() / 1000000;
 8000f4e:	f003 ff73 	bl	8004e38 <HAL_RCC_GetSysClockFreq>
 8000f52:	4603      	mov	r3, r0
 8000f54:	4a19      	ldr	r2, [pc, #100]	; (8000fbc <SIM800_Ans+0xa4>)
 8000f56:	fba2 2303 	umull	r2, r3, r2, r3
 8000f5a:	0c9b      	lsrs	r3, r3, #18
 8000f5c:	60fb      	str	r3, [r7, #12]
	tacts *= 6000000; //timeout - 6s
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	4a17      	ldr	r2, [pc, #92]	; (8000fc0 <SIM800_Ans+0xa8>)
 8000f62:	fb02 f303 	mul.w	r3, r2, r3
 8000f66:	60fb      	str	r3, [r7, #12]
	DWT->CYCCNT = 0; // clear counter
 8000f68:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <SIM800_Ans+0xa0>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	605a      	str	r2, [r3, #4]
	while (RX != 1 && DWT->CYCCNT < tacts) {};
 8000f6e:	bf00      	nop
 8000f70:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <SIM800_Ans+0x8c>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d004      	beq.n	8000f82 <SIM800_Ans+0x6a>
 8000f78:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <SIM800_Ans+0xa0>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	68fa      	ldr	r2, [r7, #12]
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d8f6      	bhi.n	8000f70 <SIM800_Ans+0x58>
	Tech_ans_wait = 0;
 8000f82:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <SIM800_Ans+0x90>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	701a      	strb	r2, [r3, #0]
	if (!String_in_SIM800BuffRx(exm))
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f7ff fed3 	bl	8000d34 <String_in_SIM800BuffRx>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d101      	bne.n	8000f98 <SIM800_Ans+0x80>
	{
		return 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	e000      	b.n	8000f9a <SIM800_Ans+0x82>
	}
	else
	{
		return 1;
 8000f98:	2301      	movs	r3, #1
	}
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	200003b3 	.word	0x200003b3
 8000fa8:	200003b5 	.word	0x200003b5
 8000fac:	2000041c 	.word	0x2000041c
 8000fb0:	20000164 	.word	0x20000164
 8000fb4:	e000edfc 	.word	0xe000edfc
 8000fb8:	e0001000 	.word	0xe0001000
 8000fbc:	431bde83 	.word	0x431bde83
 8000fc0:	005b8d80 	.word	0x005b8d80

08000fc4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if (!Start_SIM800 && Error_init) //if we have problems with SIM800, restart it
 8000fcc:	4b15      	ldr	r3, [pc, #84]	; (8001024 <StartDefaultTask+0x60>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d10e      	bne.n	8000ff2 <StartDefaultTask+0x2e>
 8000fd4:	4b14      	ldr	r3, [pc, #80]	; (8001028 <StartDefaultTask+0x64>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d00a      	beq.n	8000ff2 <StartDefaultTask+0x2e>
	  {
		  Error_init = 0;
 8000fdc:	4b12      	ldr	r3, [pc, #72]	; (8001028 <StartDefaultTask+0x64>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	701a      	strb	r2, [r3, #0]
		  SIM800StartTaskHandle = osThreadNew(StartSIM800Task, NULL, &SIM800StartTask_attributes);
 8000fe2:	4a12      	ldr	r2, [pc, #72]	; (800102c <StartDefaultTask+0x68>)
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4812      	ldr	r0, [pc, #72]	; (8001030 <StartDefaultTask+0x6c>)
 8000fe8:	f006 fe78 	bl	8007cdc <osThreadNew>
 8000fec:	4603      	mov	r3, r0
 8000fee:	4a11      	ldr	r2, [pc, #68]	; (8001034 <StartDefaultTask+0x70>)
 8000ff0:	6013      	str	r3, [r2, #0]
	  }

	  //show that program works
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8000ff2:	2140      	movs	r1, #64	; 0x40
 8000ff4:	4810      	ldr	r0, [pc, #64]	; (8001038 <StartDefaultTask+0x74>)
 8000ff6:	f003 fc74 	bl	80048e2 <HAL_GPIO_TogglePin>
	  osDelay(500);
 8000ffa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ffe:	f006 ff2c 	bl	8007e5a <osDelay>

	  //if we have flag, start getting data
	  if (Get_data && Broker_connect)
 8001002:	4b0e      	ldr	r3, [pc, #56]	; (800103c <StartDefaultTask+0x78>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d0e0      	beq.n	8000fcc <StartDefaultTask+0x8>
 800100a:	4b0d      	ldr	r3, [pc, #52]	; (8001040 <StartDefaultTask+0x7c>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d0dc      	beq.n	8000fcc <StartDefaultTask+0x8>
	  {
		osSemaphoreRelease(SemGetDataHandle);
 8001012:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <StartDefaultTask+0x80>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4618      	mov	r0, r3
 8001018:	f007 f9e4 	bl	80083e4 <osSemaphoreRelease>
		Get_data = 0;
 800101c:	4b07      	ldr	r3, [pc, #28]	; (800103c <StartDefaultTask+0x78>)
 800101e:	2200      	movs	r2, #0
 8001020:	701a      	strb	r2, [r3, #0]
	  if (!Start_SIM800 && Error_init) //if we have problems with SIM800, restart it
 8001022:	e7d3      	b.n	8000fcc <StartDefaultTask+0x8>
 8001024:	200003b2 	.word	0x200003b2
 8001028:	200003b0 	.word	0x200003b0
 800102c:	0800daac 	.word	0x0800daac
 8001030:	08001641 	.word	0x08001641
 8001034:	20000380 	.word	0x20000380
 8001038:	40020000 	.word	0x40020000
 800103c:	200003b6 	.word	0x200003b6
 8001040:	200003b4 	.word	0x200003b4
 8001044:	200003ac 	.word	0x200003ac

08001048 <StartGetDataTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGetDataTask */
void StartGetDataTask(void *argument)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b098      	sub	sp, #96	; 0x60
 800104c:	af02      	add	r7, sp, #8
 800104e:	6078      	str	r0, [r7, #4]
	uint16_t RS485CRC;
  /* Infinite loop */
  for(;;)
  {
	  // wait semaphore for measuring temperature
	  if (osSemaphoreAcquire(SemGetDataHandle, osWaitForever) == osOK)
 8001050:	4b63      	ldr	r3, [pc, #396]	; (80011e0 <StartGetDataTask+0x198>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f04f 31ff 	mov.w	r1, #4294967295
 8001058:	4618      	mov	r0, r3
 800105a:	f007 f971 	bl	8008340 <osSemaphoreAcquire>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d1f5      	bne.n	8001050 <StartGetDataTask+0x8>
	  {

		  // get temp and humidity
		  // make string
		  RS485_buf[0] = 0x01; //slave address
 8001064:	4b5f      	ldr	r3, [pc, #380]	; (80011e4 <StartGetDataTask+0x19c>)
 8001066:	2201      	movs	r2, #1
 8001068:	701a      	strb	r2, [r3, #0]
		  RS485_buf[1] = 0x04; //function code
 800106a:	4b5e      	ldr	r3, [pc, #376]	; (80011e4 <StartGetDataTask+0x19c>)
 800106c:	2204      	movs	r2, #4
 800106e:	705a      	strb	r2, [r3, #1]
		  RS485_buf[2] = 0x00; //
 8001070:	4b5c      	ldr	r3, [pc, #368]	; (80011e4 <StartGetDataTask+0x19c>)
 8001072:	2200      	movs	r2, #0
 8001074:	709a      	strb	r2, [r3, #2]
		  RS485_buf[3] = 0x01; // starting address
 8001076:	4b5b      	ldr	r3, [pc, #364]	; (80011e4 <StartGetDataTask+0x19c>)
 8001078:	2201      	movs	r2, #1
 800107a:	70da      	strb	r2, [r3, #3]
		  RS485_buf[4] = 0x00; //
 800107c:	4b59      	ldr	r3, [pc, #356]	; (80011e4 <StartGetDataTask+0x19c>)
 800107e:	2200      	movs	r2, #0
 8001080:	711a      	strb	r2, [r3, #4]
		  RS485_buf[5] = 0x02; // count of register
 8001082:	4b58      	ldr	r3, [pc, #352]	; (80011e4 <StartGetDataTask+0x19c>)
 8001084:	2202      	movs	r2, #2
 8001086:	715a      	strb	r2, [r3, #5]

		  // calculate CRC
		  RS485CRC = usMBCRC16(RS485_buf, 6);
 8001088:	2106      	movs	r1, #6
 800108a:	4856      	ldr	r0, [pc, #344]	; (80011e4 <StartGetDataTask+0x19c>)
 800108c:	f7ff fa9a 	bl	80005c4 <usMBCRC16>
 8001090:	4603      	mov	r3, r0
 8001092:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
		  RS485_buf[6] = RS485CRC;
 8001096:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800109a:	b2da      	uxtb	r2, r3
 800109c:	4b51      	ldr	r3, [pc, #324]	; (80011e4 <StartGetDataTask+0x19c>)
 800109e:	719a      	strb	r2, [r3, #6]
		  RS485CRC >>= 8;
 80010a0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80010a4:	0a1b      	lsrs	r3, r3, #8
 80010a6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
		  RS485_buf[7] = RS485CRC;
 80010aa:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	4b4c      	ldr	r3, [pc, #304]	; (80011e4 <StartGetDataTask+0x19c>)
 80010b2:	71da      	strb	r2, [r3, #7]

		  // send request
		  UART2_TX_finish = 0;
 80010b4:	4b4c      	ldr	r3, [pc, #304]	; (80011e8 <StartGetDataTask+0x1a0>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
 80010ba:	2201      	movs	r2, #1
 80010bc:	2108      	movs	r1, #8
 80010be:	484b      	ldr	r0, [pc, #300]	; (80011ec <StartGetDataTask+0x1a4>)
 80010c0:	f003 fbf6 	bl	80048b0 <HAL_GPIO_WritePin>
		  HAL_UART_Transmit_DMA(&huart2, RS485_buf, 8);
 80010c4:	2208      	movs	r2, #8
 80010c6:	4947      	ldr	r1, [pc, #284]	; (80011e4 <StartGetDataTask+0x19c>)
 80010c8:	4849      	ldr	r0, [pc, #292]	; (80011f0 <StartGetDataTask+0x1a8>)
 80010ca:	f005 fb01 	bl	80066d0 <HAL_UART_Transmit_DMA>
		  while (!UART2_TX_finish) {}
 80010ce:	bf00      	nop
 80010d0:	4b45      	ldr	r3, [pc, #276]	; (80011e8 <StartGetDataTask+0x1a0>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d0fb      	beq.n	80010d0 <StartGetDataTask+0x88>

		  // get ans
		  UART2_RX_finish = 0;
 80010d8:	4b46      	ldr	r3, [pc, #280]	; (80011f4 <StartGetDataTask+0x1ac>)
 80010da:	2200      	movs	r2, #0
 80010dc:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 80010de:	2200      	movs	r2, #0
 80010e0:	2108      	movs	r1, #8
 80010e2:	4842      	ldr	r0, [pc, #264]	; (80011ec <StartGetDataTask+0x1a4>)
 80010e4:	f003 fbe4 	bl	80048b0 <HAL_GPIO_WritePin>
		  HAL_UART_Receive_DMA(&huart2, RS485_buf, 9);
 80010e8:	2209      	movs	r2, #9
 80010ea:	493e      	ldr	r1, [pc, #248]	; (80011e4 <StartGetDataTask+0x19c>)
 80010ec:	4840      	ldr	r0, [pc, #256]	; (80011f0 <StartGetDataTask+0x1a8>)
 80010ee:	f005 fb6d 	bl	80067cc <HAL_UART_Receive_DMA>
		  while (!UART2_RX_finish) {}
 80010f2:	bf00      	nop
 80010f4:	4b3f      	ldr	r3, [pc, #252]	; (80011f4 <StartGetDataTask+0x1ac>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d0fb      	beq.n	80010f4 <StartGetDataTask+0xac>

		  // calculate CRC
		  RS485CRC = usMBCRC16(RS485_buf, 7);
 80010fc:	2107      	movs	r1, #7
 80010fe:	4839      	ldr	r0, [pc, #228]	; (80011e4 <StartGetDataTask+0x19c>)
 8001100:	f7ff fa60 	bl	80005c4 <usMBCRC16>
 8001104:	4603      	mov	r3, r0
 8001106:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
		  uint16_t RS485CRC1 = (uint16_t)( RS485_buf[8] << 8 | RS485_buf[7] );
 800110a:	4b36      	ldr	r3, [pc, #216]	; (80011e4 <StartGetDataTask+0x19c>)
 800110c:	7a1b      	ldrb	r3, [r3, #8]
 800110e:	021b      	lsls	r3, r3, #8
 8001110:	b21a      	sxth	r2, r3
 8001112:	4b34      	ldr	r3, [pc, #208]	; (80011e4 <StartGetDataTask+0x19c>)
 8001114:	79db      	ldrb	r3, [r3, #7]
 8001116:	b21b      	sxth	r3, r3
 8001118:	4313      	orrs	r3, r2
 800111a:	b21b      	sxth	r3, r3
 800111c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
		  uint8_t ok = (RS485CRC1 == RS485CRC) ? 1 : 0;
 8001120:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001124:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001128:	429a      	cmp	r2, r3
 800112a:	bf0c      	ite	eq
 800112c:	2301      	moveq	r3, #1
 800112e:	2300      	movne	r3, #0
 8001130:	b2db      	uxtb	r3, r3
 8001132:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

		  if (ok)
 8001136:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800113a:	2b00      	cmp	r3, #0
 800113c:	d026      	beq.n	800118c <StartGetDataTask+0x144>
		  {
			  temp = (uint16_t)( RS485_buf[3] << 8 | RS485_buf[4] );
 800113e:	4b29      	ldr	r3, [pc, #164]	; (80011e4 <StartGetDataTask+0x19c>)
 8001140:	78db      	ldrb	r3, [r3, #3]
 8001142:	021b      	lsls	r3, r3, #8
 8001144:	b21a      	sxth	r2, r3
 8001146:	4b27      	ldr	r3, [pc, #156]	; (80011e4 <StartGetDataTask+0x19c>)
 8001148:	791b      	ldrb	r3, [r3, #4]
 800114a:	b21b      	sxth	r3, r3
 800114c:	4313      	orrs	r3, r2
 800114e:	b21b      	sxth	r3, r3
 8001150:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
			  humidity = (uint16_t)( RS485_buf[5] << 8 | RS485_buf[6] );
 8001154:	4b23      	ldr	r3, [pc, #140]	; (80011e4 <StartGetDataTask+0x19c>)
 8001156:	795b      	ldrb	r3, [r3, #5]
 8001158:	021b      	lsls	r3, r3, #8
 800115a:	b21a      	sxth	r2, r3
 800115c:	4b21      	ldr	r3, [pc, #132]	; (80011e4 <StartGetDataTask+0x19c>)
 800115e:	799b      	ldrb	r3, [r3, #6]
 8001160:	b21b      	sxth	r3, r3
 8001162:	4313      	orrs	r3, r2
 8001164:	b21b      	sxth	r3, r3
 8001166:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54

			  temp /= 10;
 800116a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800116e:	4a22      	ldr	r2, [pc, #136]	; (80011f8 <StartGetDataTask+0x1b0>)
 8001170:	fba2 2303 	umull	r2, r3, r2, r3
 8001174:	08db      	lsrs	r3, r3, #3
 8001176:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
			  humidity /= 10;
 800117a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800117e:	4a1e      	ldr	r2, [pc, #120]	; (80011f8 <StartGetDataTask+0x1b0>)
 8001180:	fba2 2303 	umull	r2, r3, r2, r3
 8001184:	08db      	lsrs	r3, r3, #3
 8001186:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 800118a:	e005      	b.n	8001198 <StartGetDataTask+0x150>
		  }
		  else
		  {
			  temp = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
			  humidity = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54

		  // get smoke and move


		  // get power
		  power = !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);
 8001198:	2104      	movs	r1, #4
 800119a:	4814      	ldr	r0, [pc, #80]	; (80011ec <StartGetDataTask+0x1a4>)
 800119c:	f003 fb70 	bl	8004880 <HAL_GPIO_ReadPin>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	bf0c      	ite	eq
 80011a6:	2301      	moveq	r3, #1
 80011a8:	2300      	movne	r3, #0
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

		  // put string with data to queue
		  sprintf(&(msg.str), "{\"temp\":%d,\"humidity\":%d,\"power\":%d}\r\n\0", temp, humidity, power);
 80011b0:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 80011b4:	f8b7 1054 	ldrh.w	r1, [r7, #84]	; 0x54
 80011b8:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80011bc:	f107 0008 	add.w	r0, r7, #8
 80011c0:	9300      	str	r3, [sp, #0]
 80011c2:	460b      	mov	r3, r1
 80011c4:	490d      	ldr	r1, [pc, #52]	; (80011fc <StartGetDataTask+0x1b4>)
 80011c6:	f00a fdc5 	bl	800bd54 <siprintf>
		  osMessageQueuePut(SIM800SendQueueHandle, &msg, 0, osWaitForever);
 80011ca:	4b0d      	ldr	r3, [pc, #52]	; (8001200 <StartGetDataTask+0x1b8>)
 80011cc:	6818      	ldr	r0, [r3, #0]
 80011ce:	f107 0108 	add.w	r1, r7, #8
 80011d2:	f04f 33ff 	mov.w	r3, #4294967295
 80011d6:	2200      	movs	r2, #0
 80011d8:	f007 f9bc 	bl	8008554 <osMessageQueuePut>
	  if (osSemaphoreAcquire(SemGetDataHandle, osWaitForever) == osOK)
 80011dc:	e738      	b.n	8001050 <StartGetDataTask+0x8>
 80011de:	bf00      	nop
 80011e0:	200003ac 	.word	0x200003ac
 80011e4:	200003bc 	.word	0x200003bc
 80011e8:	200003b7 	.word	0x200003b7
 80011ec:	40020800 	.word	0x40020800
 80011f0:	200001a8 	.word	0x200001a8
 80011f4:	200003b8 	.word	0x200003b8
 80011f8:	cccccccd 	.word	0xcccccccd
 80011fc:	0800d090 	.word	0x0800d090
 8001200:	20000394 	.word	0x20000394

08001204 <StartDebugTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDebugTask */
void StartDebugTask(void *argument)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b094      	sub	sp, #80	; 0x50
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDebugTask */
	message_type msg;
  /* Infinite loop */
  for(;;)
  {
	  if (osMessageQueueGet(debugQueueHandle, &msg, 0, osWaitForever) == osOK)
 800120c:	4b04      	ldr	r3, [pc, #16]	; (8001220 <StartDebugTask+0x1c>)
 800120e:	6818      	ldr	r0, [r3, #0]
 8001210:	f107 0108 	add.w	r1, r7, #8
 8001214:	f04f 33ff 	mov.w	r3, #4294967295
 8001218:	2200      	movs	r2, #0
 800121a:	f007 f9fb 	bl	8008614 <osMessageQueueGet>
 800121e:	e7f5      	b.n	800120c <StartDebugTask+0x8>
 8001220:	20000390 	.word	0x20000390

08001224 <StartSIM800SendTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSIM800SendTask */
void StartSIM800SendTask(void *argument)
{
 8001224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001226:	b0b9      	sub	sp, #228	; 0xe4
 8001228:	af10      	add	r7, sp, #64	; 0x40
 800122a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSIM800SendTask */
	message_type msg;

	//+ message_len(1 byte) + topic_len(2 bytes) + topic + message
    uint8_t send_MQTT_message[BUFF_SIM_SIZE] = {};
 800122c:	2300      	movs	r3, #0
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	f107 0310 	add.w	r3, r7, #16
 8001234:	2248      	movs	r2, #72	; 0x48
 8001236:	2100      	movs	r1, #0
 8001238:	4618      	mov	r0, r3
 800123a:	f00a fd4f 	bl	800bcdc <memset>
    uint8_t ans;
  /* Infinite loop */
  for(;;)
  {
	  if (osMessageQueueGet(SIM800SendQueueHandle, &msg, 0, osWaitForever) == osOK)
 800123e:	4b50      	ldr	r3, [pc, #320]	; (8001380 <StartSIM800SendTask+0x15c>)
 8001240:	6818      	ldr	r0, [r3, #0]
 8001242:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001246:	f04f 33ff 	mov.w	r3, #4294967295
 800124a:	2200      	movs	r2, #0
 800124c:	f007 f9e2 	bl	8008614 <osMessageQueueGet>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d1f3      	bne.n	800123e <StartSIM800SendTask+0x1a>
	  {
		  if (osMutexAcquire(UART1MutexHandle, osWaitForever) == osOK)
 8001256:	4b4b      	ldr	r3, [pc, #300]	; (8001384 <StartSIM800SendTask+0x160>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f04f 31ff 	mov.w	r1, #4294967295
 800125e:	4618      	mov	r0, r3
 8001260:	f006 ff5c 	bl	800811c <osMutexAcquire>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d1e9      	bne.n	800123e <StartSIM800SendTask+0x1a>
		  {
			  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 800126a:	4b47      	ldr	r3, [pc, #284]	; (8001388 <StartSIM800SendTask+0x164>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	68da      	ldr	r2, [r3, #12]
 8001270:	4b45      	ldr	r3, [pc, #276]	; (8001388 <StartSIM800SendTask+0x164>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f042 0210 	orr.w	r2, r2, #16
 8001278:	60da      	str	r2, [r3, #12]

			  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 800127a:	224c      	movs	r2, #76	; 0x4c
 800127c:	2100      	movs	r1, #0
 800127e:	4843      	ldr	r0, [pc, #268]	; (800138c <StartSIM800SendTask+0x168>)
 8001280:	f00a fd2c 	bl	800bcdc <memset>
			  sprintf(send_MQTT_message,"AT+CIPSEND=%d\r\n\0",strlen(msg.str) + strlen(TOPIC) + 4);
 8001284:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001288:	4618      	mov	r0, r3
 800128a:	f7fe ffc1 	bl	8000210 <strlen>
 800128e:	4604      	mov	r4, r0
 8001290:	483f      	ldr	r0, [pc, #252]	; (8001390 <StartSIM800SendTask+0x16c>)
 8001292:	f7fe ffbd 	bl	8000210 <strlen>
 8001296:	4603      	mov	r3, r0
 8001298:	4423      	add	r3, r4
 800129a:	1d1a      	adds	r2, r3, #4
 800129c:	f107 030c 	add.w	r3, r7, #12
 80012a0:	493c      	ldr	r1, [pc, #240]	; (8001394 <StartSIM800SendTask+0x170>)
 80012a2:	4618      	mov	r0, r3
 80012a4:	f00a fd56 	bl	800bd54 <siprintf>
			  HAL_UART_Transmit_DMA(&huart1, send_MQTT_message, strlen(send_MQTT_message));
 80012a8:	f107 030c 	add.w	r3, r7, #12
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7fe ffaf 	bl	8000210 <strlen>
 80012b2:	4603      	mov	r3, r0
 80012b4:	b29a      	uxth	r2, r3
 80012b6:	f107 030c 	add.w	r3, r7, #12
 80012ba:	4619      	mov	r1, r3
 80012bc:	4832      	ldr	r0, [pc, #200]	; (8001388 <StartSIM800SendTask+0x164>)
 80012be:	f005 fa07 	bl	80066d0 <HAL_UART_Transmit_DMA>
			  ans = SIM800_Ans(">");
 80012c2:	4835      	ldr	r0, [pc, #212]	; (8001398 <StartSIM800SendTask+0x174>)
 80012c4:	f7ff fe28 	bl	8000f18 <SIM800_Ans>
 80012c8:	4603      	mov	r3, r0
 80012ca:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			  if (!ans)
			  {

			  }
			  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80012ce:	224c      	movs	r2, #76	; 0x4c
 80012d0:	2100      	movs	r1, #0
 80012d2:	482e      	ldr	r0, [pc, #184]	; (800138c <StartSIM800SendTask+0x168>)
 80012d4:	f00a fd02 	bl	800bcdc <memset>
			  osDelay(100);
 80012d8:	2064      	movs	r0, #100	; 0x64
 80012da:	f006 fdbe 	bl	8007e5a <osDelay>

			  //make string for transmit
			  Make_MQTT_send_string(send_MQTT_message, msg);
 80012de:	f107 060c 	add.w	r6, r7, #12
 80012e2:	466c      	mov	r4, sp
 80012e4:	f107 0564 	add.w	r5, r7, #100	; 0x64
 80012e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012f8:	c403      	stmia	r4!, {r0, r1}
 80012fa:	8022      	strh	r2, [r4, #0]
 80012fc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001300:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001302:	4630      	mov	r0, r6
 8001304:	f7ff fccc 	bl	8000ca0 <Make_MQTT_send_string>
			  HAL_UART_Transmit_DMA(&huart1, send_MQTT_message, strlen(msg.str) + strlen(TOPIC) + 4);
 8001308:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800130c:	4618      	mov	r0, r3
 800130e:	f7fe ff7f 	bl	8000210 <strlen>
 8001312:	4603      	mov	r3, r0
 8001314:	b29c      	uxth	r4, r3
 8001316:	481e      	ldr	r0, [pc, #120]	; (8001390 <StartSIM800SendTask+0x16c>)
 8001318:	f7fe ff7a 	bl	8000210 <strlen>
 800131c:	4603      	mov	r3, r0
 800131e:	b29b      	uxth	r3, r3
 8001320:	4423      	add	r3, r4
 8001322:	b29b      	uxth	r3, r3
 8001324:	3304      	adds	r3, #4
 8001326:	b29a      	uxth	r2, r3
 8001328:	f107 030c 	add.w	r3, r7, #12
 800132c:	4619      	mov	r1, r3
 800132e:	4816      	ldr	r0, [pc, #88]	; (8001388 <StartSIM800SendTask+0x164>)
 8001330:	f005 f9ce 	bl	80066d0 <HAL_UART_Transmit_DMA>

			  ans = SIM800_Ans("\x30"); //our transmited message
 8001334:	4819      	ldr	r0, [pc, #100]	; (800139c <StartSIM800SendTask+0x178>)
 8001336:	f7ff fdef 	bl	8000f18 <SIM800_Ans>
 800133a:	4603      	mov	r3, r0
 800133c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			  if (!ans)
 8001340:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001344:	2b00      	cmp	r3, #0
 8001346:	d10a      	bne.n	800135e <StartSIM800SendTask+0x13a>
			  {
				  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001348:	224c      	movs	r2, #76	; 0x4c
 800134a:	2100      	movs	r1, #0
 800134c:	480f      	ldr	r0, [pc, #60]	; (800138c <StartSIM800SendTask+0x168>)
 800134e:	f00a fcc5 	bl	800bcdc <memset>
				  ans = SIM800_Ans("\x30"); //our transmited message
 8001352:	4812      	ldr	r0, [pc, #72]	; (800139c <StartSIM800SendTask+0x178>)
 8001354:	f7ff fde0 	bl	8000f18 <SIM800_Ans>
 8001358:	4603      	mov	r3, r0
 800135a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				  {

				  }
			  }

			  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 800135e:	224c      	movs	r2, #76	; 0x4c
 8001360:	2100      	movs	r1, #0
 8001362:	480a      	ldr	r0, [pc, #40]	; (800138c <StartSIM800SendTask+0x168>)
 8001364:	f00a fcba 	bl	800bcdc <memset>
			  HAL_UART_Receive_DMA(&huart1, SIM800BuffRx, BUFF_SIM_SIZE);
 8001368:	224c      	movs	r2, #76	; 0x4c
 800136a:	4908      	ldr	r1, [pc, #32]	; (800138c <StartSIM800SendTask+0x168>)
 800136c:	4806      	ldr	r0, [pc, #24]	; (8001388 <StartSIM800SendTask+0x164>)
 800136e:	f005 fa2d 	bl	80067cc <HAL_UART_Receive_DMA>
			  osMutexRelease(UART1MutexHandle); //release UART for SIM800
 8001372:	4b04      	ldr	r3, [pc, #16]	; (8001384 <StartSIM800SendTask+0x160>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4618      	mov	r0, r3
 8001378:	f006 ff1b 	bl	80081b2 <osMutexRelease>
	  if (osMessageQueueGet(SIM800SendQueueHandle, &msg, 0, osWaitForever) == osOK)
 800137c:	e75f      	b.n	800123e <StartSIM800SendTask+0x1a>
 800137e:	bf00      	nop
 8001380:	20000394 	.word	0x20000394
 8001384:	200003a4 	.word	0x200003a4
 8001388:	20000164 	.word	0x20000164
 800138c:	2000041c 	.word	0x2000041c
 8001390:	20000010 	.word	0x20000010
 8001394:	0800d0b8 	.word	0x0800d0b8
 8001398:	0800d0cc 	.word	0x0800d0cc
 800139c:	0800d0d0 	.word	0x0800d0d0

080013a0 <PINGStartTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_PINGStartTask */
void PINGStartTask(void *argument)
{
 80013a0:	b5b0      	push	{r4, r5, r7, lr}
 80013a2:	b0a8      	sub	sp, #160	; 0xa0
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PINGStartTask */
	message_type msg;
	uint8_t send_MQTT_message[BUFF_SIM_SIZE] = {};
 80013a8:	2300      	movs	r3, #0
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	f107 0310 	add.w	r3, r7, #16
 80013b0:	2248      	movs	r2, #72	; 0x48
 80013b2:	2100      	movs	r1, #0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f00a fc91 	bl	800bcdc <memset>
	uint8_t ans = 0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
  /* Infinite loop */
  for(;;)
  {
	  if (osSemaphoreAcquire(PINGSemHandle, osWaitForever) == osOK)
 80013c0:	4b8c      	ldr	r3, [pc, #560]	; (80015f4 <PINGStartTask+0x254>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f04f 31ff 	mov.w	r1, #4294967295
 80013c8:	4618      	mov	r0, r3
 80013ca:	f006 ffb9 	bl	8008340 <osSemaphoreAcquire>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d1f5      	bne.n	80013c0 <PINGStartTask+0x20>
	  {
		  if (osMutexAcquire(UART1MutexHandle, osWaitForever) == osOK)
 80013d4:	4b88      	ldr	r3, [pc, #544]	; (80015f8 <PINGStartTask+0x258>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f04f 31ff 	mov.w	r1, #4294967295
 80013dc:	4618      	mov	r0, r3
 80013de:	f006 fe9d 	bl	800811c <osMutexAcquire>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1eb      	bne.n	80013c0 <PINGStartTask+0x20>
		  {

			  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80013e8:	224c      	movs	r2, #76	; 0x4c
 80013ea:	2100      	movs	r1, #0
 80013ec:	4883      	ldr	r0, [pc, #524]	; (80015fc <PINGStartTask+0x25c>)
 80013ee:	f00a fc75 	bl	800bcdc <memset>
			  sprintf(send_MQTT_message,"AT+CIPSEND=2\r\n\0");
 80013f2:	f107 030c 	add.w	r3, r7, #12
 80013f6:	4982      	ldr	r1, [pc, #520]	; (8001600 <PINGStartTask+0x260>)
 80013f8:	4618      	mov	r0, r3
 80013fa:	f00a fcab 	bl	800bd54 <siprintf>
			  HAL_UART_Transmit_DMA(&huart1, send_MQTT_message, strlen(send_MQTT_message));
 80013fe:	f107 030c 	add.w	r3, r7, #12
 8001402:	4618      	mov	r0, r3
 8001404:	f7fe ff04 	bl	8000210 <strlen>
 8001408:	4603      	mov	r3, r0
 800140a:	b29a      	uxth	r2, r3
 800140c:	f107 030c 	add.w	r3, r7, #12
 8001410:	4619      	mov	r1, r3
 8001412:	487c      	ldr	r0, [pc, #496]	; (8001604 <PINGStartTask+0x264>)
 8001414:	f005 f95c 	bl	80066d0 <HAL_UART_Transmit_DMA>
			  ans = SIM800_Ans(">");
 8001418:	487b      	ldr	r0, [pc, #492]	; (8001608 <PINGStartTask+0x268>)
 800141a:	f7ff fd7d 	bl	8000f18 <SIM800_Ans>
 800141e:	4603      	mov	r3, r0
 8001420:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			  if (!ans)
 8001424:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001428:	2b00      	cmp	r3, #0
 800142a:	d12f      	bne.n	800148c <PINGStartTask+0xec>
			  {
				  strcpy(&(msg.str), "FAILE_send_PING1\r\n\0");
 800142c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001430:	4a76      	ldr	r2, [pc, #472]	; (800160c <PINGStartTask+0x26c>)
 8001432:	461c      	mov	r4, r3
 8001434:	4615      	mov	r5, r2
 8001436:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001438:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800143a:	682b      	ldr	r3, [r5, #0]
 800143c:	461a      	mov	r2, r3
 800143e:	8022      	strh	r2, [r4, #0]
 8001440:	3402      	adds	r4, #2
 8001442:	0c1b      	lsrs	r3, r3, #16
 8001444:	7023      	strb	r3, [r4, #0]
				  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001446:	4b72      	ldr	r3, [pc, #456]	; (8001610 <PINGStartTask+0x270>)
 8001448:	6818      	ldr	r0, [r3, #0]
 800144a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800144e:	f04f 33ff 	mov.w	r3, #4294967295
 8001452:	2200      	movs	r2, #0
 8001454:	f007 f87e 	bl	8008554 <osMessageQueuePut>
				  Error_ping = 1;
 8001458:	4b6e      	ldr	r3, [pc, #440]	; (8001614 <PINGStartTask+0x274>)
 800145a:	2201      	movs	r2, #1
 800145c:	701a      	strb	r2, [r3, #0]
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1); //signal for error
 800145e:	2201      	movs	r2, #1
 8001460:	2108      	movs	r1, #8
 8001462:	486d      	ldr	r0, [pc, #436]	; (8001618 <PINGStartTask+0x278>)
 8001464:	f003 fa24 	bl	80048b0 <HAL_GPIO_WritePin>
				  osMutexRelease(UART1MutexHandle); //release UART for SIM800
 8001468:	4b63      	ldr	r3, [pc, #396]	; (80015f8 <PINGStartTask+0x258>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4618      	mov	r0, r3
 800146e:	f006 fea0 	bl	80081b2 <osMutexRelease>
				  //start task to try reconnect
				  MQTTConnectTaskHandle = osThreadNew(StartMQTTConnectTask, NULL, &MQTTConnectTask_attributes);
 8001472:	4a6a      	ldr	r2, [pc, #424]	; (800161c <PINGStartTask+0x27c>)
 8001474:	2100      	movs	r1, #0
 8001476:	486a      	ldr	r0, [pc, #424]	; (8001620 <PINGStartTask+0x280>)
 8001478:	f006 fc30 	bl	8007cdc <osThreadNew>
 800147c:	4603      	mov	r3, r0
 800147e:	4a69      	ldr	r2, [pc, #420]	; (8001624 <PINGStartTask+0x284>)
 8001480:	6013      	str	r3, [r2, #0]
				  //delete this thread
				  osThreadTerminate(PINGTaskHandle);
 8001482:	4b69      	ldr	r3, [pc, #420]	; (8001628 <PINGStartTask+0x288>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4618      	mov	r0, r3
 8001488:	f006 fcba 	bl	8007e00 <osThreadTerminate>
			  }
			  osDelay(200);
 800148c:	20c8      	movs	r0, #200	; 0xc8
 800148e:	f006 fce4 	bl	8007e5a <osDelay>
			  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001492:	224c      	movs	r2, #76	; 0x4c
 8001494:	2100      	movs	r1, #0
 8001496:	4859      	ldr	r0, [pc, #356]	; (80015fc <PINGStartTask+0x25c>)
 8001498:	f00a fc20 	bl	800bcdc <memset>
			  HAL_UART_Transmit_DMA(&huart1, PING, 2);
 800149c:	2202      	movs	r2, #2
 800149e:	4963      	ldr	r1, [pc, #396]	; (800162c <PINGStartTask+0x28c>)
 80014a0:	4858      	ldr	r0, [pc, #352]	; (8001604 <PINGStartTask+0x264>)
 80014a2:	f005 f915 	bl	80066d0 <HAL_UART_Transmit_DMA>
			  ans = SIM800_Ans(PING);
 80014a6:	4861      	ldr	r0, [pc, #388]	; (800162c <PINGStartTask+0x28c>)
 80014a8:	f7ff fd36 	bl	8000f18 <SIM800_Ans>
 80014ac:	4603      	mov	r3, r0
 80014ae:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			  if (!ans)
 80014b2:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d12f      	bne.n	800151a <PINGStartTask+0x17a>
			  {
				  strcpy(&(msg.str), "FAILE_send_PING2\r\n\0");
 80014ba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80014be:	4a5c      	ldr	r2, [pc, #368]	; (8001630 <PINGStartTask+0x290>)
 80014c0:	461c      	mov	r4, r3
 80014c2:	4615      	mov	r5, r2
 80014c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014c8:	682b      	ldr	r3, [r5, #0]
 80014ca:	461a      	mov	r2, r3
 80014cc:	8022      	strh	r2, [r4, #0]
 80014ce:	3402      	adds	r4, #2
 80014d0:	0c1b      	lsrs	r3, r3, #16
 80014d2:	7023      	strb	r3, [r4, #0]
				  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 80014d4:	4b4e      	ldr	r3, [pc, #312]	; (8001610 <PINGStartTask+0x270>)
 80014d6:	6818      	ldr	r0, [r3, #0]
 80014d8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80014dc:	f04f 33ff 	mov.w	r3, #4294967295
 80014e0:	2200      	movs	r2, #0
 80014e2:	f007 f837 	bl	8008554 <osMessageQueuePut>
				  Error_ping = 1;
 80014e6:	4b4b      	ldr	r3, [pc, #300]	; (8001614 <PINGStartTask+0x274>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	701a      	strb	r2, [r3, #0]
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
 80014ec:	2201      	movs	r2, #1
 80014ee:	2108      	movs	r1, #8
 80014f0:	4849      	ldr	r0, [pc, #292]	; (8001618 <PINGStartTask+0x278>)
 80014f2:	f003 f9dd 	bl	80048b0 <HAL_GPIO_WritePin>
				  osMutexRelease(UART1MutexHandle);
 80014f6:	4b40      	ldr	r3, [pc, #256]	; (80015f8 <PINGStartTask+0x258>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f006 fe59 	bl	80081b2 <osMutexRelease>
				  MQTTConnectTaskHandle = osThreadNew(StartMQTTConnectTask, NULL, &MQTTConnectTask_attributes);
 8001500:	4a46      	ldr	r2, [pc, #280]	; (800161c <PINGStartTask+0x27c>)
 8001502:	2100      	movs	r1, #0
 8001504:	4846      	ldr	r0, [pc, #280]	; (8001620 <PINGStartTask+0x280>)
 8001506:	f006 fbe9 	bl	8007cdc <osThreadNew>
 800150a:	4603      	mov	r3, r0
 800150c:	4a45      	ldr	r2, [pc, #276]	; (8001624 <PINGStartTask+0x284>)
 800150e:	6013      	str	r3, [r2, #0]
				  osThreadTerminate(PINGTaskHandle);
 8001510:	4b45      	ldr	r3, [pc, #276]	; (8001628 <PINGStartTask+0x288>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4618      	mov	r0, r3
 8001516:	f006 fc73 	bl	8007e00 <osThreadTerminate>
			  }
			  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 800151a:	224c      	movs	r2, #76	; 0x4c
 800151c:	2100      	movs	r1, #0
 800151e:	4837      	ldr	r0, [pc, #220]	; (80015fc <PINGStartTask+0x25c>)
 8001520:	f00a fbdc 	bl	800bcdc <memset>
			  ans = SIM800_Ans(PING_ASK);
 8001524:	4843      	ldr	r0, [pc, #268]	; (8001634 <PINGStartTask+0x294>)
 8001526:	f7ff fcf7 	bl	8000f18 <SIM800_Ans>
 800152a:	4603      	mov	r3, r0
 800152c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			  if (!ans)
 8001530:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001534:	2b00      	cmp	r3, #0
 8001536:	d13e      	bne.n	80015b6 <PINGStartTask+0x216>
			  {
				  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001538:	224c      	movs	r2, #76	; 0x4c
 800153a:	2100      	movs	r1, #0
 800153c:	482f      	ldr	r0, [pc, #188]	; (80015fc <PINGStartTask+0x25c>)
 800153e:	f00a fbcd 	bl	800bcdc <memset>
				  ans = SIM800_Ans(PING_ASK);
 8001542:	483c      	ldr	r0, [pc, #240]	; (8001634 <PINGStartTask+0x294>)
 8001544:	f7ff fce8 	bl	8000f18 <SIM800_Ans>
 8001548:	4603      	mov	r3, r0
 800154a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				  if (!ans)
 800154e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001552:	2b00      	cmp	r3, #0
 8001554:	d12f      	bne.n	80015b6 <PINGStartTask+0x216>
				  {
					  strcpy(&(msg.str), "FAILE_send_PING3\r\n\0");
 8001556:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800155a:	4a37      	ldr	r2, [pc, #220]	; (8001638 <PINGStartTask+0x298>)
 800155c:	461c      	mov	r4, r3
 800155e:	4615      	mov	r5, r2
 8001560:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001562:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001564:	682b      	ldr	r3, [r5, #0]
 8001566:	461a      	mov	r2, r3
 8001568:	8022      	strh	r2, [r4, #0]
 800156a:	3402      	adds	r4, #2
 800156c:	0c1b      	lsrs	r3, r3, #16
 800156e:	7023      	strb	r3, [r4, #0]
					  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001570:	4b27      	ldr	r3, [pc, #156]	; (8001610 <PINGStartTask+0x270>)
 8001572:	6818      	ldr	r0, [r3, #0]
 8001574:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001578:	f04f 33ff 	mov.w	r3, #4294967295
 800157c:	2200      	movs	r2, #0
 800157e:	f006 ffe9 	bl	8008554 <osMessageQueuePut>
					  Error_ping = 1;
 8001582:	4b24      	ldr	r3, [pc, #144]	; (8001614 <PINGStartTask+0x274>)
 8001584:	2201      	movs	r2, #1
 8001586:	701a      	strb	r2, [r3, #0]
					  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
 8001588:	2201      	movs	r2, #1
 800158a:	2108      	movs	r1, #8
 800158c:	4822      	ldr	r0, [pc, #136]	; (8001618 <PINGStartTask+0x278>)
 800158e:	f003 f98f 	bl	80048b0 <HAL_GPIO_WritePin>
					  osMutexRelease(UART1MutexHandle);
 8001592:	4b19      	ldr	r3, [pc, #100]	; (80015f8 <PINGStartTask+0x258>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4618      	mov	r0, r3
 8001598:	f006 fe0b 	bl	80081b2 <osMutexRelease>
					  MQTTConnectTaskHandle = osThreadNew(StartMQTTConnectTask, NULL, &MQTTConnectTask_attributes);
 800159c:	4a1f      	ldr	r2, [pc, #124]	; (800161c <PINGStartTask+0x27c>)
 800159e:	2100      	movs	r1, #0
 80015a0:	481f      	ldr	r0, [pc, #124]	; (8001620 <PINGStartTask+0x280>)
 80015a2:	f006 fb9b 	bl	8007cdc <osThreadNew>
 80015a6:	4603      	mov	r3, r0
 80015a8:	4a1e      	ldr	r2, [pc, #120]	; (8001624 <PINGStartTask+0x284>)
 80015aa:	6013      	str	r3, [r2, #0]
					  osThreadTerminate(PINGTaskHandle);
 80015ac:	4b1e      	ldr	r3, [pc, #120]	; (8001628 <PINGStartTask+0x288>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f006 fc25 	bl	8007e00 <osThreadTerminate>
				  }
			  }

			  strcpy(&(msg.str), "PING_SEND_OK\r\n\0");
 80015b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80015ba:	4a20      	ldr	r2, [pc, #128]	; (800163c <PINGStartTask+0x29c>)
 80015bc:	461c      	mov	r4, r3
 80015be:	4613      	mov	r3, r2
 80015c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015c2:	c407      	stmia	r4!, {r0, r1, r2}
 80015c4:	8023      	strh	r3, [r4, #0]
 80015c6:	3402      	adds	r4, #2
 80015c8:	0c1b      	lsrs	r3, r3, #16
 80015ca:	7023      	strb	r3, [r4, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 80015cc:	4b10      	ldr	r3, [pc, #64]	; (8001610 <PINGStartTask+0x270>)
 80015ce:	6818      	ldr	r0, [r3, #0]
 80015d0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80015d4:	f04f 33ff 	mov.w	r3, #4294967295
 80015d8:	2200      	movs	r2, #0
 80015da:	f006 ffbb 	bl	8008554 <osMessageQueuePut>

			  HAL_UART_Receive_DMA(&huart1, SIM800BuffRx, BUFF_SIM_SIZE);
 80015de:	224c      	movs	r2, #76	; 0x4c
 80015e0:	4906      	ldr	r1, [pc, #24]	; (80015fc <PINGStartTask+0x25c>)
 80015e2:	4808      	ldr	r0, [pc, #32]	; (8001604 <PINGStartTask+0x264>)
 80015e4:	f005 f8f2 	bl	80067cc <HAL_UART_Receive_DMA>
			  osMutexRelease(UART1MutexHandle);
 80015e8:	4b03      	ldr	r3, [pc, #12]	; (80015f8 <PINGStartTask+0x258>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f006 fde0 	bl	80081b2 <osMutexRelease>
	  if (osSemaphoreAcquire(PINGSemHandle, osWaitForever) == osOK)
 80015f2:	e6e5      	b.n	80013c0 <PINGStartTask+0x20>
 80015f4:	200003a8 	.word	0x200003a8
 80015f8:	200003a4 	.word	0x200003a4
 80015fc:	2000041c 	.word	0x2000041c
 8001600:	0800d0d4 	.word	0x0800d0d4
 8001604:	20000164 	.word	0x20000164
 8001608:	0800d0cc 	.word	0x0800d0cc
 800160c:	0800d0e4 	.word	0x0800d0e4
 8001610:	20000390 	.word	0x20000390
 8001614:	200003b1 	.word	0x200003b1
 8001618:	40020800 	.word	0x40020800
 800161c:	0800dad0 	.word	0x0800dad0
 8001620:	08001ba5 	.word	0x08001ba5
 8001624:	20000384 	.word	0x20000384
 8001628:	2000037c 	.word	0x2000037c
 800162c:	20000000 	.word	0x20000000
 8001630:	0800d0f8 	.word	0x0800d0f8
 8001634:	20000004 	.word	0x20000004
 8001638:	0800d10c 	.word	0x0800d10c
 800163c:	0800d120 	.word	0x0800d120

08001640 <StartSIM800Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSIM800Task */
void StartSIM800Task(void *argument)
{
 8001640:	b5b0      	push	{r4, r5, r7, lr}
 8001642:	b094      	sub	sp, #80	; 0x50
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSIM800Task */

	message_type msg; // string for debug message
	uint8_t ans = 0; //is one string in another
 8001648:	2300      	movs	r3, #0
 800164a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  /* Infinite loop */
  for(;;)
  {
	  Error_init = 0;
 800164e:	4bb1      	ldr	r3, [pc, #708]	; (8001914 <StartSIM800Task+0x2d4>)
 8001650:	2200      	movs	r2, #0
 8001652:	701a      	strb	r2, [r3, #0]
	  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8001654:	4bb0      	ldr	r3, [pc, #704]	; (8001918 <StartSIM800Task+0x2d8>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	68da      	ldr	r2, [r3, #12]
 800165a:	4baf      	ldr	r3, [pc, #700]	; (8001918 <StartSIM800Task+0x2d8>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f042 0210 	orr.w	r2, r2, #16
 8001662:	60da      	str	r2, [r3, #12]

start:

		//Hardware reset of module

		HAL_GPIO_WritePin(SIM_START_GPIO_Port, SIM_START_Pin, RESET);
 8001664:	2200      	movs	r2, #0
 8001666:	2110      	movs	r1, #16
 8001668:	48ac      	ldr	r0, [pc, #688]	; (800191c <StartSIM800Task+0x2dc>)
 800166a:	f003 f921 	bl	80048b0 <HAL_GPIO_WritePin>
		osDelay(500);
 800166e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001672:	f006 fbf2 	bl	8007e5a <osDelay>
		HAL_GPIO_WritePin(SIM_START_GPIO_Port, SIM_START_Pin, SET);
 8001676:	2201      	movs	r2, #1
 8001678:	2110      	movs	r1, #16
 800167a:	48a8      	ldr	r0, [pc, #672]	; (800191c <StartSIM800Task+0x2dc>)
 800167c:	f003 f918 	bl	80048b0 <HAL_GPIO_WritePin>
		osDelay(8000);
 8001680:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8001684:	f006 fbe9 	bl	8007e5a <osDelay>

	  	//send initializing data

	  	sprintf(str_SIM800,"ATZ\r\n\0");
 8001688:	49a5      	ldr	r1, [pc, #660]	; (8001920 <StartSIM800Task+0x2e0>)
 800168a:	48a6      	ldr	r0, [pc, #664]	; (8001924 <StartSIM800Task+0x2e4>)
 800168c:	f00a fb62 	bl	800bd54 <siprintf>
	  	HAL_UART_Transmit_IT(&huart1, str_SIM800, strlen(str_SIM800));
 8001690:	48a4      	ldr	r0, [pc, #656]	; (8001924 <StartSIM800Task+0x2e4>)
 8001692:	f7fe fdbd 	bl	8000210 <strlen>
 8001696:	4603      	mov	r3, r0
 8001698:	b29b      	uxth	r3, r3
 800169a:	461a      	mov	r2, r3
 800169c:	49a1      	ldr	r1, [pc, #644]	; (8001924 <StartSIM800Task+0x2e4>)
 800169e:	489e      	ldr	r0, [pc, #632]	; (8001918 <StartSIM800Task+0x2d8>)
 80016a0:	f004 ffd1 	bl	8006646 <HAL_UART_Transmit_IT>
	  	osDelay(6000);
 80016a4:	f241 7070 	movw	r0, #6000	; 0x1770
 80016a8:	f006 fbd7 	bl	8007e5a <osDelay>

	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE); //clear receive buffer
 80016ac:	224c      	movs	r2, #76	; 0x4c
 80016ae:	2100      	movs	r1, #0
 80016b0:	489d      	ldr	r0, [pc, #628]	; (8001928 <StartSIM800Task+0x2e8>)
 80016b2:	f00a fb13 	bl	800bcdc <memset>
	  	sprintf(str_SIM800,"AT+CIPMODE=0\r\n\0"); //make string for send
 80016b6:	499d      	ldr	r1, [pc, #628]	; (800192c <StartSIM800Task+0x2ec>)
 80016b8:	489a      	ldr	r0, [pc, #616]	; (8001924 <StartSIM800Task+0x2e4>)
 80016ba:	f00a fb4b 	bl	800bd54 <siprintf>
	  	HAL_UART_Transmit_IT(&huart1, str_SIM800, strlen(str_SIM800)); //send string
 80016be:	4899      	ldr	r0, [pc, #612]	; (8001924 <StartSIM800Task+0x2e4>)
 80016c0:	f7fe fda6 	bl	8000210 <strlen>
 80016c4:	4603      	mov	r3, r0
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	461a      	mov	r2, r3
 80016ca:	4996      	ldr	r1, [pc, #600]	; (8001924 <StartSIM800Task+0x2e4>)
 80016cc:	4892      	ldr	r0, [pc, #584]	; (8001918 <StartSIM800Task+0x2d8>)
 80016ce:	f004 ffba 	bl	8006646 <HAL_UART_Transmit_IT>
	  	ans = SIM800_Ans("OK"); //waiting answer, that we transmit in function
 80016d2:	4897      	ldr	r0, [pc, #604]	; (8001930 <StartSIM800Task+0x2f0>)
 80016d4:	f7ff fc20 	bl	8000f18 <SIM800_Ans>
 80016d8:	4603      	mov	r3, r0
 80016da:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  	if (!ans)
 80016de:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d111      	bne.n	800170a <StartSIM800Task+0xca>
	  	{
	  		strcpy(&(msg.str), "FAILE_CIPMODE\r\n\0");
 80016e6:	f107 0308 	add.w	r3, r7, #8
 80016ea:	4a92      	ldr	r2, [pc, #584]	; (8001934 <StartSIM800Task+0x2f4>)
 80016ec:	461c      	mov	r4, r3
 80016ee:	4613      	mov	r3, r2
 80016f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  		osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 80016f6:	4b90      	ldr	r3, [pc, #576]	; (8001938 <StartSIM800Task+0x2f8>)
 80016f8:	6818      	ldr	r0, [r3, #0]
 80016fa:	f107 0108 	add.w	r1, r7, #8
 80016fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001702:	2200      	movs	r2, #0
 8001704:	f006 ff26 	bl	8008554 <osMessageQueuePut>
	  		goto start;
 8001708:	e7ac      	b.n	8001664 <StartSIM800Task+0x24>
	  	}
	  	osDelay(300);
 800170a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800170e:	f006 fba4 	bl	8007e5a <osDelay>

	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001712:	224c      	movs	r2, #76	; 0x4c
 8001714:	2100      	movs	r1, #0
 8001716:	4884      	ldr	r0, [pc, #528]	; (8001928 <StartSIM800Task+0x2e8>)
 8001718:	f00a fae0 	bl	800bcdc <memset>
	  	sprintf(str_SIM800,"AT+CIPMUX=0\r\n\0");
 800171c:	4987      	ldr	r1, [pc, #540]	; (800193c <StartSIM800Task+0x2fc>)
 800171e:	4881      	ldr	r0, [pc, #516]	; (8001924 <StartSIM800Task+0x2e4>)
 8001720:	f00a fb18 	bl	800bd54 <siprintf>
	  	HAL_UART_Transmit_IT(&huart1, str_SIM800, strlen(str_SIM800));
 8001724:	487f      	ldr	r0, [pc, #508]	; (8001924 <StartSIM800Task+0x2e4>)
 8001726:	f7fe fd73 	bl	8000210 <strlen>
 800172a:	4603      	mov	r3, r0
 800172c:	b29b      	uxth	r3, r3
 800172e:	461a      	mov	r2, r3
 8001730:	497c      	ldr	r1, [pc, #496]	; (8001924 <StartSIM800Task+0x2e4>)
 8001732:	4879      	ldr	r0, [pc, #484]	; (8001918 <StartSIM800Task+0x2d8>)
 8001734:	f004 ff87 	bl	8006646 <HAL_UART_Transmit_IT>
	  	ans = SIM800_Ans("OK");
 8001738:	487d      	ldr	r0, [pc, #500]	; (8001930 <StartSIM800Task+0x2f0>)
 800173a:	f7ff fbed 	bl	8000f18 <SIM800_Ans>
 800173e:	4603      	mov	r3, r0
 8001740:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  	if (!ans)
 8001744:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001748:	2b00      	cmp	r3, #0
 800174a:	d114      	bne.n	8001776 <StartSIM800Task+0x136>
		{
			strcpy(&(msg.str), "FAILE_CIPMUX\r\n\0");
 800174c:	f107 0308 	add.w	r3, r7, #8
 8001750:	4a7b      	ldr	r2, [pc, #492]	; (8001940 <StartSIM800Task+0x300>)
 8001752:	461c      	mov	r4, r3
 8001754:	4613      	mov	r3, r2
 8001756:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001758:	c407      	stmia	r4!, {r0, r1, r2}
 800175a:	8023      	strh	r3, [r4, #0]
 800175c:	3402      	adds	r4, #2
 800175e:	0c1b      	lsrs	r3, r3, #16
 8001760:	7023      	strb	r3, [r4, #0]
			osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001762:	4b75      	ldr	r3, [pc, #468]	; (8001938 <StartSIM800Task+0x2f8>)
 8001764:	6818      	ldr	r0, [r3, #0]
 8001766:	f107 0108 	add.w	r1, r7, #8
 800176a:	f04f 33ff 	mov.w	r3, #4294967295
 800176e:	2200      	movs	r2, #0
 8001770:	f006 fef0 	bl	8008554 <osMessageQueuePut>
			goto start;
 8001774:	e776      	b.n	8001664 <StartSIM800Task+0x24>
		}
		osDelay(300);
 8001776:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800177a:	f006 fb6e 	bl	8007e5a <osDelay>

	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 800177e:	224c      	movs	r2, #76	; 0x4c
 8001780:	2100      	movs	r1, #0
 8001782:	4869      	ldr	r0, [pc, #420]	; (8001928 <StartSIM800Task+0x2e8>)
 8001784:	f00a faaa 	bl	800bcdc <memset>
	  	sprintf(str_SIM800,"AT+CIPSTATUS\r\n\0");
 8001788:	496e      	ldr	r1, [pc, #440]	; (8001944 <StartSIM800Task+0x304>)
 800178a:	4866      	ldr	r0, [pc, #408]	; (8001924 <StartSIM800Task+0x2e4>)
 800178c:	f00a fae2 	bl	800bd54 <siprintf>
	  	HAL_UART_Transmit_IT(&huart1, str_SIM800, strlen(str_SIM800));
 8001790:	4864      	ldr	r0, [pc, #400]	; (8001924 <StartSIM800Task+0x2e4>)
 8001792:	f7fe fd3d 	bl	8000210 <strlen>
 8001796:	4603      	mov	r3, r0
 8001798:	b29b      	uxth	r3, r3
 800179a:	461a      	mov	r2, r3
 800179c:	4961      	ldr	r1, [pc, #388]	; (8001924 <StartSIM800Task+0x2e4>)
 800179e:	485e      	ldr	r0, [pc, #376]	; (8001918 <StartSIM800Task+0x2d8>)
 80017a0:	f004 ff51 	bl	8006646 <HAL_UART_Transmit_IT>
	  	ans = SIM800_Ans("OK");
 80017a4:	4862      	ldr	r0, [pc, #392]	; (8001930 <StartSIM800Task+0x2f0>)
 80017a6:	f7ff fbb7 	bl	8000f18 <SIM800_Ans>
 80017aa:	4603      	mov	r3, r0
 80017ac:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  	if (!ans)
 80017b0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d112      	bne.n	80017de <StartSIM800Task+0x19e>
		{
			strcpy(&(msg.str), "FAILE_CIPSTATUS\r\n\0");
 80017b8:	f107 0308 	add.w	r3, r7, #8
 80017bc:	4a62      	ldr	r2, [pc, #392]	; (8001948 <StartSIM800Task+0x308>)
 80017be:	461c      	mov	r4, r3
 80017c0:	4615      	mov	r5, r2
 80017c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017c6:	682b      	ldr	r3, [r5, #0]
 80017c8:	8023      	strh	r3, [r4, #0]
			osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 80017ca:	4b5b      	ldr	r3, [pc, #364]	; (8001938 <StartSIM800Task+0x2f8>)
 80017cc:	6818      	ldr	r0, [r3, #0]
 80017ce:	f107 0108 	add.w	r1, r7, #8
 80017d2:	f04f 33ff 	mov.w	r3, #4294967295
 80017d6:	2200      	movs	r2, #0
 80017d8:	f006 febc 	bl	8008554 <osMessageQueuePut>
			goto start;
 80017dc:	e742      	b.n	8001664 <StartSIM800Task+0x24>
		}
		osDelay(300);
 80017de:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80017e2:	f006 fb3a 	bl	8007e5a <osDelay>

	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80017e6:	224c      	movs	r2, #76	; 0x4c
 80017e8:	2100      	movs	r1, #0
 80017ea:	484f      	ldr	r0, [pc, #316]	; (8001928 <StartSIM800Task+0x2e8>)
 80017ec:	f00a fa76 	bl	800bcdc <memset>
	  	sprintf(str_SIM800,"AT+CIPRXGET=0\r\n\0");
 80017f0:	4956      	ldr	r1, [pc, #344]	; (800194c <StartSIM800Task+0x30c>)
 80017f2:	484c      	ldr	r0, [pc, #304]	; (8001924 <StartSIM800Task+0x2e4>)
 80017f4:	f00a faae 	bl	800bd54 <siprintf>
	  	HAL_UART_Transmit_IT(&huart1, str_SIM800, strlen(str_SIM800));
 80017f8:	484a      	ldr	r0, [pc, #296]	; (8001924 <StartSIM800Task+0x2e4>)
 80017fa:	f7fe fd09 	bl	8000210 <strlen>
 80017fe:	4603      	mov	r3, r0
 8001800:	b29b      	uxth	r3, r3
 8001802:	461a      	mov	r2, r3
 8001804:	4947      	ldr	r1, [pc, #284]	; (8001924 <StartSIM800Task+0x2e4>)
 8001806:	4844      	ldr	r0, [pc, #272]	; (8001918 <StartSIM800Task+0x2d8>)
 8001808:	f004 ff1d 	bl	8006646 <HAL_UART_Transmit_IT>
	  	ans = SIM800_Ans("OK");
 800180c:	4848      	ldr	r0, [pc, #288]	; (8001930 <StartSIM800Task+0x2f0>)
 800180e:	f7ff fb83 	bl	8000f18 <SIM800_Ans>
 8001812:	4603      	mov	r3, r0
 8001814:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  	if (!ans)
 8001818:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800181c:	2b00      	cmp	r3, #0
 800181e:	d112      	bne.n	8001846 <StartSIM800Task+0x206>
		{
			strcpy(&(msg.str), "FAILE_CIPRXGET\r\n\0");
 8001820:	f107 0308 	add.w	r3, r7, #8
 8001824:	4a4a      	ldr	r2, [pc, #296]	; (8001950 <StartSIM800Task+0x310>)
 8001826:	461c      	mov	r4, r3
 8001828:	4615      	mov	r5, r2
 800182a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800182c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800182e:	682b      	ldr	r3, [r5, #0]
 8001830:	7023      	strb	r3, [r4, #0]
			osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001832:	4b41      	ldr	r3, [pc, #260]	; (8001938 <StartSIM800Task+0x2f8>)
 8001834:	6818      	ldr	r0, [r3, #0]
 8001836:	f107 0108 	add.w	r1, r7, #8
 800183a:	f04f 33ff 	mov.w	r3, #4294967295
 800183e:	2200      	movs	r2, #0
 8001840:	f006 fe88 	bl	8008554 <osMessageQueuePut>
			goto start;
 8001844:	e70e      	b.n	8001664 <StartSIM800Task+0x24>
		}
		osDelay(300);
 8001846:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800184a:	f006 fb06 	bl	8007e5a <osDelay>

	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 800184e:	224c      	movs	r2, #76	; 0x4c
 8001850:	2100      	movs	r1, #0
 8001852:	4835      	ldr	r0, [pc, #212]	; (8001928 <StartSIM800Task+0x2e8>)
 8001854:	f00a fa42 	bl	800bcdc <memset>
	  	sprintf(str_SIM800,"AT+CSTT=\"internet.beeline.ru\",\"beeline\",\"beeline\"\r\n\0");
 8001858:	493e      	ldr	r1, [pc, #248]	; (8001954 <StartSIM800Task+0x314>)
 800185a:	4832      	ldr	r0, [pc, #200]	; (8001924 <StartSIM800Task+0x2e4>)
 800185c:	f00a fa7a 	bl	800bd54 <siprintf>
	  	HAL_UART_Transmit_IT(&huart1, str_SIM800, strlen(str_SIM800));
 8001860:	4830      	ldr	r0, [pc, #192]	; (8001924 <StartSIM800Task+0x2e4>)
 8001862:	f7fe fcd5 	bl	8000210 <strlen>
 8001866:	4603      	mov	r3, r0
 8001868:	b29b      	uxth	r3, r3
 800186a:	461a      	mov	r2, r3
 800186c:	492d      	ldr	r1, [pc, #180]	; (8001924 <StartSIM800Task+0x2e4>)
 800186e:	482a      	ldr	r0, [pc, #168]	; (8001918 <StartSIM800Task+0x2d8>)
 8001870:	f004 fee9 	bl	8006646 <HAL_UART_Transmit_IT>
	  	ans = SIM800_Ans("OK");
 8001874:	482e      	ldr	r0, [pc, #184]	; (8001930 <StartSIM800Task+0x2f0>)
 8001876:	f7ff fb4f 	bl	8000f18 <SIM800_Ans>
 800187a:	4603      	mov	r3, r0
 800187c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  	if (!ans)
 8001880:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001884:	2b00      	cmp	r3, #0
 8001886:	d111      	bne.n	80018ac <StartSIM800Task+0x26c>
		{
			strcpy(&(msg.str), "FAILE_CSTT\r\n\0");
 8001888:	f107 0308 	add.w	r3, r7, #8
 800188c:	4a32      	ldr	r2, [pc, #200]	; (8001958 <StartSIM800Task+0x318>)
 800188e:	461c      	mov	r4, r3
 8001890:	4613      	mov	r3, r2
 8001892:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001894:	c407      	stmia	r4!, {r0, r1, r2}
 8001896:	7023      	strb	r3, [r4, #0]
			osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001898:	4b27      	ldr	r3, [pc, #156]	; (8001938 <StartSIM800Task+0x2f8>)
 800189a:	6818      	ldr	r0, [r3, #0]
 800189c:	f107 0108 	add.w	r1, r7, #8
 80018a0:	f04f 33ff 	mov.w	r3, #4294967295
 80018a4:	2200      	movs	r2, #0
 80018a6:	f006 fe55 	bl	8008554 <osMessageQueuePut>
			goto start;
 80018aa:	e6db      	b.n	8001664 <StartSIM800Task+0x24>
		}
		osDelay(300);
 80018ac:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80018b0:	f006 fad3 	bl	8007e5a <osDelay>

	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80018b4:	224c      	movs	r2, #76	; 0x4c
 80018b6:	2100      	movs	r1, #0
 80018b8:	481b      	ldr	r0, [pc, #108]	; (8001928 <StartSIM800Task+0x2e8>)
 80018ba:	f00a fa0f 	bl	800bcdc <memset>
	  	sprintf(str_SIM800,"AT+CIPSTATUS\r\n\0");
 80018be:	4921      	ldr	r1, [pc, #132]	; (8001944 <StartSIM800Task+0x304>)
 80018c0:	4818      	ldr	r0, [pc, #96]	; (8001924 <StartSIM800Task+0x2e4>)
 80018c2:	f00a fa47 	bl	800bd54 <siprintf>
	  	HAL_UART_Transmit_IT(&huart1, str_SIM800, strlen(str_SIM800));
 80018c6:	4817      	ldr	r0, [pc, #92]	; (8001924 <StartSIM800Task+0x2e4>)
 80018c8:	f7fe fca2 	bl	8000210 <strlen>
 80018cc:	4603      	mov	r3, r0
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	461a      	mov	r2, r3
 80018d2:	4914      	ldr	r1, [pc, #80]	; (8001924 <StartSIM800Task+0x2e4>)
 80018d4:	4810      	ldr	r0, [pc, #64]	; (8001918 <StartSIM800Task+0x2d8>)
 80018d6:	f004 feb6 	bl	8006646 <HAL_UART_Transmit_IT>
	  	ans = SIM800_Ans("OK");
 80018da:	4815      	ldr	r0, [pc, #84]	; (8001930 <StartSIM800Task+0x2f0>)
 80018dc:	f7ff fb1c 	bl	8000f18 <SIM800_Ans>
 80018e0:	4603      	mov	r3, r0
 80018e2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  	if (!ans)
 80018e6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d136      	bne.n	800195c <StartSIM800Task+0x31c>
		{
			strcpy(&(msg.str), "FAILE_CIPSTATUS\r\n\0");
 80018ee:	f107 0308 	add.w	r3, r7, #8
 80018f2:	4a15      	ldr	r2, [pc, #84]	; (8001948 <StartSIM800Task+0x308>)
 80018f4:	461c      	mov	r4, r3
 80018f6:	4615      	mov	r5, r2
 80018f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018fc:	682b      	ldr	r3, [r5, #0]
 80018fe:	8023      	strh	r3, [r4, #0]
			osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001900:	4b0d      	ldr	r3, [pc, #52]	; (8001938 <StartSIM800Task+0x2f8>)
 8001902:	6818      	ldr	r0, [r3, #0]
 8001904:	f107 0108 	add.w	r1, r7, #8
 8001908:	f04f 33ff 	mov.w	r3, #4294967295
 800190c:	2200      	movs	r2, #0
 800190e:	f006 fe21 	bl	8008554 <osMessageQueuePut>
			goto start;
 8001912:	e6a7      	b.n	8001664 <StartSIM800Task+0x24>
 8001914:	200003b0 	.word	0x200003b0
 8001918:	20000164 	.word	0x20000164
 800191c:	40020800 	.word	0x40020800
 8001920:	0800d130 	.word	0x0800d130
 8001924:	200003d0 	.word	0x200003d0
 8001928:	2000041c 	.word	0x2000041c
 800192c:	0800d138 	.word	0x0800d138
 8001930:	0800d148 	.word	0x0800d148
 8001934:	0800d14c 	.word	0x0800d14c
 8001938:	20000390 	.word	0x20000390
 800193c:	0800d160 	.word	0x0800d160
 8001940:	0800d170 	.word	0x0800d170
 8001944:	0800d180 	.word	0x0800d180
 8001948:	0800d190 	.word	0x0800d190
 800194c:	0800d1a4 	.word	0x0800d1a4
 8001950:	0800d1b8 	.word	0x0800d1b8
 8001954:	0800d1cc 	.word	0x0800d1cc
 8001958:	0800d204 	.word	0x0800d204
		}
		osDelay(300);
 800195c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001960:	f006 fa7b 	bl	8007e5a <osDelay>

	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001964:	224c      	movs	r2, #76	; 0x4c
 8001966:	2100      	movs	r1, #0
 8001968:	487a      	ldr	r0, [pc, #488]	; (8001b54 <StartSIM800Task+0x514>)
 800196a:	f00a f9b7 	bl	800bcdc <memset>
	  	sprintf(str_SIM800,"AT+CIICR\r\n\0");
 800196e:	497a      	ldr	r1, [pc, #488]	; (8001b58 <StartSIM800Task+0x518>)
 8001970:	487a      	ldr	r0, [pc, #488]	; (8001b5c <StartSIM800Task+0x51c>)
 8001972:	f00a f9ef 	bl	800bd54 <siprintf>
	  	HAL_UART_Transmit_IT(&huart1, str_SIM800, strlen(str_SIM800));
 8001976:	4879      	ldr	r0, [pc, #484]	; (8001b5c <StartSIM800Task+0x51c>)
 8001978:	f7fe fc4a 	bl	8000210 <strlen>
 800197c:	4603      	mov	r3, r0
 800197e:	b29b      	uxth	r3, r3
 8001980:	461a      	mov	r2, r3
 8001982:	4976      	ldr	r1, [pc, #472]	; (8001b5c <StartSIM800Task+0x51c>)
 8001984:	4876      	ldr	r0, [pc, #472]	; (8001b60 <StartSIM800Task+0x520>)
 8001986:	f004 fe5e 	bl	8006646 <HAL_UART_Transmit_IT>
	  	ans = SIM800_Ans("AT+CIICR");
 800198a:	4876      	ldr	r0, [pc, #472]	; (8001b64 <StartSIM800Task+0x524>)
 800198c:	f7ff fac4 	bl	8000f18 <SIM800_Ans>
 8001990:	4603      	mov	r3, r0
 8001992:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001996:	224c      	movs	r2, #76	; 0x4c
 8001998:	2100      	movs	r1, #0
 800199a:	486e      	ldr	r0, [pc, #440]	; (8001b54 <StartSIM800Task+0x514>)
 800199c:	f00a f99e 	bl	800bcdc <memset>
	  	ans = SIM800_Ans("OK");
 80019a0:	4871      	ldr	r0, [pc, #452]	; (8001b68 <StartSIM800Task+0x528>)
 80019a2:	f7ff fab9 	bl	8000f18 <SIM800_Ans>
 80019a6:	4603      	mov	r3, r0
 80019a8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  	if (!ans)
 80019ac:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d111      	bne.n	80019d8 <StartSIM800Task+0x398>
		{
			strcpy(&(msg.str), "FAILE_CIICR\r\n\0");
 80019b4:	f107 0308 	add.w	r3, r7, #8
 80019b8:	4a6c      	ldr	r2, [pc, #432]	; (8001b6c <StartSIM800Task+0x52c>)
 80019ba:	461c      	mov	r4, r3
 80019bc:	4613      	mov	r3, r2
 80019be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019c0:	c407      	stmia	r4!, {r0, r1, r2}
 80019c2:	8023      	strh	r3, [r4, #0]
			osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 80019c4:	4b6a      	ldr	r3, [pc, #424]	; (8001b70 <StartSIM800Task+0x530>)
 80019c6:	6818      	ldr	r0, [r3, #0]
 80019c8:	f107 0108 	add.w	r1, r7, #8
 80019cc:	f04f 33ff 	mov.w	r3, #4294967295
 80019d0:	2200      	movs	r2, #0
 80019d2:	f006 fdbf 	bl	8008554 <osMessageQueuePut>
			goto start;
 80019d6:	e645      	b.n	8001664 <StartSIM800Task+0x24>
		}
		osDelay(500);
 80019d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019dc:	f006 fa3d 	bl	8007e5a <osDelay>

	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80019e0:	224c      	movs	r2, #76	; 0x4c
 80019e2:	2100      	movs	r1, #0
 80019e4:	485b      	ldr	r0, [pc, #364]	; (8001b54 <StartSIM800Task+0x514>)
 80019e6:	f00a f979 	bl	800bcdc <memset>
	  	sprintf(str_SIM800,"AT+CIPSTATUS\r\n\0");
 80019ea:	4962      	ldr	r1, [pc, #392]	; (8001b74 <StartSIM800Task+0x534>)
 80019ec:	485b      	ldr	r0, [pc, #364]	; (8001b5c <StartSIM800Task+0x51c>)
 80019ee:	f00a f9b1 	bl	800bd54 <siprintf>
	  	HAL_UART_Transmit_IT(&huart1, str_SIM800, strlen(str_SIM800));
 80019f2:	485a      	ldr	r0, [pc, #360]	; (8001b5c <StartSIM800Task+0x51c>)
 80019f4:	f7fe fc0c 	bl	8000210 <strlen>
 80019f8:	4603      	mov	r3, r0
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	461a      	mov	r2, r3
 80019fe:	4957      	ldr	r1, [pc, #348]	; (8001b5c <StartSIM800Task+0x51c>)
 8001a00:	4857      	ldr	r0, [pc, #348]	; (8001b60 <StartSIM800Task+0x520>)
 8001a02:	f004 fe20 	bl	8006646 <HAL_UART_Transmit_IT>
	  	ans = SIM800_Ans("OK");
 8001a06:	4858      	ldr	r0, [pc, #352]	; (8001b68 <StartSIM800Task+0x528>)
 8001a08:	f7ff fa86 	bl	8000f18 <SIM800_Ans>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  	if (!ans)
 8001a12:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d112      	bne.n	8001a40 <StartSIM800Task+0x400>
		{
			strcpy(&(msg.str), "FAILE_CIPSTATUS\r\n\0");
 8001a1a:	f107 0308 	add.w	r3, r7, #8
 8001a1e:	4a56      	ldr	r2, [pc, #344]	; (8001b78 <StartSIM800Task+0x538>)
 8001a20:	461c      	mov	r4, r3
 8001a22:	4615      	mov	r5, r2
 8001a24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a28:	682b      	ldr	r3, [r5, #0]
 8001a2a:	8023      	strh	r3, [r4, #0]
			osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001a2c:	4b50      	ldr	r3, [pc, #320]	; (8001b70 <StartSIM800Task+0x530>)
 8001a2e:	6818      	ldr	r0, [r3, #0]
 8001a30:	f107 0108 	add.w	r1, r7, #8
 8001a34:	f04f 33ff 	mov.w	r3, #4294967295
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f006 fd8b 	bl	8008554 <osMessageQueuePut>
			goto start;
 8001a3e:	e611      	b.n	8001664 <StartSIM800Task+0x24>
		}
		osDelay(300);
 8001a40:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001a44:	f006 fa09 	bl	8007e5a <osDelay>

	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001a48:	224c      	movs	r2, #76	; 0x4c
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	4841      	ldr	r0, [pc, #260]	; (8001b54 <StartSIM800Task+0x514>)
 8001a4e:	f00a f945 	bl	800bcdc <memset>
	  	sprintf(str_SIM800,"AT+CIFSR\r\n\0");
 8001a52:	494a      	ldr	r1, [pc, #296]	; (8001b7c <StartSIM800Task+0x53c>)
 8001a54:	4841      	ldr	r0, [pc, #260]	; (8001b5c <StartSIM800Task+0x51c>)
 8001a56:	f00a f97d 	bl	800bd54 <siprintf>
	  	HAL_UART_Transmit_IT(&huart1, str_SIM800, strlen(str_SIM800));
 8001a5a:	4840      	ldr	r0, [pc, #256]	; (8001b5c <StartSIM800Task+0x51c>)
 8001a5c:	f7fe fbd8 	bl	8000210 <strlen>
 8001a60:	4603      	mov	r3, r0
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	461a      	mov	r2, r3
 8001a66:	493d      	ldr	r1, [pc, #244]	; (8001b5c <StartSIM800Task+0x51c>)
 8001a68:	483d      	ldr	r0, [pc, #244]	; (8001b60 <StartSIM800Task+0x520>)
 8001a6a:	f004 fdec 	bl	8006646 <HAL_UART_Transmit_IT>
	  	RX = 0;
 8001a6e:	4b44      	ldr	r3, [pc, #272]	; (8001b80 <StartSIM800Task+0x540>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	701a      	strb	r2, [r3, #0]
	  	HAL_UART_Receive_DMA(&huart1, SIM800BuffRx, BUFF_SIM_SIZE);
 8001a74:	224c      	movs	r2, #76	; 0x4c
 8001a76:	4937      	ldr	r1, [pc, #220]	; (8001b54 <StartSIM800Task+0x514>)
 8001a78:	4839      	ldr	r0, [pc, #228]	; (8001b60 <StartSIM800Task+0x520>)
 8001a7a:	f004 fea7 	bl	80067cc <HAL_UART_Receive_DMA>
	  	while (RX < 1) {};
 8001a7e:	bf00      	nop
 8001a80:	4b3f      	ldr	r3, [pc, #252]	; (8001b80 <StartSIM800Task+0x540>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d0fb      	beq.n	8001a80 <StartSIM800Task+0x440>
	  	osDelay(300);
 8001a88:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001a8c:	f006 f9e5 	bl	8007e5a <osDelay>

	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001a90:	224c      	movs	r2, #76	; 0x4c
 8001a92:	2100      	movs	r1, #0
 8001a94:	482f      	ldr	r0, [pc, #188]	; (8001b54 <StartSIM800Task+0x514>)
 8001a96:	f00a f921 	bl	800bcdc <memset>
	  	sprintf(str_SIM800,"AT+CIPSTATUS\r\n\0");
 8001a9a:	4936      	ldr	r1, [pc, #216]	; (8001b74 <StartSIM800Task+0x534>)
 8001a9c:	482f      	ldr	r0, [pc, #188]	; (8001b5c <StartSIM800Task+0x51c>)
 8001a9e:	f00a f959 	bl	800bd54 <siprintf>
	  	HAL_UART_Transmit_IT(&huart1, str_SIM800, strlen(str_SIM800));
 8001aa2:	482e      	ldr	r0, [pc, #184]	; (8001b5c <StartSIM800Task+0x51c>)
 8001aa4:	f7fe fbb4 	bl	8000210 <strlen>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	461a      	mov	r2, r3
 8001aae:	492b      	ldr	r1, [pc, #172]	; (8001b5c <StartSIM800Task+0x51c>)
 8001ab0:	482b      	ldr	r0, [pc, #172]	; (8001b60 <StartSIM800Task+0x520>)
 8001ab2:	f004 fdc8 	bl	8006646 <HAL_UART_Transmit_IT>
	  	ans = SIM800_Ans("OK");
 8001ab6:	482c      	ldr	r0, [pc, #176]	; (8001b68 <StartSIM800Task+0x528>)
 8001ab8:	f7ff fa2e 	bl	8000f18 <SIM800_Ans>
 8001abc:	4603      	mov	r3, r0
 8001abe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  	if (!ans)
 8001ac2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d112      	bne.n	8001af0 <StartSIM800Task+0x4b0>
		{
			strcpy(&(msg.str), "FAILE_CIPSTATUS\r\n\0");
 8001aca:	f107 0308 	add.w	r3, r7, #8
 8001ace:	4a2a      	ldr	r2, [pc, #168]	; (8001b78 <StartSIM800Task+0x538>)
 8001ad0:	461c      	mov	r4, r3
 8001ad2:	4615      	mov	r5, r2
 8001ad4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ad6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ad8:	682b      	ldr	r3, [r5, #0]
 8001ada:	8023      	strh	r3, [r4, #0]
			osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001adc:	4b24      	ldr	r3, [pc, #144]	; (8001b70 <StartSIM800Task+0x530>)
 8001ade:	6818      	ldr	r0, [r3, #0]
 8001ae0:	f107 0108 	add.w	r1, r7, #8
 8001ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f006 fd33 	bl	8008554 <osMessageQueuePut>
			goto start;
 8001aee:	e5b9      	b.n	8001664 <StartSIM800Task+0x24>
		}
		osDelay(300);
 8001af0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001af4:	f006 f9b1 	bl	8007e5a <osDelay>

		strcpy(&(msg.str), "START_SIM800_OK\r\n\0");
 8001af8:	f107 0308 	add.w	r3, r7, #8
 8001afc:	4a21      	ldr	r2, [pc, #132]	; (8001b84 <StartSIM800Task+0x544>)
 8001afe:	461c      	mov	r4, r3
 8001b00:	4615      	mov	r5, r2
 8001b02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b06:	682b      	ldr	r3, [r5, #0]
 8001b08:	8023      	strh	r3, [r4, #0]
		osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001b0a:	4b19      	ldr	r3, [pc, #100]	; (8001b70 <StartSIM800Task+0x530>)
 8001b0c:	6818      	ldr	r0, [r3, #0]
 8001b0e:	f107 0108 	add.w	r1, r7, #8
 8001b12:	f04f 33ff 	mov.w	r3, #4294967295
 8001b16:	2200      	movs	r2, #0
 8001b18:	f006 fd1c 	bl	8008554 <osMessageQueuePut>

	  	Start_SIM800 = 1; //module starting good
 8001b1c:	4b1a      	ldr	r3, [pc, #104]	; (8001b88 <StartSIM800Task+0x548>)
 8001b1e:	2201      	movs	r2, #1
 8001b20:	701a      	strb	r2, [r3, #0]
	  	osMutexRelease(UART1MutexHandle); //release UART1
 8001b22:	4b1a      	ldr	r3, [pc, #104]	; (8001b8c <StartSIM800Task+0x54c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f006 fb43 	bl	80081b2 <osMutexRelease>
	  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	2104      	movs	r1, #4
 8001b30:	4817      	ldr	r0, [pc, #92]	; (8001b90 <StartSIM800Task+0x550>)
 8001b32:	f002 febd 	bl	80048b0 <HAL_GPIO_WritePin>
	  	//start thread to connect to broker
	  	MQTTConnectTaskHandle = osThreadNew(StartMQTTConnectTask, NULL, &MQTTConnectTask_attributes);
 8001b36:	4a17      	ldr	r2, [pc, #92]	; (8001b94 <StartSIM800Task+0x554>)
 8001b38:	2100      	movs	r1, #0
 8001b3a:	4817      	ldr	r0, [pc, #92]	; (8001b98 <StartSIM800Task+0x558>)
 8001b3c:	f006 f8ce 	bl	8007cdc <osThreadNew>
 8001b40:	4603      	mov	r3, r0
 8001b42:	4a16      	ldr	r2, [pc, #88]	; (8001b9c <StartSIM800Task+0x55c>)
 8001b44:	6013      	str	r3, [r2, #0]
	  	osThreadTerminate(SIM800StartTaskHandle); //execute this thread
 8001b46:	4b16      	ldr	r3, [pc, #88]	; (8001ba0 <StartSIM800Task+0x560>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f006 f958 	bl	8007e00 <osThreadTerminate>
  {
 8001b50:	e57d      	b.n	800164e <StartSIM800Task+0xe>
 8001b52:	bf00      	nop
 8001b54:	2000041c 	.word	0x2000041c
 8001b58:	0800d214 	.word	0x0800d214
 8001b5c:	200003d0 	.word	0x200003d0
 8001b60:	20000164 	.word	0x20000164
 8001b64:	0800d220 	.word	0x0800d220
 8001b68:	0800d148 	.word	0x0800d148
 8001b6c:	0800d22c 	.word	0x0800d22c
 8001b70:	20000390 	.word	0x20000390
 8001b74:	0800d180 	.word	0x0800d180
 8001b78:	0800d190 	.word	0x0800d190
 8001b7c:	0800d23c 	.word	0x0800d23c
 8001b80:	200003b3 	.word	0x200003b3
 8001b84:	0800d248 	.word	0x0800d248
 8001b88:	200003b2 	.word	0x200003b2
 8001b8c:	200003a4 	.word	0x200003a4
 8001b90:	40020800 	.word	0x40020800
 8001b94:	0800dad0 	.word	0x0800dad0
 8001b98:	08001ba5 	.word	0x08001ba5
 8001b9c:	20000384 	.word	0x20000384
 8001ba0:	20000380 	.word	0x20000380

08001ba4 <StartMQTTConnectTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMQTTConnectTask */
void StartMQTTConnectTask(void *argument)
{
 8001ba4:	b5b0      	push	{r4, r5, r7, lr}
 8001ba6:	b0b4      	sub	sp, #208	; 0xd0
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMQTTConnectTask */

	message_type msg; // string for debug message
	uint8_t ans; //is one string in another
	uint8_t send_MQTT_message[BUFF_SIM_SIZE] = {}; //message to SIM800
 8001bac:	2300      	movs	r3, #0
 8001bae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bb0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bb4:	2248      	movs	r2, #72	; 0x48
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f00a f88f 	bl	800bcdc <memset>
	uint8_t counter = 0; //counter of bad trying to connect to broker
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
  /* Infinite loop */
  for(;;)
  {

	  // waiting mutex
	  if (osMutexAcquire(UART1MutexHandle, osWaitForever) == osOK)
 8001bc4:	4bc3      	ldr	r3, [pc, #780]	; (8001ed4 <StartMQTTConnectTask+0x330>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f006 faa5 	bl	800811c <osMutexAcquire>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d1f5      	bne.n	8001bc4 <StartMQTTConnectTask+0x20>
	  {
	  start:
 8001bd8:	bf00      	nop
		  if (counter > 5)
 8001bda:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8001bde:	2b05      	cmp	r3, #5
 8001be0:	d914      	bls.n	8001c0c <StartMQTTConnectTask+0x68>
		  {
			  Error_init = 1;
 8001be2:	4bbd      	ldr	r3, [pc, #756]	; (8001ed8 <StartMQTTConnectTask+0x334>)
 8001be4:	2201      	movs	r2, #1
 8001be6:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 1);
 8001be8:	2201      	movs	r2, #1
 8001bea:	2104      	movs	r1, #4
 8001bec:	48bb      	ldr	r0, [pc, #748]	; (8001edc <StartMQTTConnectTask+0x338>)
 8001bee:	f002 fe5f 	bl	80048b0 <HAL_GPIO_WritePin>
			  Start_SIM800 = 0;
 8001bf2:	4bbb      	ldr	r3, [pc, #748]	; (8001ee0 <StartMQTTConnectTask+0x33c>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	701a      	strb	r2, [r3, #0]
			  osMutexRelease(UART1MutexHandle);
 8001bf8:	4bb6      	ldr	r3, [pc, #728]	; (8001ed4 <StartMQTTConnectTask+0x330>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f006 fad8 	bl	80081b2 <osMutexRelease>
			  osThreadTerminate(MQTTConnectTaskHandle);
 8001c02:	4bb8      	ldr	r3, [pc, #736]	; (8001ee4 <StartMQTTConnectTask+0x340>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f006 f8fa 	bl	8007e00 <osThreadTerminate>
		  }

		  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8001c0c:	4bb6      	ldr	r3, [pc, #728]	; (8001ee8 <StartMQTTConnectTask+0x344>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	68da      	ldr	r2, [r3, #12]
 8001c12:	4bb5      	ldr	r3, [pc, #724]	; (8001ee8 <StartMQTTConnectTask+0x344>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f042 0210 	orr.w	r2, r2, #16
 8001c1a:	60da      	str	r2, [r3, #12]
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001c1c:	224c      	movs	r2, #76	; 0x4c
 8001c1e:	2100      	movs	r1, #0
 8001c20:	48b2      	ldr	r0, [pc, #712]	; (8001eec <StartMQTTConnectTask+0x348>)
 8001c22:	f00a f85b 	bl	800bcdc <memset>
		  //sprintf(str_SIM800,"AT+CIPSTART=\"TCP\",\"broker.hivemq.com\",1883\r\0");
		  sprintf(str_SIM800,"AT+CIPSTART=\"TCP\",\"broker.emqx.io\",1883\r\n\0");
 8001c26:	49b2      	ldr	r1, [pc, #712]	; (8001ef0 <StartMQTTConnectTask+0x34c>)
 8001c28:	48b2      	ldr	r0, [pc, #712]	; (8001ef4 <StartMQTTConnectTask+0x350>)
 8001c2a:	f00a f893 	bl	800bd54 <siprintf>
		  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 8001c2e:	48b1      	ldr	r0, [pc, #708]	; (8001ef4 <StartMQTTConnectTask+0x350>)
 8001c30:	f7fe faee 	bl	8000210 <strlen>
 8001c34:	4603      	mov	r3, r0
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	461a      	mov	r2, r3
 8001c3a:	49ae      	ldr	r1, [pc, #696]	; (8001ef4 <StartMQTTConnectTask+0x350>)
 8001c3c:	48aa      	ldr	r0, [pc, #680]	; (8001ee8 <StartMQTTConnectTask+0x344>)
 8001c3e:	f004 fd47 	bl	80066d0 <HAL_UART_Transmit_DMA>
		  ans = SIM800_Ans("OK");
 8001c42:	48ad      	ldr	r0, [pc, #692]	; (8001ef8 <StartMQTTConnectTask+0x354>)
 8001c44:	f7ff f968 	bl	8000f18 <SIM800_Ans>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
		  if (!ans)
 8001c4e:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d117      	bne.n	8001c86 <StartMQTTConnectTask+0xe2>
		  {
			  strcpy(&(msg.str), "FAILE_connect1\r\n\0");
 8001c56:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001c5a:	4aa8      	ldr	r2, [pc, #672]	; (8001efc <StartMQTTConnectTask+0x358>)
 8001c5c:	461c      	mov	r4, r3
 8001c5e:	4615      	mov	r5, r2
 8001c60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c64:	682b      	ldr	r3, [r5, #0]
 8001c66:	7023      	strb	r3, [r4, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001c68:	4ba5      	ldr	r3, [pc, #660]	; (8001f00 <StartMQTTConnectTask+0x35c>)
 8001c6a:	6818      	ldr	r0, [r3, #0]
 8001c6c:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001c70:	f04f 33ff 	mov.w	r3, #4294967295
 8001c74:	2200      	movs	r2, #0
 8001c76:	f006 fc6d 	bl	8008554 <osMessageQueuePut>
			  counter++;
 8001c7a:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8001c7e:	3301      	adds	r3, #1
 8001c80:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			  goto start;
 8001c84:	e7a9      	b.n	8001bda <StartMQTTConnectTask+0x36>
		  }
		  osDelay(300);
 8001c86:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001c8a:	f006 f8e6 	bl	8007e5a <osDelay>

		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001c8e:	224c      	movs	r2, #76	; 0x4c
 8001c90:	2100      	movs	r1, #0
 8001c92:	4896      	ldr	r0, [pc, #600]	; (8001eec <StartMQTTConnectTask+0x348>)
 8001c94:	f00a f822 	bl	800bcdc <memset>
		  ans = SIM800_Ans("OK");
 8001c98:	4897      	ldr	r0, [pc, #604]	; (8001ef8 <StartMQTTConnectTask+0x354>)
 8001c9a:	f7ff f93d 	bl	8000f18 <SIM800_Ans>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
		  if (!ans)
 8001ca4:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d117      	bne.n	8001cdc <StartMQTTConnectTask+0x138>
		  {
			  strcpy(&(msg.str), "FAILE_connect2\r\n\0");
 8001cac:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001cb0:	4a94      	ldr	r2, [pc, #592]	; (8001f04 <StartMQTTConnectTask+0x360>)
 8001cb2:	461c      	mov	r4, r3
 8001cb4:	4615      	mov	r5, r2
 8001cb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cba:	682b      	ldr	r3, [r5, #0]
 8001cbc:	7023      	strb	r3, [r4, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001cbe:	4b90      	ldr	r3, [pc, #576]	; (8001f00 <StartMQTTConnectTask+0x35c>)
 8001cc0:	6818      	ldr	r0, [r3, #0]
 8001cc2:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f006 fc42 	bl	8008554 <osMessageQueuePut>
			  counter++;
 8001cd0:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			  goto start;
 8001cda:	e77e      	b.n	8001bda <StartMQTTConnectTask+0x36>
		  }
		  osDelay(300);
 8001cdc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001ce0:	f006 f8bb 	bl	8007e5a <osDelay>

		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001ce4:	224c      	movs	r2, #76	; 0x4c
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	4880      	ldr	r0, [pc, #512]	; (8001eec <StartMQTTConnectTask+0x348>)
 8001cea:	f009 fff7 	bl	800bcdc <memset>
		  sprintf(str_SIM800,"AT+CIPSEND=14\r\n\0");
 8001cee:	4986      	ldr	r1, [pc, #536]	; (8001f08 <StartMQTTConnectTask+0x364>)
 8001cf0:	4880      	ldr	r0, [pc, #512]	; (8001ef4 <StartMQTTConnectTask+0x350>)
 8001cf2:	f00a f82f 	bl	800bd54 <siprintf>
		  //sprintf(str_SIM800,"AT+CIPSEND=24\r\0");
		  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 8001cf6:	487f      	ldr	r0, [pc, #508]	; (8001ef4 <StartMQTTConnectTask+0x350>)
 8001cf8:	f7fe fa8a 	bl	8000210 <strlen>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	461a      	mov	r2, r3
 8001d02:	497c      	ldr	r1, [pc, #496]	; (8001ef4 <StartMQTTConnectTask+0x350>)
 8001d04:	4878      	ldr	r0, [pc, #480]	; (8001ee8 <StartMQTTConnectTask+0x344>)
 8001d06:	f004 fce3 	bl	80066d0 <HAL_UART_Transmit_DMA>
		  ans = SIM800_Ans(">");
 8001d0a:	4880      	ldr	r0, [pc, #512]	; (8001f0c <StartMQTTConnectTask+0x368>)
 8001d0c:	f7ff f904 	bl	8000f18 <SIM800_Ans>
 8001d10:	4603      	mov	r3, r0
 8001d12:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
		  if (!ans)
 8001d16:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d116      	bne.n	8001d4c <StartMQTTConnectTask+0x1a8>
		  {
			  strcpy(&(msg.str), "FAILE_send\r\n\0");
 8001d1e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001d22:	4a7b      	ldr	r2, [pc, #492]	; (8001f10 <StartMQTTConnectTask+0x36c>)
 8001d24:	461c      	mov	r4, r3
 8001d26:	4613      	mov	r3, r2
 8001d28:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d2a:	c407      	stmia	r4!, {r0, r1, r2}
 8001d2c:	7023      	strb	r3, [r4, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001d2e:	4b74      	ldr	r3, [pc, #464]	; (8001f00 <StartMQTTConnectTask+0x35c>)
 8001d30:	6818      	ldr	r0, [r3, #0]
 8001d32:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001d36:	f04f 33ff 	mov.w	r3, #4294967295
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f006 fc0a 	bl	8008554 <osMessageQueuePut>
			  counter++;
 8001d40:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8001d44:	3301      	adds	r3, #1
 8001d46:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			  goto start;
 8001d4a:	e746      	b.n	8001bda <StartMQTTConnectTask+0x36>
		  }
		  osDelay(300);
 8001d4c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001d50:	f006 f883 	bl	8007e5a <osDelay>

		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001d54:	224c      	movs	r2, #76	; 0x4c
 8001d56:	2100      	movs	r1, #0
 8001d58:	4864      	ldr	r0, [pc, #400]	; (8001eec <StartMQTTConnectTask+0x348>)
 8001d5a:	f009 ffbf 	bl	800bcdc <memset>
		  uint8_t send_MQTT_init[50] = "\x10\x0C\0\x04MQTT\x04\x02\0\x3C\0\0\0";
 8001d5e:	4b6d      	ldr	r3, [pc, #436]	; (8001f14 <StartMQTTConnectTask+0x370>)
 8001d60:	f107 0408 	add.w	r4, r7, #8
 8001d64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001d6a:	f107 0318 	add.w	r3, r7, #24
 8001d6e:	2222      	movs	r2, #34	; 0x22
 8001d70:	2100      	movs	r1, #0
 8001d72:	4618      	mov	r0, r3
 8001d74:	f009 ffb2 	bl	800bcdc <memset>
		  HAL_UART_Transmit_DMA(&huart1, send_MQTT_init, 14);
 8001d78:	f107 0308 	add.w	r3, r7, #8
 8001d7c:	220e      	movs	r2, #14
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4859      	ldr	r0, [pc, #356]	; (8001ee8 <StartMQTTConnectTask+0x344>)
 8001d82:	f004 fca5 	bl	80066d0 <HAL_UART_Transmit_DMA>
		  //uint8_t send_MQTT_init[50] = "\x10\x16\0\x04MQTT\x04\x02\0\x3C\0\x0A\x34\x62\x58\x34\x56\x66\x47\x42\x51\x75\0";
		  //HAL_UART_Transmit_DMA(&huart1, send_MQTT_init, 24);
		  //osDelay(2000);

		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001d86:	224c      	movs	r2, #76	; 0x4c
 8001d88:	2100      	movs	r1, #0
 8001d8a:	4858      	ldr	r0, [pc, #352]	; (8001eec <StartMQTTConnectTask+0x348>)
 8001d8c:	f009 ffa6 	bl	800bcdc <memset>
		  ans = SIM800_Ans("\x10\x0C\0\x04MQTT\x04\x02\0\x3C\0\0\0");
 8001d90:	4861      	ldr	r0, [pc, #388]	; (8001f18 <StartMQTTConnectTask+0x374>)
 8001d92:	f7ff f8c1 	bl	8000f18 <SIM800_Ans>
 8001d96:	4603      	mov	r3, r0
 8001d98:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
		  if (!ans)
 8001d9c:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d11b      	bne.n	8001ddc <StartMQTTConnectTask+0x238>
		  {
			  strcpy(&(msg.str), "FAILE_init_mqtt1\r\n\0");
 8001da4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001da8:	4a5c      	ldr	r2, [pc, #368]	; (8001f1c <StartMQTTConnectTask+0x378>)
 8001daa:	461c      	mov	r4, r3
 8001dac:	4615      	mov	r5, r2
 8001dae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001db0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001db2:	682b      	ldr	r3, [r5, #0]
 8001db4:	461a      	mov	r2, r3
 8001db6:	8022      	strh	r2, [r4, #0]
 8001db8:	3402      	adds	r4, #2
 8001dba:	0c1b      	lsrs	r3, r3, #16
 8001dbc:	7023      	strb	r3, [r4, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001dbe:	4b50      	ldr	r3, [pc, #320]	; (8001f00 <StartMQTTConnectTask+0x35c>)
 8001dc0:	6818      	ldr	r0, [r3, #0]
 8001dc2:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f006 fbc2 	bl	8008554 <osMessageQueuePut>
			  counter++;
 8001dd0:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			  goto start;
 8001dda:	e6fe      	b.n	8001bda <StartMQTTConnectTask+0x36>
		  }

		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001ddc:	224c      	movs	r2, #76	; 0x4c
 8001dde:	2100      	movs	r1, #0
 8001de0:	4842      	ldr	r0, [pc, #264]	; (8001eec <StartMQTTConnectTask+0x348>)
 8001de2:	f009 ff7b 	bl	800bcdc <memset>
		  ans = SIM800_Ans(MQTT_CONNECT_ASK);
 8001de6:	484e      	ldr	r0, [pc, #312]	; (8001f20 <StartMQTTConnectTask+0x37c>)
 8001de8:	f7ff f896 	bl	8000f18 <SIM800_Ans>
 8001dec:	4603      	mov	r3, r0
 8001dee:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
		  if (!ans)
 8001df2:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d12a      	bne.n	8001e50 <StartMQTTConnectTask+0x2ac>
		  {
			  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001dfa:	224c      	movs	r2, #76	; 0x4c
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	483b      	ldr	r0, [pc, #236]	; (8001eec <StartMQTTConnectTask+0x348>)
 8001e00:	f009 ff6c 	bl	800bcdc <memset>
			  ans = SIM800_Ans(MQTT_CONNECT_ASK);
 8001e04:	4846      	ldr	r0, [pc, #280]	; (8001f20 <StartMQTTConnectTask+0x37c>)
 8001e06:	f7ff f887 	bl	8000f18 <SIM800_Ans>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
			  if (!ans)
 8001e10:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d11b      	bne.n	8001e50 <StartMQTTConnectTask+0x2ac>
			  {
				  strcpy(&(msg.str), "FAILE_init_mqtt2\r\n\0");
 8001e18:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001e1c:	4a41      	ldr	r2, [pc, #260]	; (8001f24 <StartMQTTConnectTask+0x380>)
 8001e1e:	461c      	mov	r4, r3
 8001e20:	4615      	mov	r5, r2
 8001e22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e26:	682b      	ldr	r3, [r5, #0]
 8001e28:	461a      	mov	r2, r3
 8001e2a:	8022      	strh	r2, [r4, #0]
 8001e2c:	3402      	adds	r4, #2
 8001e2e:	0c1b      	lsrs	r3, r3, #16
 8001e30:	7023      	strb	r3, [r4, #0]
				  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001e32:	4b33      	ldr	r3, [pc, #204]	; (8001f00 <StartMQTTConnectTask+0x35c>)
 8001e34:	6818      	ldr	r0, [r3, #0]
 8001e36:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f006 fb88 	bl	8008554 <osMessageQueuePut>
				  counter++;
 8001e44:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8001e48:	3301      	adds	r3, #1
 8001e4a:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
				  goto start;
 8001e4e:	e6c4      	b.n	8001bda <StartMQTTConnectTask+0x36>
			  }
		  }
		  osDelay(100);
 8001e50:	2064      	movs	r0, #100	; 0x64
 8001e52:	f006 f802 	bl	8007e5a <osDelay>

		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001e56:	224c      	movs	r2, #76	; 0x4c
 8001e58:	2100      	movs	r1, #0
 8001e5a:	4824      	ldr	r0, [pc, #144]	; (8001eec <StartMQTTConnectTask+0x348>)
 8001e5c:	f009 ff3e 	bl	800bcdc <memset>
		  sprintf(send_MQTT_message,"AT+CIPSEND=%d\r\n\0", strlen(TOPIC) + 7);
 8001e60:	4831      	ldr	r0, [pc, #196]	; (8001f28 <StartMQTTConnectTask+0x384>)
 8001e62:	f7fe f9d5 	bl	8000210 <strlen>
 8001e66:	4603      	mov	r3, r0
 8001e68:	1dda      	adds	r2, r3, #7
 8001e6a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e6e:	492f      	ldr	r1, [pc, #188]	; (8001f2c <StartMQTTConnectTask+0x388>)
 8001e70:	4618      	mov	r0, r3
 8001e72:	f009 ff6f 	bl	800bd54 <siprintf>
		  HAL_UART_Transmit_DMA(&huart1, send_MQTT_message, strlen(send_MQTT_message));
 8001e76:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7fe f9c8 	bl	8000210 <strlen>
 8001e80:	4603      	mov	r3, r0
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4817      	ldr	r0, [pc, #92]	; (8001ee8 <StartMQTTConnectTask+0x344>)
 8001e8c:	f004 fc20 	bl	80066d0 <HAL_UART_Transmit_DMA>
		  ans = SIM800_Ans(">");
 8001e90:	481e      	ldr	r0, [pc, #120]	; (8001f0c <StartMQTTConnectTask+0x368>)
 8001e92:	f7ff f841 	bl	8000f18 <SIM800_Ans>
 8001e96:	4603      	mov	r3, r0
 8001e98:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
		  if (!ans)
 8001e9c:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d147      	bne.n	8001f34 <StartMQTTConnectTask+0x390>
		  {
			  strcpy(&(msg.str), "FAILE_send1\r\n\0");
 8001ea4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001ea8:	4a21      	ldr	r2, [pc, #132]	; (8001f30 <StartMQTTConnectTask+0x38c>)
 8001eaa:	461c      	mov	r4, r3
 8001eac:	4613      	mov	r3, r2
 8001eae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001eb0:	c407      	stmia	r4!, {r0, r1, r2}
 8001eb2:	8023      	strh	r3, [r4, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001eb4:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <StartMQTTConnectTask+0x35c>)
 8001eb6:	6818      	ldr	r0, [r3, #0]
 8001eb8:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001ebc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f006 fb47 	bl	8008554 <osMessageQueuePut>
			  counter++;
 8001ec6:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8001eca:	3301      	adds	r3, #1
 8001ecc:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			  goto start;
 8001ed0:	e683      	b.n	8001bda <StartMQTTConnectTask+0x36>
 8001ed2:	bf00      	nop
 8001ed4:	200003a4 	.word	0x200003a4
 8001ed8:	200003b0 	.word	0x200003b0
 8001edc:	40020800 	.word	0x40020800
 8001ee0:	200003b2 	.word	0x200003b2
 8001ee4:	20000384 	.word	0x20000384
 8001ee8:	20000164 	.word	0x20000164
 8001eec:	2000041c 	.word	0x2000041c
 8001ef0:	0800d25c 	.word	0x0800d25c
 8001ef4:	200003d0 	.word	0x200003d0
 8001ef8:	0800d148 	.word	0x0800d148
 8001efc:	0800d288 	.word	0x0800d288
 8001f00:	20000390 	.word	0x20000390
 8001f04:	0800d29c 	.word	0x0800d29c
 8001f08:	0800d2b0 	.word	0x0800d2b0
 8001f0c:	0800d0cc 	.word	0x0800d0cc
 8001f10:	0800d2c4 	.word	0x0800d2c4
 8001f14:	0800d374 	.word	0x0800d374
 8001f18:	0800d2d4 	.word	0x0800d2d4
 8001f1c:	0800d2e4 	.word	0x0800d2e4
 8001f20:	20000008 	.word	0x20000008
 8001f24:	0800d2f8 	.word	0x0800d2f8
 8001f28:	20000010 	.word	0x20000010
 8001f2c:	0800d0b8 	.word	0x0800d0b8
 8001f30:	0800d30c 	.word	0x0800d30c
		  }
		  osDelay(100);
 8001f34:	2064      	movs	r0, #100	; 0x64
 8001f36:	f005 ff90 	bl	8007e5a <osDelay>
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001f3a:	224c      	movs	r2, #76	; 0x4c
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	486f      	ldr	r0, [pc, #444]	; (80020fc <StartMQTTConnectTask+0x558>)
 8001f40:	f009 fecc 	bl	800bcdc <memset>

		  //create packet to subscribe on topic
		  send_MQTT_message[0] = 0x82;
 8001f44:	2382      	movs	r3, #130	; 0x82
 8001f46:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
		  send_MQTT_message[1] = strlen(TOPIC) + 5;
 8001f4a:	486d      	ldr	r0, [pc, #436]	; (8002100 <StartMQTTConnectTask+0x55c>)
 8001f4c:	f7fe f960 	bl	8000210 <strlen>
 8001f50:	4603      	mov	r3, r0
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	3305      	adds	r3, #5
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
		  send_MQTT_message[2] = 0;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		  send_MQTT_message[3] = 1;
 8001f62:	2301      	movs	r3, #1
 8001f64:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		  send_MQTT_message[4] = 0;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
		  send_MQTT_message[5] = strlen(TOPIC);
 8001f6e:	4864      	ldr	r0, [pc, #400]	; (8002100 <StartMQTTConnectTask+0x55c>)
 8001f70:	f7fe f94e 	bl	8000210 <strlen>
 8001f74:	4603      	mov	r3, r0
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
		  sprintf(send_MQTT_message + 6,"%s\0",TOPIC);
 8001f7c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f80:	3306      	adds	r3, #6
 8001f82:	4a5f      	ldr	r2, [pc, #380]	; (8002100 <StartMQTTConnectTask+0x55c>)
 8001f84:	495f      	ldr	r1, [pc, #380]	; (8002104 <StartMQTTConnectTask+0x560>)
 8001f86:	4618      	mov	r0, r3
 8001f88:	f009 fee4 	bl	800bd54 <siprintf>
		  HAL_UART_Transmit_DMA(&huart1, send_MQTT_message, strlen(TOPIC) + 7);
 8001f8c:	485c      	ldr	r0, [pc, #368]	; (8002100 <StartMQTTConnectTask+0x55c>)
 8001f8e:	f7fe f93f 	bl	8000210 <strlen>
 8001f92:	4603      	mov	r3, r0
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	3307      	adds	r3, #7
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4859      	ldr	r0, [pc, #356]	; (8002108 <StartMQTTConnectTask+0x564>)
 8001fa2:	f004 fb95 	bl	80066d0 <HAL_UART_Transmit_DMA>
		  ans = SIM800_Ans(send_MQTT_message);
 8001fa6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7fe ffb4 	bl	8000f18 <SIM800_Ans>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
		  if (!ans)
 8001fb6:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d116      	bne.n	8001fec <StartMQTTConnectTask+0x448>
		  {
			  strcpy(&(msg.str), "FAILE_send2\r\n\0");
 8001fbe:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001fc2:	4a52      	ldr	r2, [pc, #328]	; (800210c <StartMQTTConnectTask+0x568>)
 8001fc4:	461c      	mov	r4, r3
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fca:	c407      	stmia	r4!, {r0, r1, r2}
 8001fcc:	8023      	strh	r3, [r4, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001fce:	4b50      	ldr	r3, [pc, #320]	; (8002110 <StartMQTTConnectTask+0x56c>)
 8001fd0:	6818      	ldr	r0, [r3, #0]
 8001fd2:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f006 faba 	bl	8008554 <osMessageQueuePut>
			  counter++;
 8001fe0:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			  goto start;
 8001fea:	e5f6      	b.n	8001bda <StartMQTTConnectTask+0x36>
		  }
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001fec:	224c      	movs	r2, #76	; 0x4c
 8001fee:	2100      	movs	r1, #0
 8001ff0:	4842      	ldr	r0, [pc, #264]	; (80020fc <StartMQTTConnectTask+0x558>)
 8001ff2:	f009 fe73 	bl	800bcdc <memset>
		  ans = SIM800_Ans(TOPIC_ASK);
 8001ff6:	4847      	ldr	r0, [pc, #284]	; (8002114 <StartMQTTConnectTask+0x570>)
 8001ff8:	f7fe ff8e 	bl	8000f18 <SIM800_Ans>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
		  if (!ans)
 8002002:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8002006:	2b00      	cmp	r3, #0
 8002008:	d125      	bne.n	8002056 <StartMQTTConnectTask+0x4b2>
		  {
			  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 800200a:	224c      	movs	r2, #76	; 0x4c
 800200c:	2100      	movs	r1, #0
 800200e:	483b      	ldr	r0, [pc, #236]	; (80020fc <StartMQTTConnectTask+0x558>)
 8002010:	f009 fe64 	bl	800bcdc <memset>
			  ans = SIM800_Ans(TOPIC_ASK);
 8002014:	483f      	ldr	r0, [pc, #252]	; (8002114 <StartMQTTConnectTask+0x570>)
 8002016:	f7fe ff7f 	bl	8000f18 <SIM800_Ans>
 800201a:	4603      	mov	r3, r0
 800201c:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
			  if (!ans)
 8002020:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8002024:	2b00      	cmp	r3, #0
 8002026:	d116      	bne.n	8002056 <StartMQTTConnectTask+0x4b2>
			  {
				  strcpy(&(msg.str), "FAILE_send3\r\n\0");
 8002028:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800202c:	4a3a      	ldr	r2, [pc, #232]	; (8002118 <StartMQTTConnectTask+0x574>)
 800202e:	461c      	mov	r4, r3
 8002030:	4613      	mov	r3, r2
 8002032:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002034:	c407      	stmia	r4!, {r0, r1, r2}
 8002036:	8023      	strh	r3, [r4, #0]
				  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8002038:	4b35      	ldr	r3, [pc, #212]	; (8002110 <StartMQTTConnectTask+0x56c>)
 800203a:	6818      	ldr	r0, [r3, #0]
 800203c:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002040:	f04f 33ff 	mov.w	r3, #4294967295
 8002044:	2200      	movs	r2, #0
 8002046:	f006 fa85 	bl	8008554 <osMessageQueuePut>
				  counter++;
 800204a:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 800204e:	3301      	adds	r3, #1
 8002050:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
				  goto start;
 8002054:	e5c1      	b.n	8001bda <StartMQTTConnectTask+0x36>
			  }
		  }


		  strcpy(&(msg.str), "MQTT_connect_OK\r\n\0");
 8002056:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800205a:	4a30      	ldr	r2, [pc, #192]	; (800211c <StartMQTTConnectTask+0x578>)
 800205c:	461c      	mov	r4, r3
 800205e:	4615      	mov	r5, r2
 8002060:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002062:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002064:	682b      	ldr	r3, [r5, #0]
 8002066:	8023      	strh	r3, [r4, #0]
		  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8002068:	4b29      	ldr	r3, [pc, #164]	; (8002110 <StartMQTTConnectTask+0x56c>)
 800206a:	6818      	ldr	r0, [r3, #0]
 800206c:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002070:	f04f 33ff 	mov.w	r3, #4294967295
 8002074:	2200      	movs	r2, #0
 8002076:	f006 fa6d 	bl	8008554 <osMessageQueuePut>

		  Broker_connect = 1;
 800207a:	4b29      	ldr	r3, [pc, #164]	; (8002120 <StartMQTTConnectTask+0x57c>)
 800207c:	2201      	movs	r2, #1
 800207e:	701a      	strb	r2, [r3, #0]
		  osTimerStart(PingTimerHandle, PING_TIME); //start ping timer
 8002080:	4b28      	ldr	r3, [pc, #160]	; (8002124 <StartMQTTConnectTask+0x580>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f24c 3150 	movw	r1, #50000	; 0xc350
 8002088:	4618      	mov	r0, r3
 800208a:	f005 ff93 	bl	8007fb4 <osTimerStart>
		  osTimerStart(DataTimerHandle, GET_DATA_PERIOD); //start ping timer
 800208e:	4b26      	ldr	r3, [pc, #152]	; (8002128 <StartMQTTConnectTask+0x584>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f247 5130 	movw	r1, #30000	; 0x7530
 8002096:	4618      	mov	r0, r3
 8002098:	f005 ff8c 	bl	8007fb4 <osTimerStart>
		  HAL_UART_Receive_DMA(&huart1, SIM800BuffRx, BUFF_SIM_SIZE); //start receive messages
 800209c:	224c      	movs	r2, #76	; 0x4c
 800209e:	4917      	ldr	r1, [pc, #92]	; (80020fc <StartMQTTConnectTask+0x558>)
 80020a0:	4819      	ldr	r0, [pc, #100]	; (8002108 <StartMQTTConnectTask+0x564>)
 80020a2:	f004 fb93 	bl	80067cc <HAL_UART_Receive_DMA>
		  Tech_ans_wait = 0;
 80020a6:	4b21      	ldr	r3, [pc, #132]	; (800212c <StartMQTTConnectTask+0x588>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	701a      	strb	r2, [r3, #0]

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 80020ac:	2200      	movs	r2, #0
 80020ae:	2108      	movs	r1, #8
 80020b0:	481f      	ldr	r0, [pc, #124]	; (8002130 <StartMQTTConnectTask+0x58c>)
 80020b2:	f002 fbfd 	bl	80048b0 <HAL_GPIO_WritePin>
		  //start receiving data from broker
		  osMutexRelease(UART1MutexHandle);
 80020b6:	4b1f      	ldr	r3, [pc, #124]	; (8002134 <StartMQTTConnectTask+0x590>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f006 f879 	bl	80081b2 <osMutexRelease>
		  PINGTaskHandle = osThreadNew(PINGStartTask, NULL, &PINGTask_attributes);
 80020c0:	4a1d      	ldr	r2, [pc, #116]	; (8002138 <StartMQTTConnectTask+0x594>)
 80020c2:	2100      	movs	r1, #0
 80020c4:	481d      	ldr	r0, [pc, #116]	; (800213c <StartMQTTConnectTask+0x598>)
 80020c6:	f005 fe09 	bl	8007cdc <osThreadNew>
 80020ca:	4603      	mov	r3, r0
 80020cc:	4a1c      	ldr	r2, [pc, #112]	; (8002140 <StartMQTTConnectTask+0x59c>)
 80020ce:	6013      	str	r3, [r2, #0]
		  sprintf(&(msg.str), "On the line, Firmware V0.93\r\n\0");
 80020d0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80020d4:	491b      	ldr	r1, [pc, #108]	; (8002144 <StartMQTTConnectTask+0x5a0>)
 80020d6:	4618      	mov	r0, r3
 80020d8:	f009 fe3c 	bl	800bd54 <siprintf>
		  osMessageQueuePut(SIM800SendQueueHandle, &msg, 0, osWaitForever);
 80020dc:	4b1a      	ldr	r3, [pc, #104]	; (8002148 <StartMQTTConnectTask+0x5a4>)
 80020de:	6818      	ldr	r0, [r3, #0]
 80020e0:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80020e4:	f04f 33ff 	mov.w	r3, #4294967295
 80020e8:	2200      	movs	r2, #0
 80020ea:	f006 fa33 	bl	8008554 <osMessageQueuePut>
		  //HAL_UART_Receive_DMA(&huart1, SIM800BuffRx, BUFF_SIM_SIZE); //start receive messages
		  osThreadTerminate(MQTTConnectTaskHandle);
 80020ee:	4b17      	ldr	r3, [pc, #92]	; (800214c <StartMQTTConnectTask+0x5a8>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f005 fe84 	bl	8007e00 <osThreadTerminate>
	  if (osMutexAcquire(UART1MutexHandle, osWaitForever) == osOK)
 80020f8:	e564      	b.n	8001bc4 <StartMQTTConnectTask+0x20>
 80020fa:	bf00      	nop
 80020fc:	2000041c 	.word	0x2000041c
 8002100:	20000010 	.word	0x20000010
 8002104:	0800d31c 	.word	0x0800d31c
 8002108:	20000164 	.word	0x20000164
 800210c:	0800d320 	.word	0x0800d320
 8002110:	20000390 	.word	0x20000390
 8002114:	20000024 	.word	0x20000024
 8002118:	0800d330 	.word	0x0800d330
 800211c:	0800d340 	.word	0x0800d340
 8002120:	200003b4 	.word	0x200003b4
 8002124:	2000039c 	.word	0x2000039c
 8002128:	200003a0 	.word	0x200003a0
 800212c:	200003b5 	.word	0x200003b5
 8002130:	40020800 	.word	0x40020800
 8002134:	200003a4 	.word	0x200003a4
 8002138:	0800da88 	.word	0x0800da88
 800213c:	080013a1 	.word	0x080013a1
 8002140:	2000037c 	.word	0x2000037c
 8002144:	0800d354 	.word	0x0800d354
 8002148:	20000394 	.word	0x20000394
 800214c:	20000384 	.word	0x20000384

08002150 <StartMessHandlerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMessHandlerTask */
void StartMessHandlerTask(void *argument)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b0a6      	sub	sp, #152	; 0x98
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
	message_type msg;
	message_type msg2;
  /* Infinite loop */
  for(;;)
  {
	  if (osMessageQueueGet(RxSIM800QueueHandle, &msg, 0, osWaitForever) == osOK)
 8002158:	4b48      	ldr	r3, [pc, #288]	; (800227c <StartMessHandlerTask+0x12c>)
 800215a:	6818      	ldr	r0, [r3, #0]
 800215c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002160:	f04f 33ff 	mov.w	r3, #4294967295
 8002164:	2200      	movs	r2, #0
 8002166:	f006 fa55 	bl	8008614 <osMessageQueueGet>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1f3      	bne.n	8002158 <StartMessHandlerTask+0x8>
	  {

		sprintf(&(msg2.str), "RX\r\n\0");
 8002170:	f107 0308 	add.w	r3, r7, #8
 8002174:	4942      	ldr	r1, [pc, #264]	; (8002280 <StartMessHandlerTask+0x130>)
 8002176:	4618      	mov	r0, r3
 8002178:	f009 fdec 	bl	800bd54 <siprintf>
		osMessageQueuePut(SIM800SendQueueHandle, &msg2, 0, osWaitForever);
 800217c:	4b41      	ldr	r3, [pc, #260]	; (8002284 <StartMessHandlerTask+0x134>)
 800217e:	6818      	ldr	r0, [r3, #0]
 8002180:	f107 0108 	add.w	r1, r7, #8
 8002184:	f04f 33ff 	mov.w	r3, #4294967295
 8002188:	2200      	movs	r2, #0
 800218a:	f006 f9e3 	bl	8008554 <osMessageQueuePut>
		if (String_in_String(msg.str,MESSAGE_TYPE_BUFF_SIZE,";;on"))
 800218e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002192:	4a3d      	ldr	r2, [pc, #244]	; (8002288 <StartMessHandlerTask+0x138>)
 8002194:	2146      	movs	r1, #70	; 0x46
 8002196:	4618      	mov	r0, r3
 8002198:	f7fe fe10 	bl	8000dbc <String_in_String>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d005      	beq.n	80021ae <StartMessHandlerTask+0x5e>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 80021a2:	2200      	movs	r2, #0
 80021a4:	2102      	movs	r1, #2
 80021a6:	4839      	ldr	r0, [pc, #228]	; (800228c <StartMessHandlerTask+0x13c>)
 80021a8:	f002 fb82 	bl	80048b0 <HAL_GPIO_WritePin>
 80021ac:	e7d4      	b.n	8002158 <StartMessHandlerTask+0x8>
		}
		else if (String_in_String(msg.str,MESSAGE_TYPE_BUFF_SIZE,";;off"))
 80021ae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80021b2:	4a37      	ldr	r2, [pc, #220]	; (8002290 <StartMessHandlerTask+0x140>)
 80021b4:	2146      	movs	r1, #70	; 0x46
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7fe fe00 	bl	8000dbc <String_in_String>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d005      	beq.n	80021ce <StartMessHandlerTask+0x7e>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1);
 80021c2:	2201      	movs	r2, #1
 80021c4:	2102      	movs	r1, #2
 80021c6:	4831      	ldr	r0, [pc, #196]	; (800228c <StartMessHandlerTask+0x13c>)
 80021c8:	f002 fb72 	bl	80048b0 <HAL_GPIO_WritePin>
 80021cc:	e7c4      	b.n	8002158 <StartMessHandlerTask+0x8>
		}
		else if (String_in_String(msg.str,MESSAGE_TYPE_BUFF_SIZE,";;data"))
 80021ce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80021d2:	4a30      	ldr	r2, [pc, #192]	; (8002294 <StartMessHandlerTask+0x144>)
 80021d4:	2146      	movs	r1, #70	; 0x46
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7fe fdf0 	bl	8000dbc <String_in_String>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d003      	beq.n	80021ea <StartMessHandlerTask+0x9a>
		{
			Get_data = 1;
 80021e2:	4b2d      	ldr	r3, [pc, #180]	; (8002298 <StartMessHandlerTask+0x148>)
 80021e4:	2201      	movs	r2, #1
 80021e6:	701a      	strb	r2, [r3, #0]
 80021e8:	e7b6      	b.n	8002158 <StartMessHandlerTask+0x8>
		}
		else if (String_in_String(msg.str,MESSAGE_TYPE_BUFF_SIZE,";;updt"))
 80021ea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80021ee:	4a2b      	ldr	r2, [pc, #172]	; (800229c <StartMessHandlerTask+0x14c>)
 80021f0:	2146      	movs	r1, #70	; 0x46
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7fe fde2 	bl	8000dbc <String_in_String>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d0ac      	beq.n	8002158 <StartMessHandlerTask+0x8>
		{
			if (osMutexAcquire(UART1MutexHandle, osWaitForever) == osOK)
 80021fe:	4b28      	ldr	r3, [pc, #160]	; (80022a0 <StartMessHandlerTask+0x150>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f04f 31ff 	mov.w	r1, #4294967295
 8002206:	4618      	mov	r0, r3
 8002208:	f005 ff88 	bl	800811c <osMutexAcquire>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1a2      	bne.n	8002158 <StartMessHandlerTask+0x8>
		    {
				memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002212:	224c      	movs	r2, #76	; 0x4c
 8002214:	2100      	movs	r1, #0
 8002216:	4823      	ldr	r0, [pc, #140]	; (80022a4 <StartMessHandlerTask+0x154>)
 8002218:	f009 fd60 	bl	800bcdc <memset>
				sprintf(str_SIM800,"AT+CIPCLOSE\r\n\0");
 800221c:	4922      	ldr	r1, [pc, #136]	; (80022a8 <StartMessHandlerTask+0x158>)
 800221e:	4823      	ldr	r0, [pc, #140]	; (80022ac <StartMessHandlerTask+0x15c>)
 8002220:	f009 fd98 	bl	800bd54 <siprintf>
				HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 8002224:	4821      	ldr	r0, [pc, #132]	; (80022ac <StartMessHandlerTask+0x15c>)
 8002226:	f7fd fff3 	bl	8000210 <strlen>
 800222a:	4603      	mov	r3, r0
 800222c:	b29b      	uxth	r3, r3
 800222e:	461a      	mov	r2, r3
 8002230:	491e      	ldr	r1, [pc, #120]	; (80022ac <StartMessHandlerTask+0x15c>)
 8002232:	481f      	ldr	r0, [pc, #124]	; (80022b0 <StartMessHandlerTask+0x160>)
 8002234:	f004 fa4c 	bl	80066d0 <HAL_UART_Transmit_DMA>
				osDelay(1000);
 8002238:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800223c:	f005 fe0d 	bl	8007e5a <osDelay>
				osThreadTerminate(PINGTaskHandle);
 8002240:	4b1c      	ldr	r3, [pc, #112]	; (80022b4 <StartMessHandlerTask+0x164>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4618      	mov	r0, r3
 8002246:	f005 fddb 	bl	8007e00 <osThreadTerminate>
				osThreadTerminate(SIM800SendTaskHandle);
 800224a:	4b1b      	ldr	r3, [pc, #108]	; (80022b8 <StartMessHandlerTask+0x168>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f005 fdd6 	bl	8007e00 <osThreadTerminate>
				osThreadTerminate(defaultTaskHandle);
 8002254:	4b19      	ldr	r3, [pc, #100]	; (80022bc <StartMessHandlerTask+0x16c>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4618      	mov	r0, r3
 800225a:	f005 fdd1 	bl	8007e00 <osThreadTerminate>
				osMutexRelease(UART1MutexHandle); //release UART for SIM800
 800225e:	4b10      	ldr	r3, [pc, #64]	; (80022a0 <StartMessHandlerTask+0x150>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4618      	mov	r0, r3
 8002264:	f005 ffa5 	bl	80081b2 <osMutexRelease>
				myTaskGetFirmHandle = osThreadNew(StartGetFirmware, NULL, &myTaskGetFirm_attributes);
 8002268:	4a15      	ldr	r2, [pc, #84]	; (80022c0 <StartMessHandlerTask+0x170>)
 800226a:	2100      	movs	r1, #0
 800226c:	4815      	ldr	r0, [pc, #84]	; (80022c4 <StartMessHandlerTask+0x174>)
 800226e:	f005 fd35 	bl	8007cdc <osThreadNew>
 8002272:	4603      	mov	r3, r0
 8002274:	4a14      	ldr	r2, [pc, #80]	; (80022c8 <StartMessHandlerTask+0x178>)
 8002276:	6013      	str	r3, [r2, #0]
	  if (osMessageQueueGet(RxSIM800QueueHandle, &msg, 0, osWaitForever) == osOK)
 8002278:	e76e      	b.n	8002158 <StartMessHandlerTask+0x8>
 800227a:	bf00      	nop
 800227c:	20000398 	.word	0x20000398
 8002280:	0800d3a8 	.word	0x0800d3a8
 8002284:	20000394 	.word	0x20000394
 8002288:	0800d3b0 	.word	0x0800d3b0
 800228c:	40020800 	.word	0x40020800
 8002290:	0800d3b8 	.word	0x0800d3b8
 8002294:	0800d3c0 	.word	0x0800d3c0
 8002298:	200003b6 	.word	0x200003b6
 800229c:	0800d3c8 	.word	0x0800d3c8
 80022a0:	200003a4 	.word	0x200003a4
 80022a4:	2000041c 	.word	0x2000041c
 80022a8:	0800d3d0 	.word	0x0800d3d0
 80022ac:	200003d0 	.word	0x200003d0
 80022b0:	20000164 	.word	0x20000164
 80022b4:	2000037c 	.word	0x2000037c
 80022b8:	20000378 	.word	0x20000378
 80022bc:	2000036c 	.word	0x2000036c
 80022c0:	0800db18 	.word	0x0800db18
 80022c4:	080022cd 	.word	0x080022cd
 80022c8:	2000038c 	.word	0x2000038c

080022cc <StartGetFirmware>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGetFirmware */
void StartGetFirmware(void *argument)
{
 80022cc:	b590      	push	{r4, r7, lr}
 80022ce:	b0c5      	sub	sp, #276	; 0x114
 80022d0:	af02      	add	r7, sp, #8
 80022d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80022d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80022da:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartGetFirmware */
	message_type msg; // string for debug message
	uint8_t ans; //is one string in another
	uint8_t send_MQTT_message[BUFF_SIM_SIZE] = {}; //message to SIM800
 80022dc:	2300      	movs	r3, #0
 80022de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022e0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80022e4:	2248      	movs	r2, #72	; 0x48
 80022e6:	2100      	movs	r1, #0
 80022e8:	4618      	mov	r0, r3
 80022ea:	f009 fcf7 	bl	800bcdc <memset>
	uint32_t sector_of_firmware = 30;
 80022ee:	231e      	movs	r3, #30
 80022f0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	uint8_t tmp2[30];
	uint8_t tmp3[30];
  /* Infinite loop */
  for(;;)
  {
	  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 80022f4:	4bc0      	ldr	r3, [pc, #768]	; (80025f8 <StartGetFirmware+0x32c>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68da      	ldr	r2, [r3, #12]
 80022fa:	4bbf      	ldr	r3, [pc, #764]	; (80025f8 <StartGetFirmware+0x32c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f042 0210 	orr.w	r2, r2, #16
 8002302:	60da      	str	r2, [r3, #12]
	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002304:	224c      	movs	r2, #76	; 0x4c
 8002306:	2100      	movs	r1, #0
 8002308:	48bc      	ldr	r0, [pc, #752]	; (80025fc <StartGetFirmware+0x330>)
 800230a:	f009 fce7 	bl	800bcdc <memset>
	  sprintf(str_SIM800,"AT+FTPMODE=1\r\n\0");
 800230e:	49bc      	ldr	r1, [pc, #752]	; (8002600 <StartGetFirmware+0x334>)
 8002310:	48bc      	ldr	r0, [pc, #752]	; (8002604 <StartGetFirmware+0x338>)
 8002312:	f009 fd1f 	bl	800bd54 <siprintf>
	  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 8002316:	48bb      	ldr	r0, [pc, #748]	; (8002604 <StartGetFirmware+0x338>)
 8002318:	f7fd ff7a 	bl	8000210 <strlen>
 800231c:	4603      	mov	r3, r0
 800231e:	b29b      	uxth	r3, r3
 8002320:	461a      	mov	r2, r3
 8002322:	49b8      	ldr	r1, [pc, #736]	; (8002604 <StartGetFirmware+0x338>)
 8002324:	48b4      	ldr	r0, [pc, #720]	; (80025f8 <StartGetFirmware+0x32c>)
 8002326:	f004 f9d3 	bl	80066d0 <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 800232a:	48b7      	ldr	r0, [pc, #732]	; (8002608 <StartGetFirmware+0x33c>)
 800232c:	f7fe fdf4 	bl	8000f18 <SIM800_Ans>
 8002330:	4603      	mov	r3, r0
 8002332:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	  if (!ans)
 8002336:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 800233a:	2b00      	cmp	r3, #0
 800233c:	d11d      	bne.n	800237a <StartGetFirmware+0xae>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 800233e:	224c      	movs	r2, #76	; 0x4c
 8002340:	2100      	movs	r1, #0
 8002342:	48ae      	ldr	r0, [pc, #696]	; (80025fc <StartGetFirmware+0x330>)
 8002344:	f009 fcca 	bl	800bcdc <memset>
		  ans = SIM800_Ans("OK");
 8002348:	48af      	ldr	r0, [pc, #700]	; (8002608 <StartGetFirmware+0x33c>)
 800234a:	f7fe fde5 	bl	8000f18 <SIM800_Ans>
 800234e:	4603      	mov	r3, r0
 8002350:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
		  if (!ans)
 8002354:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8002358:	2b00      	cmp	r3, #0
 800235a:	d10e      	bne.n	800237a <StartGetFirmware+0xae>
		  {
			  strcpy(&(msg.str), "FTPMODE\r\n\0");
 800235c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002360:	4aaa      	ldr	r2, [pc, #680]	; (800260c <StartGetFirmware+0x340>)
 8002362:	ca07      	ldmia	r2, {r0, r1, r2}
 8002364:	c303      	stmia	r3!, {r0, r1}
 8002366:	801a      	strh	r2, [r3, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8002368:	4ba9      	ldr	r3, [pc, #676]	; (8002610 <StartGetFirmware+0x344>)
 800236a:	6818      	ldr	r0, [r3, #0]
 800236c:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002370:	f04f 33ff 	mov.w	r3, #4294967295
 8002374:	2200      	movs	r2, #0
 8002376:	f006 f8ed 	bl	8008554 <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 800237a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800237e:	f005 fd6c 	bl	8007e5a <osDelay>
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
		  }
	  }
	  osDelay(300);*/

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002382:	224c      	movs	r2, #76	; 0x4c
 8002384:	2100      	movs	r1, #0
 8002386:	489d      	ldr	r0, [pc, #628]	; (80025fc <StartGetFirmware+0x330>)
 8002388:	f009 fca8 	bl	800bcdc <memset>
	  sprintf(str_SIM800,"AT+FTPTYPE=I\r\n\0");
 800238c:	49a1      	ldr	r1, [pc, #644]	; (8002614 <StartGetFirmware+0x348>)
 800238e:	489d      	ldr	r0, [pc, #628]	; (8002604 <StartGetFirmware+0x338>)
 8002390:	f009 fce0 	bl	800bd54 <siprintf>
	  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 8002394:	489b      	ldr	r0, [pc, #620]	; (8002604 <StartGetFirmware+0x338>)
 8002396:	f7fd ff3b 	bl	8000210 <strlen>
 800239a:	4603      	mov	r3, r0
 800239c:	b29b      	uxth	r3, r3
 800239e:	461a      	mov	r2, r3
 80023a0:	4998      	ldr	r1, [pc, #608]	; (8002604 <StartGetFirmware+0x338>)
 80023a2:	4895      	ldr	r0, [pc, #596]	; (80025f8 <StartGetFirmware+0x32c>)
 80023a4:	f004 f994 	bl	80066d0 <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 80023a8:	4897      	ldr	r0, [pc, #604]	; (8002608 <StartGetFirmware+0x33c>)
 80023aa:	f7fe fdb5 	bl	8000f18 <SIM800_Ans>
 80023ae:	4603      	mov	r3, r0
 80023b0:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	  if (!ans)
 80023b4:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d11d      	bne.n	80023f8 <StartGetFirmware+0x12c>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80023bc:	224c      	movs	r2, #76	; 0x4c
 80023be:	2100      	movs	r1, #0
 80023c0:	488e      	ldr	r0, [pc, #568]	; (80025fc <StartGetFirmware+0x330>)
 80023c2:	f009 fc8b 	bl	800bcdc <memset>
		  ans = SIM800_Ans("OK");
 80023c6:	4890      	ldr	r0, [pc, #576]	; (8002608 <StartGetFirmware+0x33c>)
 80023c8:	f7fe fda6 	bl	8000f18 <SIM800_Ans>
 80023cc:	4603      	mov	r3, r0
 80023ce:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
		  if (!ans)
 80023d2:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d10e      	bne.n	80023f8 <StartGetFirmware+0x12c>
		  {
			  strcpy(&(msg.str), "FTPTYPE\r\n\0");
 80023da:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80023de:	4a8e      	ldr	r2, [pc, #568]	; (8002618 <StartGetFirmware+0x34c>)
 80023e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80023e2:	c303      	stmia	r3!, {r0, r1}
 80023e4:	801a      	strh	r2, [r3, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 80023e6:	4b8a      	ldr	r3, [pc, #552]	; (8002610 <StartGetFirmware+0x344>)
 80023e8:	6818      	ldr	r0, [r3, #0]
 80023ea:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80023ee:	f04f 33ff 	mov.w	r3, #4294967295
 80023f2:	2200      	movs	r2, #0
 80023f4:	f006 f8ae 	bl	8008554 <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 80023f8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80023fc:	f005 fd2d 	bl	8007e5a <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002400:	224c      	movs	r2, #76	; 0x4c
 8002402:	2100      	movs	r1, #0
 8002404:	487d      	ldr	r0, [pc, #500]	; (80025fc <StartGetFirmware+0x330>)
 8002406:	f009 fc69 	bl	800bcdc <memset>
	  sprintf(str_SIM800,"AT+SAPBR=3,1,CONTYPE,GPRS\r\n\0");
 800240a:	4984      	ldr	r1, [pc, #528]	; (800261c <StartGetFirmware+0x350>)
 800240c:	487d      	ldr	r0, [pc, #500]	; (8002604 <StartGetFirmware+0x338>)
 800240e:	f009 fca1 	bl	800bd54 <siprintf>
	  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 8002412:	487c      	ldr	r0, [pc, #496]	; (8002604 <StartGetFirmware+0x338>)
 8002414:	f7fd fefc 	bl	8000210 <strlen>
 8002418:	4603      	mov	r3, r0
 800241a:	b29b      	uxth	r3, r3
 800241c:	461a      	mov	r2, r3
 800241e:	4979      	ldr	r1, [pc, #484]	; (8002604 <StartGetFirmware+0x338>)
 8002420:	4875      	ldr	r0, [pc, #468]	; (80025f8 <StartGetFirmware+0x32c>)
 8002422:	f004 f955 	bl	80066d0 <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 8002426:	4878      	ldr	r0, [pc, #480]	; (8002608 <StartGetFirmware+0x33c>)
 8002428:	f7fe fd76 	bl	8000f18 <SIM800_Ans>
 800242c:	4603      	mov	r3, r0
 800242e:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	  if (!ans)
 8002432:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8002436:	2b00      	cmp	r3, #0
 8002438:	d11e      	bne.n	8002478 <StartGetFirmware+0x1ac>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 800243a:	224c      	movs	r2, #76	; 0x4c
 800243c:	2100      	movs	r1, #0
 800243e:	486f      	ldr	r0, [pc, #444]	; (80025fc <StartGetFirmware+0x330>)
 8002440:	f009 fc4c 	bl	800bcdc <memset>
		  ans = SIM800_Ans("OK");
 8002444:	4870      	ldr	r0, [pc, #448]	; (8002608 <StartGetFirmware+0x33c>)
 8002446:	f7fe fd67 	bl	8000f18 <SIM800_Ans>
 800244a:	4603      	mov	r3, r0
 800244c:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
		  if (!ans)
 8002450:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8002454:	2b00      	cmp	r3, #0
 8002456:	d10f      	bne.n	8002478 <StartGetFirmware+0x1ac>
		  {
			  strcpy(&(msg.str), "SAPBR\r\n\0");
 8002458:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800245c:	4a70      	ldr	r2, [pc, #448]	; (8002620 <StartGetFirmware+0x354>)
 800245e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002462:	e883 0003 	stmia.w	r3, {r0, r1}
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8002466:	4b6a      	ldr	r3, [pc, #424]	; (8002610 <StartGetFirmware+0x344>)
 8002468:	6818      	ldr	r0, [r3, #0]
 800246a:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800246e:	f04f 33ff 	mov.w	r3, #4294967295
 8002472:	2200      	movs	r2, #0
 8002474:	f006 f86e 	bl	8008554 <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 8002478:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800247c:	f005 fced 	bl	8007e5a <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002480:	224c      	movs	r2, #76	; 0x4c
 8002482:	2100      	movs	r1, #0
 8002484:	485d      	ldr	r0, [pc, #372]	; (80025fc <StartGetFirmware+0x330>)
 8002486:	f009 fc29 	bl	800bcdc <memset>
	  sprintf(str_SIM800,"AT+SAPBR=3,1,APN,internet.beeline.ru\r\n\0");
 800248a:	4966      	ldr	r1, [pc, #408]	; (8002624 <StartGetFirmware+0x358>)
 800248c:	485d      	ldr	r0, [pc, #372]	; (8002604 <StartGetFirmware+0x338>)
 800248e:	f009 fc61 	bl	800bd54 <siprintf>
	  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 8002492:	485c      	ldr	r0, [pc, #368]	; (8002604 <StartGetFirmware+0x338>)
 8002494:	f7fd febc 	bl	8000210 <strlen>
 8002498:	4603      	mov	r3, r0
 800249a:	b29b      	uxth	r3, r3
 800249c:	461a      	mov	r2, r3
 800249e:	4959      	ldr	r1, [pc, #356]	; (8002604 <StartGetFirmware+0x338>)
 80024a0:	4855      	ldr	r0, [pc, #340]	; (80025f8 <StartGetFirmware+0x32c>)
 80024a2:	f004 f915 	bl	80066d0 <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 80024a6:	4858      	ldr	r0, [pc, #352]	; (8002608 <StartGetFirmware+0x33c>)
 80024a8:	f7fe fd36 	bl	8000f18 <SIM800_Ans>
 80024ac:	4603      	mov	r3, r0
 80024ae:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	  if (!ans)
 80024b2:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d11e      	bne.n	80024f8 <StartGetFirmware+0x22c>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80024ba:	224c      	movs	r2, #76	; 0x4c
 80024bc:	2100      	movs	r1, #0
 80024be:	484f      	ldr	r0, [pc, #316]	; (80025fc <StartGetFirmware+0x330>)
 80024c0:	f009 fc0c 	bl	800bcdc <memset>
		  ans = SIM800_Ans("OK");
 80024c4:	4850      	ldr	r0, [pc, #320]	; (8002608 <StartGetFirmware+0x33c>)
 80024c6:	f7fe fd27 	bl	8000f18 <SIM800_Ans>
 80024ca:	4603      	mov	r3, r0
 80024cc:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
		  if (!ans)
 80024d0:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d10f      	bne.n	80024f8 <StartGetFirmware+0x22c>
		  {
			  strcpy(&(msg.str), "SAPBR\r\n\0");
 80024d8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80024dc:	4a50      	ldr	r2, [pc, #320]	; (8002620 <StartGetFirmware+0x354>)
 80024de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024e2:	e883 0003 	stmia.w	r3, {r0, r1}
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 80024e6:	4b4a      	ldr	r3, [pc, #296]	; (8002610 <StartGetFirmware+0x344>)
 80024e8:	6818      	ldr	r0, [r3, #0]
 80024ea:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80024ee:	f04f 33ff 	mov.w	r3, #4294967295
 80024f2:	2200      	movs	r2, #0
 80024f4:	f006 f82e 	bl	8008554 <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 80024f8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80024fc:	f005 fcad 	bl	8007e5a <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002500:	224c      	movs	r2, #76	; 0x4c
 8002502:	2100      	movs	r1, #0
 8002504:	483d      	ldr	r0, [pc, #244]	; (80025fc <StartGetFirmware+0x330>)
 8002506:	f009 fbe9 	bl	800bcdc <memset>
	  sprintf(str_SIM800,"AT+SAPBR=1,1\r\n\0");
 800250a:	4947      	ldr	r1, [pc, #284]	; (8002628 <StartGetFirmware+0x35c>)
 800250c:	483d      	ldr	r0, [pc, #244]	; (8002604 <StartGetFirmware+0x338>)
 800250e:	f009 fc21 	bl	800bd54 <siprintf>
	  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 8002512:	483c      	ldr	r0, [pc, #240]	; (8002604 <StartGetFirmware+0x338>)
 8002514:	f7fd fe7c 	bl	8000210 <strlen>
 8002518:	4603      	mov	r3, r0
 800251a:	b29b      	uxth	r3, r3
 800251c:	461a      	mov	r2, r3
 800251e:	4939      	ldr	r1, [pc, #228]	; (8002604 <StartGetFirmware+0x338>)
 8002520:	4835      	ldr	r0, [pc, #212]	; (80025f8 <StartGetFirmware+0x32c>)
 8002522:	f004 f8d5 	bl	80066d0 <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 8002526:	4838      	ldr	r0, [pc, #224]	; (8002608 <StartGetFirmware+0x33c>)
 8002528:	f7fe fcf6 	bl	8000f18 <SIM800_Ans>
 800252c:	4603      	mov	r3, r0
 800252e:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	  if (!ans)
 8002532:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8002536:	2b00      	cmp	r3, #0
 8002538:	d11e      	bne.n	8002578 <StartGetFirmware+0x2ac>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 800253a:	224c      	movs	r2, #76	; 0x4c
 800253c:	2100      	movs	r1, #0
 800253e:	482f      	ldr	r0, [pc, #188]	; (80025fc <StartGetFirmware+0x330>)
 8002540:	f009 fbcc 	bl	800bcdc <memset>
		  ans = SIM800_Ans("OK");
 8002544:	4830      	ldr	r0, [pc, #192]	; (8002608 <StartGetFirmware+0x33c>)
 8002546:	f7fe fce7 	bl	8000f18 <SIM800_Ans>
 800254a:	4603      	mov	r3, r0
 800254c:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
		  if (!ans)
 8002550:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8002554:	2b00      	cmp	r3, #0
 8002556:	d10f      	bne.n	8002578 <StartGetFirmware+0x2ac>
		  {
			  strcpy(&(msg.str), "SAPBR\r\n\0");
 8002558:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800255c:	4a30      	ldr	r2, [pc, #192]	; (8002620 <StartGetFirmware+0x354>)
 800255e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002562:	e883 0003 	stmia.w	r3, {r0, r1}
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8002566:	4b2a      	ldr	r3, [pc, #168]	; (8002610 <StartGetFirmware+0x344>)
 8002568:	6818      	ldr	r0, [r3, #0]
 800256a:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800256e:	f04f 33ff 	mov.w	r3, #4294967295
 8002572:	2200      	movs	r2, #0
 8002574:	f005 ffee 	bl	8008554 <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 8002578:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800257c:	f005 fc6d 	bl	8007e5a <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002580:	224c      	movs	r2, #76	; 0x4c
 8002582:	2100      	movs	r1, #0
 8002584:	481d      	ldr	r0, [pc, #116]	; (80025fc <StartGetFirmware+0x330>)
 8002586:	f009 fba9 	bl	800bcdc <memset>
	  sprintf(str_SIM800,"AT+FTPCID=1\r\n\0");
 800258a:	4928      	ldr	r1, [pc, #160]	; (800262c <StartGetFirmware+0x360>)
 800258c:	481d      	ldr	r0, [pc, #116]	; (8002604 <StartGetFirmware+0x338>)
 800258e:	f009 fbe1 	bl	800bd54 <siprintf>
	  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 8002592:	481c      	ldr	r0, [pc, #112]	; (8002604 <StartGetFirmware+0x338>)
 8002594:	f7fd fe3c 	bl	8000210 <strlen>
 8002598:	4603      	mov	r3, r0
 800259a:	b29b      	uxth	r3, r3
 800259c:	461a      	mov	r2, r3
 800259e:	4919      	ldr	r1, [pc, #100]	; (8002604 <StartGetFirmware+0x338>)
 80025a0:	4815      	ldr	r0, [pc, #84]	; (80025f8 <StartGetFirmware+0x32c>)
 80025a2:	f004 f895 	bl	80066d0 <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 80025a6:	4818      	ldr	r0, [pc, #96]	; (8002608 <StartGetFirmware+0x33c>)
 80025a8:	f7fe fcb6 	bl	8000f18 <SIM800_Ans>
 80025ac:	4603      	mov	r3, r0
 80025ae:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	  if (!ans)
 80025b2:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d13c      	bne.n	8002634 <StartGetFirmware+0x368>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80025ba:	224c      	movs	r2, #76	; 0x4c
 80025bc:	2100      	movs	r1, #0
 80025be:	480f      	ldr	r0, [pc, #60]	; (80025fc <StartGetFirmware+0x330>)
 80025c0:	f009 fb8c 	bl	800bcdc <memset>
		  ans = SIM800_Ans("OK");
 80025c4:	4810      	ldr	r0, [pc, #64]	; (8002608 <StartGetFirmware+0x33c>)
 80025c6:	f7fe fca7 	bl	8000f18 <SIM800_Ans>
 80025ca:	4603      	mov	r3, r0
 80025cc:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
		  if (!ans)
 80025d0:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d12d      	bne.n	8002634 <StartGetFirmware+0x368>
		  {
			  strcpy(&(msg.str), "FTPCID\r\n\0");
 80025d8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80025dc:	4a14      	ldr	r2, [pc, #80]	; (8002630 <StartGetFirmware+0x364>)
 80025de:	ca07      	ldmia	r2, {r0, r1, r2}
 80025e0:	c303      	stmia	r3!, {r0, r1}
 80025e2:	701a      	strb	r2, [r3, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 80025e4:	4b0a      	ldr	r3, [pc, #40]	; (8002610 <StartGetFirmware+0x344>)
 80025e6:	6818      	ldr	r0, [r3, #0]
 80025e8:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80025ec:	f04f 33ff 	mov.w	r3, #4294967295
 80025f0:	2200      	movs	r2, #0
 80025f2:	f005 ffaf 	bl	8008554 <osMessageQueuePut>
 80025f6:	e01d      	b.n	8002634 <StartGetFirmware+0x368>
 80025f8:	20000164 	.word	0x20000164
 80025fc:	2000041c 	.word	0x2000041c
 8002600:	0800d3e0 	.word	0x0800d3e0
 8002604:	200003d0 	.word	0x200003d0
 8002608:	0800d148 	.word	0x0800d148
 800260c:	0800d3f0 	.word	0x0800d3f0
 8002610:	20000390 	.word	0x20000390
 8002614:	0800d3fc 	.word	0x0800d3fc
 8002618:	0800d40c 	.word	0x0800d40c
 800261c:	0800d418 	.word	0x0800d418
 8002620:	0800d438 	.word	0x0800d438
 8002624:	0800d444 	.word	0x0800d444
 8002628:	0800d46c 	.word	0x0800d46c
 800262c:	0800d47c 	.word	0x0800d47c
 8002630:	0800d48c 	.word	0x0800d48c
		  }
	  }
	  osDelay(300);
 8002634:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002638:	f005 fc0f 	bl	8007e5a <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 800263c:	224c      	movs	r2, #76	; 0x4c
 800263e:	2100      	movs	r1, #0
 8002640:	48c4      	ldr	r0, [pc, #784]	; (8002954 <StartGetFirmware+0x688>)
 8002642:	f009 fb4b 	bl	800bcdc <memset>
	  sprintf(str_SIM800,"AT+FTPSERV=%s\r\n\0", DEF_IP_FTP);
 8002646:	4ac4      	ldr	r2, [pc, #784]	; (8002958 <StartGetFirmware+0x68c>)
 8002648:	49c4      	ldr	r1, [pc, #784]	; (800295c <StartGetFirmware+0x690>)
 800264a:	48c5      	ldr	r0, [pc, #788]	; (8002960 <StartGetFirmware+0x694>)
 800264c:	f009 fb82 	bl	800bd54 <siprintf>
	  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 8002650:	48c3      	ldr	r0, [pc, #780]	; (8002960 <StartGetFirmware+0x694>)
 8002652:	f7fd fddd 	bl	8000210 <strlen>
 8002656:	4603      	mov	r3, r0
 8002658:	b29b      	uxth	r3, r3
 800265a:	461a      	mov	r2, r3
 800265c:	49c0      	ldr	r1, [pc, #768]	; (8002960 <StartGetFirmware+0x694>)
 800265e:	48c1      	ldr	r0, [pc, #772]	; (8002964 <StartGetFirmware+0x698>)
 8002660:	f004 f836 	bl	80066d0 <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 8002664:	48c0      	ldr	r0, [pc, #768]	; (8002968 <StartGetFirmware+0x69c>)
 8002666:	f7fe fc57 	bl	8000f18 <SIM800_Ans>
 800266a:	4603      	mov	r3, r0
 800266c:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	  if (!ans)
 8002670:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8002674:	2b00      	cmp	r3, #0
 8002676:	d11d      	bne.n	80026b4 <StartGetFirmware+0x3e8>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002678:	224c      	movs	r2, #76	; 0x4c
 800267a:	2100      	movs	r1, #0
 800267c:	48b5      	ldr	r0, [pc, #724]	; (8002954 <StartGetFirmware+0x688>)
 800267e:	f009 fb2d 	bl	800bcdc <memset>
		  ans = SIM800_Ans("OK");
 8002682:	48b9      	ldr	r0, [pc, #740]	; (8002968 <StartGetFirmware+0x69c>)
 8002684:	f7fe fc48 	bl	8000f18 <SIM800_Ans>
 8002688:	4603      	mov	r3, r0
 800268a:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
		  if (!ans)
 800268e:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10e      	bne.n	80026b4 <StartGetFirmware+0x3e8>
		  {
			  strcpy(&(msg.str), "FTPSERV\r\n\0");
 8002696:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800269a:	4ab4      	ldr	r2, [pc, #720]	; (800296c <StartGetFirmware+0x6a0>)
 800269c:	ca07      	ldmia	r2, {r0, r1, r2}
 800269e:	c303      	stmia	r3!, {r0, r1}
 80026a0:	801a      	strh	r2, [r3, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 80026a2:	4bb3      	ldr	r3, [pc, #716]	; (8002970 <StartGetFirmware+0x6a4>)
 80026a4:	6818      	ldr	r0, [r3, #0]
 80026a6:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80026aa:	f04f 33ff 	mov.w	r3, #4294967295
 80026ae:	2200      	movs	r2, #0
 80026b0:	f005 ff50 	bl	8008554 <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 80026b4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80026b8:	f005 fbcf 	bl	8007e5a <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80026bc:	224c      	movs	r2, #76	; 0x4c
 80026be:	2100      	movs	r1, #0
 80026c0:	48a4      	ldr	r0, [pc, #656]	; (8002954 <StartGetFirmware+0x688>)
 80026c2:	f009 fb0b 	bl	800bcdc <memset>
	  sprintf(str_SIM800,"AT+FTPUN=%s\r\n\0", DEF_USER_FTP);
 80026c6:	4aab      	ldr	r2, [pc, #684]	; (8002974 <StartGetFirmware+0x6a8>)
 80026c8:	49ab      	ldr	r1, [pc, #684]	; (8002978 <StartGetFirmware+0x6ac>)
 80026ca:	48a5      	ldr	r0, [pc, #660]	; (8002960 <StartGetFirmware+0x694>)
 80026cc:	f009 fb42 	bl	800bd54 <siprintf>
	  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 80026d0:	48a3      	ldr	r0, [pc, #652]	; (8002960 <StartGetFirmware+0x694>)
 80026d2:	f7fd fd9d 	bl	8000210 <strlen>
 80026d6:	4603      	mov	r3, r0
 80026d8:	b29b      	uxth	r3, r3
 80026da:	461a      	mov	r2, r3
 80026dc:	49a0      	ldr	r1, [pc, #640]	; (8002960 <StartGetFirmware+0x694>)
 80026de:	48a1      	ldr	r0, [pc, #644]	; (8002964 <StartGetFirmware+0x698>)
 80026e0:	f003 fff6 	bl	80066d0 <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 80026e4:	48a0      	ldr	r0, [pc, #640]	; (8002968 <StartGetFirmware+0x69c>)
 80026e6:	f7fe fc17 	bl	8000f18 <SIM800_Ans>
 80026ea:	4603      	mov	r3, r0
 80026ec:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	  if (!ans)
 80026f0:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d11e      	bne.n	8002736 <StartGetFirmware+0x46a>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80026f8:	224c      	movs	r2, #76	; 0x4c
 80026fa:	2100      	movs	r1, #0
 80026fc:	4895      	ldr	r0, [pc, #596]	; (8002954 <StartGetFirmware+0x688>)
 80026fe:	f009 faed 	bl	800bcdc <memset>
		  ans = SIM800_Ans("OK");
 8002702:	4899      	ldr	r0, [pc, #612]	; (8002968 <StartGetFirmware+0x69c>)
 8002704:	f7fe fc08 	bl	8000f18 <SIM800_Ans>
 8002708:	4603      	mov	r3, r0
 800270a:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
		  if (!ans)
 800270e:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8002712:	2b00      	cmp	r3, #0
 8002714:	d10f      	bne.n	8002736 <StartGetFirmware+0x46a>
		  {
			  strcpy(&(msg.str), "FTPUN\r\n\0");
 8002716:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800271a:	4a98      	ldr	r2, [pc, #608]	; (800297c <StartGetFirmware+0x6b0>)
 800271c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002720:	e883 0003 	stmia.w	r3, {r0, r1}
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8002724:	4b92      	ldr	r3, [pc, #584]	; (8002970 <StartGetFirmware+0x6a4>)
 8002726:	6818      	ldr	r0, [r3, #0]
 8002728:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800272c:	f04f 33ff 	mov.w	r3, #4294967295
 8002730:	2200      	movs	r2, #0
 8002732:	f005 ff0f 	bl	8008554 <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 8002736:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800273a:	f005 fb8e 	bl	8007e5a <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 800273e:	224c      	movs	r2, #76	; 0x4c
 8002740:	2100      	movs	r1, #0
 8002742:	4884      	ldr	r0, [pc, #528]	; (8002954 <StartGetFirmware+0x688>)
 8002744:	f009 faca 	bl	800bcdc <memset>
	  sprintf(str_SIM800,"AT+FTPPW=%s\r\n\0", DEF_PASSWORD_FTP);
 8002748:	4a8d      	ldr	r2, [pc, #564]	; (8002980 <StartGetFirmware+0x6b4>)
 800274a:	498e      	ldr	r1, [pc, #568]	; (8002984 <StartGetFirmware+0x6b8>)
 800274c:	4884      	ldr	r0, [pc, #528]	; (8002960 <StartGetFirmware+0x694>)
 800274e:	f009 fb01 	bl	800bd54 <siprintf>
	  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 8002752:	4883      	ldr	r0, [pc, #524]	; (8002960 <StartGetFirmware+0x694>)
 8002754:	f7fd fd5c 	bl	8000210 <strlen>
 8002758:	4603      	mov	r3, r0
 800275a:	b29b      	uxth	r3, r3
 800275c:	461a      	mov	r2, r3
 800275e:	4980      	ldr	r1, [pc, #512]	; (8002960 <StartGetFirmware+0x694>)
 8002760:	4880      	ldr	r0, [pc, #512]	; (8002964 <StartGetFirmware+0x698>)
 8002762:	f003 ffb5 	bl	80066d0 <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 8002766:	4880      	ldr	r0, [pc, #512]	; (8002968 <StartGetFirmware+0x69c>)
 8002768:	f7fe fbd6 	bl	8000f18 <SIM800_Ans>
 800276c:	4603      	mov	r3, r0
 800276e:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	  if (!ans)
 8002772:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8002776:	2b00      	cmp	r3, #0
 8002778:	d11e      	bne.n	80027b8 <StartGetFirmware+0x4ec>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 800277a:	224c      	movs	r2, #76	; 0x4c
 800277c:	2100      	movs	r1, #0
 800277e:	4875      	ldr	r0, [pc, #468]	; (8002954 <StartGetFirmware+0x688>)
 8002780:	f009 faac 	bl	800bcdc <memset>
		  ans = SIM800_Ans("OK");
 8002784:	4878      	ldr	r0, [pc, #480]	; (8002968 <StartGetFirmware+0x69c>)
 8002786:	f7fe fbc7 	bl	8000f18 <SIM800_Ans>
 800278a:	4603      	mov	r3, r0
 800278c:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
		  if (!ans)
 8002790:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8002794:	2b00      	cmp	r3, #0
 8002796:	d10f      	bne.n	80027b8 <StartGetFirmware+0x4ec>
		  {
			  strcpy(&(msg.str), "FTPPW\r\n\0");
 8002798:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800279c:	4a7a      	ldr	r2, [pc, #488]	; (8002988 <StartGetFirmware+0x6bc>)
 800279e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027a2:	e883 0003 	stmia.w	r3, {r0, r1}
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 80027a6:	4b72      	ldr	r3, [pc, #456]	; (8002970 <StartGetFirmware+0x6a4>)
 80027a8:	6818      	ldr	r0, [r3, #0]
 80027aa:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80027ae:	f04f 33ff 	mov.w	r3, #4294967295
 80027b2:	2200      	movs	r2, #0
 80027b4:	f005 fece 	bl	8008554 <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 80027b8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80027bc:	f005 fb4d 	bl	8007e5a <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80027c0:	224c      	movs	r2, #76	; 0x4c
 80027c2:	2100      	movs	r1, #0
 80027c4:	4863      	ldr	r0, [pc, #396]	; (8002954 <StartGetFirmware+0x688>)
 80027c6:	f009 fa89 	bl	800bcdc <memset>
	  sprintf(str_SIM800,"AT+FTPGETPATH=/firmware/\r\n\0");
 80027ca:	4970      	ldr	r1, [pc, #448]	; (800298c <StartGetFirmware+0x6c0>)
 80027cc:	4864      	ldr	r0, [pc, #400]	; (8002960 <StartGetFirmware+0x694>)
 80027ce:	f009 fac1 	bl	800bd54 <siprintf>
	  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 80027d2:	4863      	ldr	r0, [pc, #396]	; (8002960 <StartGetFirmware+0x694>)
 80027d4:	f7fd fd1c 	bl	8000210 <strlen>
 80027d8:	4603      	mov	r3, r0
 80027da:	b29b      	uxth	r3, r3
 80027dc:	461a      	mov	r2, r3
 80027de:	4960      	ldr	r1, [pc, #384]	; (8002960 <StartGetFirmware+0x694>)
 80027e0:	4860      	ldr	r0, [pc, #384]	; (8002964 <StartGetFirmware+0x698>)
 80027e2:	f003 ff75 	bl	80066d0 <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 80027e6:	4860      	ldr	r0, [pc, #384]	; (8002968 <StartGetFirmware+0x69c>)
 80027e8:	f7fe fb96 	bl	8000f18 <SIM800_Ans>
 80027ec:	4603      	mov	r3, r0
 80027ee:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	  if (!ans)
 80027f2:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d11f      	bne.n	800283a <StartGetFirmware+0x56e>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80027fa:	224c      	movs	r2, #76	; 0x4c
 80027fc:	2100      	movs	r1, #0
 80027fe:	4855      	ldr	r0, [pc, #340]	; (8002954 <StartGetFirmware+0x688>)
 8002800:	f009 fa6c 	bl	800bcdc <memset>
		  ans = SIM800_Ans("OK");
 8002804:	4858      	ldr	r0, [pc, #352]	; (8002968 <StartGetFirmware+0x69c>)
 8002806:	f7fe fb87 	bl	8000f18 <SIM800_Ans>
 800280a:	4603      	mov	r3, r0
 800280c:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
		  if (!ans)
 8002810:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8002814:	2b00      	cmp	r3, #0
 8002816:	d110      	bne.n	800283a <StartGetFirmware+0x56e>
		  {
			  strcpy(&(msg.str), "FTPGETPATH\r\n\0");
 8002818:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800281c:	4a5c      	ldr	r2, [pc, #368]	; (8002990 <StartGetFirmware+0x6c4>)
 800281e:	461c      	mov	r4, r3
 8002820:	4613      	mov	r3, r2
 8002822:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002824:	c407      	stmia	r4!, {r0, r1, r2}
 8002826:	7023      	strb	r3, [r4, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8002828:	4b51      	ldr	r3, [pc, #324]	; (8002970 <StartGetFirmware+0x6a4>)
 800282a:	6818      	ldr	r0, [r3, #0]
 800282c:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002830:	f04f 33ff 	mov.w	r3, #4294967295
 8002834:	2200      	movs	r2, #0
 8002836:	f005 fe8d 	bl	8008554 <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 800283a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800283e:	f005 fb0c 	bl	8007e5a <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002842:	224c      	movs	r2, #76	; 0x4c
 8002844:	2100      	movs	r1, #0
 8002846:	4843      	ldr	r0, [pc, #268]	; (8002954 <StartGetFirmware+0x688>)
 8002848:	f009 fa48 	bl	800bcdc <memset>
	  sprintf(str_SIM800,"AT+FTPGETNAME=Firmware.txt\r\n\0");
 800284c:	4951      	ldr	r1, [pc, #324]	; (8002994 <StartGetFirmware+0x6c8>)
 800284e:	4844      	ldr	r0, [pc, #272]	; (8002960 <StartGetFirmware+0x694>)
 8002850:	f009 fa80 	bl	800bd54 <siprintf>
	  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 8002854:	4842      	ldr	r0, [pc, #264]	; (8002960 <StartGetFirmware+0x694>)
 8002856:	f7fd fcdb 	bl	8000210 <strlen>
 800285a:	4603      	mov	r3, r0
 800285c:	b29b      	uxth	r3, r3
 800285e:	461a      	mov	r2, r3
 8002860:	493f      	ldr	r1, [pc, #252]	; (8002960 <StartGetFirmware+0x694>)
 8002862:	4840      	ldr	r0, [pc, #256]	; (8002964 <StartGetFirmware+0x698>)
 8002864:	f003 ff34 	bl	80066d0 <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 8002868:	483f      	ldr	r0, [pc, #252]	; (8002968 <StartGetFirmware+0x69c>)
 800286a:	f7fe fb55 	bl	8000f18 <SIM800_Ans>
 800286e:	4603      	mov	r3, r0
 8002870:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	  if (!ans)
 8002874:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8002878:	2b00      	cmp	r3, #0
 800287a:	d11f      	bne.n	80028bc <StartGetFirmware+0x5f0>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 800287c:	224c      	movs	r2, #76	; 0x4c
 800287e:	2100      	movs	r1, #0
 8002880:	4834      	ldr	r0, [pc, #208]	; (8002954 <StartGetFirmware+0x688>)
 8002882:	f009 fa2b 	bl	800bcdc <memset>
		  ans = SIM800_Ans("OK");
 8002886:	4838      	ldr	r0, [pc, #224]	; (8002968 <StartGetFirmware+0x69c>)
 8002888:	f7fe fb46 	bl	8000f18 <SIM800_Ans>
 800288c:	4603      	mov	r3, r0
 800288e:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
		  if (!ans)
 8002892:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8002896:	2b00      	cmp	r3, #0
 8002898:	d110      	bne.n	80028bc <StartGetFirmware+0x5f0>
		  {
			  strcpy(&(msg.str), "FTPGETNAME\r\n\0");
 800289a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800289e:	4a3e      	ldr	r2, [pc, #248]	; (8002998 <StartGetFirmware+0x6cc>)
 80028a0:	461c      	mov	r4, r3
 80028a2:	4613      	mov	r3, r2
 80028a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028a6:	c407      	stmia	r4!, {r0, r1, r2}
 80028a8:	7023      	strb	r3, [r4, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 80028aa:	4b31      	ldr	r3, [pc, #196]	; (8002970 <StartGetFirmware+0x6a4>)
 80028ac:	6818      	ldr	r0, [r3, #0]
 80028ae:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80028b2:	f04f 33ff 	mov.w	r3, #4294967295
 80028b6:	2200      	movs	r2, #0
 80028b8:	f005 fe4c 	bl	8008554 <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 80028bc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80028c0:	f005 facb 	bl	8007e5a <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80028c4:	224c      	movs	r2, #76	; 0x4c
 80028c6:	2100      	movs	r1, #0
 80028c8:	4822      	ldr	r0, [pc, #136]	; (8002954 <StartGetFirmware+0x688>)
 80028ca:	f009 fa07 	bl	800bcdc <memset>
	  sprintf(str_SIM800,"AT+FTPGETTOFS=0,Firmware.txt\r\n\0");
 80028ce:	4933      	ldr	r1, [pc, #204]	; (800299c <StartGetFirmware+0x6d0>)
 80028d0:	4823      	ldr	r0, [pc, #140]	; (8002960 <StartGetFirmware+0x694>)
 80028d2:	f009 fa3f 	bl	800bd54 <siprintf>
	  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 80028d6:	4822      	ldr	r0, [pc, #136]	; (8002960 <StartGetFirmware+0x694>)
 80028d8:	f7fd fc9a 	bl	8000210 <strlen>
 80028dc:	4603      	mov	r3, r0
 80028de:	b29b      	uxth	r3, r3
 80028e0:	461a      	mov	r2, r3
 80028e2:	491f      	ldr	r1, [pc, #124]	; (8002960 <StartGetFirmware+0x694>)
 80028e4:	481f      	ldr	r0, [pc, #124]	; (8002964 <StartGetFirmware+0x698>)
 80028e6:	f003 fef3 	bl	80066d0 <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 80028ea:	481f      	ldr	r0, [pc, #124]	; (8002968 <StartGetFirmware+0x69c>)
 80028ec:	f7fe fb14 	bl	8000f18 <SIM800_Ans>
 80028f0:	4603      	mov	r3, r0
 80028f2:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	  if (!ans)
 80028f6:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d11f      	bne.n	800293e <StartGetFirmware+0x672>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80028fe:	224c      	movs	r2, #76	; 0x4c
 8002900:	2100      	movs	r1, #0
 8002902:	4814      	ldr	r0, [pc, #80]	; (8002954 <StartGetFirmware+0x688>)
 8002904:	f009 f9ea 	bl	800bcdc <memset>
		  ans = SIM800_Ans("OK");
 8002908:	4817      	ldr	r0, [pc, #92]	; (8002968 <StartGetFirmware+0x69c>)
 800290a:	f7fe fb05 	bl	8000f18 <SIM800_Ans>
 800290e:	4603      	mov	r3, r0
 8002910:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
		  if (!ans)
 8002914:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8002918:	2b00      	cmp	r3, #0
 800291a:	d110      	bne.n	800293e <StartGetFirmware+0x672>
		  {
			  strcpy(&(msg.str), "FTPGETTOFS\r\n\0");
 800291c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002920:	4a1f      	ldr	r2, [pc, #124]	; (80029a0 <StartGetFirmware+0x6d4>)
 8002922:	461c      	mov	r4, r3
 8002924:	4613      	mov	r3, r2
 8002926:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002928:	c407      	stmia	r4!, {r0, r1, r2}
 800292a:	7023      	strb	r3, [r4, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 800292c:	4b10      	ldr	r3, [pc, #64]	; (8002970 <StartGetFirmware+0x6a4>)
 800292e:	6818      	ldr	r0, [r3, #0]
 8002930:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002934:	f04f 33ff 	mov.w	r3, #4294967295
 8002938:	2200      	movs	r2, #0
 800293a:	f005 fe0b 	bl	8008554 <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 800293e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002942:	f005 fa8a 	bl	8007e5a <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002946:	224c      	movs	r2, #76	; 0x4c
 8002948:	2100      	movs	r1, #0
 800294a:	4802      	ldr	r0, [pc, #8]	; (8002954 <StartGetFirmware+0x688>)
 800294c:	f009 f9c6 	bl	800bcdc <memset>
 8002950:	e028      	b.n	80029a4 <StartGetFirmware+0x6d8>
 8002952:	bf00      	nop
 8002954:	2000041c 	.word	0x2000041c
 8002958:	0800d498 	.word	0x0800d498
 800295c:	0800d4a8 	.word	0x0800d4a8
 8002960:	200003d0 	.word	0x200003d0
 8002964:	20000164 	.word	0x20000164
 8002968:	0800d148 	.word	0x0800d148
 800296c:	0800d4bc 	.word	0x0800d4bc
 8002970:	20000390 	.word	0x20000390
 8002974:	0800d4c8 	.word	0x0800d4c8
 8002978:	0800d4d4 	.word	0x0800d4d4
 800297c:	0800d4e4 	.word	0x0800d4e4
 8002980:	0800d4f0 	.word	0x0800d4f0
 8002984:	0800d4fc 	.word	0x0800d4fc
 8002988:	0800d50c 	.word	0x0800d50c
 800298c:	0800d518 	.word	0x0800d518
 8002990:	0800d534 	.word	0x0800d534
 8002994:	0800d544 	.word	0x0800d544
 8002998:	0800d564 	.word	0x0800d564
 800299c:	0800d574 	.word	0x0800d574
 80029a0:	0800d594 	.word	0x0800d594
	  RX = 0;
 80029a4:	4b88      	ldr	r3, [pc, #544]	; (8002bc8 <StartGetFirmware+0x8fc>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	701a      	strb	r2, [r3, #0]
	  Tech_ans_wait = 1;
 80029aa:	4b88      	ldr	r3, [pc, #544]	; (8002bcc <StartGetFirmware+0x900>)
 80029ac:	2201      	movs	r2, #1
 80029ae:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Receive_DMA(&huart1, SIM800BuffRx, BUFF_SIM_SIZE);
 80029b0:	224c      	movs	r2, #76	; 0x4c
 80029b2:	4987      	ldr	r1, [pc, #540]	; (8002bd0 <StartGetFirmware+0x904>)
 80029b4:	4887      	ldr	r0, [pc, #540]	; (8002bd4 <StartGetFirmware+0x908>)
 80029b6:	f003 ff09 	bl	80067cc <HAL_UART_Receive_DMA>
	  while (RX != 1) {};
 80029ba:	bf00      	nop
 80029bc:	4b82      	ldr	r3, [pc, #520]	; (8002bc8 <StartGetFirmware+0x8fc>)
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d1fb      	bne.n	80029bc <StartGetFirmware+0x6f0>
	  Tech_ans_wait = 0;
 80029c4:	4b81      	ldr	r3, [pc, #516]	; (8002bcc <StartGetFirmware+0x900>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	701a      	strb	r2, [r3, #0]



	  //good download
	  if (String_in_SIM800BuffRx("+FTPGETTOFS: "))
 80029ca:	4883      	ldr	r0, [pc, #524]	; (8002bd8 <StartGetFirmware+0x90c>)
 80029cc:	f7fe f9b2 	bl	8000d34 <String_in_SIM800BuffRx>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f43f ac8e 	beq.w	80022f4 <StartGetFirmware+0x28>
	  {
		  sscanf(SIM800BuffRx, "%s%2s%d", tmp2, tmp3, &firmware_count_bytes);
 80029d8:	f107 0108 	add.w	r1, r7, #8
 80029dc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80029e0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80029e4:	9300      	str	r3, [sp, #0]
 80029e6:	460b      	mov	r3, r1
 80029e8:	497c      	ldr	r1, [pc, #496]	; (8002bdc <StartGetFirmware+0x910>)
 80029ea:	4879      	ldr	r0, [pc, #484]	; (8002bd0 <StartGetFirmware+0x904>)
 80029ec:	f009 f9d2 	bl	800bd94 <siscanf>

		  SPI2_Init_Master();
 80029f0:	f7fe f924 	bl	8000c3c <SPI2_Init_Master>
		  HAL_Delay(200);
 80029f4:	20c8      	movs	r0, #200	; 0xc8
 80029f6:	f001 f88b 	bl	8003b10 <HAL_Delay>

		  W25qxx_Init();
 80029fa:	f000 fce1 	bl	80033c0 <W25qxx_Init>

		  uint32_t count_of_pages = (firmware_count_bytes / 256) + ((firmware_count_bytes % 256) ? 1 : 0);
 80029fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a00:	0a1b      	lsrs	r3, r3, #8
 8002a02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a04:	b2d2      	uxtb	r2, r2
 8002a06:	2a00      	cmp	r2, #0
 8002a08:	d001      	beq.n	8002a0e <StartGetFirmware+0x742>
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	e000      	b.n	8002a10 <StartGetFirmware+0x744>
 8002a0e:	2200      	movs	r2, #0
 8002a10:	4413      	add	r3, r2
 8002a12:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		  uint32_t count_of_sectors = (firmware_count_bytes / 4096) + ((firmware_count_bytes % 4096) ? 1 : 0);
 8002a16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a18:	0b1b      	lsrs	r3, r3, #12
 8002a1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a1c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002a20:	2a00      	cmp	r2, #0
 8002a22:	d001      	beq.n	8002a28 <StartGetFirmware+0x75c>
 8002a24:	2201      	movs	r2, #1
 8002a26:	e000      	b.n	8002a2a <StartGetFirmware+0x75e>
 8002a28:	2200      	movs	r2, #0
 8002a2a:	4413      	add	r3, r2
 8002a2c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
		  count_of_sectors++;
 8002a30:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002a34:	3301      	adds	r3, #1
 8002a36:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

		  //start write from 30 sector
		  for (uint32_t i = 0; i <= count_of_sectors; i++)
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002a40:	e010      	b.n	8002a64 <StartGetFirmware+0x798>
		  {
			  // sectors for clear
			  uint32_t tmp = i + sector_of_firmware - 1;
 8002a42:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8002a46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a4a:	4413      	add	r3, r2
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
			  W25qxx_EraseSector(tmp);
 8002a52:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8002a56:	f000 ff17 	bl	8003888 <W25qxx_EraseSector>
		  for (uint32_t i = 0; i <= count_of_sectors; i++)
 8002a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002a5e:	3301      	adds	r3, #1
 8002a60:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002a64:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8002a68:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d9e8      	bls.n	8002a42 <StartGetFirmware+0x776>
		  }

		  //writes size of firmware
		  tmp4 = (firmware_count_bytes & 0xFF0000) >> 16;
 8002a70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a72:	0c1b      	lsrs	r3, r3, #16
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	4a5a      	ldr	r2, [pc, #360]	; (8002be0 <StartGetFirmware+0x914>)
 8002a78:	6013      	str	r3, [r2, #0]
		  tmp5 = (firmware_count_bytes & 0xFF00) >> 8;
 8002a7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a7c:	0a1b      	lsrs	r3, r3, #8
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	4a58      	ldr	r2, [pc, #352]	; (8002be4 <StartGetFirmware+0x918>)
 8002a82:	6013      	str	r3, [r2, #0]
		  tmp6 = (firmware_count_bytes & 0xFF);
 8002a84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	4a57      	ldr	r2, [pc, #348]	; (8002be8 <StartGetFirmware+0x91c>)
 8002a8a:	6013      	str	r3, [r2, #0]
		  Size_of_firmwware[0] = tmp4;
 8002a8c:	4b54      	ldr	r3, [pc, #336]	; (8002be0 <StartGetFirmware+0x914>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	b2da      	uxtb	r2, r3
 8002a92:	4b56      	ldr	r3, [pc, #344]	; (8002bec <StartGetFirmware+0x920>)
 8002a94:	701a      	strb	r2, [r3, #0]
		  Size_of_firmwware[1] = tmp5;
 8002a96:	4b53      	ldr	r3, [pc, #332]	; (8002be4 <StartGetFirmware+0x918>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	b2da      	uxtb	r2, r3
 8002a9c:	4b53      	ldr	r3, [pc, #332]	; (8002bec <StartGetFirmware+0x920>)
 8002a9e:	705a      	strb	r2, [r3, #1]
		  Size_of_firmwware[2] = tmp6;
 8002aa0:	4b51      	ldr	r3, [pc, #324]	; (8002be8 <StartGetFirmware+0x91c>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	b2da      	uxtb	r2, r3
 8002aa6:	4b51      	ldr	r3, [pc, #324]	; (8002bec <StartGetFirmware+0x920>)
 8002aa8:	709a      	strb	r2, [r3, #2]

		  int32_t page_start1 = 16 * (sector_of_firmware - 1);
 8002aaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	011b      	lsls	r3, r3, #4
 8002ab2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

		  W25qxx_WritePage(Size_of_firmwware, page_start1, 0, 3);
 8002ab6:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8002aba:	2303      	movs	r3, #3
 8002abc:	2200      	movs	r2, #0
 8002abe:	484b      	ldr	r0, [pc, #300]	; (8002bec <StartGetFirmware+0x920>)
 8002ac0:	f000 ff38 	bl	8003934 <W25qxx_WritePage>

		  for (uint32_t i = 0; i < count_of_pages; i++)
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002aca:	e054      	b.n	8002b76 <StartGetFirmware+0x8aa>
		  {
			  int32_t start = i * 256;
 8002acc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002ad0:	021b      	lsls	r3, r3, #8
 8002ad2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
			  //start += (i > 0) ? 1 : 0;

			  memset(firmware_buf, 0, 399);
 8002ad6:	f240 128f 	movw	r2, #399	; 0x18f
 8002ada:	2100      	movs	r1, #0
 8002adc:	4844      	ldr	r0, [pc, #272]	; (8002bf0 <StartGetFirmware+0x924>)
 8002ade:	f009 f8fd 	bl	800bcdc <memset>
			  sprintf(str_SIM800,"AT+FSREAD=C:\\User\\FTP\\Firmware.txt,1,256,%d\r\n\0", start);
 8002ae2:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002ae6:	4943      	ldr	r1, [pc, #268]	; (8002bf4 <StartGetFirmware+0x928>)
 8002ae8:	4843      	ldr	r0, [pc, #268]	; (8002bf8 <StartGetFirmware+0x92c>)
 8002aea:	f009 f933 	bl	800bd54 <siprintf>
			  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 8002aee:	4842      	ldr	r0, [pc, #264]	; (8002bf8 <StartGetFirmware+0x92c>)
 8002af0:	f7fd fb8e 	bl	8000210 <strlen>
 8002af4:	4603      	mov	r3, r0
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	461a      	mov	r2, r3
 8002afa:	493f      	ldr	r1, [pc, #252]	; (8002bf8 <StartGetFirmware+0x92c>)
 8002afc:	4835      	ldr	r0, [pc, #212]	; (8002bd4 <StartGetFirmware+0x908>)
 8002afe:	f003 fde7 	bl	80066d0 <HAL_UART_Transmit_DMA>
			  RX = 0;
 8002b02:	4b31      	ldr	r3, [pc, #196]	; (8002bc8 <StartGetFirmware+0x8fc>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	701a      	strb	r2, [r3, #0]
			  Tech_ans_wait = 1;
 8002b08:	4b30      	ldr	r3, [pc, #192]	; (8002bcc <StartGetFirmware+0x900>)
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Receive_DMA(&huart1, firmware_buf, 390);
 8002b0e:	f44f 72c3 	mov.w	r2, #390	; 0x186
 8002b12:	4937      	ldr	r1, [pc, #220]	; (8002bf0 <StartGetFirmware+0x924>)
 8002b14:	482f      	ldr	r0, [pc, #188]	; (8002bd4 <StartGetFirmware+0x908>)
 8002b16:	f003 fe59 	bl	80067cc <HAL_UART_Receive_DMA>
			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8002b1a:	2140      	movs	r1, #64	; 0x40
 8002b1c:	4837      	ldr	r0, [pc, #220]	; (8002bfc <StartGetFirmware+0x930>)
 8002b1e:	f001 fee0 	bl	80048e2 <HAL_GPIO_TogglePin>
			  while (RX != 1) {};
 8002b22:	bf00      	nop
 8002b24:	4b28      	ldr	r3, [pc, #160]	; (8002bc8 <StartGetFirmware+0x8fc>)
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d1fb      	bne.n	8002b24 <StartGetFirmware+0x858>
			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8002b2c:	2140      	movs	r1, #64	; 0x40
 8002b2e:	4833      	ldr	r0, [pc, #204]	; (8002bfc <StartGetFirmware+0x930>)
 8002b30:	f001 fed7 	bl	80048e2 <HAL_GPIO_TogglePin>
			  Tech_ans_wait = 0;
 8002b34:	4b25      	ldr	r3, [pc, #148]	; (8002bcc <StartGetFirmware+0x900>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	701a      	strb	r2, [r3, #0]

			  int32_t page_start =  i + 16 * sector_of_firmware; // number of start page
 8002b3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b3e:	011a      	lsls	r2, r3, #4
 8002b40:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002b44:	4413      	add	r3, r2
 8002b46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
			  W25qxx_WritePage(firmware_buf + strlen(str_SIM800) + 1, page_start, 0, 256);
 8002b4a:	482b      	ldr	r0, [pc, #172]	; (8002bf8 <StartGetFirmware+0x92c>)
 8002b4c:	f7fd fb60 	bl	8000210 <strlen>
 8002b50:	4603      	mov	r3, r0
 8002b52:	3301      	adds	r3, #1
 8002b54:	4a26      	ldr	r2, [pc, #152]	; (8002bf0 <StartGetFirmware+0x924>)
 8002b56:	1898      	adds	r0, r3, r2
 8002b58:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8002b5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b60:	2200      	movs	r2, #0
 8002b62:	f000 fee7 	bl	8003934 <W25qxx_WritePage>
			  osDelay(10); //importent!!!
 8002b66:	200a      	movs	r0, #10
 8002b68:	f005 f977 	bl	8007e5a <osDelay>
		  for (uint32_t i = 0; i < count_of_pages; i++)
 8002b6c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002b70:	3301      	adds	r3, #1
 8002b72:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002b76:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8002b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d3a4      	bcc.n	8002acc <StartGetFirmware+0x800>
		  }
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8002b82:	2140      	movs	r1, #64	; 0x40
 8002b84:	481d      	ldr	r0, [pc, #116]	; (8002bfc <StartGetFirmware+0x930>)
 8002b86:	f001 feac 	bl	80048e2 <HAL_GPIO_TogglePin>
		  osDelay(2000);
 8002b8a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002b8e:	f005 f964 	bl	8007e5a <osDelay>
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8002b92:	2140      	movs	r1, #64	; 0x40
 8002b94:	4819      	ldr	r0, [pc, #100]	; (8002bfc <StartGetFirmware+0x930>)
 8002b96:	f001 fea4 	bl	80048e2 <HAL_GPIO_TogglePin>

		  HAL_Delay(200);
 8002b9a:	20c8      	movs	r0, #200	; 0xc8
 8002b9c:	f000 ffb8 	bl	8003b10 <HAL_Delay>
		  //";start"
		  strcpy(&(msg.str), ";start");
 8002ba0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002ba4:	4a16      	ldr	r2, [pc, #88]	; (8002c00 <StartGetFirmware+0x934>)
 8002ba6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002baa:	6018      	str	r0, [r3, #0]
 8002bac:	3304      	adds	r3, #4
 8002bae:	8019      	strh	r1, [r3, #0]
 8002bb0:	3302      	adds	r3, #2
 8002bb2:	0c0a      	lsrs	r2, r1, #16
 8002bb4:	701a      	strb	r2, [r3, #0]
		  //HAL_UART_Transmit_DMA(&huart2, msg.str, MESSAGE_TYPE_BUFF_SIZE);
		  HAL_Delay(1000);
 8002bb6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002bba:	f000 ffa9 	bl	8003b10 <HAL_Delay>
		  HAL_NVIC_SystemReset();
 8002bbe:	f001 f8c4 	bl	8003d4a <HAL_NVIC_SystemReset>
  {
 8002bc2:	f7ff bb97 	b.w	80022f4 <StartGetFirmware+0x28>
 8002bc6:	bf00      	nop
 8002bc8:	200003b3 	.word	0x200003b3
 8002bcc:	200003b5 	.word	0x200003b5
 8002bd0:	2000041c 	.word	0x2000041c
 8002bd4:	20000164 	.word	0x20000164
 8002bd8:	0800d5a4 	.word	0x0800d5a4
 8002bdc:	0800d5b4 	.word	0x0800d5b4
 8002be0:	20000640 	.word	0x20000640
 8002be4:	20000644 	.word	0x20000644
 8002be8:	20000648 	.word	0x20000648
 8002bec:	2000064c 	.word	0x2000064c
 8002bf0:	20000468 	.word	0x20000468
 8002bf4:	0800d5bc 	.word	0x0800d5bc
 8002bf8:	200003d0 	.word	0x200003d0
 8002bfc:	40020000 	.word	0x40020000
 8002c00:	0800d5ec 	.word	0x0800d5ec

08002c04 <CallbackPingTimer>:
  /* USER CODE END StartGetFirmware */
}

/* CallbackPingTimer function */
void CallbackPingTimer(void *argument)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackPingTimer */
	osSemaphoreRelease(PINGSemHandle);
 8002c0c:	4b04      	ldr	r3, [pc, #16]	; (8002c20 <CallbackPingTimer+0x1c>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4618      	mov	r0, r3
 8002c12:	f005 fbe7 	bl	80083e4 <osSemaphoreRelease>
  /* USER CODE END CallbackPingTimer */
}
 8002c16:	bf00      	nop
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	200003a8 	.word	0x200003a8

08002c24 <CallbackDataTimer>:

/* CallbackDataTimer function */
void CallbackDataTimer(void *argument)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackDataTimer */
	Get_data = 1;
 8002c2c:	4b04      	ldr	r3, [pc, #16]	; (8002c40 <CallbackDataTimer+0x1c>)
 8002c2e:	2201      	movs	r2, #1
 8002c30:	701a      	strb	r2, [r3, #0]
  /* USER CODE END CallbackDataTimer */
}
 8002c32:	bf00      	nop
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	200003b6 	.word	0x200003b6

08002c44 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a04      	ldr	r2, [pc, #16]	; (8002c64 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d101      	bne.n	8002c5a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002c56:	f000 ff3b 	bl	8003ad0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002c5a:	bf00      	nop
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	40010000 	.word	0x40010000

08002c68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c6c:	b672      	cpsid	i
}
 8002c6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c70:	e7fe      	b.n	8002c70 <Error_Handler+0x8>
	...

08002c74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	607b      	str	r3, [r7, #4]
 8002c7e:	4b12      	ldr	r3, [pc, #72]	; (8002cc8 <HAL_MspInit+0x54>)
 8002c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c82:	4a11      	ldr	r2, [pc, #68]	; (8002cc8 <HAL_MspInit+0x54>)
 8002c84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c88:	6453      	str	r3, [r2, #68]	; 0x44
 8002c8a:	4b0f      	ldr	r3, [pc, #60]	; (8002cc8 <HAL_MspInit+0x54>)
 8002c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c92:	607b      	str	r3, [r7, #4]
 8002c94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c96:	2300      	movs	r3, #0
 8002c98:	603b      	str	r3, [r7, #0]
 8002c9a:	4b0b      	ldr	r3, [pc, #44]	; (8002cc8 <HAL_MspInit+0x54>)
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	4a0a      	ldr	r2, [pc, #40]	; (8002cc8 <HAL_MspInit+0x54>)
 8002ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ca6:	4b08      	ldr	r3, [pc, #32]	; (8002cc8 <HAL_MspInit+0x54>)
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cae:	603b      	str	r3, [r7, #0]
 8002cb0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	210f      	movs	r1, #15
 8002cb6:	f06f 0001 	mvn.w	r0, #1
 8002cba:	f001 f81c 	bl	8003cf6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cbe:	bf00      	nop
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	40023800 	.word	0x40023800

08002ccc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b08a      	sub	sp, #40	; 0x28
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cd4:	f107 0314 	add.w	r3, r7, #20
 8002cd8:	2200      	movs	r2, #0
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	605a      	str	r2, [r3, #4]
 8002cde:	609a      	str	r2, [r3, #8]
 8002ce0:	60da      	str	r2, [r3, #12]
 8002ce2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a19      	ldr	r2, [pc, #100]	; (8002d50 <HAL_I2C_MspInit+0x84>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d12b      	bne.n	8002d46 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cee:	2300      	movs	r3, #0
 8002cf0:	613b      	str	r3, [r7, #16]
 8002cf2:	4b18      	ldr	r3, [pc, #96]	; (8002d54 <HAL_I2C_MspInit+0x88>)
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf6:	4a17      	ldr	r2, [pc, #92]	; (8002d54 <HAL_I2C_MspInit+0x88>)
 8002cf8:	f043 0302 	orr.w	r3, r3, #2
 8002cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cfe:	4b15      	ldr	r3, [pc, #84]	; (8002d54 <HAL_I2C_MspInit+0x88>)
 8002d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	613b      	str	r3, [r7, #16]
 8002d08:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d0a:	23c0      	movs	r3, #192	; 0xc0
 8002d0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d0e:	2312      	movs	r3, #18
 8002d10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d12:	2301      	movs	r3, #1
 8002d14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d16:	2303      	movs	r3, #3
 8002d18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d1a:	2304      	movs	r3, #4
 8002d1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d1e:	f107 0314 	add.w	r3, r7, #20
 8002d22:	4619      	mov	r1, r3
 8002d24:	480c      	ldr	r0, [pc, #48]	; (8002d58 <HAL_I2C_MspInit+0x8c>)
 8002d26:	f001 fc17 	bl	8004558 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	60fb      	str	r3, [r7, #12]
 8002d2e:	4b09      	ldr	r3, [pc, #36]	; (8002d54 <HAL_I2C_MspInit+0x88>)
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	4a08      	ldr	r2, [pc, #32]	; (8002d54 <HAL_I2C_MspInit+0x88>)
 8002d34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d38:	6413      	str	r3, [r2, #64]	; 0x40
 8002d3a:	4b06      	ldr	r3, [pc, #24]	; (8002d54 <HAL_I2C_MspInit+0x88>)
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d42:	60fb      	str	r3, [r7, #12]
 8002d44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002d46:	bf00      	nop
 8002d48:	3728      	adds	r7, #40	; 0x28
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	40005400 	.word	0x40005400
 8002d54:	40023800 	.word	0x40023800
 8002d58:	40020400 	.word	0x40020400

08002d5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b08a      	sub	sp, #40	; 0x28
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d64:	f107 0314 	add.w	r3, r7, #20
 8002d68:	2200      	movs	r2, #0
 8002d6a:	601a      	str	r2, [r3, #0]
 8002d6c:	605a      	str	r2, [r3, #4]
 8002d6e:	609a      	str	r2, [r3, #8]
 8002d70:	60da      	str	r2, [r3, #12]
 8002d72:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a19      	ldr	r2, [pc, #100]	; (8002de0 <HAL_SPI_MspInit+0x84>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d12c      	bne.n	8002dd8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002d7e:	2300      	movs	r3, #0
 8002d80:	613b      	str	r3, [r7, #16]
 8002d82:	4b18      	ldr	r3, [pc, #96]	; (8002de4 <HAL_SPI_MspInit+0x88>)
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	4a17      	ldr	r2, [pc, #92]	; (8002de4 <HAL_SPI_MspInit+0x88>)
 8002d88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d8e:	4b15      	ldr	r3, [pc, #84]	; (8002de4 <HAL_SPI_MspInit+0x88>)
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d96:	613b      	str	r3, [r7, #16]
 8002d98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60fb      	str	r3, [r7, #12]
 8002d9e:	4b11      	ldr	r3, [pc, #68]	; (8002de4 <HAL_SPI_MspInit+0x88>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da2:	4a10      	ldr	r2, [pc, #64]	; (8002de4 <HAL_SPI_MspInit+0x88>)
 8002da4:	f043 0302 	orr.w	r3, r3, #2
 8002da8:	6313      	str	r3, [r2, #48]	; 0x30
 8002daa:	4b0e      	ldr	r3, [pc, #56]	; (8002de4 <HAL_SPI_MspInit+0x88>)
 8002dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	60fb      	str	r3, [r7, #12]
 8002db4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8002db6:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8002dba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002dc8:	2305      	movs	r3, #5
 8002dca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dcc:	f107 0314 	add.w	r3, r7, #20
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	4805      	ldr	r0, [pc, #20]	; (8002de8 <HAL_SPI_MspInit+0x8c>)
 8002dd4:	f001 fbc0 	bl	8004558 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002dd8:	bf00      	nop
 8002dda:	3728      	adds	r7, #40	; 0x28
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	40003800 	.word	0x40003800
 8002de4:	40023800 	.word	0x40023800
 8002de8:	40020400 	.word	0x40020400

08002dec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b08c      	sub	sp, #48	; 0x30
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df4:	f107 031c 	add.w	r3, r7, #28
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	605a      	str	r2, [r3, #4]
 8002dfe:	609a      	str	r2, [r3, #8]
 8002e00:	60da      	str	r2, [r3, #12]
 8002e02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a97      	ldr	r2, [pc, #604]	; (8003068 <HAL_UART_MspInit+0x27c>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	f040 8092 	bne.w	8002f34 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e10:	2300      	movs	r3, #0
 8002e12:	61bb      	str	r3, [r7, #24]
 8002e14:	4b95      	ldr	r3, [pc, #596]	; (800306c <HAL_UART_MspInit+0x280>)
 8002e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e18:	4a94      	ldr	r2, [pc, #592]	; (800306c <HAL_UART_MspInit+0x280>)
 8002e1a:	f043 0310 	orr.w	r3, r3, #16
 8002e1e:	6453      	str	r3, [r2, #68]	; 0x44
 8002e20:	4b92      	ldr	r3, [pc, #584]	; (800306c <HAL_UART_MspInit+0x280>)
 8002e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e24:	f003 0310 	and.w	r3, r3, #16
 8002e28:	61bb      	str	r3, [r7, #24]
 8002e2a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	617b      	str	r3, [r7, #20]
 8002e30:	4b8e      	ldr	r3, [pc, #568]	; (800306c <HAL_UART_MspInit+0x280>)
 8002e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e34:	4a8d      	ldr	r2, [pc, #564]	; (800306c <HAL_UART_MspInit+0x280>)
 8002e36:	f043 0301 	orr.w	r3, r3, #1
 8002e3a:	6313      	str	r3, [r2, #48]	; 0x30
 8002e3c:	4b8b      	ldr	r3, [pc, #556]	; (800306c <HAL_UART_MspInit+0x280>)
 8002e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	617b      	str	r3, [r7, #20]
 8002e46:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002e48:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002e4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e4e:	2302      	movs	r3, #2
 8002e50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e52:	2300      	movs	r3, #0
 8002e54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e56:	2303      	movs	r3, #3
 8002e58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e5a:	2307      	movs	r3, #7
 8002e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e5e:	f107 031c 	add.w	r3, r7, #28
 8002e62:	4619      	mov	r1, r3
 8002e64:	4882      	ldr	r0, [pc, #520]	; (8003070 <HAL_UART_MspInit+0x284>)
 8002e66:	f001 fb77 	bl	8004558 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002e6a:	4b82      	ldr	r3, [pc, #520]	; (8003074 <HAL_UART_MspInit+0x288>)
 8002e6c:	4a82      	ldr	r2, [pc, #520]	; (8003078 <HAL_UART_MspInit+0x28c>)
 8002e6e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002e70:	4b80      	ldr	r3, [pc, #512]	; (8003074 <HAL_UART_MspInit+0x288>)
 8002e72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e76:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e78:	4b7e      	ldr	r3, [pc, #504]	; (8003074 <HAL_UART_MspInit+0x288>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e7e:	4b7d      	ldr	r3, [pc, #500]	; (8003074 <HAL_UART_MspInit+0x288>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e84:	4b7b      	ldr	r3, [pc, #492]	; (8003074 <HAL_UART_MspInit+0x288>)
 8002e86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e8a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e8c:	4b79      	ldr	r3, [pc, #484]	; (8003074 <HAL_UART_MspInit+0x288>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e92:	4b78      	ldr	r3, [pc, #480]	; (8003074 <HAL_UART_MspInit+0x288>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002e98:	4b76      	ldr	r3, [pc, #472]	; (8003074 <HAL_UART_MspInit+0x288>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002e9e:	4b75      	ldr	r3, [pc, #468]	; (8003074 <HAL_UART_MspInit+0x288>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ea4:	4b73      	ldr	r3, [pc, #460]	; (8003074 <HAL_UART_MspInit+0x288>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002eaa:	4872      	ldr	r0, [pc, #456]	; (8003074 <HAL_UART_MspInit+0x288>)
 8002eac:	f000 ff52 	bl	8003d54 <HAL_DMA_Init>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002eb6:	f7ff fed7 	bl	8002c68 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a6d      	ldr	r2, [pc, #436]	; (8003074 <HAL_UART_MspInit+0x288>)
 8002ebe:	639a      	str	r2, [r3, #56]	; 0x38
 8002ec0:	4a6c      	ldr	r2, [pc, #432]	; (8003074 <HAL_UART_MspInit+0x288>)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002ec6:	4b6d      	ldr	r3, [pc, #436]	; (800307c <HAL_UART_MspInit+0x290>)
 8002ec8:	4a6d      	ldr	r2, [pc, #436]	; (8003080 <HAL_UART_MspInit+0x294>)
 8002eca:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002ecc:	4b6b      	ldr	r3, [pc, #428]	; (800307c <HAL_UART_MspInit+0x290>)
 8002ece:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ed2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ed4:	4b69      	ldr	r3, [pc, #420]	; (800307c <HAL_UART_MspInit+0x290>)
 8002ed6:	2240      	movs	r2, #64	; 0x40
 8002ed8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002eda:	4b68      	ldr	r3, [pc, #416]	; (800307c <HAL_UART_MspInit+0x290>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ee0:	4b66      	ldr	r3, [pc, #408]	; (800307c <HAL_UART_MspInit+0x290>)
 8002ee2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ee6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ee8:	4b64      	ldr	r3, [pc, #400]	; (800307c <HAL_UART_MspInit+0x290>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002eee:	4b63      	ldr	r3, [pc, #396]	; (800307c <HAL_UART_MspInit+0x290>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002ef4:	4b61      	ldr	r3, [pc, #388]	; (800307c <HAL_UART_MspInit+0x290>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002efa:	4b60      	ldr	r3, [pc, #384]	; (800307c <HAL_UART_MspInit+0x290>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f00:	4b5e      	ldr	r3, [pc, #376]	; (800307c <HAL_UART_MspInit+0x290>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002f06:	485d      	ldr	r0, [pc, #372]	; (800307c <HAL_UART_MspInit+0x290>)
 8002f08:	f000 ff24 	bl	8003d54 <HAL_DMA_Init>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8002f12:	f7ff fea9 	bl	8002c68 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a58      	ldr	r2, [pc, #352]	; (800307c <HAL_UART_MspInit+0x290>)
 8002f1a:	635a      	str	r2, [r3, #52]	; 0x34
 8002f1c:	4a57      	ldr	r2, [pc, #348]	; (800307c <HAL_UART_MspInit+0x290>)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002f22:	2200      	movs	r2, #0
 8002f24:	2105      	movs	r1, #5
 8002f26:	2025      	movs	r0, #37	; 0x25
 8002f28:	f000 fee5 	bl	8003cf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002f2c:	2025      	movs	r0, #37	; 0x25
 8002f2e:	f000 fefe 	bl	8003d2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002f32:	e095      	b.n	8003060 <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART2)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a52      	ldr	r2, [pc, #328]	; (8003084 <HAL_UART_MspInit+0x298>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	f040 8090 	bne.w	8003060 <HAL_UART_MspInit+0x274>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f40:	2300      	movs	r3, #0
 8002f42:	613b      	str	r3, [r7, #16]
 8002f44:	4b49      	ldr	r3, [pc, #292]	; (800306c <HAL_UART_MspInit+0x280>)
 8002f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f48:	4a48      	ldr	r2, [pc, #288]	; (800306c <HAL_UART_MspInit+0x280>)
 8002f4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f4e:	6413      	str	r3, [r2, #64]	; 0x40
 8002f50:	4b46      	ldr	r3, [pc, #280]	; (800306c <HAL_UART_MspInit+0x280>)
 8002f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f58:	613b      	str	r3, [r7, #16]
 8002f5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	60fb      	str	r3, [r7, #12]
 8002f60:	4b42      	ldr	r3, [pc, #264]	; (800306c <HAL_UART_MspInit+0x280>)
 8002f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f64:	4a41      	ldr	r2, [pc, #260]	; (800306c <HAL_UART_MspInit+0x280>)
 8002f66:	f043 0301 	orr.w	r3, r3, #1
 8002f6a:	6313      	str	r3, [r2, #48]	; 0x30
 8002f6c:	4b3f      	ldr	r3, [pc, #252]	; (800306c <HAL_UART_MspInit+0x280>)
 8002f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	60fb      	str	r3, [r7, #12]
 8002f76:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002f78:	230c      	movs	r3, #12
 8002f7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f80:	2300      	movs	r3, #0
 8002f82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f84:	2303      	movs	r3, #3
 8002f86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f88:	2307      	movs	r3, #7
 8002f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f8c:	f107 031c 	add.w	r3, r7, #28
 8002f90:	4619      	mov	r1, r3
 8002f92:	4837      	ldr	r0, [pc, #220]	; (8003070 <HAL_UART_MspInit+0x284>)
 8002f94:	f001 fae0 	bl	8004558 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002f98:	4b3b      	ldr	r3, [pc, #236]	; (8003088 <HAL_UART_MspInit+0x29c>)
 8002f9a:	4a3c      	ldr	r2, [pc, #240]	; (800308c <HAL_UART_MspInit+0x2a0>)
 8002f9c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002f9e:	4b3a      	ldr	r3, [pc, #232]	; (8003088 <HAL_UART_MspInit+0x29c>)
 8002fa0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002fa4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fa6:	4b38      	ldr	r3, [pc, #224]	; (8003088 <HAL_UART_MspInit+0x29c>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fac:	4b36      	ldr	r3, [pc, #216]	; (8003088 <HAL_UART_MspInit+0x29c>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002fb2:	4b35      	ldr	r3, [pc, #212]	; (8003088 <HAL_UART_MspInit+0x29c>)
 8002fb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fb8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fba:	4b33      	ldr	r3, [pc, #204]	; (8003088 <HAL_UART_MspInit+0x29c>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fc0:	4b31      	ldr	r3, [pc, #196]	; (8003088 <HAL_UART_MspInit+0x29c>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002fc6:	4b30      	ldr	r3, [pc, #192]	; (8003088 <HAL_UART_MspInit+0x29c>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002fcc:	4b2e      	ldr	r3, [pc, #184]	; (8003088 <HAL_UART_MspInit+0x29c>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002fd2:	4b2d      	ldr	r3, [pc, #180]	; (8003088 <HAL_UART_MspInit+0x29c>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002fd8:	482b      	ldr	r0, [pc, #172]	; (8003088 <HAL_UART_MspInit+0x29c>)
 8002fda:	f000 febb 	bl	8003d54 <HAL_DMA_Init>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 8002fe4:	f7ff fe40 	bl	8002c68 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a27      	ldr	r2, [pc, #156]	; (8003088 <HAL_UART_MspInit+0x29c>)
 8002fec:	639a      	str	r2, [r3, #56]	; 0x38
 8002fee:	4a26      	ldr	r2, [pc, #152]	; (8003088 <HAL_UART_MspInit+0x29c>)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002ff4:	4b26      	ldr	r3, [pc, #152]	; (8003090 <HAL_UART_MspInit+0x2a4>)
 8002ff6:	4a27      	ldr	r2, [pc, #156]	; (8003094 <HAL_UART_MspInit+0x2a8>)
 8002ff8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002ffa:	4b25      	ldr	r3, [pc, #148]	; (8003090 <HAL_UART_MspInit+0x2a4>)
 8002ffc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003000:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003002:	4b23      	ldr	r3, [pc, #140]	; (8003090 <HAL_UART_MspInit+0x2a4>)
 8003004:	2240      	movs	r2, #64	; 0x40
 8003006:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003008:	4b21      	ldr	r3, [pc, #132]	; (8003090 <HAL_UART_MspInit+0x2a4>)
 800300a:	2200      	movs	r2, #0
 800300c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800300e:	4b20      	ldr	r3, [pc, #128]	; (8003090 <HAL_UART_MspInit+0x2a4>)
 8003010:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003014:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003016:	4b1e      	ldr	r3, [pc, #120]	; (8003090 <HAL_UART_MspInit+0x2a4>)
 8003018:	2200      	movs	r2, #0
 800301a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800301c:	4b1c      	ldr	r3, [pc, #112]	; (8003090 <HAL_UART_MspInit+0x2a4>)
 800301e:	2200      	movs	r2, #0
 8003020:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003022:	4b1b      	ldr	r3, [pc, #108]	; (8003090 <HAL_UART_MspInit+0x2a4>)
 8003024:	2200      	movs	r2, #0
 8003026:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003028:	4b19      	ldr	r3, [pc, #100]	; (8003090 <HAL_UART_MspInit+0x2a4>)
 800302a:	2200      	movs	r2, #0
 800302c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800302e:	4b18      	ldr	r3, [pc, #96]	; (8003090 <HAL_UART_MspInit+0x2a4>)
 8003030:	2200      	movs	r2, #0
 8003032:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003034:	4816      	ldr	r0, [pc, #88]	; (8003090 <HAL_UART_MspInit+0x2a4>)
 8003036:	f000 fe8d 	bl	8003d54 <HAL_DMA_Init>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <HAL_UART_MspInit+0x258>
      Error_Handler();
 8003040:	f7ff fe12 	bl	8002c68 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a12      	ldr	r2, [pc, #72]	; (8003090 <HAL_UART_MspInit+0x2a4>)
 8003048:	635a      	str	r2, [r3, #52]	; 0x34
 800304a:	4a11      	ldr	r2, [pc, #68]	; (8003090 <HAL_UART_MspInit+0x2a4>)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003050:	2200      	movs	r2, #0
 8003052:	2105      	movs	r1, #5
 8003054:	2026      	movs	r0, #38	; 0x26
 8003056:	f000 fe4e 	bl	8003cf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800305a:	2026      	movs	r0, #38	; 0x26
 800305c:	f000 fe67 	bl	8003d2e <HAL_NVIC_EnableIRQ>
}
 8003060:	bf00      	nop
 8003062:	3730      	adds	r7, #48	; 0x30
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	40011000 	.word	0x40011000
 800306c:	40023800 	.word	0x40023800
 8003070:	40020000 	.word	0x40020000
 8003074:	200001ec 	.word	0x200001ec
 8003078:	40026440 	.word	0x40026440
 800307c:	2000024c 	.word	0x2000024c
 8003080:	400264b8 	.word	0x400264b8
 8003084:	40004400 	.word	0x40004400
 8003088:	200002ac 	.word	0x200002ac
 800308c:	40026088 	.word	0x40026088
 8003090:	2000030c 	.word	0x2000030c
 8003094:	400260a0 	.word	0x400260a0

08003098 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b08c      	sub	sp, #48	; 0x30
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80030a0:	2300      	movs	r3, #0
 80030a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80030a4:	2300      	movs	r3, #0
 80030a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80030a8:	2200      	movs	r2, #0
 80030aa:	6879      	ldr	r1, [r7, #4]
 80030ac:	2019      	movs	r0, #25
 80030ae:	f000 fe22 	bl	8003cf6 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80030b2:	2019      	movs	r0, #25
 80030b4:	f000 fe3b 	bl	8003d2e <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80030b8:	2300      	movs	r3, #0
 80030ba:	60fb      	str	r3, [r7, #12]
 80030bc:	4b1f      	ldr	r3, [pc, #124]	; (800313c <HAL_InitTick+0xa4>)
 80030be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c0:	4a1e      	ldr	r2, [pc, #120]	; (800313c <HAL_InitTick+0xa4>)
 80030c2:	f043 0301 	orr.w	r3, r3, #1
 80030c6:	6453      	str	r3, [r2, #68]	; 0x44
 80030c8:	4b1c      	ldr	r3, [pc, #112]	; (800313c <HAL_InitTick+0xa4>)
 80030ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030cc:	f003 0301 	and.w	r3, r3, #1
 80030d0:	60fb      	str	r3, [r7, #12]
 80030d2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80030d4:	f107 0210 	add.w	r2, r7, #16
 80030d8:	f107 0314 	add.w	r3, r7, #20
 80030dc:	4611      	mov	r1, r2
 80030de:	4618      	mov	r0, r3
 80030e0:	f001 fe78 	bl	8004dd4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80030e4:	f001 fe62 	bl	8004dac <HAL_RCC_GetPCLK2Freq>
 80030e8:	4603      	mov	r3, r0
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80030ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f0:	4a13      	ldr	r2, [pc, #76]	; (8003140 <HAL_InitTick+0xa8>)
 80030f2:	fba2 2303 	umull	r2, r3, r2, r3
 80030f6:	0c9b      	lsrs	r3, r3, #18
 80030f8:	3b01      	subs	r3, #1
 80030fa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80030fc:	4b11      	ldr	r3, [pc, #68]	; (8003144 <HAL_InitTick+0xac>)
 80030fe:	4a12      	ldr	r2, [pc, #72]	; (8003148 <HAL_InitTick+0xb0>)
 8003100:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003102:	4b10      	ldr	r3, [pc, #64]	; (8003144 <HAL_InitTick+0xac>)
 8003104:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003108:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800310a:	4a0e      	ldr	r2, [pc, #56]	; (8003144 <HAL_InitTick+0xac>)
 800310c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800310e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003110:	4b0c      	ldr	r3, [pc, #48]	; (8003144 <HAL_InitTick+0xac>)
 8003112:	2200      	movs	r2, #0
 8003114:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003116:	4b0b      	ldr	r3, [pc, #44]	; (8003144 <HAL_InitTick+0xac>)
 8003118:	2200      	movs	r2, #0
 800311a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800311c:	4809      	ldr	r0, [pc, #36]	; (8003144 <HAL_InitTick+0xac>)
 800311e:	f002 ff05 	bl	8005f2c <HAL_TIM_Base_Init>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d104      	bne.n	8003132 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003128:	4806      	ldr	r0, [pc, #24]	; (8003144 <HAL_InitTick+0xac>)
 800312a:	f002 ff59 	bl	8005fe0 <HAL_TIM_Base_Start_IT>
 800312e:	4603      	mov	r3, r0
 8003130:	e000      	b.n	8003134 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
}
 8003134:	4618      	mov	r0, r3
 8003136:	3730      	adds	r7, #48	; 0x30
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	40023800 	.word	0x40023800
 8003140:	431bde83 	.word	0x431bde83
 8003144:	20000654 	.word	0x20000654
 8003148:	40010000 	.word	0x40010000

0800314c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003150:	e7fe      	b.n	8003150 <NMI_Handler+0x4>

08003152 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003152:	b480      	push	{r7}
 8003154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003156:	e7fe      	b.n	8003156 <HardFault_Handler+0x4>

08003158 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800315c:	e7fe      	b.n	800315c <MemManage_Handler+0x4>

0800315e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800315e:	b480      	push	{r7}
 8003160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003162:	e7fe      	b.n	8003162 <BusFault_Handler+0x4>

08003164 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003168:	e7fe      	b.n	8003168 <UsageFault_Handler+0x4>

0800316a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800316a:	b480      	push	{r7}
 800316c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800316e:	bf00      	nop
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800317c:	4802      	ldr	r0, [pc, #8]	; (8003188 <DMA1_Stream5_IRQHandler+0x10>)
 800317e:	f000 ff81 	bl	8004084 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003182:	bf00      	nop
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	200002ac 	.word	0x200002ac

0800318c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003190:	4802      	ldr	r0, [pc, #8]	; (800319c <DMA1_Stream6_IRQHandler+0x10>)
 8003192:	f000 ff77 	bl	8004084 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003196:	bf00      	nop
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	2000030c 	.word	0x2000030c

080031a0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80031a4:	4802      	ldr	r0, [pc, #8]	; (80031b0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80031a6:	f002 ff8b 	bl	80060c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80031aa:	bf00      	nop
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	20000654 	.word	0x20000654

080031b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80031b8:	4803      	ldr	r0, [pc, #12]	; (80031c8 <USART1_IRQHandler+0x14>)
 80031ba:	f003 fbb7 	bl	800692c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  USER_UART_IRQHandler(&huart1);
 80031be:	4802      	ldr	r0, [pc, #8]	; (80031c8 <USART1_IRQHandler+0x14>)
 80031c0:	f7fd fe44 	bl	8000e4c <USER_UART_IRQHandler>
  /* USER CODE END USART1_IRQn 1 */
}
 80031c4:	bf00      	nop
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	20000164 	.word	0x20000164

080031cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80031d0:	4803      	ldr	r0, [pc, #12]	; (80031e0 <USART2_IRQHandler+0x14>)
 80031d2:	f003 fbab 	bl	800692c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  USER_UART_IRQHandler(&huart2);
 80031d6:	4802      	ldr	r0, [pc, #8]	; (80031e0 <USART2_IRQHandler+0x14>)
 80031d8:	f7fd fe38 	bl	8000e4c <USER_UART_IRQHandler>
  /* USER CODE END USART2_IRQn 1 */
}
 80031dc:	bf00      	nop
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	200001a8 	.word	0x200001a8

080031e4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80031e8:	4802      	ldr	r0, [pc, #8]	; (80031f4 <DMA2_Stream2_IRQHandler+0x10>)
 80031ea:	f000 ff4b 	bl	8004084 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80031ee:	bf00      	nop
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	200001ec 	.word	0x200001ec

080031f8 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80031fc:	4802      	ldr	r0, [pc, #8]	; (8003208 <DMA2_Stream7_IRQHandler+0x10>)
 80031fe:	f000 ff41 	bl	8004084 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003202:	bf00      	nop
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	2000024c 	.word	0x2000024c

0800320c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003214:	4a14      	ldr	r2, [pc, #80]	; (8003268 <_sbrk+0x5c>)
 8003216:	4b15      	ldr	r3, [pc, #84]	; (800326c <_sbrk+0x60>)
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003220:	4b13      	ldr	r3, [pc, #76]	; (8003270 <_sbrk+0x64>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d102      	bne.n	800322e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003228:	4b11      	ldr	r3, [pc, #68]	; (8003270 <_sbrk+0x64>)
 800322a:	4a12      	ldr	r2, [pc, #72]	; (8003274 <_sbrk+0x68>)
 800322c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800322e:	4b10      	ldr	r3, [pc, #64]	; (8003270 <_sbrk+0x64>)
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4413      	add	r3, r2
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	429a      	cmp	r2, r3
 800323a:	d207      	bcs.n	800324c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800323c:	f008 fd16 	bl	800bc6c <__errno>
 8003240:	4603      	mov	r3, r0
 8003242:	220c      	movs	r2, #12
 8003244:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003246:	f04f 33ff 	mov.w	r3, #4294967295
 800324a:	e009      	b.n	8003260 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800324c:	4b08      	ldr	r3, [pc, #32]	; (8003270 <_sbrk+0x64>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003252:	4b07      	ldr	r3, [pc, #28]	; (8003270 <_sbrk+0x64>)
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4413      	add	r3, r2
 800325a:	4a05      	ldr	r2, [pc, #20]	; (8003270 <_sbrk+0x64>)
 800325c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800325e:	68fb      	ldr	r3, [r7, #12]
}
 8003260:	4618      	mov	r0, r3
 8003262:	3718      	adds	r7, #24
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	20020000 	.word	0x20020000
 800326c:	00000400 	.word	0x00000400
 8003270:	2000069c 	.word	0x2000069c
 8003274:	20005070 	.word	0x20005070

08003278 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003278:	b480      	push	{r7}
 800327a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800327c:	4b06      	ldr	r3, [pc, #24]	; (8003298 <SystemInit+0x20>)
 800327e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003282:	4a05      	ldr	r2, [pc, #20]	; (8003298 <SystemInit+0x20>)
 8003284:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003288:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800328c:	bf00      	nop
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	e000ed00 	.word	0xe000ed00

0800329c <W25qxx_Spi>:



//###################################################################################################################
uint8_t	W25qxx_Spi(uint8_t	Data)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af02      	add	r7, sp, #8
 80032a2:	4603      	mov	r3, r0
 80032a4:	71fb      	strb	r3, [r7, #7]
	uint8_t	ret;

	HAL_SPI_TransmitReceive(W25QXX_SPI_PTR, &Data, &ret, 1, 100); // spi2
 80032a6:	f107 020f 	add.w	r2, r7, #15
 80032aa:	1df9      	adds	r1, r7, #7
 80032ac:	2364      	movs	r3, #100	; 0x64
 80032ae:	9300      	str	r3, [sp, #0]
 80032b0:	2301      	movs	r3, #1
 80032b2:	4804      	ldr	r0, [pc, #16]	; (80032c4 <W25qxx_Spi+0x28>)
 80032b4:	f002 fbcd 	bl	8005a52 <HAL_SPI_TransmitReceive>
	ret = W25QXX_SPI->DR;*/

	//while((W25QXX_SPI->SR & SPI_SR_BSY));
	//__HAL_SPI_CLEAR_OVRFLAG(&hspi2);

	return ret;
 80032b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	2000010c 	.word	0x2000010c

080032c8 <W25qxx_ReadID>:

//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 80032ce:	2300      	movs	r3, #0
 80032d0:	60fb      	str	r3, [r7, #12]
 80032d2:	2300      	movs	r3, #0
 80032d4:	60bb      	str	r3, [r7, #8]
 80032d6:	2300      	movs	r3, #0
 80032d8:	607b      	str	r3, [r7, #4]
 80032da:	2300      	movs	r3, #0
 80032dc:	603b      	str	r3, [r7, #0]

	W25QFLASH_CS_SELECT;
 80032de:	2200      	movs	r2, #0
 80032e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80032e4:	4813      	ldr	r0, [pc, #76]	; (8003334 <W25qxx_ReadID+0x6c>)
 80032e6:	f001 fae3 	bl	80048b0 <HAL_GPIO_WritePin>

	W25qxx_Spi(W25_GET_JEDEC_ID);
 80032ea:	209f      	movs	r0, #159	; 0x9f
 80032ec:	f7ff ffd6 	bl	800329c <W25qxx_Spi>

	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80032f0:	20a5      	movs	r0, #165	; 0xa5
 80032f2:	f7ff ffd3 	bl	800329c <W25qxx_Spi>
 80032f6:	4603      	mov	r3, r0
 80032f8:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80032fa:	20a5      	movs	r0, #165	; 0xa5
 80032fc:	f7ff ffce 	bl	800329c <W25qxx_Spi>
 8003300:	4603      	mov	r3, r0
 8003302:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003304:	20a5      	movs	r0, #165	; 0xa5
 8003306:	f7ff ffc9 	bl	800329c <W25qxx_Spi>
 800330a:	4603      	mov	r3, r0
 800330c:	603b      	str	r3, [r7, #0]

	W25QFLASH_CS_UNSELECT;
 800330e:	2201      	movs	r2, #1
 8003310:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003314:	4807      	ldr	r0, [pc, #28]	; (8003334 <W25qxx_ReadID+0x6c>)
 8003316:	f001 facb 	bl	80048b0 <HAL_GPIO_WritePin>

	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	041a      	lsls	r2, r3, #16
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	021b      	lsls	r3, r3, #8
 8003322:	4313      	orrs	r3, r2
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	4313      	orrs	r3, r2
 8003328:	60fb      	str	r3, [r7, #12]

	return Temp;
 800332a:	68fb      	ldr	r3, [r7, #12]
}
 800332c:	4618      	mov	r0, r3
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40020400 	.word	0x40020400

08003338 <W25qxx_WriteEnable>:
	W25QFLASH_CS_UNSELECT;
}*/

//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
	W25QFLASH_CS_SELECT;
 800333c:	2200      	movs	r2, #0
 800333e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003342:	4808      	ldr	r0, [pc, #32]	; (8003364 <W25qxx_WriteEnable+0x2c>)
 8003344:	f001 fab4 	bl	80048b0 <HAL_GPIO_WritePin>
	W25qxx_Spi(W25_WRITE_ENABLE);
 8003348:	2006      	movs	r0, #6
 800334a:	f7ff ffa7 	bl	800329c <W25qxx_Spi>
	W25QFLASH_CS_UNSELECT;
 800334e:	2201      	movs	r2, #1
 8003350:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003354:	4803      	ldr	r0, [pc, #12]	; (8003364 <W25qxx_WriteEnable+0x2c>)
 8003356:	f001 faab 	bl	80048b0 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 800335a:	2001      	movs	r0, #1
 800335c:	f000 fbd8 	bl	8003b10 <HAL_Delay>
}
 8003360:	bf00      	nop
 8003362:	bd80      	pop	{r7, pc}
 8003364:	40020400 	.word	0x40020400

08003368 <W25qxx_WaitForWriteEnd>:
	W25QFLASH_CS_UNSELECT;
}*/

//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 800336c:	2001      	movs	r0, #1
 800336e:	f000 fbcf 	bl	8003b10 <HAL_Delay>
	W25QFLASH_CS_SELECT;
 8003372:	2200      	movs	r2, #0
 8003374:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003378:	480f      	ldr	r0, [pc, #60]	; (80033b8 <W25qxx_WaitForWriteEnd+0x50>)
 800337a:	f001 fa99 	bl	80048b0 <HAL_GPIO_WritePin>
	W25qxx_Spi(W25_READ_STATUS_1);
 800337e:	2005      	movs	r0, #5
 8003380:	f7ff ff8c 	bl	800329c <W25qxx_Spi>

	do{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003384:	20a5      	movs	r0, #165	; 0xa5
 8003386:	f7ff ff89 	bl	800329c <W25qxx_Spi>
 800338a:	4603      	mov	r3, r0
 800338c:	461a      	mov	r2, r3
 800338e:	4b0b      	ldr	r3, [pc, #44]	; (80033bc <W25qxx_WaitForWriteEnd+0x54>)
 8003390:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8003394:	2001      	movs	r0, #1
 8003396:	f000 fbbb 	bl	8003b10 <HAL_Delay>
	}
	while((w25qxx.StatusRegister1 & 0x01) == 0x01);
 800339a:	4b08      	ldr	r3, [pc, #32]	; (80033bc <W25qxx_WaitForWriteEnd+0x54>)
 800339c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1ed      	bne.n	8003384 <W25qxx_WaitForWriteEnd+0x1c>

	W25QFLASH_CS_UNSELECT;
 80033a8:	2201      	movs	r2, #1
 80033aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80033ae:	4802      	ldr	r0, [pc, #8]	; (80033b8 <W25qxx_WaitForWriteEnd+0x50>)
 80033b0:	f001 fa7e 	bl	80048b0 <HAL_GPIO_WritePin>
}
 80033b4:	bf00      	nop
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	40020400 	.word	0x40020400
 80033bc:	200006e0 	.word	0x200006e0

080033c0 <W25qxx_Init>:

//###################################################################################################################
uint8_t W25qxx_Init(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 80033c6:	4bb2      	ldr	r3, [pc, #712]	; (8003690 <W25qxx_Init+0x2d0>)
 80033c8:	2201      	movs	r2, #1
 80033ca:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while(HAL_GetTick() < 100)
 80033ce:	e002      	b.n	80033d6 <W25qxx_Init+0x16>
	W25qxx_Delay(1);
 80033d0:	2001      	movs	r0, #1
 80033d2:	f000 fb9d 	bl	8003b10 <HAL_Delay>
	while(HAL_GetTick() < 100)
 80033d6:	f000 fb8f 	bl	8003af8 <HAL_GetTick>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b63      	cmp	r3, #99	; 0x63
 80033de:	d9f7      	bls.n	80033d0 <W25qxx_Init+0x10>

	W25QFLASH_CS_UNSELECT;
 80033e0:	2201      	movs	r2, #1
 80033e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80033e6:	48ab      	ldr	r0, [pc, #684]	; (8003694 <W25qxx_Init+0x2d4>)
 80033e8:	f001 fa62 	bl	80048b0 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 80033ec:	2064      	movs	r0, #100	; 0x64
 80033ee:	f000 fb8f 	bl	8003b10 <HAL_Delay>

	uint32_t id;

	#if (INIT_DEBUG == 1)
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Init Begin...\n", 14, 1000);
 80033f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033f6:	220e      	movs	r2, #14
 80033f8:	49a7      	ldr	r1, [pc, #668]	; (8003698 <W25qxx_Init+0x2d8>)
 80033fa:	48a8      	ldr	r0, [pc, #672]	; (800369c <W25qxx_Init+0x2dc>)
 80033fc:	f003 f891 	bl	8006522 <HAL_UART_Transmit>
	#endif
	
	id = W25qxx_ReadID();
 8003400:	f7ff ff62 	bl	80032c8 <W25qxx_ReadID>
 8003404:	6078      	str	r0, [r7, #4]

	#if (INIT_DEBUG == 1)
	snprintf(buf, 64, "ID:0x%lX\n", id);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4aa5      	ldr	r2, [pc, #660]	; (80036a0 <W25qxx_Init+0x2e0>)
 800340a:	2140      	movs	r1, #64	; 0x40
 800340c:	48a5      	ldr	r0, [pc, #660]	; (80036a4 <W25qxx_Init+0x2e4>)
 800340e:	f008 fc6d 	bl	800bcec <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 8003412:	48a4      	ldr	r0, [pc, #656]	; (80036a4 <W25qxx_Init+0x2e4>)
 8003414:	f7fc fefc 	bl	8000210 <strlen>
 8003418:	4603      	mov	r3, r0
 800341a:	b29a      	uxth	r2, r3
 800341c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003420:	49a0      	ldr	r1, [pc, #640]	; (80036a4 <W25qxx_Init+0x2e4>)
 8003422:	489e      	ldr	r0, [pc, #632]	; (800369c <W25qxx_Init+0x2dc>)
 8003424:	f003 f87d 	bl	8006522 <HAL_UART_Transmit>
	#endif

	switch(id & 0x0000FFFF)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	b29b      	uxth	r3, r3
 800342c:	f243 0217 	movw	r2, #12311	; 0x3017
 8003430:	4293      	cmp	r3, r2
 8003432:	d839      	bhi.n	80034a8 <W25qxx_Init+0xe8>
 8003434:	f243 0211 	movw	r2, #12305	; 0x3011
 8003438:	4293      	cmp	r3, r2
 800343a:	d21d      	bcs.n	8003478 <W25qxx_Init+0xb8>
 800343c:	e11a      	b.n	8003674 <W25qxx_Init+0x2b4>
 800343e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8003442:	3b11      	subs	r3, #17
 8003444:	2b09      	cmp	r3, #9
 8003446:	f200 8115 	bhi.w	8003674 <W25qxx_Init+0x2b4>
 800344a:	a201      	add	r2, pc, #4	; (adr r2, 8003450 <W25qxx_Init+0x90>)
 800344c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003450:	080035bf 	.word	0x080035bf
 8003454:	080035a3 	.word	0x080035a3
 8003458:	08003587 	.word	0x08003587
 800345c:	0800356b 	.word	0x0800356b
 8003460:	0800354f 	.word	0x0800354f
 8003464:	08003533 	.word	0x08003533
 8003468:	08003517 	.word	0x08003517
 800346c:	080034f9 	.word	0x080034f9
 8003470:	080034db 	.word	0x080034db
 8003474:	080034bd 	.word	0x080034bd
 8003478:	f5a3 5340 	sub.w	r3, r3, #12288	; 0x3000
 800347c:	3b11      	subs	r3, #17
 800347e:	2b06      	cmp	r3, #6
 8003480:	f200 80f8 	bhi.w	8003674 <W25qxx_Init+0x2b4>
 8003484:	a201      	add	r2, pc, #4	; (adr r2, 800348c <W25qxx_Init+0xcc>)
 8003486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800348a:	bf00      	nop
 800348c:	0800365f 	.word	0x0800365f
 8003490:	08003649 	.word	0x08003649
 8003494:	08003633 	.word	0x08003633
 8003498:	0800361d 	.word	0x0800361d
 800349c:	08003607 	.word	0x08003607
 80034a0:	080035f1 	.word	0x080035f1
 80034a4:	080035db 	.word	0x080035db
 80034a8:	f244 021a 	movw	r2, #16410	; 0x401a
 80034ac:	4293      	cmp	r3, r2
 80034ae:	f200 80e1 	bhi.w	8003674 <W25qxx_Init+0x2b4>
 80034b2:	f244 0211 	movw	r2, #16401	; 0x4011
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d2c1      	bcs.n	800343e <W25qxx_Init+0x7e>
 80034ba:	e0db      	b.n	8003674 <W25qxx_Init+0x2b4>
	{
		case 0x401A:	// 	w25q512
			w25qxx.ID = W25Q512;
 80034bc:	4b74      	ldr	r3, [pc, #464]	; (8003690 <W25qxx_Init+0x2d0>)
 80034be:	220a      	movs	r2, #10
 80034c0:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 1024;
 80034c2:	4b73      	ldr	r3, [pc, #460]	; (8003690 <W25qxx_Init+0x2d0>)
 80034c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034c8:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q512\n", 14, 1000);
 80034ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034ce:	220e      	movs	r2, #14
 80034d0:	4975      	ldr	r1, [pc, #468]	; (80036a8 <W25qxx_Init+0x2e8>)
 80034d2:	4872      	ldr	r0, [pc, #456]	; (800369c <W25qxx_Init+0x2dc>)
 80034d4:	f003 f825 	bl	8006522 <HAL_UART_Transmit>
			#endif
		break;
 80034d8:	e10a      	b.n	80036f0 <W25qxx_Init+0x330>

		case 0x4019:	// 	w25q256
			w25qxx.ID = W25Q256;
 80034da:	4b6d      	ldr	r3, [pc, #436]	; (8003690 <W25qxx_Init+0x2d0>)
 80034dc:	2209      	movs	r2, #9
 80034de:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 512;
 80034e0:	4b6b      	ldr	r3, [pc, #428]	; (8003690 <W25qxx_Init+0x2d0>)
 80034e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034e6:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q256\n", 14, 1000);
 80034e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034ec:	220e      	movs	r2, #14
 80034ee:	496f      	ldr	r1, [pc, #444]	; (80036ac <W25qxx_Init+0x2ec>)
 80034f0:	486a      	ldr	r0, [pc, #424]	; (800369c <W25qxx_Init+0x2dc>)
 80034f2:	f003 f816 	bl	8006522 <HAL_UART_Transmit>
			#endif
		break;
 80034f6:	e0fb      	b.n	80036f0 <W25qxx_Init+0x330>

		case 0x4018:	// 	w25q128
			w25qxx.ID = W25Q128;
 80034f8:	4b65      	ldr	r3, [pc, #404]	; (8003690 <W25qxx_Init+0x2d0>)
 80034fa:	2208      	movs	r2, #8
 80034fc:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 256;
 80034fe:	4b64      	ldr	r3, [pc, #400]	; (8003690 <W25qxx_Init+0x2d0>)
 8003500:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003504:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q128\n", 14, 1000);
 8003506:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800350a:	220e      	movs	r2, #14
 800350c:	4968      	ldr	r1, [pc, #416]	; (80036b0 <W25qxx_Init+0x2f0>)
 800350e:	4863      	ldr	r0, [pc, #396]	; (800369c <W25qxx_Init+0x2dc>)
 8003510:	f003 f807 	bl	8006522 <HAL_UART_Transmit>
			#endif
		break;
 8003514:	e0ec      	b.n	80036f0 <W25qxx_Init+0x330>

		case 0x4017:	//	w25q64
			w25qxx.ID = W25Q64;
 8003516:	4b5e      	ldr	r3, [pc, #376]	; (8003690 <W25qxx_Init+0x2d0>)
 8003518:	2207      	movs	r2, #7
 800351a:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 128;
 800351c:	4b5c      	ldr	r3, [pc, #368]	; (8003690 <W25qxx_Init+0x2d0>)
 800351e:	2280      	movs	r2, #128	; 0x80
 8003520:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q64\n", 13, 1000);
 8003522:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003526:	220d      	movs	r2, #13
 8003528:	4962      	ldr	r1, [pc, #392]	; (80036b4 <W25qxx_Init+0x2f4>)
 800352a:	485c      	ldr	r0, [pc, #368]	; (800369c <W25qxx_Init+0x2dc>)
 800352c:	f002 fff9 	bl	8006522 <HAL_UART_Transmit>
			#endif
		break;
 8003530:	e0de      	b.n	80036f0 <W25qxx_Init+0x330>

		case 0x4016:	//	w25q32
			w25qxx.ID = W25Q32;
 8003532:	4b57      	ldr	r3, [pc, #348]	; (8003690 <W25qxx_Init+0x2d0>)
 8003534:	2206      	movs	r2, #6
 8003536:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 64;
 8003538:	4b55      	ldr	r3, [pc, #340]	; (8003690 <W25qxx_Init+0x2d0>)
 800353a:	2240      	movs	r2, #64	; 0x40
 800353c:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q32\n", 13, 1000);
 800353e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003542:	220d      	movs	r2, #13
 8003544:	495c      	ldr	r1, [pc, #368]	; (80036b8 <W25qxx_Init+0x2f8>)
 8003546:	4855      	ldr	r0, [pc, #340]	; (800369c <W25qxx_Init+0x2dc>)
 8003548:	f002 ffeb 	bl	8006522 <HAL_UART_Transmit>
			#endif
		break;
 800354c:	e0d0      	b.n	80036f0 <W25qxx_Init+0x330>

		case 0x4015:	//	w25q16
			w25qxx.ID = W25Q16;
 800354e:	4b50      	ldr	r3, [pc, #320]	; (8003690 <W25qxx_Init+0x2d0>)
 8003550:	2205      	movs	r2, #5
 8003552:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 32;
 8003554:	4b4e      	ldr	r3, [pc, #312]	; (8003690 <W25qxx_Init+0x2d0>)
 8003556:	2220      	movs	r2, #32
 8003558:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q16\n", 13, 1000);
 800355a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800355e:	220d      	movs	r2, #13
 8003560:	4956      	ldr	r1, [pc, #344]	; (80036bc <W25qxx_Init+0x2fc>)
 8003562:	484e      	ldr	r0, [pc, #312]	; (800369c <W25qxx_Init+0x2dc>)
 8003564:	f002 ffdd 	bl	8006522 <HAL_UART_Transmit>
			#endif
		break;
 8003568:	e0c2      	b.n	80036f0 <W25qxx_Init+0x330>

		case 0x4014:	//	w25q80
			w25qxx.ID = W25Q80;
 800356a:	4b49      	ldr	r3, [pc, #292]	; (8003690 <W25qxx_Init+0x2d0>)
 800356c:	2204      	movs	r2, #4
 800356e:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 16;
 8003570:	4b47      	ldr	r3, [pc, #284]	; (8003690 <W25qxx_Init+0x2d0>)
 8003572:	2210      	movs	r2, #16
 8003574:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q80\n", 13, 1000);
 8003576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800357a:	220d      	movs	r2, #13
 800357c:	4950      	ldr	r1, [pc, #320]	; (80036c0 <W25qxx_Init+0x300>)
 800357e:	4847      	ldr	r0, [pc, #284]	; (800369c <W25qxx_Init+0x2dc>)
 8003580:	f002 ffcf 	bl	8006522 <HAL_UART_Transmit>
			#endif
		break;
 8003584:	e0b4      	b.n	80036f0 <W25qxx_Init+0x330>

		case 0x4013:	//	w25q40
			w25qxx.ID = W25Q40;
 8003586:	4b42      	ldr	r3, [pc, #264]	; (8003690 <W25qxx_Init+0x2d0>)
 8003588:	2203      	movs	r2, #3
 800358a:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 8;
 800358c:	4b40      	ldr	r3, [pc, #256]	; (8003690 <W25qxx_Init+0x2d0>)
 800358e:	2208      	movs	r2, #8
 8003590:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q40\n", 13, 1000);
 8003592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003596:	220d      	movs	r2, #13
 8003598:	494a      	ldr	r1, [pc, #296]	; (80036c4 <W25qxx_Init+0x304>)
 800359a:	4840      	ldr	r0, [pc, #256]	; (800369c <W25qxx_Init+0x2dc>)
 800359c:	f002 ffc1 	bl	8006522 <HAL_UART_Transmit>
			#endif
		break;
 80035a0:	e0a6      	b.n	80036f0 <W25qxx_Init+0x330>

		case 0x4012:	//	w25q20
			w25qxx.ID = W25Q20;
 80035a2:	4b3b      	ldr	r3, [pc, #236]	; (8003690 <W25qxx_Init+0x2d0>)
 80035a4:	2202      	movs	r2, #2
 80035a6:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 4;
 80035a8:	4b39      	ldr	r3, [pc, #228]	; (8003690 <W25qxx_Init+0x2d0>)
 80035aa:	2204      	movs	r2, #4
 80035ac:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q20\n", 13, 1000);
 80035ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035b2:	220d      	movs	r2, #13
 80035b4:	4944      	ldr	r1, [pc, #272]	; (80036c8 <W25qxx_Init+0x308>)
 80035b6:	4839      	ldr	r0, [pc, #228]	; (800369c <W25qxx_Init+0x2dc>)
 80035b8:	f002 ffb3 	bl	8006522 <HAL_UART_Transmit>
			#endif
		break;
 80035bc:	e098      	b.n	80036f0 <W25qxx_Init+0x330>

		case 0x4011:	//	w25q10
			w25qxx.ID = W25Q10;
 80035be:	4b34      	ldr	r3, [pc, #208]	; (8003690 <W25qxx_Init+0x2d0>)
 80035c0:	2201      	movs	r2, #1
 80035c2:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 2;
 80035c4:	4b32      	ldr	r3, [pc, #200]	; (8003690 <W25qxx_Init+0x2d0>)
 80035c6:	2202      	movs	r2, #2
 80035c8:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q10\n", 13, 1000);
 80035ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035ce:	220d      	movs	r2, #13
 80035d0:	493e      	ldr	r1, [pc, #248]	; (80036cc <W25qxx_Init+0x30c>)
 80035d2:	4832      	ldr	r0, [pc, #200]	; (800369c <W25qxx_Init+0x2dc>)
 80035d4:	f002 ffa5 	bl	8006522 <HAL_UART_Transmit>
			#endif
		break;
 80035d8:	e08a      	b.n	80036f0 <W25qxx_Init+0x330>

		////////////////////////////////////////////////////////////////////////////////

		case 0x3017:	//	w25x64
			//w25qxx.ID = W25Q64;
			w25qxx.BlockCount = 128;
 80035da:	4b2d      	ldr	r3, [pc, #180]	; (8003690 <W25qxx_Init+0x2d0>)
 80035dc:	2280      	movs	r2, #128	; 0x80
 80035de:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x64\n", 13, 1000);
 80035e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035e4:	220d      	movs	r2, #13
 80035e6:	493a      	ldr	r1, [pc, #232]	; (80036d0 <W25qxx_Init+0x310>)
 80035e8:	482c      	ldr	r0, [pc, #176]	; (800369c <W25qxx_Init+0x2dc>)
 80035ea:	f002 ff9a 	bl	8006522 <HAL_UART_Transmit>
			#endif
		break;
 80035ee:	e07f      	b.n	80036f0 <W25qxx_Init+0x330>

		case 0x3016:	//	w25x32
			//w25qxx.ID = W25Q32;
			w25qxx.BlockCount = 64;
 80035f0:	4b27      	ldr	r3, [pc, #156]	; (8003690 <W25qxx_Init+0x2d0>)
 80035f2:	2240      	movs	r2, #64	; 0x40
 80035f4:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x32\n", 13, 1000);
 80035f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035fa:	220d      	movs	r2, #13
 80035fc:	4935      	ldr	r1, [pc, #212]	; (80036d4 <W25qxx_Init+0x314>)
 80035fe:	4827      	ldr	r0, [pc, #156]	; (800369c <W25qxx_Init+0x2dc>)
 8003600:	f002 ff8f 	bl	8006522 <HAL_UART_Transmit>
			#endif
		break;
 8003604:	e074      	b.n	80036f0 <W25qxx_Init+0x330>

		case 0x3015:	//	w25q16
			//w25qxx.ID = W25Q16;
			w25qxx.BlockCount = 32;
 8003606:	4b22      	ldr	r3, [pc, #136]	; (8003690 <W25qxx_Init+0x2d0>)
 8003608:	2220      	movs	r2, #32
 800360a:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x16\n", 13, 1000);
 800360c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003610:	220d      	movs	r2, #13
 8003612:	4931      	ldr	r1, [pc, #196]	; (80036d8 <W25qxx_Init+0x318>)
 8003614:	4821      	ldr	r0, [pc, #132]	; (800369c <W25qxx_Init+0x2dc>)
 8003616:	f002 ff84 	bl	8006522 <HAL_UART_Transmit>
			#endif
		break;
 800361a:	e069      	b.n	80036f0 <W25qxx_Init+0x330>

		////////////////////////////////////////////////////////////////////////////////
		case 0x3014:	//	w25x80
			//w25qxx.ID = W25Q80;
			w25qxx.BlockCount = 16;
 800361c:	4b1c      	ldr	r3, [pc, #112]	; (8003690 <W25qxx_Init+0x2d0>)
 800361e:	2210      	movs	r2, #16
 8003620:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x80\n", 13, 1000);
 8003622:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003626:	220d      	movs	r2, #13
 8003628:	492c      	ldr	r1, [pc, #176]	; (80036dc <W25qxx_Init+0x31c>)
 800362a:	481c      	ldr	r0, [pc, #112]	; (800369c <W25qxx_Init+0x2dc>)
 800362c:	f002 ff79 	bl	8006522 <HAL_UART_Transmit>
			#endif
		break;
 8003630:	e05e      	b.n	80036f0 <W25qxx_Init+0x330>

		case 0x3013:	//	w25x40
			//w25qxx.ID = W25Q40;
			w25qxx.BlockCount = 8;
 8003632:	4b17      	ldr	r3, [pc, #92]	; (8003690 <W25qxx_Init+0x2d0>)
 8003634:	2208      	movs	r2, #8
 8003636:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x40\n", 13, 1000);
 8003638:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800363c:	220d      	movs	r2, #13
 800363e:	4928      	ldr	r1, [pc, #160]	; (80036e0 <W25qxx_Init+0x320>)
 8003640:	4816      	ldr	r0, [pc, #88]	; (800369c <W25qxx_Init+0x2dc>)
 8003642:	f002 ff6e 	bl	8006522 <HAL_UART_Transmit>
			#endif
		break;
 8003646:	e053      	b.n	80036f0 <W25qxx_Init+0x330>

		case 0x3012:	//	w25x20
			//w25qxx.ID = W25Q20;
			w25qxx.BlockCount = 4;
 8003648:	4b11      	ldr	r3, [pc, #68]	; (8003690 <W25qxx_Init+0x2d0>)
 800364a:	2204      	movs	r2, #4
 800364c:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x20\n", 13, 1000);
 800364e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003652:	220d      	movs	r2, #13
 8003654:	4923      	ldr	r1, [pc, #140]	; (80036e4 <W25qxx_Init+0x324>)
 8003656:	4811      	ldr	r0, [pc, #68]	; (800369c <W25qxx_Init+0x2dc>)
 8003658:	f002 ff63 	bl	8006522 <HAL_UART_Transmit>
			#endif
		break;
 800365c:	e048      	b.n	80036f0 <W25qxx_Init+0x330>

		case 0x3011:	//	w25x10
			//w25qxx.ID = W25Q10;
			w25qxx.BlockCount = 2;
 800365e:	4b0c      	ldr	r3, [pc, #48]	; (8003690 <W25qxx_Init+0x2d0>)
 8003660:	2202      	movs	r2, #2
 8003662:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x10\n", 13, 1000);
 8003664:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003668:	220d      	movs	r2, #13
 800366a:	491f      	ldr	r1, [pc, #124]	; (80036e8 <W25qxx_Init+0x328>)
 800366c:	480b      	ldr	r0, [pc, #44]	; (800369c <W25qxx_Init+0x2dc>)
 800366e:	f002 ff58 	bl	8006522 <HAL_UART_Transmit>
			#endif
		break;
 8003672:	e03d      	b.n	80036f0 <W25qxx_Init+0x330>



		default:
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Unknown ID\n", 11, 1000);
 8003674:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003678:	220b      	movs	r2, #11
 800367a:	491c      	ldr	r1, [pc, #112]	; (80036ec <W25qxx_Init+0x32c>)
 800367c:	4807      	ldr	r0, [pc, #28]	; (800369c <W25qxx_Init+0x2dc>)
 800367e:	f002 ff50 	bl	8006522 <HAL_UART_Transmit>
			#endif

			w25qxx.Lock = 0;
 8003682:	4b03      	ldr	r3, [pc, #12]	; (8003690 <W25qxx_Init+0x2d0>)
 8003684:	2200      	movs	r2, #0
 8003686:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			return 0;
 800368a:	2300      	movs	r3, #0
 800368c:	e0e1      	b.n	8003852 <W25qxx_Init+0x492>
 800368e:	bf00      	nop
 8003690:	200006e0 	.word	0x200006e0
 8003694:	40020400 	.word	0x40020400
 8003698:	0800d5f4 	.word	0x0800d5f4
 800369c:	200001a8 	.word	0x200001a8
 80036a0:	0800d604 	.word	0x0800d604
 80036a4:	200006a0 	.word	0x200006a0
 80036a8:	0800d610 	.word	0x0800d610
 80036ac:	0800d620 	.word	0x0800d620
 80036b0:	0800d630 	.word	0x0800d630
 80036b4:	0800d640 	.word	0x0800d640
 80036b8:	0800d650 	.word	0x0800d650
 80036bc:	0800d660 	.word	0x0800d660
 80036c0:	0800d670 	.word	0x0800d670
 80036c4:	0800d680 	.word	0x0800d680
 80036c8:	0800d690 	.word	0x0800d690
 80036cc:	0800d6a0 	.word	0x0800d6a0
 80036d0:	0800d6b0 	.word	0x0800d6b0
 80036d4:	0800d6c0 	.word	0x0800d6c0
 80036d8:	0800d6d0 	.word	0x0800d6d0
 80036dc:	0800d6e0 	.word	0x0800d6e0
 80036e0:	0800d6f0 	.word	0x0800d6f0
 80036e4:	0800d700 	.word	0x0800d700
 80036e8:	0800d710 	.word	0x0800d710
 80036ec:	0800d720 	.word	0x0800d720
	}


	w25qxx.PageSize = 256;
 80036f0:	4b5a      	ldr	r3, [pc, #360]	; (800385c <W25qxx_Init+0x49c>)
 80036f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036f6:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 80036f8:	4b58      	ldr	r3, [pc, #352]	; (800385c <W25qxx_Init+0x49c>)
 80036fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80036fe:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8003700:	4b56      	ldr	r3, [pc, #344]	; (800385c <W25qxx_Init+0x49c>)
 8003702:	69db      	ldr	r3, [r3, #28]
 8003704:	011b      	lsls	r3, r3, #4
 8003706:	4a55      	ldr	r2, [pc, #340]	; (800385c <W25qxx_Init+0x49c>)
 8003708:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 800370a:	4b54      	ldr	r3, [pc, #336]	; (800385c <W25qxx_Init+0x49c>)
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	4a53      	ldr	r2, [pc, #332]	; (800385c <W25qxx_Init+0x49c>)
 8003710:	6912      	ldr	r2, [r2, #16]
 8003712:	fb02 f303 	mul.w	r3, r2, r3
 8003716:	4a51      	ldr	r2, [pc, #324]	; (800385c <W25qxx_Init+0x49c>)
 8003718:	8952      	ldrh	r2, [r2, #10]
 800371a:	fbb3 f3f2 	udiv	r3, r3, r2
 800371e:	4a4f      	ldr	r2, [pc, #316]	; (800385c <W25qxx_Init+0x49c>)
 8003720:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8003722:	4b4e      	ldr	r3, [pc, #312]	; (800385c <W25qxx_Init+0x49c>)
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	011b      	lsls	r3, r3, #4
 8003728:	4a4c      	ldr	r2, [pc, #304]	; (800385c <W25qxx_Init+0x49c>)
 800372a:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 800372c:	4b4b      	ldr	r3, [pc, #300]	; (800385c <W25qxx_Init+0x49c>)
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	4a4a      	ldr	r2, [pc, #296]	; (800385c <W25qxx_Init+0x49c>)
 8003732:	6912      	ldr	r2, [r2, #16]
 8003734:	fb02 f303 	mul.w	r3, r2, r3
 8003738:	0a9b      	lsrs	r3, r3, #10
 800373a:	4a48      	ldr	r2, [pc, #288]	; (800385c <W25qxx_Init+0x49c>)
 800373c:	6213      	str	r3, [r2, #32]
	//W25qxx_ReadStatusRegister(1);
	//W25qxx_ReadStatusRegister(2);
	//W25qxx_ReadStatusRegister(3);

	#if (INIT_DEBUG == 1)
	snprintf(buf, 64, "Page Size: %d Bytes\n", w25qxx.PageSize);
 800373e:	4b47      	ldr	r3, [pc, #284]	; (800385c <W25qxx_Init+0x49c>)
 8003740:	895b      	ldrh	r3, [r3, #10]
 8003742:	4a47      	ldr	r2, [pc, #284]	; (8003860 <W25qxx_Init+0x4a0>)
 8003744:	2140      	movs	r1, #64	; 0x40
 8003746:	4847      	ldr	r0, [pc, #284]	; (8003864 <W25qxx_Init+0x4a4>)
 8003748:	f008 fad0 	bl	800bcec <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 800374c:	4845      	ldr	r0, [pc, #276]	; (8003864 <W25qxx_Init+0x4a4>)
 800374e:	f7fc fd5f 	bl	8000210 <strlen>
 8003752:	4603      	mov	r3, r0
 8003754:	b29a      	uxth	r2, r3
 8003756:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800375a:	4942      	ldr	r1, [pc, #264]	; (8003864 <W25qxx_Init+0x4a4>)
 800375c:	4842      	ldr	r0, [pc, #264]	; (8003868 <W25qxx_Init+0x4a8>)
 800375e:	f002 fee0 	bl	8006522 <HAL_UART_Transmit>

	snprintf(buf, 64, "Page Count: %lu\n", w25qxx.PageCount);
 8003762:	4b3e      	ldr	r3, [pc, #248]	; (800385c <W25qxx_Init+0x49c>)
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	4a41      	ldr	r2, [pc, #260]	; (800386c <W25qxx_Init+0x4ac>)
 8003768:	2140      	movs	r1, #64	; 0x40
 800376a:	483e      	ldr	r0, [pc, #248]	; (8003864 <W25qxx_Init+0x4a4>)
 800376c:	f008 fabe 	bl	800bcec <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 8003770:	483c      	ldr	r0, [pc, #240]	; (8003864 <W25qxx_Init+0x4a4>)
 8003772:	f7fc fd4d 	bl	8000210 <strlen>
 8003776:	4603      	mov	r3, r0
 8003778:	b29a      	uxth	r2, r3
 800377a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800377e:	4939      	ldr	r1, [pc, #228]	; (8003864 <W25qxx_Init+0x4a4>)
 8003780:	4839      	ldr	r0, [pc, #228]	; (8003868 <W25qxx_Init+0x4a8>)
 8003782:	f002 fece 	bl	8006522 <HAL_UART_Transmit>

	snprintf(buf, 64, "Sector Size: %lu Bytes\n", w25qxx.SectorSize);
 8003786:	4b35      	ldr	r3, [pc, #212]	; (800385c <W25qxx_Init+0x49c>)
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	4a39      	ldr	r2, [pc, #228]	; (8003870 <W25qxx_Init+0x4b0>)
 800378c:	2140      	movs	r1, #64	; 0x40
 800378e:	4835      	ldr	r0, [pc, #212]	; (8003864 <W25qxx_Init+0x4a4>)
 8003790:	f008 faac 	bl	800bcec <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 8003794:	4833      	ldr	r0, [pc, #204]	; (8003864 <W25qxx_Init+0x4a4>)
 8003796:	f7fc fd3b 	bl	8000210 <strlen>
 800379a:	4603      	mov	r3, r0
 800379c:	b29a      	uxth	r2, r3
 800379e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037a2:	4930      	ldr	r1, [pc, #192]	; (8003864 <W25qxx_Init+0x4a4>)
 80037a4:	4830      	ldr	r0, [pc, #192]	; (8003868 <W25qxx_Init+0x4a8>)
 80037a6:	f002 febc 	bl	8006522 <HAL_UART_Transmit>

	snprintf(buf, 64, "Sector Count: %lu\n", w25qxx.SectorCount);
 80037aa:	4b2c      	ldr	r3, [pc, #176]	; (800385c <W25qxx_Init+0x49c>)
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	4a31      	ldr	r2, [pc, #196]	; (8003874 <W25qxx_Init+0x4b4>)
 80037b0:	2140      	movs	r1, #64	; 0x40
 80037b2:	482c      	ldr	r0, [pc, #176]	; (8003864 <W25qxx_Init+0x4a4>)
 80037b4:	f008 fa9a 	bl	800bcec <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 80037b8:	482a      	ldr	r0, [pc, #168]	; (8003864 <W25qxx_Init+0x4a4>)
 80037ba:	f7fc fd29 	bl	8000210 <strlen>
 80037be:	4603      	mov	r3, r0
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037c6:	4927      	ldr	r1, [pc, #156]	; (8003864 <W25qxx_Init+0x4a4>)
 80037c8:	4827      	ldr	r0, [pc, #156]	; (8003868 <W25qxx_Init+0x4a8>)
 80037ca:	f002 feaa 	bl	8006522 <HAL_UART_Transmit>

	snprintf(buf, 64, "Block Size: %lu Bytes\n", w25qxx.BlockSize);
 80037ce:	4b23      	ldr	r3, [pc, #140]	; (800385c <W25qxx_Init+0x49c>)
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	4a29      	ldr	r2, [pc, #164]	; (8003878 <W25qxx_Init+0x4b8>)
 80037d4:	2140      	movs	r1, #64	; 0x40
 80037d6:	4823      	ldr	r0, [pc, #140]	; (8003864 <W25qxx_Init+0x4a4>)
 80037d8:	f008 fa88 	bl	800bcec <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 80037dc:	4821      	ldr	r0, [pc, #132]	; (8003864 <W25qxx_Init+0x4a4>)
 80037de:	f7fc fd17 	bl	8000210 <strlen>
 80037e2:	4603      	mov	r3, r0
 80037e4:	b29a      	uxth	r2, r3
 80037e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037ea:	491e      	ldr	r1, [pc, #120]	; (8003864 <W25qxx_Init+0x4a4>)
 80037ec:	481e      	ldr	r0, [pc, #120]	; (8003868 <W25qxx_Init+0x4a8>)
 80037ee:	f002 fe98 	bl	8006522 <HAL_UART_Transmit>

	snprintf(buf, 64, "Block Count: %lu\n", w25qxx.BlockCount);
 80037f2:	4b1a      	ldr	r3, [pc, #104]	; (800385c <W25qxx_Init+0x49c>)
 80037f4:	69db      	ldr	r3, [r3, #28]
 80037f6:	4a21      	ldr	r2, [pc, #132]	; (800387c <W25qxx_Init+0x4bc>)
 80037f8:	2140      	movs	r1, #64	; 0x40
 80037fa:	481a      	ldr	r0, [pc, #104]	; (8003864 <W25qxx_Init+0x4a4>)
 80037fc:	f008 fa76 	bl	800bcec <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 8003800:	4818      	ldr	r0, [pc, #96]	; (8003864 <W25qxx_Init+0x4a4>)
 8003802:	f7fc fd05 	bl	8000210 <strlen>
 8003806:	4603      	mov	r3, r0
 8003808:	b29a      	uxth	r2, r3
 800380a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800380e:	4915      	ldr	r1, [pc, #84]	; (8003864 <W25qxx_Init+0x4a4>)
 8003810:	4815      	ldr	r0, [pc, #84]	; (8003868 <W25qxx_Init+0x4a8>)
 8003812:	f002 fe86 	bl	8006522 <HAL_UART_Transmit>

	snprintf(buf, 64, "Capacity: %lu KBytes\n", w25qxx.CapacityInKiloByte);
 8003816:	4b11      	ldr	r3, [pc, #68]	; (800385c <W25qxx_Init+0x49c>)
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	4a19      	ldr	r2, [pc, #100]	; (8003880 <W25qxx_Init+0x4c0>)
 800381c:	2140      	movs	r1, #64	; 0x40
 800381e:	4811      	ldr	r0, [pc, #68]	; (8003864 <W25qxx_Init+0x4a4>)
 8003820:	f008 fa64 	bl	800bcec <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 8003824:	480f      	ldr	r0, [pc, #60]	; (8003864 <W25qxx_Init+0x4a4>)
 8003826:	f7fc fcf3 	bl	8000210 <strlen>
 800382a:	4603      	mov	r3, r0
 800382c:	b29a      	uxth	r2, r3
 800382e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003832:	490c      	ldr	r1, [pc, #48]	; (8003864 <W25qxx_Init+0x4a4>)
 8003834:	480c      	ldr	r0, [pc, #48]	; (8003868 <W25qxx_Init+0x4a8>)
 8003836:	f002 fe74 	bl	8006522 <HAL_UART_Transmit>

	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Init Done\n", 10, 1000);
 800383a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800383e:	220a      	movs	r2, #10
 8003840:	4910      	ldr	r1, [pc, #64]	; (8003884 <W25qxx_Init+0x4c4>)
 8003842:	4809      	ldr	r0, [pc, #36]	; (8003868 <W25qxx_Init+0x4a8>)
 8003844:	f002 fe6d 	bl	8006522 <HAL_UART_Transmit>
	#endif

	w25qxx.Lock = 0;
 8003848:	4b04      	ldr	r3, [pc, #16]	; (800385c <W25qxx_Init+0x49c>)
 800384a:	2200      	movs	r2, #0
 800384c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return 1;
 8003850:	2301      	movs	r3, #1
}	
 8003852:	4618      	mov	r0, r3
 8003854:	3708      	adds	r7, #8
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	200006e0 	.word	0x200006e0
 8003860:	0800d72c 	.word	0x0800d72c
 8003864:	200006a0 	.word	0x200006a0
 8003868:	200001a8 	.word	0x200001a8
 800386c:	0800d744 	.word	0x0800d744
 8003870:	0800d758 	.word	0x0800d758
 8003874:	0800d770 	.word	0x0800d770
 8003878:	0800d784 	.word	0x0800d784
 800387c:	0800d79c 	.word	0x0800d79c
 8003880:	0800d7b0 	.word	0x0800d7b0
 8003884:	0800d7c8 	.word	0x0800d7c8

08003888 <W25qxx_EraseSector>:
	w25qxx.Lock = 0;
}

//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
	while(w25qxx.Lock == 1)
 8003890:	e002      	b.n	8003898 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 8003892:	2001      	movs	r0, #1
 8003894:	f000 f93c 	bl	8003b10 <HAL_Delay>
	while(w25qxx.Lock == 1)
 8003898:	4b24      	ldr	r3, [pc, #144]	; (800392c <W25qxx_EraseSector+0xa4>)
 800389a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d0f7      	beq.n	8003892 <W25qxx_EraseSector+0xa>

	w25qxx.Lock = 1;
 80038a2:	4b22      	ldr	r3, [pc, #136]	; (800392c <W25qxx_EraseSector+0xa4>)
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	W25qxx_WaitForWriteEnd();
 80038aa:	f7ff fd5d 	bl	8003368 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 80038ae:	4b1f      	ldr	r3, [pc, #124]	; (800392c <W25qxx_EraseSector+0xa4>)
 80038b0:	691a      	ldr	r2, [r3, #16]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	fb02 f303 	mul.w	r3, r2, r3
 80038b8:	607b      	str	r3, [r7, #4]

	W25qxx_WriteEnable();
 80038ba:	f7ff fd3d 	bl	8003338 <W25qxx_WriteEnable>

	W25QFLASH_CS_SELECT;
 80038be:	2200      	movs	r2, #0
 80038c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80038c4:	481a      	ldr	r0, [pc, #104]	; (8003930 <W25qxx_EraseSector+0xa8>)
 80038c6:	f000 fff3 	bl	80048b0 <HAL_GPIO_WritePin>

	W25qxx_Spi(W25_SECTOR_ERASE);
 80038ca:	2020      	movs	r0, #32
 80038cc:	f7ff fce6 	bl	800329c <W25qxx_Spi>

	if(w25qxx.ID >= W25Q256)
 80038d0:	4b16      	ldr	r3, [pc, #88]	; (800392c <W25qxx_EraseSector+0xa4>)
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	2b08      	cmp	r3, #8
 80038d6:	d905      	bls.n	80038e4 <W25qxx_EraseSector+0x5c>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	0e1b      	lsrs	r3, r3, #24
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	4618      	mov	r0, r3
 80038e0:	f7ff fcdc 	bl	800329c <W25qxx_Spi>

	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	0c1b      	lsrs	r3, r3, #16
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7ff fcd6 	bl	800329c <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	0a1b      	lsrs	r3, r3, #8
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7ff fcd0 	bl	800329c <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	4618      	mov	r0, r3
 8003902:	f7ff fccb 	bl	800329c <W25qxx_Spi>

	W25QFLASH_CS_UNSELECT;
 8003906:	2201      	movs	r2, #1
 8003908:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800390c:	4808      	ldr	r0, [pc, #32]	; (8003930 <W25qxx_EraseSector+0xa8>)
 800390e:	f000 ffcf 	bl	80048b0 <HAL_GPIO_WritePin>

	W25qxx_WaitForWriteEnd();
 8003912:	f7ff fd29 	bl	8003368 <W25qxx_WaitForWriteEnd>

	W25qxx_Delay(1);
 8003916:	2001      	movs	r0, #1
 8003918:	f000 f8fa 	bl	8003b10 <HAL_Delay>
	w25qxx.Lock = 0;
 800391c:	4b03      	ldr	r3, [pc, #12]	; (800392c <W25qxx_EraseSector+0xa4>)
 800391e:	2200      	movs	r2, #0
 8003920:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8003924:	bf00      	nop
 8003926:	3708      	adds	r7, #8
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	200006e0 	.word	0x200006e0
 8003930:	40020400 	.word	0x40020400

08003934 <W25qxx_WritePage>:
	w25qxx.Lock = 0;
}

//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
 8003940:	603b      	str	r3, [r7, #0]
	while(w25qxx.Lock == 1)
 8003942:	e002      	b.n	800394a <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8003944:	2001      	movs	r0, #1
 8003946:	f000 f8e3 	bl	8003b10 <HAL_Delay>
	while(w25qxx.Lock == 1)
 800394a:	4b38      	ldr	r3, [pc, #224]	; (8003a2c <W25qxx_WritePage+0xf8>)
 800394c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003950:	2b01      	cmp	r3, #1
 8003952:	d0f7      	beq.n	8003944 <W25qxx_WritePage+0x10>

	w25qxx.Lock = 1;
 8003954:	4b35      	ldr	r3, [pc, #212]	; (8003a2c <W25qxx_WritePage+0xf8>)
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	if(((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 800395c:	683a      	ldr	r2, [r7, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4413      	add	r3, r2
 8003962:	4a32      	ldr	r2, [pc, #200]	; (8003a2c <W25qxx_WritePage+0xf8>)
 8003964:	8952      	ldrh	r2, [r2, #10]
 8003966:	4293      	cmp	r3, r2
 8003968:	d802      	bhi.n	8003970 <W25qxx_WritePage+0x3c>
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d105      	bne.n	800397c <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8003970:	4b2e      	ldr	r3, [pc, #184]	; (8003a2c <W25qxx_WritePage+0xf8>)
 8003972:	895b      	ldrh	r3, [r3, #10]
 8003974:	461a      	mov	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	603b      	str	r3, [r7, #0]

	if((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	4413      	add	r3, r2
 8003982:	4a2a      	ldr	r2, [pc, #168]	; (8003a2c <W25qxx_WritePage+0xf8>)
 8003984:	8952      	ldrh	r2, [r2, #10]
 8003986:	4293      	cmp	r3, r2
 8003988:	d905      	bls.n	8003996 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800398a:	4b28      	ldr	r3, [pc, #160]	; (8003a2c <W25qxx_WritePage+0xf8>)
 800398c:	895b      	ldrh	r3, [r3, #10]
 800398e:	461a      	mov	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	603b      	str	r3, [r7, #0]


	W25qxx_WaitForWriteEnd();
 8003996:	f7ff fce7 	bl	8003368 <W25qxx_WaitForWriteEnd>

	W25qxx_WriteEnable();
 800399a:	f7ff fccd 	bl	8003338 <W25qxx_WriteEnable>

	W25QFLASH_CS_SELECT;
 800399e:	2200      	movs	r2, #0
 80039a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80039a4:	4822      	ldr	r0, [pc, #136]	; (8003a30 <W25qxx_WritePage+0xfc>)
 80039a6:	f000 ff83 	bl	80048b0 <HAL_GPIO_WritePin>

	W25qxx_Spi(W25_PAGE_PROGRAMM);
 80039aa:	2002      	movs	r0, #2
 80039ac:	f7ff fc76 	bl	800329c <W25qxx_Spi>

	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 80039b0:	4b1e      	ldr	r3, [pc, #120]	; (8003a2c <W25qxx_WritePage+0xf8>)
 80039b2:	895b      	ldrh	r3, [r3, #10]
 80039b4:	461a      	mov	r2, r3
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	fb02 f303 	mul.w	r3, r2, r3
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	4413      	add	r3, r2
 80039c0:	60bb      	str	r3, [r7, #8]

	if(w25qxx.ID >= W25Q256)
 80039c2:	4b1a      	ldr	r3, [pc, #104]	; (8003a2c <W25qxx_WritePage+0xf8>)
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	2b08      	cmp	r3, #8
 80039c8:	d905      	bls.n	80039d6 <W25qxx_WritePage+0xa2>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	0e1b      	lsrs	r3, r3, #24
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7ff fc63 	bl	800329c <W25qxx_Spi>

	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	0c1b      	lsrs	r3, r3, #16
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	4618      	mov	r0, r3
 80039de:	f7ff fc5d 	bl	800329c <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	0a1b      	lsrs	r3, r3, #8
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7ff fc57 	bl	800329c <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7ff fc52 	bl	800329c <W25qxx_Spi>

	HAL_SPI_Transmit(W25QXX_SPI_PTR, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	2364      	movs	r3, #100	; 0x64
 80039fe:	68f9      	ldr	r1, [r7, #12]
 8003a00:	480c      	ldr	r0, [pc, #48]	; (8003a34 <W25qxx_WritePage+0x100>)
 8003a02:	f001 feea 	bl	80057da <HAL_SPI_Transmit>

	W25QFLASH_CS_UNSELECT;
 8003a06:	2201      	movs	r2, #1
 8003a08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003a0c:	4808      	ldr	r0, [pc, #32]	; (8003a30 <W25qxx_WritePage+0xfc>)
 8003a0e:	f000 ff4f 	bl	80048b0 <HAL_GPIO_WritePin>

	W25qxx_WaitForWriteEnd();
 8003a12:	f7ff fca9 	bl	8003368 <W25qxx_WaitForWriteEnd>

	W25qxx_Delay(1);
 8003a16:	2001      	movs	r0, #1
 8003a18:	f000 f87a 	bl	8003b10 <HAL_Delay>
	w25qxx.Lock = 0;
 8003a1c:	4b03      	ldr	r3, [pc, #12]	; (8003a2c <W25qxx_WritePage+0xf8>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8003a24:	bf00      	nop
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	200006e0 	.word	0x200006e0
 8003a30:	40020400 	.word	0x40020400
 8003a34:	2000010c 	.word	0x2000010c

08003a38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003a38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003a3c:	480d      	ldr	r0, [pc, #52]	; (8003a74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003a3e:	490e      	ldr	r1, [pc, #56]	; (8003a78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003a40:	4a0e      	ldr	r2, [pc, #56]	; (8003a7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003a42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a44:	e002      	b.n	8003a4c <LoopCopyDataInit>

08003a46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a4a:	3304      	adds	r3, #4

08003a4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a50:	d3f9      	bcc.n	8003a46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a52:	4a0b      	ldr	r2, [pc, #44]	; (8003a80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003a54:	4c0b      	ldr	r4, [pc, #44]	; (8003a84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003a56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a58:	e001      	b.n	8003a5e <LoopFillZerobss>

08003a5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a5c:	3204      	adds	r2, #4

08003a5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a60:	d3fb      	bcc.n	8003a5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003a62:	f7ff fc09 	bl	8003278 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a66:	f008 f907 	bl	800bc78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a6a:	f7fc fde1 	bl	8000630 <main>
  bx  lr    
 8003a6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003a70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003a74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a78:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8003a7c:	0800ddb4 	.word	0x0800ddb4
  ldr r2, =_sbss
 8003a80:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8003a84:	2000506c 	.word	0x2000506c

08003a88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a88:	e7fe      	b.n	8003a88 <ADC_IRQHandler>
	...

08003a8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a90:	4b0e      	ldr	r3, [pc, #56]	; (8003acc <HAL_Init+0x40>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a0d      	ldr	r2, [pc, #52]	; (8003acc <HAL_Init+0x40>)
 8003a96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a9c:	4b0b      	ldr	r3, [pc, #44]	; (8003acc <HAL_Init+0x40>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a0a      	ldr	r2, [pc, #40]	; (8003acc <HAL_Init+0x40>)
 8003aa2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003aa6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003aa8:	4b08      	ldr	r3, [pc, #32]	; (8003acc <HAL_Init+0x40>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a07      	ldr	r2, [pc, #28]	; (8003acc <HAL_Init+0x40>)
 8003aae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ab2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ab4:	2003      	movs	r0, #3
 8003ab6:	f000 f913 	bl	8003ce0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003aba:	2000      	movs	r0, #0
 8003abc:	f7ff faec 	bl	8003098 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ac0:	f7ff f8d8 	bl	8002c74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	40023c00 	.word	0x40023c00

08003ad0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ad4:	4b06      	ldr	r3, [pc, #24]	; (8003af0 <HAL_IncTick+0x20>)
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	461a      	mov	r2, r3
 8003ada:	4b06      	ldr	r3, [pc, #24]	; (8003af4 <HAL_IncTick+0x24>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4413      	add	r3, r2
 8003ae0:	4a04      	ldr	r2, [pc, #16]	; (8003af4 <HAL_IncTick+0x24>)
 8003ae2:	6013      	str	r3, [r2, #0]
}
 8003ae4:	bf00      	nop
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	20000030 	.word	0x20000030
 8003af4:	20000708 	.word	0x20000708

08003af8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003af8:	b480      	push	{r7}
 8003afa:	af00      	add	r7, sp, #0
  return uwTick;
 8003afc:	4b03      	ldr	r3, [pc, #12]	; (8003b0c <HAL_GetTick+0x14>)
 8003afe:	681b      	ldr	r3, [r3, #0]
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	20000708 	.word	0x20000708

08003b10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b18:	f7ff ffee 	bl	8003af8 <HAL_GetTick>
 8003b1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b28:	d005      	beq.n	8003b36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b2a:	4b0a      	ldr	r3, [pc, #40]	; (8003b54 <HAL_Delay+0x44>)
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	461a      	mov	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	4413      	add	r3, r2
 8003b34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003b36:	bf00      	nop
 8003b38:	f7ff ffde 	bl	8003af8 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d8f7      	bhi.n	8003b38 <HAL_Delay+0x28>
  {
  }
}
 8003b48:	bf00      	nop
 8003b4a:	bf00      	nop
 8003b4c:	3710      	adds	r7, #16
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	20000030 	.word	0x20000030

08003b58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f003 0307 	and.w	r3, r3, #7
 8003b66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b68:	4b0c      	ldr	r3, [pc, #48]	; (8003b9c <__NVIC_SetPriorityGrouping+0x44>)
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b6e:	68ba      	ldr	r2, [r7, #8]
 8003b70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b74:	4013      	ands	r3, r2
 8003b76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b8a:	4a04      	ldr	r2, [pc, #16]	; (8003b9c <__NVIC_SetPriorityGrouping+0x44>)
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	60d3      	str	r3, [r2, #12]
}
 8003b90:	bf00      	nop
 8003b92:	3714      	adds	r7, #20
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr
 8003b9c:	e000ed00 	.word	0xe000ed00

08003ba0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ba4:	4b04      	ldr	r3, [pc, #16]	; (8003bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	0a1b      	lsrs	r3, r3, #8
 8003baa:	f003 0307 	and.w	r3, r3, #7
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr
 8003bb8:	e000ed00 	.word	0xe000ed00

08003bbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	db0b      	blt.n	8003be6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bce:	79fb      	ldrb	r3, [r7, #7]
 8003bd0:	f003 021f 	and.w	r2, r3, #31
 8003bd4:	4907      	ldr	r1, [pc, #28]	; (8003bf4 <__NVIC_EnableIRQ+0x38>)
 8003bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bda:	095b      	lsrs	r3, r3, #5
 8003bdc:	2001      	movs	r0, #1
 8003bde:	fa00 f202 	lsl.w	r2, r0, r2
 8003be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003be6:	bf00      	nop
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	e000e100 	.word	0xe000e100

08003bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	4603      	mov	r3, r0
 8003c00:	6039      	str	r1, [r7, #0]
 8003c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	db0a      	blt.n	8003c22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	b2da      	uxtb	r2, r3
 8003c10:	490c      	ldr	r1, [pc, #48]	; (8003c44 <__NVIC_SetPriority+0x4c>)
 8003c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c16:	0112      	lsls	r2, r2, #4
 8003c18:	b2d2      	uxtb	r2, r2
 8003c1a:	440b      	add	r3, r1
 8003c1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c20:	e00a      	b.n	8003c38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	b2da      	uxtb	r2, r3
 8003c26:	4908      	ldr	r1, [pc, #32]	; (8003c48 <__NVIC_SetPriority+0x50>)
 8003c28:	79fb      	ldrb	r3, [r7, #7]
 8003c2a:	f003 030f 	and.w	r3, r3, #15
 8003c2e:	3b04      	subs	r3, #4
 8003c30:	0112      	lsls	r2, r2, #4
 8003c32:	b2d2      	uxtb	r2, r2
 8003c34:	440b      	add	r3, r1
 8003c36:	761a      	strb	r2, [r3, #24]
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr
 8003c44:	e000e100 	.word	0xe000e100
 8003c48:	e000ed00 	.word	0xe000ed00

08003c4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b089      	sub	sp, #36	; 0x24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f003 0307 	and.w	r3, r3, #7
 8003c5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	f1c3 0307 	rsb	r3, r3, #7
 8003c66:	2b04      	cmp	r3, #4
 8003c68:	bf28      	it	cs
 8003c6a:	2304      	movcs	r3, #4
 8003c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	3304      	adds	r3, #4
 8003c72:	2b06      	cmp	r3, #6
 8003c74:	d902      	bls.n	8003c7c <NVIC_EncodePriority+0x30>
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	3b03      	subs	r3, #3
 8003c7a:	e000      	b.n	8003c7e <NVIC_EncodePriority+0x32>
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c80:	f04f 32ff 	mov.w	r2, #4294967295
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8a:	43da      	mvns	r2, r3
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	401a      	ands	r2, r3
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c94:	f04f 31ff 	mov.w	r1, #4294967295
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c9e:	43d9      	mvns	r1, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ca4:	4313      	orrs	r3, r2
         );
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3724      	adds	r7, #36	; 0x24
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
	...

08003cb4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003cb8:	f3bf 8f4f 	dsb	sy
}
 8003cbc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003cbe:	4b06      	ldr	r3, [pc, #24]	; (8003cd8 <__NVIC_SystemReset+0x24>)
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003cc6:	4904      	ldr	r1, [pc, #16]	; (8003cd8 <__NVIC_SystemReset+0x24>)
 8003cc8:	4b04      	ldr	r3, [pc, #16]	; (8003cdc <__NVIC_SystemReset+0x28>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003cce:	f3bf 8f4f 	dsb	sy
}
 8003cd2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003cd4:	bf00      	nop
 8003cd6:	e7fd      	b.n	8003cd4 <__NVIC_SystemReset+0x20>
 8003cd8:	e000ed00 	.word	0xe000ed00
 8003cdc:	05fa0004 	.word	0x05fa0004

08003ce0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f7ff ff35 	bl	8003b58 <__NVIC_SetPriorityGrouping>
}
 8003cee:	bf00      	nop
 8003cf0:	3708      	adds	r7, #8
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b086      	sub	sp, #24
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	60b9      	str	r1, [r7, #8]
 8003d00:	607a      	str	r2, [r7, #4]
 8003d02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d04:	2300      	movs	r3, #0
 8003d06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d08:	f7ff ff4a 	bl	8003ba0 <__NVIC_GetPriorityGrouping>
 8003d0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	68b9      	ldr	r1, [r7, #8]
 8003d12:	6978      	ldr	r0, [r7, #20]
 8003d14:	f7ff ff9a 	bl	8003c4c <NVIC_EncodePriority>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d1e:	4611      	mov	r1, r2
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7ff ff69 	bl	8003bf8 <__NVIC_SetPriority>
}
 8003d26:	bf00      	nop
 8003d28:	3718      	adds	r7, #24
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b082      	sub	sp, #8
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	4603      	mov	r3, r0
 8003d36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7ff ff3d 	bl	8003bbc <__NVIC_EnableIRQ>
}
 8003d42:	bf00      	nop
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8003d4e:	f7ff ffb1 	bl	8003cb4 <__NVIC_SystemReset>
	...

08003d54 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b086      	sub	sp, #24
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003d60:	f7ff feca 	bl	8003af8 <HAL_GetTick>
 8003d64:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d101      	bne.n	8003d70 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e099      	b.n	8003ea4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2202      	movs	r2, #2
 8003d74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f022 0201 	bic.w	r2, r2, #1
 8003d8e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d90:	e00f      	b.n	8003db2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d92:	f7ff feb1 	bl	8003af8 <HAL_GetTick>
 8003d96:	4602      	mov	r2, r0
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	2b05      	cmp	r3, #5
 8003d9e:	d908      	bls.n	8003db2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2220      	movs	r2, #32
 8003da4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2203      	movs	r2, #3
 8003daa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e078      	b.n	8003ea4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0301 	and.w	r3, r3, #1
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d1e8      	bne.n	8003d92 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003dc8:	697a      	ldr	r2, [r7, #20]
 8003dca:	4b38      	ldr	r3, [pc, #224]	; (8003eac <HAL_DMA_Init+0x158>)
 8003dcc:	4013      	ands	r3, r2
 8003dce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685a      	ldr	r2, [r3, #4]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003dde:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003df6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a1b      	ldr	r3, [r3, #32]
 8003dfc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e08:	2b04      	cmp	r3, #4
 8003e0a:	d107      	bne.n	8003e1c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e14:	4313      	orrs	r3, r2
 8003e16:	697a      	ldr	r2, [r7, #20]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	697a      	ldr	r2, [r7, #20]
 8003e22:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	f023 0307 	bic.w	r3, r3, #7
 8003e32:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e38:	697a      	ldr	r2, [r7, #20]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e42:	2b04      	cmp	r3, #4
 8003e44:	d117      	bne.n	8003e76 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4a:	697a      	ldr	r2, [r7, #20]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00e      	beq.n	8003e76 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 fb01 	bl	8004460 <DMA_CheckFifoParam>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d008      	beq.n	8003e76 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2240      	movs	r2, #64	; 0x40
 8003e68:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003e72:	2301      	movs	r3, #1
 8003e74:	e016      	b.n	8003ea4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 fab8 	bl	80043f4 <DMA_CalcBaseAndBitshift>
 8003e84:	4603      	mov	r3, r0
 8003e86:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e8c:	223f      	movs	r2, #63	; 0x3f
 8003e8e:	409a      	lsls	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3718      	adds	r7, #24
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	f010803f 	.word	0xf010803f

08003eb0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b086      	sub	sp, #24
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	607a      	str	r2, [r7, #4]
 8003ebc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d101      	bne.n	8003ed6 <HAL_DMA_Start_IT+0x26>
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	e040      	b.n	8003f58 <HAL_DMA_Start_IT+0xa8>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d12f      	bne.n	8003f4a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2202      	movs	r2, #2
 8003eee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	68b9      	ldr	r1, [r7, #8]
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	f000 fa4a 	bl	8004398 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f08:	223f      	movs	r2, #63	; 0x3f
 8003f0a:	409a      	lsls	r2, r3
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f042 0216 	orr.w	r2, r2, #22
 8003f1e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d007      	beq.n	8003f38 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f042 0208 	orr.w	r2, r2, #8
 8003f36:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f042 0201 	orr.w	r2, r2, #1
 8003f46:	601a      	str	r2, [r3, #0]
 8003f48:	e005      	b.n	8003f56 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003f52:	2302      	movs	r3, #2
 8003f54:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003f56:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3718      	adds	r7, #24
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f6c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003f6e:	f7ff fdc3 	bl	8003af8 <HAL_GetTick>
 8003f72:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d008      	beq.n	8003f92 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2280      	movs	r2, #128	; 0x80
 8003f84:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e052      	b.n	8004038 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f022 0216 	bic.w	r2, r2, #22
 8003fa0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	695a      	ldr	r2, [r3, #20]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fb0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d103      	bne.n	8003fc2 <HAL_DMA_Abort+0x62>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d007      	beq.n	8003fd2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f022 0208 	bic.w	r2, r2, #8
 8003fd0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f022 0201 	bic.w	r2, r2, #1
 8003fe0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fe2:	e013      	b.n	800400c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003fe4:	f7ff fd88 	bl	8003af8 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b05      	cmp	r3, #5
 8003ff0:	d90c      	bls.n	800400c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2220      	movs	r2, #32
 8003ff6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2203      	movs	r2, #3
 8003ffc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e015      	b.n	8004038 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1e4      	bne.n	8003fe4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800401e:	223f      	movs	r2, #63	; 0x3f
 8004020:	409a      	lsls	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2201      	movs	r2, #1
 800402a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800404e:	b2db      	uxtb	r3, r3
 8004050:	2b02      	cmp	r3, #2
 8004052:	d004      	beq.n	800405e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2280      	movs	r2, #128	; 0x80
 8004058:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e00c      	b.n	8004078 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2205      	movs	r2, #5
 8004062:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 0201 	bic.w	r2, r2, #1
 8004074:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004076:	2300      	movs	r3, #0
}
 8004078:	4618      	mov	r0, r3
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b086      	sub	sp, #24
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800408c:	2300      	movs	r3, #0
 800408e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004090:	4b8e      	ldr	r3, [pc, #568]	; (80042cc <HAL_DMA_IRQHandler+0x248>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a8e      	ldr	r2, [pc, #568]	; (80042d0 <HAL_DMA_IRQHandler+0x24c>)
 8004096:	fba2 2303 	umull	r2, r3, r2, r3
 800409a:	0a9b      	lsrs	r3, r3, #10
 800409c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ae:	2208      	movs	r2, #8
 80040b0:	409a      	lsls	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	4013      	ands	r3, r2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d01a      	beq.n	80040f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0304 	and.w	r3, r3, #4
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d013      	beq.n	80040f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f022 0204 	bic.w	r2, r2, #4
 80040d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040dc:	2208      	movs	r2, #8
 80040de:	409a      	lsls	r2, r3
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e8:	f043 0201 	orr.w	r2, r3, #1
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f4:	2201      	movs	r2, #1
 80040f6:	409a      	lsls	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	4013      	ands	r3, r2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d012      	beq.n	8004126 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00b      	beq.n	8004126 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004112:	2201      	movs	r2, #1
 8004114:	409a      	lsls	r2, r3
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800411e:	f043 0202 	orr.w	r2, r3, #2
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800412a:	2204      	movs	r2, #4
 800412c:	409a      	lsls	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	4013      	ands	r3, r2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d012      	beq.n	800415c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0302 	and.w	r3, r3, #2
 8004140:	2b00      	cmp	r3, #0
 8004142:	d00b      	beq.n	800415c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004148:	2204      	movs	r2, #4
 800414a:	409a      	lsls	r2, r3
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004154:	f043 0204 	orr.w	r2, r3, #4
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004160:	2210      	movs	r2, #16
 8004162:	409a      	lsls	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	4013      	ands	r3, r2
 8004168:	2b00      	cmp	r3, #0
 800416a:	d043      	beq.n	80041f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0308 	and.w	r3, r3, #8
 8004176:	2b00      	cmp	r3, #0
 8004178:	d03c      	beq.n	80041f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800417e:	2210      	movs	r2, #16
 8004180:	409a      	lsls	r2, r3
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d018      	beq.n	80041c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d108      	bne.n	80041b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d024      	beq.n	80041f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	4798      	blx	r3
 80041b2:	e01f      	b.n	80041f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d01b      	beq.n	80041f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	4798      	blx	r3
 80041c4:	e016      	b.n	80041f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d107      	bne.n	80041e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 0208 	bic.w	r2, r2, #8
 80041e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d003      	beq.n	80041f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041f8:	2220      	movs	r2, #32
 80041fa:	409a      	lsls	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	4013      	ands	r3, r2
 8004200:	2b00      	cmp	r3, #0
 8004202:	f000 808f 	beq.w	8004324 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0310 	and.w	r3, r3, #16
 8004210:	2b00      	cmp	r3, #0
 8004212:	f000 8087 	beq.w	8004324 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800421a:	2220      	movs	r2, #32
 800421c:	409a      	lsls	r2, r3
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b05      	cmp	r3, #5
 800422c:	d136      	bne.n	800429c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f022 0216 	bic.w	r2, r2, #22
 800423c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	695a      	ldr	r2, [r3, #20]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800424c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004252:	2b00      	cmp	r3, #0
 8004254:	d103      	bne.n	800425e <HAL_DMA_IRQHandler+0x1da>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800425a:	2b00      	cmp	r3, #0
 800425c:	d007      	beq.n	800426e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f022 0208 	bic.w	r2, r2, #8
 800426c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004272:	223f      	movs	r2, #63	; 0x3f
 8004274:	409a      	lsls	r2, r3
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2201      	movs	r2, #1
 800427e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800428e:	2b00      	cmp	r3, #0
 8004290:	d07e      	beq.n	8004390 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	4798      	blx	r3
        }
        return;
 800429a:	e079      	b.n	8004390 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d01d      	beq.n	80042e6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d10d      	bne.n	80042d4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d031      	beq.n	8004324 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	4798      	blx	r3
 80042c8:	e02c      	b.n	8004324 <HAL_DMA_IRQHandler+0x2a0>
 80042ca:	bf00      	nop
 80042cc:	20000028 	.word	0x20000028
 80042d0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d023      	beq.n	8004324 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	4798      	blx	r3
 80042e4:	e01e      	b.n	8004324 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d10f      	bne.n	8004314 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f022 0210 	bic.w	r2, r2, #16
 8004302:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004318:	2b00      	cmp	r3, #0
 800431a:	d003      	beq.n	8004324 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004328:	2b00      	cmp	r3, #0
 800432a:	d032      	beq.n	8004392 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004330:	f003 0301 	and.w	r3, r3, #1
 8004334:	2b00      	cmp	r3, #0
 8004336:	d022      	beq.n	800437e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2205      	movs	r2, #5
 800433c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f022 0201 	bic.w	r2, r2, #1
 800434e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	3301      	adds	r3, #1
 8004354:	60bb      	str	r3, [r7, #8]
 8004356:	697a      	ldr	r2, [r7, #20]
 8004358:	429a      	cmp	r2, r3
 800435a:	d307      	bcc.n	800436c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1f2      	bne.n	8004350 <HAL_DMA_IRQHandler+0x2cc>
 800436a:	e000      	b.n	800436e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800436c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004382:	2b00      	cmp	r3, #0
 8004384:	d005      	beq.n	8004392 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	4798      	blx	r3
 800438e:	e000      	b.n	8004392 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004390:	bf00      	nop
    }
  }
}
 8004392:	3718      	adds	r7, #24
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004398:	b480      	push	{r7}
 800439a:	b085      	sub	sp, #20
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
 80043a4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80043b4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	683a      	ldr	r2, [r7, #0]
 80043bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	2b40      	cmp	r3, #64	; 0x40
 80043c4:	d108      	bne.n	80043d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80043d6:	e007      	b.n	80043e8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68ba      	ldr	r2, [r7, #8]
 80043de:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	60da      	str	r2, [r3, #12]
}
 80043e8:	bf00      	nop
 80043ea:	3714      	adds	r7, #20
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b085      	sub	sp, #20
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	b2db      	uxtb	r3, r3
 8004402:	3b10      	subs	r3, #16
 8004404:	4a14      	ldr	r2, [pc, #80]	; (8004458 <DMA_CalcBaseAndBitshift+0x64>)
 8004406:	fba2 2303 	umull	r2, r3, r2, r3
 800440a:	091b      	lsrs	r3, r3, #4
 800440c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800440e:	4a13      	ldr	r2, [pc, #76]	; (800445c <DMA_CalcBaseAndBitshift+0x68>)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	4413      	add	r3, r2
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	461a      	mov	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2b03      	cmp	r3, #3
 8004420:	d909      	bls.n	8004436 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800442a:	f023 0303 	bic.w	r3, r3, #3
 800442e:	1d1a      	adds	r2, r3, #4
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	659a      	str	r2, [r3, #88]	; 0x58
 8004434:	e007      	b.n	8004446 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800443e:	f023 0303 	bic.w	r3, r3, #3
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800444a:	4618      	mov	r0, r3
 800444c:	3714      	adds	r7, #20
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	aaaaaaab 	.word	0xaaaaaaab
 800445c:	0800dbec 	.word	0x0800dbec

08004460 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004460:	b480      	push	{r7}
 8004462:	b085      	sub	sp, #20
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004468:	2300      	movs	r3, #0
 800446a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004470:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d11f      	bne.n	80044ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	2b03      	cmp	r3, #3
 800447e:	d856      	bhi.n	800452e <DMA_CheckFifoParam+0xce>
 8004480:	a201      	add	r2, pc, #4	; (adr r2, 8004488 <DMA_CheckFifoParam+0x28>)
 8004482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004486:	bf00      	nop
 8004488:	08004499 	.word	0x08004499
 800448c:	080044ab 	.word	0x080044ab
 8004490:	08004499 	.word	0x08004499
 8004494:	0800452f 	.word	0x0800452f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d046      	beq.n	8004532 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044a8:	e043      	b.n	8004532 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80044b2:	d140      	bne.n	8004536 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044b8:	e03d      	b.n	8004536 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	699b      	ldr	r3, [r3, #24]
 80044be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044c2:	d121      	bne.n	8004508 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	2b03      	cmp	r3, #3
 80044c8:	d837      	bhi.n	800453a <DMA_CheckFifoParam+0xda>
 80044ca:	a201      	add	r2, pc, #4	; (adr r2, 80044d0 <DMA_CheckFifoParam+0x70>)
 80044cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d0:	080044e1 	.word	0x080044e1
 80044d4:	080044e7 	.word	0x080044e7
 80044d8:	080044e1 	.word	0x080044e1
 80044dc:	080044f9 	.word	0x080044f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	73fb      	strb	r3, [r7, #15]
      break;
 80044e4:	e030      	b.n	8004548 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d025      	beq.n	800453e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044f6:	e022      	b.n	800453e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004500:	d11f      	bne.n	8004542 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004506:	e01c      	b.n	8004542 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	2b02      	cmp	r3, #2
 800450c:	d903      	bls.n	8004516 <DMA_CheckFifoParam+0xb6>
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	2b03      	cmp	r3, #3
 8004512:	d003      	beq.n	800451c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004514:	e018      	b.n	8004548 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	73fb      	strb	r3, [r7, #15]
      break;
 800451a:	e015      	b.n	8004548 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004520:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00e      	beq.n	8004546 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	73fb      	strb	r3, [r7, #15]
      break;
 800452c:	e00b      	b.n	8004546 <DMA_CheckFifoParam+0xe6>
      break;
 800452e:	bf00      	nop
 8004530:	e00a      	b.n	8004548 <DMA_CheckFifoParam+0xe8>
      break;
 8004532:	bf00      	nop
 8004534:	e008      	b.n	8004548 <DMA_CheckFifoParam+0xe8>
      break;
 8004536:	bf00      	nop
 8004538:	e006      	b.n	8004548 <DMA_CheckFifoParam+0xe8>
      break;
 800453a:	bf00      	nop
 800453c:	e004      	b.n	8004548 <DMA_CheckFifoParam+0xe8>
      break;
 800453e:	bf00      	nop
 8004540:	e002      	b.n	8004548 <DMA_CheckFifoParam+0xe8>
      break;   
 8004542:	bf00      	nop
 8004544:	e000      	b.n	8004548 <DMA_CheckFifoParam+0xe8>
      break;
 8004546:	bf00      	nop
    }
  } 
  
  return status; 
 8004548:	7bfb      	ldrb	r3, [r7, #15]
}
 800454a:	4618      	mov	r0, r3
 800454c:	3714      	adds	r7, #20
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop

08004558 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004558:	b480      	push	{r7}
 800455a:	b089      	sub	sp, #36	; 0x24
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004562:	2300      	movs	r3, #0
 8004564:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004566:	2300      	movs	r3, #0
 8004568:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800456a:	2300      	movs	r3, #0
 800456c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800456e:	2300      	movs	r3, #0
 8004570:	61fb      	str	r3, [r7, #28]
 8004572:	e165      	b.n	8004840 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004574:	2201      	movs	r2, #1
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	fa02 f303 	lsl.w	r3, r2, r3
 800457c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	4013      	ands	r3, r2
 8004586:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	429a      	cmp	r2, r3
 800458e:	f040 8154 	bne.w	800483a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f003 0303 	and.w	r3, r3, #3
 800459a:	2b01      	cmp	r3, #1
 800459c:	d005      	beq.n	80045aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d130      	bne.n	800460c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	005b      	lsls	r3, r3, #1
 80045b4:	2203      	movs	r2, #3
 80045b6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ba:	43db      	mvns	r3, r3
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	4013      	ands	r3, r2
 80045c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	68da      	ldr	r2, [r3, #12]
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	005b      	lsls	r3, r3, #1
 80045ca:	fa02 f303 	lsl.w	r3, r2, r3
 80045ce:	69ba      	ldr	r2, [r7, #24]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	69ba      	ldr	r2, [r7, #24]
 80045d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80045e0:	2201      	movs	r2, #1
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	fa02 f303 	lsl.w	r3, r2, r3
 80045e8:	43db      	mvns	r3, r3
 80045ea:	69ba      	ldr	r2, [r7, #24]
 80045ec:	4013      	ands	r3, r2
 80045ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	091b      	lsrs	r3, r3, #4
 80045f6:	f003 0201 	and.w	r2, r3, #1
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004600:	69ba      	ldr	r2, [r7, #24]
 8004602:	4313      	orrs	r3, r2
 8004604:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	69ba      	ldr	r2, [r7, #24]
 800460a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f003 0303 	and.w	r3, r3, #3
 8004614:	2b03      	cmp	r3, #3
 8004616:	d017      	beq.n	8004648 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	005b      	lsls	r3, r3, #1
 8004622:	2203      	movs	r2, #3
 8004624:	fa02 f303 	lsl.w	r3, r2, r3
 8004628:	43db      	mvns	r3, r3
 800462a:	69ba      	ldr	r2, [r7, #24]
 800462c:	4013      	ands	r3, r2
 800462e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	689a      	ldr	r2, [r3, #8]
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	005b      	lsls	r3, r3, #1
 8004638:	fa02 f303 	lsl.w	r3, r2, r3
 800463c:	69ba      	ldr	r2, [r7, #24]
 800463e:	4313      	orrs	r3, r2
 8004640:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	69ba      	ldr	r2, [r7, #24]
 8004646:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f003 0303 	and.w	r3, r3, #3
 8004650:	2b02      	cmp	r3, #2
 8004652:	d123      	bne.n	800469c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	08da      	lsrs	r2, r3, #3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	3208      	adds	r2, #8
 800465c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004660:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	f003 0307 	and.w	r3, r3, #7
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	220f      	movs	r2, #15
 800466c:	fa02 f303 	lsl.w	r3, r2, r3
 8004670:	43db      	mvns	r3, r3
 8004672:	69ba      	ldr	r2, [r7, #24]
 8004674:	4013      	ands	r3, r2
 8004676:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	691a      	ldr	r2, [r3, #16]
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	f003 0307 	and.w	r3, r3, #7
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	fa02 f303 	lsl.w	r3, r2, r3
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	4313      	orrs	r3, r2
 800468c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	08da      	lsrs	r2, r3, #3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	3208      	adds	r2, #8
 8004696:	69b9      	ldr	r1, [r7, #24]
 8004698:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	005b      	lsls	r3, r3, #1
 80046a6:	2203      	movs	r2, #3
 80046a8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ac:	43db      	mvns	r3, r3
 80046ae:	69ba      	ldr	r2, [r7, #24]
 80046b0:	4013      	ands	r3, r2
 80046b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f003 0203 	and.w	r2, r3, #3
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	005b      	lsls	r3, r3, #1
 80046c0:	fa02 f303 	lsl.w	r3, r2, r3
 80046c4:	69ba      	ldr	r2, [r7, #24]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	69ba      	ldr	r2, [r7, #24]
 80046ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f000 80ae 	beq.w	800483a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046de:	2300      	movs	r3, #0
 80046e0:	60fb      	str	r3, [r7, #12]
 80046e2:	4b5d      	ldr	r3, [pc, #372]	; (8004858 <HAL_GPIO_Init+0x300>)
 80046e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e6:	4a5c      	ldr	r2, [pc, #368]	; (8004858 <HAL_GPIO_Init+0x300>)
 80046e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046ec:	6453      	str	r3, [r2, #68]	; 0x44
 80046ee:	4b5a      	ldr	r3, [pc, #360]	; (8004858 <HAL_GPIO_Init+0x300>)
 80046f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046f6:	60fb      	str	r3, [r7, #12]
 80046f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046fa:	4a58      	ldr	r2, [pc, #352]	; (800485c <HAL_GPIO_Init+0x304>)
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	089b      	lsrs	r3, r3, #2
 8004700:	3302      	adds	r3, #2
 8004702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004706:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	f003 0303 	and.w	r3, r3, #3
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	220f      	movs	r2, #15
 8004712:	fa02 f303 	lsl.w	r3, r2, r3
 8004716:	43db      	mvns	r3, r3
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	4013      	ands	r3, r2
 800471c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a4f      	ldr	r2, [pc, #316]	; (8004860 <HAL_GPIO_Init+0x308>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d025      	beq.n	8004772 <HAL_GPIO_Init+0x21a>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a4e      	ldr	r2, [pc, #312]	; (8004864 <HAL_GPIO_Init+0x30c>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d01f      	beq.n	800476e <HAL_GPIO_Init+0x216>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a4d      	ldr	r2, [pc, #308]	; (8004868 <HAL_GPIO_Init+0x310>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d019      	beq.n	800476a <HAL_GPIO_Init+0x212>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a4c      	ldr	r2, [pc, #304]	; (800486c <HAL_GPIO_Init+0x314>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d013      	beq.n	8004766 <HAL_GPIO_Init+0x20e>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a4b      	ldr	r2, [pc, #300]	; (8004870 <HAL_GPIO_Init+0x318>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d00d      	beq.n	8004762 <HAL_GPIO_Init+0x20a>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a4a      	ldr	r2, [pc, #296]	; (8004874 <HAL_GPIO_Init+0x31c>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d007      	beq.n	800475e <HAL_GPIO_Init+0x206>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a49      	ldr	r2, [pc, #292]	; (8004878 <HAL_GPIO_Init+0x320>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d101      	bne.n	800475a <HAL_GPIO_Init+0x202>
 8004756:	2306      	movs	r3, #6
 8004758:	e00c      	b.n	8004774 <HAL_GPIO_Init+0x21c>
 800475a:	2307      	movs	r3, #7
 800475c:	e00a      	b.n	8004774 <HAL_GPIO_Init+0x21c>
 800475e:	2305      	movs	r3, #5
 8004760:	e008      	b.n	8004774 <HAL_GPIO_Init+0x21c>
 8004762:	2304      	movs	r3, #4
 8004764:	e006      	b.n	8004774 <HAL_GPIO_Init+0x21c>
 8004766:	2303      	movs	r3, #3
 8004768:	e004      	b.n	8004774 <HAL_GPIO_Init+0x21c>
 800476a:	2302      	movs	r3, #2
 800476c:	e002      	b.n	8004774 <HAL_GPIO_Init+0x21c>
 800476e:	2301      	movs	r3, #1
 8004770:	e000      	b.n	8004774 <HAL_GPIO_Init+0x21c>
 8004772:	2300      	movs	r3, #0
 8004774:	69fa      	ldr	r2, [r7, #28]
 8004776:	f002 0203 	and.w	r2, r2, #3
 800477a:	0092      	lsls	r2, r2, #2
 800477c:	4093      	lsls	r3, r2
 800477e:	69ba      	ldr	r2, [r7, #24]
 8004780:	4313      	orrs	r3, r2
 8004782:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004784:	4935      	ldr	r1, [pc, #212]	; (800485c <HAL_GPIO_Init+0x304>)
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	089b      	lsrs	r3, r3, #2
 800478a:	3302      	adds	r3, #2
 800478c:	69ba      	ldr	r2, [r7, #24]
 800478e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004792:	4b3a      	ldr	r3, [pc, #232]	; (800487c <HAL_GPIO_Init+0x324>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	43db      	mvns	r3, r3
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	4013      	ands	r3, r2
 80047a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d003      	beq.n	80047b6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80047ae:	69ba      	ldr	r2, [r7, #24]
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80047b6:	4a31      	ldr	r2, [pc, #196]	; (800487c <HAL_GPIO_Init+0x324>)
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80047bc:	4b2f      	ldr	r3, [pc, #188]	; (800487c <HAL_GPIO_Init+0x324>)
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	43db      	mvns	r3, r3
 80047c6:	69ba      	ldr	r2, [r7, #24]
 80047c8:	4013      	ands	r3, r2
 80047ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d003      	beq.n	80047e0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80047d8:	69ba      	ldr	r2, [r7, #24]
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	4313      	orrs	r3, r2
 80047de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80047e0:	4a26      	ldr	r2, [pc, #152]	; (800487c <HAL_GPIO_Init+0x324>)
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80047e6:	4b25      	ldr	r3, [pc, #148]	; (800487c <HAL_GPIO_Init+0x324>)
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	43db      	mvns	r3, r3
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	4013      	ands	r3, r2
 80047f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d003      	beq.n	800480a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004802:	69ba      	ldr	r2, [r7, #24]
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	4313      	orrs	r3, r2
 8004808:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800480a:	4a1c      	ldr	r2, [pc, #112]	; (800487c <HAL_GPIO_Init+0x324>)
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004810:	4b1a      	ldr	r3, [pc, #104]	; (800487c <HAL_GPIO_Init+0x324>)
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	43db      	mvns	r3, r3
 800481a:	69ba      	ldr	r2, [r7, #24]
 800481c:	4013      	ands	r3, r2
 800481e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d003      	beq.n	8004834 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800482c:	69ba      	ldr	r2, [r7, #24]
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	4313      	orrs	r3, r2
 8004832:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004834:	4a11      	ldr	r2, [pc, #68]	; (800487c <HAL_GPIO_Init+0x324>)
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	3301      	adds	r3, #1
 800483e:	61fb      	str	r3, [r7, #28]
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	2b0f      	cmp	r3, #15
 8004844:	f67f ae96 	bls.w	8004574 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004848:	bf00      	nop
 800484a:	bf00      	nop
 800484c:	3724      	adds	r7, #36	; 0x24
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	40023800 	.word	0x40023800
 800485c:	40013800 	.word	0x40013800
 8004860:	40020000 	.word	0x40020000
 8004864:	40020400 	.word	0x40020400
 8004868:	40020800 	.word	0x40020800
 800486c:	40020c00 	.word	0x40020c00
 8004870:	40021000 	.word	0x40021000
 8004874:	40021400 	.word	0x40021400
 8004878:	40021800 	.word	0x40021800
 800487c:	40013c00 	.word	0x40013c00

08004880 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	460b      	mov	r3, r1
 800488a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	691a      	ldr	r2, [r3, #16]
 8004890:	887b      	ldrh	r3, [r7, #2]
 8004892:	4013      	ands	r3, r2
 8004894:	2b00      	cmp	r3, #0
 8004896:	d002      	beq.n	800489e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004898:	2301      	movs	r3, #1
 800489a:	73fb      	strb	r3, [r7, #15]
 800489c:	e001      	b.n	80048a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800489e:	2300      	movs	r3, #0
 80048a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80048a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3714      	adds	r7, #20
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	460b      	mov	r3, r1
 80048ba:	807b      	strh	r3, [r7, #2]
 80048bc:	4613      	mov	r3, r2
 80048be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80048c0:	787b      	ldrb	r3, [r7, #1]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d003      	beq.n	80048ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80048c6:	887a      	ldrh	r2, [r7, #2]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80048cc:	e003      	b.n	80048d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80048ce:	887b      	ldrh	r3, [r7, #2]
 80048d0:	041a      	lsls	r2, r3, #16
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	619a      	str	r2, [r3, #24]
}
 80048d6:	bf00      	nop
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr

080048e2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80048e2:	b480      	push	{r7}
 80048e4:	b085      	sub	sp, #20
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
 80048ea:	460b      	mov	r3, r1
 80048ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80048f4:	887a      	ldrh	r2, [r7, #2]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	4013      	ands	r3, r2
 80048fa:	041a      	lsls	r2, r3, #16
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	43d9      	mvns	r1, r3
 8004900:	887b      	ldrh	r3, [r7, #2]
 8004902:	400b      	ands	r3, r1
 8004904:	431a      	orrs	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	619a      	str	r2, [r3, #24]
}
 800490a:	bf00      	nop
 800490c:	3714      	adds	r7, #20
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
	...

08004918 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e12b      	b.n	8004b82 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b00      	cmp	r3, #0
 8004934:	d106      	bne.n	8004944 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f7fe f9c4 	bl	8002ccc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2224      	movs	r2, #36	; 0x24
 8004948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f022 0201 	bic.w	r2, r2, #1
 800495a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800496a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800497a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800497c:	f000 fa02 	bl	8004d84 <HAL_RCC_GetPCLK1Freq>
 8004980:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	4a81      	ldr	r2, [pc, #516]	; (8004b8c <HAL_I2C_Init+0x274>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d807      	bhi.n	800499c <HAL_I2C_Init+0x84>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	4a80      	ldr	r2, [pc, #512]	; (8004b90 <HAL_I2C_Init+0x278>)
 8004990:	4293      	cmp	r3, r2
 8004992:	bf94      	ite	ls
 8004994:	2301      	movls	r3, #1
 8004996:	2300      	movhi	r3, #0
 8004998:	b2db      	uxtb	r3, r3
 800499a:	e006      	b.n	80049aa <HAL_I2C_Init+0x92>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	4a7d      	ldr	r2, [pc, #500]	; (8004b94 <HAL_I2C_Init+0x27c>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	bf94      	ite	ls
 80049a4:	2301      	movls	r3, #1
 80049a6:	2300      	movhi	r3, #0
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d001      	beq.n	80049b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e0e7      	b.n	8004b82 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	4a78      	ldr	r2, [pc, #480]	; (8004b98 <HAL_I2C_Init+0x280>)
 80049b6:	fba2 2303 	umull	r2, r3, r2, r3
 80049ba:	0c9b      	lsrs	r3, r3, #18
 80049bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68ba      	ldr	r2, [r7, #8]
 80049ce:	430a      	orrs	r2, r1
 80049d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	6a1b      	ldr	r3, [r3, #32]
 80049d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	4a6a      	ldr	r2, [pc, #424]	; (8004b8c <HAL_I2C_Init+0x274>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d802      	bhi.n	80049ec <HAL_I2C_Init+0xd4>
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	3301      	adds	r3, #1
 80049ea:	e009      	b.n	8004a00 <HAL_I2C_Init+0xe8>
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80049f2:	fb02 f303 	mul.w	r3, r2, r3
 80049f6:	4a69      	ldr	r2, [pc, #420]	; (8004b9c <HAL_I2C_Init+0x284>)
 80049f8:	fba2 2303 	umull	r2, r3, r2, r3
 80049fc:	099b      	lsrs	r3, r3, #6
 80049fe:	3301      	adds	r3, #1
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	6812      	ldr	r2, [r2, #0]
 8004a04:	430b      	orrs	r3, r1
 8004a06:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	69db      	ldr	r3, [r3, #28]
 8004a0e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004a12:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	495c      	ldr	r1, [pc, #368]	; (8004b8c <HAL_I2C_Init+0x274>)
 8004a1c:	428b      	cmp	r3, r1
 8004a1e:	d819      	bhi.n	8004a54 <HAL_I2C_Init+0x13c>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	1e59      	subs	r1, r3, #1
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	005b      	lsls	r3, r3, #1
 8004a2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a2e:	1c59      	adds	r1, r3, #1
 8004a30:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004a34:	400b      	ands	r3, r1
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00a      	beq.n	8004a50 <HAL_I2C_Init+0x138>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	1e59      	subs	r1, r3, #1
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	005b      	lsls	r3, r3, #1
 8004a44:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a48:	3301      	adds	r3, #1
 8004a4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a4e:	e051      	b.n	8004af4 <HAL_I2C_Init+0x1dc>
 8004a50:	2304      	movs	r3, #4
 8004a52:	e04f      	b.n	8004af4 <HAL_I2C_Init+0x1dc>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d111      	bne.n	8004a80 <HAL_I2C_Init+0x168>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	1e58      	subs	r0, r3, #1
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6859      	ldr	r1, [r3, #4]
 8004a64:	460b      	mov	r3, r1
 8004a66:	005b      	lsls	r3, r3, #1
 8004a68:	440b      	add	r3, r1
 8004a6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a6e:	3301      	adds	r3, #1
 8004a70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	bf0c      	ite	eq
 8004a78:	2301      	moveq	r3, #1
 8004a7a:	2300      	movne	r3, #0
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	e012      	b.n	8004aa6 <HAL_I2C_Init+0x18e>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	1e58      	subs	r0, r3, #1
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6859      	ldr	r1, [r3, #4]
 8004a88:	460b      	mov	r3, r1
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	440b      	add	r3, r1
 8004a8e:	0099      	lsls	r1, r3, #2
 8004a90:	440b      	add	r3, r1
 8004a92:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a96:	3301      	adds	r3, #1
 8004a98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	bf0c      	ite	eq
 8004aa0:	2301      	moveq	r3, #1
 8004aa2:	2300      	movne	r3, #0
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d001      	beq.n	8004aae <HAL_I2C_Init+0x196>
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e022      	b.n	8004af4 <HAL_I2C_Init+0x1dc>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d10e      	bne.n	8004ad4 <HAL_I2C_Init+0x1bc>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	1e58      	subs	r0, r3, #1
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6859      	ldr	r1, [r3, #4]
 8004abe:	460b      	mov	r3, r1
 8004ac0:	005b      	lsls	r3, r3, #1
 8004ac2:	440b      	add	r3, r1
 8004ac4:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ac8:	3301      	adds	r3, #1
 8004aca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ace:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ad2:	e00f      	b.n	8004af4 <HAL_I2C_Init+0x1dc>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	1e58      	subs	r0, r3, #1
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6859      	ldr	r1, [r3, #4]
 8004adc:	460b      	mov	r3, r1
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	440b      	add	r3, r1
 8004ae2:	0099      	lsls	r1, r3, #2
 8004ae4:	440b      	add	r3, r1
 8004ae6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004aea:	3301      	adds	r3, #1
 8004aec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004af0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004af4:	6879      	ldr	r1, [r7, #4]
 8004af6:	6809      	ldr	r1, [r1, #0]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	69da      	ldr	r2, [r3, #28]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	430a      	orrs	r2, r1
 8004b16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004b22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	6911      	ldr	r1, [r2, #16]
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	68d2      	ldr	r2, [r2, #12]
 8004b2e:	4311      	orrs	r1, r2
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	6812      	ldr	r2, [r2, #0]
 8004b34:	430b      	orrs	r3, r1
 8004b36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	695a      	ldr	r2, [r3, #20]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	699b      	ldr	r3, [r3, #24]
 8004b4a:	431a      	orrs	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	430a      	orrs	r2, r1
 8004b52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f042 0201 	orr.w	r2, r2, #1
 8004b62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2220      	movs	r2, #32
 8004b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3710      	adds	r7, #16
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	000186a0 	.word	0x000186a0
 8004b90:	001e847f 	.word	0x001e847f
 8004b94:	003d08ff 	.word	0x003d08ff
 8004b98:	431bde83 	.word	0x431bde83
 8004b9c:	10624dd3 	.word	0x10624dd3

08004ba0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d101      	bne.n	8004bb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e0cc      	b.n	8004d4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bb4:	4b68      	ldr	r3, [pc, #416]	; (8004d58 <HAL_RCC_ClockConfig+0x1b8>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 030f 	and.w	r3, r3, #15
 8004bbc:	683a      	ldr	r2, [r7, #0]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d90c      	bls.n	8004bdc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bc2:	4b65      	ldr	r3, [pc, #404]	; (8004d58 <HAL_RCC_ClockConfig+0x1b8>)
 8004bc4:	683a      	ldr	r2, [r7, #0]
 8004bc6:	b2d2      	uxtb	r2, r2
 8004bc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bca:	4b63      	ldr	r3, [pc, #396]	; (8004d58 <HAL_RCC_ClockConfig+0x1b8>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 030f 	and.w	r3, r3, #15
 8004bd2:	683a      	ldr	r2, [r7, #0]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d001      	beq.n	8004bdc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e0b8      	b.n	8004d4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0302 	and.w	r3, r3, #2
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d020      	beq.n	8004c2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0304 	and.w	r3, r3, #4
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d005      	beq.n	8004c00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bf4:	4b59      	ldr	r3, [pc, #356]	; (8004d5c <HAL_RCC_ClockConfig+0x1bc>)
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	4a58      	ldr	r2, [pc, #352]	; (8004d5c <HAL_RCC_ClockConfig+0x1bc>)
 8004bfa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004bfe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0308 	and.w	r3, r3, #8
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d005      	beq.n	8004c18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c0c:	4b53      	ldr	r3, [pc, #332]	; (8004d5c <HAL_RCC_ClockConfig+0x1bc>)
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	4a52      	ldr	r2, [pc, #328]	; (8004d5c <HAL_RCC_ClockConfig+0x1bc>)
 8004c12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c18:	4b50      	ldr	r3, [pc, #320]	; (8004d5c <HAL_RCC_ClockConfig+0x1bc>)
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	494d      	ldr	r1, [pc, #308]	; (8004d5c <HAL_RCC_ClockConfig+0x1bc>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d044      	beq.n	8004cc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d107      	bne.n	8004c4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c3e:	4b47      	ldr	r3, [pc, #284]	; (8004d5c <HAL_RCC_ClockConfig+0x1bc>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d119      	bne.n	8004c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e07f      	b.n	8004d4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d003      	beq.n	8004c5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c5a:	2b03      	cmp	r3, #3
 8004c5c:	d107      	bne.n	8004c6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c5e:	4b3f      	ldr	r3, [pc, #252]	; (8004d5c <HAL_RCC_ClockConfig+0x1bc>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d109      	bne.n	8004c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e06f      	b.n	8004d4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c6e:	4b3b      	ldr	r3, [pc, #236]	; (8004d5c <HAL_RCC_ClockConfig+0x1bc>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0302 	and.w	r3, r3, #2
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d101      	bne.n	8004c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e067      	b.n	8004d4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c7e:	4b37      	ldr	r3, [pc, #220]	; (8004d5c <HAL_RCC_ClockConfig+0x1bc>)
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f023 0203 	bic.w	r2, r3, #3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	4934      	ldr	r1, [pc, #208]	; (8004d5c <HAL_RCC_ClockConfig+0x1bc>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c90:	f7fe ff32 	bl	8003af8 <HAL_GetTick>
 8004c94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c96:	e00a      	b.n	8004cae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c98:	f7fe ff2e 	bl	8003af8 <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d901      	bls.n	8004cae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e04f      	b.n	8004d4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cae:	4b2b      	ldr	r3, [pc, #172]	; (8004d5c <HAL_RCC_ClockConfig+0x1bc>)
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f003 020c 	and.w	r2, r3, #12
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d1eb      	bne.n	8004c98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cc0:	4b25      	ldr	r3, [pc, #148]	; (8004d58 <HAL_RCC_ClockConfig+0x1b8>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 030f 	and.w	r3, r3, #15
 8004cc8:	683a      	ldr	r2, [r7, #0]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d20c      	bcs.n	8004ce8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cce:	4b22      	ldr	r3, [pc, #136]	; (8004d58 <HAL_RCC_ClockConfig+0x1b8>)
 8004cd0:	683a      	ldr	r2, [r7, #0]
 8004cd2:	b2d2      	uxtb	r2, r2
 8004cd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cd6:	4b20      	ldr	r3, [pc, #128]	; (8004d58 <HAL_RCC_ClockConfig+0x1b8>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 030f 	and.w	r3, r3, #15
 8004cde:	683a      	ldr	r2, [r7, #0]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d001      	beq.n	8004ce8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e032      	b.n	8004d4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0304 	and.w	r3, r3, #4
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d008      	beq.n	8004d06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cf4:	4b19      	ldr	r3, [pc, #100]	; (8004d5c <HAL_RCC_ClockConfig+0x1bc>)
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	4916      	ldr	r1, [pc, #88]	; (8004d5c <HAL_RCC_ClockConfig+0x1bc>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0308 	and.w	r3, r3, #8
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d009      	beq.n	8004d26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d12:	4b12      	ldr	r3, [pc, #72]	; (8004d5c <HAL_RCC_ClockConfig+0x1bc>)
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	00db      	lsls	r3, r3, #3
 8004d20:	490e      	ldr	r1, [pc, #56]	; (8004d5c <HAL_RCC_ClockConfig+0x1bc>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d26:	f000 f887 	bl	8004e38 <HAL_RCC_GetSysClockFreq>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	4b0b      	ldr	r3, [pc, #44]	; (8004d5c <HAL_RCC_ClockConfig+0x1bc>)
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	091b      	lsrs	r3, r3, #4
 8004d32:	f003 030f 	and.w	r3, r3, #15
 8004d36:	490a      	ldr	r1, [pc, #40]	; (8004d60 <HAL_RCC_ClockConfig+0x1c0>)
 8004d38:	5ccb      	ldrb	r3, [r1, r3]
 8004d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d3e:	4a09      	ldr	r2, [pc, #36]	; (8004d64 <HAL_RCC_ClockConfig+0x1c4>)
 8004d40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d42:	4b09      	ldr	r3, [pc, #36]	; (8004d68 <HAL_RCC_ClockConfig+0x1c8>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7fe f9a6 	bl	8003098 <HAL_InitTick>

  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3710      	adds	r7, #16
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	40023c00 	.word	0x40023c00
 8004d5c:	40023800 	.word	0x40023800
 8004d60:	0800dbd4 	.word	0x0800dbd4
 8004d64:	20000028 	.word	0x20000028
 8004d68:	2000002c 	.word	0x2000002c

08004d6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d70:	4b03      	ldr	r3, [pc, #12]	; (8004d80 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d72:	681b      	ldr	r3, [r3, #0]
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	20000028 	.word	0x20000028

08004d84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004d88:	f7ff fff0 	bl	8004d6c <HAL_RCC_GetHCLKFreq>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	4b05      	ldr	r3, [pc, #20]	; (8004da4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	0a9b      	lsrs	r3, r3, #10
 8004d94:	f003 0307 	and.w	r3, r3, #7
 8004d98:	4903      	ldr	r1, [pc, #12]	; (8004da8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d9a:	5ccb      	ldrb	r3, [r1, r3]
 8004d9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	40023800 	.word	0x40023800
 8004da8:	0800dbe4 	.word	0x0800dbe4

08004dac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004db0:	f7ff ffdc 	bl	8004d6c <HAL_RCC_GetHCLKFreq>
 8004db4:	4602      	mov	r2, r0
 8004db6:	4b05      	ldr	r3, [pc, #20]	; (8004dcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	0b5b      	lsrs	r3, r3, #13
 8004dbc:	f003 0307 	and.w	r3, r3, #7
 8004dc0:	4903      	ldr	r1, [pc, #12]	; (8004dd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004dc2:	5ccb      	ldrb	r3, [r1, r3]
 8004dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	40023800 	.word	0x40023800
 8004dd0:	0800dbe4 	.word	0x0800dbe4

08004dd4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	220f      	movs	r2, #15
 8004de2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004de4:	4b12      	ldr	r3, [pc, #72]	; (8004e30 <HAL_RCC_GetClockConfig+0x5c>)
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	f003 0203 	and.w	r2, r3, #3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004df0:	4b0f      	ldr	r3, [pc, #60]	; (8004e30 <HAL_RCC_GetClockConfig+0x5c>)
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004dfc:	4b0c      	ldr	r3, [pc, #48]	; (8004e30 <HAL_RCC_GetClockConfig+0x5c>)
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004e08:	4b09      	ldr	r3, [pc, #36]	; (8004e30 <HAL_RCC_GetClockConfig+0x5c>)
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	08db      	lsrs	r3, r3, #3
 8004e0e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004e16:	4b07      	ldr	r3, [pc, #28]	; (8004e34 <HAL_RCC_GetClockConfig+0x60>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 020f 	and.w	r2, r3, #15
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	601a      	str	r2, [r3, #0]
}
 8004e22:	bf00      	nop
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	40023800 	.word	0x40023800
 8004e34:	40023c00 	.word	0x40023c00

08004e38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e3c:	b0a6      	sub	sp, #152	; 0x98
 8004e3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004e40:	2300      	movs	r3, #0
 8004e42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8004e46:	2300      	movs	r3, #0
 8004e48:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8004e52:	2300      	movs	r3, #0
 8004e54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e5e:	4bc8      	ldr	r3, [pc, #800]	; (8005180 <HAL_RCC_GetSysClockFreq+0x348>)
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	f003 030c 	and.w	r3, r3, #12
 8004e66:	2b0c      	cmp	r3, #12
 8004e68:	f200 817e 	bhi.w	8005168 <HAL_RCC_GetSysClockFreq+0x330>
 8004e6c:	a201      	add	r2, pc, #4	; (adr r2, 8004e74 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e72:	bf00      	nop
 8004e74:	08004ea9 	.word	0x08004ea9
 8004e78:	08005169 	.word	0x08005169
 8004e7c:	08005169 	.word	0x08005169
 8004e80:	08005169 	.word	0x08005169
 8004e84:	08004eb1 	.word	0x08004eb1
 8004e88:	08005169 	.word	0x08005169
 8004e8c:	08005169 	.word	0x08005169
 8004e90:	08005169 	.word	0x08005169
 8004e94:	08004eb9 	.word	0x08004eb9
 8004e98:	08005169 	.word	0x08005169
 8004e9c:	08005169 	.word	0x08005169
 8004ea0:	08005169 	.word	0x08005169
 8004ea4:	08005023 	.word	0x08005023
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ea8:	4bb6      	ldr	r3, [pc, #728]	; (8005184 <HAL_RCC_GetSysClockFreq+0x34c>)
 8004eaa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8004eae:	e15f      	b.n	8005170 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004eb0:	4bb5      	ldr	r3, [pc, #724]	; (8005188 <HAL_RCC_GetSysClockFreq+0x350>)
 8004eb2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004eb6:	e15b      	b.n	8005170 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004eb8:	4bb1      	ldr	r3, [pc, #708]	; (8005180 <HAL_RCC_GetSysClockFreq+0x348>)
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ec0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ec4:	4bae      	ldr	r3, [pc, #696]	; (8005180 <HAL_RCC_GetSysClockFreq+0x348>)
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d031      	beq.n	8004f34 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ed0:	4bab      	ldr	r3, [pc, #684]	; (8005180 <HAL_RCC_GetSysClockFreq+0x348>)
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	099b      	lsrs	r3, r3, #6
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	66bb      	str	r3, [r7, #104]	; 0x68
 8004eda:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004edc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ee2:	663b      	str	r3, [r7, #96]	; 0x60
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	667b      	str	r3, [r7, #100]	; 0x64
 8004ee8:	4ba7      	ldr	r3, [pc, #668]	; (8005188 <HAL_RCC_GetSysClockFreq+0x350>)
 8004eea:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004eee:	462a      	mov	r2, r5
 8004ef0:	fb03 f202 	mul.w	r2, r3, r2
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	4621      	mov	r1, r4
 8004ef8:	fb01 f303 	mul.w	r3, r1, r3
 8004efc:	4413      	add	r3, r2
 8004efe:	4aa2      	ldr	r2, [pc, #648]	; (8005188 <HAL_RCC_GetSysClockFreq+0x350>)
 8004f00:	4621      	mov	r1, r4
 8004f02:	fba1 1202 	umull	r1, r2, r1, r2
 8004f06:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004f08:	460a      	mov	r2, r1
 8004f0a:	67ba      	str	r2, [r7, #120]	; 0x78
 8004f0c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004f0e:	4413      	add	r3, r2
 8004f10:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004f12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f16:	2200      	movs	r2, #0
 8004f18:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f1a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004f1c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004f20:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8004f24:	f7fb f9cc 	bl	80002c0 <__aeabi_uldivmod>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004f32:	e064      	b.n	8004ffe <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f34:	4b92      	ldr	r3, [pc, #584]	; (8005180 <HAL_RCC_GetSysClockFreq+0x348>)
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	099b      	lsrs	r3, r3, #6
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	653b      	str	r3, [r7, #80]	; 0x50
 8004f3e:	657a      	str	r2, [r7, #84]	; 0x54
 8004f40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f46:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f48:	2300      	movs	r3, #0
 8004f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f4c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8004f50:	4622      	mov	r2, r4
 8004f52:	462b      	mov	r3, r5
 8004f54:	f04f 0000 	mov.w	r0, #0
 8004f58:	f04f 0100 	mov.w	r1, #0
 8004f5c:	0159      	lsls	r1, r3, #5
 8004f5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f62:	0150      	lsls	r0, r2, #5
 8004f64:	4602      	mov	r2, r0
 8004f66:	460b      	mov	r3, r1
 8004f68:	4621      	mov	r1, r4
 8004f6a:	1a51      	subs	r1, r2, r1
 8004f6c:	6139      	str	r1, [r7, #16]
 8004f6e:	4629      	mov	r1, r5
 8004f70:	eb63 0301 	sbc.w	r3, r3, r1
 8004f74:	617b      	str	r3, [r7, #20]
 8004f76:	f04f 0200 	mov.w	r2, #0
 8004f7a:	f04f 0300 	mov.w	r3, #0
 8004f7e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f82:	4659      	mov	r1, fp
 8004f84:	018b      	lsls	r3, r1, #6
 8004f86:	4651      	mov	r1, sl
 8004f88:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f8c:	4651      	mov	r1, sl
 8004f8e:	018a      	lsls	r2, r1, #6
 8004f90:	4651      	mov	r1, sl
 8004f92:	ebb2 0801 	subs.w	r8, r2, r1
 8004f96:	4659      	mov	r1, fp
 8004f98:	eb63 0901 	sbc.w	r9, r3, r1
 8004f9c:	f04f 0200 	mov.w	r2, #0
 8004fa0:	f04f 0300 	mov.w	r3, #0
 8004fa4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004fa8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004fac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004fb0:	4690      	mov	r8, r2
 8004fb2:	4699      	mov	r9, r3
 8004fb4:	4623      	mov	r3, r4
 8004fb6:	eb18 0303 	adds.w	r3, r8, r3
 8004fba:	60bb      	str	r3, [r7, #8]
 8004fbc:	462b      	mov	r3, r5
 8004fbe:	eb49 0303 	adc.w	r3, r9, r3
 8004fc2:	60fb      	str	r3, [r7, #12]
 8004fc4:	f04f 0200 	mov.w	r2, #0
 8004fc8:	f04f 0300 	mov.w	r3, #0
 8004fcc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004fd0:	4629      	mov	r1, r5
 8004fd2:	028b      	lsls	r3, r1, #10
 8004fd4:	4621      	mov	r1, r4
 8004fd6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004fda:	4621      	mov	r1, r4
 8004fdc:	028a      	lsls	r2, r1, #10
 8004fde:	4610      	mov	r0, r2
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	643b      	str	r3, [r7, #64]	; 0x40
 8004fea:	647a      	str	r2, [r7, #68]	; 0x44
 8004fec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004ff0:	f7fb f966 	bl	80002c0 <__aeabi_uldivmod>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ffe:	4b60      	ldr	r3, [pc, #384]	; (8005180 <HAL_RCC_GetSysClockFreq+0x348>)
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	0c1b      	lsrs	r3, r3, #16
 8005004:	f003 0303 	and.w	r3, r3, #3
 8005008:	3301      	adds	r3, #1
 800500a:	005b      	lsls	r3, r3, #1
 800500c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8005010:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005014:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005018:	fbb2 f3f3 	udiv	r3, r2, r3
 800501c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8005020:	e0a6      	b.n	8005170 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005022:	4b57      	ldr	r3, [pc, #348]	; (8005180 <HAL_RCC_GetSysClockFreq+0x348>)
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800502a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800502e:	4b54      	ldr	r3, [pc, #336]	; (8005180 <HAL_RCC_GetSysClockFreq+0x348>)
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d02a      	beq.n	8005090 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800503a:	4b51      	ldr	r3, [pc, #324]	; (8005180 <HAL_RCC_GetSysClockFreq+0x348>)
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	099b      	lsrs	r3, r3, #6
 8005040:	2200      	movs	r2, #0
 8005042:	63bb      	str	r3, [r7, #56]	; 0x38
 8005044:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005048:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800504c:	2100      	movs	r1, #0
 800504e:	4b4e      	ldr	r3, [pc, #312]	; (8005188 <HAL_RCC_GetSysClockFreq+0x350>)
 8005050:	fb03 f201 	mul.w	r2, r3, r1
 8005054:	2300      	movs	r3, #0
 8005056:	fb00 f303 	mul.w	r3, r0, r3
 800505a:	4413      	add	r3, r2
 800505c:	4a4a      	ldr	r2, [pc, #296]	; (8005188 <HAL_RCC_GetSysClockFreq+0x350>)
 800505e:	fba0 1202 	umull	r1, r2, r0, r2
 8005062:	677a      	str	r2, [r7, #116]	; 0x74
 8005064:	460a      	mov	r2, r1
 8005066:	673a      	str	r2, [r7, #112]	; 0x70
 8005068:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800506a:	4413      	add	r3, r2
 800506c:	677b      	str	r3, [r7, #116]	; 0x74
 800506e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005072:	2200      	movs	r2, #0
 8005074:	633b      	str	r3, [r7, #48]	; 0x30
 8005076:	637a      	str	r2, [r7, #52]	; 0x34
 8005078:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800507c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8005080:	f7fb f91e 	bl	80002c0 <__aeabi_uldivmod>
 8005084:	4602      	mov	r2, r0
 8005086:	460b      	mov	r3, r1
 8005088:	4613      	mov	r3, r2
 800508a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800508e:	e05b      	b.n	8005148 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005090:	4b3b      	ldr	r3, [pc, #236]	; (8005180 <HAL_RCC_GetSysClockFreq+0x348>)
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	099b      	lsrs	r3, r3, #6
 8005096:	2200      	movs	r2, #0
 8005098:	62bb      	str	r3, [r7, #40]	; 0x28
 800509a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800509c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800509e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050a2:	623b      	str	r3, [r7, #32]
 80050a4:	2300      	movs	r3, #0
 80050a6:	627b      	str	r3, [r7, #36]	; 0x24
 80050a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80050ac:	4642      	mov	r2, r8
 80050ae:	464b      	mov	r3, r9
 80050b0:	f04f 0000 	mov.w	r0, #0
 80050b4:	f04f 0100 	mov.w	r1, #0
 80050b8:	0159      	lsls	r1, r3, #5
 80050ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050be:	0150      	lsls	r0, r2, #5
 80050c0:	4602      	mov	r2, r0
 80050c2:	460b      	mov	r3, r1
 80050c4:	4641      	mov	r1, r8
 80050c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80050ca:	4649      	mov	r1, r9
 80050cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80050d0:	f04f 0200 	mov.w	r2, #0
 80050d4:	f04f 0300 	mov.w	r3, #0
 80050d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80050dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80050e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80050e4:	ebb2 040a 	subs.w	r4, r2, sl
 80050e8:	eb63 050b 	sbc.w	r5, r3, fp
 80050ec:	f04f 0200 	mov.w	r2, #0
 80050f0:	f04f 0300 	mov.w	r3, #0
 80050f4:	00eb      	lsls	r3, r5, #3
 80050f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050fa:	00e2      	lsls	r2, r4, #3
 80050fc:	4614      	mov	r4, r2
 80050fe:	461d      	mov	r5, r3
 8005100:	4643      	mov	r3, r8
 8005102:	18e3      	adds	r3, r4, r3
 8005104:	603b      	str	r3, [r7, #0]
 8005106:	464b      	mov	r3, r9
 8005108:	eb45 0303 	adc.w	r3, r5, r3
 800510c:	607b      	str	r3, [r7, #4]
 800510e:	f04f 0200 	mov.w	r2, #0
 8005112:	f04f 0300 	mov.w	r3, #0
 8005116:	e9d7 4500 	ldrd	r4, r5, [r7]
 800511a:	4629      	mov	r1, r5
 800511c:	028b      	lsls	r3, r1, #10
 800511e:	4621      	mov	r1, r4
 8005120:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005124:	4621      	mov	r1, r4
 8005126:	028a      	lsls	r2, r1, #10
 8005128:	4610      	mov	r0, r2
 800512a:	4619      	mov	r1, r3
 800512c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005130:	2200      	movs	r2, #0
 8005132:	61bb      	str	r3, [r7, #24]
 8005134:	61fa      	str	r2, [r7, #28]
 8005136:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800513a:	f7fb f8c1 	bl	80002c0 <__aeabi_uldivmod>
 800513e:	4602      	mov	r2, r0
 8005140:	460b      	mov	r3, r1
 8005142:	4613      	mov	r3, r2
 8005144:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005148:	4b0d      	ldr	r3, [pc, #52]	; (8005180 <HAL_RCC_GetSysClockFreq+0x348>)
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	0f1b      	lsrs	r3, r3, #28
 800514e:	f003 0307 	and.w	r3, r3, #7
 8005152:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8005156:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800515a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800515e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005162:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8005166:	e003      	b.n	8005170 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005168:	4b06      	ldr	r3, [pc, #24]	; (8005184 <HAL_RCC_GetSysClockFreq+0x34c>)
 800516a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800516e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005170:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8005174:	4618      	mov	r0, r3
 8005176:	3798      	adds	r7, #152	; 0x98
 8005178:	46bd      	mov	sp, r7
 800517a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800517e:	bf00      	nop
 8005180:	40023800 	.word	0x40023800
 8005184:	00f42400 	.word	0x00f42400
 8005188:	017d7840 	.word	0x017d7840

0800518c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b086      	sub	sp, #24
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d101      	bne.n	800519e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e28d      	b.n	80056ba <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	f000 8083 	beq.w	80052b2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80051ac:	4b94      	ldr	r3, [pc, #592]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	f003 030c 	and.w	r3, r3, #12
 80051b4:	2b04      	cmp	r3, #4
 80051b6:	d019      	beq.n	80051ec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80051b8:	4b91      	ldr	r3, [pc, #580]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80051c0:	2b08      	cmp	r3, #8
 80051c2:	d106      	bne.n	80051d2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80051c4:	4b8e      	ldr	r3, [pc, #568]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051d0:	d00c      	beq.n	80051ec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051d2:	4b8b      	ldr	r3, [pc, #556]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80051da:	2b0c      	cmp	r3, #12
 80051dc:	d112      	bne.n	8005204 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051de:	4b88      	ldr	r3, [pc, #544]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051ea:	d10b      	bne.n	8005204 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051ec:	4b84      	ldr	r3, [pc, #528]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d05b      	beq.n	80052b0 <HAL_RCC_OscConfig+0x124>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d157      	bne.n	80052b0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e25a      	b.n	80056ba <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800520c:	d106      	bne.n	800521c <HAL_RCC_OscConfig+0x90>
 800520e:	4b7c      	ldr	r3, [pc, #496]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a7b      	ldr	r2, [pc, #492]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 8005214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005218:	6013      	str	r3, [r2, #0]
 800521a:	e01d      	b.n	8005258 <HAL_RCC_OscConfig+0xcc>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005224:	d10c      	bne.n	8005240 <HAL_RCC_OscConfig+0xb4>
 8005226:	4b76      	ldr	r3, [pc, #472]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a75      	ldr	r2, [pc, #468]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 800522c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005230:	6013      	str	r3, [r2, #0]
 8005232:	4b73      	ldr	r3, [pc, #460]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a72      	ldr	r2, [pc, #456]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 8005238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800523c:	6013      	str	r3, [r2, #0]
 800523e:	e00b      	b.n	8005258 <HAL_RCC_OscConfig+0xcc>
 8005240:	4b6f      	ldr	r3, [pc, #444]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a6e      	ldr	r2, [pc, #440]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 8005246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800524a:	6013      	str	r3, [r2, #0]
 800524c:	4b6c      	ldr	r3, [pc, #432]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a6b      	ldr	r2, [pc, #428]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 8005252:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005256:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d013      	beq.n	8005288 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005260:	f7fe fc4a 	bl	8003af8 <HAL_GetTick>
 8005264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005266:	e008      	b.n	800527a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005268:	f7fe fc46 	bl	8003af8 <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	2b64      	cmp	r3, #100	; 0x64
 8005274:	d901      	bls.n	800527a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e21f      	b.n	80056ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800527a:	4b61      	ldr	r3, [pc, #388]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d0f0      	beq.n	8005268 <HAL_RCC_OscConfig+0xdc>
 8005286:	e014      	b.n	80052b2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005288:	f7fe fc36 	bl	8003af8 <HAL_GetTick>
 800528c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800528e:	e008      	b.n	80052a2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005290:	f7fe fc32 	bl	8003af8 <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	2b64      	cmp	r3, #100	; 0x64
 800529c:	d901      	bls.n	80052a2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e20b      	b.n	80056ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052a2:	4b57      	ldr	r3, [pc, #348]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1f0      	bne.n	8005290 <HAL_RCC_OscConfig+0x104>
 80052ae:	e000      	b.n	80052b2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0302 	and.w	r3, r3, #2
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d06f      	beq.n	800539e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80052be:	4b50      	ldr	r3, [pc, #320]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f003 030c 	and.w	r3, r3, #12
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d017      	beq.n	80052fa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80052ca:	4b4d      	ldr	r3, [pc, #308]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80052d2:	2b08      	cmp	r3, #8
 80052d4:	d105      	bne.n	80052e2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80052d6:	4b4a      	ldr	r3, [pc, #296]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00b      	beq.n	80052fa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052e2:	4b47      	ldr	r3, [pc, #284]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80052ea:	2b0c      	cmp	r3, #12
 80052ec:	d11c      	bne.n	8005328 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052ee:	4b44      	ldr	r3, [pc, #272]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d116      	bne.n	8005328 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052fa:	4b41      	ldr	r3, [pc, #260]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0302 	and.w	r3, r3, #2
 8005302:	2b00      	cmp	r3, #0
 8005304:	d005      	beq.n	8005312 <HAL_RCC_OscConfig+0x186>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	2b01      	cmp	r3, #1
 800530c:	d001      	beq.n	8005312 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e1d3      	b.n	80056ba <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005312:	4b3b      	ldr	r3, [pc, #236]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	00db      	lsls	r3, r3, #3
 8005320:	4937      	ldr	r1, [pc, #220]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 8005322:	4313      	orrs	r3, r2
 8005324:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005326:	e03a      	b.n	800539e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d020      	beq.n	8005372 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005330:	4b34      	ldr	r3, [pc, #208]	; (8005404 <HAL_RCC_OscConfig+0x278>)
 8005332:	2201      	movs	r2, #1
 8005334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005336:	f7fe fbdf 	bl	8003af8 <HAL_GetTick>
 800533a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800533c:	e008      	b.n	8005350 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800533e:	f7fe fbdb 	bl	8003af8 <HAL_GetTick>
 8005342:	4602      	mov	r2, r0
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	2b02      	cmp	r3, #2
 800534a:	d901      	bls.n	8005350 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	e1b4      	b.n	80056ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005350:	4b2b      	ldr	r3, [pc, #172]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0302 	and.w	r3, r3, #2
 8005358:	2b00      	cmp	r3, #0
 800535a:	d0f0      	beq.n	800533e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800535c:	4b28      	ldr	r3, [pc, #160]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	00db      	lsls	r3, r3, #3
 800536a:	4925      	ldr	r1, [pc, #148]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 800536c:	4313      	orrs	r3, r2
 800536e:	600b      	str	r3, [r1, #0]
 8005370:	e015      	b.n	800539e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005372:	4b24      	ldr	r3, [pc, #144]	; (8005404 <HAL_RCC_OscConfig+0x278>)
 8005374:	2200      	movs	r2, #0
 8005376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005378:	f7fe fbbe 	bl	8003af8 <HAL_GetTick>
 800537c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800537e:	e008      	b.n	8005392 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005380:	f7fe fbba 	bl	8003af8 <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	2b02      	cmp	r3, #2
 800538c:	d901      	bls.n	8005392 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e193      	b.n	80056ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005392:	4b1b      	ldr	r3, [pc, #108]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0302 	and.w	r3, r3, #2
 800539a:	2b00      	cmp	r3, #0
 800539c:	d1f0      	bne.n	8005380 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0308 	and.w	r3, r3, #8
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d036      	beq.n	8005418 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d016      	beq.n	80053e0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053b2:	4b15      	ldr	r3, [pc, #84]	; (8005408 <HAL_RCC_OscConfig+0x27c>)
 80053b4:	2201      	movs	r2, #1
 80053b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053b8:	f7fe fb9e 	bl	8003af8 <HAL_GetTick>
 80053bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053be:	e008      	b.n	80053d2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053c0:	f7fe fb9a 	bl	8003af8 <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d901      	bls.n	80053d2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e173      	b.n	80056ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053d2:	4b0b      	ldr	r3, [pc, #44]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 80053d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053d6:	f003 0302 	and.w	r3, r3, #2
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d0f0      	beq.n	80053c0 <HAL_RCC_OscConfig+0x234>
 80053de:	e01b      	b.n	8005418 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053e0:	4b09      	ldr	r3, [pc, #36]	; (8005408 <HAL_RCC_OscConfig+0x27c>)
 80053e2:	2200      	movs	r2, #0
 80053e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053e6:	f7fe fb87 	bl	8003af8 <HAL_GetTick>
 80053ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053ec:	e00e      	b.n	800540c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053ee:	f7fe fb83 	bl	8003af8 <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d907      	bls.n	800540c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e15c      	b.n	80056ba <HAL_RCC_OscConfig+0x52e>
 8005400:	40023800 	.word	0x40023800
 8005404:	42470000 	.word	0x42470000
 8005408:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800540c:	4b8a      	ldr	r3, [pc, #552]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 800540e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005410:	f003 0302 	and.w	r3, r3, #2
 8005414:	2b00      	cmp	r3, #0
 8005416:	d1ea      	bne.n	80053ee <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0304 	and.w	r3, r3, #4
 8005420:	2b00      	cmp	r3, #0
 8005422:	f000 8097 	beq.w	8005554 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005426:	2300      	movs	r3, #0
 8005428:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800542a:	4b83      	ldr	r3, [pc, #524]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 800542c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005432:	2b00      	cmp	r3, #0
 8005434:	d10f      	bne.n	8005456 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005436:	2300      	movs	r3, #0
 8005438:	60bb      	str	r3, [r7, #8]
 800543a:	4b7f      	ldr	r3, [pc, #508]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 800543c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543e:	4a7e      	ldr	r2, [pc, #504]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 8005440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005444:	6413      	str	r3, [r2, #64]	; 0x40
 8005446:	4b7c      	ldr	r3, [pc, #496]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 8005448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800544e:	60bb      	str	r3, [r7, #8]
 8005450:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005452:	2301      	movs	r3, #1
 8005454:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005456:	4b79      	ldr	r3, [pc, #484]	; (800563c <HAL_RCC_OscConfig+0x4b0>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800545e:	2b00      	cmp	r3, #0
 8005460:	d118      	bne.n	8005494 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005462:	4b76      	ldr	r3, [pc, #472]	; (800563c <HAL_RCC_OscConfig+0x4b0>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a75      	ldr	r2, [pc, #468]	; (800563c <HAL_RCC_OscConfig+0x4b0>)
 8005468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800546c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800546e:	f7fe fb43 	bl	8003af8 <HAL_GetTick>
 8005472:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005474:	e008      	b.n	8005488 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005476:	f7fe fb3f 	bl	8003af8 <HAL_GetTick>
 800547a:	4602      	mov	r2, r0
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	2b02      	cmp	r3, #2
 8005482:	d901      	bls.n	8005488 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005484:	2303      	movs	r3, #3
 8005486:	e118      	b.n	80056ba <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005488:	4b6c      	ldr	r3, [pc, #432]	; (800563c <HAL_RCC_OscConfig+0x4b0>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005490:	2b00      	cmp	r3, #0
 8005492:	d0f0      	beq.n	8005476 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	2b01      	cmp	r3, #1
 800549a:	d106      	bne.n	80054aa <HAL_RCC_OscConfig+0x31e>
 800549c:	4b66      	ldr	r3, [pc, #408]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 800549e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054a0:	4a65      	ldr	r2, [pc, #404]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 80054a2:	f043 0301 	orr.w	r3, r3, #1
 80054a6:	6713      	str	r3, [r2, #112]	; 0x70
 80054a8:	e01c      	b.n	80054e4 <HAL_RCC_OscConfig+0x358>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	2b05      	cmp	r3, #5
 80054b0:	d10c      	bne.n	80054cc <HAL_RCC_OscConfig+0x340>
 80054b2:	4b61      	ldr	r3, [pc, #388]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 80054b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054b6:	4a60      	ldr	r2, [pc, #384]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 80054b8:	f043 0304 	orr.w	r3, r3, #4
 80054bc:	6713      	str	r3, [r2, #112]	; 0x70
 80054be:	4b5e      	ldr	r3, [pc, #376]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 80054c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054c2:	4a5d      	ldr	r2, [pc, #372]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 80054c4:	f043 0301 	orr.w	r3, r3, #1
 80054c8:	6713      	str	r3, [r2, #112]	; 0x70
 80054ca:	e00b      	b.n	80054e4 <HAL_RCC_OscConfig+0x358>
 80054cc:	4b5a      	ldr	r3, [pc, #360]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 80054ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054d0:	4a59      	ldr	r2, [pc, #356]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 80054d2:	f023 0301 	bic.w	r3, r3, #1
 80054d6:	6713      	str	r3, [r2, #112]	; 0x70
 80054d8:	4b57      	ldr	r3, [pc, #348]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 80054da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054dc:	4a56      	ldr	r2, [pc, #344]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 80054de:	f023 0304 	bic.w	r3, r3, #4
 80054e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d015      	beq.n	8005518 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054ec:	f7fe fb04 	bl	8003af8 <HAL_GetTick>
 80054f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054f2:	e00a      	b.n	800550a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054f4:	f7fe fb00 	bl	8003af8 <HAL_GetTick>
 80054f8:	4602      	mov	r2, r0
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005502:	4293      	cmp	r3, r2
 8005504:	d901      	bls.n	800550a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	e0d7      	b.n	80056ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800550a:	4b4b      	ldr	r3, [pc, #300]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 800550c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800550e:	f003 0302 	and.w	r3, r3, #2
 8005512:	2b00      	cmp	r3, #0
 8005514:	d0ee      	beq.n	80054f4 <HAL_RCC_OscConfig+0x368>
 8005516:	e014      	b.n	8005542 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005518:	f7fe faee 	bl	8003af8 <HAL_GetTick>
 800551c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800551e:	e00a      	b.n	8005536 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005520:	f7fe faea 	bl	8003af8 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	f241 3288 	movw	r2, #5000	; 0x1388
 800552e:	4293      	cmp	r3, r2
 8005530:	d901      	bls.n	8005536 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e0c1      	b.n	80056ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005536:	4b40      	ldr	r3, [pc, #256]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 8005538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800553a:	f003 0302 	and.w	r3, r3, #2
 800553e:	2b00      	cmp	r3, #0
 8005540:	d1ee      	bne.n	8005520 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005542:	7dfb      	ldrb	r3, [r7, #23]
 8005544:	2b01      	cmp	r3, #1
 8005546:	d105      	bne.n	8005554 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005548:	4b3b      	ldr	r3, [pc, #236]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 800554a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554c:	4a3a      	ldr	r2, [pc, #232]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 800554e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005552:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	699b      	ldr	r3, [r3, #24]
 8005558:	2b00      	cmp	r3, #0
 800555a:	f000 80ad 	beq.w	80056b8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800555e:	4b36      	ldr	r3, [pc, #216]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f003 030c 	and.w	r3, r3, #12
 8005566:	2b08      	cmp	r3, #8
 8005568:	d060      	beq.n	800562c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	2b02      	cmp	r3, #2
 8005570:	d145      	bne.n	80055fe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005572:	4b33      	ldr	r3, [pc, #204]	; (8005640 <HAL_RCC_OscConfig+0x4b4>)
 8005574:	2200      	movs	r2, #0
 8005576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005578:	f7fe fabe 	bl	8003af8 <HAL_GetTick>
 800557c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800557e:	e008      	b.n	8005592 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005580:	f7fe faba 	bl	8003af8 <HAL_GetTick>
 8005584:	4602      	mov	r2, r0
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	2b02      	cmp	r3, #2
 800558c:	d901      	bls.n	8005592 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e093      	b.n	80056ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005592:	4b29      	ldr	r3, [pc, #164]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1f0      	bne.n	8005580 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	69da      	ldr	r2, [r3, #28]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	431a      	orrs	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ac:	019b      	lsls	r3, r3, #6
 80055ae:	431a      	orrs	r2, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b4:	085b      	lsrs	r3, r3, #1
 80055b6:	3b01      	subs	r3, #1
 80055b8:	041b      	lsls	r3, r3, #16
 80055ba:	431a      	orrs	r2, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c0:	061b      	lsls	r3, r3, #24
 80055c2:	431a      	orrs	r2, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c8:	071b      	lsls	r3, r3, #28
 80055ca:	491b      	ldr	r1, [pc, #108]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 80055cc:	4313      	orrs	r3, r2
 80055ce:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055d0:	4b1b      	ldr	r3, [pc, #108]	; (8005640 <HAL_RCC_OscConfig+0x4b4>)
 80055d2:	2201      	movs	r2, #1
 80055d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055d6:	f7fe fa8f 	bl	8003af8 <HAL_GetTick>
 80055da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055dc:	e008      	b.n	80055f0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055de:	f7fe fa8b 	bl	8003af8 <HAL_GetTick>
 80055e2:	4602      	mov	r2, r0
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	1ad3      	subs	r3, r2, r3
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	d901      	bls.n	80055f0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e064      	b.n	80056ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055f0:	4b11      	ldr	r3, [pc, #68]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d0f0      	beq.n	80055de <HAL_RCC_OscConfig+0x452>
 80055fc:	e05c      	b.n	80056b8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055fe:	4b10      	ldr	r3, [pc, #64]	; (8005640 <HAL_RCC_OscConfig+0x4b4>)
 8005600:	2200      	movs	r2, #0
 8005602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005604:	f7fe fa78 	bl	8003af8 <HAL_GetTick>
 8005608:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800560a:	e008      	b.n	800561e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800560c:	f7fe fa74 	bl	8003af8 <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	2b02      	cmp	r3, #2
 8005618:	d901      	bls.n	800561e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	e04d      	b.n	80056ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800561e:	4b06      	ldr	r3, [pc, #24]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1f0      	bne.n	800560c <HAL_RCC_OscConfig+0x480>
 800562a:	e045      	b.n	80056b8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	699b      	ldr	r3, [r3, #24]
 8005630:	2b01      	cmp	r3, #1
 8005632:	d107      	bne.n	8005644 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e040      	b.n	80056ba <HAL_RCC_OscConfig+0x52e>
 8005638:	40023800 	.word	0x40023800
 800563c:	40007000 	.word	0x40007000
 8005640:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005644:	4b1f      	ldr	r3, [pc, #124]	; (80056c4 <HAL_RCC_OscConfig+0x538>)
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	2b01      	cmp	r3, #1
 8005650:	d030      	beq.n	80056b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800565c:	429a      	cmp	r2, r3
 800565e:	d129      	bne.n	80056b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800566a:	429a      	cmp	r2, r3
 800566c:	d122      	bne.n	80056b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005674:	4013      	ands	r3, r2
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800567a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800567c:	4293      	cmp	r3, r2
 800567e:	d119      	bne.n	80056b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800568a:	085b      	lsrs	r3, r3, #1
 800568c:	3b01      	subs	r3, #1
 800568e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005690:	429a      	cmp	r2, r3
 8005692:	d10f      	bne.n	80056b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800569e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d107      	bne.n	80056b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ae:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d001      	beq.n	80056b8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e000      	b.n	80056ba <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3718      	adds	r7, #24
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	40023800 	.word	0x40023800

080056c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d101      	bne.n	80056da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e07b      	b.n	80057d2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d108      	bne.n	80056f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056ea:	d009      	beq.n	8005700 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	61da      	str	r2, [r3, #28]
 80056f2:	e005      	b.n	8005700 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800570c:	b2db      	uxtb	r3, r3
 800570e:	2b00      	cmp	r3, #0
 8005710:	d106      	bne.n	8005720 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f7fd fb1e 	bl	8002d5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2202      	movs	r2, #2
 8005724:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005736:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005748:	431a      	orrs	r2, r3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005752:	431a      	orrs	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	691b      	ldr	r3, [r3, #16]
 8005758:	f003 0302 	and.w	r3, r3, #2
 800575c:	431a      	orrs	r2, r3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	695b      	ldr	r3, [r3, #20]
 8005762:	f003 0301 	and.w	r3, r3, #1
 8005766:	431a      	orrs	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	699b      	ldr	r3, [r3, #24]
 800576c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005770:	431a      	orrs	r2, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	69db      	ldr	r3, [r3, #28]
 8005776:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800577a:	431a      	orrs	r2, r3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a1b      	ldr	r3, [r3, #32]
 8005780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005784:	ea42 0103 	orr.w	r1, r2, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800578c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	430a      	orrs	r2, r1
 8005796:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	699b      	ldr	r3, [r3, #24]
 800579c:	0c1b      	lsrs	r3, r3, #16
 800579e:	f003 0104 	and.w	r1, r3, #4
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a6:	f003 0210 	and.w	r2, r3, #16
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	430a      	orrs	r2, r1
 80057b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	69da      	ldr	r2, [r3, #28]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3708      	adds	r7, #8
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}

080057da <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057da:	b580      	push	{r7, lr}
 80057dc:	b088      	sub	sp, #32
 80057de:	af00      	add	r7, sp, #0
 80057e0:	60f8      	str	r0, [r7, #12]
 80057e2:	60b9      	str	r1, [r7, #8]
 80057e4:	603b      	str	r3, [r7, #0]
 80057e6:	4613      	mov	r3, r2
 80057e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80057ea:	2300      	movs	r3, #0
 80057ec:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d101      	bne.n	80057fc <HAL_SPI_Transmit+0x22>
 80057f8:	2302      	movs	r3, #2
 80057fa:	e126      	b.n	8005a4a <HAL_SPI_Transmit+0x270>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005804:	f7fe f978 	bl	8003af8 <HAL_GetTick>
 8005808:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800580a:	88fb      	ldrh	r3, [r7, #6]
 800580c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005814:	b2db      	uxtb	r3, r3
 8005816:	2b01      	cmp	r3, #1
 8005818:	d002      	beq.n	8005820 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800581a:	2302      	movs	r3, #2
 800581c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800581e:	e10b      	b.n	8005a38 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d002      	beq.n	800582c <HAL_SPI_Transmit+0x52>
 8005826:	88fb      	ldrh	r3, [r7, #6]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d102      	bne.n	8005832 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005830:	e102      	b.n	8005a38 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2203      	movs	r2, #3
 8005836:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2200      	movs	r2, #0
 800583e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	68ba      	ldr	r2, [r7, #8]
 8005844:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	88fa      	ldrh	r2, [r7, #6]
 800584a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	88fa      	ldrh	r2, [r7, #6]
 8005850:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2200      	movs	r2, #0
 800585c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2200      	movs	r2, #0
 8005868:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2200      	movs	r2, #0
 800586e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005878:	d10f      	bne.n	800589a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005888:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005898:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a4:	2b40      	cmp	r3, #64	; 0x40
 80058a6:	d007      	beq.n	80058b8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058c0:	d14b      	bne.n	800595a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d002      	beq.n	80058d0 <HAL_SPI_Transmit+0xf6>
 80058ca:	8afb      	ldrh	r3, [r7, #22]
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d13e      	bne.n	800594e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d4:	881a      	ldrh	r2, [r3, #0]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e0:	1c9a      	adds	r2, r3, #2
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	3b01      	subs	r3, #1
 80058ee:	b29a      	uxth	r2, r3
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80058f4:	e02b      	b.n	800594e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	f003 0302 	and.w	r3, r3, #2
 8005900:	2b02      	cmp	r3, #2
 8005902:	d112      	bne.n	800592a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005908:	881a      	ldrh	r2, [r3, #0]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005914:	1c9a      	adds	r2, r3, #2
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800591e:	b29b      	uxth	r3, r3
 8005920:	3b01      	subs	r3, #1
 8005922:	b29a      	uxth	r2, r3
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	86da      	strh	r2, [r3, #54]	; 0x36
 8005928:	e011      	b.n	800594e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800592a:	f7fe f8e5 	bl	8003af8 <HAL_GetTick>
 800592e:	4602      	mov	r2, r0
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	683a      	ldr	r2, [r7, #0]
 8005936:	429a      	cmp	r2, r3
 8005938:	d803      	bhi.n	8005942 <HAL_SPI_Transmit+0x168>
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005940:	d102      	bne.n	8005948 <HAL_SPI_Transmit+0x16e>
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d102      	bne.n	800594e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800594c:	e074      	b.n	8005a38 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005952:	b29b      	uxth	r3, r3
 8005954:	2b00      	cmp	r3, #0
 8005956:	d1ce      	bne.n	80058f6 <HAL_SPI_Transmit+0x11c>
 8005958:	e04c      	b.n	80059f4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d002      	beq.n	8005968 <HAL_SPI_Transmit+0x18e>
 8005962:	8afb      	ldrh	r3, [r7, #22]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d140      	bne.n	80059ea <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	330c      	adds	r3, #12
 8005972:	7812      	ldrb	r2, [r2, #0]
 8005974:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800597a:	1c5a      	adds	r2, r3, #1
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005984:	b29b      	uxth	r3, r3
 8005986:	3b01      	subs	r3, #1
 8005988:	b29a      	uxth	r2, r3
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800598e:	e02c      	b.n	80059ea <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f003 0302 	and.w	r3, r3, #2
 800599a:	2b02      	cmp	r3, #2
 800599c:	d113      	bne.n	80059c6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	330c      	adds	r3, #12
 80059a8:	7812      	ldrb	r2, [r2, #0]
 80059aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b0:	1c5a      	adds	r2, r3, #1
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	3b01      	subs	r3, #1
 80059be:	b29a      	uxth	r2, r3
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	86da      	strh	r2, [r3, #54]	; 0x36
 80059c4:	e011      	b.n	80059ea <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059c6:	f7fe f897 	bl	8003af8 <HAL_GetTick>
 80059ca:	4602      	mov	r2, r0
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	683a      	ldr	r2, [r7, #0]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d803      	bhi.n	80059de <HAL_SPI_Transmit+0x204>
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059dc:	d102      	bne.n	80059e4 <HAL_SPI_Transmit+0x20a>
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d102      	bne.n	80059ea <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80059e8:	e026      	b.n	8005a38 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d1cd      	bne.n	8005990 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059f4:	69ba      	ldr	r2, [r7, #24]
 80059f6:	6839      	ldr	r1, [r7, #0]
 80059f8:	68f8      	ldr	r0, [r7, #12]
 80059fa:	f000 fa55 	bl	8005ea8 <SPI_EndRxTxTransaction>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d002      	beq.n	8005a0a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2220      	movs	r2, #32
 8005a08:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d10a      	bne.n	8005a28 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a12:	2300      	movs	r3, #0
 8005a14:	613b      	str	r3, [r7, #16]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	613b      	str	r3, [r7, #16]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	613b      	str	r3, [r7, #16]
 8005a26:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d002      	beq.n	8005a36 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	77fb      	strb	r3, [r7, #31]
 8005a34:	e000      	b.n	8005a38 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005a36:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005a48:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3720      	adds	r7, #32
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b08c      	sub	sp, #48	; 0x30
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	60f8      	str	r0, [r7, #12]
 8005a5a:	60b9      	str	r1, [r7, #8]
 8005a5c:	607a      	str	r2, [r7, #4]
 8005a5e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005a60:	2301      	movs	r3, #1
 8005a62:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005a64:	2300      	movs	r3, #0
 8005a66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d101      	bne.n	8005a78 <HAL_SPI_TransmitReceive+0x26>
 8005a74:	2302      	movs	r3, #2
 8005a76:	e18a      	b.n	8005d8e <HAL_SPI_TransmitReceive+0x33c>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a80:	f7fe f83a 	bl	8003af8 <HAL_GetTick>
 8005a84:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005a96:	887b      	ldrh	r3, [r7, #2]
 8005a98:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005a9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d00f      	beq.n	8005ac2 <HAL_SPI_TransmitReceive+0x70>
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005aa8:	d107      	bne.n	8005aba <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d103      	bne.n	8005aba <HAL_SPI_TransmitReceive+0x68>
 8005ab2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ab6:	2b04      	cmp	r3, #4
 8005ab8:	d003      	beq.n	8005ac2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005aba:	2302      	movs	r3, #2
 8005abc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005ac0:	e15b      	b.n	8005d7a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d005      	beq.n	8005ad4 <HAL_SPI_TransmitReceive+0x82>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d002      	beq.n	8005ad4 <HAL_SPI_TransmitReceive+0x82>
 8005ace:	887b      	ldrh	r3, [r7, #2]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d103      	bne.n	8005adc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005ada:	e14e      	b.n	8005d7a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	2b04      	cmp	r3, #4
 8005ae6:	d003      	beq.n	8005af0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2205      	movs	r2, #5
 8005aec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2200      	movs	r2, #0
 8005af4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	887a      	ldrh	r2, [r7, #2]
 8005b00:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	887a      	ldrh	r2, [r7, #2]
 8005b06:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	68ba      	ldr	r2, [r7, #8]
 8005b0c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	887a      	ldrh	r2, [r7, #2]
 8005b12:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	887a      	ldrh	r2, [r7, #2]
 8005b18:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2200      	movs	r2, #0
 8005b24:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b30:	2b40      	cmp	r3, #64	; 0x40
 8005b32:	d007      	beq.n	8005b44 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b42:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b4c:	d178      	bne.n	8005c40 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d002      	beq.n	8005b5c <HAL_SPI_TransmitReceive+0x10a>
 8005b56:	8b7b      	ldrh	r3, [r7, #26]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d166      	bne.n	8005c2a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b60:	881a      	ldrh	r2, [r3, #0]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b6c:	1c9a      	adds	r2, r3, #2
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	3b01      	subs	r3, #1
 8005b7a:	b29a      	uxth	r2, r3
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b80:	e053      	b.n	8005c2a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	f003 0302 	and.w	r3, r3, #2
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d11b      	bne.n	8005bc8 <HAL_SPI_TransmitReceive+0x176>
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d016      	beq.n	8005bc8 <HAL_SPI_TransmitReceive+0x176>
 8005b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d113      	bne.n	8005bc8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba4:	881a      	ldrh	r2, [r3, #0]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb0:	1c9a      	adds	r2, r3, #2
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	3b01      	subs	r3, #1
 8005bbe:	b29a      	uxth	r2, r3
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	f003 0301 	and.w	r3, r3, #1
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d119      	bne.n	8005c0a <HAL_SPI_TransmitReceive+0x1b8>
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d014      	beq.n	8005c0a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68da      	ldr	r2, [r3, #12]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bea:	b292      	uxth	r2, r2
 8005bec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf2:	1c9a      	adds	r2, r3, #2
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	3b01      	subs	r3, #1
 8005c00:	b29a      	uxth	r2, r3
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c06:	2301      	movs	r3, #1
 8005c08:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005c0a:	f7fd ff75 	bl	8003af8 <HAL_GetTick>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d807      	bhi.n	8005c2a <HAL_SPI_TransmitReceive+0x1d8>
 8005c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c20:	d003      	beq.n	8005c2a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005c28:	e0a7      	b.n	8005d7a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d1a6      	bne.n	8005b82 <HAL_SPI_TransmitReceive+0x130>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d1a1      	bne.n	8005b82 <HAL_SPI_TransmitReceive+0x130>
 8005c3e:	e07c      	b.n	8005d3a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d002      	beq.n	8005c4e <HAL_SPI_TransmitReceive+0x1fc>
 8005c48:	8b7b      	ldrh	r3, [r7, #26]
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d16b      	bne.n	8005d26 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	330c      	adds	r3, #12
 8005c58:	7812      	ldrb	r2, [r2, #0]
 8005c5a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c60:	1c5a      	adds	r2, r3, #1
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	3b01      	subs	r3, #1
 8005c6e:	b29a      	uxth	r2, r3
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c74:	e057      	b.n	8005d26 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	f003 0302 	and.w	r3, r3, #2
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d11c      	bne.n	8005cbe <HAL_SPI_TransmitReceive+0x26c>
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d017      	beq.n	8005cbe <HAL_SPI_TransmitReceive+0x26c>
 8005c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d114      	bne.n	8005cbe <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	330c      	adds	r3, #12
 8005c9e:	7812      	ldrb	r2, [r2, #0]
 8005ca0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca6:	1c5a      	adds	r2, r3, #1
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	b29a      	uxth	r2, r3
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	f003 0301 	and.w	r3, r3, #1
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d119      	bne.n	8005d00 <HAL_SPI_TransmitReceive+0x2ae>
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d014      	beq.n	8005d00 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68da      	ldr	r2, [r3, #12]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce0:	b2d2      	uxtb	r2, r2
 8005ce2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce8:	1c5a      	adds	r2, r3, #1
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005d00:	f7fd fefa 	bl	8003af8 <HAL_GetTick>
 8005d04:	4602      	mov	r2, r0
 8005d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d803      	bhi.n	8005d18 <HAL_SPI_TransmitReceive+0x2c6>
 8005d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d16:	d102      	bne.n	8005d1e <HAL_SPI_TransmitReceive+0x2cc>
 8005d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d103      	bne.n	8005d26 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005d24:	e029      	b.n	8005d7a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d1a2      	bne.n	8005c76 <HAL_SPI_TransmitReceive+0x224>
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d19d      	bne.n	8005c76 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d3c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d3e:	68f8      	ldr	r0, [r7, #12]
 8005d40:	f000 f8b2 	bl	8005ea8 <SPI_EndRxTxTransaction>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d006      	beq.n	8005d58 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2220      	movs	r2, #32
 8005d54:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005d56:	e010      	b.n	8005d7a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d10b      	bne.n	8005d78 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d60:	2300      	movs	r3, #0
 8005d62:	617b      	str	r3, [r7, #20]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	617b      	str	r3, [r7, #20]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	617b      	str	r3, [r7, #20]
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	e000      	b.n	8005d7a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005d78:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005d8a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3730      	adds	r7, #48	; 0x30
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
	...

08005d98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b088      	sub	sp, #32
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	603b      	str	r3, [r7, #0]
 8005da4:	4613      	mov	r3, r2
 8005da6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005da8:	f7fd fea6 	bl	8003af8 <HAL_GetTick>
 8005dac:	4602      	mov	r2, r0
 8005dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db0:	1a9b      	subs	r3, r3, r2
 8005db2:	683a      	ldr	r2, [r7, #0]
 8005db4:	4413      	add	r3, r2
 8005db6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005db8:	f7fd fe9e 	bl	8003af8 <HAL_GetTick>
 8005dbc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005dbe:	4b39      	ldr	r3, [pc, #228]	; (8005ea4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	015b      	lsls	r3, r3, #5
 8005dc4:	0d1b      	lsrs	r3, r3, #20
 8005dc6:	69fa      	ldr	r2, [r7, #28]
 8005dc8:	fb02 f303 	mul.w	r3, r2, r3
 8005dcc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005dce:	e054      	b.n	8005e7a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd6:	d050      	beq.n	8005e7a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005dd8:	f7fd fe8e 	bl	8003af8 <HAL_GetTick>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	69fa      	ldr	r2, [r7, #28]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d902      	bls.n	8005dee <SPI_WaitFlagStateUntilTimeout+0x56>
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d13d      	bne.n	8005e6a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	685a      	ldr	r2, [r3, #4]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005dfc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e06:	d111      	bne.n	8005e2c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e10:	d004      	beq.n	8005e1c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e1a:	d107      	bne.n	8005e2c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e34:	d10f      	bne.n	8005e56 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e44:	601a      	str	r2, [r3, #0]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005e66:	2303      	movs	r3, #3
 8005e68:	e017      	b.n	8005e9a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d101      	bne.n	8005e74 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005e70:	2300      	movs	r3, #0
 8005e72:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	3b01      	subs	r3, #1
 8005e78:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	689a      	ldr	r2, [r3, #8]
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	4013      	ands	r3, r2
 8005e84:	68ba      	ldr	r2, [r7, #8]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	bf0c      	ite	eq
 8005e8a:	2301      	moveq	r3, #1
 8005e8c:	2300      	movne	r3, #0
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	461a      	mov	r2, r3
 8005e92:	79fb      	ldrb	r3, [r7, #7]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d19b      	bne.n	8005dd0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3720      	adds	r7, #32
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	20000028 	.word	0x20000028

08005ea8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b088      	sub	sp, #32
 8005eac:	af02      	add	r7, sp, #8
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005eb4:	4b1b      	ldr	r3, [pc, #108]	; (8005f24 <SPI_EndRxTxTransaction+0x7c>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a1b      	ldr	r2, [pc, #108]	; (8005f28 <SPI_EndRxTxTransaction+0x80>)
 8005eba:	fba2 2303 	umull	r2, r3, r2, r3
 8005ebe:	0d5b      	lsrs	r3, r3, #21
 8005ec0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005ec4:	fb02 f303 	mul.w	r3, r2, r3
 8005ec8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ed2:	d112      	bne.n	8005efa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	9300      	str	r3, [sp, #0]
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	2200      	movs	r2, #0
 8005edc:	2180      	movs	r1, #128	; 0x80
 8005ede:	68f8      	ldr	r0, [r7, #12]
 8005ee0:	f7ff ff5a 	bl	8005d98 <SPI_WaitFlagStateUntilTimeout>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d016      	beq.n	8005f18 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eee:	f043 0220 	orr.w	r2, r3, #32
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e00f      	b.n	8005f1a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d00a      	beq.n	8005f16 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	3b01      	subs	r3, #1
 8005f04:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f10:	2b80      	cmp	r3, #128	; 0x80
 8005f12:	d0f2      	beq.n	8005efa <SPI_EndRxTxTransaction+0x52>
 8005f14:	e000      	b.n	8005f18 <SPI_EndRxTxTransaction+0x70>
        break;
 8005f16:	bf00      	nop
  }

  return HAL_OK;
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3718      	adds	r7, #24
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	20000028 	.word	0x20000028
 8005f28:	165e9f81 	.word	0x165e9f81

08005f2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b082      	sub	sp, #8
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d101      	bne.n	8005f3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e041      	b.n	8005fc2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d106      	bne.n	8005f58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 f839 	bl	8005fca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2202      	movs	r2, #2
 8005f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	3304      	adds	r3, #4
 8005f68:	4619      	mov	r1, r3
 8005f6a:	4610      	mov	r0, r2
 8005f6c:	f000 f9d8 	bl	8006320 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3708      	adds	r7, #8
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}

08005fca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005fca:	b480      	push	{r7}
 8005fcc:	b083      	sub	sp, #12
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005fd2:	bf00      	nop
 8005fd4:	370c      	adds	r7, #12
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr
	...

08005fe0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b085      	sub	sp, #20
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d001      	beq.n	8005ff8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e04e      	b.n	8006096 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2202      	movs	r2, #2
 8005ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	68da      	ldr	r2, [r3, #12]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f042 0201 	orr.w	r2, r2, #1
 800600e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a23      	ldr	r2, [pc, #140]	; (80060a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d022      	beq.n	8006060 <HAL_TIM_Base_Start_IT+0x80>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006022:	d01d      	beq.n	8006060 <HAL_TIM_Base_Start_IT+0x80>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a1f      	ldr	r2, [pc, #124]	; (80060a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d018      	beq.n	8006060 <HAL_TIM_Base_Start_IT+0x80>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a1e      	ldr	r2, [pc, #120]	; (80060ac <HAL_TIM_Base_Start_IT+0xcc>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d013      	beq.n	8006060 <HAL_TIM_Base_Start_IT+0x80>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a1c      	ldr	r2, [pc, #112]	; (80060b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d00e      	beq.n	8006060 <HAL_TIM_Base_Start_IT+0x80>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a1b      	ldr	r2, [pc, #108]	; (80060b4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d009      	beq.n	8006060 <HAL_TIM_Base_Start_IT+0x80>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a19      	ldr	r2, [pc, #100]	; (80060b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d004      	beq.n	8006060 <HAL_TIM_Base_Start_IT+0x80>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a18      	ldr	r2, [pc, #96]	; (80060bc <HAL_TIM_Base_Start_IT+0xdc>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d111      	bne.n	8006084 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	f003 0307 	and.w	r3, r3, #7
 800606a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2b06      	cmp	r3, #6
 8006070:	d010      	beq.n	8006094 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f042 0201 	orr.w	r2, r2, #1
 8006080:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006082:	e007      	b.n	8006094 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f042 0201 	orr.w	r2, r2, #1
 8006092:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006094:	2300      	movs	r3, #0
}
 8006096:	4618      	mov	r0, r3
 8006098:	3714      	adds	r7, #20
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr
 80060a2:	bf00      	nop
 80060a4:	40010000 	.word	0x40010000
 80060a8:	40000400 	.word	0x40000400
 80060ac:	40000800 	.word	0x40000800
 80060b0:	40000c00 	.word	0x40000c00
 80060b4:	40010400 	.word	0x40010400
 80060b8:	40014000 	.word	0x40014000
 80060bc:	40001800 	.word	0x40001800

080060c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b082      	sub	sp, #8
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	f003 0302 	and.w	r3, r3, #2
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	d122      	bne.n	800611c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	f003 0302 	and.w	r3, r3, #2
 80060e0:	2b02      	cmp	r3, #2
 80060e2:	d11b      	bne.n	800611c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f06f 0202 	mvn.w	r2, #2
 80060ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2201      	movs	r2, #1
 80060f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	699b      	ldr	r3, [r3, #24]
 80060fa:	f003 0303 	and.w	r3, r3, #3
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d003      	beq.n	800610a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 f8ee 	bl	80062e4 <HAL_TIM_IC_CaptureCallback>
 8006108:	e005      	b.n	8006116 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 f8e0 	bl	80062d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 f8f1 	bl	80062f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	f003 0304 	and.w	r3, r3, #4
 8006126:	2b04      	cmp	r3, #4
 8006128:	d122      	bne.n	8006170 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	f003 0304 	and.w	r3, r3, #4
 8006134:	2b04      	cmp	r3, #4
 8006136:	d11b      	bne.n	8006170 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f06f 0204 	mvn.w	r2, #4
 8006140:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2202      	movs	r2, #2
 8006146:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	699b      	ldr	r3, [r3, #24]
 800614e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006152:	2b00      	cmp	r3, #0
 8006154:	d003      	beq.n	800615e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 f8c4 	bl	80062e4 <HAL_TIM_IC_CaptureCallback>
 800615c:	e005      	b.n	800616a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 f8b6 	bl	80062d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f000 f8c7 	bl	80062f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	f003 0308 	and.w	r3, r3, #8
 800617a:	2b08      	cmp	r3, #8
 800617c:	d122      	bne.n	80061c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	f003 0308 	and.w	r3, r3, #8
 8006188:	2b08      	cmp	r3, #8
 800618a:	d11b      	bne.n	80061c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f06f 0208 	mvn.w	r2, #8
 8006194:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2204      	movs	r2, #4
 800619a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	69db      	ldr	r3, [r3, #28]
 80061a2:	f003 0303 	and.w	r3, r3, #3
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d003      	beq.n	80061b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 f89a 	bl	80062e4 <HAL_TIM_IC_CaptureCallback>
 80061b0:	e005      	b.n	80061be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 f88c 	bl	80062d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f000 f89d 	bl	80062f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	f003 0310 	and.w	r3, r3, #16
 80061ce:	2b10      	cmp	r3, #16
 80061d0:	d122      	bne.n	8006218 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	f003 0310 	and.w	r3, r3, #16
 80061dc:	2b10      	cmp	r3, #16
 80061de:	d11b      	bne.n	8006218 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f06f 0210 	mvn.w	r2, #16
 80061e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2208      	movs	r2, #8
 80061ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	69db      	ldr	r3, [r3, #28]
 80061f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d003      	beq.n	8006206 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 f870 	bl	80062e4 <HAL_TIM_IC_CaptureCallback>
 8006204:	e005      	b.n	8006212 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 f862 	bl	80062d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f000 f873 	bl	80062f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	f003 0301 	and.w	r3, r3, #1
 8006222:	2b01      	cmp	r3, #1
 8006224:	d10e      	bne.n	8006244 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	f003 0301 	and.w	r3, r3, #1
 8006230:	2b01      	cmp	r3, #1
 8006232:	d107      	bne.n	8006244 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f06f 0201 	mvn.w	r2, #1
 800623c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f7fc fd00 	bl	8002c44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800624e:	2b80      	cmp	r3, #128	; 0x80
 8006250:	d10e      	bne.n	8006270 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800625c:	2b80      	cmp	r3, #128	; 0x80
 800625e:	d107      	bne.n	8006270 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 f902 	bl	8006474 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	691b      	ldr	r3, [r3, #16]
 8006276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800627a:	2b40      	cmp	r3, #64	; 0x40
 800627c:	d10e      	bne.n	800629c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006288:	2b40      	cmp	r3, #64	; 0x40
 800628a:	d107      	bne.n	800629c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 f838 	bl	800630c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	f003 0320 	and.w	r3, r3, #32
 80062a6:	2b20      	cmp	r3, #32
 80062a8:	d10e      	bne.n	80062c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	f003 0320 	and.w	r3, r3, #32
 80062b4:	2b20      	cmp	r3, #32
 80062b6:	d107      	bne.n	80062c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f06f 0220 	mvn.w	r2, #32
 80062c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 f8cc 	bl	8006460 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80062c8:	bf00      	nop
 80062ca:	3708      	adds	r7, #8
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062d8:	bf00      	nop
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062ec:	bf00      	nop
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006300:	bf00      	nop
 8006302:	370c      	adds	r7, #12
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006314:	bf00      	nop
 8006316:	370c      	adds	r7, #12
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006320:	b480      	push	{r7}
 8006322:	b085      	sub	sp, #20
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a40      	ldr	r2, [pc, #256]	; (8006434 <TIM_Base_SetConfig+0x114>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d013      	beq.n	8006360 <TIM_Base_SetConfig+0x40>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800633e:	d00f      	beq.n	8006360 <TIM_Base_SetConfig+0x40>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a3d      	ldr	r2, [pc, #244]	; (8006438 <TIM_Base_SetConfig+0x118>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d00b      	beq.n	8006360 <TIM_Base_SetConfig+0x40>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4a3c      	ldr	r2, [pc, #240]	; (800643c <TIM_Base_SetConfig+0x11c>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d007      	beq.n	8006360 <TIM_Base_SetConfig+0x40>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a3b      	ldr	r2, [pc, #236]	; (8006440 <TIM_Base_SetConfig+0x120>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d003      	beq.n	8006360 <TIM_Base_SetConfig+0x40>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4a3a      	ldr	r2, [pc, #232]	; (8006444 <TIM_Base_SetConfig+0x124>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d108      	bne.n	8006372 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006366:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	4313      	orrs	r3, r2
 8006370:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a2f      	ldr	r2, [pc, #188]	; (8006434 <TIM_Base_SetConfig+0x114>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d02b      	beq.n	80063d2 <TIM_Base_SetConfig+0xb2>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006380:	d027      	beq.n	80063d2 <TIM_Base_SetConfig+0xb2>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a2c      	ldr	r2, [pc, #176]	; (8006438 <TIM_Base_SetConfig+0x118>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d023      	beq.n	80063d2 <TIM_Base_SetConfig+0xb2>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a2b      	ldr	r2, [pc, #172]	; (800643c <TIM_Base_SetConfig+0x11c>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d01f      	beq.n	80063d2 <TIM_Base_SetConfig+0xb2>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a2a      	ldr	r2, [pc, #168]	; (8006440 <TIM_Base_SetConfig+0x120>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d01b      	beq.n	80063d2 <TIM_Base_SetConfig+0xb2>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a29      	ldr	r2, [pc, #164]	; (8006444 <TIM_Base_SetConfig+0x124>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d017      	beq.n	80063d2 <TIM_Base_SetConfig+0xb2>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a28      	ldr	r2, [pc, #160]	; (8006448 <TIM_Base_SetConfig+0x128>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d013      	beq.n	80063d2 <TIM_Base_SetConfig+0xb2>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a27      	ldr	r2, [pc, #156]	; (800644c <TIM_Base_SetConfig+0x12c>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d00f      	beq.n	80063d2 <TIM_Base_SetConfig+0xb2>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a26      	ldr	r2, [pc, #152]	; (8006450 <TIM_Base_SetConfig+0x130>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d00b      	beq.n	80063d2 <TIM_Base_SetConfig+0xb2>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4a25      	ldr	r2, [pc, #148]	; (8006454 <TIM_Base_SetConfig+0x134>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d007      	beq.n	80063d2 <TIM_Base_SetConfig+0xb2>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a24      	ldr	r2, [pc, #144]	; (8006458 <TIM_Base_SetConfig+0x138>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d003      	beq.n	80063d2 <TIM_Base_SetConfig+0xb2>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a23      	ldr	r2, [pc, #140]	; (800645c <TIM_Base_SetConfig+0x13c>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d108      	bne.n	80063e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	68fa      	ldr	r2, [r7, #12]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	695b      	ldr	r3, [r3, #20]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	689a      	ldr	r2, [r3, #8]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a0a      	ldr	r2, [pc, #40]	; (8006434 <TIM_Base_SetConfig+0x114>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d003      	beq.n	8006418 <TIM_Base_SetConfig+0xf8>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a0c      	ldr	r2, [pc, #48]	; (8006444 <TIM_Base_SetConfig+0x124>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d103      	bne.n	8006420 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	691a      	ldr	r2, [r3, #16]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2201      	movs	r2, #1
 8006424:	615a      	str	r2, [r3, #20]
}
 8006426:	bf00      	nop
 8006428:	3714      	adds	r7, #20
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr
 8006432:	bf00      	nop
 8006434:	40010000 	.word	0x40010000
 8006438:	40000400 	.word	0x40000400
 800643c:	40000800 	.word	0x40000800
 8006440:	40000c00 	.word	0x40000c00
 8006444:	40010400 	.word	0x40010400
 8006448:	40014000 	.word	0x40014000
 800644c:	40014400 	.word	0x40014400
 8006450:	40014800 	.word	0x40014800
 8006454:	40001800 	.word	0x40001800
 8006458:	40001c00 	.word	0x40001c00
 800645c:	40002000 	.word	0x40002000

08006460 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006460:	b480      	push	{r7}
 8006462:	b083      	sub	sp, #12
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006468:	bf00      	nop
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800647c:	bf00      	nop
 800647e:	370c      	adds	r7, #12
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr

08006488 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d101      	bne.n	800649a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e03f      	b.n	800651a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d106      	bne.n	80064b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f7fc fc9c 	bl	8002dec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2224      	movs	r2, #36	; 0x24
 80064b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	68da      	ldr	r2, [r3, #12]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f001 f903 	bl	80076d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	691a      	ldr	r2, [r3, #16]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	695a      	ldr	r2, [r3, #20]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	68da      	ldr	r2, [r3, #12]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006500:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2220      	movs	r2, #32
 800650c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2220      	movs	r2, #32
 8006514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	3708      	adds	r7, #8
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}

08006522 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006522:	b580      	push	{r7, lr}
 8006524:	b08a      	sub	sp, #40	; 0x28
 8006526:	af02      	add	r7, sp, #8
 8006528:	60f8      	str	r0, [r7, #12]
 800652a:	60b9      	str	r1, [r7, #8]
 800652c:	603b      	str	r3, [r7, #0]
 800652e:	4613      	mov	r3, r2
 8006530:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006532:	2300      	movs	r3, #0
 8006534:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800653c:	b2db      	uxtb	r3, r3
 800653e:	2b20      	cmp	r3, #32
 8006540:	d17c      	bne.n	800663c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d002      	beq.n	800654e <HAL_UART_Transmit+0x2c>
 8006548:	88fb      	ldrh	r3, [r7, #6]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d101      	bne.n	8006552 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	e075      	b.n	800663e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006558:	2b01      	cmp	r3, #1
 800655a:	d101      	bne.n	8006560 <HAL_UART_Transmit+0x3e>
 800655c:	2302      	movs	r3, #2
 800655e:	e06e      	b.n	800663e <HAL_UART_Transmit+0x11c>
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2200      	movs	r2, #0
 800656c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2221      	movs	r2, #33	; 0x21
 8006572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006576:	f7fd fabf 	bl	8003af8 <HAL_GetTick>
 800657a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	88fa      	ldrh	r2, [r7, #6]
 8006580:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	88fa      	ldrh	r2, [r7, #6]
 8006586:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006590:	d108      	bne.n	80065a4 <HAL_UART_Transmit+0x82>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d104      	bne.n	80065a4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800659a:	2300      	movs	r3, #0
 800659c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	61bb      	str	r3, [r7, #24]
 80065a2:	e003      	b.n	80065ac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80065a8:	2300      	movs	r3, #0
 80065aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80065b4:	e02a      	b.n	800660c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	9300      	str	r3, [sp, #0]
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	2200      	movs	r2, #0
 80065be:	2180      	movs	r1, #128	; 0x80
 80065c0:	68f8      	ldr	r0, [r7, #12]
 80065c2:	f000 fdbe 	bl	8007142 <UART_WaitOnFlagUntilTimeout>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d001      	beq.n	80065d0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80065cc:	2303      	movs	r3, #3
 80065ce:	e036      	b.n	800663e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d10b      	bne.n	80065ee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	881b      	ldrh	r3, [r3, #0]
 80065da:	461a      	mov	r2, r3
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	3302      	adds	r3, #2
 80065ea:	61bb      	str	r3, [r7, #24]
 80065ec:	e007      	b.n	80065fe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80065ee:	69fb      	ldr	r3, [r7, #28]
 80065f0:	781a      	ldrb	r2, [r3, #0]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	3301      	adds	r3, #1
 80065fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006602:	b29b      	uxth	r3, r3
 8006604:	3b01      	subs	r3, #1
 8006606:	b29a      	uxth	r2, r3
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006610:	b29b      	uxth	r3, r3
 8006612:	2b00      	cmp	r3, #0
 8006614:	d1cf      	bne.n	80065b6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	9300      	str	r3, [sp, #0]
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	2200      	movs	r2, #0
 800661e:	2140      	movs	r1, #64	; 0x40
 8006620:	68f8      	ldr	r0, [r7, #12]
 8006622:	f000 fd8e 	bl	8007142 <UART_WaitOnFlagUntilTimeout>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d001      	beq.n	8006630 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800662c:	2303      	movs	r3, #3
 800662e:	e006      	b.n	800663e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2220      	movs	r2, #32
 8006634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006638:	2300      	movs	r3, #0
 800663a:	e000      	b.n	800663e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800663c:	2302      	movs	r3, #2
  }
}
 800663e:	4618      	mov	r0, r3
 8006640:	3720      	adds	r7, #32
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}

08006646 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006646:	b480      	push	{r7}
 8006648:	b085      	sub	sp, #20
 800664a:	af00      	add	r7, sp, #0
 800664c:	60f8      	str	r0, [r7, #12]
 800664e:	60b9      	str	r1, [r7, #8]
 8006650:	4613      	mov	r3, r2
 8006652:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800665a:	b2db      	uxtb	r3, r3
 800665c:	2b20      	cmp	r3, #32
 800665e:	d130      	bne.n	80066c2 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d002      	beq.n	800666c <HAL_UART_Transmit_IT+0x26>
 8006666:	88fb      	ldrh	r3, [r7, #6]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d101      	bne.n	8006670 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	e029      	b.n	80066c4 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006676:	2b01      	cmp	r3, #1
 8006678:	d101      	bne.n	800667e <HAL_UART_Transmit_IT+0x38>
 800667a:	2302      	movs	r3, #2
 800667c:	e022      	b.n	80066c4 <HAL_UART_Transmit_IT+0x7e>
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2201      	movs	r2, #1
 8006682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	68ba      	ldr	r2, [r7, #8]
 800668a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	88fa      	ldrh	r2, [r7, #6]
 8006690:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	88fa      	ldrh	r2, [r7, #6]
 8006696:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2200      	movs	r2, #0
 800669c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2221      	movs	r2, #33	; 0x21
 80066a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2200      	movs	r2, #0
 80066aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	68da      	ldr	r2, [r3, #12]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80066bc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80066be:	2300      	movs	r3, #0
 80066c0:	e000      	b.n	80066c4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80066c2:	2302      	movs	r3, #2
  }
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3714      	adds	r7, #20
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b08c      	sub	sp, #48	; 0x30
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	60b9      	str	r1, [r7, #8]
 80066da:	4613      	mov	r3, r2
 80066dc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	2b20      	cmp	r3, #32
 80066e8:	d165      	bne.n	80067b6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d002      	beq.n	80066f6 <HAL_UART_Transmit_DMA+0x26>
 80066f0:	88fb      	ldrh	r3, [r7, #6]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d101      	bne.n	80066fa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	e05e      	b.n	80067b8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006700:	2b01      	cmp	r3, #1
 8006702:	d101      	bne.n	8006708 <HAL_UART_Transmit_DMA+0x38>
 8006704:	2302      	movs	r3, #2
 8006706:	e057      	b.n	80067b8 <HAL_UART_Transmit_DMA+0xe8>
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006710:	68ba      	ldr	r2, [r7, #8]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	88fa      	ldrh	r2, [r7, #6]
 800671a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	88fa      	ldrh	r2, [r7, #6]
 8006720:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2200      	movs	r2, #0
 8006726:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2221      	movs	r2, #33	; 0x21
 800672c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006734:	4a22      	ldr	r2, [pc, #136]	; (80067c0 <HAL_UART_Transmit_DMA+0xf0>)
 8006736:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800673c:	4a21      	ldr	r2, [pc, #132]	; (80067c4 <HAL_UART_Transmit_DMA+0xf4>)
 800673e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006744:	4a20      	ldr	r2, [pc, #128]	; (80067c8 <HAL_UART_Transmit_DMA+0xf8>)
 8006746:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800674c:	2200      	movs	r2, #0
 800674e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8006750:	f107 0308 	add.w	r3, r7, #8
 8006754:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800675a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800675c:	6819      	ldr	r1, [r3, #0]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	3304      	adds	r3, #4
 8006764:	461a      	mov	r2, r3
 8006766:	88fb      	ldrh	r3, [r7, #6]
 8006768:	f7fd fba2 	bl	8003eb0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006774:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2200      	movs	r2, #0
 800677a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	3314      	adds	r3, #20
 8006784:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	e853 3f00 	ldrex	r3, [r3]
 800678c:	617b      	str	r3, [r7, #20]
   return(result);
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006794:	62bb      	str	r3, [r7, #40]	; 0x28
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	3314      	adds	r3, #20
 800679c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800679e:	627a      	str	r2, [r7, #36]	; 0x24
 80067a0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a2:	6a39      	ldr	r1, [r7, #32]
 80067a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067a6:	e841 2300 	strex	r3, r2, [r1]
 80067aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d1e5      	bne.n	800677e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80067b2:	2300      	movs	r3, #0
 80067b4:	e000      	b.n	80067b8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80067b6:	2302      	movs	r3, #2
  }
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3730      	adds	r7, #48	; 0x30
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}
 80067c0:	08006e9d 	.word	0x08006e9d
 80067c4:	08006f37 	.word	0x08006f37
 80067c8:	080070af 	.word	0x080070af

080067cc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	4613      	mov	r3, r2
 80067d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	2b20      	cmp	r3, #32
 80067e4:	d11d      	bne.n	8006822 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d002      	beq.n	80067f2 <HAL_UART_Receive_DMA+0x26>
 80067ec:	88fb      	ldrh	r3, [r7, #6]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d101      	bne.n	80067f6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e016      	b.n	8006824 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d101      	bne.n	8006804 <HAL_UART_Receive_DMA+0x38>
 8006800:	2302      	movs	r3, #2
 8006802:	e00f      	b.n	8006824 <HAL_UART_Receive_DMA+0x58>
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2201      	movs	r2, #1
 8006808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2200      	movs	r2, #0
 8006810:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006812:	88fb      	ldrh	r3, [r7, #6]
 8006814:	461a      	mov	r2, r3
 8006816:	68b9      	ldr	r1, [r7, #8]
 8006818:	68f8      	ldr	r0, [r7, #12]
 800681a:	f000 fd01 	bl	8007220 <UART_Start_Receive_DMA>
 800681e:	4603      	mov	r3, r0
 8006820:	e000      	b.n	8006824 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006822:	2302      	movs	r3, #2
  }
}
 8006824:	4618      	mov	r0, r3
 8006826:	3710      	adds	r7, #16
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b090      	sub	sp, #64	; 0x40
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006834:	2300      	movs	r3, #0
 8006836:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	695b      	ldr	r3, [r3, #20]
 800683e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006842:	2b80      	cmp	r3, #128	; 0x80
 8006844:	bf0c      	ite	eq
 8006846:	2301      	moveq	r3, #1
 8006848:	2300      	movne	r3, #0
 800684a:	b2db      	uxtb	r3, r3
 800684c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006854:	b2db      	uxtb	r3, r3
 8006856:	2b21      	cmp	r3, #33	; 0x21
 8006858:	d128      	bne.n	80068ac <HAL_UART_DMAStop+0x80>
 800685a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800685c:	2b00      	cmp	r3, #0
 800685e:	d025      	beq.n	80068ac <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	3314      	adds	r3, #20
 8006866:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686a:	e853 3f00 	ldrex	r3, [r3]
 800686e:	623b      	str	r3, [r7, #32]
   return(result);
 8006870:	6a3b      	ldr	r3, [r7, #32]
 8006872:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006876:	63bb      	str	r3, [r7, #56]	; 0x38
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	3314      	adds	r3, #20
 800687e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006880:	633a      	str	r2, [r7, #48]	; 0x30
 8006882:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006884:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006886:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006888:	e841 2300 	strex	r3, r2, [r1]
 800688c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800688e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006890:	2b00      	cmp	r3, #0
 8006892:	d1e5      	bne.n	8006860 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006898:	2b00      	cmp	r3, #0
 800689a:	d004      	beq.n	80068a6 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068a0:	4618      	mov	r0, r3
 80068a2:	f7fd fb5d 	bl	8003f60 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 fd54 	bl	8007354 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	695b      	ldr	r3, [r3, #20]
 80068b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068b6:	2b40      	cmp	r3, #64	; 0x40
 80068b8:	bf0c      	ite	eq
 80068ba:	2301      	moveq	r3, #1
 80068bc:	2300      	movne	r3, #0
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	2b22      	cmp	r3, #34	; 0x22
 80068cc:	d128      	bne.n	8006920 <HAL_UART_DMAStop+0xf4>
 80068ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d025      	beq.n	8006920 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	3314      	adds	r3, #20
 80068da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	e853 3f00 	ldrex	r3, [r3]
 80068e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068ea:	637b      	str	r3, [r7, #52]	; 0x34
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	3314      	adds	r3, #20
 80068f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068f4:	61fa      	str	r2, [r7, #28]
 80068f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f8:	69b9      	ldr	r1, [r7, #24]
 80068fa:	69fa      	ldr	r2, [r7, #28]
 80068fc:	e841 2300 	strex	r3, r2, [r1]
 8006900:	617b      	str	r3, [r7, #20]
   return(result);
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d1e5      	bne.n	80068d4 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800690c:	2b00      	cmp	r3, #0
 800690e:	d004      	beq.n	800691a <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006914:	4618      	mov	r0, r3
 8006916:	f7fd fb23 	bl	8003f60 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 fd42 	bl	80073a4 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3740      	adds	r7, #64	; 0x40
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
	...

0800692c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b0ba      	sub	sp, #232	; 0xe8
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	695b      	ldr	r3, [r3, #20]
 800694e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006952:	2300      	movs	r3, #0
 8006954:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006958:	2300      	movs	r3, #0
 800695a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800695e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006962:	f003 030f 	and.w	r3, r3, #15
 8006966:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800696a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800696e:	2b00      	cmp	r3, #0
 8006970:	d10f      	bne.n	8006992 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006976:	f003 0320 	and.w	r3, r3, #32
 800697a:	2b00      	cmp	r3, #0
 800697c:	d009      	beq.n	8006992 <HAL_UART_IRQHandler+0x66>
 800697e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006982:	f003 0320 	and.w	r3, r3, #32
 8006986:	2b00      	cmp	r3, #0
 8006988:	d003      	beq.n	8006992 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 fde9 	bl	8007562 <UART_Receive_IT>
      return;
 8006990:	e256      	b.n	8006e40 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006992:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006996:	2b00      	cmp	r3, #0
 8006998:	f000 80de 	beq.w	8006b58 <HAL_UART_IRQHandler+0x22c>
 800699c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069a0:	f003 0301 	and.w	r3, r3, #1
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d106      	bne.n	80069b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80069a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069ac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	f000 80d1 	beq.w	8006b58 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80069b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069ba:	f003 0301 	and.w	r3, r3, #1
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d00b      	beq.n	80069da <HAL_UART_IRQHandler+0xae>
 80069c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d005      	beq.n	80069da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d2:	f043 0201 	orr.w	r2, r3, #1
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80069da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069de:	f003 0304 	and.w	r3, r3, #4
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d00b      	beq.n	80069fe <HAL_UART_IRQHandler+0xd2>
 80069e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069ea:	f003 0301 	and.w	r3, r3, #1
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d005      	beq.n	80069fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f6:	f043 0202 	orr.w	r2, r3, #2
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80069fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a02:	f003 0302 	and.w	r3, r3, #2
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d00b      	beq.n	8006a22 <HAL_UART_IRQHandler+0xf6>
 8006a0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a0e:	f003 0301 	and.w	r3, r3, #1
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d005      	beq.n	8006a22 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a1a:	f043 0204 	orr.w	r2, r3, #4
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a26:	f003 0308 	and.w	r3, r3, #8
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d011      	beq.n	8006a52 <HAL_UART_IRQHandler+0x126>
 8006a2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a32:	f003 0320 	and.w	r3, r3, #32
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d105      	bne.n	8006a46 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006a3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a3e:	f003 0301 	and.w	r3, r3, #1
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d005      	beq.n	8006a52 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a4a:	f043 0208 	orr.w	r2, r3, #8
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	f000 81ed 	beq.w	8006e36 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a60:	f003 0320 	and.w	r3, r3, #32
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d008      	beq.n	8006a7a <HAL_UART_IRQHandler+0x14e>
 8006a68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a6c:	f003 0320 	and.w	r3, r3, #32
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d002      	beq.n	8006a7a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 fd74 	bl	8007562 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	695b      	ldr	r3, [r3, #20]
 8006a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a84:	2b40      	cmp	r3, #64	; 0x40
 8006a86:	bf0c      	ite	eq
 8006a88:	2301      	moveq	r3, #1
 8006a8a:	2300      	movne	r3, #0
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a96:	f003 0308 	and.w	r3, r3, #8
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d103      	bne.n	8006aa6 <HAL_UART_IRQHandler+0x17a>
 8006a9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d04f      	beq.n	8006b46 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 fc7c 	bl	80073a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	695b      	ldr	r3, [r3, #20]
 8006ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ab6:	2b40      	cmp	r3, #64	; 0x40
 8006ab8:	d141      	bne.n	8006b3e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	3314      	adds	r3, #20
 8006ac0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ac8:	e853 3f00 	ldrex	r3, [r3]
 8006acc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006ad0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ad4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ad8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	3314      	adds	r3, #20
 8006ae2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006ae6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006aea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006af2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006af6:	e841 2300 	strex	r3, r2, [r1]
 8006afa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006afe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d1d9      	bne.n	8006aba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d013      	beq.n	8006b36 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b12:	4a7d      	ldr	r2, [pc, #500]	; (8006d08 <HAL_UART_IRQHandler+0x3dc>)
 8006b14:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f7fd fa90 	bl	8004040 <HAL_DMA_Abort_IT>
 8006b20:	4603      	mov	r3, r0
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d016      	beq.n	8006b54 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006b30:	4610      	mov	r0, r2
 8006b32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b34:	e00e      	b.n	8006b54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 f99a 	bl	8006e70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b3c:	e00a      	b.n	8006b54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 f996 	bl	8006e70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b44:	e006      	b.n	8006b54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 f992 	bl	8006e70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006b52:	e170      	b.n	8006e36 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b54:	bf00      	nop
    return;
 8006b56:	e16e      	b.n	8006e36 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	f040 814a 	bne.w	8006df6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b66:	f003 0310 	and.w	r3, r3, #16
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	f000 8143 	beq.w	8006df6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b74:	f003 0310 	and.w	r3, r3, #16
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	f000 813c 	beq.w	8006df6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b7e:	2300      	movs	r3, #0
 8006b80:	60bb      	str	r3, [r7, #8]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	60bb      	str	r3, [r7, #8]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	60bb      	str	r3, [r7, #8]
 8006b92:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	695b      	ldr	r3, [r3, #20]
 8006b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b9e:	2b40      	cmp	r3, #64	; 0x40
 8006ba0:	f040 80b4 	bne.w	8006d0c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006bb0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	f000 8140 	beq.w	8006e3a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006bbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	f080 8139 	bcs.w	8006e3a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006bce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd4:	69db      	ldr	r3, [r3, #28]
 8006bd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bda:	f000 8088 	beq.w	8006cee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	330c      	adds	r3, #12
 8006be4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006bec:	e853 3f00 	ldrex	r3, [r3]
 8006bf0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006bf4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006bf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bfc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	330c      	adds	r3, #12
 8006c06:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006c0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006c0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c12:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006c16:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006c1a:	e841 2300 	strex	r3, r2, [r1]
 8006c1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006c22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d1d9      	bne.n	8006bde <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	3314      	adds	r3, #20
 8006c30:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c34:	e853 3f00 	ldrex	r3, [r3]
 8006c38:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006c3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c3c:	f023 0301 	bic.w	r3, r3, #1
 8006c40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	3314      	adds	r3, #20
 8006c4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006c4e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006c52:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c54:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006c56:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006c5a:	e841 2300 	strex	r3, r2, [r1]
 8006c5e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006c60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d1e1      	bne.n	8006c2a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	3314      	adds	r3, #20
 8006c6c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c70:	e853 3f00 	ldrex	r3, [r3]
 8006c74:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006c76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	3314      	adds	r3, #20
 8006c86:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006c8a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006c8c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c8e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006c90:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006c92:	e841 2300 	strex	r3, r2, [r1]
 8006c96:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006c98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d1e3      	bne.n	8006c66 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2220      	movs	r2, #32
 8006ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	330c      	adds	r3, #12
 8006cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cb6:	e853 3f00 	ldrex	r3, [r3]
 8006cba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006cbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cbe:	f023 0310 	bic.w	r3, r3, #16
 8006cc2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	330c      	adds	r3, #12
 8006ccc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006cd0:	65ba      	str	r2, [r7, #88]	; 0x58
 8006cd2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006cd6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006cd8:	e841 2300 	strex	r3, r2, [r1]
 8006cdc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006cde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d1e3      	bne.n	8006cac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f7fd f939 	bl	8003f60 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 f8c0 	bl	8006e84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d04:	e099      	b.n	8006e3a <HAL_UART_IRQHandler+0x50e>
 8006d06:	bf00      	nop
 8006d08:	0800746b 	.word	0x0800746b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	1ad3      	subs	r3, r2, r3
 8006d18:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	f000 808b 	beq.w	8006e3e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006d28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	f000 8086 	beq.w	8006e3e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	330c      	adds	r3, #12
 8006d38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d3c:	e853 3f00 	ldrex	r3, [r3]
 8006d40:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	330c      	adds	r3, #12
 8006d52:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006d56:	647a      	str	r2, [r7, #68]	; 0x44
 8006d58:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d5a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d5e:	e841 2300 	strex	r3, r2, [r1]
 8006d62:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006d64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1e3      	bne.n	8006d32 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	3314      	adds	r3, #20
 8006d70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d74:	e853 3f00 	ldrex	r3, [r3]
 8006d78:	623b      	str	r3, [r7, #32]
   return(result);
 8006d7a:	6a3b      	ldr	r3, [r7, #32]
 8006d7c:	f023 0301 	bic.w	r3, r3, #1
 8006d80:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	3314      	adds	r3, #20
 8006d8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006d8e:	633a      	str	r2, [r7, #48]	; 0x30
 8006d90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d96:	e841 2300 	strex	r3, r2, [r1]
 8006d9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d1e3      	bne.n	8006d6a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2220      	movs	r2, #32
 8006da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	330c      	adds	r3, #12
 8006db6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	e853 3f00 	ldrex	r3, [r3]
 8006dbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f023 0310 	bic.w	r3, r3, #16
 8006dc6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	330c      	adds	r3, #12
 8006dd0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006dd4:	61fa      	str	r2, [r7, #28]
 8006dd6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd8:	69b9      	ldr	r1, [r7, #24]
 8006dda:	69fa      	ldr	r2, [r7, #28]
 8006ddc:	e841 2300 	strex	r3, r2, [r1]
 8006de0:	617b      	str	r3, [r7, #20]
   return(result);
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d1e3      	bne.n	8006db0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006de8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006dec:	4619      	mov	r1, r3
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 f848 	bl	8006e84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006df4:	e023      	b.n	8006e3e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d009      	beq.n	8006e16 <HAL_UART_IRQHandler+0x4ea>
 8006e02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d003      	beq.n	8006e16 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 fb3f 	bl	8007492 <UART_Transmit_IT>
    return;
 8006e14:	e014      	b.n	8006e40 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d00e      	beq.n	8006e40 <HAL_UART_IRQHandler+0x514>
 8006e22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d008      	beq.n	8006e40 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 fb7f 	bl	8007532 <UART_EndTransmit_IT>
    return;
 8006e34:	e004      	b.n	8006e40 <HAL_UART_IRQHandler+0x514>
    return;
 8006e36:	bf00      	nop
 8006e38:	e002      	b.n	8006e40 <HAL_UART_IRQHandler+0x514>
      return;
 8006e3a:	bf00      	nop
 8006e3c:	e000      	b.n	8006e40 <HAL_UART_IRQHandler+0x514>
      return;
 8006e3e:	bf00      	nop
  }
}
 8006e40:	37e8      	adds	r7, #232	; 0xe8
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop

08006e48 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006e50:	bf00      	nop
 8006e52:	370c      	adds	r7, #12
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006e64:	bf00      	nop
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b083      	sub	sp, #12
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006e78:	bf00      	nop
 8006e7a:	370c      	adds	r7, #12
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr

08006e84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b083      	sub	sp, #12
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	460b      	mov	r3, r1
 8006e8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006e90:	bf00      	nop
 8006e92:	370c      	adds	r7, #12
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b090      	sub	sp, #64	; 0x40
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d137      	bne.n	8006f28 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eba:	2200      	movs	r2, #0
 8006ebc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	3314      	adds	r3, #20
 8006ec4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec8:	e853 3f00 	ldrex	r3, [r3]
 8006ecc:	623b      	str	r3, [r7, #32]
   return(result);
 8006ece:	6a3b      	ldr	r3, [r7, #32]
 8006ed0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ed4:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ed6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	3314      	adds	r3, #20
 8006edc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ede:	633a      	str	r2, [r7, #48]	; 0x30
 8006ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ee4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ee6:	e841 2300 	strex	r3, r2, [r1]
 8006eea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d1e5      	bne.n	8006ebe <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	330c      	adds	r3, #12
 8006ef8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	e853 3f00 	ldrex	r3, [r3]
 8006f00:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f08:	637b      	str	r3, [r7, #52]	; 0x34
 8006f0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	330c      	adds	r3, #12
 8006f10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f12:	61fa      	str	r2, [r7, #28]
 8006f14:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f16:	69b9      	ldr	r1, [r7, #24]
 8006f18:	69fa      	ldr	r2, [r7, #28]
 8006f1a:	e841 2300 	strex	r3, r2, [r1]
 8006f1e:	617b      	str	r3, [r7, #20]
   return(result);
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d1e5      	bne.n	8006ef2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006f26:	e002      	b.n	8006f2e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006f28:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006f2a:	f7f9 fe71 	bl	8000c10 <HAL_UART_TxCpltCallback>
}
 8006f2e:	bf00      	nop
 8006f30:	3740      	adds	r7, #64	; 0x40
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}

08006f36 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006f36:	b580      	push	{r7, lr}
 8006f38:	b084      	sub	sp, #16
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f42:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006f44:	68f8      	ldr	r0, [r7, #12]
 8006f46:	f7ff ff7f 	bl	8006e48 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f4a:	bf00      	nop
 8006f4c:	3710      	adds	r7, #16
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}

08006f52 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006f52:	b580      	push	{r7, lr}
 8006f54:	b09c      	sub	sp, #112	; 0x70
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f5e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d172      	bne.n	8007054 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f70:	2200      	movs	r2, #0
 8006f72:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	330c      	adds	r3, #12
 8006f7a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f7e:	e853 3f00 	ldrex	r3, [r3]
 8006f82:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006f84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	330c      	adds	r3, #12
 8006f92:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006f94:	65ba      	str	r2, [r7, #88]	; 0x58
 8006f96:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f98:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006f9a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f9c:	e841 2300 	strex	r3, r2, [r1]
 8006fa0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006fa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d1e5      	bne.n	8006f74 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	3314      	adds	r3, #20
 8006fae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb2:	e853 3f00 	ldrex	r3, [r3]
 8006fb6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fba:	f023 0301 	bic.w	r3, r3, #1
 8006fbe:	667b      	str	r3, [r7, #100]	; 0x64
 8006fc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	3314      	adds	r3, #20
 8006fc6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006fc8:	647a      	str	r2, [r7, #68]	; 0x44
 8006fca:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fcc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006fce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006fd0:	e841 2300 	strex	r3, r2, [r1]
 8006fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d1e5      	bne.n	8006fa8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	3314      	adds	r3, #20
 8006fe2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe6:	e853 3f00 	ldrex	r3, [r3]
 8006fea:	623b      	str	r3, [r7, #32]
   return(result);
 8006fec:	6a3b      	ldr	r3, [r7, #32]
 8006fee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ff2:	663b      	str	r3, [r7, #96]	; 0x60
 8006ff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	3314      	adds	r3, #20
 8006ffa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006ffc:	633a      	str	r2, [r7, #48]	; 0x30
 8006ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007000:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007002:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007004:	e841 2300 	strex	r3, r2, [r1]
 8007008:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800700a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800700c:	2b00      	cmp	r3, #0
 800700e:	d1e5      	bne.n	8006fdc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007010:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007012:	2220      	movs	r2, #32
 8007014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800701a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800701c:	2b01      	cmp	r3, #1
 800701e:	d119      	bne.n	8007054 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007020:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	330c      	adds	r3, #12
 8007026:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	e853 3f00 	ldrex	r3, [r3]
 800702e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f023 0310 	bic.w	r3, r3, #16
 8007036:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	330c      	adds	r3, #12
 800703e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007040:	61fa      	str	r2, [r7, #28]
 8007042:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007044:	69b9      	ldr	r1, [r7, #24]
 8007046:	69fa      	ldr	r2, [r7, #28]
 8007048:	e841 2300 	strex	r3, r2, [r1]
 800704c:	617b      	str	r3, [r7, #20]
   return(result);
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d1e5      	bne.n	8007020 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007058:	2b01      	cmp	r3, #1
 800705a:	d106      	bne.n	800706a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800705c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800705e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007060:	4619      	mov	r1, r3
 8007062:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007064:	f7ff ff0e 	bl	8006e84 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007068:	e002      	b.n	8007070 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800706a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800706c:	f7f9 fdba 	bl	8000be4 <HAL_UART_RxCpltCallback>
}
 8007070:	bf00      	nop
 8007072:	3770      	adds	r7, #112	; 0x70
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007084:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800708a:	2b01      	cmp	r3, #1
 800708c:	d108      	bne.n	80070a0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007092:	085b      	lsrs	r3, r3, #1
 8007094:	b29b      	uxth	r3, r3
 8007096:	4619      	mov	r1, r3
 8007098:	68f8      	ldr	r0, [r7, #12]
 800709a:	f7ff fef3 	bl	8006e84 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800709e:	e002      	b.n	80070a6 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80070a0:	68f8      	ldr	r0, [r7, #12]
 80070a2:	f7ff fedb 	bl	8006e5c <HAL_UART_RxHalfCpltCallback>
}
 80070a6:	bf00      	nop
 80070a8:	3710      	adds	r7, #16
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}

080070ae <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80070ae:	b580      	push	{r7, lr}
 80070b0:	b084      	sub	sp, #16
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80070b6:	2300      	movs	r3, #0
 80070b8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070be:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	695b      	ldr	r3, [r3, #20]
 80070c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070ca:	2b80      	cmp	r3, #128	; 0x80
 80070cc:	bf0c      	ite	eq
 80070ce:	2301      	moveq	r3, #1
 80070d0:	2300      	movne	r3, #0
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	2b21      	cmp	r3, #33	; 0x21
 80070e0:	d108      	bne.n	80070f4 <UART_DMAError+0x46>
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d005      	beq.n	80070f4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	2200      	movs	r2, #0
 80070ec:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80070ee:	68b8      	ldr	r0, [r7, #8]
 80070f0:	f000 f930 	bl	8007354 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	695b      	ldr	r3, [r3, #20]
 80070fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070fe:	2b40      	cmp	r3, #64	; 0x40
 8007100:	bf0c      	ite	eq
 8007102:	2301      	moveq	r3, #1
 8007104:	2300      	movne	r3, #0
 8007106:	b2db      	uxtb	r3, r3
 8007108:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007110:	b2db      	uxtb	r3, r3
 8007112:	2b22      	cmp	r3, #34	; 0x22
 8007114:	d108      	bne.n	8007128 <UART_DMAError+0x7a>
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d005      	beq.n	8007128 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	2200      	movs	r2, #0
 8007120:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007122:	68b8      	ldr	r0, [r7, #8]
 8007124:	f000 f93e 	bl	80073a4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712c:	f043 0210 	orr.w	r2, r3, #16
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007134:	68b8      	ldr	r0, [r7, #8]
 8007136:	f7ff fe9b 	bl	8006e70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800713a:	bf00      	nop
 800713c:	3710      	adds	r7, #16
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}

08007142 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007142:	b580      	push	{r7, lr}
 8007144:	b090      	sub	sp, #64	; 0x40
 8007146:	af00      	add	r7, sp, #0
 8007148:	60f8      	str	r0, [r7, #12]
 800714a:	60b9      	str	r1, [r7, #8]
 800714c:	603b      	str	r3, [r7, #0]
 800714e:	4613      	mov	r3, r2
 8007150:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007152:	e050      	b.n	80071f6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007154:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800715a:	d04c      	beq.n	80071f6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800715c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800715e:	2b00      	cmp	r3, #0
 8007160:	d007      	beq.n	8007172 <UART_WaitOnFlagUntilTimeout+0x30>
 8007162:	f7fc fcc9 	bl	8003af8 <HAL_GetTick>
 8007166:	4602      	mov	r2, r0
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	1ad3      	subs	r3, r2, r3
 800716c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800716e:	429a      	cmp	r2, r3
 8007170:	d241      	bcs.n	80071f6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	330c      	adds	r3, #12
 8007178:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800717a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800717c:	e853 3f00 	ldrex	r3, [r3]
 8007180:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007184:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007188:	63fb      	str	r3, [r7, #60]	; 0x3c
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	330c      	adds	r3, #12
 8007190:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007192:	637a      	str	r2, [r7, #52]	; 0x34
 8007194:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007196:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007198:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800719a:	e841 2300 	strex	r3, r2, [r1]
 800719e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80071a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d1e5      	bne.n	8007172 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	3314      	adds	r3, #20
 80071ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	e853 3f00 	ldrex	r3, [r3]
 80071b4:	613b      	str	r3, [r7, #16]
   return(result);
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	f023 0301 	bic.w	r3, r3, #1
 80071bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	3314      	adds	r3, #20
 80071c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071c6:	623a      	str	r2, [r7, #32]
 80071c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ca:	69f9      	ldr	r1, [r7, #28]
 80071cc:	6a3a      	ldr	r2, [r7, #32]
 80071ce:	e841 2300 	strex	r3, r2, [r1]
 80071d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80071d4:	69bb      	ldr	r3, [r7, #24]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d1e5      	bne.n	80071a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2220      	movs	r2, #32
 80071de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2220      	movs	r2, #32
 80071e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2200      	movs	r2, #0
 80071ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80071f2:	2303      	movs	r3, #3
 80071f4:	e00f      	b.n	8007216 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	4013      	ands	r3, r2
 8007200:	68ba      	ldr	r2, [r7, #8]
 8007202:	429a      	cmp	r2, r3
 8007204:	bf0c      	ite	eq
 8007206:	2301      	moveq	r3, #1
 8007208:	2300      	movne	r3, #0
 800720a:	b2db      	uxtb	r3, r3
 800720c:	461a      	mov	r2, r3
 800720e:	79fb      	ldrb	r3, [r7, #7]
 8007210:	429a      	cmp	r2, r3
 8007212:	d09f      	beq.n	8007154 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007214:	2300      	movs	r3, #0
}
 8007216:	4618      	mov	r0, r3
 8007218:	3740      	adds	r7, #64	; 0x40
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
	...

08007220 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b098      	sub	sp, #96	; 0x60
 8007224:	af00      	add	r7, sp, #0
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	60b9      	str	r1, [r7, #8]
 800722a:	4613      	mov	r3, r2
 800722c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800722e:	68ba      	ldr	r2, [r7, #8]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	88fa      	ldrh	r2, [r7, #6]
 8007238:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2200      	movs	r2, #0
 800723e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2222      	movs	r2, #34	; 0x22
 8007244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800724c:	4a3e      	ldr	r2, [pc, #248]	; (8007348 <UART_Start_Receive_DMA+0x128>)
 800724e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007254:	4a3d      	ldr	r2, [pc, #244]	; (800734c <UART_Start_Receive_DMA+0x12c>)
 8007256:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800725c:	4a3c      	ldr	r2, [pc, #240]	; (8007350 <UART_Start_Receive_DMA+0x130>)
 800725e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007264:	2200      	movs	r2, #0
 8007266:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007268:	f107 0308 	add.w	r3, r7, #8
 800726c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	3304      	adds	r3, #4
 8007278:	4619      	mov	r1, r3
 800727a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	88fb      	ldrh	r3, [r7, #6]
 8007280:	f7fc fe16 	bl	8003eb0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007284:	2300      	movs	r3, #0
 8007286:	613b      	str	r3, [r7, #16]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	613b      	str	r3, [r7, #16]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	613b      	str	r3, [r7, #16]
 8007298:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2200      	movs	r2, #0
 800729e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	330c      	adds	r3, #12
 80072a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072ac:	e853 3f00 	ldrex	r3, [r3]
 80072b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80072b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	330c      	adds	r3, #12
 80072c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80072c2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80072c4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80072c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80072ca:	e841 2300 	strex	r3, r2, [r1]
 80072ce:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80072d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d1e5      	bne.n	80072a2 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	3314      	adds	r3, #20
 80072dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e0:	e853 3f00 	ldrex	r3, [r3]
 80072e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80072e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072e8:	f043 0301 	orr.w	r3, r3, #1
 80072ec:	657b      	str	r3, [r7, #84]	; 0x54
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	3314      	adds	r3, #20
 80072f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80072f6:	63ba      	str	r2, [r7, #56]	; 0x38
 80072f8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072fa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80072fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072fe:	e841 2300 	strex	r3, r2, [r1]
 8007302:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007306:	2b00      	cmp	r3, #0
 8007308:	d1e5      	bne.n	80072d6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	3314      	adds	r3, #20
 8007310:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007312:	69bb      	ldr	r3, [r7, #24]
 8007314:	e853 3f00 	ldrex	r3, [r3]
 8007318:	617b      	str	r3, [r7, #20]
   return(result);
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007320:	653b      	str	r3, [r7, #80]	; 0x50
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	3314      	adds	r3, #20
 8007328:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800732a:	627a      	str	r2, [r7, #36]	; 0x24
 800732c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800732e:	6a39      	ldr	r1, [r7, #32]
 8007330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007332:	e841 2300 	strex	r3, r2, [r1]
 8007336:	61fb      	str	r3, [r7, #28]
   return(result);
 8007338:	69fb      	ldr	r3, [r7, #28]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d1e5      	bne.n	800730a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800733e:	2300      	movs	r3, #0
}
 8007340:	4618      	mov	r0, r3
 8007342:	3760      	adds	r7, #96	; 0x60
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}
 8007348:	08006f53 	.word	0x08006f53
 800734c:	08007079 	.word	0x08007079
 8007350:	080070af 	.word	0x080070af

08007354 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007354:	b480      	push	{r7}
 8007356:	b089      	sub	sp, #36	; 0x24
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	330c      	adds	r3, #12
 8007362:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	e853 3f00 	ldrex	r3, [r3]
 800736a:	60bb      	str	r3, [r7, #8]
   return(result);
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007372:	61fb      	str	r3, [r7, #28]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	330c      	adds	r3, #12
 800737a:	69fa      	ldr	r2, [r7, #28]
 800737c:	61ba      	str	r2, [r7, #24]
 800737e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007380:	6979      	ldr	r1, [r7, #20]
 8007382:	69ba      	ldr	r2, [r7, #24]
 8007384:	e841 2300 	strex	r3, r2, [r1]
 8007388:	613b      	str	r3, [r7, #16]
   return(result);
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d1e5      	bne.n	800735c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2220      	movs	r2, #32
 8007394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007398:	bf00      	nop
 800739a:	3724      	adds	r7, #36	; 0x24
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b095      	sub	sp, #84	; 0x54
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	330c      	adds	r3, #12
 80073b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073b6:	e853 3f00 	ldrex	r3, [r3]
 80073ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80073bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80073c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	330c      	adds	r3, #12
 80073ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80073cc:	643a      	str	r2, [r7, #64]	; 0x40
 80073ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80073d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80073d4:	e841 2300 	strex	r3, r2, [r1]
 80073d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80073da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d1e5      	bne.n	80073ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	3314      	adds	r3, #20
 80073e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e8:	6a3b      	ldr	r3, [r7, #32]
 80073ea:	e853 3f00 	ldrex	r3, [r3]
 80073ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80073f0:	69fb      	ldr	r3, [r7, #28]
 80073f2:	f023 0301 	bic.w	r3, r3, #1
 80073f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	3314      	adds	r3, #20
 80073fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007400:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007402:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007404:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007406:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007408:	e841 2300 	strex	r3, r2, [r1]
 800740c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800740e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007410:	2b00      	cmp	r3, #0
 8007412:	d1e5      	bne.n	80073e0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007418:	2b01      	cmp	r3, #1
 800741a:	d119      	bne.n	8007450 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	330c      	adds	r3, #12
 8007422:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	e853 3f00 	ldrex	r3, [r3]
 800742a:	60bb      	str	r3, [r7, #8]
   return(result);
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	f023 0310 	bic.w	r3, r3, #16
 8007432:	647b      	str	r3, [r7, #68]	; 0x44
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	330c      	adds	r3, #12
 800743a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800743c:	61ba      	str	r2, [r7, #24]
 800743e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007440:	6979      	ldr	r1, [r7, #20]
 8007442:	69ba      	ldr	r2, [r7, #24]
 8007444:	e841 2300 	strex	r3, r2, [r1]
 8007448:	613b      	str	r3, [r7, #16]
   return(result);
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d1e5      	bne.n	800741c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2220      	movs	r2, #32
 8007454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800745e:	bf00      	nop
 8007460:	3754      	adds	r7, #84	; 0x54
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr

0800746a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800746a:	b580      	push	{r7, lr}
 800746c:	b084      	sub	sp, #16
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007476:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2200      	movs	r2, #0
 800747c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2200      	movs	r2, #0
 8007482:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007484:	68f8      	ldr	r0, [r7, #12]
 8007486:	f7ff fcf3 	bl	8006e70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800748a:	bf00      	nop
 800748c:	3710      	adds	r7, #16
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}

08007492 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007492:	b480      	push	{r7}
 8007494:	b085      	sub	sp, #20
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	2b21      	cmp	r3, #33	; 0x21
 80074a4:	d13e      	bne.n	8007524 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	689b      	ldr	r3, [r3, #8]
 80074aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074ae:	d114      	bne.n	80074da <UART_Transmit_IT+0x48>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	691b      	ldr	r3, [r3, #16]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d110      	bne.n	80074da <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6a1b      	ldr	r3, [r3, #32]
 80074bc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	881b      	ldrh	r3, [r3, #0]
 80074c2:	461a      	mov	r2, r3
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80074cc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6a1b      	ldr	r3, [r3, #32]
 80074d2:	1c9a      	adds	r2, r3, #2
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	621a      	str	r2, [r3, #32]
 80074d8:	e008      	b.n	80074ec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6a1b      	ldr	r3, [r3, #32]
 80074de:	1c59      	adds	r1, r3, #1
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	6211      	str	r1, [r2, #32]
 80074e4:	781a      	ldrb	r2, [r3, #0]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	3b01      	subs	r3, #1
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	4619      	mov	r1, r3
 80074fa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d10f      	bne.n	8007520 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	68da      	ldr	r2, [r3, #12]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800750e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	68da      	ldr	r2, [r3, #12]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800751e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007520:	2300      	movs	r3, #0
 8007522:	e000      	b.n	8007526 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007524:	2302      	movs	r3, #2
  }
}
 8007526:	4618      	mov	r0, r3
 8007528:	3714      	adds	r7, #20
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr

08007532 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007532:	b580      	push	{r7, lr}
 8007534:	b082      	sub	sp, #8
 8007536:	af00      	add	r7, sp, #0
 8007538:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	68da      	ldr	r2, [r3, #12]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007548:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2220      	movs	r2, #32
 800754e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f7f9 fb5c 	bl	8000c10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	3708      	adds	r7, #8
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}

08007562 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007562:	b580      	push	{r7, lr}
 8007564:	b08c      	sub	sp, #48	; 0x30
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007570:	b2db      	uxtb	r3, r3
 8007572:	2b22      	cmp	r3, #34	; 0x22
 8007574:	f040 80ab 	bne.w	80076ce <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007580:	d117      	bne.n	80075b2 <UART_Receive_IT+0x50>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	691b      	ldr	r3, [r3, #16]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d113      	bne.n	80075b2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800758a:	2300      	movs	r3, #0
 800758c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007592:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	b29b      	uxth	r3, r3
 800759c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075a0:	b29a      	uxth	r2, r3
 80075a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075aa:	1c9a      	adds	r2, r3, #2
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	629a      	str	r2, [r3, #40]	; 0x28
 80075b0:	e026      	b.n	8007600 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80075b8:	2300      	movs	r3, #0
 80075ba:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075c4:	d007      	beq.n	80075d6 <UART_Receive_IT+0x74>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d10a      	bne.n	80075e4 <UART_Receive_IT+0x82>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d106      	bne.n	80075e4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	b2da      	uxtb	r2, r3
 80075de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e0:	701a      	strb	r2, [r3, #0]
 80075e2:	e008      	b.n	80075f6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075f0:	b2da      	uxtb	r2, r3
 80075f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075fa:	1c5a      	adds	r2, r3, #1
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007604:	b29b      	uxth	r3, r3
 8007606:	3b01      	subs	r3, #1
 8007608:	b29b      	uxth	r3, r3
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	4619      	mov	r1, r3
 800760e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007610:	2b00      	cmp	r3, #0
 8007612:	d15a      	bne.n	80076ca <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	68da      	ldr	r2, [r3, #12]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f022 0220 	bic.w	r2, r2, #32
 8007622:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	68da      	ldr	r2, [r3, #12]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007632:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	695a      	ldr	r2, [r3, #20]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f022 0201 	bic.w	r2, r2, #1
 8007642:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2220      	movs	r2, #32
 8007648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007650:	2b01      	cmp	r3, #1
 8007652:	d135      	bne.n	80076c0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	330c      	adds	r3, #12
 8007660:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	e853 3f00 	ldrex	r3, [r3]
 8007668:	613b      	str	r3, [r7, #16]
   return(result);
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	f023 0310 	bic.w	r3, r3, #16
 8007670:	627b      	str	r3, [r7, #36]	; 0x24
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	330c      	adds	r3, #12
 8007678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800767a:	623a      	str	r2, [r7, #32]
 800767c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800767e:	69f9      	ldr	r1, [r7, #28]
 8007680:	6a3a      	ldr	r2, [r7, #32]
 8007682:	e841 2300 	strex	r3, r2, [r1]
 8007686:	61bb      	str	r3, [r7, #24]
   return(result);
 8007688:	69bb      	ldr	r3, [r7, #24]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d1e5      	bne.n	800765a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f003 0310 	and.w	r3, r3, #16
 8007698:	2b10      	cmp	r3, #16
 800769a:	d10a      	bne.n	80076b2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800769c:	2300      	movs	r3, #0
 800769e:	60fb      	str	r3, [r7, #12]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	60fb      	str	r3, [r7, #12]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	60fb      	str	r3, [r7, #12]
 80076b0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80076b6:	4619      	mov	r1, r3
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f7ff fbe3 	bl	8006e84 <HAL_UARTEx_RxEventCallback>
 80076be:	e002      	b.n	80076c6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f7f9 fa8f 	bl	8000be4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80076c6:	2300      	movs	r3, #0
 80076c8:	e002      	b.n	80076d0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80076ca:	2300      	movs	r3, #0
 80076cc:	e000      	b.n	80076d0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80076ce:	2302      	movs	r3, #2
  }
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3730      	adds	r7, #48	; 0x30
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076dc:	b0c0      	sub	sp, #256	; 0x100
 80076de:	af00      	add	r7, sp, #0
 80076e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	691b      	ldr	r3, [r3, #16]
 80076ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80076f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076f4:	68d9      	ldr	r1, [r3, #12]
 80076f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	ea40 0301 	orr.w	r3, r0, r1
 8007700:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007706:	689a      	ldr	r2, [r3, #8]
 8007708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800770c:	691b      	ldr	r3, [r3, #16]
 800770e:	431a      	orrs	r2, r3
 8007710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007714:	695b      	ldr	r3, [r3, #20]
 8007716:	431a      	orrs	r2, r3
 8007718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800771c:	69db      	ldr	r3, [r3, #28]
 800771e:	4313      	orrs	r3, r2
 8007720:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007730:	f021 010c 	bic.w	r1, r1, #12
 8007734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800773e:	430b      	orrs	r3, r1
 8007740:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	695b      	ldr	r3, [r3, #20]
 800774a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800774e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007752:	6999      	ldr	r1, [r3, #24]
 8007754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	ea40 0301 	orr.w	r3, r0, r1
 800775e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	4b8f      	ldr	r3, [pc, #572]	; (80079a4 <UART_SetConfig+0x2cc>)
 8007768:	429a      	cmp	r2, r3
 800776a:	d005      	beq.n	8007778 <UART_SetConfig+0xa0>
 800776c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	4b8d      	ldr	r3, [pc, #564]	; (80079a8 <UART_SetConfig+0x2d0>)
 8007774:	429a      	cmp	r2, r3
 8007776:	d104      	bne.n	8007782 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007778:	f7fd fb18 	bl	8004dac <HAL_RCC_GetPCLK2Freq>
 800777c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007780:	e003      	b.n	800778a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007782:	f7fd faff 	bl	8004d84 <HAL_RCC_GetPCLK1Freq>
 8007786:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800778a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800778e:	69db      	ldr	r3, [r3, #28]
 8007790:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007794:	f040 810c 	bne.w	80079b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007798:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800779c:	2200      	movs	r2, #0
 800779e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80077a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80077a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80077aa:	4622      	mov	r2, r4
 80077ac:	462b      	mov	r3, r5
 80077ae:	1891      	adds	r1, r2, r2
 80077b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80077b2:	415b      	adcs	r3, r3
 80077b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80077ba:	4621      	mov	r1, r4
 80077bc:	eb12 0801 	adds.w	r8, r2, r1
 80077c0:	4629      	mov	r1, r5
 80077c2:	eb43 0901 	adc.w	r9, r3, r1
 80077c6:	f04f 0200 	mov.w	r2, #0
 80077ca:	f04f 0300 	mov.w	r3, #0
 80077ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80077d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80077d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80077da:	4690      	mov	r8, r2
 80077dc:	4699      	mov	r9, r3
 80077de:	4623      	mov	r3, r4
 80077e0:	eb18 0303 	adds.w	r3, r8, r3
 80077e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80077e8:	462b      	mov	r3, r5
 80077ea:	eb49 0303 	adc.w	r3, r9, r3
 80077ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80077f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80077fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007802:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007806:	460b      	mov	r3, r1
 8007808:	18db      	adds	r3, r3, r3
 800780a:	653b      	str	r3, [r7, #80]	; 0x50
 800780c:	4613      	mov	r3, r2
 800780e:	eb42 0303 	adc.w	r3, r2, r3
 8007812:	657b      	str	r3, [r7, #84]	; 0x54
 8007814:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007818:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800781c:	f7f8 fd50 	bl	80002c0 <__aeabi_uldivmod>
 8007820:	4602      	mov	r2, r0
 8007822:	460b      	mov	r3, r1
 8007824:	4b61      	ldr	r3, [pc, #388]	; (80079ac <UART_SetConfig+0x2d4>)
 8007826:	fba3 2302 	umull	r2, r3, r3, r2
 800782a:	095b      	lsrs	r3, r3, #5
 800782c:	011c      	lsls	r4, r3, #4
 800782e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007832:	2200      	movs	r2, #0
 8007834:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007838:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800783c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007840:	4642      	mov	r2, r8
 8007842:	464b      	mov	r3, r9
 8007844:	1891      	adds	r1, r2, r2
 8007846:	64b9      	str	r1, [r7, #72]	; 0x48
 8007848:	415b      	adcs	r3, r3
 800784a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800784c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007850:	4641      	mov	r1, r8
 8007852:	eb12 0a01 	adds.w	sl, r2, r1
 8007856:	4649      	mov	r1, r9
 8007858:	eb43 0b01 	adc.w	fp, r3, r1
 800785c:	f04f 0200 	mov.w	r2, #0
 8007860:	f04f 0300 	mov.w	r3, #0
 8007864:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007868:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800786c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007870:	4692      	mov	sl, r2
 8007872:	469b      	mov	fp, r3
 8007874:	4643      	mov	r3, r8
 8007876:	eb1a 0303 	adds.w	r3, sl, r3
 800787a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800787e:	464b      	mov	r3, r9
 8007880:	eb4b 0303 	adc.w	r3, fp, r3
 8007884:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007894:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007898:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800789c:	460b      	mov	r3, r1
 800789e:	18db      	adds	r3, r3, r3
 80078a0:	643b      	str	r3, [r7, #64]	; 0x40
 80078a2:	4613      	mov	r3, r2
 80078a4:	eb42 0303 	adc.w	r3, r2, r3
 80078a8:	647b      	str	r3, [r7, #68]	; 0x44
 80078aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80078ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80078b2:	f7f8 fd05 	bl	80002c0 <__aeabi_uldivmod>
 80078b6:	4602      	mov	r2, r0
 80078b8:	460b      	mov	r3, r1
 80078ba:	4611      	mov	r1, r2
 80078bc:	4b3b      	ldr	r3, [pc, #236]	; (80079ac <UART_SetConfig+0x2d4>)
 80078be:	fba3 2301 	umull	r2, r3, r3, r1
 80078c2:	095b      	lsrs	r3, r3, #5
 80078c4:	2264      	movs	r2, #100	; 0x64
 80078c6:	fb02 f303 	mul.w	r3, r2, r3
 80078ca:	1acb      	subs	r3, r1, r3
 80078cc:	00db      	lsls	r3, r3, #3
 80078ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80078d2:	4b36      	ldr	r3, [pc, #216]	; (80079ac <UART_SetConfig+0x2d4>)
 80078d4:	fba3 2302 	umull	r2, r3, r3, r2
 80078d8:	095b      	lsrs	r3, r3, #5
 80078da:	005b      	lsls	r3, r3, #1
 80078dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80078e0:	441c      	add	r4, r3
 80078e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078e6:	2200      	movs	r2, #0
 80078e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80078ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80078f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80078f4:	4642      	mov	r2, r8
 80078f6:	464b      	mov	r3, r9
 80078f8:	1891      	adds	r1, r2, r2
 80078fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80078fc:	415b      	adcs	r3, r3
 80078fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007900:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007904:	4641      	mov	r1, r8
 8007906:	1851      	adds	r1, r2, r1
 8007908:	6339      	str	r1, [r7, #48]	; 0x30
 800790a:	4649      	mov	r1, r9
 800790c:	414b      	adcs	r3, r1
 800790e:	637b      	str	r3, [r7, #52]	; 0x34
 8007910:	f04f 0200 	mov.w	r2, #0
 8007914:	f04f 0300 	mov.w	r3, #0
 8007918:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800791c:	4659      	mov	r1, fp
 800791e:	00cb      	lsls	r3, r1, #3
 8007920:	4651      	mov	r1, sl
 8007922:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007926:	4651      	mov	r1, sl
 8007928:	00ca      	lsls	r2, r1, #3
 800792a:	4610      	mov	r0, r2
 800792c:	4619      	mov	r1, r3
 800792e:	4603      	mov	r3, r0
 8007930:	4642      	mov	r2, r8
 8007932:	189b      	adds	r3, r3, r2
 8007934:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007938:	464b      	mov	r3, r9
 800793a:	460a      	mov	r2, r1
 800793c:	eb42 0303 	adc.w	r3, r2, r3
 8007940:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	2200      	movs	r2, #0
 800794c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007950:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007954:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007958:	460b      	mov	r3, r1
 800795a:	18db      	adds	r3, r3, r3
 800795c:	62bb      	str	r3, [r7, #40]	; 0x28
 800795e:	4613      	mov	r3, r2
 8007960:	eb42 0303 	adc.w	r3, r2, r3
 8007964:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007966:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800796a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800796e:	f7f8 fca7 	bl	80002c0 <__aeabi_uldivmod>
 8007972:	4602      	mov	r2, r0
 8007974:	460b      	mov	r3, r1
 8007976:	4b0d      	ldr	r3, [pc, #52]	; (80079ac <UART_SetConfig+0x2d4>)
 8007978:	fba3 1302 	umull	r1, r3, r3, r2
 800797c:	095b      	lsrs	r3, r3, #5
 800797e:	2164      	movs	r1, #100	; 0x64
 8007980:	fb01 f303 	mul.w	r3, r1, r3
 8007984:	1ad3      	subs	r3, r2, r3
 8007986:	00db      	lsls	r3, r3, #3
 8007988:	3332      	adds	r3, #50	; 0x32
 800798a:	4a08      	ldr	r2, [pc, #32]	; (80079ac <UART_SetConfig+0x2d4>)
 800798c:	fba2 2303 	umull	r2, r3, r2, r3
 8007990:	095b      	lsrs	r3, r3, #5
 8007992:	f003 0207 	and.w	r2, r3, #7
 8007996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4422      	add	r2, r4
 800799e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80079a0:	e105      	b.n	8007bae <UART_SetConfig+0x4d6>
 80079a2:	bf00      	nop
 80079a4:	40011000 	.word	0x40011000
 80079a8:	40011400 	.word	0x40011400
 80079ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80079b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079b4:	2200      	movs	r2, #0
 80079b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80079ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80079be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80079c2:	4642      	mov	r2, r8
 80079c4:	464b      	mov	r3, r9
 80079c6:	1891      	adds	r1, r2, r2
 80079c8:	6239      	str	r1, [r7, #32]
 80079ca:	415b      	adcs	r3, r3
 80079cc:	627b      	str	r3, [r7, #36]	; 0x24
 80079ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80079d2:	4641      	mov	r1, r8
 80079d4:	1854      	adds	r4, r2, r1
 80079d6:	4649      	mov	r1, r9
 80079d8:	eb43 0501 	adc.w	r5, r3, r1
 80079dc:	f04f 0200 	mov.w	r2, #0
 80079e0:	f04f 0300 	mov.w	r3, #0
 80079e4:	00eb      	lsls	r3, r5, #3
 80079e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80079ea:	00e2      	lsls	r2, r4, #3
 80079ec:	4614      	mov	r4, r2
 80079ee:	461d      	mov	r5, r3
 80079f0:	4643      	mov	r3, r8
 80079f2:	18e3      	adds	r3, r4, r3
 80079f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80079f8:	464b      	mov	r3, r9
 80079fa:	eb45 0303 	adc.w	r3, r5, r3
 80079fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007a0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007a12:	f04f 0200 	mov.w	r2, #0
 8007a16:	f04f 0300 	mov.w	r3, #0
 8007a1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007a1e:	4629      	mov	r1, r5
 8007a20:	008b      	lsls	r3, r1, #2
 8007a22:	4621      	mov	r1, r4
 8007a24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a28:	4621      	mov	r1, r4
 8007a2a:	008a      	lsls	r2, r1, #2
 8007a2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007a30:	f7f8 fc46 	bl	80002c0 <__aeabi_uldivmod>
 8007a34:	4602      	mov	r2, r0
 8007a36:	460b      	mov	r3, r1
 8007a38:	4b60      	ldr	r3, [pc, #384]	; (8007bbc <UART_SetConfig+0x4e4>)
 8007a3a:	fba3 2302 	umull	r2, r3, r3, r2
 8007a3e:	095b      	lsrs	r3, r3, #5
 8007a40:	011c      	lsls	r4, r3, #4
 8007a42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a46:	2200      	movs	r2, #0
 8007a48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007a4c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007a50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007a54:	4642      	mov	r2, r8
 8007a56:	464b      	mov	r3, r9
 8007a58:	1891      	adds	r1, r2, r2
 8007a5a:	61b9      	str	r1, [r7, #24]
 8007a5c:	415b      	adcs	r3, r3
 8007a5e:	61fb      	str	r3, [r7, #28]
 8007a60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a64:	4641      	mov	r1, r8
 8007a66:	1851      	adds	r1, r2, r1
 8007a68:	6139      	str	r1, [r7, #16]
 8007a6a:	4649      	mov	r1, r9
 8007a6c:	414b      	adcs	r3, r1
 8007a6e:	617b      	str	r3, [r7, #20]
 8007a70:	f04f 0200 	mov.w	r2, #0
 8007a74:	f04f 0300 	mov.w	r3, #0
 8007a78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007a7c:	4659      	mov	r1, fp
 8007a7e:	00cb      	lsls	r3, r1, #3
 8007a80:	4651      	mov	r1, sl
 8007a82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a86:	4651      	mov	r1, sl
 8007a88:	00ca      	lsls	r2, r1, #3
 8007a8a:	4610      	mov	r0, r2
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	4603      	mov	r3, r0
 8007a90:	4642      	mov	r2, r8
 8007a92:	189b      	adds	r3, r3, r2
 8007a94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007a98:	464b      	mov	r3, r9
 8007a9a:	460a      	mov	r2, r1
 8007a9c:	eb42 0303 	adc.w	r3, r2, r3
 8007aa0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	67bb      	str	r3, [r7, #120]	; 0x78
 8007aae:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007ab0:	f04f 0200 	mov.w	r2, #0
 8007ab4:	f04f 0300 	mov.w	r3, #0
 8007ab8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007abc:	4649      	mov	r1, r9
 8007abe:	008b      	lsls	r3, r1, #2
 8007ac0:	4641      	mov	r1, r8
 8007ac2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ac6:	4641      	mov	r1, r8
 8007ac8:	008a      	lsls	r2, r1, #2
 8007aca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007ace:	f7f8 fbf7 	bl	80002c0 <__aeabi_uldivmod>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	460b      	mov	r3, r1
 8007ad6:	4b39      	ldr	r3, [pc, #228]	; (8007bbc <UART_SetConfig+0x4e4>)
 8007ad8:	fba3 1302 	umull	r1, r3, r3, r2
 8007adc:	095b      	lsrs	r3, r3, #5
 8007ade:	2164      	movs	r1, #100	; 0x64
 8007ae0:	fb01 f303 	mul.w	r3, r1, r3
 8007ae4:	1ad3      	subs	r3, r2, r3
 8007ae6:	011b      	lsls	r3, r3, #4
 8007ae8:	3332      	adds	r3, #50	; 0x32
 8007aea:	4a34      	ldr	r2, [pc, #208]	; (8007bbc <UART_SetConfig+0x4e4>)
 8007aec:	fba2 2303 	umull	r2, r3, r2, r3
 8007af0:	095b      	lsrs	r3, r3, #5
 8007af2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007af6:	441c      	add	r4, r3
 8007af8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007afc:	2200      	movs	r2, #0
 8007afe:	673b      	str	r3, [r7, #112]	; 0x70
 8007b00:	677a      	str	r2, [r7, #116]	; 0x74
 8007b02:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007b06:	4642      	mov	r2, r8
 8007b08:	464b      	mov	r3, r9
 8007b0a:	1891      	adds	r1, r2, r2
 8007b0c:	60b9      	str	r1, [r7, #8]
 8007b0e:	415b      	adcs	r3, r3
 8007b10:	60fb      	str	r3, [r7, #12]
 8007b12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007b16:	4641      	mov	r1, r8
 8007b18:	1851      	adds	r1, r2, r1
 8007b1a:	6039      	str	r1, [r7, #0]
 8007b1c:	4649      	mov	r1, r9
 8007b1e:	414b      	adcs	r3, r1
 8007b20:	607b      	str	r3, [r7, #4]
 8007b22:	f04f 0200 	mov.w	r2, #0
 8007b26:	f04f 0300 	mov.w	r3, #0
 8007b2a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007b2e:	4659      	mov	r1, fp
 8007b30:	00cb      	lsls	r3, r1, #3
 8007b32:	4651      	mov	r1, sl
 8007b34:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b38:	4651      	mov	r1, sl
 8007b3a:	00ca      	lsls	r2, r1, #3
 8007b3c:	4610      	mov	r0, r2
 8007b3e:	4619      	mov	r1, r3
 8007b40:	4603      	mov	r3, r0
 8007b42:	4642      	mov	r2, r8
 8007b44:	189b      	adds	r3, r3, r2
 8007b46:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b48:	464b      	mov	r3, r9
 8007b4a:	460a      	mov	r2, r1
 8007b4c:	eb42 0303 	adc.w	r3, r2, r3
 8007b50:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	663b      	str	r3, [r7, #96]	; 0x60
 8007b5c:	667a      	str	r2, [r7, #100]	; 0x64
 8007b5e:	f04f 0200 	mov.w	r2, #0
 8007b62:	f04f 0300 	mov.w	r3, #0
 8007b66:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007b6a:	4649      	mov	r1, r9
 8007b6c:	008b      	lsls	r3, r1, #2
 8007b6e:	4641      	mov	r1, r8
 8007b70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b74:	4641      	mov	r1, r8
 8007b76:	008a      	lsls	r2, r1, #2
 8007b78:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007b7c:	f7f8 fba0 	bl	80002c0 <__aeabi_uldivmod>
 8007b80:	4602      	mov	r2, r0
 8007b82:	460b      	mov	r3, r1
 8007b84:	4b0d      	ldr	r3, [pc, #52]	; (8007bbc <UART_SetConfig+0x4e4>)
 8007b86:	fba3 1302 	umull	r1, r3, r3, r2
 8007b8a:	095b      	lsrs	r3, r3, #5
 8007b8c:	2164      	movs	r1, #100	; 0x64
 8007b8e:	fb01 f303 	mul.w	r3, r1, r3
 8007b92:	1ad3      	subs	r3, r2, r3
 8007b94:	011b      	lsls	r3, r3, #4
 8007b96:	3332      	adds	r3, #50	; 0x32
 8007b98:	4a08      	ldr	r2, [pc, #32]	; (8007bbc <UART_SetConfig+0x4e4>)
 8007b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b9e:	095b      	lsrs	r3, r3, #5
 8007ba0:	f003 020f 	and.w	r2, r3, #15
 8007ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4422      	add	r2, r4
 8007bac:	609a      	str	r2, [r3, #8]
}
 8007bae:	bf00      	nop
 8007bb0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007bba:	bf00      	nop
 8007bbc:	51eb851f 	.word	0x51eb851f

08007bc0 <__NVIC_SetPriority>:
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b083      	sub	sp, #12
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	6039      	str	r1, [r7, #0]
 8007bca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	db0a      	blt.n	8007bea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	b2da      	uxtb	r2, r3
 8007bd8:	490c      	ldr	r1, [pc, #48]	; (8007c0c <__NVIC_SetPriority+0x4c>)
 8007bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bde:	0112      	lsls	r2, r2, #4
 8007be0:	b2d2      	uxtb	r2, r2
 8007be2:	440b      	add	r3, r1
 8007be4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007be8:	e00a      	b.n	8007c00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	b2da      	uxtb	r2, r3
 8007bee:	4908      	ldr	r1, [pc, #32]	; (8007c10 <__NVIC_SetPriority+0x50>)
 8007bf0:	79fb      	ldrb	r3, [r7, #7]
 8007bf2:	f003 030f 	and.w	r3, r3, #15
 8007bf6:	3b04      	subs	r3, #4
 8007bf8:	0112      	lsls	r2, r2, #4
 8007bfa:	b2d2      	uxtb	r2, r2
 8007bfc:	440b      	add	r3, r1
 8007bfe:	761a      	strb	r2, [r3, #24]
}
 8007c00:	bf00      	nop
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr
 8007c0c:	e000e100 	.word	0xe000e100
 8007c10:	e000ed00 	.word	0xe000ed00

08007c14 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007c14:	b580      	push	{r7, lr}
 8007c16:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007c18:	4b05      	ldr	r3, [pc, #20]	; (8007c30 <SysTick_Handler+0x1c>)
 8007c1a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007c1c:	f002 fe0a 	bl	800a834 <xTaskGetSchedulerState>
 8007c20:	4603      	mov	r3, r0
 8007c22:	2b01      	cmp	r3, #1
 8007c24:	d001      	beq.n	8007c2a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007c26:	f003 fda7 	bl	800b778 <xPortSysTickHandler>
  }
}
 8007c2a:	bf00      	nop
 8007c2c:	bd80      	pop	{r7, pc}
 8007c2e:	bf00      	nop
 8007c30:	e000e010 	.word	0xe000e010

08007c34 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007c34:	b580      	push	{r7, lr}
 8007c36:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007c38:	2100      	movs	r1, #0
 8007c3a:	f06f 0004 	mvn.w	r0, #4
 8007c3e:	f7ff ffbf 	bl	8007bc0 <__NVIC_SetPriority>
#endif
}
 8007c42:	bf00      	nop
 8007c44:	bd80      	pop	{r7, pc}
	...

08007c48 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007c48:	b480      	push	{r7}
 8007c4a:	b083      	sub	sp, #12
 8007c4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c4e:	f3ef 8305 	mrs	r3, IPSR
 8007c52:	603b      	str	r3, [r7, #0]
  return(result);
 8007c54:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d003      	beq.n	8007c62 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007c5a:	f06f 0305 	mvn.w	r3, #5
 8007c5e:	607b      	str	r3, [r7, #4]
 8007c60:	e00c      	b.n	8007c7c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007c62:	4b0a      	ldr	r3, [pc, #40]	; (8007c8c <osKernelInitialize+0x44>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d105      	bne.n	8007c76 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007c6a:	4b08      	ldr	r3, [pc, #32]	; (8007c8c <osKernelInitialize+0x44>)
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007c70:	2300      	movs	r3, #0
 8007c72:	607b      	str	r3, [r7, #4]
 8007c74:	e002      	b.n	8007c7c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007c76:	f04f 33ff 	mov.w	r3, #4294967295
 8007c7a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007c7c:	687b      	ldr	r3, [r7, #4]
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	370c      	adds	r7, #12
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr
 8007c8a:	bf00      	nop
 8007c8c:	2000070c 	.word	0x2000070c

08007c90 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b082      	sub	sp, #8
 8007c94:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c96:	f3ef 8305 	mrs	r3, IPSR
 8007c9a:	603b      	str	r3, [r7, #0]
  return(result);
 8007c9c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d003      	beq.n	8007caa <osKernelStart+0x1a>
    stat = osErrorISR;
 8007ca2:	f06f 0305 	mvn.w	r3, #5
 8007ca6:	607b      	str	r3, [r7, #4]
 8007ca8:	e010      	b.n	8007ccc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007caa:	4b0b      	ldr	r3, [pc, #44]	; (8007cd8 <osKernelStart+0x48>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d109      	bne.n	8007cc6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007cb2:	f7ff ffbf 	bl	8007c34 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007cb6:	4b08      	ldr	r3, [pc, #32]	; (8007cd8 <osKernelStart+0x48>)
 8007cb8:	2202      	movs	r2, #2
 8007cba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007cbc:	f002 f962 	bl	8009f84 <vTaskStartScheduler>
      stat = osOK;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	607b      	str	r3, [r7, #4]
 8007cc4:	e002      	b.n	8007ccc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8007cca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007ccc:	687b      	ldr	r3, [r7, #4]
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3708      	adds	r7, #8
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	2000070c 	.word	0x2000070c

08007cdc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b08e      	sub	sp, #56	; 0x38
 8007ce0:	af04      	add	r7, sp, #16
 8007ce2:	60f8      	str	r0, [r7, #12]
 8007ce4:	60b9      	str	r1, [r7, #8]
 8007ce6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007cec:	f3ef 8305 	mrs	r3, IPSR
 8007cf0:	617b      	str	r3, [r7, #20]
  return(result);
 8007cf2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d17e      	bne.n	8007df6 <osThreadNew+0x11a>
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d07b      	beq.n	8007df6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007cfe:	2380      	movs	r3, #128	; 0x80
 8007d00:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007d02:	2318      	movs	r3, #24
 8007d04:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007d06:	2300      	movs	r3, #0
 8007d08:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8007d0e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d045      	beq.n	8007da2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d002      	beq.n	8007d24 <osThreadNew+0x48>
        name = attr->name;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	699b      	ldr	r3, [r3, #24]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d002      	beq.n	8007d32 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	699b      	ldr	r3, [r3, #24]
 8007d30:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007d32:	69fb      	ldr	r3, [r7, #28]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d008      	beq.n	8007d4a <osThreadNew+0x6e>
 8007d38:	69fb      	ldr	r3, [r7, #28]
 8007d3a:	2b38      	cmp	r3, #56	; 0x38
 8007d3c:	d805      	bhi.n	8007d4a <osThreadNew+0x6e>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	f003 0301 	and.w	r3, r3, #1
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d001      	beq.n	8007d4e <osThreadNew+0x72>
        return (NULL);
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	e054      	b.n	8007df8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	695b      	ldr	r3, [r3, #20]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d003      	beq.n	8007d5e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	695b      	ldr	r3, [r3, #20]
 8007d5a:	089b      	lsrs	r3, r3, #2
 8007d5c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	689b      	ldr	r3, [r3, #8]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d00e      	beq.n	8007d84 <osThreadNew+0xa8>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	68db      	ldr	r3, [r3, #12]
 8007d6a:	2b5b      	cmp	r3, #91	; 0x5b
 8007d6c:	d90a      	bls.n	8007d84 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d006      	beq.n	8007d84 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	695b      	ldr	r3, [r3, #20]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d002      	beq.n	8007d84 <osThreadNew+0xa8>
        mem = 1;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	61bb      	str	r3, [r7, #24]
 8007d82:	e010      	b.n	8007da6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d10c      	bne.n	8007da6 <osThreadNew+0xca>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	68db      	ldr	r3, [r3, #12]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d108      	bne.n	8007da6 <osThreadNew+0xca>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	691b      	ldr	r3, [r3, #16]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d104      	bne.n	8007da6 <osThreadNew+0xca>
          mem = 0;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	61bb      	str	r3, [r7, #24]
 8007da0:	e001      	b.n	8007da6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007da2:	2300      	movs	r3, #0
 8007da4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007da6:	69bb      	ldr	r3, [r7, #24]
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d110      	bne.n	8007dce <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007db4:	9202      	str	r2, [sp, #8]
 8007db6:	9301      	str	r3, [sp, #4]
 8007db8:	69fb      	ldr	r3, [r7, #28]
 8007dba:	9300      	str	r3, [sp, #0]
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	6a3a      	ldr	r2, [r7, #32]
 8007dc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007dc2:	68f8      	ldr	r0, [r7, #12]
 8007dc4:	f001 fe30 	bl	8009a28 <xTaskCreateStatic>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	613b      	str	r3, [r7, #16]
 8007dcc:	e013      	b.n	8007df6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007dce:	69bb      	ldr	r3, [r7, #24]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d110      	bne.n	8007df6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007dd4:	6a3b      	ldr	r3, [r7, #32]
 8007dd6:	b29a      	uxth	r2, r3
 8007dd8:	f107 0310 	add.w	r3, r7, #16
 8007ddc:	9301      	str	r3, [sp, #4]
 8007dde:	69fb      	ldr	r3, [r7, #28]
 8007de0:	9300      	str	r3, [sp, #0]
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007de6:	68f8      	ldr	r0, [r7, #12]
 8007de8:	f001 fe7b 	bl	8009ae2 <xTaskCreate>
 8007dec:	4603      	mov	r3, r0
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d001      	beq.n	8007df6 <osThreadNew+0x11a>
            hTask = NULL;
 8007df2:	2300      	movs	r3, #0
 8007df4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007df6:	693b      	ldr	r3, [r7, #16]
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3728      	adds	r7, #40	; 0x28
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b086      	sub	sp, #24
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e0c:	f3ef 8305 	mrs	r3, IPSR
 8007e10:	60bb      	str	r3, [r7, #8]
  return(result);
 8007e12:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d003      	beq.n	8007e20 <osThreadTerminate+0x20>
    stat = osErrorISR;
 8007e18:	f06f 0305 	mvn.w	r3, #5
 8007e1c:	617b      	str	r3, [r7, #20]
 8007e1e:	e017      	b.n	8007e50 <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d103      	bne.n	8007e2e <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 8007e26:	f06f 0303 	mvn.w	r3, #3
 8007e2a:	617b      	str	r3, [r7, #20]
 8007e2c:	e010      	b.n	8007e50 <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 8007e2e:	6938      	ldr	r0, [r7, #16]
 8007e30:	f002 f842 	bl	8009eb8 <eTaskGetState>
 8007e34:	4603      	mov	r3, r0
 8007e36:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 8007e38:	7bfb      	ldrb	r3, [r7, #15]
 8007e3a:	2b04      	cmp	r3, #4
 8007e3c:	d005      	beq.n	8007e4a <osThreadTerminate+0x4a>
      stat = osOK;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 8007e42:	6938      	ldr	r0, [r7, #16]
 8007e44:	f001 ff92 	bl	8009d6c <vTaskDelete>
 8007e48:	e002      	b.n	8007e50 <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 8007e4a:	f06f 0302 	mvn.w	r3, #2
 8007e4e:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 8007e50:	697b      	ldr	r3, [r7, #20]
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3718      	adds	r7, #24
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}

08007e5a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007e5a:	b580      	push	{r7, lr}
 8007e5c:	b084      	sub	sp, #16
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e62:	f3ef 8305 	mrs	r3, IPSR
 8007e66:	60bb      	str	r3, [r7, #8]
  return(result);
 8007e68:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d003      	beq.n	8007e76 <osDelay+0x1c>
    stat = osErrorISR;
 8007e6e:	f06f 0305 	mvn.w	r3, #5
 8007e72:	60fb      	str	r3, [r7, #12]
 8007e74:	e007      	b.n	8007e86 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007e76:	2300      	movs	r3, #0
 8007e78:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d002      	beq.n	8007e86 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f001 ffe5 	bl	8009e50 <vTaskDelay>
    }
  }

  return (stat);
 8007e86:	68fb      	ldr	r3, [r7, #12]
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3710      	adds	r7, #16
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f003 fa91 	bl	800b3c0 <pvTimerGetTimerID>
 8007e9e:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d005      	beq.n	8007eb2 <TimerCallback+0x22>
    callb->func (callb->arg);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	68fa      	ldr	r2, [r7, #12]
 8007eac:	6852      	ldr	r2, [r2, #4]
 8007eae:	4610      	mov	r0, r2
 8007eb0:	4798      	blx	r3
  }
}
 8007eb2:	bf00      	nop
 8007eb4:	3710      	adds	r7, #16
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}
	...

08007ebc <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b08c      	sub	sp, #48	; 0x30
 8007ec0:	af02      	add	r7, sp, #8
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	607a      	str	r2, [r7, #4]
 8007ec6:	603b      	str	r3, [r7, #0]
 8007ec8:	460b      	mov	r3, r1
 8007eca:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ed0:	f3ef 8305 	mrs	r3, IPSR
 8007ed4:	613b      	str	r3, [r7, #16]
  return(result);
 8007ed6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d163      	bne.n	8007fa4 <osTimerNew+0xe8>
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d060      	beq.n	8007fa4 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8007ee2:	2008      	movs	r0, #8
 8007ee4:	f003 fcd8 	bl	800b898 <pvPortMalloc>
 8007ee8:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d059      	beq.n	8007fa4 <osTimerNew+0xe8>
      callb->func = func;
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	68fa      	ldr	r2, [r7, #12]
 8007ef4:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	687a      	ldr	r2, [r7, #4]
 8007efa:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8007efc:	7afb      	ldrb	r3, [r7, #11]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d102      	bne.n	8007f08 <osTimerNew+0x4c>
        reload = pdFALSE;
 8007f02:	2300      	movs	r3, #0
 8007f04:	61fb      	str	r3, [r7, #28]
 8007f06:	e001      	b.n	8007f0c <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8007f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8007f10:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8007f12:	2300      	movs	r3, #0
 8007f14:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d01c      	beq.n	8007f56 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d002      	beq.n	8007f2a <osTimerNew+0x6e>
          name = attr->name;
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	689b      	ldr	r3, [r3, #8]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d006      	beq.n	8007f40 <osTimerNew+0x84>
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	68db      	ldr	r3, [r3, #12]
 8007f36:	2b2b      	cmp	r3, #43	; 0x2b
 8007f38:	d902      	bls.n	8007f40 <osTimerNew+0x84>
          mem = 1;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	61bb      	str	r3, [r7, #24]
 8007f3e:	e00c      	b.n	8007f5a <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	689b      	ldr	r3, [r3, #8]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d108      	bne.n	8007f5a <osTimerNew+0x9e>
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	68db      	ldr	r3, [r3, #12]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d104      	bne.n	8007f5a <osTimerNew+0x9e>
            mem = 0;
 8007f50:	2300      	movs	r3, #0
 8007f52:	61bb      	str	r3, [r7, #24]
 8007f54:	e001      	b.n	8007f5a <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8007f56:	2300      	movs	r3, #0
 8007f58:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8007f5a:	69bb      	ldr	r3, [r7, #24]
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d10c      	bne.n	8007f7a <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	9301      	str	r3, [sp, #4]
 8007f66:	4b12      	ldr	r3, [pc, #72]	; (8007fb0 <osTimerNew+0xf4>)
 8007f68:	9300      	str	r3, [sp, #0]
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	69fa      	ldr	r2, [r7, #28]
 8007f6e:	2101      	movs	r1, #1
 8007f70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007f72:	f002 fea6 	bl	800acc2 <xTimerCreateStatic>
 8007f76:	6238      	str	r0, [r7, #32]
 8007f78:	e00b      	b.n	8007f92 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8007f7a:	69bb      	ldr	r3, [r7, #24]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d108      	bne.n	8007f92 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8007f80:	4b0b      	ldr	r3, [pc, #44]	; (8007fb0 <osTimerNew+0xf4>)
 8007f82:	9300      	str	r3, [sp, #0]
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	69fa      	ldr	r2, [r7, #28]
 8007f88:	2101      	movs	r1, #1
 8007f8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007f8c:	f002 fe78 	bl	800ac80 <xTimerCreate>
 8007f90:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8007f92:	6a3b      	ldr	r3, [r7, #32]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d105      	bne.n	8007fa4 <osTimerNew+0xe8>
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d002      	beq.n	8007fa4 <osTimerNew+0xe8>
        vPortFree (callb);
 8007f9e:	6978      	ldr	r0, [r7, #20]
 8007fa0:	f003 fd46 	bl	800ba30 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8007fa4:	6a3b      	ldr	r3, [r7, #32]
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3728      	adds	r7, #40	; 0x28
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
 8007fae:	bf00      	nop
 8007fb0:	08007e91 	.word	0x08007e91

08007fb4 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b088      	sub	sp, #32
 8007fb8:	af02      	add	r7, sp, #8
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007fc2:	f3ef 8305 	mrs	r3, IPSR
 8007fc6:	60fb      	str	r3, [r7, #12]
  return(result);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d003      	beq.n	8007fd6 <osTimerStart+0x22>
    stat = osErrorISR;
 8007fce:	f06f 0305 	mvn.w	r3, #5
 8007fd2:	617b      	str	r3, [r7, #20]
 8007fd4:	e017      	b.n	8008006 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d103      	bne.n	8007fe4 <osTimerStart+0x30>
    stat = osErrorParameter;
 8007fdc:	f06f 0303 	mvn.w	r3, #3
 8007fe0:	617b      	str	r3, [r7, #20]
 8007fe2:	e010      	b.n	8008006 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	9300      	str	r3, [sp, #0]
 8007fe8:	2300      	movs	r3, #0
 8007fea:	683a      	ldr	r2, [r7, #0]
 8007fec:	2104      	movs	r1, #4
 8007fee:	6938      	ldr	r0, [r7, #16]
 8007ff0:	f002 fee0 	bl	800adb4 <xTimerGenericCommand>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	d102      	bne.n	8008000 <osTimerStart+0x4c>
      stat = osOK;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	617b      	str	r3, [r7, #20]
 8007ffe:	e002      	b.n	8008006 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8008000:	f06f 0302 	mvn.w	r3, #2
 8008004:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8008006:	697b      	ldr	r3, [r7, #20]
}
 8008008:	4618      	mov	r0, r3
 800800a:	3718      	adds	r7, #24
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8008010:	b580      	push	{r7, lr}
 8008012:	b088      	sub	sp, #32
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8008018:	2300      	movs	r3, #0
 800801a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800801c:	f3ef 8305 	mrs	r3, IPSR
 8008020:	60bb      	str	r3, [r7, #8]
  return(result);
 8008022:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8008024:	2b00      	cmp	r3, #0
 8008026:	d174      	bne.n	8008112 <osMutexNew+0x102>
    if (attr != NULL) {
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d003      	beq.n	8008036 <osMutexNew+0x26>
      type = attr->attr_bits;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	61bb      	str	r3, [r7, #24]
 8008034:	e001      	b.n	800803a <osMutexNew+0x2a>
    } else {
      type = 0U;
 8008036:	2300      	movs	r3, #0
 8008038:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800803a:	69bb      	ldr	r3, [r7, #24]
 800803c:	f003 0301 	and.w	r3, r3, #1
 8008040:	2b00      	cmp	r3, #0
 8008042:	d002      	beq.n	800804a <osMutexNew+0x3a>
      rmtx = 1U;
 8008044:	2301      	movs	r3, #1
 8008046:	617b      	str	r3, [r7, #20]
 8008048:	e001      	b.n	800804e <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800804a:	2300      	movs	r3, #0
 800804c:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800804e:	69bb      	ldr	r3, [r7, #24]
 8008050:	f003 0308 	and.w	r3, r3, #8
 8008054:	2b00      	cmp	r3, #0
 8008056:	d15c      	bne.n	8008112 <osMutexNew+0x102>
      mem = -1;
 8008058:	f04f 33ff 	mov.w	r3, #4294967295
 800805c:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d015      	beq.n	8008090 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d006      	beq.n	800807a <osMutexNew+0x6a>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	68db      	ldr	r3, [r3, #12]
 8008070:	2b4f      	cmp	r3, #79	; 0x4f
 8008072:	d902      	bls.n	800807a <osMutexNew+0x6a>
          mem = 1;
 8008074:	2301      	movs	r3, #1
 8008076:	613b      	str	r3, [r7, #16]
 8008078:	e00c      	b.n	8008094 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d108      	bne.n	8008094 <osMutexNew+0x84>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	68db      	ldr	r3, [r3, #12]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d104      	bne.n	8008094 <osMutexNew+0x84>
            mem = 0;
 800808a:	2300      	movs	r3, #0
 800808c:	613b      	str	r3, [r7, #16]
 800808e:	e001      	b.n	8008094 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8008090:	2300      	movs	r3, #0
 8008092:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	2b01      	cmp	r3, #1
 8008098:	d112      	bne.n	80080c0 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d007      	beq.n	80080b0 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	4619      	mov	r1, r3
 80080a6:	2004      	movs	r0, #4
 80080a8:	f000 fd69 	bl	8008b7e <xQueueCreateMutexStatic>
 80080ac:	61f8      	str	r0, [r7, #28]
 80080ae:	e016      	b.n	80080de <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	4619      	mov	r1, r3
 80080b6:	2001      	movs	r0, #1
 80080b8:	f000 fd61 	bl	8008b7e <xQueueCreateMutexStatic>
 80080bc:	61f8      	str	r0, [r7, #28]
 80080be:	e00e      	b.n	80080de <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d10b      	bne.n	80080de <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d004      	beq.n	80080d6 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80080cc:	2004      	movs	r0, #4
 80080ce:	f000 fd3e 	bl	8008b4e <xQueueCreateMutex>
 80080d2:	61f8      	str	r0, [r7, #28]
 80080d4:	e003      	b.n	80080de <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80080d6:	2001      	movs	r0, #1
 80080d8:	f000 fd39 	bl	8008b4e <xQueueCreateMutex>
 80080dc:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80080de:	69fb      	ldr	r3, [r7, #28]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d00c      	beq.n	80080fe <osMutexNew+0xee>
        if (attr != NULL) {
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d003      	beq.n	80080f2 <osMutexNew+0xe2>
          name = attr->name;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	60fb      	str	r3, [r7, #12]
 80080f0:	e001      	b.n	80080f6 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80080f2:	2300      	movs	r3, #0
 80080f4:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80080f6:	68f9      	ldr	r1, [r7, #12]
 80080f8:	69f8      	ldr	r0, [r7, #28]
 80080fa:	f001 fc0d 	bl	8009918 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80080fe:	69fb      	ldr	r3, [r7, #28]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d006      	beq.n	8008112 <osMutexNew+0x102>
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d003      	beq.n	8008112 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800810a:	69fb      	ldr	r3, [r7, #28]
 800810c:	f043 0301 	orr.w	r3, r3, #1
 8008110:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8008112:	69fb      	ldr	r3, [r7, #28]
}
 8008114:	4618      	mov	r0, r3
 8008116:	3720      	adds	r7, #32
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800811c:	b580      	push	{r7, lr}
 800811e:	b086      	sub	sp, #24
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f023 0301 	bic.w	r3, r3, #1
 800812c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f003 0301 	and.w	r3, r3, #1
 8008134:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008136:	2300      	movs	r3, #0
 8008138:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800813a:	f3ef 8305 	mrs	r3, IPSR
 800813e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008140:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8008142:	2b00      	cmp	r3, #0
 8008144:	d003      	beq.n	800814e <osMutexAcquire+0x32>
    stat = osErrorISR;
 8008146:	f06f 0305 	mvn.w	r3, #5
 800814a:	617b      	str	r3, [r7, #20]
 800814c:	e02c      	b.n	80081a8 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d103      	bne.n	800815c <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8008154:	f06f 0303 	mvn.w	r3, #3
 8008158:	617b      	str	r3, [r7, #20]
 800815a:	e025      	b.n	80081a8 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d011      	beq.n	8008186 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8008162:	6839      	ldr	r1, [r7, #0]
 8008164:	6938      	ldr	r0, [r7, #16]
 8008166:	f000 fd59 	bl	8008c1c <xQueueTakeMutexRecursive>
 800816a:	4603      	mov	r3, r0
 800816c:	2b01      	cmp	r3, #1
 800816e:	d01b      	beq.n	80081a8 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d003      	beq.n	800817e <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8008176:	f06f 0301 	mvn.w	r3, #1
 800817a:	617b      	str	r3, [r7, #20]
 800817c:	e014      	b.n	80081a8 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800817e:	f06f 0302 	mvn.w	r3, #2
 8008182:	617b      	str	r3, [r7, #20]
 8008184:	e010      	b.n	80081a8 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8008186:	6839      	ldr	r1, [r7, #0]
 8008188:	6938      	ldr	r0, [r7, #16]
 800818a:	f001 f8ed 	bl	8009368 <xQueueSemaphoreTake>
 800818e:	4603      	mov	r3, r0
 8008190:	2b01      	cmp	r3, #1
 8008192:	d009      	beq.n	80081a8 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d003      	beq.n	80081a2 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800819a:	f06f 0301 	mvn.w	r3, #1
 800819e:	617b      	str	r3, [r7, #20]
 80081a0:	e002      	b.n	80081a8 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80081a2:	f06f 0302 	mvn.w	r3, #2
 80081a6:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80081a8:	697b      	ldr	r3, [r7, #20]
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3718      	adds	r7, #24
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}

080081b2 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80081b2:	b580      	push	{r7, lr}
 80081b4:	b086      	sub	sp, #24
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f023 0301 	bic.w	r3, r3, #1
 80081c0:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f003 0301 	and.w	r3, r3, #1
 80081c8:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80081ca:	2300      	movs	r3, #0
 80081cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081ce:	f3ef 8305 	mrs	r3, IPSR
 80081d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80081d4:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d003      	beq.n	80081e2 <osMutexRelease+0x30>
    stat = osErrorISR;
 80081da:	f06f 0305 	mvn.w	r3, #5
 80081de:	617b      	str	r3, [r7, #20]
 80081e0:	e01f      	b.n	8008222 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d103      	bne.n	80081f0 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80081e8:	f06f 0303 	mvn.w	r3, #3
 80081ec:	617b      	str	r3, [r7, #20]
 80081ee:	e018      	b.n	8008222 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d009      	beq.n	800820a <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80081f6:	6938      	ldr	r0, [r7, #16]
 80081f8:	f000 fcdc 	bl	8008bb4 <xQueueGiveMutexRecursive>
 80081fc:	4603      	mov	r3, r0
 80081fe:	2b01      	cmp	r3, #1
 8008200:	d00f      	beq.n	8008222 <osMutexRelease+0x70>
        stat = osErrorResource;
 8008202:	f06f 0302 	mvn.w	r3, #2
 8008206:	617b      	str	r3, [r7, #20]
 8008208:	e00b      	b.n	8008222 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800820a:	2300      	movs	r3, #0
 800820c:	2200      	movs	r2, #0
 800820e:	2100      	movs	r1, #0
 8008210:	6938      	ldr	r0, [r7, #16]
 8008212:	f000 fda3 	bl	8008d5c <xQueueGenericSend>
 8008216:	4603      	mov	r3, r0
 8008218:	2b01      	cmp	r3, #1
 800821a:	d002      	beq.n	8008222 <osMutexRelease+0x70>
        stat = osErrorResource;
 800821c:	f06f 0302 	mvn.w	r3, #2
 8008220:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008222:	697b      	ldr	r3, [r7, #20]
}
 8008224:	4618      	mov	r0, r3
 8008226:	3718      	adds	r7, #24
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}

0800822c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800822c:	b580      	push	{r7, lr}
 800822e:	b08a      	sub	sp, #40	; 0x28
 8008230:	af02      	add	r7, sp, #8
 8008232:	60f8      	str	r0, [r7, #12]
 8008234:	60b9      	str	r1, [r7, #8]
 8008236:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008238:	2300      	movs	r3, #0
 800823a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800823c:	f3ef 8305 	mrs	r3, IPSR
 8008240:	613b      	str	r3, [r7, #16]
  return(result);
 8008242:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008244:	2b00      	cmp	r3, #0
 8008246:	d175      	bne.n	8008334 <osSemaphoreNew+0x108>
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d072      	beq.n	8008334 <osSemaphoreNew+0x108>
 800824e:	68ba      	ldr	r2, [r7, #8]
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	429a      	cmp	r2, r3
 8008254:	d86e      	bhi.n	8008334 <osSemaphoreNew+0x108>
    mem = -1;
 8008256:	f04f 33ff 	mov.w	r3, #4294967295
 800825a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d015      	beq.n	800828e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	689b      	ldr	r3, [r3, #8]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d006      	beq.n	8008278 <osSemaphoreNew+0x4c>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	68db      	ldr	r3, [r3, #12]
 800826e:	2b4f      	cmp	r3, #79	; 0x4f
 8008270:	d902      	bls.n	8008278 <osSemaphoreNew+0x4c>
        mem = 1;
 8008272:	2301      	movs	r3, #1
 8008274:	61bb      	str	r3, [r7, #24]
 8008276:	e00c      	b.n	8008292 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d108      	bne.n	8008292 <osSemaphoreNew+0x66>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	68db      	ldr	r3, [r3, #12]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d104      	bne.n	8008292 <osSemaphoreNew+0x66>
          mem = 0;
 8008288:	2300      	movs	r3, #0
 800828a:	61bb      	str	r3, [r7, #24]
 800828c:	e001      	b.n	8008292 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800828e:	2300      	movs	r3, #0
 8008290:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8008292:	69bb      	ldr	r3, [r7, #24]
 8008294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008298:	d04c      	beq.n	8008334 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2b01      	cmp	r3, #1
 800829e:	d128      	bne.n	80082f2 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80082a0:	69bb      	ldr	r3, [r7, #24]
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	d10a      	bne.n	80082bc <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	689b      	ldr	r3, [r3, #8]
 80082aa:	2203      	movs	r2, #3
 80082ac:	9200      	str	r2, [sp, #0]
 80082ae:	2200      	movs	r2, #0
 80082b0:	2100      	movs	r1, #0
 80082b2:	2001      	movs	r0, #1
 80082b4:	f000 fb5c 	bl	8008970 <xQueueGenericCreateStatic>
 80082b8:	61f8      	str	r0, [r7, #28]
 80082ba:	e005      	b.n	80082c8 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80082bc:	2203      	movs	r2, #3
 80082be:	2100      	movs	r1, #0
 80082c0:	2001      	movs	r0, #1
 80082c2:	f000 fbcd 	bl	8008a60 <xQueueGenericCreate>
 80082c6:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80082c8:	69fb      	ldr	r3, [r7, #28]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d022      	beq.n	8008314 <osSemaphoreNew+0xe8>
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d01f      	beq.n	8008314 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80082d4:	2300      	movs	r3, #0
 80082d6:	2200      	movs	r2, #0
 80082d8:	2100      	movs	r1, #0
 80082da:	69f8      	ldr	r0, [r7, #28]
 80082dc:	f000 fd3e 	bl	8008d5c <xQueueGenericSend>
 80082e0:	4603      	mov	r3, r0
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d016      	beq.n	8008314 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80082e6:	69f8      	ldr	r0, [r7, #28]
 80082e8:	f001 f9ca 	bl	8009680 <vQueueDelete>
            hSemaphore = NULL;
 80082ec:	2300      	movs	r3, #0
 80082ee:	61fb      	str	r3, [r7, #28]
 80082f0:	e010      	b.n	8008314 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80082f2:	69bb      	ldr	r3, [r7, #24]
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d108      	bne.n	800830a <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	689b      	ldr	r3, [r3, #8]
 80082fc:	461a      	mov	r2, r3
 80082fe:	68b9      	ldr	r1, [r7, #8]
 8008300:	68f8      	ldr	r0, [r7, #12]
 8008302:	f000 fcc1 	bl	8008c88 <xQueueCreateCountingSemaphoreStatic>
 8008306:	61f8      	str	r0, [r7, #28]
 8008308:	e004      	b.n	8008314 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800830a:	68b9      	ldr	r1, [r7, #8]
 800830c:	68f8      	ldr	r0, [r7, #12]
 800830e:	f000 fcf2 	bl	8008cf6 <xQueueCreateCountingSemaphore>
 8008312:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008314:	69fb      	ldr	r3, [r7, #28]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d00c      	beq.n	8008334 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d003      	beq.n	8008328 <osSemaphoreNew+0xfc>
          name = attr->name;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	617b      	str	r3, [r7, #20]
 8008326:	e001      	b.n	800832c <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8008328:	2300      	movs	r3, #0
 800832a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800832c:	6979      	ldr	r1, [r7, #20]
 800832e:	69f8      	ldr	r0, [r7, #28]
 8008330:	f001 faf2 	bl	8009918 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008334:	69fb      	ldr	r3, [r7, #28]
}
 8008336:	4618      	mov	r0, r3
 8008338:	3720      	adds	r7, #32
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
	...

08008340 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008340:	b580      	push	{r7, lr}
 8008342:	b086      	sub	sp, #24
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800834e:	2300      	movs	r3, #0
 8008350:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d103      	bne.n	8008360 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8008358:	f06f 0303 	mvn.w	r3, #3
 800835c:	617b      	str	r3, [r7, #20]
 800835e:	e039      	b.n	80083d4 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008360:	f3ef 8305 	mrs	r3, IPSR
 8008364:	60fb      	str	r3, [r7, #12]
  return(result);
 8008366:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008368:	2b00      	cmp	r3, #0
 800836a:	d022      	beq.n	80083b2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d003      	beq.n	800837a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8008372:	f06f 0303 	mvn.w	r3, #3
 8008376:	617b      	str	r3, [r7, #20]
 8008378:	e02c      	b.n	80083d4 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800837a:	2300      	movs	r3, #0
 800837c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800837e:	f107 0308 	add.w	r3, r7, #8
 8008382:	461a      	mov	r2, r3
 8008384:	2100      	movs	r1, #0
 8008386:	6938      	ldr	r0, [r7, #16]
 8008388:	f001 f8fa 	bl	8009580 <xQueueReceiveFromISR>
 800838c:	4603      	mov	r3, r0
 800838e:	2b01      	cmp	r3, #1
 8008390:	d003      	beq.n	800839a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8008392:	f06f 0302 	mvn.w	r3, #2
 8008396:	617b      	str	r3, [r7, #20]
 8008398:	e01c      	b.n	80083d4 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d019      	beq.n	80083d4 <osSemaphoreAcquire+0x94>
 80083a0:	4b0f      	ldr	r3, [pc, #60]	; (80083e0 <osSemaphoreAcquire+0xa0>)
 80083a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083a6:	601a      	str	r2, [r3, #0]
 80083a8:	f3bf 8f4f 	dsb	sy
 80083ac:	f3bf 8f6f 	isb	sy
 80083b0:	e010      	b.n	80083d4 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80083b2:	6839      	ldr	r1, [r7, #0]
 80083b4:	6938      	ldr	r0, [r7, #16]
 80083b6:	f000 ffd7 	bl	8009368 <xQueueSemaphoreTake>
 80083ba:	4603      	mov	r3, r0
 80083bc:	2b01      	cmp	r3, #1
 80083be:	d009      	beq.n	80083d4 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d003      	beq.n	80083ce <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80083c6:	f06f 0301 	mvn.w	r3, #1
 80083ca:	617b      	str	r3, [r7, #20]
 80083cc:	e002      	b.n	80083d4 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80083ce:	f06f 0302 	mvn.w	r3, #2
 80083d2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80083d4:	697b      	ldr	r3, [r7, #20]
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3718      	adds	r7, #24
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}
 80083de:	bf00      	nop
 80083e0:	e000ed04 	.word	0xe000ed04

080083e4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b086      	sub	sp, #24
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80083f0:	2300      	movs	r3, #0
 80083f2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d103      	bne.n	8008402 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80083fa:	f06f 0303 	mvn.w	r3, #3
 80083fe:	617b      	str	r3, [r7, #20]
 8008400:	e02c      	b.n	800845c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008402:	f3ef 8305 	mrs	r3, IPSR
 8008406:	60fb      	str	r3, [r7, #12]
  return(result);
 8008408:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800840a:	2b00      	cmp	r3, #0
 800840c:	d01a      	beq.n	8008444 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800840e:	2300      	movs	r3, #0
 8008410:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008412:	f107 0308 	add.w	r3, r7, #8
 8008416:	4619      	mov	r1, r3
 8008418:	6938      	ldr	r0, [r7, #16]
 800841a:	f000 fe38 	bl	800908e <xQueueGiveFromISR>
 800841e:	4603      	mov	r3, r0
 8008420:	2b01      	cmp	r3, #1
 8008422:	d003      	beq.n	800842c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8008424:	f06f 0302 	mvn.w	r3, #2
 8008428:	617b      	str	r3, [r7, #20]
 800842a:	e017      	b.n	800845c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d014      	beq.n	800845c <osSemaphoreRelease+0x78>
 8008432:	4b0d      	ldr	r3, [pc, #52]	; (8008468 <osSemaphoreRelease+0x84>)
 8008434:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008438:	601a      	str	r2, [r3, #0]
 800843a:	f3bf 8f4f 	dsb	sy
 800843e:	f3bf 8f6f 	isb	sy
 8008442:	e00b      	b.n	800845c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008444:	2300      	movs	r3, #0
 8008446:	2200      	movs	r2, #0
 8008448:	2100      	movs	r1, #0
 800844a:	6938      	ldr	r0, [r7, #16]
 800844c:	f000 fc86 	bl	8008d5c <xQueueGenericSend>
 8008450:	4603      	mov	r3, r0
 8008452:	2b01      	cmp	r3, #1
 8008454:	d002      	beq.n	800845c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8008456:	f06f 0302 	mvn.w	r3, #2
 800845a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800845c:	697b      	ldr	r3, [r7, #20]
}
 800845e:	4618      	mov	r0, r3
 8008460:	3718      	adds	r7, #24
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	e000ed04 	.word	0xe000ed04

0800846c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800846c:	b580      	push	{r7, lr}
 800846e:	b08a      	sub	sp, #40	; 0x28
 8008470:	af02      	add	r7, sp, #8
 8008472:	60f8      	str	r0, [r7, #12]
 8008474:	60b9      	str	r1, [r7, #8]
 8008476:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008478:	2300      	movs	r3, #0
 800847a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800847c:	f3ef 8305 	mrs	r3, IPSR
 8008480:	613b      	str	r3, [r7, #16]
  return(result);
 8008482:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008484:	2b00      	cmp	r3, #0
 8008486:	d15f      	bne.n	8008548 <osMessageQueueNew+0xdc>
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d05c      	beq.n	8008548 <osMessageQueueNew+0xdc>
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d059      	beq.n	8008548 <osMessageQueueNew+0xdc>
    mem = -1;
 8008494:	f04f 33ff 	mov.w	r3, #4294967295
 8008498:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d029      	beq.n	80084f4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	689b      	ldr	r3, [r3, #8]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d012      	beq.n	80084ce <osMessageQueueNew+0x62>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	68db      	ldr	r3, [r3, #12]
 80084ac:	2b4f      	cmp	r3, #79	; 0x4f
 80084ae:	d90e      	bls.n	80084ce <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d00a      	beq.n	80084ce <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	695a      	ldr	r2, [r3, #20]
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	68b9      	ldr	r1, [r7, #8]
 80084c0:	fb01 f303 	mul.w	r3, r1, r3
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d302      	bcc.n	80084ce <osMessageQueueNew+0x62>
        mem = 1;
 80084c8:	2301      	movs	r3, #1
 80084ca:	61bb      	str	r3, [r7, #24]
 80084cc:	e014      	b.n	80084f8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d110      	bne.n	80084f8 <osMessageQueueNew+0x8c>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	68db      	ldr	r3, [r3, #12]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d10c      	bne.n	80084f8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d108      	bne.n	80084f8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	695b      	ldr	r3, [r3, #20]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d104      	bne.n	80084f8 <osMessageQueueNew+0x8c>
          mem = 0;
 80084ee:	2300      	movs	r3, #0
 80084f0:	61bb      	str	r3, [r7, #24]
 80084f2:	e001      	b.n	80084f8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80084f4:	2300      	movs	r3, #0
 80084f6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80084f8:	69bb      	ldr	r3, [r7, #24]
 80084fa:	2b01      	cmp	r3, #1
 80084fc:	d10b      	bne.n	8008516 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	691a      	ldr	r2, [r3, #16]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	2100      	movs	r1, #0
 8008508:	9100      	str	r1, [sp, #0]
 800850a:	68b9      	ldr	r1, [r7, #8]
 800850c:	68f8      	ldr	r0, [r7, #12]
 800850e:	f000 fa2f 	bl	8008970 <xQueueGenericCreateStatic>
 8008512:	61f8      	str	r0, [r7, #28]
 8008514:	e008      	b.n	8008528 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8008516:	69bb      	ldr	r3, [r7, #24]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d105      	bne.n	8008528 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800851c:	2200      	movs	r2, #0
 800851e:	68b9      	ldr	r1, [r7, #8]
 8008520:	68f8      	ldr	r0, [r7, #12]
 8008522:	f000 fa9d 	bl	8008a60 <xQueueGenericCreate>
 8008526:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008528:	69fb      	ldr	r3, [r7, #28]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d00c      	beq.n	8008548 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d003      	beq.n	800853c <osMessageQueueNew+0xd0>
        name = attr->name;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	617b      	str	r3, [r7, #20]
 800853a:	e001      	b.n	8008540 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800853c:	2300      	movs	r3, #0
 800853e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8008540:	6979      	ldr	r1, [r7, #20]
 8008542:	69f8      	ldr	r0, [r7, #28]
 8008544:	f001 f9e8 	bl	8009918 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008548:	69fb      	ldr	r3, [r7, #28]
}
 800854a:	4618      	mov	r0, r3
 800854c:	3720      	adds	r7, #32
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}
	...

08008554 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008554:	b580      	push	{r7, lr}
 8008556:	b088      	sub	sp, #32
 8008558:	af00      	add	r7, sp, #0
 800855a:	60f8      	str	r0, [r7, #12]
 800855c:	60b9      	str	r1, [r7, #8]
 800855e:	603b      	str	r3, [r7, #0]
 8008560:	4613      	mov	r3, r2
 8008562:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008568:	2300      	movs	r3, #0
 800856a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800856c:	f3ef 8305 	mrs	r3, IPSR
 8008570:	617b      	str	r3, [r7, #20]
  return(result);
 8008572:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008574:	2b00      	cmp	r3, #0
 8008576:	d028      	beq.n	80085ca <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008578:	69bb      	ldr	r3, [r7, #24]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d005      	beq.n	800858a <osMessageQueuePut+0x36>
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d002      	beq.n	800858a <osMessageQueuePut+0x36>
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d003      	beq.n	8008592 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800858a:	f06f 0303 	mvn.w	r3, #3
 800858e:	61fb      	str	r3, [r7, #28]
 8008590:	e038      	b.n	8008604 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8008592:	2300      	movs	r3, #0
 8008594:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008596:	f107 0210 	add.w	r2, r7, #16
 800859a:	2300      	movs	r3, #0
 800859c:	68b9      	ldr	r1, [r7, #8]
 800859e:	69b8      	ldr	r0, [r7, #24]
 80085a0:	f000 fcda 	bl	8008f58 <xQueueGenericSendFromISR>
 80085a4:	4603      	mov	r3, r0
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	d003      	beq.n	80085b2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80085aa:	f06f 0302 	mvn.w	r3, #2
 80085ae:	61fb      	str	r3, [r7, #28]
 80085b0:	e028      	b.n	8008604 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d025      	beq.n	8008604 <osMessageQueuePut+0xb0>
 80085b8:	4b15      	ldr	r3, [pc, #84]	; (8008610 <osMessageQueuePut+0xbc>)
 80085ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085be:	601a      	str	r2, [r3, #0]
 80085c0:	f3bf 8f4f 	dsb	sy
 80085c4:	f3bf 8f6f 	isb	sy
 80085c8:	e01c      	b.n	8008604 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80085ca:	69bb      	ldr	r3, [r7, #24]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d002      	beq.n	80085d6 <osMessageQueuePut+0x82>
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d103      	bne.n	80085de <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80085d6:	f06f 0303 	mvn.w	r3, #3
 80085da:	61fb      	str	r3, [r7, #28]
 80085dc:	e012      	b.n	8008604 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80085de:	2300      	movs	r3, #0
 80085e0:	683a      	ldr	r2, [r7, #0]
 80085e2:	68b9      	ldr	r1, [r7, #8]
 80085e4:	69b8      	ldr	r0, [r7, #24]
 80085e6:	f000 fbb9 	bl	8008d5c <xQueueGenericSend>
 80085ea:	4603      	mov	r3, r0
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d009      	beq.n	8008604 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d003      	beq.n	80085fe <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80085f6:	f06f 0301 	mvn.w	r3, #1
 80085fa:	61fb      	str	r3, [r7, #28]
 80085fc:	e002      	b.n	8008604 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80085fe:	f06f 0302 	mvn.w	r3, #2
 8008602:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008604:	69fb      	ldr	r3, [r7, #28]
}
 8008606:	4618      	mov	r0, r3
 8008608:	3720      	adds	r7, #32
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
 800860e:	bf00      	nop
 8008610:	e000ed04 	.word	0xe000ed04

08008614 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008614:	b580      	push	{r7, lr}
 8008616:	b088      	sub	sp, #32
 8008618:	af00      	add	r7, sp, #0
 800861a:	60f8      	str	r0, [r7, #12]
 800861c:	60b9      	str	r1, [r7, #8]
 800861e:	607a      	str	r2, [r7, #4]
 8008620:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008626:	2300      	movs	r3, #0
 8008628:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800862a:	f3ef 8305 	mrs	r3, IPSR
 800862e:	617b      	str	r3, [r7, #20]
  return(result);
 8008630:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008632:	2b00      	cmp	r3, #0
 8008634:	d028      	beq.n	8008688 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008636:	69bb      	ldr	r3, [r7, #24]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d005      	beq.n	8008648 <osMessageQueueGet+0x34>
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d002      	beq.n	8008648 <osMessageQueueGet+0x34>
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d003      	beq.n	8008650 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8008648:	f06f 0303 	mvn.w	r3, #3
 800864c:	61fb      	str	r3, [r7, #28]
 800864e:	e037      	b.n	80086c0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8008650:	2300      	movs	r3, #0
 8008652:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008654:	f107 0310 	add.w	r3, r7, #16
 8008658:	461a      	mov	r2, r3
 800865a:	68b9      	ldr	r1, [r7, #8]
 800865c:	69b8      	ldr	r0, [r7, #24]
 800865e:	f000 ff8f 	bl	8009580 <xQueueReceiveFromISR>
 8008662:	4603      	mov	r3, r0
 8008664:	2b01      	cmp	r3, #1
 8008666:	d003      	beq.n	8008670 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8008668:	f06f 0302 	mvn.w	r3, #2
 800866c:	61fb      	str	r3, [r7, #28]
 800866e:	e027      	b.n	80086c0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d024      	beq.n	80086c0 <osMessageQueueGet+0xac>
 8008676:	4b15      	ldr	r3, [pc, #84]	; (80086cc <osMessageQueueGet+0xb8>)
 8008678:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800867c:	601a      	str	r2, [r3, #0]
 800867e:	f3bf 8f4f 	dsb	sy
 8008682:	f3bf 8f6f 	isb	sy
 8008686:	e01b      	b.n	80086c0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008688:	69bb      	ldr	r3, [r7, #24]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d002      	beq.n	8008694 <osMessageQueueGet+0x80>
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d103      	bne.n	800869c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8008694:	f06f 0303 	mvn.w	r3, #3
 8008698:	61fb      	str	r3, [r7, #28]
 800869a:	e011      	b.n	80086c0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800869c:	683a      	ldr	r2, [r7, #0]
 800869e:	68b9      	ldr	r1, [r7, #8]
 80086a0:	69b8      	ldr	r0, [r7, #24]
 80086a2:	f000 fd81 	bl	80091a8 <xQueueReceive>
 80086a6:	4603      	mov	r3, r0
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d009      	beq.n	80086c0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d003      	beq.n	80086ba <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80086b2:	f06f 0301 	mvn.w	r3, #1
 80086b6:	61fb      	str	r3, [r7, #28]
 80086b8:	e002      	b.n	80086c0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80086ba:	f06f 0302 	mvn.w	r3, #2
 80086be:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80086c0:	69fb      	ldr	r3, [r7, #28]
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3720      	adds	r7, #32
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop
 80086cc:	e000ed04 	.word	0xe000ed04

080086d0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80086d0:	b480      	push	{r7}
 80086d2:	b085      	sub	sp, #20
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	60f8      	str	r0, [r7, #12]
 80086d8:	60b9      	str	r1, [r7, #8]
 80086da:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	4a07      	ldr	r2, [pc, #28]	; (80086fc <vApplicationGetIdleTaskMemory+0x2c>)
 80086e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	4a06      	ldr	r2, [pc, #24]	; (8008700 <vApplicationGetIdleTaskMemory+0x30>)
 80086e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2280      	movs	r2, #128	; 0x80
 80086ec:	601a      	str	r2, [r3, #0]
}
 80086ee:	bf00      	nop
 80086f0:	3714      	adds	r7, #20
 80086f2:	46bd      	mov	sp, r7
 80086f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f8:	4770      	bx	lr
 80086fa:	bf00      	nop
 80086fc:	20000710 	.word	0x20000710
 8008700:	2000076c 	.word	0x2000076c

08008704 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008704:	b480      	push	{r7}
 8008706:	b085      	sub	sp, #20
 8008708:	af00      	add	r7, sp, #0
 800870a:	60f8      	str	r0, [r7, #12]
 800870c:	60b9      	str	r1, [r7, #8]
 800870e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	4a07      	ldr	r2, [pc, #28]	; (8008730 <vApplicationGetTimerTaskMemory+0x2c>)
 8008714:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	4a06      	ldr	r2, [pc, #24]	; (8008734 <vApplicationGetTimerTaskMemory+0x30>)
 800871a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008722:	601a      	str	r2, [r3, #0]
}
 8008724:	bf00      	nop
 8008726:	3714      	adds	r7, #20
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr
 8008730:	2000096c 	.word	0x2000096c
 8008734:	200009c8 	.word	0x200009c8

08008738 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008738:	b480      	push	{r7}
 800873a:	b083      	sub	sp, #12
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f103 0208 	add.w	r2, r3, #8
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f04f 32ff 	mov.w	r2, #4294967295
 8008750:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f103 0208 	add.w	r2, r3, #8
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f103 0208 	add.w	r2, r3, #8
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2200      	movs	r2, #0
 800876a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800876c:	bf00      	nop
 800876e:	370c      	adds	r7, #12
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008778:	b480      	push	{r7}
 800877a:	b083      	sub	sp, #12
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2200      	movs	r2, #0
 8008784:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008786:	bf00      	nop
 8008788:	370c      	adds	r7, #12
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr

08008792 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008792:	b480      	push	{r7}
 8008794:	b085      	sub	sp, #20
 8008796:	af00      	add	r7, sp, #0
 8008798:	6078      	str	r0, [r7, #4]
 800879a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	68fa      	ldr	r2, [r7, #12]
 80087a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	689a      	ldr	r2, [r3, #8]
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	689b      	ldr	r3, [r3, #8]
 80087b4:	683a      	ldr	r2, [r7, #0]
 80087b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	683a      	ldr	r2, [r7, #0]
 80087bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	687a      	ldr	r2, [r7, #4]
 80087c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	1c5a      	adds	r2, r3, #1
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	601a      	str	r2, [r3, #0]
}
 80087ce:	bf00      	nop
 80087d0:	3714      	adds	r7, #20
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr

080087da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80087da:	b480      	push	{r7}
 80087dc:	b085      	sub	sp, #20
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
 80087e2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087f0:	d103      	bne.n	80087fa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	691b      	ldr	r3, [r3, #16]
 80087f6:	60fb      	str	r3, [r7, #12]
 80087f8:	e00c      	b.n	8008814 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	3308      	adds	r3, #8
 80087fe:	60fb      	str	r3, [r7, #12]
 8008800:	e002      	b.n	8008808 <vListInsert+0x2e>
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	60fb      	str	r3, [r7, #12]
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	68ba      	ldr	r2, [r7, #8]
 8008810:	429a      	cmp	r2, r3
 8008812:	d2f6      	bcs.n	8008802 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	685a      	ldr	r2, [r3, #4]
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	683a      	ldr	r2, [r7, #0]
 8008822:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	68fa      	ldr	r2, [r7, #12]
 8008828:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	683a      	ldr	r2, [r7, #0]
 800882e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	687a      	ldr	r2, [r7, #4]
 8008834:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	1c5a      	adds	r2, r3, #1
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	601a      	str	r2, [r3, #0]
}
 8008840:	bf00      	nop
 8008842:	3714      	adds	r7, #20
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr

0800884c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800884c:	b480      	push	{r7}
 800884e:	b085      	sub	sp, #20
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	691b      	ldr	r3, [r3, #16]
 8008858:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	687a      	ldr	r2, [r7, #4]
 8008860:	6892      	ldr	r2, [r2, #8]
 8008862:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	689b      	ldr	r3, [r3, #8]
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	6852      	ldr	r2, [r2, #4]
 800886c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	687a      	ldr	r2, [r7, #4]
 8008874:	429a      	cmp	r2, r3
 8008876:	d103      	bne.n	8008880 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	689a      	ldr	r2, [r3, #8]
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2200      	movs	r2, #0
 8008884:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	1e5a      	subs	r2, r3, #1
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
}
 8008894:	4618      	mov	r0, r3
 8008896:	3714      	adds	r7, #20
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr

080088a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b084      	sub	sp, #16
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d10a      	bne.n	80088ca <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80088b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b8:	f383 8811 	msr	BASEPRI, r3
 80088bc:	f3bf 8f6f 	isb	sy
 80088c0:	f3bf 8f4f 	dsb	sy
 80088c4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80088c6:	bf00      	nop
 80088c8:	e7fe      	b.n	80088c8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80088ca:	f002 fec3 	bl	800b654 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681a      	ldr	r2, [r3, #0]
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088d6:	68f9      	ldr	r1, [r7, #12]
 80088d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80088da:	fb01 f303 	mul.w	r3, r1, r3
 80088de:	441a      	add	r2, r3
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2200      	movs	r2, #0
 80088e8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681a      	ldr	r2, [r3, #0]
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681a      	ldr	r2, [r3, #0]
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088fa:	3b01      	subs	r3, #1
 80088fc:	68f9      	ldr	r1, [r7, #12]
 80088fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008900:	fb01 f303 	mul.w	r3, r1, r3
 8008904:	441a      	add	r2, r3
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	22ff      	movs	r2, #255	; 0xff
 800890e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	22ff      	movs	r2, #255	; 0xff
 8008916:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d114      	bne.n	800894a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	691b      	ldr	r3, [r3, #16]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d01a      	beq.n	800895e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	3310      	adds	r3, #16
 800892c:	4618      	mov	r0, r3
 800892e:	f001 fdb3 	bl	800a498 <xTaskRemoveFromEventList>
 8008932:	4603      	mov	r3, r0
 8008934:	2b00      	cmp	r3, #0
 8008936:	d012      	beq.n	800895e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008938:	4b0c      	ldr	r3, [pc, #48]	; (800896c <xQueueGenericReset+0xcc>)
 800893a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800893e:	601a      	str	r2, [r3, #0]
 8008940:	f3bf 8f4f 	dsb	sy
 8008944:	f3bf 8f6f 	isb	sy
 8008948:	e009      	b.n	800895e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	3310      	adds	r3, #16
 800894e:	4618      	mov	r0, r3
 8008950:	f7ff fef2 	bl	8008738 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	3324      	adds	r3, #36	; 0x24
 8008958:	4618      	mov	r0, r3
 800895a:	f7ff feed 	bl	8008738 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800895e:	f002 fea9 	bl	800b6b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008962:	2301      	movs	r3, #1
}
 8008964:	4618      	mov	r0, r3
 8008966:	3710      	adds	r7, #16
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}
 800896c:	e000ed04 	.word	0xe000ed04

08008970 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008970:	b580      	push	{r7, lr}
 8008972:	b08e      	sub	sp, #56	; 0x38
 8008974:	af02      	add	r7, sp, #8
 8008976:	60f8      	str	r0, [r7, #12]
 8008978:	60b9      	str	r1, [r7, #8]
 800897a:	607a      	str	r2, [r7, #4]
 800897c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d10a      	bne.n	800899a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008988:	f383 8811 	msr	BASEPRI, r3
 800898c:	f3bf 8f6f 	isb	sy
 8008990:	f3bf 8f4f 	dsb	sy
 8008994:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008996:	bf00      	nop
 8008998:	e7fe      	b.n	8008998 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d10a      	bne.n	80089b6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80089a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a4:	f383 8811 	msr	BASEPRI, r3
 80089a8:	f3bf 8f6f 	isb	sy
 80089ac:	f3bf 8f4f 	dsb	sy
 80089b0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80089b2:	bf00      	nop
 80089b4:	e7fe      	b.n	80089b4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d002      	beq.n	80089c2 <xQueueGenericCreateStatic+0x52>
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d001      	beq.n	80089c6 <xQueueGenericCreateStatic+0x56>
 80089c2:	2301      	movs	r3, #1
 80089c4:	e000      	b.n	80089c8 <xQueueGenericCreateStatic+0x58>
 80089c6:	2300      	movs	r3, #0
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d10a      	bne.n	80089e2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80089cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d0:	f383 8811 	msr	BASEPRI, r3
 80089d4:	f3bf 8f6f 	isb	sy
 80089d8:	f3bf 8f4f 	dsb	sy
 80089dc:	623b      	str	r3, [r7, #32]
}
 80089de:	bf00      	nop
 80089e0:	e7fe      	b.n	80089e0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d102      	bne.n	80089ee <xQueueGenericCreateStatic+0x7e>
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d101      	bne.n	80089f2 <xQueueGenericCreateStatic+0x82>
 80089ee:	2301      	movs	r3, #1
 80089f0:	e000      	b.n	80089f4 <xQueueGenericCreateStatic+0x84>
 80089f2:	2300      	movs	r3, #0
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d10a      	bne.n	8008a0e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80089f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089fc:	f383 8811 	msr	BASEPRI, r3
 8008a00:	f3bf 8f6f 	isb	sy
 8008a04:	f3bf 8f4f 	dsb	sy
 8008a08:	61fb      	str	r3, [r7, #28]
}
 8008a0a:	bf00      	nop
 8008a0c:	e7fe      	b.n	8008a0c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008a0e:	2350      	movs	r3, #80	; 0x50
 8008a10:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	2b50      	cmp	r3, #80	; 0x50
 8008a16:	d00a      	beq.n	8008a2e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a1c:	f383 8811 	msr	BASEPRI, r3
 8008a20:	f3bf 8f6f 	isb	sy
 8008a24:	f3bf 8f4f 	dsb	sy
 8008a28:	61bb      	str	r3, [r7, #24]
}
 8008a2a:	bf00      	nop
 8008a2c:	e7fe      	b.n	8008a2c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008a2e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d00d      	beq.n	8008a56 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008a42:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a48:	9300      	str	r3, [sp, #0]
 8008a4a:	4613      	mov	r3, r2
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	68b9      	ldr	r1, [r7, #8]
 8008a50:	68f8      	ldr	r0, [r7, #12]
 8008a52:	f000 f83f 	bl	8008ad4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3730      	adds	r7, #48	; 0x30
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b08a      	sub	sp, #40	; 0x28
 8008a64:	af02      	add	r7, sp, #8
 8008a66:	60f8      	str	r0, [r7, #12]
 8008a68:	60b9      	str	r1, [r7, #8]
 8008a6a:	4613      	mov	r3, r2
 8008a6c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d10a      	bne.n	8008a8a <xQueueGenericCreate+0x2a>
	__asm volatile
 8008a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a78:	f383 8811 	msr	BASEPRI, r3
 8008a7c:	f3bf 8f6f 	isb	sy
 8008a80:	f3bf 8f4f 	dsb	sy
 8008a84:	613b      	str	r3, [r7, #16]
}
 8008a86:	bf00      	nop
 8008a88:	e7fe      	b.n	8008a88 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	68ba      	ldr	r2, [r7, #8]
 8008a8e:	fb02 f303 	mul.w	r3, r2, r3
 8008a92:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008a94:	69fb      	ldr	r3, [r7, #28]
 8008a96:	3350      	adds	r3, #80	; 0x50
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f002 fefd 	bl	800b898 <pvPortMalloc>
 8008a9e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008aa0:	69bb      	ldr	r3, [r7, #24]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d011      	beq.n	8008aca <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008aa6:	69bb      	ldr	r3, [r7, #24]
 8008aa8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	3350      	adds	r3, #80	; 0x50
 8008aae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008ab0:	69bb      	ldr	r3, [r7, #24]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008ab8:	79fa      	ldrb	r2, [r7, #7]
 8008aba:	69bb      	ldr	r3, [r7, #24]
 8008abc:	9300      	str	r3, [sp, #0]
 8008abe:	4613      	mov	r3, r2
 8008ac0:	697a      	ldr	r2, [r7, #20]
 8008ac2:	68b9      	ldr	r1, [r7, #8]
 8008ac4:	68f8      	ldr	r0, [r7, #12]
 8008ac6:	f000 f805 	bl	8008ad4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008aca:	69bb      	ldr	r3, [r7, #24]
	}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3720      	adds	r7, #32
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b084      	sub	sp, #16
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	60f8      	str	r0, [r7, #12]
 8008adc:	60b9      	str	r1, [r7, #8]
 8008ade:	607a      	str	r2, [r7, #4]
 8008ae0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d103      	bne.n	8008af0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008ae8:	69bb      	ldr	r3, [r7, #24]
 8008aea:	69ba      	ldr	r2, [r7, #24]
 8008aec:	601a      	str	r2, [r3, #0]
 8008aee:	e002      	b.n	8008af6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008af0:	69bb      	ldr	r3, [r7, #24]
 8008af2:	687a      	ldr	r2, [r7, #4]
 8008af4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008af6:	69bb      	ldr	r3, [r7, #24]
 8008af8:	68fa      	ldr	r2, [r7, #12]
 8008afa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008afc:	69bb      	ldr	r3, [r7, #24]
 8008afe:	68ba      	ldr	r2, [r7, #8]
 8008b00:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008b02:	2101      	movs	r1, #1
 8008b04:	69b8      	ldr	r0, [r7, #24]
 8008b06:	f7ff fecb 	bl	80088a0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008b0a:	69bb      	ldr	r3, [r7, #24]
 8008b0c:	78fa      	ldrb	r2, [r7, #3]
 8008b0e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008b12:	bf00      	nop
 8008b14:	3710      	adds	r7, #16
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}

08008b1a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008b1a:	b580      	push	{r7, lr}
 8008b1c:	b082      	sub	sp, #8
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d00e      	beq.n	8008b46 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2200      	movs	r2, #0
 8008b32:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2200      	movs	r2, #0
 8008b38:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	2100      	movs	r1, #0
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f000 f90b 	bl	8008d5c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008b46:	bf00      	nop
 8008b48:	3708      	adds	r7, #8
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}

08008b4e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008b4e:	b580      	push	{r7, lr}
 8008b50:	b086      	sub	sp, #24
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	4603      	mov	r3, r0
 8008b56:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008b58:	2301      	movs	r3, #1
 8008b5a:	617b      	str	r3, [r7, #20]
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008b60:	79fb      	ldrb	r3, [r7, #7]
 8008b62:	461a      	mov	r2, r3
 8008b64:	6939      	ldr	r1, [r7, #16]
 8008b66:	6978      	ldr	r0, [r7, #20]
 8008b68:	f7ff ff7a 	bl	8008a60 <xQueueGenericCreate>
 8008b6c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008b6e:	68f8      	ldr	r0, [r7, #12]
 8008b70:	f7ff ffd3 	bl	8008b1a <prvInitialiseMutex>

		return xNewQueue;
 8008b74:	68fb      	ldr	r3, [r7, #12]
	}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3718      	adds	r7, #24
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}

08008b7e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8008b7e:	b580      	push	{r7, lr}
 8008b80:	b088      	sub	sp, #32
 8008b82:	af02      	add	r7, sp, #8
 8008b84:	4603      	mov	r3, r0
 8008b86:	6039      	str	r1, [r7, #0]
 8008b88:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	617b      	str	r3, [r7, #20]
 8008b8e:	2300      	movs	r3, #0
 8008b90:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008b92:	79fb      	ldrb	r3, [r7, #7]
 8008b94:	9300      	str	r3, [sp, #0]
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	6939      	ldr	r1, [r7, #16]
 8008b9c:	6978      	ldr	r0, [r7, #20]
 8008b9e:	f7ff fee7 	bl	8008970 <xQueueGenericCreateStatic>
 8008ba2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008ba4:	68f8      	ldr	r0, [r7, #12]
 8008ba6:	f7ff ffb8 	bl	8008b1a <prvInitialiseMutex>

		return xNewQueue;
 8008baa:	68fb      	ldr	r3, [r7, #12]
	}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3718      	adds	r7, #24
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}

08008bb4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8008bb4:	b590      	push	{r4, r7, lr}
 8008bb6:	b087      	sub	sp, #28
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d10a      	bne.n	8008bdc <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8008bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bca:	f383 8811 	msr	BASEPRI, r3
 8008bce:	f3bf 8f6f 	isb	sy
 8008bd2:	f3bf 8f4f 	dsb	sy
 8008bd6:	60fb      	str	r3, [r7, #12]
}
 8008bd8:	bf00      	nop
 8008bda:	e7fe      	b.n	8008bda <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	689c      	ldr	r4, [r3, #8]
 8008be0:	f001 fe18 	bl	800a814 <xTaskGetCurrentTaskHandle>
 8008be4:	4603      	mov	r3, r0
 8008be6:	429c      	cmp	r4, r3
 8008be8:	d111      	bne.n	8008c0e <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	68db      	ldr	r3, [r3, #12]
 8008bee:	1e5a      	subs	r2, r3, #1
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	68db      	ldr	r3, [r3, #12]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d105      	bne.n	8008c08 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	2200      	movs	r2, #0
 8008c00:	2100      	movs	r1, #0
 8008c02:	6938      	ldr	r0, [r7, #16]
 8008c04:	f000 f8aa 	bl	8008d5c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	617b      	str	r3, [r7, #20]
 8008c0c:	e001      	b.n	8008c12 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8008c12:	697b      	ldr	r3, [r7, #20]
	}
 8008c14:	4618      	mov	r0, r3
 8008c16:	371c      	adds	r7, #28
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd90      	pop	{r4, r7, pc}

08008c1c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8008c1c:	b590      	push	{r4, r7, lr}
 8008c1e:	b087      	sub	sp, #28
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d10a      	bne.n	8008c46 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8008c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c34:	f383 8811 	msr	BASEPRI, r3
 8008c38:	f3bf 8f6f 	isb	sy
 8008c3c:	f3bf 8f4f 	dsb	sy
 8008c40:	60fb      	str	r3, [r7, #12]
}
 8008c42:	bf00      	nop
 8008c44:	e7fe      	b.n	8008c44 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	689c      	ldr	r4, [r3, #8]
 8008c4a:	f001 fde3 	bl	800a814 <xTaskGetCurrentTaskHandle>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	429c      	cmp	r4, r3
 8008c52:	d107      	bne.n	8008c64 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	68db      	ldr	r3, [r3, #12]
 8008c58:	1c5a      	adds	r2, r3, #1
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8008c5e:	2301      	movs	r3, #1
 8008c60:	617b      	str	r3, [r7, #20]
 8008c62:	e00c      	b.n	8008c7e <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8008c64:	6839      	ldr	r1, [r7, #0]
 8008c66:	6938      	ldr	r0, [r7, #16]
 8008c68:	f000 fb7e 	bl	8009368 <xQueueSemaphoreTake>
 8008c6c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d004      	beq.n	8008c7e <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	68db      	ldr	r3, [r3, #12]
 8008c78:	1c5a      	adds	r2, r3, #1
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8008c7e:	697b      	ldr	r3, [r7, #20]
	}
 8008c80:	4618      	mov	r0, r3
 8008c82:	371c      	adds	r7, #28
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd90      	pop	{r4, r7, pc}

08008c88 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b08a      	sub	sp, #40	; 0x28
 8008c8c:	af02      	add	r7, sp, #8
 8008c8e:	60f8      	str	r0, [r7, #12]
 8008c90:	60b9      	str	r1, [r7, #8]
 8008c92:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d10a      	bne.n	8008cb0 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8008c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c9e:	f383 8811 	msr	BASEPRI, r3
 8008ca2:	f3bf 8f6f 	isb	sy
 8008ca6:	f3bf 8f4f 	dsb	sy
 8008caa:	61bb      	str	r3, [r7, #24]
}
 8008cac:	bf00      	nop
 8008cae:	e7fe      	b.n	8008cae <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008cb0:	68ba      	ldr	r2, [r7, #8]
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	429a      	cmp	r2, r3
 8008cb6:	d90a      	bls.n	8008cce <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8008cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cbc:	f383 8811 	msr	BASEPRI, r3
 8008cc0:	f3bf 8f6f 	isb	sy
 8008cc4:	f3bf 8f4f 	dsb	sy
 8008cc8:	617b      	str	r3, [r7, #20]
}
 8008cca:	bf00      	nop
 8008ccc:	e7fe      	b.n	8008ccc <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008cce:	2302      	movs	r3, #2
 8008cd0:	9300      	str	r3, [sp, #0]
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	2100      	movs	r1, #0
 8008cd8:	68f8      	ldr	r0, [r7, #12]
 8008cda:	f7ff fe49 	bl	8008970 <xQueueGenericCreateStatic>
 8008cde:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008ce0:	69fb      	ldr	r3, [r7, #28]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d002      	beq.n	8008cec <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008ce6:	69fb      	ldr	r3, [r7, #28]
 8008ce8:	68ba      	ldr	r2, [r7, #8]
 8008cea:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008cec:	69fb      	ldr	r3, [r7, #28]
	}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3720      	adds	r7, #32
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}

08008cf6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008cf6:	b580      	push	{r7, lr}
 8008cf8:	b086      	sub	sp, #24
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
 8008cfe:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d10a      	bne.n	8008d1c <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8008d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d0a:	f383 8811 	msr	BASEPRI, r3
 8008d0e:	f3bf 8f6f 	isb	sy
 8008d12:	f3bf 8f4f 	dsb	sy
 8008d16:	613b      	str	r3, [r7, #16]
}
 8008d18:	bf00      	nop
 8008d1a:	e7fe      	b.n	8008d1a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008d1c:	683a      	ldr	r2, [r7, #0]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	429a      	cmp	r2, r3
 8008d22:	d90a      	bls.n	8008d3a <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8008d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d28:	f383 8811 	msr	BASEPRI, r3
 8008d2c:	f3bf 8f6f 	isb	sy
 8008d30:	f3bf 8f4f 	dsb	sy
 8008d34:	60fb      	str	r3, [r7, #12]
}
 8008d36:	bf00      	nop
 8008d38:	e7fe      	b.n	8008d38 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008d3a:	2202      	movs	r2, #2
 8008d3c:	2100      	movs	r1, #0
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f7ff fe8e 	bl	8008a60 <xQueueGenericCreate>
 8008d44:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d002      	beq.n	8008d52 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	683a      	ldr	r2, [r7, #0]
 8008d50:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008d52:	697b      	ldr	r3, [r7, #20]
	}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3718      	adds	r7, #24
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b08e      	sub	sp, #56	; 0x38
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	60f8      	str	r0, [r7, #12]
 8008d64:	60b9      	str	r1, [r7, #8]
 8008d66:	607a      	str	r2, [r7, #4]
 8008d68:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d10a      	bne.n	8008d8e <xQueueGenericSend+0x32>
	__asm volatile
 8008d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d7c:	f383 8811 	msr	BASEPRI, r3
 8008d80:	f3bf 8f6f 	isb	sy
 8008d84:	f3bf 8f4f 	dsb	sy
 8008d88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008d8a:	bf00      	nop
 8008d8c:	e7fe      	b.n	8008d8c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d103      	bne.n	8008d9c <xQueueGenericSend+0x40>
 8008d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d101      	bne.n	8008da0 <xQueueGenericSend+0x44>
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	e000      	b.n	8008da2 <xQueueGenericSend+0x46>
 8008da0:	2300      	movs	r3, #0
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d10a      	bne.n	8008dbc <xQueueGenericSend+0x60>
	__asm volatile
 8008da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008daa:	f383 8811 	msr	BASEPRI, r3
 8008dae:	f3bf 8f6f 	isb	sy
 8008db2:	f3bf 8f4f 	dsb	sy
 8008db6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008db8:	bf00      	nop
 8008dba:	e7fe      	b.n	8008dba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	2b02      	cmp	r3, #2
 8008dc0:	d103      	bne.n	8008dca <xQueueGenericSend+0x6e>
 8008dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dc6:	2b01      	cmp	r3, #1
 8008dc8:	d101      	bne.n	8008dce <xQueueGenericSend+0x72>
 8008dca:	2301      	movs	r3, #1
 8008dcc:	e000      	b.n	8008dd0 <xQueueGenericSend+0x74>
 8008dce:	2300      	movs	r3, #0
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d10a      	bne.n	8008dea <xQueueGenericSend+0x8e>
	__asm volatile
 8008dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd8:	f383 8811 	msr	BASEPRI, r3
 8008ddc:	f3bf 8f6f 	isb	sy
 8008de0:	f3bf 8f4f 	dsb	sy
 8008de4:	623b      	str	r3, [r7, #32]
}
 8008de6:	bf00      	nop
 8008de8:	e7fe      	b.n	8008de8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008dea:	f001 fd23 	bl	800a834 <xTaskGetSchedulerState>
 8008dee:	4603      	mov	r3, r0
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d102      	bne.n	8008dfa <xQueueGenericSend+0x9e>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d101      	bne.n	8008dfe <xQueueGenericSend+0xa2>
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	e000      	b.n	8008e00 <xQueueGenericSend+0xa4>
 8008dfe:	2300      	movs	r3, #0
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d10a      	bne.n	8008e1a <xQueueGenericSend+0xbe>
	__asm volatile
 8008e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e08:	f383 8811 	msr	BASEPRI, r3
 8008e0c:	f3bf 8f6f 	isb	sy
 8008e10:	f3bf 8f4f 	dsb	sy
 8008e14:	61fb      	str	r3, [r7, #28]
}
 8008e16:	bf00      	nop
 8008e18:	e7fe      	b.n	8008e18 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008e1a:	f002 fc1b 	bl	800b654 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e26:	429a      	cmp	r2, r3
 8008e28:	d302      	bcc.n	8008e30 <xQueueGenericSend+0xd4>
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	2b02      	cmp	r3, #2
 8008e2e:	d129      	bne.n	8008e84 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008e30:	683a      	ldr	r2, [r7, #0]
 8008e32:	68b9      	ldr	r1, [r7, #8]
 8008e34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e36:	f000 fc5e 	bl	80096f6 <prvCopyDataToQueue>
 8008e3a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d010      	beq.n	8008e66 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e46:	3324      	adds	r3, #36	; 0x24
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f001 fb25 	bl	800a498 <xTaskRemoveFromEventList>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d013      	beq.n	8008e7c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008e54:	4b3f      	ldr	r3, [pc, #252]	; (8008f54 <xQueueGenericSend+0x1f8>)
 8008e56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e5a:	601a      	str	r2, [r3, #0]
 8008e5c:	f3bf 8f4f 	dsb	sy
 8008e60:	f3bf 8f6f 	isb	sy
 8008e64:	e00a      	b.n	8008e7c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d007      	beq.n	8008e7c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008e6c:	4b39      	ldr	r3, [pc, #228]	; (8008f54 <xQueueGenericSend+0x1f8>)
 8008e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e72:	601a      	str	r2, [r3, #0]
 8008e74:	f3bf 8f4f 	dsb	sy
 8008e78:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008e7c:	f002 fc1a 	bl	800b6b4 <vPortExitCritical>
				return pdPASS;
 8008e80:	2301      	movs	r3, #1
 8008e82:	e063      	b.n	8008f4c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d103      	bne.n	8008e92 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008e8a:	f002 fc13 	bl	800b6b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	e05c      	b.n	8008f4c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d106      	bne.n	8008ea6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008e98:	f107 0314 	add.w	r3, r7, #20
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f001 fb5f 	bl	800a560 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008ea6:	f002 fc05 	bl	800b6b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008eaa:	f001 f8d1 	bl	800a050 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008eae:	f002 fbd1 	bl	800b654 <vPortEnterCritical>
 8008eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008eb8:	b25b      	sxtb	r3, r3
 8008eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ebe:	d103      	bne.n	8008ec8 <xQueueGenericSend+0x16c>
 8008ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ece:	b25b      	sxtb	r3, r3
 8008ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ed4:	d103      	bne.n	8008ede <xQueueGenericSend+0x182>
 8008ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed8:	2200      	movs	r2, #0
 8008eda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ede:	f002 fbe9 	bl	800b6b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008ee2:	1d3a      	adds	r2, r7, #4
 8008ee4:	f107 0314 	add.w	r3, r7, #20
 8008ee8:	4611      	mov	r1, r2
 8008eea:	4618      	mov	r0, r3
 8008eec:	f001 fb4e 	bl	800a58c <xTaskCheckForTimeOut>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d124      	bne.n	8008f40 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008ef6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ef8:	f000 fcf5 	bl	80098e6 <prvIsQueueFull>
 8008efc:	4603      	mov	r3, r0
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d018      	beq.n	8008f34 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f04:	3310      	adds	r3, #16
 8008f06:	687a      	ldr	r2, [r7, #4]
 8008f08:	4611      	mov	r1, r2
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f001 fa74 	bl	800a3f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008f10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f12:	f000 fc80 	bl	8009816 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008f16:	f001 f8a9 	bl	800a06c <xTaskResumeAll>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	f47f af7c 	bne.w	8008e1a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008f22:	4b0c      	ldr	r3, [pc, #48]	; (8008f54 <xQueueGenericSend+0x1f8>)
 8008f24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f28:	601a      	str	r2, [r3, #0]
 8008f2a:	f3bf 8f4f 	dsb	sy
 8008f2e:	f3bf 8f6f 	isb	sy
 8008f32:	e772      	b.n	8008e1a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008f34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f36:	f000 fc6e 	bl	8009816 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008f3a:	f001 f897 	bl	800a06c <xTaskResumeAll>
 8008f3e:	e76c      	b.n	8008e1a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008f40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f42:	f000 fc68 	bl	8009816 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008f46:	f001 f891 	bl	800a06c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008f4a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3738      	adds	r7, #56	; 0x38
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}
 8008f54:	e000ed04 	.word	0xe000ed04

08008f58 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b090      	sub	sp, #64	; 0x40
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	60f8      	str	r0, [r7, #12]
 8008f60:	60b9      	str	r1, [r7, #8]
 8008f62:	607a      	str	r2, [r7, #4]
 8008f64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d10a      	bne.n	8008f86 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f74:	f383 8811 	msr	BASEPRI, r3
 8008f78:	f3bf 8f6f 	isb	sy
 8008f7c:	f3bf 8f4f 	dsb	sy
 8008f80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008f82:	bf00      	nop
 8008f84:	e7fe      	b.n	8008f84 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d103      	bne.n	8008f94 <xQueueGenericSendFromISR+0x3c>
 8008f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d101      	bne.n	8008f98 <xQueueGenericSendFromISR+0x40>
 8008f94:	2301      	movs	r3, #1
 8008f96:	e000      	b.n	8008f9a <xQueueGenericSendFromISR+0x42>
 8008f98:	2300      	movs	r3, #0
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d10a      	bne.n	8008fb4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa2:	f383 8811 	msr	BASEPRI, r3
 8008fa6:	f3bf 8f6f 	isb	sy
 8008faa:	f3bf 8f4f 	dsb	sy
 8008fae:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008fb0:	bf00      	nop
 8008fb2:	e7fe      	b.n	8008fb2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	2b02      	cmp	r3, #2
 8008fb8:	d103      	bne.n	8008fc2 <xQueueGenericSendFromISR+0x6a>
 8008fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fbe:	2b01      	cmp	r3, #1
 8008fc0:	d101      	bne.n	8008fc6 <xQueueGenericSendFromISR+0x6e>
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	e000      	b.n	8008fc8 <xQueueGenericSendFromISR+0x70>
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d10a      	bne.n	8008fe2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd0:	f383 8811 	msr	BASEPRI, r3
 8008fd4:	f3bf 8f6f 	isb	sy
 8008fd8:	f3bf 8f4f 	dsb	sy
 8008fdc:	623b      	str	r3, [r7, #32]
}
 8008fde:	bf00      	nop
 8008fe0:	e7fe      	b.n	8008fe0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008fe2:	f002 fc19 	bl	800b818 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008fe6:	f3ef 8211 	mrs	r2, BASEPRI
 8008fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fee:	f383 8811 	msr	BASEPRI, r3
 8008ff2:	f3bf 8f6f 	isb	sy
 8008ff6:	f3bf 8f4f 	dsb	sy
 8008ffa:	61fa      	str	r2, [r7, #28]
 8008ffc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008ffe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009000:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009004:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800900a:	429a      	cmp	r2, r3
 800900c:	d302      	bcc.n	8009014 <xQueueGenericSendFromISR+0xbc>
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	2b02      	cmp	r3, #2
 8009012:	d12f      	bne.n	8009074 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009016:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800901a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800901e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009022:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009024:	683a      	ldr	r2, [r7, #0]
 8009026:	68b9      	ldr	r1, [r7, #8]
 8009028:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800902a:	f000 fb64 	bl	80096f6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800902e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009036:	d112      	bne.n	800905e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800903a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800903c:	2b00      	cmp	r3, #0
 800903e:	d016      	beq.n	800906e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009042:	3324      	adds	r3, #36	; 0x24
 8009044:	4618      	mov	r0, r3
 8009046:	f001 fa27 	bl	800a498 <xTaskRemoveFromEventList>
 800904a:	4603      	mov	r3, r0
 800904c:	2b00      	cmp	r3, #0
 800904e:	d00e      	beq.n	800906e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d00b      	beq.n	800906e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2201      	movs	r2, #1
 800905a:	601a      	str	r2, [r3, #0]
 800905c:	e007      	b.n	800906e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800905e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009062:	3301      	adds	r3, #1
 8009064:	b2db      	uxtb	r3, r3
 8009066:	b25a      	sxtb	r2, r3
 8009068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800906a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800906e:	2301      	movs	r3, #1
 8009070:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009072:	e001      	b.n	8009078 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009074:	2300      	movs	r3, #0
 8009076:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800907a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009082:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009086:	4618      	mov	r0, r3
 8009088:	3740      	adds	r7, #64	; 0x40
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}

0800908e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800908e:	b580      	push	{r7, lr}
 8009090:	b08e      	sub	sp, #56	; 0x38
 8009092:	af00      	add	r7, sp, #0
 8009094:	6078      	str	r0, [r7, #4]
 8009096:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800909c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d10a      	bne.n	80090b8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80090a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a6:	f383 8811 	msr	BASEPRI, r3
 80090aa:	f3bf 8f6f 	isb	sy
 80090ae:	f3bf 8f4f 	dsb	sy
 80090b2:	623b      	str	r3, [r7, #32]
}
 80090b4:	bf00      	nop
 80090b6:	e7fe      	b.n	80090b6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80090b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d00a      	beq.n	80090d6 <xQueueGiveFromISR+0x48>
	__asm volatile
 80090c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c4:	f383 8811 	msr	BASEPRI, r3
 80090c8:	f3bf 8f6f 	isb	sy
 80090cc:	f3bf 8f4f 	dsb	sy
 80090d0:	61fb      	str	r3, [r7, #28]
}
 80090d2:	bf00      	nop
 80090d4:	e7fe      	b.n	80090d4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80090d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d103      	bne.n	80090e6 <xQueueGiveFromISR+0x58>
 80090de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e0:	689b      	ldr	r3, [r3, #8]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d101      	bne.n	80090ea <xQueueGiveFromISR+0x5c>
 80090e6:	2301      	movs	r3, #1
 80090e8:	e000      	b.n	80090ec <xQueueGiveFromISR+0x5e>
 80090ea:	2300      	movs	r3, #0
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d10a      	bne.n	8009106 <xQueueGiveFromISR+0x78>
	__asm volatile
 80090f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f4:	f383 8811 	msr	BASEPRI, r3
 80090f8:	f3bf 8f6f 	isb	sy
 80090fc:	f3bf 8f4f 	dsb	sy
 8009100:	61bb      	str	r3, [r7, #24]
}
 8009102:	bf00      	nop
 8009104:	e7fe      	b.n	8009104 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009106:	f002 fb87 	bl	800b818 <vPortValidateInterruptPriority>
	__asm volatile
 800910a:	f3ef 8211 	mrs	r2, BASEPRI
 800910e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009112:	f383 8811 	msr	BASEPRI, r3
 8009116:	f3bf 8f6f 	isb	sy
 800911a:	f3bf 8f4f 	dsb	sy
 800911e:	617a      	str	r2, [r7, #20]
 8009120:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009122:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009124:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800912a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800912c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800912e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009130:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009132:	429a      	cmp	r2, r3
 8009134:	d22b      	bcs.n	800918e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009138:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800913c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009142:	1c5a      	adds	r2, r3, #1
 8009144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009146:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009148:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800914c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009150:	d112      	bne.n	8009178 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009156:	2b00      	cmp	r3, #0
 8009158:	d016      	beq.n	8009188 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800915a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800915c:	3324      	adds	r3, #36	; 0x24
 800915e:	4618      	mov	r0, r3
 8009160:	f001 f99a 	bl	800a498 <xTaskRemoveFromEventList>
 8009164:	4603      	mov	r3, r0
 8009166:	2b00      	cmp	r3, #0
 8009168:	d00e      	beq.n	8009188 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d00b      	beq.n	8009188 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	2201      	movs	r2, #1
 8009174:	601a      	str	r2, [r3, #0]
 8009176:	e007      	b.n	8009188 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009178:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800917c:	3301      	adds	r3, #1
 800917e:	b2db      	uxtb	r3, r3
 8009180:	b25a      	sxtb	r2, r3
 8009182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009184:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009188:	2301      	movs	r3, #1
 800918a:	637b      	str	r3, [r7, #52]	; 0x34
 800918c:	e001      	b.n	8009192 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800918e:	2300      	movs	r3, #0
 8009190:	637b      	str	r3, [r7, #52]	; 0x34
 8009192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009194:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	f383 8811 	msr	BASEPRI, r3
}
 800919c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800919e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3738      	adds	r7, #56	; 0x38
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}

080091a8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b08c      	sub	sp, #48	; 0x30
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	60f8      	str	r0, [r7, #12]
 80091b0:	60b9      	str	r1, [r7, #8]
 80091b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80091b4:	2300      	movs	r3, #0
 80091b6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80091bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d10a      	bne.n	80091d8 <xQueueReceive+0x30>
	__asm volatile
 80091c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c6:	f383 8811 	msr	BASEPRI, r3
 80091ca:	f3bf 8f6f 	isb	sy
 80091ce:	f3bf 8f4f 	dsb	sy
 80091d2:	623b      	str	r3, [r7, #32]
}
 80091d4:	bf00      	nop
 80091d6:	e7fe      	b.n	80091d6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d103      	bne.n	80091e6 <xQueueReceive+0x3e>
 80091de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d101      	bne.n	80091ea <xQueueReceive+0x42>
 80091e6:	2301      	movs	r3, #1
 80091e8:	e000      	b.n	80091ec <xQueueReceive+0x44>
 80091ea:	2300      	movs	r3, #0
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d10a      	bne.n	8009206 <xQueueReceive+0x5e>
	__asm volatile
 80091f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f4:	f383 8811 	msr	BASEPRI, r3
 80091f8:	f3bf 8f6f 	isb	sy
 80091fc:	f3bf 8f4f 	dsb	sy
 8009200:	61fb      	str	r3, [r7, #28]
}
 8009202:	bf00      	nop
 8009204:	e7fe      	b.n	8009204 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009206:	f001 fb15 	bl	800a834 <xTaskGetSchedulerState>
 800920a:	4603      	mov	r3, r0
 800920c:	2b00      	cmp	r3, #0
 800920e:	d102      	bne.n	8009216 <xQueueReceive+0x6e>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d101      	bne.n	800921a <xQueueReceive+0x72>
 8009216:	2301      	movs	r3, #1
 8009218:	e000      	b.n	800921c <xQueueReceive+0x74>
 800921a:	2300      	movs	r3, #0
 800921c:	2b00      	cmp	r3, #0
 800921e:	d10a      	bne.n	8009236 <xQueueReceive+0x8e>
	__asm volatile
 8009220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009224:	f383 8811 	msr	BASEPRI, r3
 8009228:	f3bf 8f6f 	isb	sy
 800922c:	f3bf 8f4f 	dsb	sy
 8009230:	61bb      	str	r3, [r7, #24]
}
 8009232:	bf00      	nop
 8009234:	e7fe      	b.n	8009234 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009236:	f002 fa0d 	bl	800b654 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800923a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800923c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800923e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009242:	2b00      	cmp	r3, #0
 8009244:	d01f      	beq.n	8009286 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009246:	68b9      	ldr	r1, [r7, #8]
 8009248:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800924a:	f000 fabe 	bl	80097ca <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800924e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009250:	1e5a      	subs	r2, r3, #1
 8009252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009254:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009258:	691b      	ldr	r3, [r3, #16]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d00f      	beq.n	800927e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800925e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009260:	3310      	adds	r3, #16
 8009262:	4618      	mov	r0, r3
 8009264:	f001 f918 	bl	800a498 <xTaskRemoveFromEventList>
 8009268:	4603      	mov	r3, r0
 800926a:	2b00      	cmp	r3, #0
 800926c:	d007      	beq.n	800927e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800926e:	4b3d      	ldr	r3, [pc, #244]	; (8009364 <xQueueReceive+0x1bc>)
 8009270:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009274:	601a      	str	r2, [r3, #0]
 8009276:	f3bf 8f4f 	dsb	sy
 800927a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800927e:	f002 fa19 	bl	800b6b4 <vPortExitCritical>
				return pdPASS;
 8009282:	2301      	movs	r3, #1
 8009284:	e069      	b.n	800935a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d103      	bne.n	8009294 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800928c:	f002 fa12 	bl	800b6b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009290:	2300      	movs	r3, #0
 8009292:	e062      	b.n	800935a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009296:	2b00      	cmp	r3, #0
 8009298:	d106      	bne.n	80092a8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800929a:	f107 0310 	add.w	r3, r7, #16
 800929e:	4618      	mov	r0, r3
 80092a0:	f001 f95e 	bl	800a560 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80092a4:	2301      	movs	r3, #1
 80092a6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80092a8:	f002 fa04 	bl	800b6b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80092ac:	f000 fed0 	bl	800a050 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80092b0:	f002 f9d0 	bl	800b654 <vPortEnterCritical>
 80092b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80092ba:	b25b      	sxtb	r3, r3
 80092bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092c0:	d103      	bne.n	80092ca <xQueueReceive+0x122>
 80092c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c4:	2200      	movs	r2, #0
 80092c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092d0:	b25b      	sxtb	r3, r3
 80092d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092d6:	d103      	bne.n	80092e0 <xQueueReceive+0x138>
 80092d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092da:	2200      	movs	r2, #0
 80092dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80092e0:	f002 f9e8 	bl	800b6b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80092e4:	1d3a      	adds	r2, r7, #4
 80092e6:	f107 0310 	add.w	r3, r7, #16
 80092ea:	4611      	mov	r1, r2
 80092ec:	4618      	mov	r0, r3
 80092ee:	f001 f94d 	bl	800a58c <xTaskCheckForTimeOut>
 80092f2:	4603      	mov	r3, r0
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d123      	bne.n	8009340 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80092f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092fa:	f000 fade 	bl	80098ba <prvIsQueueEmpty>
 80092fe:	4603      	mov	r3, r0
 8009300:	2b00      	cmp	r3, #0
 8009302:	d017      	beq.n	8009334 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009306:	3324      	adds	r3, #36	; 0x24
 8009308:	687a      	ldr	r2, [r7, #4]
 800930a:	4611      	mov	r1, r2
 800930c:	4618      	mov	r0, r3
 800930e:	f001 f873 	bl	800a3f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009312:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009314:	f000 fa7f 	bl	8009816 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009318:	f000 fea8 	bl	800a06c <xTaskResumeAll>
 800931c:	4603      	mov	r3, r0
 800931e:	2b00      	cmp	r3, #0
 8009320:	d189      	bne.n	8009236 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009322:	4b10      	ldr	r3, [pc, #64]	; (8009364 <xQueueReceive+0x1bc>)
 8009324:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009328:	601a      	str	r2, [r3, #0]
 800932a:	f3bf 8f4f 	dsb	sy
 800932e:	f3bf 8f6f 	isb	sy
 8009332:	e780      	b.n	8009236 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009334:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009336:	f000 fa6e 	bl	8009816 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800933a:	f000 fe97 	bl	800a06c <xTaskResumeAll>
 800933e:	e77a      	b.n	8009236 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009340:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009342:	f000 fa68 	bl	8009816 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009346:	f000 fe91 	bl	800a06c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800934a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800934c:	f000 fab5 	bl	80098ba <prvIsQueueEmpty>
 8009350:	4603      	mov	r3, r0
 8009352:	2b00      	cmp	r3, #0
 8009354:	f43f af6f 	beq.w	8009236 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009358:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800935a:	4618      	mov	r0, r3
 800935c:	3730      	adds	r7, #48	; 0x30
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
 8009362:	bf00      	nop
 8009364:	e000ed04 	.word	0xe000ed04

08009368 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b08e      	sub	sp, #56	; 0x38
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
 8009370:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009372:	2300      	movs	r3, #0
 8009374:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800937a:	2300      	movs	r3, #0
 800937c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800937e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009380:	2b00      	cmp	r3, #0
 8009382:	d10a      	bne.n	800939a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009388:	f383 8811 	msr	BASEPRI, r3
 800938c:	f3bf 8f6f 	isb	sy
 8009390:	f3bf 8f4f 	dsb	sy
 8009394:	623b      	str	r3, [r7, #32]
}
 8009396:	bf00      	nop
 8009398:	e7fe      	b.n	8009398 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800939a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800939c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d00a      	beq.n	80093b8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80093a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a6:	f383 8811 	msr	BASEPRI, r3
 80093aa:	f3bf 8f6f 	isb	sy
 80093ae:	f3bf 8f4f 	dsb	sy
 80093b2:	61fb      	str	r3, [r7, #28]
}
 80093b4:	bf00      	nop
 80093b6:	e7fe      	b.n	80093b6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80093b8:	f001 fa3c 	bl	800a834 <xTaskGetSchedulerState>
 80093bc:	4603      	mov	r3, r0
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d102      	bne.n	80093c8 <xQueueSemaphoreTake+0x60>
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d101      	bne.n	80093cc <xQueueSemaphoreTake+0x64>
 80093c8:	2301      	movs	r3, #1
 80093ca:	e000      	b.n	80093ce <xQueueSemaphoreTake+0x66>
 80093cc:	2300      	movs	r3, #0
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d10a      	bne.n	80093e8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80093d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d6:	f383 8811 	msr	BASEPRI, r3
 80093da:	f3bf 8f6f 	isb	sy
 80093de:	f3bf 8f4f 	dsb	sy
 80093e2:	61bb      	str	r3, [r7, #24]
}
 80093e4:	bf00      	nop
 80093e6:	e7fe      	b.n	80093e6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80093e8:	f002 f934 	bl	800b654 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80093ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093f0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80093f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d024      	beq.n	8009442 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80093f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093fa:	1e5a      	subs	r2, r3, #1
 80093fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093fe:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d104      	bne.n	8009412 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009408:	f001 fb8a 	bl	800ab20 <pvTaskIncrementMutexHeldCount>
 800940c:	4602      	mov	r2, r0
 800940e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009410:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009414:	691b      	ldr	r3, [r3, #16]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d00f      	beq.n	800943a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800941a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800941c:	3310      	adds	r3, #16
 800941e:	4618      	mov	r0, r3
 8009420:	f001 f83a 	bl	800a498 <xTaskRemoveFromEventList>
 8009424:	4603      	mov	r3, r0
 8009426:	2b00      	cmp	r3, #0
 8009428:	d007      	beq.n	800943a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800942a:	4b54      	ldr	r3, [pc, #336]	; (800957c <xQueueSemaphoreTake+0x214>)
 800942c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009430:	601a      	str	r2, [r3, #0]
 8009432:	f3bf 8f4f 	dsb	sy
 8009436:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800943a:	f002 f93b 	bl	800b6b4 <vPortExitCritical>
				return pdPASS;
 800943e:	2301      	movs	r3, #1
 8009440:	e097      	b.n	8009572 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d111      	bne.n	800946c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800944a:	2b00      	cmp	r3, #0
 800944c:	d00a      	beq.n	8009464 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800944e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009452:	f383 8811 	msr	BASEPRI, r3
 8009456:	f3bf 8f6f 	isb	sy
 800945a:	f3bf 8f4f 	dsb	sy
 800945e:	617b      	str	r3, [r7, #20]
}
 8009460:	bf00      	nop
 8009462:	e7fe      	b.n	8009462 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009464:	f002 f926 	bl	800b6b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009468:	2300      	movs	r3, #0
 800946a:	e082      	b.n	8009572 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800946c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800946e:	2b00      	cmp	r3, #0
 8009470:	d106      	bne.n	8009480 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009472:	f107 030c 	add.w	r3, r7, #12
 8009476:	4618      	mov	r0, r3
 8009478:	f001 f872 	bl	800a560 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800947c:	2301      	movs	r3, #1
 800947e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009480:	f002 f918 	bl	800b6b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009484:	f000 fde4 	bl	800a050 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009488:	f002 f8e4 	bl	800b654 <vPortEnterCritical>
 800948c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800948e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009492:	b25b      	sxtb	r3, r3
 8009494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009498:	d103      	bne.n	80094a2 <xQueueSemaphoreTake+0x13a>
 800949a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800949c:	2200      	movs	r2, #0
 800949e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80094a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094a8:	b25b      	sxtb	r3, r3
 80094aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094ae:	d103      	bne.n	80094b8 <xQueueSemaphoreTake+0x150>
 80094b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094b2:	2200      	movs	r2, #0
 80094b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80094b8:	f002 f8fc 	bl	800b6b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80094bc:	463a      	mov	r2, r7
 80094be:	f107 030c 	add.w	r3, r7, #12
 80094c2:	4611      	mov	r1, r2
 80094c4:	4618      	mov	r0, r3
 80094c6:	f001 f861 	bl	800a58c <xTaskCheckForTimeOut>
 80094ca:	4603      	mov	r3, r0
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d132      	bne.n	8009536 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80094d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80094d2:	f000 f9f2 	bl	80098ba <prvIsQueueEmpty>
 80094d6:	4603      	mov	r3, r0
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d026      	beq.n	800952a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80094dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d109      	bne.n	80094f8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80094e4:	f002 f8b6 	bl	800b654 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80094e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094ea:	689b      	ldr	r3, [r3, #8]
 80094ec:	4618      	mov	r0, r3
 80094ee:	f001 f9bf 	bl	800a870 <xTaskPriorityInherit>
 80094f2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80094f4:	f002 f8de 	bl	800b6b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80094f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094fa:	3324      	adds	r3, #36	; 0x24
 80094fc:	683a      	ldr	r2, [r7, #0]
 80094fe:	4611      	mov	r1, r2
 8009500:	4618      	mov	r0, r3
 8009502:	f000 ff79 	bl	800a3f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009506:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009508:	f000 f985 	bl	8009816 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800950c:	f000 fdae 	bl	800a06c <xTaskResumeAll>
 8009510:	4603      	mov	r3, r0
 8009512:	2b00      	cmp	r3, #0
 8009514:	f47f af68 	bne.w	80093e8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009518:	4b18      	ldr	r3, [pc, #96]	; (800957c <xQueueSemaphoreTake+0x214>)
 800951a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800951e:	601a      	str	r2, [r3, #0]
 8009520:	f3bf 8f4f 	dsb	sy
 8009524:	f3bf 8f6f 	isb	sy
 8009528:	e75e      	b.n	80093e8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800952a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800952c:	f000 f973 	bl	8009816 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009530:	f000 fd9c 	bl	800a06c <xTaskResumeAll>
 8009534:	e758      	b.n	80093e8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009536:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009538:	f000 f96d 	bl	8009816 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800953c:	f000 fd96 	bl	800a06c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009540:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009542:	f000 f9ba 	bl	80098ba <prvIsQueueEmpty>
 8009546:	4603      	mov	r3, r0
 8009548:	2b00      	cmp	r3, #0
 800954a:	f43f af4d 	beq.w	80093e8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800954e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009550:	2b00      	cmp	r3, #0
 8009552:	d00d      	beq.n	8009570 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009554:	f002 f87e 	bl	800b654 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009558:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800955a:	f000 f8b4 	bl	80096c6 <prvGetDisinheritPriorityAfterTimeout>
 800955e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009562:	689b      	ldr	r3, [r3, #8]
 8009564:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009566:	4618      	mov	r0, r3
 8009568:	f001 fa58 	bl	800aa1c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800956c:	f002 f8a2 	bl	800b6b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009570:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009572:	4618      	mov	r0, r3
 8009574:	3738      	adds	r7, #56	; 0x38
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}
 800957a:	bf00      	nop
 800957c:	e000ed04 	.word	0xe000ed04

08009580 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b08e      	sub	sp, #56	; 0x38
 8009584:	af00      	add	r7, sp, #0
 8009586:	60f8      	str	r0, [r7, #12]
 8009588:	60b9      	str	r1, [r7, #8]
 800958a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009592:	2b00      	cmp	r3, #0
 8009594:	d10a      	bne.n	80095ac <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8009596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800959a:	f383 8811 	msr	BASEPRI, r3
 800959e:	f3bf 8f6f 	isb	sy
 80095a2:	f3bf 8f4f 	dsb	sy
 80095a6:	623b      	str	r3, [r7, #32]
}
 80095a8:	bf00      	nop
 80095aa:	e7fe      	b.n	80095aa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d103      	bne.n	80095ba <xQueueReceiveFromISR+0x3a>
 80095b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d101      	bne.n	80095be <xQueueReceiveFromISR+0x3e>
 80095ba:	2301      	movs	r3, #1
 80095bc:	e000      	b.n	80095c0 <xQueueReceiveFromISR+0x40>
 80095be:	2300      	movs	r3, #0
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d10a      	bne.n	80095da <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80095c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c8:	f383 8811 	msr	BASEPRI, r3
 80095cc:	f3bf 8f6f 	isb	sy
 80095d0:	f3bf 8f4f 	dsb	sy
 80095d4:	61fb      	str	r3, [r7, #28]
}
 80095d6:	bf00      	nop
 80095d8:	e7fe      	b.n	80095d8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80095da:	f002 f91d 	bl	800b818 <vPortValidateInterruptPriority>
	__asm volatile
 80095de:	f3ef 8211 	mrs	r2, BASEPRI
 80095e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e6:	f383 8811 	msr	BASEPRI, r3
 80095ea:	f3bf 8f6f 	isb	sy
 80095ee:	f3bf 8f4f 	dsb	sy
 80095f2:	61ba      	str	r2, [r7, #24]
 80095f4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80095f6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80095f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80095fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095fe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009602:	2b00      	cmp	r3, #0
 8009604:	d02f      	beq.n	8009666 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009608:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800960c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009610:	68b9      	ldr	r1, [r7, #8]
 8009612:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009614:	f000 f8d9 	bl	80097ca <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800961a:	1e5a      	subs	r2, r3, #1
 800961c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800961e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009620:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009628:	d112      	bne.n	8009650 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800962a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800962c:	691b      	ldr	r3, [r3, #16]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d016      	beq.n	8009660 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009634:	3310      	adds	r3, #16
 8009636:	4618      	mov	r0, r3
 8009638:	f000 ff2e 	bl	800a498 <xTaskRemoveFromEventList>
 800963c:	4603      	mov	r3, r0
 800963e:	2b00      	cmp	r3, #0
 8009640:	d00e      	beq.n	8009660 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d00b      	beq.n	8009660 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2201      	movs	r2, #1
 800964c:	601a      	str	r2, [r3, #0]
 800964e:	e007      	b.n	8009660 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009650:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009654:	3301      	adds	r3, #1
 8009656:	b2db      	uxtb	r3, r3
 8009658:	b25a      	sxtb	r2, r3
 800965a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800965c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009660:	2301      	movs	r3, #1
 8009662:	637b      	str	r3, [r7, #52]	; 0x34
 8009664:	e001      	b.n	800966a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8009666:	2300      	movs	r3, #0
 8009668:	637b      	str	r3, [r7, #52]	; 0x34
 800966a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800966c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	f383 8811 	msr	BASEPRI, r3
}
 8009674:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009678:	4618      	mov	r0, r3
 800967a:	3738      	adds	r7, #56	; 0x38
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}

08009680 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b084      	sub	sp, #16
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d10a      	bne.n	80096a8 <vQueueDelete+0x28>
	__asm volatile
 8009692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009696:	f383 8811 	msr	BASEPRI, r3
 800969a:	f3bf 8f6f 	isb	sy
 800969e:	f3bf 8f4f 	dsb	sy
 80096a2:	60bb      	str	r3, [r7, #8]
}
 80096a4:	bf00      	nop
 80096a6:	e7fe      	b.n	80096a6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80096a8:	68f8      	ldr	r0, [r7, #12]
 80096aa:	f000 f95f 	bl	800996c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d102      	bne.n	80096be <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80096b8:	68f8      	ldr	r0, [r7, #12]
 80096ba:	f002 f9b9 	bl	800ba30 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80096be:	bf00      	nop
 80096c0:	3710      	adds	r7, #16
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}

080096c6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80096c6:	b480      	push	{r7}
 80096c8:	b085      	sub	sp, #20
 80096ca:	af00      	add	r7, sp, #0
 80096cc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d006      	beq.n	80096e4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80096e0:	60fb      	str	r3, [r7, #12]
 80096e2:	e001      	b.n	80096e8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80096e4:	2300      	movs	r3, #0
 80096e6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80096e8:	68fb      	ldr	r3, [r7, #12]
	}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3714      	adds	r7, #20
 80096ee:	46bd      	mov	sp, r7
 80096f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f4:	4770      	bx	lr

080096f6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80096f6:	b580      	push	{r7, lr}
 80096f8:	b086      	sub	sp, #24
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	60f8      	str	r0, [r7, #12]
 80096fe:	60b9      	str	r1, [r7, #8]
 8009700:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009702:	2300      	movs	r3, #0
 8009704:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800970a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009710:	2b00      	cmp	r3, #0
 8009712:	d10d      	bne.n	8009730 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d14d      	bne.n	80097b8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	689b      	ldr	r3, [r3, #8]
 8009720:	4618      	mov	r0, r3
 8009722:	f001 f90d 	bl	800a940 <xTaskPriorityDisinherit>
 8009726:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	2200      	movs	r2, #0
 800972c:	609a      	str	r2, [r3, #8]
 800972e:	e043      	b.n	80097b8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d119      	bne.n	800976a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	6858      	ldr	r0, [r3, #4]
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800973e:	461a      	mov	r2, r3
 8009740:	68b9      	ldr	r1, [r7, #8]
 8009742:	f002 fabd 	bl	800bcc0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	685a      	ldr	r2, [r3, #4]
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800974e:	441a      	add	r2, r3
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	685a      	ldr	r2, [r3, #4]
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	689b      	ldr	r3, [r3, #8]
 800975c:	429a      	cmp	r2, r3
 800975e:	d32b      	bcc.n	80097b8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681a      	ldr	r2, [r3, #0]
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	605a      	str	r2, [r3, #4]
 8009768:	e026      	b.n	80097b8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	68d8      	ldr	r0, [r3, #12]
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009772:	461a      	mov	r2, r3
 8009774:	68b9      	ldr	r1, [r7, #8]
 8009776:	f002 faa3 	bl	800bcc0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	68da      	ldr	r2, [r3, #12]
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009782:	425b      	negs	r3, r3
 8009784:	441a      	add	r2, r3
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	68da      	ldr	r2, [r3, #12]
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	429a      	cmp	r2, r3
 8009794:	d207      	bcs.n	80097a6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	689a      	ldr	r2, [r3, #8]
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800979e:	425b      	negs	r3, r3
 80097a0:	441a      	add	r2, r3
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2b02      	cmp	r3, #2
 80097aa:	d105      	bne.n	80097b8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d002      	beq.n	80097b8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	3b01      	subs	r3, #1
 80097b6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	1c5a      	adds	r2, r3, #1
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80097c0:	697b      	ldr	r3, [r7, #20]
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3718      	adds	r7, #24
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}

080097ca <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80097ca:	b580      	push	{r7, lr}
 80097cc:	b082      	sub	sp, #8
 80097ce:	af00      	add	r7, sp, #0
 80097d0:	6078      	str	r0, [r7, #4]
 80097d2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d018      	beq.n	800980e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	68da      	ldr	r2, [r3, #12]
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097e4:	441a      	add	r2, r3
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	68da      	ldr	r2, [r3, #12]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	689b      	ldr	r3, [r3, #8]
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d303      	bcc.n	80097fe <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681a      	ldr	r2, [r3, #0]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	68d9      	ldr	r1, [r3, #12]
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009806:	461a      	mov	r2, r3
 8009808:	6838      	ldr	r0, [r7, #0]
 800980a:	f002 fa59 	bl	800bcc0 <memcpy>
	}
}
 800980e:	bf00      	nop
 8009810:	3708      	adds	r7, #8
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}

08009816 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009816:	b580      	push	{r7, lr}
 8009818:	b084      	sub	sp, #16
 800981a:	af00      	add	r7, sp, #0
 800981c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800981e:	f001 ff19 	bl	800b654 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009828:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800982a:	e011      	b.n	8009850 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009830:	2b00      	cmp	r3, #0
 8009832:	d012      	beq.n	800985a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	3324      	adds	r3, #36	; 0x24
 8009838:	4618      	mov	r0, r3
 800983a:	f000 fe2d 	bl	800a498 <xTaskRemoveFromEventList>
 800983e:	4603      	mov	r3, r0
 8009840:	2b00      	cmp	r3, #0
 8009842:	d001      	beq.n	8009848 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009844:	f000 ff04 	bl	800a650 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009848:	7bfb      	ldrb	r3, [r7, #15]
 800984a:	3b01      	subs	r3, #1
 800984c:	b2db      	uxtb	r3, r3
 800984e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009850:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009854:	2b00      	cmp	r3, #0
 8009856:	dce9      	bgt.n	800982c <prvUnlockQueue+0x16>
 8009858:	e000      	b.n	800985c <prvUnlockQueue+0x46>
					break;
 800985a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	22ff      	movs	r2, #255	; 0xff
 8009860:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009864:	f001 ff26 	bl	800b6b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009868:	f001 fef4 	bl	800b654 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009872:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009874:	e011      	b.n	800989a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	691b      	ldr	r3, [r3, #16]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d012      	beq.n	80098a4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	3310      	adds	r3, #16
 8009882:	4618      	mov	r0, r3
 8009884:	f000 fe08 	bl	800a498 <xTaskRemoveFromEventList>
 8009888:	4603      	mov	r3, r0
 800988a:	2b00      	cmp	r3, #0
 800988c:	d001      	beq.n	8009892 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800988e:	f000 fedf 	bl	800a650 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009892:	7bbb      	ldrb	r3, [r7, #14]
 8009894:	3b01      	subs	r3, #1
 8009896:	b2db      	uxtb	r3, r3
 8009898:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800989a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	dce9      	bgt.n	8009876 <prvUnlockQueue+0x60>
 80098a2:	e000      	b.n	80098a6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80098a4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	22ff      	movs	r2, #255	; 0xff
 80098aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80098ae:	f001 ff01 	bl	800b6b4 <vPortExitCritical>
}
 80098b2:	bf00      	nop
 80098b4:	3710      	adds	r7, #16
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}

080098ba <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80098ba:	b580      	push	{r7, lr}
 80098bc:	b084      	sub	sp, #16
 80098be:	af00      	add	r7, sp, #0
 80098c0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80098c2:	f001 fec7 	bl	800b654 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d102      	bne.n	80098d4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80098ce:	2301      	movs	r3, #1
 80098d0:	60fb      	str	r3, [r7, #12]
 80098d2:	e001      	b.n	80098d8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80098d4:	2300      	movs	r3, #0
 80098d6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80098d8:	f001 feec 	bl	800b6b4 <vPortExitCritical>

	return xReturn;
 80098dc:	68fb      	ldr	r3, [r7, #12]
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3710      	adds	r7, #16
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}

080098e6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80098e6:	b580      	push	{r7, lr}
 80098e8:	b084      	sub	sp, #16
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80098ee:	f001 feb1 	bl	800b654 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098fa:	429a      	cmp	r2, r3
 80098fc:	d102      	bne.n	8009904 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80098fe:	2301      	movs	r3, #1
 8009900:	60fb      	str	r3, [r7, #12]
 8009902:	e001      	b.n	8009908 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009904:	2300      	movs	r3, #0
 8009906:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009908:	f001 fed4 	bl	800b6b4 <vPortExitCritical>

	return xReturn;
 800990c:	68fb      	ldr	r3, [r7, #12]
}
 800990e:	4618      	mov	r0, r3
 8009910:	3710      	adds	r7, #16
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}
	...

08009918 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009918:	b480      	push	{r7}
 800991a:	b085      	sub	sp, #20
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
 8009920:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009922:	2300      	movs	r3, #0
 8009924:	60fb      	str	r3, [r7, #12]
 8009926:	e014      	b.n	8009952 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009928:	4a0f      	ldr	r2, [pc, #60]	; (8009968 <vQueueAddToRegistry+0x50>)
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d10b      	bne.n	800994c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009934:	490c      	ldr	r1, [pc, #48]	; (8009968 <vQueueAddToRegistry+0x50>)
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	683a      	ldr	r2, [r7, #0]
 800993a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800993e:	4a0a      	ldr	r2, [pc, #40]	; (8009968 <vQueueAddToRegistry+0x50>)
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	00db      	lsls	r3, r3, #3
 8009944:	4413      	add	r3, r2
 8009946:	687a      	ldr	r2, [r7, #4]
 8009948:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800994a:	e006      	b.n	800995a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	3301      	adds	r3, #1
 8009950:	60fb      	str	r3, [r7, #12]
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	2b07      	cmp	r3, #7
 8009956:	d9e7      	bls.n	8009928 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009958:	bf00      	nop
 800995a:	bf00      	nop
 800995c:	3714      	adds	r7, #20
 800995e:	46bd      	mov	sp, r7
 8009960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009964:	4770      	bx	lr
 8009966:	bf00      	nop
 8009968:	20000dc8 	.word	0x20000dc8

0800996c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800996c:	b480      	push	{r7}
 800996e:	b085      	sub	sp, #20
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009974:	2300      	movs	r3, #0
 8009976:	60fb      	str	r3, [r7, #12]
 8009978:	e016      	b.n	80099a8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800997a:	4a10      	ldr	r2, [pc, #64]	; (80099bc <vQueueUnregisterQueue+0x50>)
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	00db      	lsls	r3, r3, #3
 8009980:	4413      	add	r3, r2
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	687a      	ldr	r2, [r7, #4]
 8009986:	429a      	cmp	r2, r3
 8009988:	d10b      	bne.n	80099a2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800998a:	4a0c      	ldr	r2, [pc, #48]	; (80099bc <vQueueUnregisterQueue+0x50>)
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	2100      	movs	r1, #0
 8009990:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009994:	4a09      	ldr	r2, [pc, #36]	; (80099bc <vQueueUnregisterQueue+0x50>)
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	00db      	lsls	r3, r3, #3
 800999a:	4413      	add	r3, r2
 800999c:	2200      	movs	r2, #0
 800999e:	605a      	str	r2, [r3, #4]
				break;
 80099a0:	e006      	b.n	80099b0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	3301      	adds	r3, #1
 80099a6:	60fb      	str	r3, [r7, #12]
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	2b07      	cmp	r3, #7
 80099ac:	d9e5      	bls.n	800997a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80099ae:	bf00      	nop
 80099b0:	bf00      	nop
 80099b2:	3714      	adds	r7, #20
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr
 80099bc:	20000dc8 	.word	0x20000dc8

080099c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b086      	sub	sp, #24
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	60f8      	str	r0, [r7, #12]
 80099c8:	60b9      	str	r1, [r7, #8]
 80099ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80099d0:	f001 fe40 	bl	800b654 <vPortEnterCritical>
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80099da:	b25b      	sxtb	r3, r3
 80099dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099e0:	d103      	bne.n	80099ea <vQueueWaitForMessageRestricted+0x2a>
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	2200      	movs	r2, #0
 80099e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099f0:	b25b      	sxtb	r3, r3
 80099f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099f6:	d103      	bne.n	8009a00 <vQueueWaitForMessageRestricted+0x40>
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	2200      	movs	r2, #0
 80099fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009a00:	f001 fe58 	bl	800b6b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d106      	bne.n	8009a1a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	3324      	adds	r3, #36	; 0x24
 8009a10:	687a      	ldr	r2, [r7, #4]
 8009a12:	68b9      	ldr	r1, [r7, #8]
 8009a14:	4618      	mov	r0, r3
 8009a16:	f000 fd13 	bl	800a440 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009a1a:	6978      	ldr	r0, [r7, #20]
 8009a1c:	f7ff fefb 	bl	8009816 <prvUnlockQueue>
	}
 8009a20:	bf00      	nop
 8009a22:	3718      	adds	r7, #24
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}

08009a28 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b08e      	sub	sp, #56	; 0x38
 8009a2c:	af04      	add	r7, sp, #16
 8009a2e:	60f8      	str	r0, [r7, #12]
 8009a30:	60b9      	str	r1, [r7, #8]
 8009a32:	607a      	str	r2, [r7, #4]
 8009a34:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d10a      	bne.n	8009a52 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a40:	f383 8811 	msr	BASEPRI, r3
 8009a44:	f3bf 8f6f 	isb	sy
 8009a48:	f3bf 8f4f 	dsb	sy
 8009a4c:	623b      	str	r3, [r7, #32]
}
 8009a4e:	bf00      	nop
 8009a50:	e7fe      	b.n	8009a50 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d10a      	bne.n	8009a6e <xTaskCreateStatic+0x46>
	__asm volatile
 8009a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a5c:	f383 8811 	msr	BASEPRI, r3
 8009a60:	f3bf 8f6f 	isb	sy
 8009a64:	f3bf 8f4f 	dsb	sy
 8009a68:	61fb      	str	r3, [r7, #28]
}
 8009a6a:	bf00      	nop
 8009a6c:	e7fe      	b.n	8009a6c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009a6e:	235c      	movs	r3, #92	; 0x5c
 8009a70:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	2b5c      	cmp	r3, #92	; 0x5c
 8009a76:	d00a      	beq.n	8009a8e <xTaskCreateStatic+0x66>
	__asm volatile
 8009a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a7c:	f383 8811 	msr	BASEPRI, r3
 8009a80:	f3bf 8f6f 	isb	sy
 8009a84:	f3bf 8f4f 	dsb	sy
 8009a88:	61bb      	str	r3, [r7, #24]
}
 8009a8a:	bf00      	nop
 8009a8c:	e7fe      	b.n	8009a8c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009a8e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d01e      	beq.n	8009ad4 <xTaskCreateStatic+0xac>
 8009a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d01b      	beq.n	8009ad4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a9e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009aa4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa8:	2202      	movs	r2, #2
 8009aaa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009aae:	2300      	movs	r3, #0
 8009ab0:	9303      	str	r3, [sp, #12]
 8009ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab4:	9302      	str	r3, [sp, #8]
 8009ab6:	f107 0314 	add.w	r3, r7, #20
 8009aba:	9301      	str	r3, [sp, #4]
 8009abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009abe:	9300      	str	r3, [sp, #0]
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	687a      	ldr	r2, [r7, #4]
 8009ac4:	68b9      	ldr	r1, [r7, #8]
 8009ac6:	68f8      	ldr	r0, [r7, #12]
 8009ac8:	f000 f850 	bl	8009b6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009acc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009ace:	f000 f8dd 	bl	8009c8c <prvAddNewTaskToReadyList>
 8009ad2:	e001      	b.n	8009ad8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009ad8:	697b      	ldr	r3, [r7, #20]
	}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3728      	adds	r7, #40	; 0x28
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}

08009ae2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009ae2:	b580      	push	{r7, lr}
 8009ae4:	b08c      	sub	sp, #48	; 0x30
 8009ae6:	af04      	add	r7, sp, #16
 8009ae8:	60f8      	str	r0, [r7, #12]
 8009aea:	60b9      	str	r1, [r7, #8]
 8009aec:	603b      	str	r3, [r7, #0]
 8009aee:	4613      	mov	r3, r2
 8009af0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009af2:	88fb      	ldrh	r3, [r7, #6]
 8009af4:	009b      	lsls	r3, r3, #2
 8009af6:	4618      	mov	r0, r3
 8009af8:	f001 fece 	bl	800b898 <pvPortMalloc>
 8009afc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d00e      	beq.n	8009b22 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009b04:	205c      	movs	r0, #92	; 0x5c
 8009b06:	f001 fec7 	bl	800b898 <pvPortMalloc>
 8009b0a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009b0c:	69fb      	ldr	r3, [r7, #28]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d003      	beq.n	8009b1a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009b12:	69fb      	ldr	r3, [r7, #28]
 8009b14:	697a      	ldr	r2, [r7, #20]
 8009b16:	631a      	str	r2, [r3, #48]	; 0x30
 8009b18:	e005      	b.n	8009b26 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009b1a:	6978      	ldr	r0, [r7, #20]
 8009b1c:	f001 ff88 	bl	800ba30 <vPortFree>
 8009b20:	e001      	b.n	8009b26 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009b22:	2300      	movs	r3, #0
 8009b24:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009b26:	69fb      	ldr	r3, [r7, #28]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d017      	beq.n	8009b5c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009b2c:	69fb      	ldr	r3, [r7, #28]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009b34:	88fa      	ldrh	r2, [r7, #6]
 8009b36:	2300      	movs	r3, #0
 8009b38:	9303      	str	r3, [sp, #12]
 8009b3a:	69fb      	ldr	r3, [r7, #28]
 8009b3c:	9302      	str	r3, [sp, #8]
 8009b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b40:	9301      	str	r3, [sp, #4]
 8009b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b44:	9300      	str	r3, [sp, #0]
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	68b9      	ldr	r1, [r7, #8]
 8009b4a:	68f8      	ldr	r0, [r7, #12]
 8009b4c:	f000 f80e 	bl	8009b6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009b50:	69f8      	ldr	r0, [r7, #28]
 8009b52:	f000 f89b 	bl	8009c8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009b56:	2301      	movs	r3, #1
 8009b58:	61bb      	str	r3, [r7, #24]
 8009b5a:	e002      	b.n	8009b62 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8009b60:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009b62:	69bb      	ldr	r3, [r7, #24]
	}
 8009b64:	4618      	mov	r0, r3
 8009b66:	3720      	adds	r7, #32
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}

08009b6c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b088      	sub	sp, #32
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	60f8      	str	r0, [r7, #12]
 8009b74:	60b9      	str	r1, [r7, #8]
 8009b76:	607a      	str	r2, [r7, #4]
 8009b78:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b7c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	009b      	lsls	r3, r3, #2
 8009b82:	461a      	mov	r2, r3
 8009b84:	21a5      	movs	r1, #165	; 0xa5
 8009b86:	f002 f8a9 	bl	800bcdc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009b94:	3b01      	subs	r3, #1
 8009b96:	009b      	lsls	r3, r3, #2
 8009b98:	4413      	add	r3, r2
 8009b9a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009b9c:	69bb      	ldr	r3, [r7, #24]
 8009b9e:	f023 0307 	bic.w	r3, r3, #7
 8009ba2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009ba4:	69bb      	ldr	r3, [r7, #24]
 8009ba6:	f003 0307 	and.w	r3, r3, #7
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d00a      	beq.n	8009bc4 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb2:	f383 8811 	msr	BASEPRI, r3
 8009bb6:	f3bf 8f6f 	isb	sy
 8009bba:	f3bf 8f4f 	dsb	sy
 8009bbe:	617b      	str	r3, [r7, #20]
}
 8009bc0:	bf00      	nop
 8009bc2:	e7fe      	b.n	8009bc2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d01f      	beq.n	8009c0a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009bca:	2300      	movs	r3, #0
 8009bcc:	61fb      	str	r3, [r7, #28]
 8009bce:	e012      	b.n	8009bf6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009bd0:	68ba      	ldr	r2, [r7, #8]
 8009bd2:	69fb      	ldr	r3, [r7, #28]
 8009bd4:	4413      	add	r3, r2
 8009bd6:	7819      	ldrb	r1, [r3, #0]
 8009bd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bda:	69fb      	ldr	r3, [r7, #28]
 8009bdc:	4413      	add	r3, r2
 8009bde:	3334      	adds	r3, #52	; 0x34
 8009be0:	460a      	mov	r2, r1
 8009be2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009be4:	68ba      	ldr	r2, [r7, #8]
 8009be6:	69fb      	ldr	r3, [r7, #28]
 8009be8:	4413      	add	r3, r2
 8009bea:	781b      	ldrb	r3, [r3, #0]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d006      	beq.n	8009bfe <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009bf0:	69fb      	ldr	r3, [r7, #28]
 8009bf2:	3301      	adds	r3, #1
 8009bf4:	61fb      	str	r3, [r7, #28]
 8009bf6:	69fb      	ldr	r3, [r7, #28]
 8009bf8:	2b0f      	cmp	r3, #15
 8009bfa:	d9e9      	bls.n	8009bd0 <prvInitialiseNewTask+0x64>
 8009bfc:	e000      	b.n	8009c00 <prvInitialiseNewTask+0x94>
			{
				break;
 8009bfe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c02:	2200      	movs	r2, #0
 8009c04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009c08:	e003      	b.n	8009c12 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c14:	2b37      	cmp	r3, #55	; 0x37
 8009c16:	d901      	bls.n	8009c1c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009c18:	2337      	movs	r3, #55	; 0x37
 8009c1a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c20:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c26:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c30:	3304      	adds	r3, #4
 8009c32:	4618      	mov	r0, r3
 8009c34:	f7fe fda0 	bl	8008778 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c3a:	3318      	adds	r3, #24
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	f7fe fd9b 	bl	8008778 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c46:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c4a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c50:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c56:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c60:	2200      	movs	r2, #0
 8009c62:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009c66:	683a      	ldr	r2, [r7, #0]
 8009c68:	68f9      	ldr	r1, [r7, #12]
 8009c6a:	69b8      	ldr	r0, [r7, #24]
 8009c6c:	f001 fbc8 	bl	800b400 <pxPortInitialiseStack>
 8009c70:	4602      	mov	r2, r0
 8009c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c74:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d002      	beq.n	8009c82 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c82:	bf00      	nop
 8009c84:	3720      	adds	r7, #32
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}
	...

08009c8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b082      	sub	sp, #8
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009c94:	f001 fcde 	bl	800b654 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009c98:	4b2d      	ldr	r3, [pc, #180]	; (8009d50 <prvAddNewTaskToReadyList+0xc4>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	3301      	adds	r3, #1
 8009c9e:	4a2c      	ldr	r2, [pc, #176]	; (8009d50 <prvAddNewTaskToReadyList+0xc4>)
 8009ca0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009ca2:	4b2c      	ldr	r3, [pc, #176]	; (8009d54 <prvAddNewTaskToReadyList+0xc8>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d109      	bne.n	8009cbe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009caa:	4a2a      	ldr	r2, [pc, #168]	; (8009d54 <prvAddNewTaskToReadyList+0xc8>)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009cb0:	4b27      	ldr	r3, [pc, #156]	; (8009d50 <prvAddNewTaskToReadyList+0xc4>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	2b01      	cmp	r3, #1
 8009cb6:	d110      	bne.n	8009cda <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009cb8:	f000 fcee 	bl	800a698 <prvInitialiseTaskLists>
 8009cbc:	e00d      	b.n	8009cda <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009cbe:	4b26      	ldr	r3, [pc, #152]	; (8009d58 <prvAddNewTaskToReadyList+0xcc>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d109      	bne.n	8009cda <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009cc6:	4b23      	ldr	r3, [pc, #140]	; (8009d54 <prvAddNewTaskToReadyList+0xc8>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cd0:	429a      	cmp	r2, r3
 8009cd2:	d802      	bhi.n	8009cda <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009cd4:	4a1f      	ldr	r2, [pc, #124]	; (8009d54 <prvAddNewTaskToReadyList+0xc8>)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009cda:	4b20      	ldr	r3, [pc, #128]	; (8009d5c <prvAddNewTaskToReadyList+0xd0>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	3301      	adds	r3, #1
 8009ce0:	4a1e      	ldr	r2, [pc, #120]	; (8009d5c <prvAddNewTaskToReadyList+0xd0>)
 8009ce2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009ce4:	4b1d      	ldr	r3, [pc, #116]	; (8009d5c <prvAddNewTaskToReadyList+0xd0>)
 8009ce6:	681a      	ldr	r2, [r3, #0]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cf0:	4b1b      	ldr	r3, [pc, #108]	; (8009d60 <prvAddNewTaskToReadyList+0xd4>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	429a      	cmp	r2, r3
 8009cf6:	d903      	bls.n	8009d00 <prvAddNewTaskToReadyList+0x74>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cfc:	4a18      	ldr	r2, [pc, #96]	; (8009d60 <prvAddNewTaskToReadyList+0xd4>)
 8009cfe:	6013      	str	r3, [r2, #0]
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d04:	4613      	mov	r3, r2
 8009d06:	009b      	lsls	r3, r3, #2
 8009d08:	4413      	add	r3, r2
 8009d0a:	009b      	lsls	r3, r3, #2
 8009d0c:	4a15      	ldr	r2, [pc, #84]	; (8009d64 <prvAddNewTaskToReadyList+0xd8>)
 8009d0e:	441a      	add	r2, r3
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	3304      	adds	r3, #4
 8009d14:	4619      	mov	r1, r3
 8009d16:	4610      	mov	r0, r2
 8009d18:	f7fe fd3b 	bl	8008792 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009d1c:	f001 fcca 	bl	800b6b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009d20:	4b0d      	ldr	r3, [pc, #52]	; (8009d58 <prvAddNewTaskToReadyList+0xcc>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d00e      	beq.n	8009d46 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009d28:	4b0a      	ldr	r3, [pc, #40]	; (8009d54 <prvAddNewTaskToReadyList+0xc8>)
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d32:	429a      	cmp	r2, r3
 8009d34:	d207      	bcs.n	8009d46 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009d36:	4b0c      	ldr	r3, [pc, #48]	; (8009d68 <prvAddNewTaskToReadyList+0xdc>)
 8009d38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d3c:	601a      	str	r2, [r3, #0]
 8009d3e:	f3bf 8f4f 	dsb	sy
 8009d42:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009d46:	bf00      	nop
 8009d48:	3708      	adds	r7, #8
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}
 8009d4e:	bf00      	nop
 8009d50:	200012dc 	.word	0x200012dc
 8009d54:	20000e08 	.word	0x20000e08
 8009d58:	200012e8 	.word	0x200012e8
 8009d5c:	200012f8 	.word	0x200012f8
 8009d60:	200012e4 	.word	0x200012e4
 8009d64:	20000e0c 	.word	0x20000e0c
 8009d68:	e000ed04 	.word	0xe000ed04

08009d6c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b084      	sub	sp, #16
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8009d74:	f001 fc6e 	bl	800b654 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d102      	bne.n	8009d84 <vTaskDelete+0x18>
 8009d7e:	4b2c      	ldr	r3, [pc, #176]	; (8009e30 <vTaskDelete+0xc4>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	e000      	b.n	8009d86 <vTaskDelete+0x1a>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	3304      	adds	r3, #4
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f7fe fd5d 	bl	800884c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d004      	beq.n	8009da4 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	3318      	adds	r3, #24
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f7fe fd54 	bl	800884c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8009da4:	4b23      	ldr	r3, [pc, #140]	; (8009e34 <vTaskDelete+0xc8>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	3301      	adds	r3, #1
 8009daa:	4a22      	ldr	r2, [pc, #136]	; (8009e34 <vTaskDelete+0xc8>)
 8009dac:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8009dae:	4b20      	ldr	r3, [pc, #128]	; (8009e30 <vTaskDelete+0xc4>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	68fa      	ldr	r2, [r7, #12]
 8009db4:	429a      	cmp	r2, r3
 8009db6:	d10b      	bne.n	8009dd0 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	3304      	adds	r3, #4
 8009dbc:	4619      	mov	r1, r3
 8009dbe:	481e      	ldr	r0, [pc, #120]	; (8009e38 <vTaskDelete+0xcc>)
 8009dc0:	f7fe fce7 	bl	8008792 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8009dc4:	4b1d      	ldr	r3, [pc, #116]	; (8009e3c <vTaskDelete+0xd0>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	3301      	adds	r3, #1
 8009dca:	4a1c      	ldr	r2, [pc, #112]	; (8009e3c <vTaskDelete+0xd0>)
 8009dcc:	6013      	str	r3, [r2, #0]
 8009dce:	e009      	b.n	8009de4 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8009dd0:	4b1b      	ldr	r3, [pc, #108]	; (8009e40 <vTaskDelete+0xd4>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	3b01      	subs	r3, #1
 8009dd6:	4a1a      	ldr	r2, [pc, #104]	; (8009e40 <vTaskDelete+0xd4>)
 8009dd8:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8009dda:	68f8      	ldr	r0, [r7, #12]
 8009ddc:	f000 fcca 	bl	800a774 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8009de0:	f000 fcf8 	bl	800a7d4 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8009de4:	f001 fc66 	bl	800b6b4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8009de8:	4b16      	ldr	r3, [pc, #88]	; (8009e44 <vTaskDelete+0xd8>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d01b      	beq.n	8009e28 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8009df0:	4b0f      	ldr	r3, [pc, #60]	; (8009e30 <vTaskDelete+0xc4>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	68fa      	ldr	r2, [r7, #12]
 8009df6:	429a      	cmp	r2, r3
 8009df8:	d116      	bne.n	8009e28 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8009dfa:	4b13      	ldr	r3, [pc, #76]	; (8009e48 <vTaskDelete+0xdc>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d00a      	beq.n	8009e18 <vTaskDelete+0xac>
	__asm volatile
 8009e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e06:	f383 8811 	msr	BASEPRI, r3
 8009e0a:	f3bf 8f6f 	isb	sy
 8009e0e:	f3bf 8f4f 	dsb	sy
 8009e12:	60bb      	str	r3, [r7, #8]
}
 8009e14:	bf00      	nop
 8009e16:	e7fe      	b.n	8009e16 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8009e18:	4b0c      	ldr	r3, [pc, #48]	; (8009e4c <vTaskDelete+0xe0>)
 8009e1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e1e:	601a      	str	r2, [r3, #0]
 8009e20:	f3bf 8f4f 	dsb	sy
 8009e24:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009e28:	bf00      	nop
 8009e2a:	3710      	adds	r7, #16
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}
 8009e30:	20000e08 	.word	0x20000e08
 8009e34:	200012f8 	.word	0x200012f8
 8009e38:	200012b0 	.word	0x200012b0
 8009e3c:	200012c4 	.word	0x200012c4
 8009e40:	200012dc 	.word	0x200012dc
 8009e44:	200012e8 	.word	0x200012e8
 8009e48:	20001304 	.word	0x20001304
 8009e4c:	e000ed04 	.word	0xe000ed04

08009e50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b084      	sub	sp, #16
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009e58:	2300      	movs	r3, #0
 8009e5a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d017      	beq.n	8009e92 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009e62:	4b13      	ldr	r3, [pc, #76]	; (8009eb0 <vTaskDelay+0x60>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d00a      	beq.n	8009e80 <vTaskDelay+0x30>
	__asm volatile
 8009e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e6e:	f383 8811 	msr	BASEPRI, r3
 8009e72:	f3bf 8f6f 	isb	sy
 8009e76:	f3bf 8f4f 	dsb	sy
 8009e7a:	60bb      	str	r3, [r7, #8]
}
 8009e7c:	bf00      	nop
 8009e7e:	e7fe      	b.n	8009e7e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009e80:	f000 f8e6 	bl	800a050 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009e84:	2100      	movs	r1, #0
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f000 fe5e 	bl	800ab48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009e8c:	f000 f8ee 	bl	800a06c <xTaskResumeAll>
 8009e90:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d107      	bne.n	8009ea8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009e98:	4b06      	ldr	r3, [pc, #24]	; (8009eb4 <vTaskDelay+0x64>)
 8009e9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e9e:	601a      	str	r2, [r3, #0]
 8009ea0:	f3bf 8f4f 	dsb	sy
 8009ea4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009ea8:	bf00      	nop
 8009eaa:	3710      	adds	r7, #16
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}
 8009eb0:	20001304 	.word	0x20001304
 8009eb4:	e000ed04 	.word	0xe000ed04

08009eb8 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b088      	sub	sp, #32
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8009ec4:	69bb      	ldr	r3, [r7, #24]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d10a      	bne.n	8009ee0 <eTaskGetState+0x28>
	__asm volatile
 8009eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ece:	f383 8811 	msr	BASEPRI, r3
 8009ed2:	f3bf 8f6f 	isb	sy
 8009ed6:	f3bf 8f4f 	dsb	sy
 8009eda:	60bb      	str	r3, [r7, #8]
}
 8009edc:	bf00      	nop
 8009ede:	e7fe      	b.n	8009ede <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8009ee0:	4b23      	ldr	r3, [pc, #140]	; (8009f70 <eTaskGetState+0xb8>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	69ba      	ldr	r2, [r7, #24]
 8009ee6:	429a      	cmp	r2, r3
 8009ee8:	d102      	bne.n	8009ef0 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8009eea:	2300      	movs	r3, #0
 8009eec:	77fb      	strb	r3, [r7, #31]
 8009eee:	e03a      	b.n	8009f66 <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 8009ef0:	f001 fbb0 	bl	800b654 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8009ef4:	69bb      	ldr	r3, [r7, #24]
 8009ef6:	695b      	ldr	r3, [r3, #20]
 8009ef8:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8009efa:	4b1e      	ldr	r3, [pc, #120]	; (8009f74 <eTaskGetState+0xbc>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8009f00:	4b1d      	ldr	r3, [pc, #116]	; (8009f78 <eTaskGetState+0xc0>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8009f06:	f001 fbd5 	bl	800b6b4 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8009f0a:	697a      	ldr	r2, [r7, #20]
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	429a      	cmp	r2, r3
 8009f10:	d003      	beq.n	8009f1a <eTaskGetState+0x62>
 8009f12:	697a      	ldr	r2, [r7, #20]
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	429a      	cmp	r2, r3
 8009f18:	d102      	bne.n	8009f20 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8009f1a:	2302      	movs	r3, #2
 8009f1c:	77fb      	strb	r3, [r7, #31]
 8009f1e:	e022      	b.n	8009f66 <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	4a16      	ldr	r2, [pc, #88]	; (8009f7c <eTaskGetState+0xc4>)
 8009f24:	4293      	cmp	r3, r2
 8009f26:	d112      	bne.n	8009f4e <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8009f28:	69bb      	ldr	r3, [r7, #24]
 8009f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d10b      	bne.n	8009f48 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8009f30:	69bb      	ldr	r3, [r7, #24]
 8009f32:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009f36:	b2db      	uxtb	r3, r3
 8009f38:	2b01      	cmp	r3, #1
 8009f3a:	d102      	bne.n	8009f42 <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8009f3c:	2302      	movs	r3, #2
 8009f3e:	77fb      	strb	r3, [r7, #31]
 8009f40:	e011      	b.n	8009f66 <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 8009f42:	2303      	movs	r3, #3
 8009f44:	77fb      	strb	r3, [r7, #31]
 8009f46:	e00e      	b.n	8009f66 <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8009f48:	2302      	movs	r3, #2
 8009f4a:	77fb      	strb	r3, [r7, #31]
 8009f4c:	e00b      	b.n	8009f66 <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	4a0b      	ldr	r2, [pc, #44]	; (8009f80 <eTaskGetState+0xc8>)
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d002      	beq.n	8009f5c <eTaskGetState+0xa4>
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d102      	bne.n	8009f62 <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8009f5c:	2304      	movs	r3, #4
 8009f5e:	77fb      	strb	r3, [r7, #31]
 8009f60:	e001      	b.n	8009f66 <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8009f62:	2301      	movs	r3, #1
 8009f64:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8009f66:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3720      	adds	r7, #32
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}
 8009f70:	20000e08 	.word	0x20000e08
 8009f74:	20001294 	.word	0x20001294
 8009f78:	20001298 	.word	0x20001298
 8009f7c:	200012c8 	.word	0x200012c8
 8009f80:	200012b0 	.word	0x200012b0

08009f84 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b08a      	sub	sp, #40	; 0x28
 8009f88:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009f92:	463a      	mov	r2, r7
 8009f94:	1d39      	adds	r1, r7, #4
 8009f96:	f107 0308 	add.w	r3, r7, #8
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f7fe fb98 	bl	80086d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009fa0:	6839      	ldr	r1, [r7, #0]
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	68ba      	ldr	r2, [r7, #8]
 8009fa6:	9202      	str	r2, [sp, #8]
 8009fa8:	9301      	str	r3, [sp, #4]
 8009faa:	2300      	movs	r3, #0
 8009fac:	9300      	str	r3, [sp, #0]
 8009fae:	2300      	movs	r3, #0
 8009fb0:	460a      	mov	r2, r1
 8009fb2:	4921      	ldr	r1, [pc, #132]	; (800a038 <vTaskStartScheduler+0xb4>)
 8009fb4:	4821      	ldr	r0, [pc, #132]	; (800a03c <vTaskStartScheduler+0xb8>)
 8009fb6:	f7ff fd37 	bl	8009a28 <xTaskCreateStatic>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	4a20      	ldr	r2, [pc, #128]	; (800a040 <vTaskStartScheduler+0xbc>)
 8009fbe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009fc0:	4b1f      	ldr	r3, [pc, #124]	; (800a040 <vTaskStartScheduler+0xbc>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d002      	beq.n	8009fce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009fc8:	2301      	movs	r3, #1
 8009fca:	617b      	str	r3, [r7, #20]
 8009fcc:	e001      	b.n	8009fd2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	2b01      	cmp	r3, #1
 8009fd6:	d102      	bne.n	8009fde <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009fd8:	f000 fe0a 	bl	800abf0 <xTimerCreateTimerTask>
 8009fdc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	2b01      	cmp	r3, #1
 8009fe2:	d116      	bne.n	800a012 <vTaskStartScheduler+0x8e>
	__asm volatile
 8009fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe8:	f383 8811 	msr	BASEPRI, r3
 8009fec:	f3bf 8f6f 	isb	sy
 8009ff0:	f3bf 8f4f 	dsb	sy
 8009ff4:	613b      	str	r3, [r7, #16]
}
 8009ff6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009ff8:	4b12      	ldr	r3, [pc, #72]	; (800a044 <vTaskStartScheduler+0xc0>)
 8009ffa:	f04f 32ff 	mov.w	r2, #4294967295
 8009ffe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a000:	4b11      	ldr	r3, [pc, #68]	; (800a048 <vTaskStartScheduler+0xc4>)
 800a002:	2201      	movs	r2, #1
 800a004:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a006:	4b11      	ldr	r3, [pc, #68]	; (800a04c <vTaskStartScheduler+0xc8>)
 800a008:	2200      	movs	r2, #0
 800a00a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a00c:	f001 fa80 	bl	800b510 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a010:	e00e      	b.n	800a030 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a018:	d10a      	bne.n	800a030 <vTaskStartScheduler+0xac>
	__asm volatile
 800a01a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a01e:	f383 8811 	msr	BASEPRI, r3
 800a022:	f3bf 8f6f 	isb	sy
 800a026:	f3bf 8f4f 	dsb	sy
 800a02a:	60fb      	str	r3, [r7, #12]
}
 800a02c:	bf00      	nop
 800a02e:	e7fe      	b.n	800a02e <vTaskStartScheduler+0xaa>
}
 800a030:	bf00      	nop
 800a032:	3718      	adds	r7, #24
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}
 800a038:	0800d7d4 	.word	0x0800d7d4
 800a03c:	0800a669 	.word	0x0800a669
 800a040:	20001300 	.word	0x20001300
 800a044:	200012fc 	.word	0x200012fc
 800a048:	200012e8 	.word	0x200012e8
 800a04c:	200012e0 	.word	0x200012e0

0800a050 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a050:	b480      	push	{r7}
 800a052:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a054:	4b04      	ldr	r3, [pc, #16]	; (800a068 <vTaskSuspendAll+0x18>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	3301      	adds	r3, #1
 800a05a:	4a03      	ldr	r2, [pc, #12]	; (800a068 <vTaskSuspendAll+0x18>)
 800a05c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a05e:	bf00      	nop
 800a060:	46bd      	mov	sp, r7
 800a062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a066:	4770      	bx	lr
 800a068:	20001304 	.word	0x20001304

0800a06c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b084      	sub	sp, #16
 800a070:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a072:	2300      	movs	r3, #0
 800a074:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a076:	2300      	movs	r3, #0
 800a078:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a07a:	4b42      	ldr	r3, [pc, #264]	; (800a184 <xTaskResumeAll+0x118>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d10a      	bne.n	800a098 <xTaskResumeAll+0x2c>
	__asm volatile
 800a082:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a086:	f383 8811 	msr	BASEPRI, r3
 800a08a:	f3bf 8f6f 	isb	sy
 800a08e:	f3bf 8f4f 	dsb	sy
 800a092:	603b      	str	r3, [r7, #0]
}
 800a094:	bf00      	nop
 800a096:	e7fe      	b.n	800a096 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a098:	f001 fadc 	bl	800b654 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a09c:	4b39      	ldr	r3, [pc, #228]	; (800a184 <xTaskResumeAll+0x118>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	3b01      	subs	r3, #1
 800a0a2:	4a38      	ldr	r2, [pc, #224]	; (800a184 <xTaskResumeAll+0x118>)
 800a0a4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a0a6:	4b37      	ldr	r3, [pc, #220]	; (800a184 <xTaskResumeAll+0x118>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d162      	bne.n	800a174 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a0ae:	4b36      	ldr	r3, [pc, #216]	; (800a188 <xTaskResumeAll+0x11c>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d05e      	beq.n	800a174 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a0b6:	e02f      	b.n	800a118 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0b8:	4b34      	ldr	r3, [pc, #208]	; (800a18c <xTaskResumeAll+0x120>)
 800a0ba:	68db      	ldr	r3, [r3, #12]
 800a0bc:	68db      	ldr	r3, [r3, #12]
 800a0be:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	3318      	adds	r3, #24
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f7fe fbc1 	bl	800884c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	3304      	adds	r3, #4
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f7fe fbbc 	bl	800884c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0d8:	4b2d      	ldr	r3, [pc, #180]	; (800a190 <xTaskResumeAll+0x124>)
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	d903      	bls.n	800a0e8 <xTaskResumeAll+0x7c>
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0e4:	4a2a      	ldr	r2, [pc, #168]	; (800a190 <xTaskResumeAll+0x124>)
 800a0e6:	6013      	str	r3, [r2, #0]
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0ec:	4613      	mov	r3, r2
 800a0ee:	009b      	lsls	r3, r3, #2
 800a0f0:	4413      	add	r3, r2
 800a0f2:	009b      	lsls	r3, r3, #2
 800a0f4:	4a27      	ldr	r2, [pc, #156]	; (800a194 <xTaskResumeAll+0x128>)
 800a0f6:	441a      	add	r2, r3
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	3304      	adds	r3, #4
 800a0fc:	4619      	mov	r1, r3
 800a0fe:	4610      	mov	r0, r2
 800a100:	f7fe fb47 	bl	8008792 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a108:	4b23      	ldr	r3, [pc, #140]	; (800a198 <xTaskResumeAll+0x12c>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a10e:	429a      	cmp	r2, r3
 800a110:	d302      	bcc.n	800a118 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a112:	4b22      	ldr	r3, [pc, #136]	; (800a19c <xTaskResumeAll+0x130>)
 800a114:	2201      	movs	r2, #1
 800a116:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a118:	4b1c      	ldr	r3, [pc, #112]	; (800a18c <xTaskResumeAll+0x120>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d1cb      	bne.n	800a0b8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d001      	beq.n	800a12a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a126:	f000 fb55 	bl	800a7d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a12a:	4b1d      	ldr	r3, [pc, #116]	; (800a1a0 <xTaskResumeAll+0x134>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d010      	beq.n	800a158 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a136:	f000 f847 	bl	800a1c8 <xTaskIncrementTick>
 800a13a:	4603      	mov	r3, r0
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d002      	beq.n	800a146 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a140:	4b16      	ldr	r3, [pc, #88]	; (800a19c <xTaskResumeAll+0x130>)
 800a142:	2201      	movs	r2, #1
 800a144:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	3b01      	subs	r3, #1
 800a14a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d1f1      	bne.n	800a136 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a152:	4b13      	ldr	r3, [pc, #76]	; (800a1a0 <xTaskResumeAll+0x134>)
 800a154:	2200      	movs	r2, #0
 800a156:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a158:	4b10      	ldr	r3, [pc, #64]	; (800a19c <xTaskResumeAll+0x130>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d009      	beq.n	800a174 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a160:	2301      	movs	r3, #1
 800a162:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a164:	4b0f      	ldr	r3, [pc, #60]	; (800a1a4 <xTaskResumeAll+0x138>)
 800a166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a16a:	601a      	str	r2, [r3, #0]
 800a16c:	f3bf 8f4f 	dsb	sy
 800a170:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a174:	f001 fa9e 	bl	800b6b4 <vPortExitCritical>

	return xAlreadyYielded;
 800a178:	68bb      	ldr	r3, [r7, #8]
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	3710      	adds	r7, #16
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}
 800a182:	bf00      	nop
 800a184:	20001304 	.word	0x20001304
 800a188:	200012dc 	.word	0x200012dc
 800a18c:	2000129c 	.word	0x2000129c
 800a190:	200012e4 	.word	0x200012e4
 800a194:	20000e0c 	.word	0x20000e0c
 800a198:	20000e08 	.word	0x20000e08
 800a19c:	200012f0 	.word	0x200012f0
 800a1a0:	200012ec 	.word	0x200012ec
 800a1a4:	e000ed04 	.word	0xe000ed04

0800a1a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b083      	sub	sp, #12
 800a1ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a1ae:	4b05      	ldr	r3, [pc, #20]	; (800a1c4 <xTaskGetTickCount+0x1c>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a1b4:	687b      	ldr	r3, [r7, #4]
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	370c      	adds	r7, #12
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c0:	4770      	bx	lr
 800a1c2:	bf00      	nop
 800a1c4:	200012e0 	.word	0x200012e0

0800a1c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b086      	sub	sp, #24
 800a1cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1d2:	4b4f      	ldr	r3, [pc, #316]	; (800a310 <xTaskIncrementTick+0x148>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	f040 808f 	bne.w	800a2fa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a1dc:	4b4d      	ldr	r3, [pc, #308]	; (800a314 <xTaskIncrementTick+0x14c>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	3301      	adds	r3, #1
 800a1e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a1e4:	4a4b      	ldr	r2, [pc, #300]	; (800a314 <xTaskIncrementTick+0x14c>)
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a1ea:	693b      	ldr	r3, [r7, #16]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d120      	bne.n	800a232 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a1f0:	4b49      	ldr	r3, [pc, #292]	; (800a318 <xTaskIncrementTick+0x150>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d00a      	beq.n	800a210 <xTaskIncrementTick+0x48>
	__asm volatile
 800a1fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1fe:	f383 8811 	msr	BASEPRI, r3
 800a202:	f3bf 8f6f 	isb	sy
 800a206:	f3bf 8f4f 	dsb	sy
 800a20a:	603b      	str	r3, [r7, #0]
}
 800a20c:	bf00      	nop
 800a20e:	e7fe      	b.n	800a20e <xTaskIncrementTick+0x46>
 800a210:	4b41      	ldr	r3, [pc, #260]	; (800a318 <xTaskIncrementTick+0x150>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	60fb      	str	r3, [r7, #12]
 800a216:	4b41      	ldr	r3, [pc, #260]	; (800a31c <xTaskIncrementTick+0x154>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	4a3f      	ldr	r2, [pc, #252]	; (800a318 <xTaskIncrementTick+0x150>)
 800a21c:	6013      	str	r3, [r2, #0]
 800a21e:	4a3f      	ldr	r2, [pc, #252]	; (800a31c <xTaskIncrementTick+0x154>)
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	6013      	str	r3, [r2, #0]
 800a224:	4b3e      	ldr	r3, [pc, #248]	; (800a320 <xTaskIncrementTick+0x158>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	3301      	adds	r3, #1
 800a22a:	4a3d      	ldr	r2, [pc, #244]	; (800a320 <xTaskIncrementTick+0x158>)
 800a22c:	6013      	str	r3, [r2, #0]
 800a22e:	f000 fad1 	bl	800a7d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a232:	4b3c      	ldr	r3, [pc, #240]	; (800a324 <xTaskIncrementTick+0x15c>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	693a      	ldr	r2, [r7, #16]
 800a238:	429a      	cmp	r2, r3
 800a23a:	d349      	bcc.n	800a2d0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a23c:	4b36      	ldr	r3, [pc, #216]	; (800a318 <xTaskIncrementTick+0x150>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d104      	bne.n	800a250 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a246:	4b37      	ldr	r3, [pc, #220]	; (800a324 <xTaskIncrementTick+0x15c>)
 800a248:	f04f 32ff 	mov.w	r2, #4294967295
 800a24c:	601a      	str	r2, [r3, #0]
					break;
 800a24e:	e03f      	b.n	800a2d0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a250:	4b31      	ldr	r3, [pc, #196]	; (800a318 <xTaskIncrementTick+0x150>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	68db      	ldr	r3, [r3, #12]
 800a256:	68db      	ldr	r3, [r3, #12]
 800a258:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	685b      	ldr	r3, [r3, #4]
 800a25e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a260:	693a      	ldr	r2, [r7, #16]
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	429a      	cmp	r2, r3
 800a266:	d203      	bcs.n	800a270 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a268:	4a2e      	ldr	r2, [pc, #184]	; (800a324 <xTaskIncrementTick+0x15c>)
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a26e:	e02f      	b.n	800a2d0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	3304      	adds	r3, #4
 800a274:	4618      	mov	r0, r3
 800a276:	f7fe fae9 	bl	800884c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d004      	beq.n	800a28c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	3318      	adds	r3, #24
 800a286:	4618      	mov	r0, r3
 800a288:	f7fe fae0 	bl	800884c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a290:	4b25      	ldr	r3, [pc, #148]	; (800a328 <xTaskIncrementTick+0x160>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	429a      	cmp	r2, r3
 800a296:	d903      	bls.n	800a2a0 <xTaskIncrementTick+0xd8>
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a29c:	4a22      	ldr	r2, [pc, #136]	; (800a328 <xTaskIncrementTick+0x160>)
 800a29e:	6013      	str	r3, [r2, #0]
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2a4:	4613      	mov	r3, r2
 800a2a6:	009b      	lsls	r3, r3, #2
 800a2a8:	4413      	add	r3, r2
 800a2aa:	009b      	lsls	r3, r3, #2
 800a2ac:	4a1f      	ldr	r2, [pc, #124]	; (800a32c <xTaskIncrementTick+0x164>)
 800a2ae:	441a      	add	r2, r3
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	3304      	adds	r3, #4
 800a2b4:	4619      	mov	r1, r3
 800a2b6:	4610      	mov	r0, r2
 800a2b8:	f7fe fa6b 	bl	8008792 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2c0:	4b1b      	ldr	r3, [pc, #108]	; (800a330 <xTaskIncrementTick+0x168>)
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2c6:	429a      	cmp	r2, r3
 800a2c8:	d3b8      	bcc.n	800a23c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a2ce:	e7b5      	b.n	800a23c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a2d0:	4b17      	ldr	r3, [pc, #92]	; (800a330 <xTaskIncrementTick+0x168>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2d6:	4915      	ldr	r1, [pc, #84]	; (800a32c <xTaskIncrementTick+0x164>)
 800a2d8:	4613      	mov	r3, r2
 800a2da:	009b      	lsls	r3, r3, #2
 800a2dc:	4413      	add	r3, r2
 800a2de:	009b      	lsls	r3, r3, #2
 800a2e0:	440b      	add	r3, r1
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	d901      	bls.n	800a2ec <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a2ec:	4b11      	ldr	r3, [pc, #68]	; (800a334 <xTaskIncrementTick+0x16c>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d007      	beq.n	800a304 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	617b      	str	r3, [r7, #20]
 800a2f8:	e004      	b.n	800a304 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a2fa:	4b0f      	ldr	r3, [pc, #60]	; (800a338 <xTaskIncrementTick+0x170>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	3301      	adds	r3, #1
 800a300:	4a0d      	ldr	r2, [pc, #52]	; (800a338 <xTaskIncrementTick+0x170>)
 800a302:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a304:	697b      	ldr	r3, [r7, #20]
}
 800a306:	4618      	mov	r0, r3
 800a308:	3718      	adds	r7, #24
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}
 800a30e:	bf00      	nop
 800a310:	20001304 	.word	0x20001304
 800a314:	200012e0 	.word	0x200012e0
 800a318:	20001294 	.word	0x20001294
 800a31c:	20001298 	.word	0x20001298
 800a320:	200012f4 	.word	0x200012f4
 800a324:	200012fc 	.word	0x200012fc
 800a328:	200012e4 	.word	0x200012e4
 800a32c:	20000e0c 	.word	0x20000e0c
 800a330:	20000e08 	.word	0x20000e08
 800a334:	200012f0 	.word	0x200012f0
 800a338:	200012ec 	.word	0x200012ec

0800a33c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a33c:	b480      	push	{r7}
 800a33e:	b085      	sub	sp, #20
 800a340:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a342:	4b28      	ldr	r3, [pc, #160]	; (800a3e4 <vTaskSwitchContext+0xa8>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d003      	beq.n	800a352 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a34a:	4b27      	ldr	r3, [pc, #156]	; (800a3e8 <vTaskSwitchContext+0xac>)
 800a34c:	2201      	movs	r2, #1
 800a34e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a350:	e041      	b.n	800a3d6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800a352:	4b25      	ldr	r3, [pc, #148]	; (800a3e8 <vTaskSwitchContext+0xac>)
 800a354:	2200      	movs	r2, #0
 800a356:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a358:	4b24      	ldr	r3, [pc, #144]	; (800a3ec <vTaskSwitchContext+0xb0>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	60fb      	str	r3, [r7, #12]
 800a35e:	e010      	b.n	800a382 <vTaskSwitchContext+0x46>
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d10a      	bne.n	800a37c <vTaskSwitchContext+0x40>
	__asm volatile
 800a366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a36a:	f383 8811 	msr	BASEPRI, r3
 800a36e:	f3bf 8f6f 	isb	sy
 800a372:	f3bf 8f4f 	dsb	sy
 800a376:	607b      	str	r3, [r7, #4]
}
 800a378:	bf00      	nop
 800a37a:	e7fe      	b.n	800a37a <vTaskSwitchContext+0x3e>
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	3b01      	subs	r3, #1
 800a380:	60fb      	str	r3, [r7, #12]
 800a382:	491b      	ldr	r1, [pc, #108]	; (800a3f0 <vTaskSwitchContext+0xb4>)
 800a384:	68fa      	ldr	r2, [r7, #12]
 800a386:	4613      	mov	r3, r2
 800a388:	009b      	lsls	r3, r3, #2
 800a38a:	4413      	add	r3, r2
 800a38c:	009b      	lsls	r3, r3, #2
 800a38e:	440b      	add	r3, r1
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d0e4      	beq.n	800a360 <vTaskSwitchContext+0x24>
 800a396:	68fa      	ldr	r2, [r7, #12]
 800a398:	4613      	mov	r3, r2
 800a39a:	009b      	lsls	r3, r3, #2
 800a39c:	4413      	add	r3, r2
 800a39e:	009b      	lsls	r3, r3, #2
 800a3a0:	4a13      	ldr	r2, [pc, #76]	; (800a3f0 <vTaskSwitchContext+0xb4>)
 800a3a2:	4413      	add	r3, r2
 800a3a4:	60bb      	str	r3, [r7, #8]
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	685b      	ldr	r3, [r3, #4]
 800a3aa:	685a      	ldr	r2, [r3, #4]
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	605a      	str	r2, [r3, #4]
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	685a      	ldr	r2, [r3, #4]
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	3308      	adds	r3, #8
 800a3b8:	429a      	cmp	r2, r3
 800a3ba:	d104      	bne.n	800a3c6 <vTaskSwitchContext+0x8a>
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	685a      	ldr	r2, [r3, #4]
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	605a      	str	r2, [r3, #4]
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	685b      	ldr	r3, [r3, #4]
 800a3ca:	68db      	ldr	r3, [r3, #12]
 800a3cc:	4a09      	ldr	r2, [pc, #36]	; (800a3f4 <vTaskSwitchContext+0xb8>)
 800a3ce:	6013      	str	r3, [r2, #0]
 800a3d0:	4a06      	ldr	r2, [pc, #24]	; (800a3ec <vTaskSwitchContext+0xb0>)
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	6013      	str	r3, [r2, #0]
}
 800a3d6:	bf00      	nop
 800a3d8:	3714      	adds	r7, #20
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e0:	4770      	bx	lr
 800a3e2:	bf00      	nop
 800a3e4:	20001304 	.word	0x20001304
 800a3e8:	200012f0 	.word	0x200012f0
 800a3ec:	200012e4 	.word	0x200012e4
 800a3f0:	20000e0c 	.word	0x20000e0c
 800a3f4:	20000e08 	.word	0x20000e08

0800a3f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b084      	sub	sp, #16
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
 800a400:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d10a      	bne.n	800a41e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a40c:	f383 8811 	msr	BASEPRI, r3
 800a410:	f3bf 8f6f 	isb	sy
 800a414:	f3bf 8f4f 	dsb	sy
 800a418:	60fb      	str	r3, [r7, #12]
}
 800a41a:	bf00      	nop
 800a41c:	e7fe      	b.n	800a41c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a41e:	4b07      	ldr	r3, [pc, #28]	; (800a43c <vTaskPlaceOnEventList+0x44>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	3318      	adds	r3, #24
 800a424:	4619      	mov	r1, r3
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f7fe f9d7 	bl	80087da <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a42c:	2101      	movs	r1, #1
 800a42e:	6838      	ldr	r0, [r7, #0]
 800a430:	f000 fb8a 	bl	800ab48 <prvAddCurrentTaskToDelayedList>
}
 800a434:	bf00      	nop
 800a436:	3710      	adds	r7, #16
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}
 800a43c:	20000e08 	.word	0x20000e08

0800a440 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a440:	b580      	push	{r7, lr}
 800a442:	b086      	sub	sp, #24
 800a444:	af00      	add	r7, sp, #0
 800a446:	60f8      	str	r0, [r7, #12]
 800a448:	60b9      	str	r1, [r7, #8]
 800a44a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d10a      	bne.n	800a468 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a452:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a456:	f383 8811 	msr	BASEPRI, r3
 800a45a:	f3bf 8f6f 	isb	sy
 800a45e:	f3bf 8f4f 	dsb	sy
 800a462:	617b      	str	r3, [r7, #20]
}
 800a464:	bf00      	nop
 800a466:	e7fe      	b.n	800a466 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a468:	4b0a      	ldr	r3, [pc, #40]	; (800a494 <vTaskPlaceOnEventListRestricted+0x54>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	3318      	adds	r3, #24
 800a46e:	4619      	mov	r1, r3
 800a470:	68f8      	ldr	r0, [r7, #12]
 800a472:	f7fe f98e 	bl	8008792 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d002      	beq.n	800a482 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a47c:	f04f 33ff 	mov.w	r3, #4294967295
 800a480:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a482:	6879      	ldr	r1, [r7, #4]
 800a484:	68b8      	ldr	r0, [r7, #8]
 800a486:	f000 fb5f 	bl	800ab48 <prvAddCurrentTaskToDelayedList>
	}
 800a48a:	bf00      	nop
 800a48c:	3718      	adds	r7, #24
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}
 800a492:	bf00      	nop
 800a494:	20000e08 	.word	0x20000e08

0800a498 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b086      	sub	sp, #24
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	68db      	ldr	r3, [r3, #12]
 800a4a4:	68db      	ldr	r3, [r3, #12]
 800a4a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a4a8:	693b      	ldr	r3, [r7, #16]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d10a      	bne.n	800a4c4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b2:	f383 8811 	msr	BASEPRI, r3
 800a4b6:	f3bf 8f6f 	isb	sy
 800a4ba:	f3bf 8f4f 	dsb	sy
 800a4be:	60fb      	str	r3, [r7, #12]
}
 800a4c0:	bf00      	nop
 800a4c2:	e7fe      	b.n	800a4c2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a4c4:	693b      	ldr	r3, [r7, #16]
 800a4c6:	3318      	adds	r3, #24
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f7fe f9bf 	bl	800884c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a4ce:	4b1e      	ldr	r3, [pc, #120]	; (800a548 <xTaskRemoveFromEventList+0xb0>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d11d      	bne.n	800a512 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	3304      	adds	r3, #4
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f7fe f9b6 	bl	800884c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4e4:	4b19      	ldr	r3, [pc, #100]	; (800a54c <xTaskRemoveFromEventList+0xb4>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	429a      	cmp	r2, r3
 800a4ea:	d903      	bls.n	800a4f4 <xTaskRemoveFromEventList+0x5c>
 800a4ec:	693b      	ldr	r3, [r7, #16]
 800a4ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4f0:	4a16      	ldr	r2, [pc, #88]	; (800a54c <xTaskRemoveFromEventList+0xb4>)
 800a4f2:	6013      	str	r3, [r2, #0]
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4f8:	4613      	mov	r3, r2
 800a4fa:	009b      	lsls	r3, r3, #2
 800a4fc:	4413      	add	r3, r2
 800a4fe:	009b      	lsls	r3, r3, #2
 800a500:	4a13      	ldr	r2, [pc, #76]	; (800a550 <xTaskRemoveFromEventList+0xb8>)
 800a502:	441a      	add	r2, r3
 800a504:	693b      	ldr	r3, [r7, #16]
 800a506:	3304      	adds	r3, #4
 800a508:	4619      	mov	r1, r3
 800a50a:	4610      	mov	r0, r2
 800a50c:	f7fe f941 	bl	8008792 <vListInsertEnd>
 800a510:	e005      	b.n	800a51e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	3318      	adds	r3, #24
 800a516:	4619      	mov	r1, r3
 800a518:	480e      	ldr	r0, [pc, #56]	; (800a554 <xTaskRemoveFromEventList+0xbc>)
 800a51a:	f7fe f93a 	bl	8008792 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a51e:	693b      	ldr	r3, [r7, #16]
 800a520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a522:	4b0d      	ldr	r3, [pc, #52]	; (800a558 <xTaskRemoveFromEventList+0xc0>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a528:	429a      	cmp	r2, r3
 800a52a:	d905      	bls.n	800a538 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a52c:	2301      	movs	r3, #1
 800a52e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a530:	4b0a      	ldr	r3, [pc, #40]	; (800a55c <xTaskRemoveFromEventList+0xc4>)
 800a532:	2201      	movs	r2, #1
 800a534:	601a      	str	r2, [r3, #0]
 800a536:	e001      	b.n	800a53c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a538:	2300      	movs	r3, #0
 800a53a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a53c:	697b      	ldr	r3, [r7, #20]
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3718      	adds	r7, #24
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}
 800a546:	bf00      	nop
 800a548:	20001304 	.word	0x20001304
 800a54c:	200012e4 	.word	0x200012e4
 800a550:	20000e0c 	.word	0x20000e0c
 800a554:	2000129c 	.word	0x2000129c
 800a558:	20000e08 	.word	0x20000e08
 800a55c:	200012f0 	.word	0x200012f0

0800a560 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a560:	b480      	push	{r7}
 800a562:	b083      	sub	sp, #12
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a568:	4b06      	ldr	r3, [pc, #24]	; (800a584 <vTaskInternalSetTimeOutState+0x24>)
 800a56a:	681a      	ldr	r2, [r3, #0]
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a570:	4b05      	ldr	r3, [pc, #20]	; (800a588 <vTaskInternalSetTimeOutState+0x28>)
 800a572:	681a      	ldr	r2, [r3, #0]
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	605a      	str	r2, [r3, #4]
}
 800a578:	bf00      	nop
 800a57a:	370c      	adds	r7, #12
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr
 800a584:	200012f4 	.word	0x200012f4
 800a588:	200012e0 	.word	0x200012e0

0800a58c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b088      	sub	sp, #32
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
 800a594:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d10a      	bne.n	800a5b2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5a0:	f383 8811 	msr	BASEPRI, r3
 800a5a4:	f3bf 8f6f 	isb	sy
 800a5a8:	f3bf 8f4f 	dsb	sy
 800a5ac:	613b      	str	r3, [r7, #16]
}
 800a5ae:	bf00      	nop
 800a5b0:	e7fe      	b.n	800a5b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d10a      	bne.n	800a5ce <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a5b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5bc:	f383 8811 	msr	BASEPRI, r3
 800a5c0:	f3bf 8f6f 	isb	sy
 800a5c4:	f3bf 8f4f 	dsb	sy
 800a5c8:	60fb      	str	r3, [r7, #12]
}
 800a5ca:	bf00      	nop
 800a5cc:	e7fe      	b.n	800a5cc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a5ce:	f001 f841 	bl	800b654 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a5d2:	4b1d      	ldr	r3, [pc, #116]	; (800a648 <xTaskCheckForTimeOut+0xbc>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	685b      	ldr	r3, [r3, #4]
 800a5dc:	69ba      	ldr	r2, [r7, #24]
 800a5de:	1ad3      	subs	r3, r2, r3
 800a5e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5ea:	d102      	bne.n	800a5f2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	61fb      	str	r3, [r7, #28]
 800a5f0:	e023      	b.n	800a63a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681a      	ldr	r2, [r3, #0]
 800a5f6:	4b15      	ldr	r3, [pc, #84]	; (800a64c <xTaskCheckForTimeOut+0xc0>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	d007      	beq.n	800a60e <xTaskCheckForTimeOut+0x82>
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	685b      	ldr	r3, [r3, #4]
 800a602:	69ba      	ldr	r2, [r7, #24]
 800a604:	429a      	cmp	r2, r3
 800a606:	d302      	bcc.n	800a60e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a608:	2301      	movs	r3, #1
 800a60a:	61fb      	str	r3, [r7, #28]
 800a60c:	e015      	b.n	800a63a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	697a      	ldr	r2, [r7, #20]
 800a614:	429a      	cmp	r2, r3
 800a616:	d20b      	bcs.n	800a630 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	681a      	ldr	r2, [r3, #0]
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	1ad2      	subs	r2, r2, r3
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	f7ff ff9b 	bl	800a560 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a62a:	2300      	movs	r3, #0
 800a62c:	61fb      	str	r3, [r7, #28]
 800a62e:	e004      	b.n	800a63a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	2200      	movs	r2, #0
 800a634:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a636:	2301      	movs	r3, #1
 800a638:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a63a:	f001 f83b 	bl	800b6b4 <vPortExitCritical>

	return xReturn;
 800a63e:	69fb      	ldr	r3, [r7, #28]
}
 800a640:	4618      	mov	r0, r3
 800a642:	3720      	adds	r7, #32
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}
 800a648:	200012e0 	.word	0x200012e0
 800a64c:	200012f4 	.word	0x200012f4

0800a650 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a650:	b480      	push	{r7}
 800a652:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a654:	4b03      	ldr	r3, [pc, #12]	; (800a664 <vTaskMissedYield+0x14>)
 800a656:	2201      	movs	r2, #1
 800a658:	601a      	str	r2, [r3, #0]
}
 800a65a:	bf00      	nop
 800a65c:	46bd      	mov	sp, r7
 800a65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a662:	4770      	bx	lr
 800a664:	200012f0 	.word	0x200012f0

0800a668 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b082      	sub	sp, #8
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a670:	f000 f852 	bl	800a718 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a674:	4b06      	ldr	r3, [pc, #24]	; (800a690 <prvIdleTask+0x28>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	2b01      	cmp	r3, #1
 800a67a:	d9f9      	bls.n	800a670 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a67c:	4b05      	ldr	r3, [pc, #20]	; (800a694 <prvIdleTask+0x2c>)
 800a67e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a682:	601a      	str	r2, [r3, #0]
 800a684:	f3bf 8f4f 	dsb	sy
 800a688:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a68c:	e7f0      	b.n	800a670 <prvIdleTask+0x8>
 800a68e:	bf00      	nop
 800a690:	20000e0c 	.word	0x20000e0c
 800a694:	e000ed04 	.word	0xe000ed04

0800a698 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b082      	sub	sp, #8
 800a69c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a69e:	2300      	movs	r3, #0
 800a6a0:	607b      	str	r3, [r7, #4]
 800a6a2:	e00c      	b.n	800a6be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a6a4:	687a      	ldr	r2, [r7, #4]
 800a6a6:	4613      	mov	r3, r2
 800a6a8:	009b      	lsls	r3, r3, #2
 800a6aa:	4413      	add	r3, r2
 800a6ac:	009b      	lsls	r3, r3, #2
 800a6ae:	4a12      	ldr	r2, [pc, #72]	; (800a6f8 <prvInitialiseTaskLists+0x60>)
 800a6b0:	4413      	add	r3, r2
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f7fe f840 	bl	8008738 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	3301      	adds	r3, #1
 800a6bc:	607b      	str	r3, [r7, #4]
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2b37      	cmp	r3, #55	; 0x37
 800a6c2:	d9ef      	bls.n	800a6a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a6c4:	480d      	ldr	r0, [pc, #52]	; (800a6fc <prvInitialiseTaskLists+0x64>)
 800a6c6:	f7fe f837 	bl	8008738 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a6ca:	480d      	ldr	r0, [pc, #52]	; (800a700 <prvInitialiseTaskLists+0x68>)
 800a6cc:	f7fe f834 	bl	8008738 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a6d0:	480c      	ldr	r0, [pc, #48]	; (800a704 <prvInitialiseTaskLists+0x6c>)
 800a6d2:	f7fe f831 	bl	8008738 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a6d6:	480c      	ldr	r0, [pc, #48]	; (800a708 <prvInitialiseTaskLists+0x70>)
 800a6d8:	f7fe f82e 	bl	8008738 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a6dc:	480b      	ldr	r0, [pc, #44]	; (800a70c <prvInitialiseTaskLists+0x74>)
 800a6de:	f7fe f82b 	bl	8008738 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a6e2:	4b0b      	ldr	r3, [pc, #44]	; (800a710 <prvInitialiseTaskLists+0x78>)
 800a6e4:	4a05      	ldr	r2, [pc, #20]	; (800a6fc <prvInitialiseTaskLists+0x64>)
 800a6e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a6e8:	4b0a      	ldr	r3, [pc, #40]	; (800a714 <prvInitialiseTaskLists+0x7c>)
 800a6ea:	4a05      	ldr	r2, [pc, #20]	; (800a700 <prvInitialiseTaskLists+0x68>)
 800a6ec:	601a      	str	r2, [r3, #0]
}
 800a6ee:	bf00      	nop
 800a6f0:	3708      	adds	r7, #8
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}
 800a6f6:	bf00      	nop
 800a6f8:	20000e0c 	.word	0x20000e0c
 800a6fc:	2000126c 	.word	0x2000126c
 800a700:	20001280 	.word	0x20001280
 800a704:	2000129c 	.word	0x2000129c
 800a708:	200012b0 	.word	0x200012b0
 800a70c:	200012c8 	.word	0x200012c8
 800a710:	20001294 	.word	0x20001294
 800a714:	20001298 	.word	0x20001298

0800a718 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b082      	sub	sp, #8
 800a71c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a71e:	e019      	b.n	800a754 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a720:	f000 ff98 	bl	800b654 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a724:	4b10      	ldr	r3, [pc, #64]	; (800a768 <prvCheckTasksWaitingTermination+0x50>)
 800a726:	68db      	ldr	r3, [r3, #12]
 800a728:	68db      	ldr	r3, [r3, #12]
 800a72a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	3304      	adds	r3, #4
 800a730:	4618      	mov	r0, r3
 800a732:	f7fe f88b 	bl	800884c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a736:	4b0d      	ldr	r3, [pc, #52]	; (800a76c <prvCheckTasksWaitingTermination+0x54>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	3b01      	subs	r3, #1
 800a73c:	4a0b      	ldr	r2, [pc, #44]	; (800a76c <prvCheckTasksWaitingTermination+0x54>)
 800a73e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a740:	4b0b      	ldr	r3, [pc, #44]	; (800a770 <prvCheckTasksWaitingTermination+0x58>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	3b01      	subs	r3, #1
 800a746:	4a0a      	ldr	r2, [pc, #40]	; (800a770 <prvCheckTasksWaitingTermination+0x58>)
 800a748:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a74a:	f000 ffb3 	bl	800b6b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f000 f810 	bl	800a774 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a754:	4b06      	ldr	r3, [pc, #24]	; (800a770 <prvCheckTasksWaitingTermination+0x58>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d1e1      	bne.n	800a720 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a75c:	bf00      	nop
 800a75e:	bf00      	nop
 800a760:	3708      	adds	r7, #8
 800a762:	46bd      	mov	sp, r7
 800a764:	bd80      	pop	{r7, pc}
 800a766:	bf00      	nop
 800a768:	200012b0 	.word	0x200012b0
 800a76c:	200012dc 	.word	0x200012dc
 800a770:	200012c4 	.word	0x200012c4

0800a774 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a774:	b580      	push	{r7, lr}
 800a776:	b084      	sub	sp, #16
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a782:	2b00      	cmp	r3, #0
 800a784:	d108      	bne.n	800a798 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a78a:	4618      	mov	r0, r3
 800a78c:	f001 f950 	bl	800ba30 <vPortFree>
				vPortFree( pxTCB );
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f001 f94d 	bl	800ba30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a796:	e018      	b.n	800a7ca <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a79e:	2b01      	cmp	r3, #1
 800a7a0:	d103      	bne.n	800a7aa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f001 f944 	bl	800ba30 <vPortFree>
	}
 800a7a8:	e00f      	b.n	800a7ca <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a7b0:	2b02      	cmp	r3, #2
 800a7b2:	d00a      	beq.n	800a7ca <prvDeleteTCB+0x56>
	__asm volatile
 800a7b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b8:	f383 8811 	msr	BASEPRI, r3
 800a7bc:	f3bf 8f6f 	isb	sy
 800a7c0:	f3bf 8f4f 	dsb	sy
 800a7c4:	60fb      	str	r3, [r7, #12]
}
 800a7c6:	bf00      	nop
 800a7c8:	e7fe      	b.n	800a7c8 <prvDeleteTCB+0x54>
	}
 800a7ca:	bf00      	nop
 800a7cc:	3710      	adds	r7, #16
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}
	...

0800a7d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b083      	sub	sp, #12
 800a7d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a7da:	4b0c      	ldr	r3, [pc, #48]	; (800a80c <prvResetNextTaskUnblockTime+0x38>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d104      	bne.n	800a7ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a7e4:	4b0a      	ldr	r3, [pc, #40]	; (800a810 <prvResetNextTaskUnblockTime+0x3c>)
 800a7e6:	f04f 32ff 	mov.w	r2, #4294967295
 800a7ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a7ec:	e008      	b.n	800a800 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7ee:	4b07      	ldr	r3, [pc, #28]	; (800a80c <prvResetNextTaskUnblockTime+0x38>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	68db      	ldr	r3, [r3, #12]
 800a7f4:	68db      	ldr	r3, [r3, #12]
 800a7f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	685b      	ldr	r3, [r3, #4]
 800a7fc:	4a04      	ldr	r2, [pc, #16]	; (800a810 <prvResetNextTaskUnblockTime+0x3c>)
 800a7fe:	6013      	str	r3, [r2, #0]
}
 800a800:	bf00      	nop
 800a802:	370c      	adds	r7, #12
 800a804:	46bd      	mov	sp, r7
 800a806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80a:	4770      	bx	lr
 800a80c:	20001294 	.word	0x20001294
 800a810:	200012fc 	.word	0x200012fc

0800a814 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800a814:	b480      	push	{r7}
 800a816:	b083      	sub	sp, #12
 800a818:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800a81a:	4b05      	ldr	r3, [pc, #20]	; (800a830 <xTaskGetCurrentTaskHandle+0x1c>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	607b      	str	r3, [r7, #4]

		return xReturn;
 800a820:	687b      	ldr	r3, [r7, #4]
	}
 800a822:	4618      	mov	r0, r3
 800a824:	370c      	adds	r7, #12
 800a826:	46bd      	mov	sp, r7
 800a828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82c:	4770      	bx	lr
 800a82e:	bf00      	nop
 800a830:	20000e08 	.word	0x20000e08

0800a834 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a834:	b480      	push	{r7}
 800a836:	b083      	sub	sp, #12
 800a838:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a83a:	4b0b      	ldr	r3, [pc, #44]	; (800a868 <xTaskGetSchedulerState+0x34>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d102      	bne.n	800a848 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a842:	2301      	movs	r3, #1
 800a844:	607b      	str	r3, [r7, #4]
 800a846:	e008      	b.n	800a85a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a848:	4b08      	ldr	r3, [pc, #32]	; (800a86c <xTaskGetSchedulerState+0x38>)
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d102      	bne.n	800a856 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a850:	2302      	movs	r3, #2
 800a852:	607b      	str	r3, [r7, #4]
 800a854:	e001      	b.n	800a85a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a856:	2300      	movs	r3, #0
 800a858:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a85a:	687b      	ldr	r3, [r7, #4]
	}
 800a85c:	4618      	mov	r0, r3
 800a85e:	370c      	adds	r7, #12
 800a860:	46bd      	mov	sp, r7
 800a862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a866:	4770      	bx	lr
 800a868:	200012e8 	.word	0x200012e8
 800a86c:	20001304 	.word	0x20001304

0800a870 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a870:	b580      	push	{r7, lr}
 800a872:	b084      	sub	sp, #16
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a87c:	2300      	movs	r3, #0
 800a87e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d051      	beq.n	800a92a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a88a:	4b2a      	ldr	r3, [pc, #168]	; (800a934 <xTaskPriorityInherit+0xc4>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a890:	429a      	cmp	r2, r3
 800a892:	d241      	bcs.n	800a918 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a894:	68bb      	ldr	r3, [r7, #8]
 800a896:	699b      	ldr	r3, [r3, #24]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	db06      	blt.n	800a8aa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a89c:	4b25      	ldr	r3, [pc, #148]	; (800a934 <xTaskPriorityInherit+0xc4>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8a2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	6959      	ldr	r1, [r3, #20]
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8b2:	4613      	mov	r3, r2
 800a8b4:	009b      	lsls	r3, r3, #2
 800a8b6:	4413      	add	r3, r2
 800a8b8:	009b      	lsls	r3, r3, #2
 800a8ba:	4a1f      	ldr	r2, [pc, #124]	; (800a938 <xTaskPriorityInherit+0xc8>)
 800a8bc:	4413      	add	r3, r2
 800a8be:	4299      	cmp	r1, r3
 800a8c0:	d122      	bne.n	800a908 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	3304      	adds	r3, #4
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f7fd ffc0 	bl	800884c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a8cc:	4b19      	ldr	r3, [pc, #100]	; (800a934 <xTaskPriorityInherit+0xc4>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8da:	4b18      	ldr	r3, [pc, #96]	; (800a93c <xTaskPriorityInherit+0xcc>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	429a      	cmp	r2, r3
 800a8e0:	d903      	bls.n	800a8ea <xTaskPriorityInherit+0x7a>
 800a8e2:	68bb      	ldr	r3, [r7, #8]
 800a8e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8e6:	4a15      	ldr	r2, [pc, #84]	; (800a93c <xTaskPriorityInherit+0xcc>)
 800a8e8:	6013      	str	r3, [r2, #0]
 800a8ea:	68bb      	ldr	r3, [r7, #8]
 800a8ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8ee:	4613      	mov	r3, r2
 800a8f0:	009b      	lsls	r3, r3, #2
 800a8f2:	4413      	add	r3, r2
 800a8f4:	009b      	lsls	r3, r3, #2
 800a8f6:	4a10      	ldr	r2, [pc, #64]	; (800a938 <xTaskPriorityInherit+0xc8>)
 800a8f8:	441a      	add	r2, r3
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	3304      	adds	r3, #4
 800a8fe:	4619      	mov	r1, r3
 800a900:	4610      	mov	r0, r2
 800a902:	f7fd ff46 	bl	8008792 <vListInsertEnd>
 800a906:	e004      	b.n	800a912 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a908:	4b0a      	ldr	r3, [pc, #40]	; (800a934 <xTaskPriorityInherit+0xc4>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a912:	2301      	movs	r3, #1
 800a914:	60fb      	str	r3, [r7, #12]
 800a916:	e008      	b.n	800a92a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a91c:	4b05      	ldr	r3, [pc, #20]	; (800a934 <xTaskPriorityInherit+0xc4>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a922:	429a      	cmp	r2, r3
 800a924:	d201      	bcs.n	800a92a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a926:	2301      	movs	r3, #1
 800a928:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a92a:	68fb      	ldr	r3, [r7, #12]
	}
 800a92c:	4618      	mov	r0, r3
 800a92e:	3710      	adds	r7, #16
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}
 800a934:	20000e08 	.word	0x20000e08
 800a938:	20000e0c 	.word	0x20000e0c
 800a93c:	200012e4 	.word	0x200012e4

0800a940 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a940:	b580      	push	{r7, lr}
 800a942:	b086      	sub	sp, #24
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a94c:	2300      	movs	r3, #0
 800a94e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d056      	beq.n	800aa04 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a956:	4b2e      	ldr	r3, [pc, #184]	; (800aa10 <xTaskPriorityDisinherit+0xd0>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	693a      	ldr	r2, [r7, #16]
 800a95c:	429a      	cmp	r2, r3
 800a95e:	d00a      	beq.n	800a976 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a960:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a964:	f383 8811 	msr	BASEPRI, r3
 800a968:	f3bf 8f6f 	isb	sy
 800a96c:	f3bf 8f4f 	dsb	sy
 800a970:	60fb      	str	r3, [r7, #12]
}
 800a972:	bf00      	nop
 800a974:	e7fe      	b.n	800a974 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a976:	693b      	ldr	r3, [r7, #16]
 800a978:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d10a      	bne.n	800a994 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a982:	f383 8811 	msr	BASEPRI, r3
 800a986:	f3bf 8f6f 	isb	sy
 800a98a:	f3bf 8f4f 	dsb	sy
 800a98e:	60bb      	str	r3, [r7, #8]
}
 800a990:	bf00      	nop
 800a992:	e7fe      	b.n	800a992 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a998:	1e5a      	subs	r2, r3, #1
 800a99a:	693b      	ldr	r3, [r7, #16]
 800a99c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a99e:	693b      	ldr	r3, [r7, #16]
 800a9a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9a2:	693b      	ldr	r3, [r7, #16]
 800a9a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9a6:	429a      	cmp	r2, r3
 800a9a8:	d02c      	beq.n	800aa04 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a9aa:	693b      	ldr	r3, [r7, #16]
 800a9ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d128      	bne.n	800aa04 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a9b2:	693b      	ldr	r3, [r7, #16]
 800a9b4:	3304      	adds	r3, #4
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	f7fd ff48 	bl	800884c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a9bc:	693b      	ldr	r3, [r7, #16]
 800a9be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a9c0:	693b      	ldr	r3, [r7, #16]
 800a9c2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9c8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a9cc:	693b      	ldr	r3, [r7, #16]
 800a9ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a9d0:	693b      	ldr	r3, [r7, #16]
 800a9d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9d4:	4b0f      	ldr	r3, [pc, #60]	; (800aa14 <xTaskPriorityDisinherit+0xd4>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	429a      	cmp	r2, r3
 800a9da:	d903      	bls.n	800a9e4 <xTaskPriorityDisinherit+0xa4>
 800a9dc:	693b      	ldr	r3, [r7, #16]
 800a9de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9e0:	4a0c      	ldr	r2, [pc, #48]	; (800aa14 <xTaskPriorityDisinherit+0xd4>)
 800a9e2:	6013      	str	r3, [r2, #0]
 800a9e4:	693b      	ldr	r3, [r7, #16]
 800a9e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9e8:	4613      	mov	r3, r2
 800a9ea:	009b      	lsls	r3, r3, #2
 800a9ec:	4413      	add	r3, r2
 800a9ee:	009b      	lsls	r3, r3, #2
 800a9f0:	4a09      	ldr	r2, [pc, #36]	; (800aa18 <xTaskPriorityDisinherit+0xd8>)
 800a9f2:	441a      	add	r2, r3
 800a9f4:	693b      	ldr	r3, [r7, #16]
 800a9f6:	3304      	adds	r3, #4
 800a9f8:	4619      	mov	r1, r3
 800a9fa:	4610      	mov	r0, r2
 800a9fc:	f7fd fec9 	bl	8008792 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800aa00:	2301      	movs	r3, #1
 800aa02:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aa04:	697b      	ldr	r3, [r7, #20]
	}
 800aa06:	4618      	mov	r0, r3
 800aa08:	3718      	adds	r7, #24
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}
 800aa0e:	bf00      	nop
 800aa10:	20000e08 	.word	0x20000e08
 800aa14:	200012e4 	.word	0x200012e4
 800aa18:	20000e0c 	.word	0x20000e0c

0800aa1c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b088      	sub	sp, #32
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
 800aa24:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d06a      	beq.n	800ab0a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800aa34:	69bb      	ldr	r3, [r7, #24]
 800aa36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d10a      	bne.n	800aa52 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800aa3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa40:	f383 8811 	msr	BASEPRI, r3
 800aa44:	f3bf 8f6f 	isb	sy
 800aa48:	f3bf 8f4f 	dsb	sy
 800aa4c:	60fb      	str	r3, [r7, #12]
}
 800aa4e:	bf00      	nop
 800aa50:	e7fe      	b.n	800aa50 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800aa52:	69bb      	ldr	r3, [r7, #24]
 800aa54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa56:	683a      	ldr	r2, [r7, #0]
 800aa58:	429a      	cmp	r2, r3
 800aa5a:	d902      	bls.n	800aa62 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	61fb      	str	r3, [r7, #28]
 800aa60:	e002      	b.n	800aa68 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800aa62:	69bb      	ldr	r3, [r7, #24]
 800aa64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa66:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800aa68:	69bb      	ldr	r3, [r7, #24]
 800aa6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa6c:	69fa      	ldr	r2, [r7, #28]
 800aa6e:	429a      	cmp	r2, r3
 800aa70:	d04b      	beq.n	800ab0a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800aa72:	69bb      	ldr	r3, [r7, #24]
 800aa74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa76:	697a      	ldr	r2, [r7, #20]
 800aa78:	429a      	cmp	r2, r3
 800aa7a:	d146      	bne.n	800ab0a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800aa7c:	4b25      	ldr	r3, [pc, #148]	; (800ab14 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	69ba      	ldr	r2, [r7, #24]
 800aa82:	429a      	cmp	r2, r3
 800aa84:	d10a      	bne.n	800aa9c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800aa86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa8a:	f383 8811 	msr	BASEPRI, r3
 800aa8e:	f3bf 8f6f 	isb	sy
 800aa92:	f3bf 8f4f 	dsb	sy
 800aa96:	60bb      	str	r3, [r7, #8]
}
 800aa98:	bf00      	nop
 800aa9a:	e7fe      	b.n	800aa9a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800aa9c:	69bb      	ldr	r3, [r7, #24]
 800aa9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaa0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800aaa2:	69bb      	ldr	r3, [r7, #24]
 800aaa4:	69fa      	ldr	r2, [r7, #28]
 800aaa6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800aaa8:	69bb      	ldr	r3, [r7, #24]
 800aaaa:	699b      	ldr	r3, [r3, #24]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	db04      	blt.n	800aaba <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aab0:	69fb      	ldr	r3, [r7, #28]
 800aab2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aab6:	69bb      	ldr	r3, [r7, #24]
 800aab8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800aaba:	69bb      	ldr	r3, [r7, #24]
 800aabc:	6959      	ldr	r1, [r3, #20]
 800aabe:	693a      	ldr	r2, [r7, #16]
 800aac0:	4613      	mov	r3, r2
 800aac2:	009b      	lsls	r3, r3, #2
 800aac4:	4413      	add	r3, r2
 800aac6:	009b      	lsls	r3, r3, #2
 800aac8:	4a13      	ldr	r2, [pc, #76]	; (800ab18 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800aaca:	4413      	add	r3, r2
 800aacc:	4299      	cmp	r1, r3
 800aace:	d11c      	bne.n	800ab0a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aad0:	69bb      	ldr	r3, [r7, #24]
 800aad2:	3304      	adds	r3, #4
 800aad4:	4618      	mov	r0, r3
 800aad6:	f7fd feb9 	bl	800884c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800aada:	69bb      	ldr	r3, [r7, #24]
 800aadc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aade:	4b0f      	ldr	r3, [pc, #60]	; (800ab1c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	429a      	cmp	r2, r3
 800aae4:	d903      	bls.n	800aaee <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800aae6:	69bb      	ldr	r3, [r7, #24]
 800aae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaea:	4a0c      	ldr	r2, [pc, #48]	; (800ab1c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800aaec:	6013      	str	r3, [r2, #0]
 800aaee:	69bb      	ldr	r3, [r7, #24]
 800aaf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aaf2:	4613      	mov	r3, r2
 800aaf4:	009b      	lsls	r3, r3, #2
 800aaf6:	4413      	add	r3, r2
 800aaf8:	009b      	lsls	r3, r3, #2
 800aafa:	4a07      	ldr	r2, [pc, #28]	; (800ab18 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800aafc:	441a      	add	r2, r3
 800aafe:	69bb      	ldr	r3, [r7, #24]
 800ab00:	3304      	adds	r3, #4
 800ab02:	4619      	mov	r1, r3
 800ab04:	4610      	mov	r0, r2
 800ab06:	f7fd fe44 	bl	8008792 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ab0a:	bf00      	nop
 800ab0c:	3720      	adds	r7, #32
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}
 800ab12:	bf00      	nop
 800ab14:	20000e08 	.word	0x20000e08
 800ab18:	20000e0c 	.word	0x20000e0c
 800ab1c:	200012e4 	.word	0x200012e4

0800ab20 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ab20:	b480      	push	{r7}
 800ab22:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ab24:	4b07      	ldr	r3, [pc, #28]	; (800ab44 <pvTaskIncrementMutexHeldCount+0x24>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d004      	beq.n	800ab36 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ab2c:	4b05      	ldr	r3, [pc, #20]	; (800ab44 <pvTaskIncrementMutexHeldCount+0x24>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ab32:	3201      	adds	r2, #1
 800ab34:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800ab36:	4b03      	ldr	r3, [pc, #12]	; (800ab44 <pvTaskIncrementMutexHeldCount+0x24>)
 800ab38:	681b      	ldr	r3, [r3, #0]
	}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab42:	4770      	bx	lr
 800ab44:	20000e08 	.word	0x20000e08

0800ab48 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b084      	sub	sp, #16
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ab52:	4b21      	ldr	r3, [pc, #132]	; (800abd8 <prvAddCurrentTaskToDelayedList+0x90>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab58:	4b20      	ldr	r3, [pc, #128]	; (800abdc <prvAddCurrentTaskToDelayedList+0x94>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	3304      	adds	r3, #4
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f7fd fe74 	bl	800884c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab6a:	d10a      	bne.n	800ab82 <prvAddCurrentTaskToDelayedList+0x3a>
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d007      	beq.n	800ab82 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab72:	4b1a      	ldr	r3, [pc, #104]	; (800abdc <prvAddCurrentTaskToDelayedList+0x94>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	3304      	adds	r3, #4
 800ab78:	4619      	mov	r1, r3
 800ab7a:	4819      	ldr	r0, [pc, #100]	; (800abe0 <prvAddCurrentTaskToDelayedList+0x98>)
 800ab7c:	f7fd fe09 	bl	8008792 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ab80:	e026      	b.n	800abd0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ab82:	68fa      	ldr	r2, [r7, #12]
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	4413      	add	r3, r2
 800ab88:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ab8a:	4b14      	ldr	r3, [pc, #80]	; (800abdc <prvAddCurrentTaskToDelayedList+0x94>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	68ba      	ldr	r2, [r7, #8]
 800ab90:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ab92:	68ba      	ldr	r2, [r7, #8]
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	429a      	cmp	r2, r3
 800ab98:	d209      	bcs.n	800abae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab9a:	4b12      	ldr	r3, [pc, #72]	; (800abe4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ab9c:	681a      	ldr	r2, [r3, #0]
 800ab9e:	4b0f      	ldr	r3, [pc, #60]	; (800abdc <prvAddCurrentTaskToDelayedList+0x94>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	3304      	adds	r3, #4
 800aba4:	4619      	mov	r1, r3
 800aba6:	4610      	mov	r0, r2
 800aba8:	f7fd fe17 	bl	80087da <vListInsert>
}
 800abac:	e010      	b.n	800abd0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800abae:	4b0e      	ldr	r3, [pc, #56]	; (800abe8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800abb0:	681a      	ldr	r2, [r3, #0]
 800abb2:	4b0a      	ldr	r3, [pc, #40]	; (800abdc <prvAddCurrentTaskToDelayedList+0x94>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	3304      	adds	r3, #4
 800abb8:	4619      	mov	r1, r3
 800abba:	4610      	mov	r0, r2
 800abbc:	f7fd fe0d 	bl	80087da <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800abc0:	4b0a      	ldr	r3, [pc, #40]	; (800abec <prvAddCurrentTaskToDelayedList+0xa4>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	68ba      	ldr	r2, [r7, #8]
 800abc6:	429a      	cmp	r2, r3
 800abc8:	d202      	bcs.n	800abd0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800abca:	4a08      	ldr	r2, [pc, #32]	; (800abec <prvAddCurrentTaskToDelayedList+0xa4>)
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	6013      	str	r3, [r2, #0]
}
 800abd0:	bf00      	nop
 800abd2:	3710      	adds	r7, #16
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}
 800abd8:	200012e0 	.word	0x200012e0
 800abdc:	20000e08 	.word	0x20000e08
 800abe0:	200012c8 	.word	0x200012c8
 800abe4:	20001298 	.word	0x20001298
 800abe8:	20001294 	.word	0x20001294
 800abec:	200012fc 	.word	0x200012fc

0800abf0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b08a      	sub	sp, #40	; 0x28
 800abf4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800abf6:	2300      	movs	r3, #0
 800abf8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800abfa:	f000 fba1 	bl	800b340 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800abfe:	4b1c      	ldr	r3, [pc, #112]	; (800ac70 <xTimerCreateTimerTask+0x80>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d021      	beq.n	800ac4a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ac06:	2300      	movs	r3, #0
 800ac08:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ac0e:	1d3a      	adds	r2, r7, #4
 800ac10:	f107 0108 	add.w	r1, r7, #8
 800ac14:	f107 030c 	add.w	r3, r7, #12
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f7fd fd73 	bl	8008704 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ac1e:	6879      	ldr	r1, [r7, #4]
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	68fa      	ldr	r2, [r7, #12]
 800ac24:	9202      	str	r2, [sp, #8]
 800ac26:	9301      	str	r3, [sp, #4]
 800ac28:	2302      	movs	r3, #2
 800ac2a:	9300      	str	r3, [sp, #0]
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	460a      	mov	r2, r1
 800ac30:	4910      	ldr	r1, [pc, #64]	; (800ac74 <xTimerCreateTimerTask+0x84>)
 800ac32:	4811      	ldr	r0, [pc, #68]	; (800ac78 <xTimerCreateTimerTask+0x88>)
 800ac34:	f7fe fef8 	bl	8009a28 <xTaskCreateStatic>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	4a10      	ldr	r2, [pc, #64]	; (800ac7c <xTimerCreateTimerTask+0x8c>)
 800ac3c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ac3e:	4b0f      	ldr	r3, [pc, #60]	; (800ac7c <xTimerCreateTimerTask+0x8c>)
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d001      	beq.n	800ac4a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ac46:	2301      	movs	r3, #1
 800ac48:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d10a      	bne.n	800ac66 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ac50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac54:	f383 8811 	msr	BASEPRI, r3
 800ac58:	f3bf 8f6f 	isb	sy
 800ac5c:	f3bf 8f4f 	dsb	sy
 800ac60:	613b      	str	r3, [r7, #16]
}
 800ac62:	bf00      	nop
 800ac64:	e7fe      	b.n	800ac64 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ac66:	697b      	ldr	r3, [r7, #20]
}
 800ac68:	4618      	mov	r0, r3
 800ac6a:	3718      	adds	r7, #24
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bd80      	pop	{r7, pc}
 800ac70:	20001338 	.word	0x20001338
 800ac74:	0800d7dc 	.word	0x0800d7dc
 800ac78:	0800aee9 	.word	0x0800aee9
 800ac7c:	2000133c 	.word	0x2000133c

0800ac80 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b088      	sub	sp, #32
 800ac84:	af02      	add	r7, sp, #8
 800ac86:	60f8      	str	r0, [r7, #12]
 800ac88:	60b9      	str	r1, [r7, #8]
 800ac8a:	607a      	str	r2, [r7, #4]
 800ac8c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800ac8e:	202c      	movs	r0, #44	; 0x2c
 800ac90:	f000 fe02 	bl	800b898 <pvPortMalloc>
 800ac94:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d00d      	beq.n	800acb8 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	2200      	movs	r2, #0
 800aca0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800aca4:	697b      	ldr	r3, [r7, #20]
 800aca6:	9301      	str	r3, [sp, #4]
 800aca8:	6a3b      	ldr	r3, [r7, #32]
 800acaa:	9300      	str	r3, [sp, #0]
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	687a      	ldr	r2, [r7, #4]
 800acb0:	68b9      	ldr	r1, [r7, #8]
 800acb2:	68f8      	ldr	r0, [r7, #12]
 800acb4:	f000 f843 	bl	800ad3e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800acb8:	697b      	ldr	r3, [r7, #20]
	}
 800acba:	4618      	mov	r0, r3
 800acbc:	3718      	adds	r7, #24
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd80      	pop	{r7, pc}

0800acc2 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800acc2:	b580      	push	{r7, lr}
 800acc4:	b08a      	sub	sp, #40	; 0x28
 800acc6:	af02      	add	r7, sp, #8
 800acc8:	60f8      	str	r0, [r7, #12]
 800acca:	60b9      	str	r1, [r7, #8]
 800accc:	607a      	str	r2, [r7, #4]
 800acce:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800acd0:	232c      	movs	r3, #44	; 0x2c
 800acd2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800acd4:	693b      	ldr	r3, [r7, #16]
 800acd6:	2b2c      	cmp	r3, #44	; 0x2c
 800acd8:	d00a      	beq.n	800acf0 <xTimerCreateStatic+0x2e>
	__asm volatile
 800acda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acde:	f383 8811 	msr	BASEPRI, r3
 800ace2:	f3bf 8f6f 	isb	sy
 800ace6:	f3bf 8f4f 	dsb	sy
 800acea:	61bb      	str	r3, [r7, #24]
}
 800acec:	bf00      	nop
 800acee:	e7fe      	b.n	800acee <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800acf0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800acf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d10a      	bne.n	800ad0e <xTimerCreateStatic+0x4c>
	__asm volatile
 800acf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acfc:	f383 8811 	msr	BASEPRI, r3
 800ad00:	f3bf 8f6f 	isb	sy
 800ad04:	f3bf 8f4f 	dsb	sy
 800ad08:	617b      	str	r3, [r7, #20]
}
 800ad0a:	bf00      	nop
 800ad0c:	e7fe      	b.n	800ad0c <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800ad0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad10:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800ad12:	69fb      	ldr	r3, [r7, #28]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d00d      	beq.n	800ad34 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800ad18:	69fb      	ldr	r3, [r7, #28]
 800ad1a:	2202      	movs	r2, #2
 800ad1c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800ad20:	69fb      	ldr	r3, [r7, #28]
 800ad22:	9301      	str	r3, [sp, #4]
 800ad24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad26:	9300      	str	r3, [sp, #0]
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	687a      	ldr	r2, [r7, #4]
 800ad2c:	68b9      	ldr	r1, [r7, #8]
 800ad2e:	68f8      	ldr	r0, [r7, #12]
 800ad30:	f000 f805 	bl	800ad3e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800ad34:	69fb      	ldr	r3, [r7, #28]
	}
 800ad36:	4618      	mov	r0, r3
 800ad38:	3720      	adds	r7, #32
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}

0800ad3e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800ad3e:	b580      	push	{r7, lr}
 800ad40:	b086      	sub	sp, #24
 800ad42:	af00      	add	r7, sp, #0
 800ad44:	60f8      	str	r0, [r7, #12]
 800ad46:	60b9      	str	r1, [r7, #8]
 800ad48:	607a      	str	r2, [r7, #4]
 800ad4a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d10a      	bne.n	800ad68 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800ad52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad56:	f383 8811 	msr	BASEPRI, r3
 800ad5a:	f3bf 8f6f 	isb	sy
 800ad5e:	f3bf 8f4f 	dsb	sy
 800ad62:	617b      	str	r3, [r7, #20]
}
 800ad64:	bf00      	nop
 800ad66:	e7fe      	b.n	800ad66 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800ad68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d01e      	beq.n	800adac <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800ad6e:	f000 fae7 	bl	800b340 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800ad72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad74:	68fa      	ldr	r2, [r7, #12]
 800ad76:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800ad78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad7a:	68ba      	ldr	r2, [r7, #8]
 800ad7c:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800ad7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad80:	683a      	ldr	r2, [r7, #0]
 800ad82:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800ad84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad86:	6a3a      	ldr	r2, [r7, #32]
 800ad88:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800ad8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad8c:	3304      	adds	r3, #4
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f7fd fcf2 	bl	8008778 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d008      	beq.n	800adac <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800ad9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ada0:	f043 0304 	orr.w	r3, r3, #4
 800ada4:	b2da      	uxtb	r2, r3
 800ada6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800adac:	bf00      	nop
 800adae:	3718      	adds	r7, #24
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}

0800adb4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b08a      	sub	sp, #40	; 0x28
 800adb8:	af00      	add	r7, sp, #0
 800adba:	60f8      	str	r0, [r7, #12]
 800adbc:	60b9      	str	r1, [r7, #8]
 800adbe:	607a      	str	r2, [r7, #4]
 800adc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800adc2:	2300      	movs	r3, #0
 800adc4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d10a      	bne.n	800ade2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800adcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add0:	f383 8811 	msr	BASEPRI, r3
 800add4:	f3bf 8f6f 	isb	sy
 800add8:	f3bf 8f4f 	dsb	sy
 800addc:	623b      	str	r3, [r7, #32]
}
 800adde:	bf00      	nop
 800ade0:	e7fe      	b.n	800ade0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ade2:	4b1a      	ldr	r3, [pc, #104]	; (800ae4c <xTimerGenericCommand+0x98>)
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d02a      	beq.n	800ae40 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	2b05      	cmp	r3, #5
 800adfa:	dc18      	bgt.n	800ae2e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800adfc:	f7ff fd1a 	bl	800a834 <xTaskGetSchedulerState>
 800ae00:	4603      	mov	r3, r0
 800ae02:	2b02      	cmp	r3, #2
 800ae04:	d109      	bne.n	800ae1a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ae06:	4b11      	ldr	r3, [pc, #68]	; (800ae4c <xTimerGenericCommand+0x98>)
 800ae08:	6818      	ldr	r0, [r3, #0]
 800ae0a:	f107 0110 	add.w	r1, r7, #16
 800ae0e:	2300      	movs	r3, #0
 800ae10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae12:	f7fd ffa3 	bl	8008d5c <xQueueGenericSend>
 800ae16:	6278      	str	r0, [r7, #36]	; 0x24
 800ae18:	e012      	b.n	800ae40 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ae1a:	4b0c      	ldr	r3, [pc, #48]	; (800ae4c <xTimerGenericCommand+0x98>)
 800ae1c:	6818      	ldr	r0, [r3, #0]
 800ae1e:	f107 0110 	add.w	r1, r7, #16
 800ae22:	2300      	movs	r3, #0
 800ae24:	2200      	movs	r2, #0
 800ae26:	f7fd ff99 	bl	8008d5c <xQueueGenericSend>
 800ae2a:	6278      	str	r0, [r7, #36]	; 0x24
 800ae2c:	e008      	b.n	800ae40 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ae2e:	4b07      	ldr	r3, [pc, #28]	; (800ae4c <xTimerGenericCommand+0x98>)
 800ae30:	6818      	ldr	r0, [r3, #0]
 800ae32:	f107 0110 	add.w	r1, r7, #16
 800ae36:	2300      	movs	r3, #0
 800ae38:	683a      	ldr	r2, [r7, #0]
 800ae3a:	f7fe f88d 	bl	8008f58 <xQueueGenericSendFromISR>
 800ae3e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ae40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	3728      	adds	r7, #40	; 0x28
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}
 800ae4a:	bf00      	nop
 800ae4c:	20001338 	.word	0x20001338

0800ae50 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b088      	sub	sp, #32
 800ae54:	af02      	add	r7, sp, #8
 800ae56:	6078      	str	r0, [r7, #4]
 800ae58:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae5a:	4b22      	ldr	r3, [pc, #136]	; (800aee4 <prvProcessExpiredTimer+0x94>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	68db      	ldr	r3, [r3, #12]
 800ae60:	68db      	ldr	r3, [r3, #12]
 800ae62:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ae64:	697b      	ldr	r3, [r7, #20]
 800ae66:	3304      	adds	r3, #4
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f7fd fcef 	bl	800884c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae74:	f003 0304 	and.w	r3, r3, #4
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d022      	beq.n	800aec2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ae7c:	697b      	ldr	r3, [r7, #20]
 800ae7e:	699a      	ldr	r2, [r3, #24]
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	18d1      	adds	r1, r2, r3
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	683a      	ldr	r2, [r7, #0]
 800ae88:	6978      	ldr	r0, [r7, #20]
 800ae8a:	f000 f8d1 	bl	800b030 <prvInsertTimerInActiveList>
 800ae8e:	4603      	mov	r3, r0
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d01f      	beq.n	800aed4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ae94:	2300      	movs	r3, #0
 800ae96:	9300      	str	r3, [sp, #0]
 800ae98:	2300      	movs	r3, #0
 800ae9a:	687a      	ldr	r2, [r7, #4]
 800ae9c:	2100      	movs	r1, #0
 800ae9e:	6978      	ldr	r0, [r7, #20]
 800aea0:	f7ff ff88 	bl	800adb4 <xTimerGenericCommand>
 800aea4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800aea6:	693b      	ldr	r3, [r7, #16]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d113      	bne.n	800aed4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800aeac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeb0:	f383 8811 	msr	BASEPRI, r3
 800aeb4:	f3bf 8f6f 	isb	sy
 800aeb8:	f3bf 8f4f 	dsb	sy
 800aebc:	60fb      	str	r3, [r7, #12]
}
 800aebe:	bf00      	nop
 800aec0:	e7fe      	b.n	800aec0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aec8:	f023 0301 	bic.w	r3, r3, #1
 800aecc:	b2da      	uxtb	r2, r3
 800aece:	697b      	ldr	r3, [r7, #20]
 800aed0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aed4:	697b      	ldr	r3, [r7, #20]
 800aed6:	6a1b      	ldr	r3, [r3, #32]
 800aed8:	6978      	ldr	r0, [r7, #20]
 800aeda:	4798      	blx	r3
}
 800aedc:	bf00      	nop
 800aede:	3718      	adds	r7, #24
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}
 800aee4:	20001330 	.word	0x20001330

0800aee8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b084      	sub	sp, #16
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aef0:	f107 0308 	add.w	r3, r7, #8
 800aef4:	4618      	mov	r0, r3
 800aef6:	f000 f857 	bl	800afa8 <prvGetNextExpireTime>
 800aefa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800aefc:	68bb      	ldr	r3, [r7, #8]
 800aefe:	4619      	mov	r1, r3
 800af00:	68f8      	ldr	r0, [r7, #12]
 800af02:	f000 f803 	bl	800af0c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800af06:	f000 f8d5 	bl	800b0b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800af0a:	e7f1      	b.n	800aef0 <prvTimerTask+0x8>

0800af0c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b084      	sub	sp, #16
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
 800af14:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800af16:	f7ff f89b 	bl	800a050 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800af1a:	f107 0308 	add.w	r3, r7, #8
 800af1e:	4618      	mov	r0, r3
 800af20:	f000 f866 	bl	800aff0 <prvSampleTimeNow>
 800af24:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d130      	bne.n	800af8e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d10a      	bne.n	800af48 <prvProcessTimerOrBlockTask+0x3c>
 800af32:	687a      	ldr	r2, [r7, #4]
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	429a      	cmp	r2, r3
 800af38:	d806      	bhi.n	800af48 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800af3a:	f7ff f897 	bl	800a06c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800af3e:	68f9      	ldr	r1, [r7, #12]
 800af40:	6878      	ldr	r0, [r7, #4]
 800af42:	f7ff ff85 	bl	800ae50 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800af46:	e024      	b.n	800af92 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d008      	beq.n	800af60 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800af4e:	4b13      	ldr	r3, [pc, #76]	; (800af9c <prvProcessTimerOrBlockTask+0x90>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d101      	bne.n	800af5c <prvProcessTimerOrBlockTask+0x50>
 800af58:	2301      	movs	r3, #1
 800af5a:	e000      	b.n	800af5e <prvProcessTimerOrBlockTask+0x52>
 800af5c:	2300      	movs	r3, #0
 800af5e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800af60:	4b0f      	ldr	r3, [pc, #60]	; (800afa0 <prvProcessTimerOrBlockTask+0x94>)
 800af62:	6818      	ldr	r0, [r3, #0]
 800af64:	687a      	ldr	r2, [r7, #4]
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	1ad3      	subs	r3, r2, r3
 800af6a:	683a      	ldr	r2, [r7, #0]
 800af6c:	4619      	mov	r1, r3
 800af6e:	f7fe fd27 	bl	80099c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800af72:	f7ff f87b 	bl	800a06c <xTaskResumeAll>
 800af76:	4603      	mov	r3, r0
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d10a      	bne.n	800af92 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800af7c:	4b09      	ldr	r3, [pc, #36]	; (800afa4 <prvProcessTimerOrBlockTask+0x98>)
 800af7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af82:	601a      	str	r2, [r3, #0]
 800af84:	f3bf 8f4f 	dsb	sy
 800af88:	f3bf 8f6f 	isb	sy
}
 800af8c:	e001      	b.n	800af92 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800af8e:	f7ff f86d 	bl	800a06c <xTaskResumeAll>
}
 800af92:	bf00      	nop
 800af94:	3710      	adds	r7, #16
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}
 800af9a:	bf00      	nop
 800af9c:	20001334 	.word	0x20001334
 800afa0:	20001338 	.word	0x20001338
 800afa4:	e000ed04 	.word	0xe000ed04

0800afa8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800afa8:	b480      	push	{r7}
 800afaa:	b085      	sub	sp, #20
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800afb0:	4b0e      	ldr	r3, [pc, #56]	; (800afec <prvGetNextExpireTime+0x44>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d101      	bne.n	800afbe <prvGetNextExpireTime+0x16>
 800afba:	2201      	movs	r2, #1
 800afbc:	e000      	b.n	800afc0 <prvGetNextExpireTime+0x18>
 800afbe:	2200      	movs	r2, #0
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d105      	bne.n	800afd8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800afcc:	4b07      	ldr	r3, [pc, #28]	; (800afec <prvGetNextExpireTime+0x44>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	68db      	ldr	r3, [r3, #12]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	60fb      	str	r3, [r7, #12]
 800afd6:	e001      	b.n	800afdc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800afd8:	2300      	movs	r3, #0
 800afda:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800afdc:	68fb      	ldr	r3, [r7, #12]
}
 800afde:	4618      	mov	r0, r3
 800afe0:	3714      	adds	r7, #20
 800afe2:	46bd      	mov	sp, r7
 800afe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe8:	4770      	bx	lr
 800afea:	bf00      	nop
 800afec:	20001330 	.word	0x20001330

0800aff0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b084      	sub	sp, #16
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800aff8:	f7ff f8d6 	bl	800a1a8 <xTaskGetTickCount>
 800affc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800affe:	4b0b      	ldr	r3, [pc, #44]	; (800b02c <prvSampleTimeNow+0x3c>)
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	68fa      	ldr	r2, [r7, #12]
 800b004:	429a      	cmp	r2, r3
 800b006:	d205      	bcs.n	800b014 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b008:	f000 f936 	bl	800b278 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2201      	movs	r2, #1
 800b010:	601a      	str	r2, [r3, #0]
 800b012:	e002      	b.n	800b01a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2200      	movs	r2, #0
 800b018:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b01a:	4a04      	ldr	r2, [pc, #16]	; (800b02c <prvSampleTimeNow+0x3c>)
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b020:	68fb      	ldr	r3, [r7, #12]
}
 800b022:	4618      	mov	r0, r3
 800b024:	3710      	adds	r7, #16
 800b026:	46bd      	mov	sp, r7
 800b028:	bd80      	pop	{r7, pc}
 800b02a:	bf00      	nop
 800b02c:	20001340 	.word	0x20001340

0800b030 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b086      	sub	sp, #24
 800b034:	af00      	add	r7, sp, #0
 800b036:	60f8      	str	r0, [r7, #12]
 800b038:	60b9      	str	r1, [r7, #8]
 800b03a:	607a      	str	r2, [r7, #4]
 800b03c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b03e:	2300      	movs	r3, #0
 800b040:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	68ba      	ldr	r2, [r7, #8]
 800b046:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	68fa      	ldr	r2, [r7, #12]
 800b04c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b04e:	68ba      	ldr	r2, [r7, #8]
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	429a      	cmp	r2, r3
 800b054:	d812      	bhi.n	800b07c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b056:	687a      	ldr	r2, [r7, #4]
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	1ad2      	subs	r2, r2, r3
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	699b      	ldr	r3, [r3, #24]
 800b060:	429a      	cmp	r2, r3
 800b062:	d302      	bcc.n	800b06a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b064:	2301      	movs	r3, #1
 800b066:	617b      	str	r3, [r7, #20]
 800b068:	e01b      	b.n	800b0a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b06a:	4b10      	ldr	r3, [pc, #64]	; (800b0ac <prvInsertTimerInActiveList+0x7c>)
 800b06c:	681a      	ldr	r2, [r3, #0]
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	3304      	adds	r3, #4
 800b072:	4619      	mov	r1, r3
 800b074:	4610      	mov	r0, r2
 800b076:	f7fd fbb0 	bl	80087da <vListInsert>
 800b07a:	e012      	b.n	800b0a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b07c:	687a      	ldr	r2, [r7, #4]
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	429a      	cmp	r2, r3
 800b082:	d206      	bcs.n	800b092 <prvInsertTimerInActiveList+0x62>
 800b084:	68ba      	ldr	r2, [r7, #8]
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	429a      	cmp	r2, r3
 800b08a:	d302      	bcc.n	800b092 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b08c:	2301      	movs	r3, #1
 800b08e:	617b      	str	r3, [r7, #20]
 800b090:	e007      	b.n	800b0a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b092:	4b07      	ldr	r3, [pc, #28]	; (800b0b0 <prvInsertTimerInActiveList+0x80>)
 800b094:	681a      	ldr	r2, [r3, #0]
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	3304      	adds	r3, #4
 800b09a:	4619      	mov	r1, r3
 800b09c:	4610      	mov	r0, r2
 800b09e:	f7fd fb9c 	bl	80087da <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b0a2:	697b      	ldr	r3, [r7, #20]
}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	3718      	adds	r7, #24
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	bd80      	pop	{r7, pc}
 800b0ac:	20001334 	.word	0x20001334
 800b0b0:	20001330 	.word	0x20001330

0800b0b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b08e      	sub	sp, #56	; 0x38
 800b0b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b0ba:	e0ca      	b.n	800b252 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	da18      	bge.n	800b0f4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b0c2:	1d3b      	adds	r3, r7, #4
 800b0c4:	3304      	adds	r3, #4
 800b0c6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b0c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d10a      	bne.n	800b0e4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b0ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0d2:	f383 8811 	msr	BASEPRI, r3
 800b0d6:	f3bf 8f6f 	isb	sy
 800b0da:	f3bf 8f4f 	dsb	sy
 800b0de:	61fb      	str	r3, [r7, #28]
}
 800b0e0:	bf00      	nop
 800b0e2:	e7fe      	b.n	800b0e2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b0e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0ea:	6850      	ldr	r0, [r2, #4]
 800b0ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0ee:	6892      	ldr	r2, [r2, #8]
 800b0f0:	4611      	mov	r1, r2
 800b0f2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	f2c0 80aa 	blt.w	800b250 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b102:	695b      	ldr	r3, [r3, #20]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d004      	beq.n	800b112 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b10a:	3304      	adds	r3, #4
 800b10c:	4618      	mov	r0, r3
 800b10e:	f7fd fb9d 	bl	800884c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b112:	463b      	mov	r3, r7
 800b114:	4618      	mov	r0, r3
 800b116:	f7ff ff6b 	bl	800aff0 <prvSampleTimeNow>
 800b11a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2b09      	cmp	r3, #9
 800b120:	f200 8097 	bhi.w	800b252 <prvProcessReceivedCommands+0x19e>
 800b124:	a201      	add	r2, pc, #4	; (adr r2, 800b12c <prvProcessReceivedCommands+0x78>)
 800b126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b12a:	bf00      	nop
 800b12c:	0800b155 	.word	0x0800b155
 800b130:	0800b155 	.word	0x0800b155
 800b134:	0800b155 	.word	0x0800b155
 800b138:	0800b1c9 	.word	0x0800b1c9
 800b13c:	0800b1dd 	.word	0x0800b1dd
 800b140:	0800b227 	.word	0x0800b227
 800b144:	0800b155 	.word	0x0800b155
 800b148:	0800b155 	.word	0x0800b155
 800b14c:	0800b1c9 	.word	0x0800b1c9
 800b150:	0800b1dd 	.word	0x0800b1dd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b156:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b15a:	f043 0301 	orr.w	r3, r3, #1
 800b15e:	b2da      	uxtb	r2, r3
 800b160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b162:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b166:	68ba      	ldr	r2, [r7, #8]
 800b168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b16a:	699b      	ldr	r3, [r3, #24]
 800b16c:	18d1      	adds	r1, r2, r3
 800b16e:	68bb      	ldr	r3, [r7, #8]
 800b170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b172:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b174:	f7ff ff5c 	bl	800b030 <prvInsertTimerInActiveList>
 800b178:	4603      	mov	r3, r0
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d069      	beq.n	800b252 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b17e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b180:	6a1b      	ldr	r3, [r3, #32]
 800b182:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b184:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b188:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b18c:	f003 0304 	and.w	r3, r3, #4
 800b190:	2b00      	cmp	r3, #0
 800b192:	d05e      	beq.n	800b252 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b194:	68ba      	ldr	r2, [r7, #8]
 800b196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b198:	699b      	ldr	r3, [r3, #24]
 800b19a:	441a      	add	r2, r3
 800b19c:	2300      	movs	r3, #0
 800b19e:	9300      	str	r3, [sp, #0]
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	2100      	movs	r1, #0
 800b1a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1a6:	f7ff fe05 	bl	800adb4 <xTimerGenericCommand>
 800b1aa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b1ac:	6a3b      	ldr	r3, [r7, #32]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d14f      	bne.n	800b252 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1b6:	f383 8811 	msr	BASEPRI, r3
 800b1ba:	f3bf 8f6f 	isb	sy
 800b1be:	f3bf 8f4f 	dsb	sy
 800b1c2:	61bb      	str	r3, [r7, #24]
}
 800b1c4:	bf00      	nop
 800b1c6:	e7fe      	b.n	800b1c6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1ce:	f023 0301 	bic.w	r3, r3, #1
 800b1d2:	b2da      	uxtb	r2, r3
 800b1d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b1da:	e03a      	b.n	800b252 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b1dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1e2:	f043 0301 	orr.w	r3, r3, #1
 800b1e6:	b2da      	uxtb	r2, r3
 800b1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b1ee:	68ba      	ldr	r2, [r7, #8]
 800b1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f6:	699b      	ldr	r3, [r3, #24]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d10a      	bne.n	800b212 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b1fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b200:	f383 8811 	msr	BASEPRI, r3
 800b204:	f3bf 8f6f 	isb	sy
 800b208:	f3bf 8f4f 	dsb	sy
 800b20c:	617b      	str	r3, [r7, #20]
}
 800b20e:	bf00      	nop
 800b210:	e7fe      	b.n	800b210 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b214:	699a      	ldr	r2, [r3, #24]
 800b216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b218:	18d1      	adds	r1, r2, r3
 800b21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b21c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b21e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b220:	f7ff ff06 	bl	800b030 <prvInsertTimerInActiveList>
					break;
 800b224:	e015      	b.n	800b252 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b228:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b22c:	f003 0302 	and.w	r3, r3, #2
 800b230:	2b00      	cmp	r3, #0
 800b232:	d103      	bne.n	800b23c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b234:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b236:	f000 fbfb 	bl	800ba30 <vPortFree>
 800b23a:	e00a      	b.n	800b252 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b23e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b242:	f023 0301 	bic.w	r3, r3, #1
 800b246:	b2da      	uxtb	r2, r3
 800b248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b24a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b24e:	e000      	b.n	800b252 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b250:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b252:	4b08      	ldr	r3, [pc, #32]	; (800b274 <prvProcessReceivedCommands+0x1c0>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	1d39      	adds	r1, r7, #4
 800b258:	2200      	movs	r2, #0
 800b25a:	4618      	mov	r0, r3
 800b25c:	f7fd ffa4 	bl	80091a8 <xQueueReceive>
 800b260:	4603      	mov	r3, r0
 800b262:	2b00      	cmp	r3, #0
 800b264:	f47f af2a 	bne.w	800b0bc <prvProcessReceivedCommands+0x8>
	}
}
 800b268:	bf00      	nop
 800b26a:	bf00      	nop
 800b26c:	3730      	adds	r7, #48	; 0x30
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}
 800b272:	bf00      	nop
 800b274:	20001338 	.word	0x20001338

0800b278 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b088      	sub	sp, #32
 800b27c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b27e:	e048      	b.n	800b312 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b280:	4b2d      	ldr	r3, [pc, #180]	; (800b338 <prvSwitchTimerLists+0xc0>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	68db      	ldr	r3, [r3, #12]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b28a:	4b2b      	ldr	r3, [pc, #172]	; (800b338 <prvSwitchTimerLists+0xc0>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	68db      	ldr	r3, [r3, #12]
 800b290:	68db      	ldr	r3, [r3, #12]
 800b292:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	3304      	adds	r3, #4
 800b298:	4618      	mov	r0, r3
 800b29a:	f7fd fad7 	bl	800884c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	6a1b      	ldr	r3, [r3, #32]
 800b2a2:	68f8      	ldr	r0, [r7, #12]
 800b2a4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2ac:	f003 0304 	and.w	r3, r3, #4
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d02e      	beq.n	800b312 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	699b      	ldr	r3, [r3, #24]
 800b2b8:	693a      	ldr	r2, [r7, #16]
 800b2ba:	4413      	add	r3, r2
 800b2bc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b2be:	68ba      	ldr	r2, [r7, #8]
 800b2c0:	693b      	ldr	r3, [r7, #16]
 800b2c2:	429a      	cmp	r2, r3
 800b2c4:	d90e      	bls.n	800b2e4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	68ba      	ldr	r2, [r7, #8]
 800b2ca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	68fa      	ldr	r2, [r7, #12]
 800b2d0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b2d2:	4b19      	ldr	r3, [pc, #100]	; (800b338 <prvSwitchTimerLists+0xc0>)
 800b2d4:	681a      	ldr	r2, [r3, #0]
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	3304      	adds	r3, #4
 800b2da:	4619      	mov	r1, r3
 800b2dc:	4610      	mov	r0, r2
 800b2de:	f7fd fa7c 	bl	80087da <vListInsert>
 800b2e2:	e016      	b.n	800b312 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	9300      	str	r3, [sp, #0]
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	693a      	ldr	r2, [r7, #16]
 800b2ec:	2100      	movs	r1, #0
 800b2ee:	68f8      	ldr	r0, [r7, #12]
 800b2f0:	f7ff fd60 	bl	800adb4 <xTimerGenericCommand>
 800b2f4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d10a      	bne.n	800b312 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b2fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b300:	f383 8811 	msr	BASEPRI, r3
 800b304:	f3bf 8f6f 	isb	sy
 800b308:	f3bf 8f4f 	dsb	sy
 800b30c:	603b      	str	r3, [r7, #0]
}
 800b30e:	bf00      	nop
 800b310:	e7fe      	b.n	800b310 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b312:	4b09      	ldr	r3, [pc, #36]	; (800b338 <prvSwitchTimerLists+0xc0>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d1b1      	bne.n	800b280 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b31c:	4b06      	ldr	r3, [pc, #24]	; (800b338 <prvSwitchTimerLists+0xc0>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b322:	4b06      	ldr	r3, [pc, #24]	; (800b33c <prvSwitchTimerLists+0xc4>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	4a04      	ldr	r2, [pc, #16]	; (800b338 <prvSwitchTimerLists+0xc0>)
 800b328:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b32a:	4a04      	ldr	r2, [pc, #16]	; (800b33c <prvSwitchTimerLists+0xc4>)
 800b32c:	697b      	ldr	r3, [r7, #20]
 800b32e:	6013      	str	r3, [r2, #0]
}
 800b330:	bf00      	nop
 800b332:	3718      	adds	r7, #24
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}
 800b338:	20001330 	.word	0x20001330
 800b33c:	20001334 	.word	0x20001334

0800b340 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b082      	sub	sp, #8
 800b344:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b346:	f000 f985 	bl	800b654 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b34a:	4b15      	ldr	r3, [pc, #84]	; (800b3a0 <prvCheckForValidListAndQueue+0x60>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d120      	bne.n	800b394 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b352:	4814      	ldr	r0, [pc, #80]	; (800b3a4 <prvCheckForValidListAndQueue+0x64>)
 800b354:	f7fd f9f0 	bl	8008738 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b358:	4813      	ldr	r0, [pc, #76]	; (800b3a8 <prvCheckForValidListAndQueue+0x68>)
 800b35a:	f7fd f9ed 	bl	8008738 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b35e:	4b13      	ldr	r3, [pc, #76]	; (800b3ac <prvCheckForValidListAndQueue+0x6c>)
 800b360:	4a10      	ldr	r2, [pc, #64]	; (800b3a4 <prvCheckForValidListAndQueue+0x64>)
 800b362:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b364:	4b12      	ldr	r3, [pc, #72]	; (800b3b0 <prvCheckForValidListAndQueue+0x70>)
 800b366:	4a10      	ldr	r2, [pc, #64]	; (800b3a8 <prvCheckForValidListAndQueue+0x68>)
 800b368:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b36a:	2300      	movs	r3, #0
 800b36c:	9300      	str	r3, [sp, #0]
 800b36e:	4b11      	ldr	r3, [pc, #68]	; (800b3b4 <prvCheckForValidListAndQueue+0x74>)
 800b370:	4a11      	ldr	r2, [pc, #68]	; (800b3b8 <prvCheckForValidListAndQueue+0x78>)
 800b372:	2110      	movs	r1, #16
 800b374:	200a      	movs	r0, #10
 800b376:	f7fd fafb 	bl	8008970 <xQueueGenericCreateStatic>
 800b37a:	4603      	mov	r3, r0
 800b37c:	4a08      	ldr	r2, [pc, #32]	; (800b3a0 <prvCheckForValidListAndQueue+0x60>)
 800b37e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b380:	4b07      	ldr	r3, [pc, #28]	; (800b3a0 <prvCheckForValidListAndQueue+0x60>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d005      	beq.n	800b394 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b388:	4b05      	ldr	r3, [pc, #20]	; (800b3a0 <prvCheckForValidListAndQueue+0x60>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	490b      	ldr	r1, [pc, #44]	; (800b3bc <prvCheckForValidListAndQueue+0x7c>)
 800b38e:	4618      	mov	r0, r3
 800b390:	f7fe fac2 	bl	8009918 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b394:	f000 f98e 	bl	800b6b4 <vPortExitCritical>
}
 800b398:	bf00      	nop
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bd80      	pop	{r7, pc}
 800b39e:	bf00      	nop
 800b3a0:	20001338 	.word	0x20001338
 800b3a4:	20001308 	.word	0x20001308
 800b3a8:	2000131c 	.word	0x2000131c
 800b3ac:	20001330 	.word	0x20001330
 800b3b0:	20001334 	.word	0x20001334
 800b3b4:	200013e4 	.word	0x200013e4
 800b3b8:	20001344 	.word	0x20001344
 800b3bc:	0800d7e4 	.word	0x0800d7e4

0800b3c0 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b086      	sub	sp, #24
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d10a      	bne.n	800b3e8 <pvTimerGetTimerID+0x28>
	__asm volatile
 800b3d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3d6:	f383 8811 	msr	BASEPRI, r3
 800b3da:	f3bf 8f6f 	isb	sy
 800b3de:	f3bf 8f4f 	dsb	sy
 800b3e2:	60fb      	str	r3, [r7, #12]
}
 800b3e4:	bf00      	nop
 800b3e6:	e7fe      	b.n	800b3e6 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800b3e8:	f000 f934 	bl	800b654 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800b3ec:	697b      	ldr	r3, [r7, #20]
 800b3ee:	69db      	ldr	r3, [r3, #28]
 800b3f0:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800b3f2:	f000 f95f 	bl	800b6b4 <vPortExitCritical>

	return pvReturn;
 800b3f6:	693b      	ldr	r3, [r7, #16]
}
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	3718      	adds	r7, #24
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd80      	pop	{r7, pc}

0800b400 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b400:	b480      	push	{r7}
 800b402:	b085      	sub	sp, #20
 800b404:	af00      	add	r7, sp, #0
 800b406:	60f8      	str	r0, [r7, #12]
 800b408:	60b9      	str	r1, [r7, #8]
 800b40a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	3b04      	subs	r3, #4
 800b410:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b418:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	3b04      	subs	r3, #4
 800b41e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	f023 0201 	bic.w	r2, r3, #1
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	3b04      	subs	r3, #4
 800b42e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b430:	4a0c      	ldr	r2, [pc, #48]	; (800b464 <pxPortInitialiseStack+0x64>)
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	3b14      	subs	r3, #20
 800b43a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b43c:	687a      	ldr	r2, [r7, #4]
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	3b04      	subs	r3, #4
 800b446:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	f06f 0202 	mvn.w	r2, #2
 800b44e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	3b20      	subs	r3, #32
 800b454:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b456:	68fb      	ldr	r3, [r7, #12]
}
 800b458:	4618      	mov	r0, r3
 800b45a:	3714      	adds	r7, #20
 800b45c:	46bd      	mov	sp, r7
 800b45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b462:	4770      	bx	lr
 800b464:	0800b469 	.word	0x0800b469

0800b468 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b468:	b480      	push	{r7}
 800b46a:	b085      	sub	sp, #20
 800b46c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b46e:	2300      	movs	r3, #0
 800b470:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b472:	4b12      	ldr	r3, [pc, #72]	; (800b4bc <prvTaskExitError+0x54>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b47a:	d00a      	beq.n	800b492 <prvTaskExitError+0x2a>
	__asm volatile
 800b47c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b480:	f383 8811 	msr	BASEPRI, r3
 800b484:	f3bf 8f6f 	isb	sy
 800b488:	f3bf 8f4f 	dsb	sy
 800b48c:	60fb      	str	r3, [r7, #12]
}
 800b48e:	bf00      	nop
 800b490:	e7fe      	b.n	800b490 <prvTaskExitError+0x28>
	__asm volatile
 800b492:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b496:	f383 8811 	msr	BASEPRI, r3
 800b49a:	f3bf 8f6f 	isb	sy
 800b49e:	f3bf 8f4f 	dsb	sy
 800b4a2:	60bb      	str	r3, [r7, #8]
}
 800b4a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b4a6:	bf00      	nop
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d0fc      	beq.n	800b4a8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b4ae:	bf00      	nop
 800b4b0:	bf00      	nop
 800b4b2:	3714      	adds	r7, #20
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ba:	4770      	bx	lr
 800b4bc:	20000034 	.word	0x20000034

0800b4c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b4c0:	4b07      	ldr	r3, [pc, #28]	; (800b4e0 <pxCurrentTCBConst2>)
 800b4c2:	6819      	ldr	r1, [r3, #0]
 800b4c4:	6808      	ldr	r0, [r1, #0]
 800b4c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4ca:	f380 8809 	msr	PSP, r0
 800b4ce:	f3bf 8f6f 	isb	sy
 800b4d2:	f04f 0000 	mov.w	r0, #0
 800b4d6:	f380 8811 	msr	BASEPRI, r0
 800b4da:	4770      	bx	lr
 800b4dc:	f3af 8000 	nop.w

0800b4e0 <pxCurrentTCBConst2>:
 800b4e0:	20000e08 	.word	0x20000e08
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b4e4:	bf00      	nop
 800b4e6:	bf00      	nop

0800b4e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b4e8:	4808      	ldr	r0, [pc, #32]	; (800b50c <prvPortStartFirstTask+0x24>)
 800b4ea:	6800      	ldr	r0, [r0, #0]
 800b4ec:	6800      	ldr	r0, [r0, #0]
 800b4ee:	f380 8808 	msr	MSP, r0
 800b4f2:	f04f 0000 	mov.w	r0, #0
 800b4f6:	f380 8814 	msr	CONTROL, r0
 800b4fa:	b662      	cpsie	i
 800b4fc:	b661      	cpsie	f
 800b4fe:	f3bf 8f4f 	dsb	sy
 800b502:	f3bf 8f6f 	isb	sy
 800b506:	df00      	svc	0
 800b508:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b50a:	bf00      	nop
 800b50c:	e000ed08 	.word	0xe000ed08

0800b510 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b086      	sub	sp, #24
 800b514:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b516:	4b46      	ldr	r3, [pc, #280]	; (800b630 <xPortStartScheduler+0x120>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	4a46      	ldr	r2, [pc, #280]	; (800b634 <xPortStartScheduler+0x124>)
 800b51c:	4293      	cmp	r3, r2
 800b51e:	d10a      	bne.n	800b536 <xPortStartScheduler+0x26>
	__asm volatile
 800b520:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b524:	f383 8811 	msr	BASEPRI, r3
 800b528:	f3bf 8f6f 	isb	sy
 800b52c:	f3bf 8f4f 	dsb	sy
 800b530:	613b      	str	r3, [r7, #16]
}
 800b532:	bf00      	nop
 800b534:	e7fe      	b.n	800b534 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b536:	4b3e      	ldr	r3, [pc, #248]	; (800b630 <xPortStartScheduler+0x120>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	4a3f      	ldr	r2, [pc, #252]	; (800b638 <xPortStartScheduler+0x128>)
 800b53c:	4293      	cmp	r3, r2
 800b53e:	d10a      	bne.n	800b556 <xPortStartScheduler+0x46>
	__asm volatile
 800b540:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b544:	f383 8811 	msr	BASEPRI, r3
 800b548:	f3bf 8f6f 	isb	sy
 800b54c:	f3bf 8f4f 	dsb	sy
 800b550:	60fb      	str	r3, [r7, #12]
}
 800b552:	bf00      	nop
 800b554:	e7fe      	b.n	800b554 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b556:	4b39      	ldr	r3, [pc, #228]	; (800b63c <xPortStartScheduler+0x12c>)
 800b558:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b55a:	697b      	ldr	r3, [r7, #20]
 800b55c:	781b      	ldrb	r3, [r3, #0]
 800b55e:	b2db      	uxtb	r3, r3
 800b560:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b562:	697b      	ldr	r3, [r7, #20]
 800b564:	22ff      	movs	r2, #255	; 0xff
 800b566:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b568:	697b      	ldr	r3, [r7, #20]
 800b56a:	781b      	ldrb	r3, [r3, #0]
 800b56c:	b2db      	uxtb	r3, r3
 800b56e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b570:	78fb      	ldrb	r3, [r7, #3]
 800b572:	b2db      	uxtb	r3, r3
 800b574:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b578:	b2da      	uxtb	r2, r3
 800b57a:	4b31      	ldr	r3, [pc, #196]	; (800b640 <xPortStartScheduler+0x130>)
 800b57c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b57e:	4b31      	ldr	r3, [pc, #196]	; (800b644 <xPortStartScheduler+0x134>)
 800b580:	2207      	movs	r2, #7
 800b582:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b584:	e009      	b.n	800b59a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b586:	4b2f      	ldr	r3, [pc, #188]	; (800b644 <xPortStartScheduler+0x134>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	3b01      	subs	r3, #1
 800b58c:	4a2d      	ldr	r2, [pc, #180]	; (800b644 <xPortStartScheduler+0x134>)
 800b58e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b590:	78fb      	ldrb	r3, [r7, #3]
 800b592:	b2db      	uxtb	r3, r3
 800b594:	005b      	lsls	r3, r3, #1
 800b596:	b2db      	uxtb	r3, r3
 800b598:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b59a:	78fb      	ldrb	r3, [r7, #3]
 800b59c:	b2db      	uxtb	r3, r3
 800b59e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5a2:	2b80      	cmp	r3, #128	; 0x80
 800b5a4:	d0ef      	beq.n	800b586 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b5a6:	4b27      	ldr	r3, [pc, #156]	; (800b644 <xPortStartScheduler+0x134>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f1c3 0307 	rsb	r3, r3, #7
 800b5ae:	2b04      	cmp	r3, #4
 800b5b0:	d00a      	beq.n	800b5c8 <xPortStartScheduler+0xb8>
	__asm volatile
 800b5b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b6:	f383 8811 	msr	BASEPRI, r3
 800b5ba:	f3bf 8f6f 	isb	sy
 800b5be:	f3bf 8f4f 	dsb	sy
 800b5c2:	60bb      	str	r3, [r7, #8]
}
 800b5c4:	bf00      	nop
 800b5c6:	e7fe      	b.n	800b5c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b5c8:	4b1e      	ldr	r3, [pc, #120]	; (800b644 <xPortStartScheduler+0x134>)
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	021b      	lsls	r3, r3, #8
 800b5ce:	4a1d      	ldr	r2, [pc, #116]	; (800b644 <xPortStartScheduler+0x134>)
 800b5d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b5d2:	4b1c      	ldr	r3, [pc, #112]	; (800b644 <xPortStartScheduler+0x134>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b5da:	4a1a      	ldr	r2, [pc, #104]	; (800b644 <xPortStartScheduler+0x134>)
 800b5dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	b2da      	uxtb	r2, r3
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b5e6:	4b18      	ldr	r3, [pc, #96]	; (800b648 <xPortStartScheduler+0x138>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	4a17      	ldr	r2, [pc, #92]	; (800b648 <xPortStartScheduler+0x138>)
 800b5ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b5f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b5f2:	4b15      	ldr	r3, [pc, #84]	; (800b648 <xPortStartScheduler+0x138>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	4a14      	ldr	r2, [pc, #80]	; (800b648 <xPortStartScheduler+0x138>)
 800b5f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b5fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b5fe:	f000 f8dd 	bl	800b7bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b602:	4b12      	ldr	r3, [pc, #72]	; (800b64c <xPortStartScheduler+0x13c>)
 800b604:	2200      	movs	r2, #0
 800b606:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b608:	f000 f8fc 	bl	800b804 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b60c:	4b10      	ldr	r3, [pc, #64]	; (800b650 <xPortStartScheduler+0x140>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	4a0f      	ldr	r2, [pc, #60]	; (800b650 <xPortStartScheduler+0x140>)
 800b612:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b616:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b618:	f7ff ff66 	bl	800b4e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b61c:	f7fe fe8e 	bl	800a33c <vTaskSwitchContext>
	prvTaskExitError();
 800b620:	f7ff ff22 	bl	800b468 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b624:	2300      	movs	r3, #0
}
 800b626:	4618      	mov	r0, r3
 800b628:	3718      	adds	r7, #24
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}
 800b62e:	bf00      	nop
 800b630:	e000ed00 	.word	0xe000ed00
 800b634:	410fc271 	.word	0x410fc271
 800b638:	410fc270 	.word	0x410fc270
 800b63c:	e000e400 	.word	0xe000e400
 800b640:	20001434 	.word	0x20001434
 800b644:	20001438 	.word	0x20001438
 800b648:	e000ed20 	.word	0xe000ed20
 800b64c:	20000034 	.word	0x20000034
 800b650:	e000ef34 	.word	0xe000ef34

0800b654 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b654:	b480      	push	{r7}
 800b656:	b083      	sub	sp, #12
 800b658:	af00      	add	r7, sp, #0
	__asm volatile
 800b65a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b65e:	f383 8811 	msr	BASEPRI, r3
 800b662:	f3bf 8f6f 	isb	sy
 800b666:	f3bf 8f4f 	dsb	sy
 800b66a:	607b      	str	r3, [r7, #4]
}
 800b66c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b66e:	4b0f      	ldr	r3, [pc, #60]	; (800b6ac <vPortEnterCritical+0x58>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	3301      	adds	r3, #1
 800b674:	4a0d      	ldr	r2, [pc, #52]	; (800b6ac <vPortEnterCritical+0x58>)
 800b676:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b678:	4b0c      	ldr	r3, [pc, #48]	; (800b6ac <vPortEnterCritical+0x58>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	2b01      	cmp	r3, #1
 800b67e:	d10f      	bne.n	800b6a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b680:	4b0b      	ldr	r3, [pc, #44]	; (800b6b0 <vPortEnterCritical+0x5c>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	b2db      	uxtb	r3, r3
 800b686:	2b00      	cmp	r3, #0
 800b688:	d00a      	beq.n	800b6a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800b68a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b68e:	f383 8811 	msr	BASEPRI, r3
 800b692:	f3bf 8f6f 	isb	sy
 800b696:	f3bf 8f4f 	dsb	sy
 800b69a:	603b      	str	r3, [r7, #0]
}
 800b69c:	bf00      	nop
 800b69e:	e7fe      	b.n	800b69e <vPortEnterCritical+0x4a>
	}
}
 800b6a0:	bf00      	nop
 800b6a2:	370c      	adds	r7, #12
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6aa:	4770      	bx	lr
 800b6ac:	20000034 	.word	0x20000034
 800b6b0:	e000ed04 	.word	0xe000ed04

0800b6b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b6b4:	b480      	push	{r7}
 800b6b6:	b083      	sub	sp, #12
 800b6b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b6ba:	4b12      	ldr	r3, [pc, #72]	; (800b704 <vPortExitCritical+0x50>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d10a      	bne.n	800b6d8 <vPortExitCritical+0x24>
	__asm volatile
 800b6c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6c6:	f383 8811 	msr	BASEPRI, r3
 800b6ca:	f3bf 8f6f 	isb	sy
 800b6ce:	f3bf 8f4f 	dsb	sy
 800b6d2:	607b      	str	r3, [r7, #4]
}
 800b6d4:	bf00      	nop
 800b6d6:	e7fe      	b.n	800b6d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b6d8:	4b0a      	ldr	r3, [pc, #40]	; (800b704 <vPortExitCritical+0x50>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	3b01      	subs	r3, #1
 800b6de:	4a09      	ldr	r2, [pc, #36]	; (800b704 <vPortExitCritical+0x50>)
 800b6e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b6e2:	4b08      	ldr	r3, [pc, #32]	; (800b704 <vPortExitCritical+0x50>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d105      	bne.n	800b6f6 <vPortExitCritical+0x42>
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	f383 8811 	msr	BASEPRI, r3
}
 800b6f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b6f6:	bf00      	nop
 800b6f8:	370c      	adds	r7, #12
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b700:	4770      	bx	lr
 800b702:	bf00      	nop
 800b704:	20000034 	.word	0x20000034
	...

0800b710 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b710:	f3ef 8009 	mrs	r0, PSP
 800b714:	f3bf 8f6f 	isb	sy
 800b718:	4b15      	ldr	r3, [pc, #84]	; (800b770 <pxCurrentTCBConst>)
 800b71a:	681a      	ldr	r2, [r3, #0]
 800b71c:	f01e 0f10 	tst.w	lr, #16
 800b720:	bf08      	it	eq
 800b722:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b726:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b72a:	6010      	str	r0, [r2, #0]
 800b72c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b730:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b734:	f380 8811 	msr	BASEPRI, r0
 800b738:	f3bf 8f4f 	dsb	sy
 800b73c:	f3bf 8f6f 	isb	sy
 800b740:	f7fe fdfc 	bl	800a33c <vTaskSwitchContext>
 800b744:	f04f 0000 	mov.w	r0, #0
 800b748:	f380 8811 	msr	BASEPRI, r0
 800b74c:	bc09      	pop	{r0, r3}
 800b74e:	6819      	ldr	r1, [r3, #0]
 800b750:	6808      	ldr	r0, [r1, #0]
 800b752:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b756:	f01e 0f10 	tst.w	lr, #16
 800b75a:	bf08      	it	eq
 800b75c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b760:	f380 8809 	msr	PSP, r0
 800b764:	f3bf 8f6f 	isb	sy
 800b768:	4770      	bx	lr
 800b76a:	bf00      	nop
 800b76c:	f3af 8000 	nop.w

0800b770 <pxCurrentTCBConst>:
 800b770:	20000e08 	.word	0x20000e08
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b774:	bf00      	nop
 800b776:	bf00      	nop

0800b778 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b082      	sub	sp, #8
 800b77c:	af00      	add	r7, sp, #0
	__asm volatile
 800b77e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b782:	f383 8811 	msr	BASEPRI, r3
 800b786:	f3bf 8f6f 	isb	sy
 800b78a:	f3bf 8f4f 	dsb	sy
 800b78e:	607b      	str	r3, [r7, #4]
}
 800b790:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b792:	f7fe fd19 	bl	800a1c8 <xTaskIncrementTick>
 800b796:	4603      	mov	r3, r0
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d003      	beq.n	800b7a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b79c:	4b06      	ldr	r3, [pc, #24]	; (800b7b8 <xPortSysTickHandler+0x40>)
 800b79e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7a2:	601a      	str	r2, [r3, #0]
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	f383 8811 	msr	BASEPRI, r3
}
 800b7ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b7b0:	bf00      	nop
 800b7b2:	3708      	adds	r7, #8
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	bd80      	pop	{r7, pc}
 800b7b8:	e000ed04 	.word	0xe000ed04

0800b7bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b7bc:	b480      	push	{r7}
 800b7be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b7c0:	4b0b      	ldr	r3, [pc, #44]	; (800b7f0 <vPortSetupTimerInterrupt+0x34>)
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b7c6:	4b0b      	ldr	r3, [pc, #44]	; (800b7f4 <vPortSetupTimerInterrupt+0x38>)
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b7cc:	4b0a      	ldr	r3, [pc, #40]	; (800b7f8 <vPortSetupTimerInterrupt+0x3c>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	4a0a      	ldr	r2, [pc, #40]	; (800b7fc <vPortSetupTimerInterrupt+0x40>)
 800b7d2:	fba2 2303 	umull	r2, r3, r2, r3
 800b7d6:	099b      	lsrs	r3, r3, #6
 800b7d8:	4a09      	ldr	r2, [pc, #36]	; (800b800 <vPortSetupTimerInterrupt+0x44>)
 800b7da:	3b01      	subs	r3, #1
 800b7dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b7de:	4b04      	ldr	r3, [pc, #16]	; (800b7f0 <vPortSetupTimerInterrupt+0x34>)
 800b7e0:	2207      	movs	r2, #7
 800b7e2:	601a      	str	r2, [r3, #0]
}
 800b7e4:	bf00      	nop
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ec:	4770      	bx	lr
 800b7ee:	bf00      	nop
 800b7f0:	e000e010 	.word	0xe000e010
 800b7f4:	e000e018 	.word	0xe000e018
 800b7f8:	20000028 	.word	0x20000028
 800b7fc:	10624dd3 	.word	0x10624dd3
 800b800:	e000e014 	.word	0xe000e014

0800b804 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b804:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b814 <vPortEnableVFP+0x10>
 800b808:	6801      	ldr	r1, [r0, #0]
 800b80a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b80e:	6001      	str	r1, [r0, #0]
 800b810:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b812:	bf00      	nop
 800b814:	e000ed88 	.word	0xe000ed88

0800b818 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b818:	b480      	push	{r7}
 800b81a:	b085      	sub	sp, #20
 800b81c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b81e:	f3ef 8305 	mrs	r3, IPSR
 800b822:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	2b0f      	cmp	r3, #15
 800b828:	d914      	bls.n	800b854 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b82a:	4a17      	ldr	r2, [pc, #92]	; (800b888 <vPortValidateInterruptPriority+0x70>)
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	4413      	add	r3, r2
 800b830:	781b      	ldrb	r3, [r3, #0]
 800b832:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b834:	4b15      	ldr	r3, [pc, #84]	; (800b88c <vPortValidateInterruptPriority+0x74>)
 800b836:	781b      	ldrb	r3, [r3, #0]
 800b838:	7afa      	ldrb	r2, [r7, #11]
 800b83a:	429a      	cmp	r2, r3
 800b83c:	d20a      	bcs.n	800b854 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b842:	f383 8811 	msr	BASEPRI, r3
 800b846:	f3bf 8f6f 	isb	sy
 800b84a:	f3bf 8f4f 	dsb	sy
 800b84e:	607b      	str	r3, [r7, #4]
}
 800b850:	bf00      	nop
 800b852:	e7fe      	b.n	800b852 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b854:	4b0e      	ldr	r3, [pc, #56]	; (800b890 <vPortValidateInterruptPriority+0x78>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b85c:	4b0d      	ldr	r3, [pc, #52]	; (800b894 <vPortValidateInterruptPriority+0x7c>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	429a      	cmp	r2, r3
 800b862:	d90a      	bls.n	800b87a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b864:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b868:	f383 8811 	msr	BASEPRI, r3
 800b86c:	f3bf 8f6f 	isb	sy
 800b870:	f3bf 8f4f 	dsb	sy
 800b874:	603b      	str	r3, [r7, #0]
}
 800b876:	bf00      	nop
 800b878:	e7fe      	b.n	800b878 <vPortValidateInterruptPriority+0x60>
	}
 800b87a:	bf00      	nop
 800b87c:	3714      	adds	r7, #20
 800b87e:	46bd      	mov	sp, r7
 800b880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b884:	4770      	bx	lr
 800b886:	bf00      	nop
 800b888:	e000e3f0 	.word	0xe000e3f0
 800b88c:	20001434 	.word	0x20001434
 800b890:	e000ed0c 	.word	0xe000ed0c
 800b894:	20001438 	.word	0x20001438

0800b898 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b08a      	sub	sp, #40	; 0x28
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b8a4:	f7fe fbd4 	bl	800a050 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b8a8:	4b5b      	ldr	r3, [pc, #364]	; (800ba18 <pvPortMalloc+0x180>)
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d101      	bne.n	800b8b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b8b0:	f000 f920 	bl	800baf4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b8b4:	4b59      	ldr	r3, [pc, #356]	; (800ba1c <pvPortMalloc+0x184>)
 800b8b6:	681a      	ldr	r2, [r3, #0]
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	4013      	ands	r3, r2
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	f040 8093 	bne.w	800b9e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d01d      	beq.n	800b904 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b8c8:	2208      	movs	r2, #8
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	4413      	add	r3, r2
 800b8ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f003 0307 	and.w	r3, r3, #7
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d014      	beq.n	800b904 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	f023 0307 	bic.w	r3, r3, #7
 800b8e0:	3308      	adds	r3, #8
 800b8e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f003 0307 	and.w	r3, r3, #7
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d00a      	beq.n	800b904 <pvPortMalloc+0x6c>
	__asm volatile
 800b8ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f2:	f383 8811 	msr	BASEPRI, r3
 800b8f6:	f3bf 8f6f 	isb	sy
 800b8fa:	f3bf 8f4f 	dsb	sy
 800b8fe:	617b      	str	r3, [r7, #20]
}
 800b900:	bf00      	nop
 800b902:	e7fe      	b.n	800b902 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d06e      	beq.n	800b9e8 <pvPortMalloc+0x150>
 800b90a:	4b45      	ldr	r3, [pc, #276]	; (800ba20 <pvPortMalloc+0x188>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	687a      	ldr	r2, [r7, #4]
 800b910:	429a      	cmp	r2, r3
 800b912:	d869      	bhi.n	800b9e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b914:	4b43      	ldr	r3, [pc, #268]	; (800ba24 <pvPortMalloc+0x18c>)
 800b916:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b918:	4b42      	ldr	r3, [pc, #264]	; (800ba24 <pvPortMalloc+0x18c>)
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b91e:	e004      	b.n	800b92a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b922:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b92c:	685b      	ldr	r3, [r3, #4]
 800b92e:	687a      	ldr	r2, [r7, #4]
 800b930:	429a      	cmp	r2, r3
 800b932:	d903      	bls.n	800b93c <pvPortMalloc+0xa4>
 800b934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d1f1      	bne.n	800b920 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b93c:	4b36      	ldr	r3, [pc, #216]	; (800ba18 <pvPortMalloc+0x180>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b942:	429a      	cmp	r2, r3
 800b944:	d050      	beq.n	800b9e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b946:	6a3b      	ldr	r3, [r7, #32]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	2208      	movs	r2, #8
 800b94c:	4413      	add	r3, r2
 800b94e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b952:	681a      	ldr	r2, [r3, #0]
 800b954:	6a3b      	ldr	r3, [r7, #32]
 800b956:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b95a:	685a      	ldr	r2, [r3, #4]
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	1ad2      	subs	r2, r2, r3
 800b960:	2308      	movs	r3, #8
 800b962:	005b      	lsls	r3, r3, #1
 800b964:	429a      	cmp	r2, r3
 800b966:	d91f      	bls.n	800b9a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	4413      	add	r3, r2
 800b96e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b970:	69bb      	ldr	r3, [r7, #24]
 800b972:	f003 0307 	and.w	r3, r3, #7
 800b976:	2b00      	cmp	r3, #0
 800b978:	d00a      	beq.n	800b990 <pvPortMalloc+0xf8>
	__asm volatile
 800b97a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b97e:	f383 8811 	msr	BASEPRI, r3
 800b982:	f3bf 8f6f 	isb	sy
 800b986:	f3bf 8f4f 	dsb	sy
 800b98a:	613b      	str	r3, [r7, #16]
}
 800b98c:	bf00      	nop
 800b98e:	e7fe      	b.n	800b98e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b992:	685a      	ldr	r2, [r3, #4]
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	1ad2      	subs	r2, r2, r3
 800b998:	69bb      	ldr	r3, [r7, #24]
 800b99a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b99e:	687a      	ldr	r2, [r7, #4]
 800b9a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b9a2:	69b8      	ldr	r0, [r7, #24]
 800b9a4:	f000 f908 	bl	800bbb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b9a8:	4b1d      	ldr	r3, [pc, #116]	; (800ba20 <pvPortMalloc+0x188>)
 800b9aa:	681a      	ldr	r2, [r3, #0]
 800b9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ae:	685b      	ldr	r3, [r3, #4]
 800b9b0:	1ad3      	subs	r3, r2, r3
 800b9b2:	4a1b      	ldr	r2, [pc, #108]	; (800ba20 <pvPortMalloc+0x188>)
 800b9b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b9b6:	4b1a      	ldr	r3, [pc, #104]	; (800ba20 <pvPortMalloc+0x188>)
 800b9b8:	681a      	ldr	r2, [r3, #0]
 800b9ba:	4b1b      	ldr	r3, [pc, #108]	; (800ba28 <pvPortMalloc+0x190>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	429a      	cmp	r2, r3
 800b9c0:	d203      	bcs.n	800b9ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b9c2:	4b17      	ldr	r3, [pc, #92]	; (800ba20 <pvPortMalloc+0x188>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	4a18      	ldr	r2, [pc, #96]	; (800ba28 <pvPortMalloc+0x190>)
 800b9c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9cc:	685a      	ldr	r2, [r3, #4]
 800b9ce:	4b13      	ldr	r3, [pc, #76]	; (800ba1c <pvPortMalloc+0x184>)
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	431a      	orrs	r2, r3
 800b9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9da:	2200      	movs	r2, #0
 800b9dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b9de:	4b13      	ldr	r3, [pc, #76]	; (800ba2c <pvPortMalloc+0x194>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	3301      	adds	r3, #1
 800b9e4:	4a11      	ldr	r2, [pc, #68]	; (800ba2c <pvPortMalloc+0x194>)
 800b9e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b9e8:	f7fe fb40 	bl	800a06c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b9ec:	69fb      	ldr	r3, [r7, #28]
 800b9ee:	f003 0307 	and.w	r3, r3, #7
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d00a      	beq.n	800ba0c <pvPortMalloc+0x174>
	__asm volatile
 800b9f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9fa:	f383 8811 	msr	BASEPRI, r3
 800b9fe:	f3bf 8f6f 	isb	sy
 800ba02:	f3bf 8f4f 	dsb	sy
 800ba06:	60fb      	str	r3, [r7, #12]
}
 800ba08:	bf00      	nop
 800ba0a:	e7fe      	b.n	800ba0a <pvPortMalloc+0x172>
	return pvReturn;
 800ba0c:	69fb      	ldr	r3, [r7, #28]
}
 800ba0e:	4618      	mov	r0, r3
 800ba10:	3728      	adds	r7, #40	; 0x28
 800ba12:	46bd      	mov	sp, r7
 800ba14:	bd80      	pop	{r7, pc}
 800ba16:	bf00      	nop
 800ba18:	20005044 	.word	0x20005044
 800ba1c:	20005058 	.word	0x20005058
 800ba20:	20005048 	.word	0x20005048
 800ba24:	2000503c 	.word	0x2000503c
 800ba28:	2000504c 	.word	0x2000504c
 800ba2c:	20005050 	.word	0x20005050

0800ba30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b086      	sub	sp, #24
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d04d      	beq.n	800bade <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ba42:	2308      	movs	r3, #8
 800ba44:	425b      	negs	r3, r3
 800ba46:	697a      	ldr	r2, [r7, #20]
 800ba48:	4413      	add	r3, r2
 800ba4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ba50:	693b      	ldr	r3, [r7, #16]
 800ba52:	685a      	ldr	r2, [r3, #4]
 800ba54:	4b24      	ldr	r3, [pc, #144]	; (800bae8 <vPortFree+0xb8>)
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	4013      	ands	r3, r2
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d10a      	bne.n	800ba74 <vPortFree+0x44>
	__asm volatile
 800ba5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba62:	f383 8811 	msr	BASEPRI, r3
 800ba66:	f3bf 8f6f 	isb	sy
 800ba6a:	f3bf 8f4f 	dsb	sy
 800ba6e:	60fb      	str	r3, [r7, #12]
}
 800ba70:	bf00      	nop
 800ba72:	e7fe      	b.n	800ba72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ba74:	693b      	ldr	r3, [r7, #16]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d00a      	beq.n	800ba92 <vPortFree+0x62>
	__asm volatile
 800ba7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba80:	f383 8811 	msr	BASEPRI, r3
 800ba84:	f3bf 8f6f 	isb	sy
 800ba88:	f3bf 8f4f 	dsb	sy
 800ba8c:	60bb      	str	r3, [r7, #8]
}
 800ba8e:	bf00      	nop
 800ba90:	e7fe      	b.n	800ba90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	685a      	ldr	r2, [r3, #4]
 800ba96:	4b14      	ldr	r3, [pc, #80]	; (800bae8 <vPortFree+0xb8>)
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	4013      	ands	r3, r2
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d01e      	beq.n	800bade <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800baa0:	693b      	ldr	r3, [r7, #16]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d11a      	bne.n	800bade <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800baa8:	693b      	ldr	r3, [r7, #16]
 800baaa:	685a      	ldr	r2, [r3, #4]
 800baac:	4b0e      	ldr	r3, [pc, #56]	; (800bae8 <vPortFree+0xb8>)
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	43db      	mvns	r3, r3
 800bab2:	401a      	ands	r2, r3
 800bab4:	693b      	ldr	r3, [r7, #16]
 800bab6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bab8:	f7fe faca 	bl	800a050 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800babc:	693b      	ldr	r3, [r7, #16]
 800babe:	685a      	ldr	r2, [r3, #4]
 800bac0:	4b0a      	ldr	r3, [pc, #40]	; (800baec <vPortFree+0xbc>)
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	4413      	add	r3, r2
 800bac6:	4a09      	ldr	r2, [pc, #36]	; (800baec <vPortFree+0xbc>)
 800bac8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800baca:	6938      	ldr	r0, [r7, #16]
 800bacc:	f000 f874 	bl	800bbb8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bad0:	4b07      	ldr	r3, [pc, #28]	; (800baf0 <vPortFree+0xc0>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	3301      	adds	r3, #1
 800bad6:	4a06      	ldr	r2, [pc, #24]	; (800baf0 <vPortFree+0xc0>)
 800bad8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bada:	f7fe fac7 	bl	800a06c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bade:	bf00      	nop
 800bae0:	3718      	adds	r7, #24
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}
 800bae6:	bf00      	nop
 800bae8:	20005058 	.word	0x20005058
 800baec:	20005048 	.word	0x20005048
 800baf0:	20005054 	.word	0x20005054

0800baf4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800baf4:	b480      	push	{r7}
 800baf6:	b085      	sub	sp, #20
 800baf8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bafa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800bafe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bb00:	4b27      	ldr	r3, [pc, #156]	; (800bba0 <prvHeapInit+0xac>)
 800bb02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	f003 0307 	and.w	r3, r3, #7
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d00c      	beq.n	800bb28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	3307      	adds	r3, #7
 800bb12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	f023 0307 	bic.w	r3, r3, #7
 800bb1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bb1c:	68ba      	ldr	r2, [r7, #8]
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	1ad3      	subs	r3, r2, r3
 800bb22:	4a1f      	ldr	r2, [pc, #124]	; (800bba0 <prvHeapInit+0xac>)
 800bb24:	4413      	add	r3, r2
 800bb26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bb2c:	4a1d      	ldr	r2, [pc, #116]	; (800bba4 <prvHeapInit+0xb0>)
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bb32:	4b1c      	ldr	r3, [pc, #112]	; (800bba4 <prvHeapInit+0xb0>)
 800bb34:	2200      	movs	r2, #0
 800bb36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	68ba      	ldr	r2, [r7, #8]
 800bb3c:	4413      	add	r3, r2
 800bb3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bb40:	2208      	movs	r2, #8
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	1a9b      	subs	r3, r3, r2
 800bb46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	f023 0307 	bic.w	r3, r3, #7
 800bb4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	4a15      	ldr	r2, [pc, #84]	; (800bba8 <prvHeapInit+0xb4>)
 800bb54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bb56:	4b14      	ldr	r3, [pc, #80]	; (800bba8 <prvHeapInit+0xb4>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bb5e:	4b12      	ldr	r3, [pc, #72]	; (800bba8 <prvHeapInit+0xb4>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	2200      	movs	r2, #0
 800bb64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	68fa      	ldr	r2, [r7, #12]
 800bb6e:	1ad2      	subs	r2, r2, r3
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bb74:	4b0c      	ldr	r3, [pc, #48]	; (800bba8 <prvHeapInit+0xb4>)
 800bb76:	681a      	ldr	r2, [r3, #0]
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	685b      	ldr	r3, [r3, #4]
 800bb80:	4a0a      	ldr	r2, [pc, #40]	; (800bbac <prvHeapInit+0xb8>)
 800bb82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	685b      	ldr	r3, [r3, #4]
 800bb88:	4a09      	ldr	r2, [pc, #36]	; (800bbb0 <prvHeapInit+0xbc>)
 800bb8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bb8c:	4b09      	ldr	r3, [pc, #36]	; (800bbb4 <prvHeapInit+0xc0>)
 800bb8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bb92:	601a      	str	r2, [r3, #0]
}
 800bb94:	bf00      	nop
 800bb96:	3714      	adds	r7, #20
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9e:	4770      	bx	lr
 800bba0:	2000143c 	.word	0x2000143c
 800bba4:	2000503c 	.word	0x2000503c
 800bba8:	20005044 	.word	0x20005044
 800bbac:	2000504c 	.word	0x2000504c
 800bbb0:	20005048 	.word	0x20005048
 800bbb4:	20005058 	.word	0x20005058

0800bbb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bbb8:	b480      	push	{r7}
 800bbba:	b085      	sub	sp, #20
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bbc0:	4b28      	ldr	r3, [pc, #160]	; (800bc64 <prvInsertBlockIntoFreeList+0xac>)
 800bbc2:	60fb      	str	r3, [r7, #12]
 800bbc4:	e002      	b.n	800bbcc <prvInsertBlockIntoFreeList+0x14>
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	60fb      	str	r3, [r7, #12]
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	687a      	ldr	r2, [r7, #4]
 800bbd2:	429a      	cmp	r2, r3
 800bbd4:	d8f7      	bhi.n	800bbc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	685b      	ldr	r3, [r3, #4]
 800bbde:	68ba      	ldr	r2, [r7, #8]
 800bbe0:	4413      	add	r3, r2
 800bbe2:	687a      	ldr	r2, [r7, #4]
 800bbe4:	429a      	cmp	r2, r3
 800bbe6:	d108      	bne.n	800bbfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	685a      	ldr	r2, [r3, #4]
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	685b      	ldr	r3, [r3, #4]
 800bbf0:	441a      	add	r2, r3
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	685b      	ldr	r3, [r3, #4]
 800bc02:	68ba      	ldr	r2, [r7, #8]
 800bc04:	441a      	add	r2, r3
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	429a      	cmp	r2, r3
 800bc0c:	d118      	bne.n	800bc40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	681a      	ldr	r2, [r3, #0]
 800bc12:	4b15      	ldr	r3, [pc, #84]	; (800bc68 <prvInsertBlockIntoFreeList+0xb0>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	429a      	cmp	r2, r3
 800bc18:	d00d      	beq.n	800bc36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	685a      	ldr	r2, [r3, #4]
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	685b      	ldr	r3, [r3, #4]
 800bc24:	441a      	add	r2, r3
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	681a      	ldr	r2, [r3, #0]
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	601a      	str	r2, [r3, #0]
 800bc34:	e008      	b.n	800bc48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bc36:	4b0c      	ldr	r3, [pc, #48]	; (800bc68 <prvInsertBlockIntoFreeList+0xb0>)
 800bc38:	681a      	ldr	r2, [r3, #0]
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	601a      	str	r2, [r3, #0]
 800bc3e:	e003      	b.n	800bc48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	681a      	ldr	r2, [r3, #0]
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bc48:	68fa      	ldr	r2, [r7, #12]
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	429a      	cmp	r2, r3
 800bc4e:	d002      	beq.n	800bc56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	687a      	ldr	r2, [r7, #4]
 800bc54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bc56:	bf00      	nop
 800bc58:	3714      	adds	r7, #20
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc60:	4770      	bx	lr
 800bc62:	bf00      	nop
 800bc64:	2000503c 	.word	0x2000503c
 800bc68:	20005044 	.word	0x20005044

0800bc6c <__errno>:
 800bc6c:	4b01      	ldr	r3, [pc, #4]	; (800bc74 <__errno+0x8>)
 800bc6e:	6818      	ldr	r0, [r3, #0]
 800bc70:	4770      	bx	lr
 800bc72:	bf00      	nop
 800bc74:	20000038 	.word	0x20000038

0800bc78 <__libc_init_array>:
 800bc78:	b570      	push	{r4, r5, r6, lr}
 800bc7a:	4d0d      	ldr	r5, [pc, #52]	; (800bcb0 <__libc_init_array+0x38>)
 800bc7c:	4c0d      	ldr	r4, [pc, #52]	; (800bcb4 <__libc_init_array+0x3c>)
 800bc7e:	1b64      	subs	r4, r4, r5
 800bc80:	10a4      	asrs	r4, r4, #2
 800bc82:	2600      	movs	r6, #0
 800bc84:	42a6      	cmp	r6, r4
 800bc86:	d109      	bne.n	800bc9c <__libc_init_array+0x24>
 800bc88:	4d0b      	ldr	r5, [pc, #44]	; (800bcb8 <__libc_init_array+0x40>)
 800bc8a:	4c0c      	ldr	r4, [pc, #48]	; (800bcbc <__libc_init_array+0x44>)
 800bc8c:	f001 f97e 	bl	800cf8c <_init>
 800bc90:	1b64      	subs	r4, r4, r5
 800bc92:	10a4      	asrs	r4, r4, #2
 800bc94:	2600      	movs	r6, #0
 800bc96:	42a6      	cmp	r6, r4
 800bc98:	d105      	bne.n	800bca6 <__libc_init_array+0x2e>
 800bc9a:	bd70      	pop	{r4, r5, r6, pc}
 800bc9c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bca0:	4798      	blx	r3
 800bca2:	3601      	adds	r6, #1
 800bca4:	e7ee      	b.n	800bc84 <__libc_init_array+0xc>
 800bca6:	f855 3b04 	ldr.w	r3, [r5], #4
 800bcaa:	4798      	blx	r3
 800bcac:	3601      	adds	r6, #1
 800bcae:	e7f2      	b.n	800bc96 <__libc_init_array+0x1e>
 800bcb0:	0800ddac 	.word	0x0800ddac
 800bcb4:	0800ddac 	.word	0x0800ddac
 800bcb8:	0800ddac 	.word	0x0800ddac
 800bcbc:	0800ddb0 	.word	0x0800ddb0

0800bcc0 <memcpy>:
 800bcc0:	440a      	add	r2, r1
 800bcc2:	4291      	cmp	r1, r2
 800bcc4:	f100 33ff 	add.w	r3, r0, #4294967295
 800bcc8:	d100      	bne.n	800bccc <memcpy+0xc>
 800bcca:	4770      	bx	lr
 800bccc:	b510      	push	{r4, lr}
 800bcce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bcd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bcd6:	4291      	cmp	r1, r2
 800bcd8:	d1f9      	bne.n	800bcce <memcpy+0xe>
 800bcda:	bd10      	pop	{r4, pc}

0800bcdc <memset>:
 800bcdc:	4402      	add	r2, r0
 800bcde:	4603      	mov	r3, r0
 800bce0:	4293      	cmp	r3, r2
 800bce2:	d100      	bne.n	800bce6 <memset+0xa>
 800bce4:	4770      	bx	lr
 800bce6:	f803 1b01 	strb.w	r1, [r3], #1
 800bcea:	e7f9      	b.n	800bce0 <memset+0x4>

0800bcec <sniprintf>:
 800bcec:	b40c      	push	{r2, r3}
 800bcee:	b530      	push	{r4, r5, lr}
 800bcf0:	4b17      	ldr	r3, [pc, #92]	; (800bd50 <sniprintf+0x64>)
 800bcf2:	1e0c      	subs	r4, r1, #0
 800bcf4:	681d      	ldr	r5, [r3, #0]
 800bcf6:	b09d      	sub	sp, #116	; 0x74
 800bcf8:	da08      	bge.n	800bd0c <sniprintf+0x20>
 800bcfa:	238b      	movs	r3, #139	; 0x8b
 800bcfc:	602b      	str	r3, [r5, #0]
 800bcfe:	f04f 30ff 	mov.w	r0, #4294967295
 800bd02:	b01d      	add	sp, #116	; 0x74
 800bd04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bd08:	b002      	add	sp, #8
 800bd0a:	4770      	bx	lr
 800bd0c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800bd10:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bd14:	bf14      	ite	ne
 800bd16:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bd1a:	4623      	moveq	r3, r4
 800bd1c:	9304      	str	r3, [sp, #16]
 800bd1e:	9307      	str	r3, [sp, #28]
 800bd20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bd24:	9002      	str	r0, [sp, #8]
 800bd26:	9006      	str	r0, [sp, #24]
 800bd28:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bd2c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bd2e:	ab21      	add	r3, sp, #132	; 0x84
 800bd30:	a902      	add	r1, sp, #8
 800bd32:	4628      	mov	r0, r5
 800bd34:	9301      	str	r3, [sp, #4]
 800bd36:	f000 f8b7 	bl	800bea8 <_svfiprintf_r>
 800bd3a:	1c43      	adds	r3, r0, #1
 800bd3c:	bfbc      	itt	lt
 800bd3e:	238b      	movlt	r3, #139	; 0x8b
 800bd40:	602b      	strlt	r3, [r5, #0]
 800bd42:	2c00      	cmp	r4, #0
 800bd44:	d0dd      	beq.n	800bd02 <sniprintf+0x16>
 800bd46:	9b02      	ldr	r3, [sp, #8]
 800bd48:	2200      	movs	r2, #0
 800bd4a:	701a      	strb	r2, [r3, #0]
 800bd4c:	e7d9      	b.n	800bd02 <sniprintf+0x16>
 800bd4e:	bf00      	nop
 800bd50:	20000038 	.word	0x20000038

0800bd54 <siprintf>:
 800bd54:	b40e      	push	{r1, r2, r3}
 800bd56:	b500      	push	{lr}
 800bd58:	b09c      	sub	sp, #112	; 0x70
 800bd5a:	ab1d      	add	r3, sp, #116	; 0x74
 800bd5c:	9002      	str	r0, [sp, #8]
 800bd5e:	9006      	str	r0, [sp, #24]
 800bd60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bd64:	4809      	ldr	r0, [pc, #36]	; (800bd8c <siprintf+0x38>)
 800bd66:	9107      	str	r1, [sp, #28]
 800bd68:	9104      	str	r1, [sp, #16]
 800bd6a:	4909      	ldr	r1, [pc, #36]	; (800bd90 <siprintf+0x3c>)
 800bd6c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd70:	9105      	str	r1, [sp, #20]
 800bd72:	6800      	ldr	r0, [r0, #0]
 800bd74:	9301      	str	r3, [sp, #4]
 800bd76:	a902      	add	r1, sp, #8
 800bd78:	f000 f896 	bl	800bea8 <_svfiprintf_r>
 800bd7c:	9b02      	ldr	r3, [sp, #8]
 800bd7e:	2200      	movs	r2, #0
 800bd80:	701a      	strb	r2, [r3, #0]
 800bd82:	b01c      	add	sp, #112	; 0x70
 800bd84:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd88:	b003      	add	sp, #12
 800bd8a:	4770      	bx	lr
 800bd8c:	20000038 	.word	0x20000038
 800bd90:	ffff0208 	.word	0xffff0208

0800bd94 <siscanf>:
 800bd94:	b40e      	push	{r1, r2, r3}
 800bd96:	b510      	push	{r4, lr}
 800bd98:	b09f      	sub	sp, #124	; 0x7c
 800bd9a:	ac21      	add	r4, sp, #132	; 0x84
 800bd9c:	f44f 7101 	mov.w	r1, #516	; 0x204
 800bda0:	f854 2b04 	ldr.w	r2, [r4], #4
 800bda4:	9201      	str	r2, [sp, #4]
 800bda6:	f8ad 101c 	strh.w	r1, [sp, #28]
 800bdaa:	9004      	str	r0, [sp, #16]
 800bdac:	9008      	str	r0, [sp, #32]
 800bdae:	f7f4 fa2f 	bl	8000210 <strlen>
 800bdb2:	4b0c      	ldr	r3, [pc, #48]	; (800bde4 <siscanf+0x50>)
 800bdb4:	9005      	str	r0, [sp, #20]
 800bdb6:	9009      	str	r0, [sp, #36]	; 0x24
 800bdb8:	930d      	str	r3, [sp, #52]	; 0x34
 800bdba:	480b      	ldr	r0, [pc, #44]	; (800bde8 <siscanf+0x54>)
 800bdbc:	9a01      	ldr	r2, [sp, #4]
 800bdbe:	6800      	ldr	r0, [r0, #0]
 800bdc0:	9403      	str	r4, [sp, #12]
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	9311      	str	r3, [sp, #68]	; 0x44
 800bdc6:	9316      	str	r3, [sp, #88]	; 0x58
 800bdc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bdcc:	f8ad 301e 	strh.w	r3, [sp, #30]
 800bdd0:	a904      	add	r1, sp, #16
 800bdd2:	4623      	mov	r3, r4
 800bdd4:	f000 f9c2 	bl	800c15c <__ssvfiscanf_r>
 800bdd8:	b01f      	add	sp, #124	; 0x7c
 800bdda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bdde:	b003      	add	sp, #12
 800bde0:	4770      	bx	lr
 800bde2:	bf00      	nop
 800bde4:	0800bded 	.word	0x0800bded
 800bde8:	20000038 	.word	0x20000038

0800bdec <__seofread>:
 800bdec:	2000      	movs	r0, #0
 800bdee:	4770      	bx	lr

0800bdf0 <__ssputs_r>:
 800bdf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdf4:	688e      	ldr	r6, [r1, #8]
 800bdf6:	429e      	cmp	r6, r3
 800bdf8:	4682      	mov	sl, r0
 800bdfa:	460c      	mov	r4, r1
 800bdfc:	4690      	mov	r8, r2
 800bdfe:	461f      	mov	r7, r3
 800be00:	d838      	bhi.n	800be74 <__ssputs_r+0x84>
 800be02:	898a      	ldrh	r2, [r1, #12]
 800be04:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800be08:	d032      	beq.n	800be70 <__ssputs_r+0x80>
 800be0a:	6825      	ldr	r5, [r4, #0]
 800be0c:	6909      	ldr	r1, [r1, #16]
 800be0e:	eba5 0901 	sub.w	r9, r5, r1
 800be12:	6965      	ldr	r5, [r4, #20]
 800be14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800be18:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800be1c:	3301      	adds	r3, #1
 800be1e:	444b      	add	r3, r9
 800be20:	106d      	asrs	r5, r5, #1
 800be22:	429d      	cmp	r5, r3
 800be24:	bf38      	it	cc
 800be26:	461d      	movcc	r5, r3
 800be28:	0553      	lsls	r3, r2, #21
 800be2a:	d531      	bpl.n	800be90 <__ssputs_r+0xa0>
 800be2c:	4629      	mov	r1, r5
 800be2e:	f000 ffe5 	bl	800cdfc <_malloc_r>
 800be32:	4606      	mov	r6, r0
 800be34:	b950      	cbnz	r0, 800be4c <__ssputs_r+0x5c>
 800be36:	230c      	movs	r3, #12
 800be38:	f8ca 3000 	str.w	r3, [sl]
 800be3c:	89a3      	ldrh	r3, [r4, #12]
 800be3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be42:	81a3      	strh	r3, [r4, #12]
 800be44:	f04f 30ff 	mov.w	r0, #4294967295
 800be48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be4c:	6921      	ldr	r1, [r4, #16]
 800be4e:	464a      	mov	r2, r9
 800be50:	f7ff ff36 	bl	800bcc0 <memcpy>
 800be54:	89a3      	ldrh	r3, [r4, #12]
 800be56:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800be5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be5e:	81a3      	strh	r3, [r4, #12]
 800be60:	6126      	str	r6, [r4, #16]
 800be62:	6165      	str	r5, [r4, #20]
 800be64:	444e      	add	r6, r9
 800be66:	eba5 0509 	sub.w	r5, r5, r9
 800be6a:	6026      	str	r6, [r4, #0]
 800be6c:	60a5      	str	r5, [r4, #8]
 800be6e:	463e      	mov	r6, r7
 800be70:	42be      	cmp	r6, r7
 800be72:	d900      	bls.n	800be76 <__ssputs_r+0x86>
 800be74:	463e      	mov	r6, r7
 800be76:	6820      	ldr	r0, [r4, #0]
 800be78:	4632      	mov	r2, r6
 800be7a:	4641      	mov	r1, r8
 800be7c:	f000 ff38 	bl	800ccf0 <memmove>
 800be80:	68a3      	ldr	r3, [r4, #8]
 800be82:	1b9b      	subs	r3, r3, r6
 800be84:	60a3      	str	r3, [r4, #8]
 800be86:	6823      	ldr	r3, [r4, #0]
 800be88:	4433      	add	r3, r6
 800be8a:	6023      	str	r3, [r4, #0]
 800be8c:	2000      	movs	r0, #0
 800be8e:	e7db      	b.n	800be48 <__ssputs_r+0x58>
 800be90:	462a      	mov	r2, r5
 800be92:	f001 f827 	bl	800cee4 <_realloc_r>
 800be96:	4606      	mov	r6, r0
 800be98:	2800      	cmp	r0, #0
 800be9a:	d1e1      	bne.n	800be60 <__ssputs_r+0x70>
 800be9c:	6921      	ldr	r1, [r4, #16]
 800be9e:	4650      	mov	r0, sl
 800bea0:	f000 ff40 	bl	800cd24 <_free_r>
 800bea4:	e7c7      	b.n	800be36 <__ssputs_r+0x46>
	...

0800bea8 <_svfiprintf_r>:
 800bea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beac:	4698      	mov	r8, r3
 800beae:	898b      	ldrh	r3, [r1, #12]
 800beb0:	061b      	lsls	r3, r3, #24
 800beb2:	b09d      	sub	sp, #116	; 0x74
 800beb4:	4607      	mov	r7, r0
 800beb6:	460d      	mov	r5, r1
 800beb8:	4614      	mov	r4, r2
 800beba:	d50e      	bpl.n	800beda <_svfiprintf_r+0x32>
 800bebc:	690b      	ldr	r3, [r1, #16]
 800bebe:	b963      	cbnz	r3, 800beda <_svfiprintf_r+0x32>
 800bec0:	2140      	movs	r1, #64	; 0x40
 800bec2:	f000 ff9b 	bl	800cdfc <_malloc_r>
 800bec6:	6028      	str	r0, [r5, #0]
 800bec8:	6128      	str	r0, [r5, #16]
 800beca:	b920      	cbnz	r0, 800bed6 <_svfiprintf_r+0x2e>
 800becc:	230c      	movs	r3, #12
 800bece:	603b      	str	r3, [r7, #0]
 800bed0:	f04f 30ff 	mov.w	r0, #4294967295
 800bed4:	e0d1      	b.n	800c07a <_svfiprintf_r+0x1d2>
 800bed6:	2340      	movs	r3, #64	; 0x40
 800bed8:	616b      	str	r3, [r5, #20]
 800beda:	2300      	movs	r3, #0
 800bedc:	9309      	str	r3, [sp, #36]	; 0x24
 800bede:	2320      	movs	r3, #32
 800bee0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bee4:	f8cd 800c 	str.w	r8, [sp, #12]
 800bee8:	2330      	movs	r3, #48	; 0x30
 800beea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c094 <_svfiprintf_r+0x1ec>
 800beee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bef2:	f04f 0901 	mov.w	r9, #1
 800bef6:	4623      	mov	r3, r4
 800bef8:	469a      	mov	sl, r3
 800befa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800befe:	b10a      	cbz	r2, 800bf04 <_svfiprintf_r+0x5c>
 800bf00:	2a25      	cmp	r2, #37	; 0x25
 800bf02:	d1f9      	bne.n	800bef8 <_svfiprintf_r+0x50>
 800bf04:	ebba 0b04 	subs.w	fp, sl, r4
 800bf08:	d00b      	beq.n	800bf22 <_svfiprintf_r+0x7a>
 800bf0a:	465b      	mov	r3, fp
 800bf0c:	4622      	mov	r2, r4
 800bf0e:	4629      	mov	r1, r5
 800bf10:	4638      	mov	r0, r7
 800bf12:	f7ff ff6d 	bl	800bdf0 <__ssputs_r>
 800bf16:	3001      	adds	r0, #1
 800bf18:	f000 80aa 	beq.w	800c070 <_svfiprintf_r+0x1c8>
 800bf1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf1e:	445a      	add	r2, fp
 800bf20:	9209      	str	r2, [sp, #36]	; 0x24
 800bf22:	f89a 3000 	ldrb.w	r3, [sl]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	f000 80a2 	beq.w	800c070 <_svfiprintf_r+0x1c8>
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	f04f 32ff 	mov.w	r2, #4294967295
 800bf32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf36:	f10a 0a01 	add.w	sl, sl, #1
 800bf3a:	9304      	str	r3, [sp, #16]
 800bf3c:	9307      	str	r3, [sp, #28]
 800bf3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bf42:	931a      	str	r3, [sp, #104]	; 0x68
 800bf44:	4654      	mov	r4, sl
 800bf46:	2205      	movs	r2, #5
 800bf48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf4c:	4851      	ldr	r0, [pc, #324]	; (800c094 <_svfiprintf_r+0x1ec>)
 800bf4e:	f7f4 f967 	bl	8000220 <memchr>
 800bf52:	9a04      	ldr	r2, [sp, #16]
 800bf54:	b9d8      	cbnz	r0, 800bf8e <_svfiprintf_r+0xe6>
 800bf56:	06d0      	lsls	r0, r2, #27
 800bf58:	bf44      	itt	mi
 800bf5a:	2320      	movmi	r3, #32
 800bf5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf60:	0711      	lsls	r1, r2, #28
 800bf62:	bf44      	itt	mi
 800bf64:	232b      	movmi	r3, #43	; 0x2b
 800bf66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf6a:	f89a 3000 	ldrb.w	r3, [sl]
 800bf6e:	2b2a      	cmp	r3, #42	; 0x2a
 800bf70:	d015      	beq.n	800bf9e <_svfiprintf_r+0xf6>
 800bf72:	9a07      	ldr	r2, [sp, #28]
 800bf74:	4654      	mov	r4, sl
 800bf76:	2000      	movs	r0, #0
 800bf78:	f04f 0c0a 	mov.w	ip, #10
 800bf7c:	4621      	mov	r1, r4
 800bf7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf82:	3b30      	subs	r3, #48	; 0x30
 800bf84:	2b09      	cmp	r3, #9
 800bf86:	d94e      	bls.n	800c026 <_svfiprintf_r+0x17e>
 800bf88:	b1b0      	cbz	r0, 800bfb8 <_svfiprintf_r+0x110>
 800bf8a:	9207      	str	r2, [sp, #28]
 800bf8c:	e014      	b.n	800bfb8 <_svfiprintf_r+0x110>
 800bf8e:	eba0 0308 	sub.w	r3, r0, r8
 800bf92:	fa09 f303 	lsl.w	r3, r9, r3
 800bf96:	4313      	orrs	r3, r2
 800bf98:	9304      	str	r3, [sp, #16]
 800bf9a:	46a2      	mov	sl, r4
 800bf9c:	e7d2      	b.n	800bf44 <_svfiprintf_r+0x9c>
 800bf9e:	9b03      	ldr	r3, [sp, #12]
 800bfa0:	1d19      	adds	r1, r3, #4
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	9103      	str	r1, [sp, #12]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	bfbb      	ittet	lt
 800bfaa:	425b      	neglt	r3, r3
 800bfac:	f042 0202 	orrlt.w	r2, r2, #2
 800bfb0:	9307      	strge	r3, [sp, #28]
 800bfb2:	9307      	strlt	r3, [sp, #28]
 800bfb4:	bfb8      	it	lt
 800bfb6:	9204      	strlt	r2, [sp, #16]
 800bfb8:	7823      	ldrb	r3, [r4, #0]
 800bfba:	2b2e      	cmp	r3, #46	; 0x2e
 800bfbc:	d10c      	bne.n	800bfd8 <_svfiprintf_r+0x130>
 800bfbe:	7863      	ldrb	r3, [r4, #1]
 800bfc0:	2b2a      	cmp	r3, #42	; 0x2a
 800bfc2:	d135      	bne.n	800c030 <_svfiprintf_r+0x188>
 800bfc4:	9b03      	ldr	r3, [sp, #12]
 800bfc6:	1d1a      	adds	r2, r3, #4
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	9203      	str	r2, [sp, #12]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	bfb8      	it	lt
 800bfd0:	f04f 33ff 	movlt.w	r3, #4294967295
 800bfd4:	3402      	adds	r4, #2
 800bfd6:	9305      	str	r3, [sp, #20]
 800bfd8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c0a4 <_svfiprintf_r+0x1fc>
 800bfdc:	7821      	ldrb	r1, [r4, #0]
 800bfde:	2203      	movs	r2, #3
 800bfe0:	4650      	mov	r0, sl
 800bfe2:	f7f4 f91d 	bl	8000220 <memchr>
 800bfe6:	b140      	cbz	r0, 800bffa <_svfiprintf_r+0x152>
 800bfe8:	2340      	movs	r3, #64	; 0x40
 800bfea:	eba0 000a 	sub.w	r0, r0, sl
 800bfee:	fa03 f000 	lsl.w	r0, r3, r0
 800bff2:	9b04      	ldr	r3, [sp, #16]
 800bff4:	4303      	orrs	r3, r0
 800bff6:	3401      	adds	r4, #1
 800bff8:	9304      	str	r3, [sp, #16]
 800bffa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bffe:	4826      	ldr	r0, [pc, #152]	; (800c098 <_svfiprintf_r+0x1f0>)
 800c000:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c004:	2206      	movs	r2, #6
 800c006:	f7f4 f90b 	bl	8000220 <memchr>
 800c00a:	2800      	cmp	r0, #0
 800c00c:	d038      	beq.n	800c080 <_svfiprintf_r+0x1d8>
 800c00e:	4b23      	ldr	r3, [pc, #140]	; (800c09c <_svfiprintf_r+0x1f4>)
 800c010:	bb1b      	cbnz	r3, 800c05a <_svfiprintf_r+0x1b2>
 800c012:	9b03      	ldr	r3, [sp, #12]
 800c014:	3307      	adds	r3, #7
 800c016:	f023 0307 	bic.w	r3, r3, #7
 800c01a:	3308      	adds	r3, #8
 800c01c:	9303      	str	r3, [sp, #12]
 800c01e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c020:	4433      	add	r3, r6
 800c022:	9309      	str	r3, [sp, #36]	; 0x24
 800c024:	e767      	b.n	800bef6 <_svfiprintf_r+0x4e>
 800c026:	fb0c 3202 	mla	r2, ip, r2, r3
 800c02a:	460c      	mov	r4, r1
 800c02c:	2001      	movs	r0, #1
 800c02e:	e7a5      	b.n	800bf7c <_svfiprintf_r+0xd4>
 800c030:	2300      	movs	r3, #0
 800c032:	3401      	adds	r4, #1
 800c034:	9305      	str	r3, [sp, #20]
 800c036:	4619      	mov	r1, r3
 800c038:	f04f 0c0a 	mov.w	ip, #10
 800c03c:	4620      	mov	r0, r4
 800c03e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c042:	3a30      	subs	r2, #48	; 0x30
 800c044:	2a09      	cmp	r2, #9
 800c046:	d903      	bls.n	800c050 <_svfiprintf_r+0x1a8>
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d0c5      	beq.n	800bfd8 <_svfiprintf_r+0x130>
 800c04c:	9105      	str	r1, [sp, #20]
 800c04e:	e7c3      	b.n	800bfd8 <_svfiprintf_r+0x130>
 800c050:	fb0c 2101 	mla	r1, ip, r1, r2
 800c054:	4604      	mov	r4, r0
 800c056:	2301      	movs	r3, #1
 800c058:	e7f0      	b.n	800c03c <_svfiprintf_r+0x194>
 800c05a:	ab03      	add	r3, sp, #12
 800c05c:	9300      	str	r3, [sp, #0]
 800c05e:	462a      	mov	r2, r5
 800c060:	4b0f      	ldr	r3, [pc, #60]	; (800c0a0 <_svfiprintf_r+0x1f8>)
 800c062:	a904      	add	r1, sp, #16
 800c064:	4638      	mov	r0, r7
 800c066:	f3af 8000 	nop.w
 800c06a:	1c42      	adds	r2, r0, #1
 800c06c:	4606      	mov	r6, r0
 800c06e:	d1d6      	bne.n	800c01e <_svfiprintf_r+0x176>
 800c070:	89ab      	ldrh	r3, [r5, #12]
 800c072:	065b      	lsls	r3, r3, #25
 800c074:	f53f af2c 	bmi.w	800bed0 <_svfiprintf_r+0x28>
 800c078:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c07a:	b01d      	add	sp, #116	; 0x74
 800c07c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c080:	ab03      	add	r3, sp, #12
 800c082:	9300      	str	r3, [sp, #0]
 800c084:	462a      	mov	r2, r5
 800c086:	4b06      	ldr	r3, [pc, #24]	; (800c0a0 <_svfiprintf_r+0x1f8>)
 800c088:	a904      	add	r1, sp, #16
 800c08a:	4638      	mov	r0, r7
 800c08c:	f000 fa4c 	bl	800c528 <_printf_i>
 800c090:	e7eb      	b.n	800c06a <_svfiprintf_r+0x1c2>
 800c092:	bf00      	nop
 800c094:	0800dbf4 	.word	0x0800dbf4
 800c098:	0800dbfe 	.word	0x0800dbfe
 800c09c:	00000000 	.word	0x00000000
 800c0a0:	0800bdf1 	.word	0x0800bdf1
 800c0a4:	0800dbfa 	.word	0x0800dbfa

0800c0a8 <_sungetc_r>:
 800c0a8:	b538      	push	{r3, r4, r5, lr}
 800c0aa:	1c4b      	adds	r3, r1, #1
 800c0ac:	4614      	mov	r4, r2
 800c0ae:	d103      	bne.n	800c0b8 <_sungetc_r+0x10>
 800c0b0:	f04f 35ff 	mov.w	r5, #4294967295
 800c0b4:	4628      	mov	r0, r5
 800c0b6:	bd38      	pop	{r3, r4, r5, pc}
 800c0b8:	8993      	ldrh	r3, [r2, #12]
 800c0ba:	f023 0320 	bic.w	r3, r3, #32
 800c0be:	8193      	strh	r3, [r2, #12]
 800c0c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c0c2:	6852      	ldr	r2, [r2, #4]
 800c0c4:	b2cd      	uxtb	r5, r1
 800c0c6:	b18b      	cbz	r3, 800c0ec <_sungetc_r+0x44>
 800c0c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c0ca:	4293      	cmp	r3, r2
 800c0cc:	dd08      	ble.n	800c0e0 <_sungetc_r+0x38>
 800c0ce:	6823      	ldr	r3, [r4, #0]
 800c0d0:	1e5a      	subs	r2, r3, #1
 800c0d2:	6022      	str	r2, [r4, #0]
 800c0d4:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c0d8:	6863      	ldr	r3, [r4, #4]
 800c0da:	3301      	adds	r3, #1
 800c0dc:	6063      	str	r3, [r4, #4]
 800c0de:	e7e9      	b.n	800c0b4 <_sungetc_r+0xc>
 800c0e0:	4621      	mov	r1, r4
 800c0e2:	f000 fdc9 	bl	800cc78 <__submore>
 800c0e6:	2800      	cmp	r0, #0
 800c0e8:	d0f1      	beq.n	800c0ce <_sungetc_r+0x26>
 800c0ea:	e7e1      	b.n	800c0b0 <_sungetc_r+0x8>
 800c0ec:	6921      	ldr	r1, [r4, #16]
 800c0ee:	6823      	ldr	r3, [r4, #0]
 800c0f0:	b151      	cbz	r1, 800c108 <_sungetc_r+0x60>
 800c0f2:	4299      	cmp	r1, r3
 800c0f4:	d208      	bcs.n	800c108 <_sungetc_r+0x60>
 800c0f6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800c0fa:	42a9      	cmp	r1, r5
 800c0fc:	d104      	bne.n	800c108 <_sungetc_r+0x60>
 800c0fe:	3b01      	subs	r3, #1
 800c100:	3201      	adds	r2, #1
 800c102:	6023      	str	r3, [r4, #0]
 800c104:	6062      	str	r2, [r4, #4]
 800c106:	e7d5      	b.n	800c0b4 <_sungetc_r+0xc>
 800c108:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800c10c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c110:	6363      	str	r3, [r4, #52]	; 0x34
 800c112:	2303      	movs	r3, #3
 800c114:	63a3      	str	r3, [r4, #56]	; 0x38
 800c116:	4623      	mov	r3, r4
 800c118:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c11c:	6023      	str	r3, [r4, #0]
 800c11e:	2301      	movs	r3, #1
 800c120:	e7dc      	b.n	800c0dc <_sungetc_r+0x34>

0800c122 <__ssrefill_r>:
 800c122:	b510      	push	{r4, lr}
 800c124:	460c      	mov	r4, r1
 800c126:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c128:	b169      	cbz	r1, 800c146 <__ssrefill_r+0x24>
 800c12a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c12e:	4299      	cmp	r1, r3
 800c130:	d001      	beq.n	800c136 <__ssrefill_r+0x14>
 800c132:	f000 fdf7 	bl	800cd24 <_free_r>
 800c136:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c138:	6063      	str	r3, [r4, #4]
 800c13a:	2000      	movs	r0, #0
 800c13c:	6360      	str	r0, [r4, #52]	; 0x34
 800c13e:	b113      	cbz	r3, 800c146 <__ssrefill_r+0x24>
 800c140:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c142:	6023      	str	r3, [r4, #0]
 800c144:	bd10      	pop	{r4, pc}
 800c146:	6923      	ldr	r3, [r4, #16]
 800c148:	6023      	str	r3, [r4, #0]
 800c14a:	2300      	movs	r3, #0
 800c14c:	6063      	str	r3, [r4, #4]
 800c14e:	89a3      	ldrh	r3, [r4, #12]
 800c150:	f043 0320 	orr.w	r3, r3, #32
 800c154:	81a3      	strh	r3, [r4, #12]
 800c156:	f04f 30ff 	mov.w	r0, #4294967295
 800c15a:	e7f3      	b.n	800c144 <__ssrefill_r+0x22>

0800c15c <__ssvfiscanf_r>:
 800c15c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c160:	460c      	mov	r4, r1
 800c162:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800c166:	2100      	movs	r1, #0
 800c168:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800c16c:	49a6      	ldr	r1, [pc, #664]	; (800c408 <__ssvfiscanf_r+0x2ac>)
 800c16e:	91a0      	str	r1, [sp, #640]	; 0x280
 800c170:	f10d 0804 	add.w	r8, sp, #4
 800c174:	49a5      	ldr	r1, [pc, #660]	; (800c40c <__ssvfiscanf_r+0x2b0>)
 800c176:	4fa6      	ldr	r7, [pc, #664]	; (800c410 <__ssvfiscanf_r+0x2b4>)
 800c178:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800c414 <__ssvfiscanf_r+0x2b8>
 800c17c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800c180:	4606      	mov	r6, r0
 800c182:	91a1      	str	r1, [sp, #644]	; 0x284
 800c184:	9300      	str	r3, [sp, #0]
 800c186:	7813      	ldrb	r3, [r2, #0]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	f000 815a 	beq.w	800c442 <__ssvfiscanf_r+0x2e6>
 800c18e:	5dd9      	ldrb	r1, [r3, r7]
 800c190:	f011 0108 	ands.w	r1, r1, #8
 800c194:	f102 0501 	add.w	r5, r2, #1
 800c198:	d019      	beq.n	800c1ce <__ssvfiscanf_r+0x72>
 800c19a:	6863      	ldr	r3, [r4, #4]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	dd0f      	ble.n	800c1c0 <__ssvfiscanf_r+0x64>
 800c1a0:	6823      	ldr	r3, [r4, #0]
 800c1a2:	781a      	ldrb	r2, [r3, #0]
 800c1a4:	5cba      	ldrb	r2, [r7, r2]
 800c1a6:	0712      	lsls	r2, r2, #28
 800c1a8:	d401      	bmi.n	800c1ae <__ssvfiscanf_r+0x52>
 800c1aa:	462a      	mov	r2, r5
 800c1ac:	e7eb      	b.n	800c186 <__ssvfiscanf_r+0x2a>
 800c1ae:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c1b0:	3201      	adds	r2, #1
 800c1b2:	9245      	str	r2, [sp, #276]	; 0x114
 800c1b4:	6862      	ldr	r2, [r4, #4]
 800c1b6:	3301      	adds	r3, #1
 800c1b8:	3a01      	subs	r2, #1
 800c1ba:	6062      	str	r2, [r4, #4]
 800c1bc:	6023      	str	r3, [r4, #0]
 800c1be:	e7ec      	b.n	800c19a <__ssvfiscanf_r+0x3e>
 800c1c0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c1c2:	4621      	mov	r1, r4
 800c1c4:	4630      	mov	r0, r6
 800c1c6:	4798      	blx	r3
 800c1c8:	2800      	cmp	r0, #0
 800c1ca:	d0e9      	beq.n	800c1a0 <__ssvfiscanf_r+0x44>
 800c1cc:	e7ed      	b.n	800c1aa <__ssvfiscanf_r+0x4e>
 800c1ce:	2b25      	cmp	r3, #37	; 0x25
 800c1d0:	d012      	beq.n	800c1f8 <__ssvfiscanf_r+0x9c>
 800c1d2:	469a      	mov	sl, r3
 800c1d4:	6863      	ldr	r3, [r4, #4]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	f340 8091 	ble.w	800c2fe <__ssvfiscanf_r+0x1a2>
 800c1dc:	6822      	ldr	r2, [r4, #0]
 800c1de:	7813      	ldrb	r3, [r2, #0]
 800c1e0:	4553      	cmp	r3, sl
 800c1e2:	f040 812e 	bne.w	800c442 <__ssvfiscanf_r+0x2e6>
 800c1e6:	6863      	ldr	r3, [r4, #4]
 800c1e8:	3b01      	subs	r3, #1
 800c1ea:	6063      	str	r3, [r4, #4]
 800c1ec:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c1ee:	3201      	adds	r2, #1
 800c1f0:	3301      	adds	r3, #1
 800c1f2:	6022      	str	r2, [r4, #0]
 800c1f4:	9345      	str	r3, [sp, #276]	; 0x114
 800c1f6:	e7d8      	b.n	800c1aa <__ssvfiscanf_r+0x4e>
 800c1f8:	9141      	str	r1, [sp, #260]	; 0x104
 800c1fa:	9143      	str	r1, [sp, #268]	; 0x10c
 800c1fc:	7853      	ldrb	r3, [r2, #1]
 800c1fe:	2b2a      	cmp	r3, #42	; 0x2a
 800c200:	bf02      	ittt	eq
 800c202:	2310      	moveq	r3, #16
 800c204:	1c95      	addeq	r5, r2, #2
 800c206:	9341      	streq	r3, [sp, #260]	; 0x104
 800c208:	220a      	movs	r2, #10
 800c20a:	46aa      	mov	sl, r5
 800c20c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800c210:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800c214:	2b09      	cmp	r3, #9
 800c216:	d91d      	bls.n	800c254 <__ssvfiscanf_r+0xf8>
 800c218:	487e      	ldr	r0, [pc, #504]	; (800c414 <__ssvfiscanf_r+0x2b8>)
 800c21a:	2203      	movs	r2, #3
 800c21c:	f7f4 f800 	bl	8000220 <memchr>
 800c220:	b140      	cbz	r0, 800c234 <__ssvfiscanf_r+0xd8>
 800c222:	2301      	movs	r3, #1
 800c224:	eba0 0009 	sub.w	r0, r0, r9
 800c228:	fa03 f000 	lsl.w	r0, r3, r0
 800c22c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c22e:	4318      	orrs	r0, r3
 800c230:	9041      	str	r0, [sp, #260]	; 0x104
 800c232:	4655      	mov	r5, sl
 800c234:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c238:	2b78      	cmp	r3, #120	; 0x78
 800c23a:	d806      	bhi.n	800c24a <__ssvfiscanf_r+0xee>
 800c23c:	2b57      	cmp	r3, #87	; 0x57
 800c23e:	d810      	bhi.n	800c262 <__ssvfiscanf_r+0x106>
 800c240:	2b25      	cmp	r3, #37	; 0x25
 800c242:	d0c6      	beq.n	800c1d2 <__ssvfiscanf_r+0x76>
 800c244:	d856      	bhi.n	800c2f4 <__ssvfiscanf_r+0x198>
 800c246:	2b00      	cmp	r3, #0
 800c248:	d064      	beq.n	800c314 <__ssvfiscanf_r+0x1b8>
 800c24a:	2303      	movs	r3, #3
 800c24c:	9347      	str	r3, [sp, #284]	; 0x11c
 800c24e:	230a      	movs	r3, #10
 800c250:	9342      	str	r3, [sp, #264]	; 0x108
 800c252:	e071      	b.n	800c338 <__ssvfiscanf_r+0x1dc>
 800c254:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c256:	fb02 1103 	mla	r1, r2, r3, r1
 800c25a:	3930      	subs	r1, #48	; 0x30
 800c25c:	9143      	str	r1, [sp, #268]	; 0x10c
 800c25e:	4655      	mov	r5, sl
 800c260:	e7d3      	b.n	800c20a <__ssvfiscanf_r+0xae>
 800c262:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800c266:	2a20      	cmp	r2, #32
 800c268:	d8ef      	bhi.n	800c24a <__ssvfiscanf_r+0xee>
 800c26a:	a101      	add	r1, pc, #4	; (adr r1, 800c270 <__ssvfiscanf_r+0x114>)
 800c26c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c270:	0800c323 	.word	0x0800c323
 800c274:	0800c24b 	.word	0x0800c24b
 800c278:	0800c24b 	.word	0x0800c24b
 800c27c:	0800c381 	.word	0x0800c381
 800c280:	0800c24b 	.word	0x0800c24b
 800c284:	0800c24b 	.word	0x0800c24b
 800c288:	0800c24b 	.word	0x0800c24b
 800c28c:	0800c24b 	.word	0x0800c24b
 800c290:	0800c24b 	.word	0x0800c24b
 800c294:	0800c24b 	.word	0x0800c24b
 800c298:	0800c24b 	.word	0x0800c24b
 800c29c:	0800c397 	.word	0x0800c397
 800c2a0:	0800c36d 	.word	0x0800c36d
 800c2a4:	0800c2fb 	.word	0x0800c2fb
 800c2a8:	0800c2fb 	.word	0x0800c2fb
 800c2ac:	0800c2fb 	.word	0x0800c2fb
 800c2b0:	0800c24b 	.word	0x0800c24b
 800c2b4:	0800c371 	.word	0x0800c371
 800c2b8:	0800c24b 	.word	0x0800c24b
 800c2bc:	0800c24b 	.word	0x0800c24b
 800c2c0:	0800c24b 	.word	0x0800c24b
 800c2c4:	0800c24b 	.word	0x0800c24b
 800c2c8:	0800c3a7 	.word	0x0800c3a7
 800c2cc:	0800c379 	.word	0x0800c379
 800c2d0:	0800c31b 	.word	0x0800c31b
 800c2d4:	0800c24b 	.word	0x0800c24b
 800c2d8:	0800c24b 	.word	0x0800c24b
 800c2dc:	0800c3a3 	.word	0x0800c3a3
 800c2e0:	0800c24b 	.word	0x0800c24b
 800c2e4:	0800c36d 	.word	0x0800c36d
 800c2e8:	0800c24b 	.word	0x0800c24b
 800c2ec:	0800c24b 	.word	0x0800c24b
 800c2f0:	0800c323 	.word	0x0800c323
 800c2f4:	3b45      	subs	r3, #69	; 0x45
 800c2f6:	2b02      	cmp	r3, #2
 800c2f8:	d8a7      	bhi.n	800c24a <__ssvfiscanf_r+0xee>
 800c2fa:	2305      	movs	r3, #5
 800c2fc:	e01b      	b.n	800c336 <__ssvfiscanf_r+0x1da>
 800c2fe:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c300:	4621      	mov	r1, r4
 800c302:	4630      	mov	r0, r6
 800c304:	4798      	blx	r3
 800c306:	2800      	cmp	r0, #0
 800c308:	f43f af68 	beq.w	800c1dc <__ssvfiscanf_r+0x80>
 800c30c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c30e:	2800      	cmp	r0, #0
 800c310:	f040 808d 	bne.w	800c42e <__ssvfiscanf_r+0x2d2>
 800c314:	f04f 30ff 	mov.w	r0, #4294967295
 800c318:	e08f      	b.n	800c43a <__ssvfiscanf_r+0x2de>
 800c31a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c31c:	f042 0220 	orr.w	r2, r2, #32
 800c320:	9241      	str	r2, [sp, #260]	; 0x104
 800c322:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c324:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c328:	9241      	str	r2, [sp, #260]	; 0x104
 800c32a:	2210      	movs	r2, #16
 800c32c:	2b6f      	cmp	r3, #111	; 0x6f
 800c32e:	9242      	str	r2, [sp, #264]	; 0x108
 800c330:	bf34      	ite	cc
 800c332:	2303      	movcc	r3, #3
 800c334:	2304      	movcs	r3, #4
 800c336:	9347      	str	r3, [sp, #284]	; 0x11c
 800c338:	6863      	ldr	r3, [r4, #4]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	dd42      	ble.n	800c3c4 <__ssvfiscanf_r+0x268>
 800c33e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c340:	0659      	lsls	r1, r3, #25
 800c342:	d404      	bmi.n	800c34e <__ssvfiscanf_r+0x1f2>
 800c344:	6823      	ldr	r3, [r4, #0]
 800c346:	781a      	ldrb	r2, [r3, #0]
 800c348:	5cba      	ldrb	r2, [r7, r2]
 800c34a:	0712      	lsls	r2, r2, #28
 800c34c:	d441      	bmi.n	800c3d2 <__ssvfiscanf_r+0x276>
 800c34e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800c350:	2b02      	cmp	r3, #2
 800c352:	dc50      	bgt.n	800c3f6 <__ssvfiscanf_r+0x29a>
 800c354:	466b      	mov	r3, sp
 800c356:	4622      	mov	r2, r4
 800c358:	a941      	add	r1, sp, #260	; 0x104
 800c35a:	4630      	mov	r0, r6
 800c35c:	f000 fa0a 	bl	800c774 <_scanf_chars>
 800c360:	2801      	cmp	r0, #1
 800c362:	d06e      	beq.n	800c442 <__ssvfiscanf_r+0x2e6>
 800c364:	2802      	cmp	r0, #2
 800c366:	f47f af20 	bne.w	800c1aa <__ssvfiscanf_r+0x4e>
 800c36a:	e7cf      	b.n	800c30c <__ssvfiscanf_r+0x1b0>
 800c36c:	220a      	movs	r2, #10
 800c36e:	e7dd      	b.n	800c32c <__ssvfiscanf_r+0x1d0>
 800c370:	2300      	movs	r3, #0
 800c372:	9342      	str	r3, [sp, #264]	; 0x108
 800c374:	2303      	movs	r3, #3
 800c376:	e7de      	b.n	800c336 <__ssvfiscanf_r+0x1da>
 800c378:	2308      	movs	r3, #8
 800c37a:	9342      	str	r3, [sp, #264]	; 0x108
 800c37c:	2304      	movs	r3, #4
 800c37e:	e7da      	b.n	800c336 <__ssvfiscanf_r+0x1da>
 800c380:	4629      	mov	r1, r5
 800c382:	4640      	mov	r0, r8
 800c384:	f000 fb48 	bl	800ca18 <__sccl>
 800c388:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c38a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c38e:	9341      	str	r3, [sp, #260]	; 0x104
 800c390:	4605      	mov	r5, r0
 800c392:	2301      	movs	r3, #1
 800c394:	e7cf      	b.n	800c336 <__ssvfiscanf_r+0x1da>
 800c396:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c398:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c39c:	9341      	str	r3, [sp, #260]	; 0x104
 800c39e:	2300      	movs	r3, #0
 800c3a0:	e7c9      	b.n	800c336 <__ssvfiscanf_r+0x1da>
 800c3a2:	2302      	movs	r3, #2
 800c3a4:	e7c7      	b.n	800c336 <__ssvfiscanf_r+0x1da>
 800c3a6:	9841      	ldr	r0, [sp, #260]	; 0x104
 800c3a8:	06c3      	lsls	r3, r0, #27
 800c3aa:	f53f aefe 	bmi.w	800c1aa <__ssvfiscanf_r+0x4e>
 800c3ae:	9b00      	ldr	r3, [sp, #0]
 800c3b0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c3b2:	1d19      	adds	r1, r3, #4
 800c3b4:	9100      	str	r1, [sp, #0]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	f010 0f01 	tst.w	r0, #1
 800c3bc:	bf14      	ite	ne
 800c3be:	801a      	strhne	r2, [r3, #0]
 800c3c0:	601a      	streq	r2, [r3, #0]
 800c3c2:	e6f2      	b.n	800c1aa <__ssvfiscanf_r+0x4e>
 800c3c4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c3c6:	4621      	mov	r1, r4
 800c3c8:	4630      	mov	r0, r6
 800c3ca:	4798      	blx	r3
 800c3cc:	2800      	cmp	r0, #0
 800c3ce:	d0b6      	beq.n	800c33e <__ssvfiscanf_r+0x1e2>
 800c3d0:	e79c      	b.n	800c30c <__ssvfiscanf_r+0x1b0>
 800c3d2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c3d4:	3201      	adds	r2, #1
 800c3d6:	9245      	str	r2, [sp, #276]	; 0x114
 800c3d8:	6862      	ldr	r2, [r4, #4]
 800c3da:	3a01      	subs	r2, #1
 800c3dc:	2a00      	cmp	r2, #0
 800c3de:	6062      	str	r2, [r4, #4]
 800c3e0:	dd02      	ble.n	800c3e8 <__ssvfiscanf_r+0x28c>
 800c3e2:	3301      	adds	r3, #1
 800c3e4:	6023      	str	r3, [r4, #0]
 800c3e6:	e7ad      	b.n	800c344 <__ssvfiscanf_r+0x1e8>
 800c3e8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c3ea:	4621      	mov	r1, r4
 800c3ec:	4630      	mov	r0, r6
 800c3ee:	4798      	blx	r3
 800c3f0:	2800      	cmp	r0, #0
 800c3f2:	d0a7      	beq.n	800c344 <__ssvfiscanf_r+0x1e8>
 800c3f4:	e78a      	b.n	800c30c <__ssvfiscanf_r+0x1b0>
 800c3f6:	2b04      	cmp	r3, #4
 800c3f8:	dc0e      	bgt.n	800c418 <__ssvfiscanf_r+0x2bc>
 800c3fa:	466b      	mov	r3, sp
 800c3fc:	4622      	mov	r2, r4
 800c3fe:	a941      	add	r1, sp, #260	; 0x104
 800c400:	4630      	mov	r0, r6
 800c402:	f000 fa11 	bl	800c828 <_scanf_i>
 800c406:	e7ab      	b.n	800c360 <__ssvfiscanf_r+0x204>
 800c408:	0800c0a9 	.word	0x0800c0a9
 800c40c:	0800c123 	.word	0x0800c123
 800c410:	0800dc43 	.word	0x0800dc43
 800c414:	0800dbfa 	.word	0x0800dbfa
 800c418:	4b0b      	ldr	r3, [pc, #44]	; (800c448 <__ssvfiscanf_r+0x2ec>)
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	f43f aec5 	beq.w	800c1aa <__ssvfiscanf_r+0x4e>
 800c420:	466b      	mov	r3, sp
 800c422:	4622      	mov	r2, r4
 800c424:	a941      	add	r1, sp, #260	; 0x104
 800c426:	4630      	mov	r0, r6
 800c428:	f3af 8000 	nop.w
 800c42c:	e798      	b.n	800c360 <__ssvfiscanf_r+0x204>
 800c42e:	89a3      	ldrh	r3, [r4, #12]
 800c430:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c434:	bf18      	it	ne
 800c436:	f04f 30ff 	movne.w	r0, #4294967295
 800c43a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800c43e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c442:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c444:	e7f9      	b.n	800c43a <__ssvfiscanf_r+0x2de>
 800c446:	bf00      	nop
 800c448:	00000000 	.word	0x00000000

0800c44c <_printf_common>:
 800c44c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c450:	4616      	mov	r6, r2
 800c452:	4699      	mov	r9, r3
 800c454:	688a      	ldr	r2, [r1, #8]
 800c456:	690b      	ldr	r3, [r1, #16]
 800c458:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c45c:	4293      	cmp	r3, r2
 800c45e:	bfb8      	it	lt
 800c460:	4613      	movlt	r3, r2
 800c462:	6033      	str	r3, [r6, #0]
 800c464:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c468:	4607      	mov	r7, r0
 800c46a:	460c      	mov	r4, r1
 800c46c:	b10a      	cbz	r2, 800c472 <_printf_common+0x26>
 800c46e:	3301      	adds	r3, #1
 800c470:	6033      	str	r3, [r6, #0]
 800c472:	6823      	ldr	r3, [r4, #0]
 800c474:	0699      	lsls	r1, r3, #26
 800c476:	bf42      	ittt	mi
 800c478:	6833      	ldrmi	r3, [r6, #0]
 800c47a:	3302      	addmi	r3, #2
 800c47c:	6033      	strmi	r3, [r6, #0]
 800c47e:	6825      	ldr	r5, [r4, #0]
 800c480:	f015 0506 	ands.w	r5, r5, #6
 800c484:	d106      	bne.n	800c494 <_printf_common+0x48>
 800c486:	f104 0a19 	add.w	sl, r4, #25
 800c48a:	68e3      	ldr	r3, [r4, #12]
 800c48c:	6832      	ldr	r2, [r6, #0]
 800c48e:	1a9b      	subs	r3, r3, r2
 800c490:	42ab      	cmp	r3, r5
 800c492:	dc26      	bgt.n	800c4e2 <_printf_common+0x96>
 800c494:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c498:	1e13      	subs	r3, r2, #0
 800c49a:	6822      	ldr	r2, [r4, #0]
 800c49c:	bf18      	it	ne
 800c49e:	2301      	movne	r3, #1
 800c4a0:	0692      	lsls	r2, r2, #26
 800c4a2:	d42b      	bmi.n	800c4fc <_printf_common+0xb0>
 800c4a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c4a8:	4649      	mov	r1, r9
 800c4aa:	4638      	mov	r0, r7
 800c4ac:	47c0      	blx	r8
 800c4ae:	3001      	adds	r0, #1
 800c4b0:	d01e      	beq.n	800c4f0 <_printf_common+0xa4>
 800c4b2:	6823      	ldr	r3, [r4, #0]
 800c4b4:	68e5      	ldr	r5, [r4, #12]
 800c4b6:	6832      	ldr	r2, [r6, #0]
 800c4b8:	f003 0306 	and.w	r3, r3, #6
 800c4bc:	2b04      	cmp	r3, #4
 800c4be:	bf08      	it	eq
 800c4c0:	1aad      	subeq	r5, r5, r2
 800c4c2:	68a3      	ldr	r3, [r4, #8]
 800c4c4:	6922      	ldr	r2, [r4, #16]
 800c4c6:	bf0c      	ite	eq
 800c4c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c4cc:	2500      	movne	r5, #0
 800c4ce:	4293      	cmp	r3, r2
 800c4d0:	bfc4      	itt	gt
 800c4d2:	1a9b      	subgt	r3, r3, r2
 800c4d4:	18ed      	addgt	r5, r5, r3
 800c4d6:	2600      	movs	r6, #0
 800c4d8:	341a      	adds	r4, #26
 800c4da:	42b5      	cmp	r5, r6
 800c4dc:	d11a      	bne.n	800c514 <_printf_common+0xc8>
 800c4de:	2000      	movs	r0, #0
 800c4e0:	e008      	b.n	800c4f4 <_printf_common+0xa8>
 800c4e2:	2301      	movs	r3, #1
 800c4e4:	4652      	mov	r2, sl
 800c4e6:	4649      	mov	r1, r9
 800c4e8:	4638      	mov	r0, r7
 800c4ea:	47c0      	blx	r8
 800c4ec:	3001      	adds	r0, #1
 800c4ee:	d103      	bne.n	800c4f8 <_printf_common+0xac>
 800c4f0:	f04f 30ff 	mov.w	r0, #4294967295
 800c4f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4f8:	3501      	adds	r5, #1
 800c4fa:	e7c6      	b.n	800c48a <_printf_common+0x3e>
 800c4fc:	18e1      	adds	r1, r4, r3
 800c4fe:	1c5a      	adds	r2, r3, #1
 800c500:	2030      	movs	r0, #48	; 0x30
 800c502:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c506:	4422      	add	r2, r4
 800c508:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c50c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c510:	3302      	adds	r3, #2
 800c512:	e7c7      	b.n	800c4a4 <_printf_common+0x58>
 800c514:	2301      	movs	r3, #1
 800c516:	4622      	mov	r2, r4
 800c518:	4649      	mov	r1, r9
 800c51a:	4638      	mov	r0, r7
 800c51c:	47c0      	blx	r8
 800c51e:	3001      	adds	r0, #1
 800c520:	d0e6      	beq.n	800c4f0 <_printf_common+0xa4>
 800c522:	3601      	adds	r6, #1
 800c524:	e7d9      	b.n	800c4da <_printf_common+0x8e>
	...

0800c528 <_printf_i>:
 800c528:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c52c:	7e0f      	ldrb	r7, [r1, #24]
 800c52e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c530:	2f78      	cmp	r7, #120	; 0x78
 800c532:	4691      	mov	r9, r2
 800c534:	4680      	mov	r8, r0
 800c536:	460c      	mov	r4, r1
 800c538:	469a      	mov	sl, r3
 800c53a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c53e:	d807      	bhi.n	800c550 <_printf_i+0x28>
 800c540:	2f62      	cmp	r7, #98	; 0x62
 800c542:	d80a      	bhi.n	800c55a <_printf_i+0x32>
 800c544:	2f00      	cmp	r7, #0
 800c546:	f000 80d8 	beq.w	800c6fa <_printf_i+0x1d2>
 800c54a:	2f58      	cmp	r7, #88	; 0x58
 800c54c:	f000 80a3 	beq.w	800c696 <_printf_i+0x16e>
 800c550:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c554:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c558:	e03a      	b.n	800c5d0 <_printf_i+0xa8>
 800c55a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c55e:	2b15      	cmp	r3, #21
 800c560:	d8f6      	bhi.n	800c550 <_printf_i+0x28>
 800c562:	a101      	add	r1, pc, #4	; (adr r1, 800c568 <_printf_i+0x40>)
 800c564:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c568:	0800c5c1 	.word	0x0800c5c1
 800c56c:	0800c5d5 	.word	0x0800c5d5
 800c570:	0800c551 	.word	0x0800c551
 800c574:	0800c551 	.word	0x0800c551
 800c578:	0800c551 	.word	0x0800c551
 800c57c:	0800c551 	.word	0x0800c551
 800c580:	0800c5d5 	.word	0x0800c5d5
 800c584:	0800c551 	.word	0x0800c551
 800c588:	0800c551 	.word	0x0800c551
 800c58c:	0800c551 	.word	0x0800c551
 800c590:	0800c551 	.word	0x0800c551
 800c594:	0800c6e1 	.word	0x0800c6e1
 800c598:	0800c605 	.word	0x0800c605
 800c59c:	0800c6c3 	.word	0x0800c6c3
 800c5a0:	0800c551 	.word	0x0800c551
 800c5a4:	0800c551 	.word	0x0800c551
 800c5a8:	0800c703 	.word	0x0800c703
 800c5ac:	0800c551 	.word	0x0800c551
 800c5b0:	0800c605 	.word	0x0800c605
 800c5b4:	0800c551 	.word	0x0800c551
 800c5b8:	0800c551 	.word	0x0800c551
 800c5bc:	0800c6cb 	.word	0x0800c6cb
 800c5c0:	682b      	ldr	r3, [r5, #0]
 800c5c2:	1d1a      	adds	r2, r3, #4
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	602a      	str	r2, [r5, #0]
 800c5c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c5cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c5d0:	2301      	movs	r3, #1
 800c5d2:	e0a3      	b.n	800c71c <_printf_i+0x1f4>
 800c5d4:	6820      	ldr	r0, [r4, #0]
 800c5d6:	6829      	ldr	r1, [r5, #0]
 800c5d8:	0606      	lsls	r6, r0, #24
 800c5da:	f101 0304 	add.w	r3, r1, #4
 800c5de:	d50a      	bpl.n	800c5f6 <_printf_i+0xce>
 800c5e0:	680e      	ldr	r6, [r1, #0]
 800c5e2:	602b      	str	r3, [r5, #0]
 800c5e4:	2e00      	cmp	r6, #0
 800c5e6:	da03      	bge.n	800c5f0 <_printf_i+0xc8>
 800c5e8:	232d      	movs	r3, #45	; 0x2d
 800c5ea:	4276      	negs	r6, r6
 800c5ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c5f0:	485e      	ldr	r0, [pc, #376]	; (800c76c <_printf_i+0x244>)
 800c5f2:	230a      	movs	r3, #10
 800c5f4:	e019      	b.n	800c62a <_printf_i+0x102>
 800c5f6:	680e      	ldr	r6, [r1, #0]
 800c5f8:	602b      	str	r3, [r5, #0]
 800c5fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c5fe:	bf18      	it	ne
 800c600:	b236      	sxthne	r6, r6
 800c602:	e7ef      	b.n	800c5e4 <_printf_i+0xbc>
 800c604:	682b      	ldr	r3, [r5, #0]
 800c606:	6820      	ldr	r0, [r4, #0]
 800c608:	1d19      	adds	r1, r3, #4
 800c60a:	6029      	str	r1, [r5, #0]
 800c60c:	0601      	lsls	r1, r0, #24
 800c60e:	d501      	bpl.n	800c614 <_printf_i+0xec>
 800c610:	681e      	ldr	r6, [r3, #0]
 800c612:	e002      	b.n	800c61a <_printf_i+0xf2>
 800c614:	0646      	lsls	r6, r0, #25
 800c616:	d5fb      	bpl.n	800c610 <_printf_i+0xe8>
 800c618:	881e      	ldrh	r6, [r3, #0]
 800c61a:	4854      	ldr	r0, [pc, #336]	; (800c76c <_printf_i+0x244>)
 800c61c:	2f6f      	cmp	r7, #111	; 0x6f
 800c61e:	bf0c      	ite	eq
 800c620:	2308      	moveq	r3, #8
 800c622:	230a      	movne	r3, #10
 800c624:	2100      	movs	r1, #0
 800c626:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c62a:	6865      	ldr	r5, [r4, #4]
 800c62c:	60a5      	str	r5, [r4, #8]
 800c62e:	2d00      	cmp	r5, #0
 800c630:	bfa2      	ittt	ge
 800c632:	6821      	ldrge	r1, [r4, #0]
 800c634:	f021 0104 	bicge.w	r1, r1, #4
 800c638:	6021      	strge	r1, [r4, #0]
 800c63a:	b90e      	cbnz	r6, 800c640 <_printf_i+0x118>
 800c63c:	2d00      	cmp	r5, #0
 800c63e:	d04d      	beq.n	800c6dc <_printf_i+0x1b4>
 800c640:	4615      	mov	r5, r2
 800c642:	fbb6 f1f3 	udiv	r1, r6, r3
 800c646:	fb03 6711 	mls	r7, r3, r1, r6
 800c64a:	5dc7      	ldrb	r7, [r0, r7]
 800c64c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c650:	4637      	mov	r7, r6
 800c652:	42bb      	cmp	r3, r7
 800c654:	460e      	mov	r6, r1
 800c656:	d9f4      	bls.n	800c642 <_printf_i+0x11a>
 800c658:	2b08      	cmp	r3, #8
 800c65a:	d10b      	bne.n	800c674 <_printf_i+0x14c>
 800c65c:	6823      	ldr	r3, [r4, #0]
 800c65e:	07de      	lsls	r6, r3, #31
 800c660:	d508      	bpl.n	800c674 <_printf_i+0x14c>
 800c662:	6923      	ldr	r3, [r4, #16]
 800c664:	6861      	ldr	r1, [r4, #4]
 800c666:	4299      	cmp	r1, r3
 800c668:	bfde      	ittt	le
 800c66a:	2330      	movle	r3, #48	; 0x30
 800c66c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c670:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c674:	1b52      	subs	r2, r2, r5
 800c676:	6122      	str	r2, [r4, #16]
 800c678:	f8cd a000 	str.w	sl, [sp]
 800c67c:	464b      	mov	r3, r9
 800c67e:	aa03      	add	r2, sp, #12
 800c680:	4621      	mov	r1, r4
 800c682:	4640      	mov	r0, r8
 800c684:	f7ff fee2 	bl	800c44c <_printf_common>
 800c688:	3001      	adds	r0, #1
 800c68a:	d14c      	bne.n	800c726 <_printf_i+0x1fe>
 800c68c:	f04f 30ff 	mov.w	r0, #4294967295
 800c690:	b004      	add	sp, #16
 800c692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c696:	4835      	ldr	r0, [pc, #212]	; (800c76c <_printf_i+0x244>)
 800c698:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c69c:	6829      	ldr	r1, [r5, #0]
 800c69e:	6823      	ldr	r3, [r4, #0]
 800c6a0:	f851 6b04 	ldr.w	r6, [r1], #4
 800c6a4:	6029      	str	r1, [r5, #0]
 800c6a6:	061d      	lsls	r5, r3, #24
 800c6a8:	d514      	bpl.n	800c6d4 <_printf_i+0x1ac>
 800c6aa:	07df      	lsls	r7, r3, #31
 800c6ac:	bf44      	itt	mi
 800c6ae:	f043 0320 	orrmi.w	r3, r3, #32
 800c6b2:	6023      	strmi	r3, [r4, #0]
 800c6b4:	b91e      	cbnz	r6, 800c6be <_printf_i+0x196>
 800c6b6:	6823      	ldr	r3, [r4, #0]
 800c6b8:	f023 0320 	bic.w	r3, r3, #32
 800c6bc:	6023      	str	r3, [r4, #0]
 800c6be:	2310      	movs	r3, #16
 800c6c0:	e7b0      	b.n	800c624 <_printf_i+0xfc>
 800c6c2:	6823      	ldr	r3, [r4, #0]
 800c6c4:	f043 0320 	orr.w	r3, r3, #32
 800c6c8:	6023      	str	r3, [r4, #0]
 800c6ca:	2378      	movs	r3, #120	; 0x78
 800c6cc:	4828      	ldr	r0, [pc, #160]	; (800c770 <_printf_i+0x248>)
 800c6ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c6d2:	e7e3      	b.n	800c69c <_printf_i+0x174>
 800c6d4:	0659      	lsls	r1, r3, #25
 800c6d6:	bf48      	it	mi
 800c6d8:	b2b6      	uxthmi	r6, r6
 800c6da:	e7e6      	b.n	800c6aa <_printf_i+0x182>
 800c6dc:	4615      	mov	r5, r2
 800c6de:	e7bb      	b.n	800c658 <_printf_i+0x130>
 800c6e0:	682b      	ldr	r3, [r5, #0]
 800c6e2:	6826      	ldr	r6, [r4, #0]
 800c6e4:	6961      	ldr	r1, [r4, #20]
 800c6e6:	1d18      	adds	r0, r3, #4
 800c6e8:	6028      	str	r0, [r5, #0]
 800c6ea:	0635      	lsls	r5, r6, #24
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	d501      	bpl.n	800c6f4 <_printf_i+0x1cc>
 800c6f0:	6019      	str	r1, [r3, #0]
 800c6f2:	e002      	b.n	800c6fa <_printf_i+0x1d2>
 800c6f4:	0670      	lsls	r0, r6, #25
 800c6f6:	d5fb      	bpl.n	800c6f0 <_printf_i+0x1c8>
 800c6f8:	8019      	strh	r1, [r3, #0]
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	6123      	str	r3, [r4, #16]
 800c6fe:	4615      	mov	r5, r2
 800c700:	e7ba      	b.n	800c678 <_printf_i+0x150>
 800c702:	682b      	ldr	r3, [r5, #0]
 800c704:	1d1a      	adds	r2, r3, #4
 800c706:	602a      	str	r2, [r5, #0]
 800c708:	681d      	ldr	r5, [r3, #0]
 800c70a:	6862      	ldr	r2, [r4, #4]
 800c70c:	2100      	movs	r1, #0
 800c70e:	4628      	mov	r0, r5
 800c710:	f7f3 fd86 	bl	8000220 <memchr>
 800c714:	b108      	cbz	r0, 800c71a <_printf_i+0x1f2>
 800c716:	1b40      	subs	r0, r0, r5
 800c718:	6060      	str	r0, [r4, #4]
 800c71a:	6863      	ldr	r3, [r4, #4]
 800c71c:	6123      	str	r3, [r4, #16]
 800c71e:	2300      	movs	r3, #0
 800c720:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c724:	e7a8      	b.n	800c678 <_printf_i+0x150>
 800c726:	6923      	ldr	r3, [r4, #16]
 800c728:	462a      	mov	r2, r5
 800c72a:	4649      	mov	r1, r9
 800c72c:	4640      	mov	r0, r8
 800c72e:	47d0      	blx	sl
 800c730:	3001      	adds	r0, #1
 800c732:	d0ab      	beq.n	800c68c <_printf_i+0x164>
 800c734:	6823      	ldr	r3, [r4, #0]
 800c736:	079b      	lsls	r3, r3, #30
 800c738:	d413      	bmi.n	800c762 <_printf_i+0x23a>
 800c73a:	68e0      	ldr	r0, [r4, #12]
 800c73c:	9b03      	ldr	r3, [sp, #12]
 800c73e:	4298      	cmp	r0, r3
 800c740:	bfb8      	it	lt
 800c742:	4618      	movlt	r0, r3
 800c744:	e7a4      	b.n	800c690 <_printf_i+0x168>
 800c746:	2301      	movs	r3, #1
 800c748:	4632      	mov	r2, r6
 800c74a:	4649      	mov	r1, r9
 800c74c:	4640      	mov	r0, r8
 800c74e:	47d0      	blx	sl
 800c750:	3001      	adds	r0, #1
 800c752:	d09b      	beq.n	800c68c <_printf_i+0x164>
 800c754:	3501      	adds	r5, #1
 800c756:	68e3      	ldr	r3, [r4, #12]
 800c758:	9903      	ldr	r1, [sp, #12]
 800c75a:	1a5b      	subs	r3, r3, r1
 800c75c:	42ab      	cmp	r3, r5
 800c75e:	dcf2      	bgt.n	800c746 <_printf_i+0x21e>
 800c760:	e7eb      	b.n	800c73a <_printf_i+0x212>
 800c762:	2500      	movs	r5, #0
 800c764:	f104 0619 	add.w	r6, r4, #25
 800c768:	e7f5      	b.n	800c756 <_printf_i+0x22e>
 800c76a:	bf00      	nop
 800c76c:	0800dc05 	.word	0x0800dc05
 800c770:	0800dc16 	.word	0x0800dc16

0800c774 <_scanf_chars>:
 800c774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c778:	4615      	mov	r5, r2
 800c77a:	688a      	ldr	r2, [r1, #8]
 800c77c:	4680      	mov	r8, r0
 800c77e:	460c      	mov	r4, r1
 800c780:	b932      	cbnz	r2, 800c790 <_scanf_chars+0x1c>
 800c782:	698a      	ldr	r2, [r1, #24]
 800c784:	2a00      	cmp	r2, #0
 800c786:	bf0c      	ite	eq
 800c788:	2201      	moveq	r2, #1
 800c78a:	f04f 32ff 	movne.w	r2, #4294967295
 800c78e:	608a      	str	r2, [r1, #8]
 800c790:	6822      	ldr	r2, [r4, #0]
 800c792:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800c824 <_scanf_chars+0xb0>
 800c796:	06d1      	lsls	r1, r2, #27
 800c798:	bf5f      	itttt	pl
 800c79a:	681a      	ldrpl	r2, [r3, #0]
 800c79c:	1d11      	addpl	r1, r2, #4
 800c79e:	6019      	strpl	r1, [r3, #0]
 800c7a0:	6816      	ldrpl	r6, [r2, #0]
 800c7a2:	2700      	movs	r7, #0
 800c7a4:	69a0      	ldr	r0, [r4, #24]
 800c7a6:	b188      	cbz	r0, 800c7cc <_scanf_chars+0x58>
 800c7a8:	2801      	cmp	r0, #1
 800c7aa:	d107      	bne.n	800c7bc <_scanf_chars+0x48>
 800c7ac:	682a      	ldr	r2, [r5, #0]
 800c7ae:	7811      	ldrb	r1, [r2, #0]
 800c7b0:	6962      	ldr	r2, [r4, #20]
 800c7b2:	5c52      	ldrb	r2, [r2, r1]
 800c7b4:	b952      	cbnz	r2, 800c7cc <_scanf_chars+0x58>
 800c7b6:	2f00      	cmp	r7, #0
 800c7b8:	d031      	beq.n	800c81e <_scanf_chars+0xaa>
 800c7ba:	e022      	b.n	800c802 <_scanf_chars+0x8e>
 800c7bc:	2802      	cmp	r0, #2
 800c7be:	d120      	bne.n	800c802 <_scanf_chars+0x8e>
 800c7c0:	682b      	ldr	r3, [r5, #0]
 800c7c2:	781b      	ldrb	r3, [r3, #0]
 800c7c4:	f813 3009 	ldrb.w	r3, [r3, r9]
 800c7c8:	071b      	lsls	r3, r3, #28
 800c7ca:	d41a      	bmi.n	800c802 <_scanf_chars+0x8e>
 800c7cc:	6823      	ldr	r3, [r4, #0]
 800c7ce:	06da      	lsls	r2, r3, #27
 800c7d0:	bf5e      	ittt	pl
 800c7d2:	682b      	ldrpl	r3, [r5, #0]
 800c7d4:	781b      	ldrbpl	r3, [r3, #0]
 800c7d6:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c7da:	682a      	ldr	r2, [r5, #0]
 800c7dc:	686b      	ldr	r3, [r5, #4]
 800c7de:	3201      	adds	r2, #1
 800c7e0:	602a      	str	r2, [r5, #0]
 800c7e2:	68a2      	ldr	r2, [r4, #8]
 800c7e4:	3b01      	subs	r3, #1
 800c7e6:	3a01      	subs	r2, #1
 800c7e8:	606b      	str	r3, [r5, #4]
 800c7ea:	3701      	adds	r7, #1
 800c7ec:	60a2      	str	r2, [r4, #8]
 800c7ee:	b142      	cbz	r2, 800c802 <_scanf_chars+0x8e>
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	dcd7      	bgt.n	800c7a4 <_scanf_chars+0x30>
 800c7f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c7f8:	4629      	mov	r1, r5
 800c7fa:	4640      	mov	r0, r8
 800c7fc:	4798      	blx	r3
 800c7fe:	2800      	cmp	r0, #0
 800c800:	d0d0      	beq.n	800c7a4 <_scanf_chars+0x30>
 800c802:	6823      	ldr	r3, [r4, #0]
 800c804:	f013 0310 	ands.w	r3, r3, #16
 800c808:	d105      	bne.n	800c816 <_scanf_chars+0xa2>
 800c80a:	68e2      	ldr	r2, [r4, #12]
 800c80c:	3201      	adds	r2, #1
 800c80e:	60e2      	str	r2, [r4, #12]
 800c810:	69a2      	ldr	r2, [r4, #24]
 800c812:	b102      	cbz	r2, 800c816 <_scanf_chars+0xa2>
 800c814:	7033      	strb	r3, [r6, #0]
 800c816:	6923      	ldr	r3, [r4, #16]
 800c818:	443b      	add	r3, r7
 800c81a:	6123      	str	r3, [r4, #16]
 800c81c:	2000      	movs	r0, #0
 800c81e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c822:	bf00      	nop
 800c824:	0800dc43 	.word	0x0800dc43

0800c828 <_scanf_i>:
 800c828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c82c:	4698      	mov	r8, r3
 800c82e:	4b76      	ldr	r3, [pc, #472]	; (800ca08 <_scanf_i+0x1e0>)
 800c830:	460c      	mov	r4, r1
 800c832:	4682      	mov	sl, r0
 800c834:	4616      	mov	r6, r2
 800c836:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c83a:	b087      	sub	sp, #28
 800c83c:	ab03      	add	r3, sp, #12
 800c83e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c842:	4b72      	ldr	r3, [pc, #456]	; (800ca0c <_scanf_i+0x1e4>)
 800c844:	69a1      	ldr	r1, [r4, #24]
 800c846:	4a72      	ldr	r2, [pc, #456]	; (800ca10 <_scanf_i+0x1e8>)
 800c848:	2903      	cmp	r1, #3
 800c84a:	bf18      	it	ne
 800c84c:	461a      	movne	r2, r3
 800c84e:	68a3      	ldr	r3, [r4, #8]
 800c850:	9201      	str	r2, [sp, #4]
 800c852:	1e5a      	subs	r2, r3, #1
 800c854:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c858:	bf88      	it	hi
 800c85a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c85e:	4627      	mov	r7, r4
 800c860:	bf82      	ittt	hi
 800c862:	eb03 0905 	addhi.w	r9, r3, r5
 800c866:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c86a:	60a3      	strhi	r3, [r4, #8]
 800c86c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c870:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c874:	bf98      	it	ls
 800c876:	f04f 0900 	movls.w	r9, #0
 800c87a:	6023      	str	r3, [r4, #0]
 800c87c:	463d      	mov	r5, r7
 800c87e:	f04f 0b00 	mov.w	fp, #0
 800c882:	6831      	ldr	r1, [r6, #0]
 800c884:	ab03      	add	r3, sp, #12
 800c886:	7809      	ldrb	r1, [r1, #0]
 800c888:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c88c:	2202      	movs	r2, #2
 800c88e:	f7f3 fcc7 	bl	8000220 <memchr>
 800c892:	b328      	cbz	r0, 800c8e0 <_scanf_i+0xb8>
 800c894:	f1bb 0f01 	cmp.w	fp, #1
 800c898:	d159      	bne.n	800c94e <_scanf_i+0x126>
 800c89a:	6862      	ldr	r2, [r4, #4]
 800c89c:	b92a      	cbnz	r2, 800c8aa <_scanf_i+0x82>
 800c89e:	6822      	ldr	r2, [r4, #0]
 800c8a0:	2308      	movs	r3, #8
 800c8a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c8a6:	6063      	str	r3, [r4, #4]
 800c8a8:	6022      	str	r2, [r4, #0]
 800c8aa:	6822      	ldr	r2, [r4, #0]
 800c8ac:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c8b0:	6022      	str	r2, [r4, #0]
 800c8b2:	68a2      	ldr	r2, [r4, #8]
 800c8b4:	1e51      	subs	r1, r2, #1
 800c8b6:	60a1      	str	r1, [r4, #8]
 800c8b8:	b192      	cbz	r2, 800c8e0 <_scanf_i+0xb8>
 800c8ba:	6832      	ldr	r2, [r6, #0]
 800c8bc:	1c51      	adds	r1, r2, #1
 800c8be:	6031      	str	r1, [r6, #0]
 800c8c0:	7812      	ldrb	r2, [r2, #0]
 800c8c2:	f805 2b01 	strb.w	r2, [r5], #1
 800c8c6:	6872      	ldr	r2, [r6, #4]
 800c8c8:	3a01      	subs	r2, #1
 800c8ca:	2a00      	cmp	r2, #0
 800c8cc:	6072      	str	r2, [r6, #4]
 800c8ce:	dc07      	bgt.n	800c8e0 <_scanf_i+0xb8>
 800c8d0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800c8d4:	4631      	mov	r1, r6
 800c8d6:	4650      	mov	r0, sl
 800c8d8:	4790      	blx	r2
 800c8da:	2800      	cmp	r0, #0
 800c8dc:	f040 8085 	bne.w	800c9ea <_scanf_i+0x1c2>
 800c8e0:	f10b 0b01 	add.w	fp, fp, #1
 800c8e4:	f1bb 0f03 	cmp.w	fp, #3
 800c8e8:	d1cb      	bne.n	800c882 <_scanf_i+0x5a>
 800c8ea:	6863      	ldr	r3, [r4, #4]
 800c8ec:	b90b      	cbnz	r3, 800c8f2 <_scanf_i+0xca>
 800c8ee:	230a      	movs	r3, #10
 800c8f0:	6063      	str	r3, [r4, #4]
 800c8f2:	6863      	ldr	r3, [r4, #4]
 800c8f4:	4947      	ldr	r1, [pc, #284]	; (800ca14 <_scanf_i+0x1ec>)
 800c8f6:	6960      	ldr	r0, [r4, #20]
 800c8f8:	1ac9      	subs	r1, r1, r3
 800c8fa:	f000 f88d 	bl	800ca18 <__sccl>
 800c8fe:	f04f 0b00 	mov.w	fp, #0
 800c902:	68a3      	ldr	r3, [r4, #8]
 800c904:	6822      	ldr	r2, [r4, #0]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d03d      	beq.n	800c986 <_scanf_i+0x15e>
 800c90a:	6831      	ldr	r1, [r6, #0]
 800c90c:	6960      	ldr	r0, [r4, #20]
 800c90e:	f891 c000 	ldrb.w	ip, [r1]
 800c912:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c916:	2800      	cmp	r0, #0
 800c918:	d035      	beq.n	800c986 <_scanf_i+0x15e>
 800c91a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800c91e:	d124      	bne.n	800c96a <_scanf_i+0x142>
 800c920:	0510      	lsls	r0, r2, #20
 800c922:	d522      	bpl.n	800c96a <_scanf_i+0x142>
 800c924:	f10b 0b01 	add.w	fp, fp, #1
 800c928:	f1b9 0f00 	cmp.w	r9, #0
 800c92c:	d003      	beq.n	800c936 <_scanf_i+0x10e>
 800c92e:	3301      	adds	r3, #1
 800c930:	f109 39ff 	add.w	r9, r9, #4294967295
 800c934:	60a3      	str	r3, [r4, #8]
 800c936:	6873      	ldr	r3, [r6, #4]
 800c938:	3b01      	subs	r3, #1
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	6073      	str	r3, [r6, #4]
 800c93e:	dd1b      	ble.n	800c978 <_scanf_i+0x150>
 800c940:	6833      	ldr	r3, [r6, #0]
 800c942:	3301      	adds	r3, #1
 800c944:	6033      	str	r3, [r6, #0]
 800c946:	68a3      	ldr	r3, [r4, #8]
 800c948:	3b01      	subs	r3, #1
 800c94a:	60a3      	str	r3, [r4, #8]
 800c94c:	e7d9      	b.n	800c902 <_scanf_i+0xda>
 800c94e:	f1bb 0f02 	cmp.w	fp, #2
 800c952:	d1ae      	bne.n	800c8b2 <_scanf_i+0x8a>
 800c954:	6822      	ldr	r2, [r4, #0]
 800c956:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c95a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c95e:	d1bf      	bne.n	800c8e0 <_scanf_i+0xb8>
 800c960:	2310      	movs	r3, #16
 800c962:	6063      	str	r3, [r4, #4]
 800c964:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c968:	e7a2      	b.n	800c8b0 <_scanf_i+0x88>
 800c96a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800c96e:	6022      	str	r2, [r4, #0]
 800c970:	780b      	ldrb	r3, [r1, #0]
 800c972:	f805 3b01 	strb.w	r3, [r5], #1
 800c976:	e7de      	b.n	800c936 <_scanf_i+0x10e>
 800c978:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c97c:	4631      	mov	r1, r6
 800c97e:	4650      	mov	r0, sl
 800c980:	4798      	blx	r3
 800c982:	2800      	cmp	r0, #0
 800c984:	d0df      	beq.n	800c946 <_scanf_i+0x11e>
 800c986:	6823      	ldr	r3, [r4, #0]
 800c988:	05db      	lsls	r3, r3, #23
 800c98a:	d50d      	bpl.n	800c9a8 <_scanf_i+0x180>
 800c98c:	42bd      	cmp	r5, r7
 800c98e:	d909      	bls.n	800c9a4 <_scanf_i+0x17c>
 800c990:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c994:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c998:	4632      	mov	r2, r6
 800c99a:	4650      	mov	r0, sl
 800c99c:	4798      	blx	r3
 800c99e:	f105 39ff 	add.w	r9, r5, #4294967295
 800c9a2:	464d      	mov	r5, r9
 800c9a4:	42bd      	cmp	r5, r7
 800c9a6:	d02d      	beq.n	800ca04 <_scanf_i+0x1dc>
 800c9a8:	6822      	ldr	r2, [r4, #0]
 800c9aa:	f012 0210 	ands.w	r2, r2, #16
 800c9ae:	d113      	bne.n	800c9d8 <_scanf_i+0x1b0>
 800c9b0:	702a      	strb	r2, [r5, #0]
 800c9b2:	6863      	ldr	r3, [r4, #4]
 800c9b4:	9e01      	ldr	r6, [sp, #4]
 800c9b6:	4639      	mov	r1, r7
 800c9b8:	4650      	mov	r0, sl
 800c9ba:	47b0      	blx	r6
 800c9bc:	6821      	ldr	r1, [r4, #0]
 800c9be:	f8d8 3000 	ldr.w	r3, [r8]
 800c9c2:	f011 0f20 	tst.w	r1, #32
 800c9c6:	d013      	beq.n	800c9f0 <_scanf_i+0x1c8>
 800c9c8:	1d1a      	adds	r2, r3, #4
 800c9ca:	f8c8 2000 	str.w	r2, [r8]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	6018      	str	r0, [r3, #0]
 800c9d2:	68e3      	ldr	r3, [r4, #12]
 800c9d4:	3301      	adds	r3, #1
 800c9d6:	60e3      	str	r3, [r4, #12]
 800c9d8:	1bed      	subs	r5, r5, r7
 800c9da:	44ab      	add	fp, r5
 800c9dc:	6925      	ldr	r5, [r4, #16]
 800c9de:	445d      	add	r5, fp
 800c9e0:	6125      	str	r5, [r4, #16]
 800c9e2:	2000      	movs	r0, #0
 800c9e4:	b007      	add	sp, #28
 800c9e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9ea:	f04f 0b00 	mov.w	fp, #0
 800c9ee:	e7ca      	b.n	800c986 <_scanf_i+0x15e>
 800c9f0:	1d1a      	adds	r2, r3, #4
 800c9f2:	f8c8 2000 	str.w	r2, [r8]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	f011 0f01 	tst.w	r1, #1
 800c9fc:	bf14      	ite	ne
 800c9fe:	8018      	strhne	r0, [r3, #0]
 800ca00:	6018      	streq	r0, [r3, #0]
 800ca02:	e7e6      	b.n	800c9d2 <_scanf_i+0x1aa>
 800ca04:	2001      	movs	r0, #1
 800ca06:	e7ed      	b.n	800c9e4 <_scanf_i+0x1bc>
 800ca08:	0800d7ec 	.word	0x0800d7ec
 800ca0c:	0800cc75 	.word	0x0800cc75
 800ca10:	0800cb8d 	.word	0x0800cb8d
 800ca14:	0800dc40 	.word	0x0800dc40

0800ca18 <__sccl>:
 800ca18:	b570      	push	{r4, r5, r6, lr}
 800ca1a:	780b      	ldrb	r3, [r1, #0]
 800ca1c:	4604      	mov	r4, r0
 800ca1e:	2b5e      	cmp	r3, #94	; 0x5e
 800ca20:	bf0b      	itete	eq
 800ca22:	784b      	ldrbeq	r3, [r1, #1]
 800ca24:	1c48      	addne	r0, r1, #1
 800ca26:	1c88      	addeq	r0, r1, #2
 800ca28:	2200      	movne	r2, #0
 800ca2a:	bf08      	it	eq
 800ca2c:	2201      	moveq	r2, #1
 800ca2e:	1e61      	subs	r1, r4, #1
 800ca30:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800ca34:	f801 2f01 	strb.w	r2, [r1, #1]!
 800ca38:	42a9      	cmp	r1, r5
 800ca3a:	d1fb      	bne.n	800ca34 <__sccl+0x1c>
 800ca3c:	b90b      	cbnz	r3, 800ca42 <__sccl+0x2a>
 800ca3e:	3801      	subs	r0, #1
 800ca40:	bd70      	pop	{r4, r5, r6, pc}
 800ca42:	f082 0201 	eor.w	r2, r2, #1
 800ca46:	54e2      	strb	r2, [r4, r3]
 800ca48:	4605      	mov	r5, r0
 800ca4a:	4628      	mov	r0, r5
 800ca4c:	f810 1b01 	ldrb.w	r1, [r0], #1
 800ca50:	292d      	cmp	r1, #45	; 0x2d
 800ca52:	d006      	beq.n	800ca62 <__sccl+0x4a>
 800ca54:	295d      	cmp	r1, #93	; 0x5d
 800ca56:	d0f3      	beq.n	800ca40 <__sccl+0x28>
 800ca58:	b909      	cbnz	r1, 800ca5e <__sccl+0x46>
 800ca5a:	4628      	mov	r0, r5
 800ca5c:	e7f0      	b.n	800ca40 <__sccl+0x28>
 800ca5e:	460b      	mov	r3, r1
 800ca60:	e7f1      	b.n	800ca46 <__sccl+0x2e>
 800ca62:	786e      	ldrb	r6, [r5, #1]
 800ca64:	2e5d      	cmp	r6, #93	; 0x5d
 800ca66:	d0fa      	beq.n	800ca5e <__sccl+0x46>
 800ca68:	42b3      	cmp	r3, r6
 800ca6a:	dcf8      	bgt.n	800ca5e <__sccl+0x46>
 800ca6c:	3502      	adds	r5, #2
 800ca6e:	4619      	mov	r1, r3
 800ca70:	3101      	adds	r1, #1
 800ca72:	428e      	cmp	r6, r1
 800ca74:	5462      	strb	r2, [r4, r1]
 800ca76:	dcfb      	bgt.n	800ca70 <__sccl+0x58>
 800ca78:	1af1      	subs	r1, r6, r3
 800ca7a:	3901      	subs	r1, #1
 800ca7c:	1c58      	adds	r0, r3, #1
 800ca7e:	42b3      	cmp	r3, r6
 800ca80:	bfa8      	it	ge
 800ca82:	2100      	movge	r1, #0
 800ca84:	1843      	adds	r3, r0, r1
 800ca86:	e7e0      	b.n	800ca4a <__sccl+0x32>

0800ca88 <_strtol_l.constprop.0>:
 800ca88:	2b01      	cmp	r3, #1
 800ca8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca8e:	d001      	beq.n	800ca94 <_strtol_l.constprop.0+0xc>
 800ca90:	2b24      	cmp	r3, #36	; 0x24
 800ca92:	d906      	bls.n	800caa2 <_strtol_l.constprop.0+0x1a>
 800ca94:	f7ff f8ea 	bl	800bc6c <__errno>
 800ca98:	2316      	movs	r3, #22
 800ca9a:	6003      	str	r3, [r0, #0]
 800ca9c:	2000      	movs	r0, #0
 800ca9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800caa2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800cb88 <_strtol_l.constprop.0+0x100>
 800caa6:	460d      	mov	r5, r1
 800caa8:	462e      	mov	r6, r5
 800caaa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800caae:	f814 700c 	ldrb.w	r7, [r4, ip]
 800cab2:	f017 0708 	ands.w	r7, r7, #8
 800cab6:	d1f7      	bne.n	800caa8 <_strtol_l.constprop.0+0x20>
 800cab8:	2c2d      	cmp	r4, #45	; 0x2d
 800caba:	d132      	bne.n	800cb22 <_strtol_l.constprop.0+0x9a>
 800cabc:	782c      	ldrb	r4, [r5, #0]
 800cabe:	2701      	movs	r7, #1
 800cac0:	1cb5      	adds	r5, r6, #2
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d05b      	beq.n	800cb7e <_strtol_l.constprop.0+0xf6>
 800cac6:	2b10      	cmp	r3, #16
 800cac8:	d109      	bne.n	800cade <_strtol_l.constprop.0+0x56>
 800caca:	2c30      	cmp	r4, #48	; 0x30
 800cacc:	d107      	bne.n	800cade <_strtol_l.constprop.0+0x56>
 800cace:	782c      	ldrb	r4, [r5, #0]
 800cad0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800cad4:	2c58      	cmp	r4, #88	; 0x58
 800cad6:	d14d      	bne.n	800cb74 <_strtol_l.constprop.0+0xec>
 800cad8:	786c      	ldrb	r4, [r5, #1]
 800cada:	2310      	movs	r3, #16
 800cadc:	3502      	adds	r5, #2
 800cade:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800cae2:	f108 38ff 	add.w	r8, r8, #4294967295
 800cae6:	f04f 0c00 	mov.w	ip, #0
 800caea:	fbb8 f9f3 	udiv	r9, r8, r3
 800caee:	4666      	mov	r6, ip
 800caf0:	fb03 8a19 	mls	sl, r3, r9, r8
 800caf4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800caf8:	f1be 0f09 	cmp.w	lr, #9
 800cafc:	d816      	bhi.n	800cb2c <_strtol_l.constprop.0+0xa4>
 800cafe:	4674      	mov	r4, lr
 800cb00:	42a3      	cmp	r3, r4
 800cb02:	dd24      	ble.n	800cb4e <_strtol_l.constprop.0+0xc6>
 800cb04:	f1bc 0f00 	cmp.w	ip, #0
 800cb08:	db1e      	blt.n	800cb48 <_strtol_l.constprop.0+0xc0>
 800cb0a:	45b1      	cmp	r9, r6
 800cb0c:	d31c      	bcc.n	800cb48 <_strtol_l.constprop.0+0xc0>
 800cb0e:	d101      	bne.n	800cb14 <_strtol_l.constprop.0+0x8c>
 800cb10:	45a2      	cmp	sl, r4
 800cb12:	db19      	blt.n	800cb48 <_strtol_l.constprop.0+0xc0>
 800cb14:	fb06 4603 	mla	r6, r6, r3, r4
 800cb18:	f04f 0c01 	mov.w	ip, #1
 800cb1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cb20:	e7e8      	b.n	800caf4 <_strtol_l.constprop.0+0x6c>
 800cb22:	2c2b      	cmp	r4, #43	; 0x2b
 800cb24:	bf04      	itt	eq
 800cb26:	782c      	ldrbeq	r4, [r5, #0]
 800cb28:	1cb5      	addeq	r5, r6, #2
 800cb2a:	e7ca      	b.n	800cac2 <_strtol_l.constprop.0+0x3a>
 800cb2c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800cb30:	f1be 0f19 	cmp.w	lr, #25
 800cb34:	d801      	bhi.n	800cb3a <_strtol_l.constprop.0+0xb2>
 800cb36:	3c37      	subs	r4, #55	; 0x37
 800cb38:	e7e2      	b.n	800cb00 <_strtol_l.constprop.0+0x78>
 800cb3a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800cb3e:	f1be 0f19 	cmp.w	lr, #25
 800cb42:	d804      	bhi.n	800cb4e <_strtol_l.constprop.0+0xc6>
 800cb44:	3c57      	subs	r4, #87	; 0x57
 800cb46:	e7db      	b.n	800cb00 <_strtol_l.constprop.0+0x78>
 800cb48:	f04f 3cff 	mov.w	ip, #4294967295
 800cb4c:	e7e6      	b.n	800cb1c <_strtol_l.constprop.0+0x94>
 800cb4e:	f1bc 0f00 	cmp.w	ip, #0
 800cb52:	da05      	bge.n	800cb60 <_strtol_l.constprop.0+0xd8>
 800cb54:	2322      	movs	r3, #34	; 0x22
 800cb56:	6003      	str	r3, [r0, #0]
 800cb58:	4646      	mov	r6, r8
 800cb5a:	b942      	cbnz	r2, 800cb6e <_strtol_l.constprop.0+0xe6>
 800cb5c:	4630      	mov	r0, r6
 800cb5e:	e79e      	b.n	800ca9e <_strtol_l.constprop.0+0x16>
 800cb60:	b107      	cbz	r7, 800cb64 <_strtol_l.constprop.0+0xdc>
 800cb62:	4276      	negs	r6, r6
 800cb64:	2a00      	cmp	r2, #0
 800cb66:	d0f9      	beq.n	800cb5c <_strtol_l.constprop.0+0xd4>
 800cb68:	f1bc 0f00 	cmp.w	ip, #0
 800cb6c:	d000      	beq.n	800cb70 <_strtol_l.constprop.0+0xe8>
 800cb6e:	1e69      	subs	r1, r5, #1
 800cb70:	6011      	str	r1, [r2, #0]
 800cb72:	e7f3      	b.n	800cb5c <_strtol_l.constprop.0+0xd4>
 800cb74:	2430      	movs	r4, #48	; 0x30
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d1b1      	bne.n	800cade <_strtol_l.constprop.0+0x56>
 800cb7a:	2308      	movs	r3, #8
 800cb7c:	e7af      	b.n	800cade <_strtol_l.constprop.0+0x56>
 800cb7e:	2c30      	cmp	r4, #48	; 0x30
 800cb80:	d0a5      	beq.n	800cace <_strtol_l.constprop.0+0x46>
 800cb82:	230a      	movs	r3, #10
 800cb84:	e7ab      	b.n	800cade <_strtol_l.constprop.0+0x56>
 800cb86:	bf00      	nop
 800cb88:	0800dc43 	.word	0x0800dc43

0800cb8c <_strtol_r>:
 800cb8c:	f7ff bf7c 	b.w	800ca88 <_strtol_l.constprop.0>

0800cb90 <_strtoul_l.constprop.0>:
 800cb90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cb94:	4f36      	ldr	r7, [pc, #216]	; (800cc70 <_strtoul_l.constprop.0+0xe0>)
 800cb96:	4686      	mov	lr, r0
 800cb98:	460d      	mov	r5, r1
 800cb9a:	4628      	mov	r0, r5
 800cb9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cba0:	5de6      	ldrb	r6, [r4, r7]
 800cba2:	f016 0608 	ands.w	r6, r6, #8
 800cba6:	d1f8      	bne.n	800cb9a <_strtoul_l.constprop.0+0xa>
 800cba8:	2c2d      	cmp	r4, #45	; 0x2d
 800cbaa:	d12f      	bne.n	800cc0c <_strtoul_l.constprop.0+0x7c>
 800cbac:	782c      	ldrb	r4, [r5, #0]
 800cbae:	2601      	movs	r6, #1
 800cbb0:	1c85      	adds	r5, r0, #2
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d057      	beq.n	800cc66 <_strtoul_l.constprop.0+0xd6>
 800cbb6:	2b10      	cmp	r3, #16
 800cbb8:	d109      	bne.n	800cbce <_strtoul_l.constprop.0+0x3e>
 800cbba:	2c30      	cmp	r4, #48	; 0x30
 800cbbc:	d107      	bne.n	800cbce <_strtoul_l.constprop.0+0x3e>
 800cbbe:	7828      	ldrb	r0, [r5, #0]
 800cbc0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800cbc4:	2858      	cmp	r0, #88	; 0x58
 800cbc6:	d149      	bne.n	800cc5c <_strtoul_l.constprop.0+0xcc>
 800cbc8:	786c      	ldrb	r4, [r5, #1]
 800cbca:	2310      	movs	r3, #16
 800cbcc:	3502      	adds	r5, #2
 800cbce:	f04f 38ff 	mov.w	r8, #4294967295
 800cbd2:	2700      	movs	r7, #0
 800cbd4:	fbb8 f8f3 	udiv	r8, r8, r3
 800cbd8:	fb03 f908 	mul.w	r9, r3, r8
 800cbdc:	ea6f 0909 	mvn.w	r9, r9
 800cbe0:	4638      	mov	r0, r7
 800cbe2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800cbe6:	f1bc 0f09 	cmp.w	ip, #9
 800cbea:	d814      	bhi.n	800cc16 <_strtoul_l.constprop.0+0x86>
 800cbec:	4664      	mov	r4, ip
 800cbee:	42a3      	cmp	r3, r4
 800cbf0:	dd22      	ble.n	800cc38 <_strtoul_l.constprop.0+0xa8>
 800cbf2:	2f00      	cmp	r7, #0
 800cbf4:	db1d      	blt.n	800cc32 <_strtoul_l.constprop.0+0xa2>
 800cbf6:	4580      	cmp	r8, r0
 800cbf8:	d31b      	bcc.n	800cc32 <_strtoul_l.constprop.0+0xa2>
 800cbfa:	d101      	bne.n	800cc00 <_strtoul_l.constprop.0+0x70>
 800cbfc:	45a1      	cmp	r9, r4
 800cbfe:	db18      	blt.n	800cc32 <_strtoul_l.constprop.0+0xa2>
 800cc00:	fb00 4003 	mla	r0, r0, r3, r4
 800cc04:	2701      	movs	r7, #1
 800cc06:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cc0a:	e7ea      	b.n	800cbe2 <_strtoul_l.constprop.0+0x52>
 800cc0c:	2c2b      	cmp	r4, #43	; 0x2b
 800cc0e:	bf04      	itt	eq
 800cc10:	782c      	ldrbeq	r4, [r5, #0]
 800cc12:	1c85      	addeq	r5, r0, #2
 800cc14:	e7cd      	b.n	800cbb2 <_strtoul_l.constprop.0+0x22>
 800cc16:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800cc1a:	f1bc 0f19 	cmp.w	ip, #25
 800cc1e:	d801      	bhi.n	800cc24 <_strtoul_l.constprop.0+0x94>
 800cc20:	3c37      	subs	r4, #55	; 0x37
 800cc22:	e7e4      	b.n	800cbee <_strtoul_l.constprop.0+0x5e>
 800cc24:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800cc28:	f1bc 0f19 	cmp.w	ip, #25
 800cc2c:	d804      	bhi.n	800cc38 <_strtoul_l.constprop.0+0xa8>
 800cc2e:	3c57      	subs	r4, #87	; 0x57
 800cc30:	e7dd      	b.n	800cbee <_strtoul_l.constprop.0+0x5e>
 800cc32:	f04f 37ff 	mov.w	r7, #4294967295
 800cc36:	e7e6      	b.n	800cc06 <_strtoul_l.constprop.0+0x76>
 800cc38:	2f00      	cmp	r7, #0
 800cc3a:	da07      	bge.n	800cc4c <_strtoul_l.constprop.0+0xbc>
 800cc3c:	2322      	movs	r3, #34	; 0x22
 800cc3e:	f8ce 3000 	str.w	r3, [lr]
 800cc42:	f04f 30ff 	mov.w	r0, #4294967295
 800cc46:	b932      	cbnz	r2, 800cc56 <_strtoul_l.constprop.0+0xc6>
 800cc48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc4c:	b106      	cbz	r6, 800cc50 <_strtoul_l.constprop.0+0xc0>
 800cc4e:	4240      	negs	r0, r0
 800cc50:	2a00      	cmp	r2, #0
 800cc52:	d0f9      	beq.n	800cc48 <_strtoul_l.constprop.0+0xb8>
 800cc54:	b107      	cbz	r7, 800cc58 <_strtoul_l.constprop.0+0xc8>
 800cc56:	1e69      	subs	r1, r5, #1
 800cc58:	6011      	str	r1, [r2, #0]
 800cc5a:	e7f5      	b.n	800cc48 <_strtoul_l.constprop.0+0xb8>
 800cc5c:	2430      	movs	r4, #48	; 0x30
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d1b5      	bne.n	800cbce <_strtoul_l.constprop.0+0x3e>
 800cc62:	2308      	movs	r3, #8
 800cc64:	e7b3      	b.n	800cbce <_strtoul_l.constprop.0+0x3e>
 800cc66:	2c30      	cmp	r4, #48	; 0x30
 800cc68:	d0a9      	beq.n	800cbbe <_strtoul_l.constprop.0+0x2e>
 800cc6a:	230a      	movs	r3, #10
 800cc6c:	e7af      	b.n	800cbce <_strtoul_l.constprop.0+0x3e>
 800cc6e:	bf00      	nop
 800cc70:	0800dc43 	.word	0x0800dc43

0800cc74 <_strtoul_r>:
 800cc74:	f7ff bf8c 	b.w	800cb90 <_strtoul_l.constprop.0>

0800cc78 <__submore>:
 800cc78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc7c:	460c      	mov	r4, r1
 800cc7e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800cc80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cc84:	4299      	cmp	r1, r3
 800cc86:	d11d      	bne.n	800ccc4 <__submore+0x4c>
 800cc88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800cc8c:	f000 f8b6 	bl	800cdfc <_malloc_r>
 800cc90:	b918      	cbnz	r0, 800cc9a <__submore+0x22>
 800cc92:	f04f 30ff 	mov.w	r0, #4294967295
 800cc96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc9e:	63a3      	str	r3, [r4, #56]	; 0x38
 800cca0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800cca4:	6360      	str	r0, [r4, #52]	; 0x34
 800cca6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800ccaa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ccae:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800ccb2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ccb6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800ccba:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800ccbe:	6020      	str	r0, [r4, #0]
 800ccc0:	2000      	movs	r0, #0
 800ccc2:	e7e8      	b.n	800cc96 <__submore+0x1e>
 800ccc4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800ccc6:	0077      	lsls	r7, r6, #1
 800ccc8:	463a      	mov	r2, r7
 800ccca:	f000 f90b 	bl	800cee4 <_realloc_r>
 800ccce:	4605      	mov	r5, r0
 800ccd0:	2800      	cmp	r0, #0
 800ccd2:	d0de      	beq.n	800cc92 <__submore+0x1a>
 800ccd4:	eb00 0806 	add.w	r8, r0, r6
 800ccd8:	4601      	mov	r1, r0
 800ccda:	4632      	mov	r2, r6
 800ccdc:	4640      	mov	r0, r8
 800ccde:	f7fe ffef 	bl	800bcc0 <memcpy>
 800cce2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800cce6:	f8c4 8000 	str.w	r8, [r4]
 800ccea:	e7e9      	b.n	800ccc0 <__submore+0x48>

0800ccec <__retarget_lock_acquire_recursive>:
 800ccec:	4770      	bx	lr

0800ccee <__retarget_lock_release_recursive>:
 800ccee:	4770      	bx	lr

0800ccf0 <memmove>:
 800ccf0:	4288      	cmp	r0, r1
 800ccf2:	b510      	push	{r4, lr}
 800ccf4:	eb01 0402 	add.w	r4, r1, r2
 800ccf8:	d902      	bls.n	800cd00 <memmove+0x10>
 800ccfa:	4284      	cmp	r4, r0
 800ccfc:	4623      	mov	r3, r4
 800ccfe:	d807      	bhi.n	800cd10 <memmove+0x20>
 800cd00:	1e43      	subs	r3, r0, #1
 800cd02:	42a1      	cmp	r1, r4
 800cd04:	d008      	beq.n	800cd18 <memmove+0x28>
 800cd06:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cd0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cd0e:	e7f8      	b.n	800cd02 <memmove+0x12>
 800cd10:	4402      	add	r2, r0
 800cd12:	4601      	mov	r1, r0
 800cd14:	428a      	cmp	r2, r1
 800cd16:	d100      	bne.n	800cd1a <memmove+0x2a>
 800cd18:	bd10      	pop	{r4, pc}
 800cd1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cd1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cd22:	e7f7      	b.n	800cd14 <memmove+0x24>

0800cd24 <_free_r>:
 800cd24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cd26:	2900      	cmp	r1, #0
 800cd28:	d044      	beq.n	800cdb4 <_free_r+0x90>
 800cd2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd2e:	9001      	str	r0, [sp, #4]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	f1a1 0404 	sub.w	r4, r1, #4
 800cd36:	bfb8      	it	lt
 800cd38:	18e4      	addlt	r4, r4, r3
 800cd3a:	f000 f913 	bl	800cf64 <__malloc_lock>
 800cd3e:	4a1e      	ldr	r2, [pc, #120]	; (800cdb8 <_free_r+0x94>)
 800cd40:	9801      	ldr	r0, [sp, #4]
 800cd42:	6813      	ldr	r3, [r2, #0]
 800cd44:	b933      	cbnz	r3, 800cd54 <_free_r+0x30>
 800cd46:	6063      	str	r3, [r4, #4]
 800cd48:	6014      	str	r4, [r2, #0]
 800cd4a:	b003      	add	sp, #12
 800cd4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cd50:	f000 b90e 	b.w	800cf70 <__malloc_unlock>
 800cd54:	42a3      	cmp	r3, r4
 800cd56:	d908      	bls.n	800cd6a <_free_r+0x46>
 800cd58:	6825      	ldr	r5, [r4, #0]
 800cd5a:	1961      	adds	r1, r4, r5
 800cd5c:	428b      	cmp	r3, r1
 800cd5e:	bf01      	itttt	eq
 800cd60:	6819      	ldreq	r1, [r3, #0]
 800cd62:	685b      	ldreq	r3, [r3, #4]
 800cd64:	1949      	addeq	r1, r1, r5
 800cd66:	6021      	streq	r1, [r4, #0]
 800cd68:	e7ed      	b.n	800cd46 <_free_r+0x22>
 800cd6a:	461a      	mov	r2, r3
 800cd6c:	685b      	ldr	r3, [r3, #4]
 800cd6e:	b10b      	cbz	r3, 800cd74 <_free_r+0x50>
 800cd70:	42a3      	cmp	r3, r4
 800cd72:	d9fa      	bls.n	800cd6a <_free_r+0x46>
 800cd74:	6811      	ldr	r1, [r2, #0]
 800cd76:	1855      	adds	r5, r2, r1
 800cd78:	42a5      	cmp	r5, r4
 800cd7a:	d10b      	bne.n	800cd94 <_free_r+0x70>
 800cd7c:	6824      	ldr	r4, [r4, #0]
 800cd7e:	4421      	add	r1, r4
 800cd80:	1854      	adds	r4, r2, r1
 800cd82:	42a3      	cmp	r3, r4
 800cd84:	6011      	str	r1, [r2, #0]
 800cd86:	d1e0      	bne.n	800cd4a <_free_r+0x26>
 800cd88:	681c      	ldr	r4, [r3, #0]
 800cd8a:	685b      	ldr	r3, [r3, #4]
 800cd8c:	6053      	str	r3, [r2, #4]
 800cd8e:	4421      	add	r1, r4
 800cd90:	6011      	str	r1, [r2, #0]
 800cd92:	e7da      	b.n	800cd4a <_free_r+0x26>
 800cd94:	d902      	bls.n	800cd9c <_free_r+0x78>
 800cd96:	230c      	movs	r3, #12
 800cd98:	6003      	str	r3, [r0, #0]
 800cd9a:	e7d6      	b.n	800cd4a <_free_r+0x26>
 800cd9c:	6825      	ldr	r5, [r4, #0]
 800cd9e:	1961      	adds	r1, r4, r5
 800cda0:	428b      	cmp	r3, r1
 800cda2:	bf04      	itt	eq
 800cda4:	6819      	ldreq	r1, [r3, #0]
 800cda6:	685b      	ldreq	r3, [r3, #4]
 800cda8:	6063      	str	r3, [r4, #4]
 800cdaa:	bf04      	itt	eq
 800cdac:	1949      	addeq	r1, r1, r5
 800cdae:	6021      	streq	r1, [r4, #0]
 800cdb0:	6054      	str	r4, [r2, #4]
 800cdb2:	e7ca      	b.n	800cd4a <_free_r+0x26>
 800cdb4:	b003      	add	sp, #12
 800cdb6:	bd30      	pop	{r4, r5, pc}
 800cdb8:	20005064 	.word	0x20005064

0800cdbc <sbrk_aligned>:
 800cdbc:	b570      	push	{r4, r5, r6, lr}
 800cdbe:	4e0e      	ldr	r6, [pc, #56]	; (800cdf8 <sbrk_aligned+0x3c>)
 800cdc0:	460c      	mov	r4, r1
 800cdc2:	6831      	ldr	r1, [r6, #0]
 800cdc4:	4605      	mov	r5, r0
 800cdc6:	b911      	cbnz	r1, 800cdce <sbrk_aligned+0x12>
 800cdc8:	f000 f8bc 	bl	800cf44 <_sbrk_r>
 800cdcc:	6030      	str	r0, [r6, #0]
 800cdce:	4621      	mov	r1, r4
 800cdd0:	4628      	mov	r0, r5
 800cdd2:	f000 f8b7 	bl	800cf44 <_sbrk_r>
 800cdd6:	1c43      	adds	r3, r0, #1
 800cdd8:	d00a      	beq.n	800cdf0 <sbrk_aligned+0x34>
 800cdda:	1cc4      	adds	r4, r0, #3
 800cddc:	f024 0403 	bic.w	r4, r4, #3
 800cde0:	42a0      	cmp	r0, r4
 800cde2:	d007      	beq.n	800cdf4 <sbrk_aligned+0x38>
 800cde4:	1a21      	subs	r1, r4, r0
 800cde6:	4628      	mov	r0, r5
 800cde8:	f000 f8ac 	bl	800cf44 <_sbrk_r>
 800cdec:	3001      	adds	r0, #1
 800cdee:	d101      	bne.n	800cdf4 <sbrk_aligned+0x38>
 800cdf0:	f04f 34ff 	mov.w	r4, #4294967295
 800cdf4:	4620      	mov	r0, r4
 800cdf6:	bd70      	pop	{r4, r5, r6, pc}
 800cdf8:	20005068 	.word	0x20005068

0800cdfc <_malloc_r>:
 800cdfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce00:	1ccd      	adds	r5, r1, #3
 800ce02:	f025 0503 	bic.w	r5, r5, #3
 800ce06:	3508      	adds	r5, #8
 800ce08:	2d0c      	cmp	r5, #12
 800ce0a:	bf38      	it	cc
 800ce0c:	250c      	movcc	r5, #12
 800ce0e:	2d00      	cmp	r5, #0
 800ce10:	4607      	mov	r7, r0
 800ce12:	db01      	blt.n	800ce18 <_malloc_r+0x1c>
 800ce14:	42a9      	cmp	r1, r5
 800ce16:	d905      	bls.n	800ce24 <_malloc_r+0x28>
 800ce18:	230c      	movs	r3, #12
 800ce1a:	603b      	str	r3, [r7, #0]
 800ce1c:	2600      	movs	r6, #0
 800ce1e:	4630      	mov	r0, r6
 800ce20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce24:	4e2e      	ldr	r6, [pc, #184]	; (800cee0 <_malloc_r+0xe4>)
 800ce26:	f000 f89d 	bl	800cf64 <__malloc_lock>
 800ce2a:	6833      	ldr	r3, [r6, #0]
 800ce2c:	461c      	mov	r4, r3
 800ce2e:	bb34      	cbnz	r4, 800ce7e <_malloc_r+0x82>
 800ce30:	4629      	mov	r1, r5
 800ce32:	4638      	mov	r0, r7
 800ce34:	f7ff ffc2 	bl	800cdbc <sbrk_aligned>
 800ce38:	1c43      	adds	r3, r0, #1
 800ce3a:	4604      	mov	r4, r0
 800ce3c:	d14d      	bne.n	800ceda <_malloc_r+0xde>
 800ce3e:	6834      	ldr	r4, [r6, #0]
 800ce40:	4626      	mov	r6, r4
 800ce42:	2e00      	cmp	r6, #0
 800ce44:	d140      	bne.n	800cec8 <_malloc_r+0xcc>
 800ce46:	6823      	ldr	r3, [r4, #0]
 800ce48:	4631      	mov	r1, r6
 800ce4a:	4638      	mov	r0, r7
 800ce4c:	eb04 0803 	add.w	r8, r4, r3
 800ce50:	f000 f878 	bl	800cf44 <_sbrk_r>
 800ce54:	4580      	cmp	r8, r0
 800ce56:	d13a      	bne.n	800cece <_malloc_r+0xd2>
 800ce58:	6821      	ldr	r1, [r4, #0]
 800ce5a:	3503      	adds	r5, #3
 800ce5c:	1a6d      	subs	r5, r5, r1
 800ce5e:	f025 0503 	bic.w	r5, r5, #3
 800ce62:	3508      	adds	r5, #8
 800ce64:	2d0c      	cmp	r5, #12
 800ce66:	bf38      	it	cc
 800ce68:	250c      	movcc	r5, #12
 800ce6a:	4629      	mov	r1, r5
 800ce6c:	4638      	mov	r0, r7
 800ce6e:	f7ff ffa5 	bl	800cdbc <sbrk_aligned>
 800ce72:	3001      	adds	r0, #1
 800ce74:	d02b      	beq.n	800cece <_malloc_r+0xd2>
 800ce76:	6823      	ldr	r3, [r4, #0]
 800ce78:	442b      	add	r3, r5
 800ce7a:	6023      	str	r3, [r4, #0]
 800ce7c:	e00e      	b.n	800ce9c <_malloc_r+0xa0>
 800ce7e:	6822      	ldr	r2, [r4, #0]
 800ce80:	1b52      	subs	r2, r2, r5
 800ce82:	d41e      	bmi.n	800cec2 <_malloc_r+0xc6>
 800ce84:	2a0b      	cmp	r2, #11
 800ce86:	d916      	bls.n	800ceb6 <_malloc_r+0xba>
 800ce88:	1961      	adds	r1, r4, r5
 800ce8a:	42a3      	cmp	r3, r4
 800ce8c:	6025      	str	r5, [r4, #0]
 800ce8e:	bf18      	it	ne
 800ce90:	6059      	strne	r1, [r3, #4]
 800ce92:	6863      	ldr	r3, [r4, #4]
 800ce94:	bf08      	it	eq
 800ce96:	6031      	streq	r1, [r6, #0]
 800ce98:	5162      	str	r2, [r4, r5]
 800ce9a:	604b      	str	r3, [r1, #4]
 800ce9c:	4638      	mov	r0, r7
 800ce9e:	f104 060b 	add.w	r6, r4, #11
 800cea2:	f000 f865 	bl	800cf70 <__malloc_unlock>
 800cea6:	f026 0607 	bic.w	r6, r6, #7
 800ceaa:	1d23      	adds	r3, r4, #4
 800ceac:	1af2      	subs	r2, r6, r3
 800ceae:	d0b6      	beq.n	800ce1e <_malloc_r+0x22>
 800ceb0:	1b9b      	subs	r3, r3, r6
 800ceb2:	50a3      	str	r3, [r4, r2]
 800ceb4:	e7b3      	b.n	800ce1e <_malloc_r+0x22>
 800ceb6:	6862      	ldr	r2, [r4, #4]
 800ceb8:	42a3      	cmp	r3, r4
 800ceba:	bf0c      	ite	eq
 800cebc:	6032      	streq	r2, [r6, #0]
 800cebe:	605a      	strne	r2, [r3, #4]
 800cec0:	e7ec      	b.n	800ce9c <_malloc_r+0xa0>
 800cec2:	4623      	mov	r3, r4
 800cec4:	6864      	ldr	r4, [r4, #4]
 800cec6:	e7b2      	b.n	800ce2e <_malloc_r+0x32>
 800cec8:	4634      	mov	r4, r6
 800ceca:	6876      	ldr	r6, [r6, #4]
 800cecc:	e7b9      	b.n	800ce42 <_malloc_r+0x46>
 800cece:	230c      	movs	r3, #12
 800ced0:	603b      	str	r3, [r7, #0]
 800ced2:	4638      	mov	r0, r7
 800ced4:	f000 f84c 	bl	800cf70 <__malloc_unlock>
 800ced8:	e7a1      	b.n	800ce1e <_malloc_r+0x22>
 800ceda:	6025      	str	r5, [r4, #0]
 800cedc:	e7de      	b.n	800ce9c <_malloc_r+0xa0>
 800cede:	bf00      	nop
 800cee0:	20005064 	.word	0x20005064

0800cee4 <_realloc_r>:
 800cee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cee8:	4680      	mov	r8, r0
 800ceea:	4614      	mov	r4, r2
 800ceec:	460e      	mov	r6, r1
 800ceee:	b921      	cbnz	r1, 800cefa <_realloc_r+0x16>
 800cef0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cef4:	4611      	mov	r1, r2
 800cef6:	f7ff bf81 	b.w	800cdfc <_malloc_r>
 800cefa:	b92a      	cbnz	r2, 800cf08 <_realloc_r+0x24>
 800cefc:	f7ff ff12 	bl	800cd24 <_free_r>
 800cf00:	4625      	mov	r5, r4
 800cf02:	4628      	mov	r0, r5
 800cf04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf08:	f000 f838 	bl	800cf7c <_malloc_usable_size_r>
 800cf0c:	4284      	cmp	r4, r0
 800cf0e:	4607      	mov	r7, r0
 800cf10:	d802      	bhi.n	800cf18 <_realloc_r+0x34>
 800cf12:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cf16:	d812      	bhi.n	800cf3e <_realloc_r+0x5a>
 800cf18:	4621      	mov	r1, r4
 800cf1a:	4640      	mov	r0, r8
 800cf1c:	f7ff ff6e 	bl	800cdfc <_malloc_r>
 800cf20:	4605      	mov	r5, r0
 800cf22:	2800      	cmp	r0, #0
 800cf24:	d0ed      	beq.n	800cf02 <_realloc_r+0x1e>
 800cf26:	42bc      	cmp	r4, r7
 800cf28:	4622      	mov	r2, r4
 800cf2a:	4631      	mov	r1, r6
 800cf2c:	bf28      	it	cs
 800cf2e:	463a      	movcs	r2, r7
 800cf30:	f7fe fec6 	bl	800bcc0 <memcpy>
 800cf34:	4631      	mov	r1, r6
 800cf36:	4640      	mov	r0, r8
 800cf38:	f7ff fef4 	bl	800cd24 <_free_r>
 800cf3c:	e7e1      	b.n	800cf02 <_realloc_r+0x1e>
 800cf3e:	4635      	mov	r5, r6
 800cf40:	e7df      	b.n	800cf02 <_realloc_r+0x1e>
	...

0800cf44 <_sbrk_r>:
 800cf44:	b538      	push	{r3, r4, r5, lr}
 800cf46:	4d06      	ldr	r5, [pc, #24]	; (800cf60 <_sbrk_r+0x1c>)
 800cf48:	2300      	movs	r3, #0
 800cf4a:	4604      	mov	r4, r0
 800cf4c:	4608      	mov	r0, r1
 800cf4e:	602b      	str	r3, [r5, #0]
 800cf50:	f7f6 f95c 	bl	800320c <_sbrk>
 800cf54:	1c43      	adds	r3, r0, #1
 800cf56:	d102      	bne.n	800cf5e <_sbrk_r+0x1a>
 800cf58:	682b      	ldr	r3, [r5, #0]
 800cf5a:	b103      	cbz	r3, 800cf5e <_sbrk_r+0x1a>
 800cf5c:	6023      	str	r3, [r4, #0]
 800cf5e:	bd38      	pop	{r3, r4, r5, pc}
 800cf60:	2000505c 	.word	0x2000505c

0800cf64 <__malloc_lock>:
 800cf64:	4801      	ldr	r0, [pc, #4]	; (800cf6c <__malloc_lock+0x8>)
 800cf66:	f7ff bec1 	b.w	800ccec <__retarget_lock_acquire_recursive>
 800cf6a:	bf00      	nop
 800cf6c:	20005060 	.word	0x20005060

0800cf70 <__malloc_unlock>:
 800cf70:	4801      	ldr	r0, [pc, #4]	; (800cf78 <__malloc_unlock+0x8>)
 800cf72:	f7ff bebc 	b.w	800ccee <__retarget_lock_release_recursive>
 800cf76:	bf00      	nop
 800cf78:	20005060 	.word	0x20005060

0800cf7c <_malloc_usable_size_r>:
 800cf7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf80:	1f18      	subs	r0, r3, #4
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	bfbc      	itt	lt
 800cf86:	580b      	ldrlt	r3, [r1, r0]
 800cf88:	18c0      	addlt	r0, r0, r3
 800cf8a:	4770      	bx	lr

0800cf8c <_init>:
 800cf8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf8e:	bf00      	nop
 800cf90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf92:	bc08      	pop	{r3}
 800cf94:	469e      	mov	lr, r3
 800cf96:	4770      	bx	lr

0800cf98 <_fini>:
 800cf98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf9a:	bf00      	nop
 800cf9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf9e:	bc08      	pop	{r3}
 800cfa0:	469e      	mov	lr, r3
 800cfa2:	4770      	bx	lr
