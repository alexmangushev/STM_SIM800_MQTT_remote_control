
F446RC_MQTT_monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb94  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bcc  0800cd64  0800cd64  0001cd64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d930  0800d930  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d930  0800d930  0001d930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d938  0800d938  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d938  0800d938  0001d938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d93c  0800d93c  0001d93c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0800d940  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004fb4  2000009c  0800d9dc  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005050  0800d9dc  00025050  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fea5  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003da3  00000000  00000000  0003ff71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001af0  00000000  00000000  00043d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019b0  00000000  00000000  00045808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000047be  00000000  00000000  000471b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001eedb  00000000  00000000  0004b976  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e06f7  00000000  00000000  0006a851  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014af48  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c08  00000000  00000000  0014af98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000009c 	.word	0x2000009c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800cd4c 	.word	0x0800cd4c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a0 	.word	0x200000a0
 800020c:	0800cd4c 	.word	0x0800cd4c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c8:	f003 f92a 	bl	8003820 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005cc:	f000 f8ba 	bl	8000744 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d0:	f000 fa24 	bl	8000a1c <MX_GPIO_Init>
  MX_DMA_Init();
 80005d4:	f000 f9dc 	bl	8000990 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80005d8:	f000 f986 	bl	80008e8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80005dc:	f000 f9ae 	bl	800093c <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80005e0:	f000 f94c 	bl	800087c <MX_SPI2_Init>
  MX_I2C1_Init();
 80005e4:	f000 f91c 	bl	8000820 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005e8:	f007 fa0c 	bl	8007a04 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of UART1Mutex */
  UART1MutexHandle = osMutexNew(&UART1Mutex_attributes);
 80005ec:	4834      	ldr	r0, [pc, #208]	; (80006c0 <main+0xfc>)
 80005ee:	f007 fbed 	bl	8007dcc <osMutexNew>
 80005f2:	4603      	mov	r3, r0
 80005f4:	4a33      	ldr	r2, [pc, #204]	; (80006c4 <main+0x100>)
 80005f6:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of PINGSem */
  PINGSemHandle = osSemaphoreNew(1, 0, &PINGSem_attributes);
 80005f8:	4a33      	ldr	r2, [pc, #204]	; (80006c8 <main+0x104>)
 80005fa:	2100      	movs	r1, #0
 80005fc:	2001      	movs	r0, #1
 80005fe:	f007 fcf3 	bl	8007fe8 <osSemaphoreNew>
 8000602:	4603      	mov	r3, r0
 8000604:	4a31      	ldr	r2, [pc, #196]	; (80006cc <main+0x108>)
 8000606:	6013      	str	r3, [r2, #0]

  /* creation of SemGetTemp */
  SemGetTempHandle = osSemaphoreNew(1, 0, &SemGetTemp_attributes);
 8000608:	4a31      	ldr	r2, [pc, #196]	; (80006d0 <main+0x10c>)
 800060a:	2100      	movs	r1, #0
 800060c:	2001      	movs	r0, #1
 800060e:	f007 fceb 	bl	8007fe8 <osSemaphoreNew>
 8000612:	4603      	mov	r3, r0
 8000614:	4a2f      	ldr	r2, [pc, #188]	; (80006d4 <main+0x110>)
 8000616:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of PingTimer */
  PingTimerHandle = osTimerNew(CallbackPingTimer, osTimerPeriodic, NULL, &PingTimer_attributes);
 8000618:	4b2f      	ldr	r3, [pc, #188]	; (80006d8 <main+0x114>)
 800061a:	2200      	movs	r2, #0
 800061c:	2101      	movs	r1, #1
 800061e:	482f      	ldr	r0, [pc, #188]	; (80006dc <main+0x118>)
 8000620:	f007 fb2a 	bl	8007c78 <osTimerNew>
 8000624:	4603      	mov	r3, r0
 8000626:	4a2e      	ldr	r2, [pc, #184]	; (80006e0 <main+0x11c>)
 8000628:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of debugQueue */
  debugQueueHandle = osMessageQueueNew (10, sizeof(message_type), &debugQueue_attributes);
 800062a:	4a2e      	ldr	r2, [pc, #184]	; (80006e4 <main+0x120>)
 800062c:	2146      	movs	r1, #70	; 0x46
 800062e:	200a      	movs	r0, #10
 8000630:	f007 fdfa 	bl	8008228 <osMessageQueueNew>
 8000634:	4603      	mov	r3, r0
 8000636:	4a2c      	ldr	r2, [pc, #176]	; (80006e8 <main+0x124>)
 8000638:	6013      	str	r3, [r2, #0]

  /* creation of SIM800SendQueue */
  SIM800SendQueueHandle = osMessageQueueNew (10, sizeof(message_type), &SIM800SendQueue_attributes);
 800063a:	4a2c      	ldr	r2, [pc, #176]	; (80006ec <main+0x128>)
 800063c:	2146      	movs	r1, #70	; 0x46
 800063e:	200a      	movs	r0, #10
 8000640:	f007 fdf2 	bl	8008228 <osMessageQueueNew>
 8000644:	4603      	mov	r3, r0
 8000646:	4a2a      	ldr	r2, [pc, #168]	; (80006f0 <main+0x12c>)
 8000648:	6013      	str	r3, [r2, #0]

  /* creation of RxSIM800Queue */
  RxSIM800QueueHandle = osMessageQueueNew (10, sizeof(message_type), &RxSIM800Queue_attributes);
 800064a:	4a2a      	ldr	r2, [pc, #168]	; (80006f4 <main+0x130>)
 800064c:	2146      	movs	r1, #70	; 0x46
 800064e:	200a      	movs	r0, #10
 8000650:	f007 fdea 	bl	8008228 <osMessageQueueNew>
 8000654:	4603      	mov	r3, r0
 8000656:	4a28      	ldr	r2, [pc, #160]	; (80006f8 <main+0x134>)
 8000658:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800065a:	4a28      	ldr	r2, [pc, #160]	; (80006fc <main+0x138>)
 800065c:	2100      	movs	r1, #0
 800065e:	4828      	ldr	r0, [pc, #160]	; (8000700 <main+0x13c>)
 8000660:	f007 fa1a 	bl	8007a98 <osThreadNew>
 8000664:	4603      	mov	r3, r0
 8000666:	4a27      	ldr	r2, [pc, #156]	; (8000704 <main+0x140>)
 8000668:	6013      	str	r3, [r2, #0]

  /* creation of GetTempTask */
  GetTempTaskHandle = osThreadNew(StartGetTempTask, NULL, &GetTempTask_attributes);
 800066a:	4a27      	ldr	r2, [pc, #156]	; (8000708 <main+0x144>)
 800066c:	2100      	movs	r1, #0
 800066e:	4827      	ldr	r0, [pc, #156]	; (800070c <main+0x148>)
 8000670:	f007 fa12 	bl	8007a98 <osThreadNew>
 8000674:	4603      	mov	r3, r0
 8000676:	4a26      	ldr	r2, [pc, #152]	; (8000710 <main+0x14c>)
 8000678:	6013      	str	r3, [r2, #0]

  /* creation of DebugTask */
  DebugTaskHandle = osThreadNew(StartDebugTask, NULL, &DebugTask_attributes);
 800067a:	4a26      	ldr	r2, [pc, #152]	; (8000714 <main+0x150>)
 800067c:	2100      	movs	r1, #0
 800067e:	4826      	ldr	r0, [pc, #152]	; (8000718 <main+0x154>)
 8000680:	f007 fa0a 	bl	8007a98 <osThreadNew>
 8000684:	4603      	mov	r3, r0
 8000686:	4a25      	ldr	r2, [pc, #148]	; (800071c <main+0x158>)
 8000688:	6013      	str	r3, [r2, #0]

  /* creation of SIM800SendTask */
  SIM800SendTaskHandle = osThreadNew(StartSIM800SendTask, NULL, &SIM800SendTask_attributes);
 800068a:	4a25      	ldr	r2, [pc, #148]	; (8000720 <main+0x15c>)
 800068c:	2100      	movs	r1, #0
 800068e:	4825      	ldr	r0, [pc, #148]	; (8000724 <main+0x160>)
 8000690:	f007 fa02 	bl	8007a98 <osThreadNew>
 8000694:	4603      	mov	r3, r0
 8000696:	4a24      	ldr	r2, [pc, #144]	; (8000728 <main+0x164>)
 8000698:	6013      	str	r3, [r2, #0]

  /* creation of PINGTask */
  //PINGTaskHandle = osThreadNew(PINGStartTask, NULL, &PINGTask_attributes);

  /* creation of SIM800StartTask */
  SIM800StartTaskHandle = osThreadNew(StartSIM800Task, NULL, &SIM800StartTask_attributes);
 800069a:	4a24      	ldr	r2, [pc, #144]	; (800072c <main+0x168>)
 800069c:	2100      	movs	r1, #0
 800069e:	4824      	ldr	r0, [pc, #144]	; (8000730 <main+0x16c>)
 80006a0:	f007 f9fa 	bl	8007a98 <osThreadNew>
 80006a4:	4603      	mov	r3, r0
 80006a6:	4a23      	ldr	r2, [pc, #140]	; (8000734 <main+0x170>)
 80006a8:	6013      	str	r3, [r2, #0]

  /* creation of MQTTConnectTask */
  //MQTTConnectTaskHandle = osThreadNew(StartMQTTConnectTask, NULL, &MQTTConnectTask_attributes);

  /* creation of MessHandlerTask */
  MessHandlerTaskHandle = osThreadNew(StartMessHandlerTask, NULL, &MessHandlerTask_attributes);
 80006aa:	4a23      	ldr	r2, [pc, #140]	; (8000738 <main+0x174>)
 80006ac:	2100      	movs	r1, #0
 80006ae:	4823      	ldr	r0, [pc, #140]	; (800073c <main+0x178>)
 80006b0:	f007 f9f2 	bl	8007a98 <osThreadNew>
 80006b4:	4603      	mov	r3, r0
 80006b6:	4a22      	ldr	r2, [pc, #136]	; (8000740 <main+0x17c>)
 80006b8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006ba:	f007 f9c7 	bl	8007a4c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006be:	e7fe      	b.n	80006be <main+0xfa>
 80006c0:	0800d730 	.word	0x0800d730
 80006c4:	200003a0 	.word	0x200003a0
 80006c8:	0800d740 	.word	0x0800d740
 80006cc:	200003a4 	.word	0x200003a4
 80006d0:	0800d750 	.word	0x0800d750
 80006d4:	200003a8 	.word	0x200003a8
 80006d8:	0800d720 	.word	0x0800d720
 80006dc:	080029bd 	.word	0x080029bd
 80006e0:	2000039c 	.word	0x2000039c
 80006e4:	0800d6d8 	.word	0x0800d6d8
 80006e8:	20000390 	.word	0x20000390
 80006ec:	0800d6f0 	.word	0x0800d6f0
 80006f0:	20000394 	.word	0x20000394
 80006f4:	0800d708 	.word	0x0800d708
 80006f8:	20000398 	.word	0x20000398
 80006fc:	0800d594 	.word	0x0800d594
 8000700:	08000ec9 	.word	0x08000ec9
 8000704:	2000036c 	.word	0x2000036c
 8000708:	0800d5b8 	.word	0x0800d5b8
 800070c:	08000f5d 	.word	0x08000f5d
 8000710:	20000370 	.word	0x20000370
 8000714:	0800d5dc 	.word	0x0800d5dc
 8000718:	08000fa9 	.word	0x08000fa9
 800071c:	20000374 	.word	0x20000374
 8000720:	0800d600 	.word	0x0800d600
 8000724:	08000fe1 	.word	0x08000fe1
 8000728:	20000378 	.word	0x20000378
 800072c:	0800d648 	.word	0x0800d648
 8000730:	080013fd 	.word	0x080013fd
 8000734:	20000380 	.word	0x20000380
 8000738:	0800d690 	.word	0x0800d690
 800073c:	08001ef9 	.word	0x08001ef9
 8000740:	20000388 	.word	0x20000388

08000744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b094      	sub	sp, #80	; 0x50
 8000748:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074a:	f107 031c 	add.w	r3, r7, #28
 800074e:	2234      	movs	r2, #52	; 0x34
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f00b f9a2 	bl	800ba9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000758:	f107 0308 	add.w	r3, r7, #8
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000768:	2300      	movs	r3, #0
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	4b2a      	ldr	r3, [pc, #168]	; (8000818 <SystemClock_Config+0xd4>)
 800076e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000770:	4a29      	ldr	r2, [pc, #164]	; (8000818 <SystemClock_Config+0xd4>)
 8000772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000776:	6413      	str	r3, [r2, #64]	; 0x40
 8000778:	4b27      	ldr	r3, [pc, #156]	; (8000818 <SystemClock_Config+0xd4>)
 800077a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000784:	2300      	movs	r3, #0
 8000786:	603b      	str	r3, [r7, #0]
 8000788:	4b24      	ldr	r3, [pc, #144]	; (800081c <SystemClock_Config+0xd8>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000790:	4a22      	ldr	r2, [pc, #136]	; (800081c <SystemClock_Config+0xd8>)
 8000792:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000796:	6013      	str	r3, [r2, #0]
 8000798:	4b20      	ldr	r3, [pc, #128]	; (800081c <SystemClock_Config+0xd8>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007a0:	603b      	str	r3, [r7, #0]
 80007a2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007a4:	2302      	movs	r3, #2
 80007a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a8:	2301      	movs	r3, #1
 80007aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ac:	2310      	movs	r3, #16
 80007ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b0:	2302      	movs	r3, #2
 80007b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007b4:	2300      	movs	r3, #0
 80007b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007b8:	2310      	movs	r3, #16
 80007ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 80007bc:	23c0      	movs	r3, #192	; 0xc0
 80007be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007c0:	2302      	movs	r3, #2
 80007c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007c4:	2302      	movs	r3, #2
 80007c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007c8:	2302      	movs	r3, #2
 80007ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007cc:	f107 031c 	add.w	r3, r7, #28
 80007d0:	4618      	mov	r0, r3
 80007d2:	f004 fba5 	bl	8004f20 <HAL_RCC_OscConfig>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80007dc:	f002 f910 	bl	8002a00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e0:	230f      	movs	r3, #15
 80007e2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e4:	2302      	movs	r3, #2
 80007e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007ec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007f8:	f107 0308 	add.w	r3, r7, #8
 80007fc:	2103      	movs	r1, #3
 80007fe:	4618      	mov	r0, r3
 8000800:	f004 f898 	bl	8004934 <HAL_RCC_ClockConfig>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800080a:	f002 f8f9 	bl	8002a00 <Error_Handler>
  }
}
 800080e:	bf00      	nop
 8000810:	3750      	adds	r7, #80	; 0x50
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40023800 	.word	0x40023800
 800081c:	40007000 	.word	0x40007000

08000820 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000824:	4b12      	ldr	r3, [pc, #72]	; (8000870 <MX_I2C1_Init+0x50>)
 8000826:	4a13      	ldr	r2, [pc, #76]	; (8000874 <MX_I2C1_Init+0x54>)
 8000828:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800082a:	4b11      	ldr	r3, [pc, #68]	; (8000870 <MX_I2C1_Init+0x50>)
 800082c:	4a12      	ldr	r2, [pc, #72]	; (8000878 <MX_I2C1_Init+0x58>)
 800082e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000830:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <MX_I2C1_Init+0x50>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000836:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <MX_I2C1_Init+0x50>)
 8000838:	2200      	movs	r2, #0
 800083a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800083c:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <MX_I2C1_Init+0x50>)
 800083e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000842:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000844:	4b0a      	ldr	r3, [pc, #40]	; (8000870 <MX_I2C1_Init+0x50>)
 8000846:	2200      	movs	r2, #0
 8000848:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800084a:	4b09      	ldr	r3, [pc, #36]	; (8000870 <MX_I2C1_Init+0x50>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000850:	4b07      	ldr	r3, [pc, #28]	; (8000870 <MX_I2C1_Init+0x50>)
 8000852:	2200      	movs	r2, #0
 8000854:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000856:	4b06      	ldr	r3, [pc, #24]	; (8000870 <MX_I2C1_Init+0x50>)
 8000858:	2200      	movs	r2, #0
 800085a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800085c:	4804      	ldr	r0, [pc, #16]	; (8000870 <MX_I2C1_Init+0x50>)
 800085e:	f003 ff25 	bl	80046ac <HAL_I2C_Init>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000868:	f002 f8ca 	bl	8002a00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}
 8000870:	200000b8 	.word	0x200000b8
 8000874:	40005400 	.word	0x40005400
 8000878:	000186a0 	.word	0x000186a0

0800087c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000880:	4b17      	ldr	r3, [pc, #92]	; (80008e0 <MX_SPI2_Init+0x64>)
 8000882:	4a18      	ldr	r2, [pc, #96]	; (80008e4 <MX_SPI2_Init+0x68>)
 8000884:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000886:	4b16      	ldr	r3, [pc, #88]	; (80008e0 <MX_SPI2_Init+0x64>)
 8000888:	f44f 7282 	mov.w	r2, #260	; 0x104
 800088c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800088e:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <MX_SPI2_Init+0x64>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000894:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <MX_SPI2_Init+0x64>)
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800089a:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_SPI2_Init+0x64>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <MX_SPI2_Init+0x64>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <MX_SPI2_Init+0x64>)
 80008a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008ac:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008ae:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_SPI2_Init+0x64>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008b4:	4b0a      	ldr	r3, [pc, #40]	; (80008e0 <MX_SPI2_Init+0x64>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_SPI2_Init+0x64>)
 80008bc:	2200      	movs	r2, #0
 80008be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008c0:	4b07      	ldr	r3, [pc, #28]	; (80008e0 <MX_SPI2_Init+0x64>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80008c6:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_SPI2_Init+0x64>)
 80008c8:	220a      	movs	r2, #10
 80008ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008cc:	4804      	ldr	r0, [pc, #16]	; (80008e0 <MX_SPI2_Init+0x64>)
 80008ce:	f004 fdc5 	bl	800545c <HAL_SPI_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80008d8:	f002 f892 	bl	8002a00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	2000010c 	.word	0x2000010c
 80008e4:	40003800 	.word	0x40003800

080008e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008ec:	4b11      	ldr	r3, [pc, #68]	; (8000934 <MX_USART1_UART_Init+0x4c>)
 80008ee:	4a12      	ldr	r2, [pc, #72]	; (8000938 <MX_USART1_UART_Init+0x50>)
 80008f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 80008f2:	4b10      	ldr	r3, [pc, #64]	; (8000934 <MX_USART1_UART_Init+0x4c>)
 80008f4:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80008f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008fa:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <MX_USART1_UART_Init+0x4c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000900:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <MX_USART1_UART_Init+0x4c>)
 8000902:	2200      	movs	r2, #0
 8000904:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000906:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <MX_USART1_UART_Init+0x4c>)
 8000908:	2200      	movs	r2, #0
 800090a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800090c:	4b09      	ldr	r3, [pc, #36]	; (8000934 <MX_USART1_UART_Init+0x4c>)
 800090e:	220c      	movs	r2, #12
 8000910:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000912:	4b08      	ldr	r3, [pc, #32]	; (8000934 <MX_USART1_UART_Init+0x4c>)
 8000914:	2200      	movs	r2, #0
 8000916:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000918:	4b06      	ldr	r3, [pc, #24]	; (8000934 <MX_USART1_UART_Init+0x4c>)
 800091a:	2200      	movs	r2, #0
 800091c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800091e:	4805      	ldr	r0, [pc, #20]	; (8000934 <MX_USART1_UART_Init+0x4c>)
 8000920:	f005 fc7c 	bl	800621c <HAL_UART_Init>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800092a:	f002 f869 	bl	8002a00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20000164 	.word	0x20000164
 8000938:	40011000 	.word	0x40011000

0800093c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000940:	4b11      	ldr	r3, [pc, #68]	; (8000988 <MX_USART2_UART_Init+0x4c>)
 8000942:	4a12      	ldr	r2, [pc, #72]	; (800098c <MX_USART2_UART_Init+0x50>)
 8000944:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000946:	4b10      	ldr	r3, [pc, #64]	; (8000988 <MX_USART2_UART_Init+0x4c>)
 8000948:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800094c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <MX_USART2_UART_Init+0x4c>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000954:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <MX_USART2_UART_Init+0x4c>)
 8000956:	2200      	movs	r2, #0
 8000958:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800095a:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <MX_USART2_UART_Init+0x4c>)
 800095c:	2200      	movs	r2, #0
 800095e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000960:	4b09      	ldr	r3, [pc, #36]	; (8000988 <MX_USART2_UART_Init+0x4c>)
 8000962:	220c      	movs	r2, #12
 8000964:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000966:	4b08      	ldr	r3, [pc, #32]	; (8000988 <MX_USART2_UART_Init+0x4c>)
 8000968:	2200      	movs	r2, #0
 800096a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <MX_USART2_UART_Init+0x4c>)
 800096e:	2200      	movs	r2, #0
 8000970:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000972:	4805      	ldr	r0, [pc, #20]	; (8000988 <MX_USART2_UART_Init+0x4c>)
 8000974:	f005 fc52 	bl	800621c <HAL_UART_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800097e:	f002 f83f 	bl	8002a00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	200001a8 	.word	0x200001a8
 800098c:	40004400 	.word	0x40004400

08000990 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	4b1f      	ldr	r3, [pc, #124]	; (8000a18 <MX_DMA_Init+0x88>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a1e      	ldr	r2, [pc, #120]	; (8000a18 <MX_DMA_Init+0x88>)
 80009a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b1c      	ldr	r3, [pc, #112]	; (8000a18 <MX_DMA_Init+0x88>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	603b      	str	r3, [r7, #0]
 80009b6:	4b18      	ldr	r3, [pc, #96]	; (8000a18 <MX_DMA_Init+0x88>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a17      	ldr	r2, [pc, #92]	; (8000a18 <MX_DMA_Init+0x88>)
 80009bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <MX_DMA_Init+0x88>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009ca:	603b      	str	r3, [r7, #0]
 80009cc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2105      	movs	r1, #5
 80009d2:	2010      	movs	r0, #16
 80009d4:	f003 f859 	bl	8003a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80009d8:	2010      	movs	r0, #16
 80009da:	f003 f872 	bl	8003ac2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80009de:	2200      	movs	r2, #0
 80009e0:	2105      	movs	r1, #5
 80009e2:	2011      	movs	r0, #17
 80009e4:	f003 f851 	bl	8003a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80009e8:	2011      	movs	r0, #17
 80009ea:	f003 f86a 	bl	8003ac2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2105      	movs	r1, #5
 80009f2:	203a      	movs	r0, #58	; 0x3a
 80009f4:	f003 f849 	bl	8003a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80009f8:	203a      	movs	r0, #58	; 0x3a
 80009fa:	f003 f862 	bl	8003ac2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80009fe:	2200      	movs	r2, #0
 8000a00:	2105      	movs	r1, #5
 8000a02:	2046      	movs	r0, #70	; 0x46
 8000a04:	f003 f841 	bl	8003a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000a08:	2046      	movs	r0, #70	; 0x46
 8000a0a:	f003 f85a 	bl	8003ac2 <HAL_NVIC_EnableIRQ>

}
 8000a0e:	bf00      	nop
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40023800 	.word	0x40023800

08000a1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b088      	sub	sp, #32
 8000a20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a22:	f107 030c 	add.w	r3, r7, #12
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
 8000a2e:	60da      	str	r2, [r3, #12]
 8000a30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	60bb      	str	r3, [r7, #8]
 8000a36:	4b3e      	ldr	r3, [pc, #248]	; (8000b30 <MX_GPIO_Init+0x114>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a3d      	ldr	r2, [pc, #244]	; (8000b30 <MX_GPIO_Init+0x114>)
 8000a3c:	f043 0304 	orr.w	r3, r3, #4
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b3b      	ldr	r3, [pc, #236]	; (8000b30 <MX_GPIO_Init+0x114>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0304 	and.w	r3, r3, #4
 8000a4a:	60bb      	str	r3, [r7, #8]
 8000a4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	4b37      	ldr	r3, [pc, #220]	; (8000b30 <MX_GPIO_Init+0x114>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a36      	ldr	r2, [pc, #216]	; (8000b30 <MX_GPIO_Init+0x114>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b34      	ldr	r3, [pc, #208]	; (8000b30 <MX_GPIO_Init+0x114>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	603b      	str	r3, [r7, #0]
 8000a6e:	4b30      	ldr	r3, [pc, #192]	; (8000b30 <MX_GPIO_Init+0x114>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a2f      	ldr	r2, [pc, #188]	; (8000b30 <MX_GPIO_Init+0x114>)
 8000a74:	f043 0302 	orr.w	r3, r3, #2
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b2d      	ldr	r3, [pc, #180]	; (8000b30 <MX_GPIO_Init+0x114>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f003 0302 	and.w	r3, r3, #2
 8000a82:	603b      	str	r3, [r7, #0]
 8000a84:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_SET);
 8000a86:	2201      	movs	r2, #1
 8000a88:	210e      	movs	r1, #14
 8000a8a:	482a      	ldr	r0, [pc, #168]	; (8000b34 <MX_GPIO_Init+0x118>)
 8000a8c:	f003 fdda 	bl	8004644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000a90:	2201      	movs	r2, #1
 8000a92:	2140      	movs	r1, #64	; 0x40
 8000a94:	4828      	ldr	r0, [pc, #160]	; (8000b38 <MX_GPIO_Init+0x11c>)
 8000a96:	f003 fdd5 	bl	8004644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(temp_GPIO_Port, temp_Pin, GPIO_PIN_RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2180      	movs	r1, #128	; 0x80
 8000a9e:	4826      	ldr	r0, [pc, #152]	; (8000b38 <MX_GPIO_Init+0x11c>)
 8000aa0:	f003 fdd0 	bl	8004644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SIM_START_Pin|SIM_RESET_Pin, GPIO_PIN_RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2130      	movs	r1, #48	; 0x30
 8000aa8:	4822      	ldr	r0, [pc, #136]	; (8000b34 <MX_GPIO_Init+0x118>)
 8000aaa:	f003 fdcb 	bl	8004644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8000aae:	2201      	movs	r2, #1
 8000ab0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ab4:	4821      	ldr	r0, [pc, #132]	; (8000b3c <MX_GPIO_Init+0x120>)
 8000ab6:	f003 fdc5 	bl	8004644 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC2 PC3 SIM_START_Pin
                           SIM_RESET_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|SIM_START_Pin
 8000aba:	233e      	movs	r3, #62	; 0x3e
 8000abc:	60fb      	str	r3, [r7, #12]
                          |SIM_RESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aca:	f107 030c 	add.w	r3, r7, #12
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4818      	ldr	r0, [pc, #96]	; (8000b34 <MX_GPIO_Init+0x118>)
 8000ad2:	f003 fc0b 	bl	80042ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ad6:	2310      	movs	r3, #16
 8000ad8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ada:	2300      	movs	r3, #0
 8000adc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae2:	f107 030c 	add.w	r3, r7, #12
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4813      	ldr	r0, [pc, #76]	; (8000b38 <MX_GPIO_Init+0x11c>)
 8000aea:	f003 fbff 	bl	80042ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 temp_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_6|temp_Pin;
 8000aee:	23c0      	movs	r3, #192	; 0xc0
 8000af0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af2:	2301      	movs	r3, #1
 8000af4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afe:	f107 030c 	add.w	r3, r7, #12
 8000b02:	4619      	mov	r1, r3
 8000b04:	480c      	ldr	r0, [pc, #48]	; (8000b38 <MX_GPIO_Init+0x11c>)
 8000b06:	f003 fbf1 	bl	80042ec <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_CS_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 8000b0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b10:	2301      	movs	r3, #1
 8000b12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 8000b1c:	f107 030c 	add.w	r3, r7, #12
 8000b20:	4619      	mov	r1, r3
 8000b22:	4806      	ldr	r0, [pc, #24]	; (8000b3c <MX_GPIO_Init+0x120>)
 8000b24:	f003 fbe2 	bl	80042ec <HAL_GPIO_Init>

}
 8000b28:	bf00      	nop
 8000b2a:	3720      	adds	r7, #32
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40020800 	.word	0x40020800
 8000b38:	40020000 	.word	0x40020000
 8000b3c:	40020400 	.word	0x40020400

08000b40 <SPI2_Init_Master>:

/* USER CODE BEGIN 4 */

void SPI2_Init_Master(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b46:	1d3b      	adds	r3, r7, #4
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8000b54:	2201      	movs	r2, #1
 8000b56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b5a:	4810      	ldr	r0, [pc, #64]	; (8000b9c <SPI2_Init_Master+0x5c>)
 8000b5c:	f003 fd72 	bl	8004644 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : FLASH_CS_Pin */
	GPIO_InitStruct.Pin = FLASH_CS_Pin;
 8000b60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b64:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b66:	2301      	movs	r3, #1
 8000b68:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 8000b72:	1d3b      	adds	r3, r7, #4
 8000b74:	4619      	mov	r1, r3
 8000b76:	4809      	ldr	r0, [pc, #36]	; (8000b9c <SPI2_Init_Master+0x5c>)
 8000b78:	f003 fbb8 	bl	80042ec <HAL_GPIO_Init>

	hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b7c:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <SPI2_Init_Master+0x60>)
 8000b7e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b82:	605a      	str	r2, [r3, #4]
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b84:	4806      	ldr	r0, [pc, #24]	; (8000ba0 <SPI2_Init_Master+0x60>)
 8000b86:	f004 fc69 	bl	800545c <HAL_SPI_Init>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <SPI2_Init_Master+0x54>
	{
		Error_Handler();
 8000b90:	f001 ff36 	bl	8002a00 <Error_Handler>
	}
}
 8000b94:	bf00      	nop
 8000b96:	3718      	adds	r7, #24
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40020400 	.word	0x40020400
 8000ba0:	2000010c 	.word	0x2000010c

08000ba4 <Make_MQTT_send_string>:
  * @param  send_MQTT_message[] String, where will be result.
  * @param  msg[] struct with message for sending with MQTT.
 */

void Make_MQTT_send_string(uint8_t send_MQTT_message[], message_type msg)
{
 8000ba4:	b084      	sub	sp, #16
 8000ba6:	b590      	push	{r4, r7, lr}
 8000ba8:	b083      	sub	sp, #12
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
 8000bae:	f107 001c 	add.w	r0, r7, #28
 8000bb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	send_MQTT_message[0] = 0x30;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2230      	movs	r2, #48	; 0x30
 8000bba:	701a      	strb	r2, [r3, #0]
    send_MQTT_message[1] = strlen(msg.str) + strlen(TOPIC) + 2;
 8000bbc:	f107 031c 	add.w	r3, r7, #28
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff fb25 	bl	8000210 <strlen>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	b2dc      	uxtb	r4, r3
 8000bca:	4819      	ldr	r0, [pc, #100]	; (8000c30 <Make_MQTT_send_string+0x8c>)
 8000bcc:	f7ff fb20 	bl	8000210 <strlen>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	4423      	add	r3, r4
 8000bd6:	b2da      	uxtb	r2, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	3202      	adds	r2, #2
 8000bde:	b2d2      	uxtb	r2, r2
 8000be0:	701a      	strb	r2, [r3, #0]
    send_MQTT_message[2] = 0;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	3302      	adds	r3, #2
 8000be6:	2200      	movs	r2, #0
 8000be8:	701a      	strb	r2, [r3, #0]
    send_MQTT_message[3] = strlen(TOPIC);
 8000bea:	4811      	ldr	r0, [pc, #68]	; (8000c30 <Make_MQTT_send_string+0x8c>)
 8000bec:	f7ff fb10 	bl	8000210 <strlen>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	3303      	adds	r3, #3
 8000bf6:	b2d2      	uxtb	r2, r2
 8000bf8:	701a      	strb	r2, [r3, #0]
    sprintf(send_MQTT_message + 4,"%s",TOPIC);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	3304      	adds	r3, #4
 8000bfe:	4a0c      	ldr	r2, [pc, #48]	; (8000c30 <Make_MQTT_send_string+0x8c>)
 8000c00:	490c      	ldr	r1, [pc, #48]	; (8000c34 <Make_MQTT_send_string+0x90>)
 8000c02:	4618      	mov	r0, r3
 8000c04:	f00a ff86 	bl	800bb14 <siprintf>
    sprintf(send_MQTT_message + 4 + strlen(TOPIC),"%s",msg.str);
 8000c08:	4809      	ldr	r0, [pc, #36]	; (8000c30 <Make_MQTT_send_string+0x8c>)
 8000c0a:	f7ff fb01 	bl	8000210 <strlen>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	3304      	adds	r3, #4
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	4413      	add	r3, r2
 8000c16:	f107 021c 	add.w	r2, r7, #28
 8000c1a:	4906      	ldr	r1, [pc, #24]	; (8000c34 <Make_MQTT_send_string+0x90>)
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f00a ff79 	bl	800bb14 <siprintf>
}
 8000c22:	bf00      	nop
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000c2c:	b004      	add	sp, #16
 8000c2e:	4770      	bx	lr
 8000c30:	20000010 	.word	0x20000010
 8000c34:	0800ce3c 	.word	0x0800ce3c

08000c38 <String_in_SIM800BuffRx>:
  * @param  exm[] String, that we search in Receive buffer SIM800.
  * @retval Is string in Receive buffer SIM800.
 */

uint8_t String_in_SIM800BuffRx(uint8_t exm[])
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(exm);
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f7ff fae5 	bl	8000210 <strlen>
 8000c46:	4603      	mov	r3, r0
 8000c48:	733b      	strb	r3, [r7, #12]
	uint8_t ans = 0;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < BUFF_SIM_SIZE - len; i++)
 8000c4e:	2300      	movs	r3, #0
 8000c50:	73bb      	strb	r3, [r7, #14]
 8000c52:	e025      	b.n	8000ca0 <String_in_SIM800BuffRx+0x68>
	{
		if (SIM800BuffRx[i] == exm[0])
 8000c54:	7bbb      	ldrb	r3, [r7, #14]
 8000c56:	4a19      	ldr	r2, [pc, #100]	; (8000cbc <String_in_SIM800BuffRx+0x84>)
 8000c58:	5cd2      	ldrb	r2, [r2, r3]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	d11b      	bne.n	8000c9a <String_in_SIM800BuffRx+0x62>
		{
			ans = 1;
 8000c62:	2301      	movs	r3, #1
 8000c64:	73fb      	strb	r3, [r7, #15]
			for (uint8_t k = 0; k < len; k++)
 8000c66:	2300      	movs	r3, #0
 8000c68:	737b      	strb	r3, [r7, #13]
 8000c6a:	e00f      	b.n	8000c8c <String_in_SIM800BuffRx+0x54>
			{
				if (SIM800BuffRx[i+k] != exm[k])
 8000c6c:	7bba      	ldrb	r2, [r7, #14]
 8000c6e:	7b7b      	ldrb	r3, [r7, #13]
 8000c70:	4413      	add	r3, r2
 8000c72:	4a12      	ldr	r2, [pc, #72]	; (8000cbc <String_in_SIM800BuffRx+0x84>)
 8000c74:	5cd2      	ldrb	r2, [r2, r3]
 8000c76:	7b7b      	ldrb	r3, [r7, #13]
 8000c78:	6879      	ldr	r1, [r7, #4]
 8000c7a:	440b      	add	r3, r1
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	d001      	beq.n	8000c86 <String_in_SIM800BuffRx+0x4e>
				{
					ans = 0;
 8000c82:	2300      	movs	r3, #0
 8000c84:	73fb      	strb	r3, [r7, #15]
			for (uint8_t k = 0; k < len; k++)
 8000c86:	7b7b      	ldrb	r3, [r7, #13]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	737b      	strb	r3, [r7, #13]
 8000c8c:	7b7a      	ldrb	r2, [r7, #13]
 8000c8e:	7b3b      	ldrb	r3, [r7, #12]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d3eb      	bcc.n	8000c6c <String_in_SIM800BuffRx+0x34>
				}
			}
			if (ans)
 8000c94:	7bfb      	ldrb	r3, [r7, #15]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d109      	bne.n	8000cae <String_in_SIM800BuffRx+0x76>
	for (uint8_t i = 0; i < BUFF_SIM_SIZE - len; i++)
 8000c9a:	7bbb      	ldrb	r3, [r7, #14]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	73bb      	strb	r3, [r7, #14]
 8000ca0:	7bba      	ldrb	r2, [r7, #14]
 8000ca2:	7b3b      	ldrb	r3, [r7, #12]
 8000ca4:	f1c3 034c 	rsb	r3, r3, #76	; 0x4c
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	dbd3      	blt.n	8000c54 <String_in_SIM800BuffRx+0x1c>
 8000cac:	e000      	b.n	8000cb0 <String_in_SIM800BuffRx+0x78>
				break;
 8000cae:	bf00      	nop
		}
	}
	return ans;
 8000cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000400 	.word	0x20000400

08000cc0 <String_in_String>:

uint8_t String_in_String(uint8_t str[], uint8_t size, uint8_t exm[])
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	460b      	mov	r3, r1
 8000cca:	607a      	str	r2, [r7, #4]
 8000ccc:	72fb      	strb	r3, [r7, #11]
	uint8_t len = strlen(exm);
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f7ff fa9e 	bl	8000210 <strlen>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	753b      	strb	r3, [r7, #20]
	uint8_t ans = 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	75fb      	strb	r3, [r7, #23]
	for (uint8_t i = 0; i < size - len; i++)
 8000cdc:	2300      	movs	r3, #0
 8000cde:	75bb      	strb	r3, [r7, #22]
 8000ce0:	e028      	b.n	8000d34 <String_in_String+0x74>
	{
		if (str[i] == exm[0])
 8000ce2:	7dbb      	ldrb	r3, [r7, #22]
 8000ce4:	68fa      	ldr	r2, [r7, #12]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	781a      	ldrb	r2, [r3, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	d11d      	bne.n	8000d2e <String_in_String+0x6e>
		{
			ans = 1;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	75fb      	strb	r3, [r7, #23]
			for (uint8_t k = 0; k < len; k++)
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	757b      	strb	r3, [r7, #21]
 8000cfa:	e011      	b.n	8000d20 <String_in_String+0x60>
			{
				if (str[i+k] != exm[k])
 8000cfc:	7dba      	ldrb	r2, [r7, #22]
 8000cfe:	7d7b      	ldrb	r3, [r7, #21]
 8000d00:	4413      	add	r3, r2
 8000d02:	461a      	mov	r2, r3
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	4413      	add	r3, r2
 8000d08:	781a      	ldrb	r2, [r3, #0]
 8000d0a:	7d7b      	ldrb	r3, [r7, #21]
 8000d0c:	6879      	ldr	r1, [r7, #4]
 8000d0e:	440b      	add	r3, r1
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d001      	beq.n	8000d1a <String_in_String+0x5a>
				{
					ans = 0;
 8000d16:	2300      	movs	r3, #0
 8000d18:	75fb      	strb	r3, [r7, #23]
			for (uint8_t k = 0; k < len; k++)
 8000d1a:	7d7b      	ldrb	r3, [r7, #21]
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	757b      	strb	r3, [r7, #21]
 8000d20:	7d7a      	ldrb	r2, [r7, #21]
 8000d22:	7d3b      	ldrb	r3, [r7, #20]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d3e9      	bcc.n	8000cfc <String_in_String+0x3c>
				}
			}
			if (ans)
 8000d28:	7dfb      	ldrb	r3, [r7, #23]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d109      	bne.n	8000d42 <String_in_String+0x82>
	for (uint8_t i = 0; i < size - len; i++)
 8000d2e:	7dbb      	ldrb	r3, [r7, #22]
 8000d30:	3301      	adds	r3, #1
 8000d32:	75bb      	strb	r3, [r7, #22]
 8000d34:	7dba      	ldrb	r2, [r7, #22]
 8000d36:	7af9      	ldrb	r1, [r7, #11]
 8000d38:	7d3b      	ldrb	r3, [r7, #20]
 8000d3a:	1acb      	subs	r3, r1, r3
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	dbd0      	blt.n	8000ce2 <String_in_String+0x22>
 8000d40:	e000      	b.n	8000d44 <String_in_String+0x84>
				break;
 8000d42:	bf00      	nop
		}
	}
	return ans;
 8000d44:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3718      	adds	r7, #24
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
	...

08000d50 <USER_UART_IRQHandler>:

void USER_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	// file stm32f1xx_hal_uart.c
	// comment
	// Set the UART DMA Half transfer complete callback
	// huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt

	if(huart == &huart1) //Determine whether it is serial port 1
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4a28      	ldr	r2, [pc, #160]	; (8000dfc <USER_UART_IRQHandler+0xac>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d148      	bne.n	8000df2 <USER_UART_IRQHandler+0xa2>
	{
		if(RESET != __HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE))   //Judging whether it is idle interruption
 8000d60:	4b26      	ldr	r3, [pc, #152]	; (8000dfc <USER_UART_IRQHandler+0xac>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f003 0310 	and.w	r3, r3, #16
 8000d6a:	2b10      	cmp	r3, #16
 8000d6c:	d141      	bne.n	8000df2 <USER_UART_IRQHandler+0xa2>
		{
			HAL_UART_DMAStop(&huart1);
 8000d6e:	4823      	ldr	r0, [pc, #140]	; (8000dfc <USER_UART_IRQHandler+0xac>)
 8000d70:	f005 fc26 	bl	80065c0 <HAL_UART_DMAStop>
			__HAL_UART_CLEAR_IDLEFLAG(&huart1); //Clear idle interrupt sign (otherwise it will continue to enter interrupt)
 8000d74:	2300      	movs	r3, #0
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	4b20      	ldr	r3, [pc, #128]	; (8000dfc <USER_UART_IRQHandler+0xac>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	4b1e      	ldr	r3, [pc, #120]	; (8000dfc <USER_UART_IRQHandler+0xac>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
			RX = 1;
 8000d8a:	4b1d      	ldr	r3, [pc, #116]	; (8000e00 <USER_UART_IRQHandler+0xb0>)
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	701a      	strb	r2, [r3, #0]
			if (Broker_connect)
 8000d90:	4b1c      	ldr	r3, [pc, #112]	; (8000e04 <USER_UART_IRQHandler+0xb4>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d02c      	beq.n	8000df2 <USER_UART_IRQHandler+0xa2>
			{

				if (String_in_SIM800BuffRx(";;"))
 8000d98:	481b      	ldr	r0, [pc, #108]	; (8000e08 <USER_UART_IRQHandler+0xb8>)
 8000d9a:	f7ff ff4d 	bl	8000c38 <String_in_SIM800BuffRx>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d018      	beq.n	8000dd6 <USER_UART_IRQHandler+0x86>
				{
					memcpy(&(Data_Queue.str), SIM800BuffRx, MESSAGE_TYPE_BUFF_SIZE);
 8000da4:	4a19      	ldr	r2, [pc, #100]	; (8000e0c <USER_UART_IRQHandler+0xbc>)
 8000da6:	4b1a      	ldr	r3, [pc, #104]	; (8000e10 <USER_UART_IRQHandler+0xc0>)
 8000da8:	4610      	mov	r0, r2
 8000daa:	4619      	mov	r1, r3
 8000dac:	2346      	movs	r3, #70	; 0x46
 8000dae:	461a      	mov	r2, r3
 8000db0:	f00a fe66 	bl	800ba80 <memcpy>
					memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8000db4:	224c      	movs	r2, #76	; 0x4c
 8000db6:	2100      	movs	r1, #0
 8000db8:	4815      	ldr	r0, [pc, #84]	; (8000e10 <USER_UART_IRQHandler+0xc0>)
 8000dba:	f00a fe6f 	bl	800ba9c <memset>
					osMessageQueuePut(RxSIM800QueueHandle, &Data_Queue, 0, NULL);
 8000dbe:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <USER_UART_IRQHandler+0xc4>)
 8000dc0:	6818      	ldr	r0, [r3, #0]
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	4911      	ldr	r1, [pc, #68]	; (8000e0c <USER_UART_IRQHandler+0xbc>)
 8000dc8:	f007 faa2 	bl	8008310 <osMessageQueuePut>
					HAL_UART_Receive_DMA(&huart1, SIM800BuffRx, BUFF_SIM_SIZE);
 8000dcc:	224c      	movs	r2, #76	; 0x4c
 8000dce:	4910      	ldr	r1, [pc, #64]	; (8000e10 <USER_UART_IRQHandler+0xc0>)
 8000dd0:	480a      	ldr	r0, [pc, #40]	; (8000dfc <USER_UART_IRQHandler+0xac>)
 8000dd2:	f005 fbc5 	bl	8006560 <HAL_UART_Receive_DMA>
				}

				if (!Tech_ans_wait)
 8000dd6:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <USER_UART_IRQHandler+0xc8>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d109      	bne.n	8000df2 <USER_UART_IRQHandler+0xa2>
				{
					memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8000dde:	224c      	movs	r2, #76	; 0x4c
 8000de0:	2100      	movs	r1, #0
 8000de2:	480b      	ldr	r0, [pc, #44]	; (8000e10 <USER_UART_IRQHandler+0xc0>)
 8000de4:	f00a fe5a 	bl	800ba9c <memset>
					HAL_UART_Receive_DMA(&huart1, SIM800BuffRx, BUFF_SIM_SIZE);
 8000de8:	224c      	movs	r2, #76	; 0x4c
 8000dea:	4909      	ldr	r1, [pc, #36]	; (8000e10 <USER_UART_IRQHandler+0xc0>)
 8000dec:	4803      	ldr	r0, [pc, #12]	; (8000dfc <USER_UART_IRQHandler+0xac>)
 8000dee:	f005 fbb7 	bl	8006560 <HAL_UART_Receive_DMA>

			}
			//HAL_UART_DMAStop(&huart1);
		}
	}
}
 8000df2:	bf00      	nop
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000164 	.word	0x20000164
 8000e00:	200003af 	.word	0x200003af
 8000e04:	200003b0 	.word	0x200003b0
 8000e08:	0800ce40 	.word	0x0800ce40
 8000e0c:	200005dc 	.word	0x200005dc
 8000e10:	20000400 	.word	0x20000400
 8000e14:	20000398 	.word	0x20000398
 8000e18:	200003b1 	.word	0x200003b1

08000e1c <SIM800_Ans>:
  * @brief  Waiting special answer from SIM800.
  * @param  exm[] String, that we expect.
  * @retval Is special answer in Receive buffer SIM800.
  */
uint8_t SIM800_Ans(uint8_t exm[])
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
	RX = 0;
 8000e24:	4b20      	ldr	r3, [pc, #128]	; (8000ea8 <SIM800_Ans+0x8c>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	701a      	strb	r2, [r3, #0]
	Tech_ans_wait = 1;
 8000e2a:	4b20      	ldr	r3, [pc, #128]	; (8000eac <SIM800_Ans+0x90>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart1, SIM800BuffRx, BUFF_SIM_SIZE);
 8000e30:	224c      	movs	r2, #76	; 0x4c
 8000e32:	491f      	ldr	r1, [pc, #124]	; (8000eb0 <SIM800_Ans+0x94>)
 8000e34:	481f      	ldr	r0, [pc, #124]	; (8000eb4 <SIM800_Ans+0x98>)
 8000e36:	f005 fb93 	bl	8006560 <HAL_UART_Receive_DMA>

	SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // permission counter
 8000e3a:	4b1f      	ldr	r3, [pc, #124]	; (8000eb8 <SIM800_Ans+0x9c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a1e      	ldr	r2, [pc, #120]	; (8000eb8 <SIM800_Ans+0x9c>)
 8000e40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e44:	6013      	str	r3, [r2, #0]
	DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;   // start counter
 8000e46:	4b1d      	ldr	r3, [pc, #116]	; (8000ebc <SIM800_Ans+0xa0>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a1c      	ldr	r2, [pc, #112]	; (8000ebc <SIM800_Ans+0xa0>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	6013      	str	r3, [r2, #0]

	uint32_t tacts = HAL_RCC_GetSysClockFreq() / 1000000;
 8000e52:	f003 febb 	bl	8004bcc <HAL_RCC_GetSysClockFreq>
 8000e56:	4603      	mov	r3, r0
 8000e58:	4a19      	ldr	r2, [pc, #100]	; (8000ec0 <SIM800_Ans+0xa4>)
 8000e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e5e:	0c9b      	lsrs	r3, r3, #18
 8000e60:	60fb      	str	r3, [r7, #12]
	tacts *= 6000000; //timeout - 6s
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	4a17      	ldr	r2, [pc, #92]	; (8000ec4 <SIM800_Ans+0xa8>)
 8000e66:	fb02 f303 	mul.w	r3, r2, r3
 8000e6a:	60fb      	str	r3, [r7, #12]
	DWT->CYCCNT = 0; // clear counter
 8000e6c:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <SIM800_Ans+0xa0>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	605a      	str	r2, [r3, #4]
	while (RX != 1 && DWT->CYCCNT < tacts) {};
 8000e72:	bf00      	nop
 8000e74:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <SIM800_Ans+0x8c>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d004      	beq.n	8000e86 <SIM800_Ans+0x6a>
 8000e7c:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <SIM800_Ans+0xa0>)
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	68fa      	ldr	r2, [r7, #12]
 8000e82:	429a      	cmp	r2, r3
 8000e84:	d8f6      	bhi.n	8000e74 <SIM800_Ans+0x58>
	Tech_ans_wait = 0;
 8000e86:	4b09      	ldr	r3, [pc, #36]	; (8000eac <SIM800_Ans+0x90>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	701a      	strb	r2, [r3, #0]
	if (!String_in_SIM800BuffRx(exm))
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f7ff fed3 	bl	8000c38 <String_in_SIM800BuffRx>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d101      	bne.n	8000e9c <SIM800_Ans+0x80>
	{
		return 0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	e000      	b.n	8000e9e <SIM800_Ans+0x82>
	}
	else
	{
		return 1;
 8000e9c:	2301      	movs	r3, #1
	}
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	200003af 	.word	0x200003af
 8000eac:	200003b1 	.word	0x200003b1
 8000eb0:	20000400 	.word	0x20000400
 8000eb4:	20000164 	.word	0x20000164
 8000eb8:	e000edfc 	.word	0xe000edfc
 8000ebc:	e0001000 	.word	0xe0001000
 8000ec0:	431bde83 	.word	0x431bde83
 8000ec4:	005b8d80 	.word	0x005b8d80

08000ec8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if (!Start_SIM800 && Error_init) //if we have problems with SIM800, restart it
 8000ed0:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <StartDefaultTask+0x70>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d10e      	bne.n	8000ef6 <StartDefaultTask+0x2e>
 8000ed8:	4b18      	ldr	r3, [pc, #96]	; (8000f3c <StartDefaultTask+0x74>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d00a      	beq.n	8000ef6 <StartDefaultTask+0x2e>
	  {
		  Error_init = 0;
 8000ee0:	4b16      	ldr	r3, [pc, #88]	; (8000f3c <StartDefaultTask+0x74>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	701a      	strb	r2, [r3, #0]
		  SIM800StartTaskHandle = osThreadNew(StartSIM800Task, NULL, &SIM800StartTask_attributes);
 8000ee6:	4a16      	ldr	r2, [pc, #88]	; (8000f40 <StartDefaultTask+0x78>)
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4816      	ldr	r0, [pc, #88]	; (8000f44 <StartDefaultTask+0x7c>)
 8000eec:	f006 fdd4 	bl	8007a98 <osThreadNew>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	4a15      	ldr	r2, [pc, #84]	; (8000f48 <StartDefaultTask+0x80>)
 8000ef4:	6013      	str	r3, [r2, #0]
	  }

	  //show that program works
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8000ef6:	2140      	movs	r1, #64	; 0x40
 8000ef8:	4814      	ldr	r0, [pc, #80]	; (8000f4c <StartDefaultTask+0x84>)
 8000efa:	f003 fbbc 	bl	8004676 <HAL_GPIO_TogglePin>
	  osDelay(500);
 8000efe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f02:	f006 fe88 	bl	8007c16 <osDelay>

	  //if we have flag, start measuring temperature
	  if ((!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) || Get_temp) && Broker_connect)
 8000f06:	2110      	movs	r1, #16
 8000f08:	4810      	ldr	r0, [pc, #64]	; (8000f4c <StartDefaultTask+0x84>)
 8000f0a:	f003 fb83 	bl	8004614 <HAL_GPIO_ReadPin>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d003      	beq.n	8000f1c <StartDefaultTask+0x54>
 8000f14:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <StartDefaultTask+0x88>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d0d9      	beq.n	8000ed0 <StartDefaultTask+0x8>
 8000f1c:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <StartDefaultTask+0x8c>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d0d5      	beq.n	8000ed0 <StartDefaultTask+0x8>
	  {
		osSemaphoreRelease(SemGetTempHandle);
 8000f24:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <StartDefaultTask+0x90>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f007 f939 	bl	80081a0 <osSemaphoreRelease>
		Get_temp = 0;
 8000f2e:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <StartDefaultTask+0x88>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	701a      	strb	r2, [r3, #0]
	  if (!Start_SIM800 && Error_init) //if we have problems with SIM800, restart it
 8000f34:	e7cc      	b.n	8000ed0 <StartDefaultTask+0x8>
 8000f36:	bf00      	nop
 8000f38:	200003ae 	.word	0x200003ae
 8000f3c:	200003ac 	.word	0x200003ac
 8000f40:	0800d648 	.word	0x0800d648
 8000f44:	080013fd 	.word	0x080013fd
 8000f48:	20000380 	.word	0x20000380
 8000f4c:	40020000 	.word	0x40020000
 8000f50:	200003b2 	.word	0x200003b2
 8000f54:	200003b0 	.word	0x200003b0
 8000f58:	200003a8 	.word	0x200003a8

08000f5c <StartGetTempTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGetTempTask */
void StartGetTempTask(void *argument)
{
 8000f5c:	b590      	push	{r4, r7, lr}
 8000f5e:	b095      	sub	sp, #84	; 0x54
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {

	  // wait semaphore for measuring temperature
	  if (osSemaphoreAcquire(SemGetTempHandle, osWaitForever) == osOK)
 8000f64:	4b0d      	ldr	r3, [pc, #52]	; (8000f9c <StartGetTempTask+0x40>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f04f 31ff 	mov.w	r1, #4294967295
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f007 f8c5 	bl	80080fc <osSemaphoreAcquire>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d1f5      	bne.n	8000f64 <StartGetTempTask+0x8>
	  {

		  // Paste code for RS485
		  strcpy(&(msg.str), "RS485_data\r\n\0");
 8000f78:	f107 0308 	add.w	r3, r7, #8
 8000f7c:	4a08      	ldr	r2, [pc, #32]	; (8000fa0 <StartGetTempTask+0x44>)
 8000f7e:	461c      	mov	r4, r3
 8000f80:	4613      	mov	r3, r2
 8000f82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f84:	c407      	stmia	r4!, {r0, r1, r2}
 8000f86:	7023      	strb	r3, [r4, #0]
		  osMessageQueuePut(SIM800SendQueueHandle, &msg, 0, osWaitForever);
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <StartGetTempTask+0x48>)
 8000f8a:	6818      	ldr	r0, [r3, #0]
 8000f8c:	f107 0108 	add.w	r1, r7, #8
 8000f90:	f04f 33ff 	mov.w	r3, #4294967295
 8000f94:	2200      	movs	r2, #0
 8000f96:	f007 f9bb 	bl	8008310 <osMessageQueuePut>
	  if (osSemaphoreAcquire(SemGetTempHandle, osWaitForever) == osOK)
 8000f9a:	e7e3      	b.n	8000f64 <StartGetTempTask+0x8>
 8000f9c:	200003a8 	.word	0x200003a8
 8000fa0:	0800ce44 	.word	0x0800ce44
 8000fa4:	20000394 	.word	0x20000394

08000fa8 <StartDebugTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDebugTask */
void StartDebugTask(void *argument)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b094      	sub	sp, #80	; 0x50
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDebugTask */
	message_type msg;
  /* Infinite loop */
  for(;;)
  {
	  if (osMessageQueueGet(debugQueueHandle, &msg, 0, osWaitForever) == osOK)
 8000fb0:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <StartDebugTask+0x30>)
 8000fb2:	6818      	ldr	r0, [r3, #0]
 8000fb4:	f107 0108 	add.w	r1, r7, #8
 8000fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f007 fa07 	bl	80083d0 <osMessageQueueGet>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d1f3      	bne.n	8000fb0 <StartDebugTask+0x8>
	  {
		  HAL_UART_Transmit_DMA(&huart2, msg.str, MESSAGE_TYPE_BUFF_SIZE);
 8000fc8:	f107 0308 	add.w	r3, r7, #8
 8000fcc:	2246      	movs	r2, #70	; 0x46
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4802      	ldr	r0, [pc, #8]	; (8000fdc <StartDebugTask+0x34>)
 8000fd2:	f005 fa47 	bl	8006464 <HAL_UART_Transmit_DMA>
	  if (osMessageQueueGet(debugQueueHandle, &msg, 0, osWaitForever) == osOK)
 8000fd6:	e7eb      	b.n	8000fb0 <StartDebugTask+0x8>
 8000fd8:	20000390 	.word	0x20000390
 8000fdc:	200001a8 	.word	0x200001a8

08000fe0 <StartSIM800SendTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSIM800SendTask */
void StartSIM800SendTask(void *argument)
{
 8000fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fe2:	b0b9      	sub	sp, #228	; 0xe4
 8000fe4:	af10      	add	r7, sp, #64	; 0x40
 8000fe6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSIM800SendTask */
	message_type msg;

	//+ message_len(1 byte) + topic_len(2 bytes) + topic + message
    uint8_t send_MQTT_message[BUFF_SIM_SIZE] = {};
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	f107 0310 	add.w	r3, r7, #16
 8000ff0:	2248      	movs	r2, #72	; 0x48
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f00a fd51 	bl	800ba9c <memset>
    uint8_t ans;
  /* Infinite loop */
  for(;;)
  {
	  if (osMessageQueueGet(SIM800SendQueueHandle, &msg, 0, osWaitForever) == osOK)
 8000ffa:	4b50      	ldr	r3, [pc, #320]	; (800113c <StartSIM800SendTask+0x15c>)
 8000ffc:	6818      	ldr	r0, [r3, #0]
 8000ffe:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001002:	f04f 33ff 	mov.w	r3, #4294967295
 8001006:	2200      	movs	r2, #0
 8001008:	f007 f9e2 	bl	80083d0 <osMessageQueueGet>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d1f3      	bne.n	8000ffa <StartSIM800SendTask+0x1a>
	  {
		  if (osMutexAcquire(UART1MutexHandle, osWaitForever) == osOK)
 8001012:	4b4b      	ldr	r3, [pc, #300]	; (8001140 <StartSIM800SendTask+0x160>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f04f 31ff 	mov.w	r1, #4294967295
 800101a:	4618      	mov	r0, r3
 800101c:	f006 ff5c 	bl	8007ed8 <osMutexAcquire>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d1e9      	bne.n	8000ffa <StartSIM800SendTask+0x1a>
		  {
			  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8001026:	4b47      	ldr	r3, [pc, #284]	; (8001144 <StartSIM800SendTask+0x164>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	68da      	ldr	r2, [r3, #12]
 800102c:	4b45      	ldr	r3, [pc, #276]	; (8001144 <StartSIM800SendTask+0x164>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f042 0210 	orr.w	r2, r2, #16
 8001034:	60da      	str	r2, [r3, #12]

			  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001036:	224c      	movs	r2, #76	; 0x4c
 8001038:	2100      	movs	r1, #0
 800103a:	4843      	ldr	r0, [pc, #268]	; (8001148 <StartSIM800SendTask+0x168>)
 800103c:	f00a fd2e 	bl	800ba9c <memset>
			  sprintf(send_MQTT_message,"AT+CIPSEND=%d\r\n\0",strlen(msg.str) + strlen(TOPIC) + 4);
 8001040:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff f8e3 	bl	8000210 <strlen>
 800104a:	4604      	mov	r4, r0
 800104c:	483f      	ldr	r0, [pc, #252]	; (800114c <StartSIM800SendTask+0x16c>)
 800104e:	f7ff f8df 	bl	8000210 <strlen>
 8001052:	4603      	mov	r3, r0
 8001054:	4423      	add	r3, r4
 8001056:	1d1a      	adds	r2, r3, #4
 8001058:	f107 030c 	add.w	r3, r7, #12
 800105c:	493c      	ldr	r1, [pc, #240]	; (8001150 <StartSIM800SendTask+0x170>)
 800105e:	4618      	mov	r0, r3
 8001060:	f00a fd58 	bl	800bb14 <siprintf>
			  HAL_UART_Transmit_DMA(&huart1, send_MQTT_message, strlen(send_MQTT_message));
 8001064:	f107 030c 	add.w	r3, r7, #12
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff f8d1 	bl	8000210 <strlen>
 800106e:	4603      	mov	r3, r0
 8001070:	b29a      	uxth	r2, r3
 8001072:	f107 030c 	add.w	r3, r7, #12
 8001076:	4619      	mov	r1, r3
 8001078:	4832      	ldr	r0, [pc, #200]	; (8001144 <StartSIM800SendTask+0x164>)
 800107a:	f005 f9f3 	bl	8006464 <HAL_UART_Transmit_DMA>
			  ans = SIM800_Ans(">");
 800107e:	4835      	ldr	r0, [pc, #212]	; (8001154 <StartSIM800SendTask+0x174>)
 8001080:	f7ff fecc 	bl	8000e1c <SIM800_Ans>
 8001084:	4603      	mov	r3, r0
 8001086:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			  if (!ans)
			  {

			  }
			  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 800108a:	224c      	movs	r2, #76	; 0x4c
 800108c:	2100      	movs	r1, #0
 800108e:	482e      	ldr	r0, [pc, #184]	; (8001148 <StartSIM800SendTask+0x168>)
 8001090:	f00a fd04 	bl	800ba9c <memset>
			  osDelay(100);
 8001094:	2064      	movs	r0, #100	; 0x64
 8001096:	f006 fdbe 	bl	8007c16 <osDelay>

			  //make string for transmit
			  Make_MQTT_send_string(send_MQTT_message, msg);
 800109a:	f107 060c 	add.w	r6, r7, #12
 800109e:	466c      	mov	r4, sp
 80010a0:	f107 0564 	add.w	r5, r7, #100	; 0x64
 80010a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010b4:	c403      	stmia	r4!, {r0, r1}
 80010b6:	8022      	strh	r2, [r4, #0]
 80010b8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010be:	4630      	mov	r0, r6
 80010c0:	f7ff fd70 	bl	8000ba4 <Make_MQTT_send_string>
			  HAL_UART_Transmit_DMA(&huart1, send_MQTT_message, strlen(msg.str) + strlen(TOPIC) + 4);
 80010c4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff f8a1 	bl	8000210 <strlen>
 80010ce:	4603      	mov	r3, r0
 80010d0:	b29c      	uxth	r4, r3
 80010d2:	481e      	ldr	r0, [pc, #120]	; (800114c <StartSIM800SendTask+0x16c>)
 80010d4:	f7ff f89c 	bl	8000210 <strlen>
 80010d8:	4603      	mov	r3, r0
 80010da:	b29b      	uxth	r3, r3
 80010dc:	4423      	add	r3, r4
 80010de:	b29b      	uxth	r3, r3
 80010e0:	3304      	adds	r3, #4
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	f107 030c 	add.w	r3, r7, #12
 80010e8:	4619      	mov	r1, r3
 80010ea:	4816      	ldr	r0, [pc, #88]	; (8001144 <StartSIM800SendTask+0x164>)
 80010ec:	f005 f9ba 	bl	8006464 <HAL_UART_Transmit_DMA>

			  ans = SIM800_Ans("\x30"); //our transmited message
 80010f0:	4819      	ldr	r0, [pc, #100]	; (8001158 <StartSIM800SendTask+0x178>)
 80010f2:	f7ff fe93 	bl	8000e1c <SIM800_Ans>
 80010f6:	4603      	mov	r3, r0
 80010f8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			  if (!ans)
 80010fc:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001100:	2b00      	cmp	r3, #0
 8001102:	d10a      	bne.n	800111a <StartSIM800SendTask+0x13a>
			  {
				  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001104:	224c      	movs	r2, #76	; 0x4c
 8001106:	2100      	movs	r1, #0
 8001108:	480f      	ldr	r0, [pc, #60]	; (8001148 <StartSIM800SendTask+0x168>)
 800110a:	f00a fcc7 	bl	800ba9c <memset>
				  ans = SIM800_Ans("\x30"); //our transmited message
 800110e:	4812      	ldr	r0, [pc, #72]	; (8001158 <StartSIM800SendTask+0x178>)
 8001110:	f7ff fe84 	bl	8000e1c <SIM800_Ans>
 8001114:	4603      	mov	r3, r0
 8001116:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				  {

				  }
			  }

			  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 800111a:	224c      	movs	r2, #76	; 0x4c
 800111c:	2100      	movs	r1, #0
 800111e:	480a      	ldr	r0, [pc, #40]	; (8001148 <StartSIM800SendTask+0x168>)
 8001120:	f00a fcbc 	bl	800ba9c <memset>
			  HAL_UART_Receive_DMA(&huart1, SIM800BuffRx, BUFF_SIM_SIZE);
 8001124:	224c      	movs	r2, #76	; 0x4c
 8001126:	4908      	ldr	r1, [pc, #32]	; (8001148 <StartSIM800SendTask+0x168>)
 8001128:	4806      	ldr	r0, [pc, #24]	; (8001144 <StartSIM800SendTask+0x164>)
 800112a:	f005 fa19 	bl	8006560 <HAL_UART_Receive_DMA>
			  osMutexRelease(UART1MutexHandle); //release UART for SIM800
 800112e:	4b04      	ldr	r3, [pc, #16]	; (8001140 <StartSIM800SendTask+0x160>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4618      	mov	r0, r3
 8001134:	f006 ff1b 	bl	8007f6e <osMutexRelease>
	  if (osMessageQueueGet(SIM800SendQueueHandle, &msg, 0, osWaitForever) == osOK)
 8001138:	e75f      	b.n	8000ffa <StartSIM800SendTask+0x1a>
 800113a:	bf00      	nop
 800113c:	20000394 	.word	0x20000394
 8001140:	200003a0 	.word	0x200003a0
 8001144:	20000164 	.word	0x20000164
 8001148:	20000400 	.word	0x20000400
 800114c:	20000010 	.word	0x20000010
 8001150:	0800ce54 	.word	0x0800ce54
 8001154:	0800ce68 	.word	0x0800ce68
 8001158:	0800ce6c 	.word	0x0800ce6c

0800115c <PINGStartTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_PINGStartTask */
void PINGStartTask(void *argument)
{
 800115c:	b5b0      	push	{r4, r5, r7, lr}
 800115e:	b0a8      	sub	sp, #160	; 0xa0
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PINGStartTask */
	message_type msg;
	uint8_t send_MQTT_message[BUFF_SIM_SIZE] = {};
 8001164:	2300      	movs	r3, #0
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	f107 0310 	add.w	r3, r7, #16
 800116c:	2248      	movs	r2, #72	; 0x48
 800116e:	2100      	movs	r1, #0
 8001170:	4618      	mov	r0, r3
 8001172:	f00a fc93 	bl	800ba9c <memset>
	uint8_t ans = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
  /* Infinite loop */
  for(;;)
  {
	  if (osSemaphoreAcquire(PINGSemHandle, osWaitForever) == osOK)
 800117c:	4b8c      	ldr	r3, [pc, #560]	; (80013b0 <PINGStartTask+0x254>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f04f 31ff 	mov.w	r1, #4294967295
 8001184:	4618      	mov	r0, r3
 8001186:	f006 ffb9 	bl	80080fc <osSemaphoreAcquire>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d1f5      	bne.n	800117c <PINGStartTask+0x20>
	  {
		  if (osMutexAcquire(UART1MutexHandle, osWaitForever) == osOK)
 8001190:	4b88      	ldr	r3, [pc, #544]	; (80013b4 <PINGStartTask+0x258>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f04f 31ff 	mov.w	r1, #4294967295
 8001198:	4618      	mov	r0, r3
 800119a:	f006 fe9d 	bl	8007ed8 <osMutexAcquire>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d1eb      	bne.n	800117c <PINGStartTask+0x20>
		  {

			  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80011a4:	224c      	movs	r2, #76	; 0x4c
 80011a6:	2100      	movs	r1, #0
 80011a8:	4883      	ldr	r0, [pc, #524]	; (80013b8 <PINGStartTask+0x25c>)
 80011aa:	f00a fc77 	bl	800ba9c <memset>
			  sprintf(send_MQTT_message,"AT+CIPSEND=2\r\n\0");
 80011ae:	f107 030c 	add.w	r3, r7, #12
 80011b2:	4982      	ldr	r1, [pc, #520]	; (80013bc <PINGStartTask+0x260>)
 80011b4:	4618      	mov	r0, r3
 80011b6:	f00a fcad 	bl	800bb14 <siprintf>
			  HAL_UART_Transmit_DMA(&huart1, send_MQTT_message, strlen(send_MQTT_message));
 80011ba:	f107 030c 	add.w	r3, r7, #12
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff f826 	bl	8000210 <strlen>
 80011c4:	4603      	mov	r3, r0
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	f107 030c 	add.w	r3, r7, #12
 80011cc:	4619      	mov	r1, r3
 80011ce:	487c      	ldr	r0, [pc, #496]	; (80013c0 <PINGStartTask+0x264>)
 80011d0:	f005 f948 	bl	8006464 <HAL_UART_Transmit_DMA>
			  ans = SIM800_Ans(">");
 80011d4:	487b      	ldr	r0, [pc, #492]	; (80013c4 <PINGStartTask+0x268>)
 80011d6:	f7ff fe21 	bl	8000e1c <SIM800_Ans>
 80011da:	4603      	mov	r3, r0
 80011dc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			  if (!ans)
 80011e0:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d12f      	bne.n	8001248 <PINGStartTask+0xec>
			  {
				  strcpy(&(msg.str), "FAILE_send_PING1\r\n\0");
 80011e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011ec:	4a76      	ldr	r2, [pc, #472]	; (80013c8 <PINGStartTask+0x26c>)
 80011ee:	461c      	mov	r4, r3
 80011f0:	4615      	mov	r5, r2
 80011f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011f6:	682b      	ldr	r3, [r5, #0]
 80011f8:	461a      	mov	r2, r3
 80011fa:	8022      	strh	r2, [r4, #0]
 80011fc:	3402      	adds	r4, #2
 80011fe:	0c1b      	lsrs	r3, r3, #16
 8001200:	7023      	strb	r3, [r4, #0]
				  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001202:	4b72      	ldr	r3, [pc, #456]	; (80013cc <PINGStartTask+0x270>)
 8001204:	6818      	ldr	r0, [r3, #0]
 8001206:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800120a:	f04f 33ff 	mov.w	r3, #4294967295
 800120e:	2200      	movs	r2, #0
 8001210:	f007 f87e 	bl	8008310 <osMessageQueuePut>
				  Error_ping = 1;
 8001214:	4b6e      	ldr	r3, [pc, #440]	; (80013d0 <PINGStartTask+0x274>)
 8001216:	2201      	movs	r2, #1
 8001218:	701a      	strb	r2, [r3, #0]
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1); //signal for error
 800121a:	2201      	movs	r2, #1
 800121c:	2108      	movs	r1, #8
 800121e:	486d      	ldr	r0, [pc, #436]	; (80013d4 <PINGStartTask+0x278>)
 8001220:	f003 fa10 	bl	8004644 <HAL_GPIO_WritePin>
				  osMutexRelease(UART1MutexHandle); //release UART for SIM800
 8001224:	4b63      	ldr	r3, [pc, #396]	; (80013b4 <PINGStartTask+0x258>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4618      	mov	r0, r3
 800122a:	f006 fea0 	bl	8007f6e <osMutexRelease>
				  //start task to try reconnect
				  MQTTConnectTaskHandle = osThreadNew(StartMQTTConnectTask, NULL, &MQTTConnectTask_attributes);
 800122e:	4a6a      	ldr	r2, [pc, #424]	; (80013d8 <PINGStartTask+0x27c>)
 8001230:	2100      	movs	r1, #0
 8001232:	486a      	ldr	r0, [pc, #424]	; (80013dc <PINGStartTask+0x280>)
 8001234:	f006 fc30 	bl	8007a98 <osThreadNew>
 8001238:	4603      	mov	r3, r0
 800123a:	4a69      	ldr	r2, [pc, #420]	; (80013e0 <PINGStartTask+0x284>)
 800123c:	6013      	str	r3, [r2, #0]
				  //delete this thread
				  osThreadTerminate(PINGTaskHandle);
 800123e:	4b69      	ldr	r3, [pc, #420]	; (80013e4 <PINGStartTask+0x288>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4618      	mov	r0, r3
 8001244:	f006 fcba 	bl	8007bbc <osThreadTerminate>
			  }
			  osDelay(200);
 8001248:	20c8      	movs	r0, #200	; 0xc8
 800124a:	f006 fce4 	bl	8007c16 <osDelay>
			  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 800124e:	224c      	movs	r2, #76	; 0x4c
 8001250:	2100      	movs	r1, #0
 8001252:	4859      	ldr	r0, [pc, #356]	; (80013b8 <PINGStartTask+0x25c>)
 8001254:	f00a fc22 	bl	800ba9c <memset>
			  HAL_UART_Transmit_DMA(&huart1, PING, 2);
 8001258:	2202      	movs	r2, #2
 800125a:	4963      	ldr	r1, [pc, #396]	; (80013e8 <PINGStartTask+0x28c>)
 800125c:	4858      	ldr	r0, [pc, #352]	; (80013c0 <PINGStartTask+0x264>)
 800125e:	f005 f901 	bl	8006464 <HAL_UART_Transmit_DMA>
			  ans = SIM800_Ans(PING);
 8001262:	4861      	ldr	r0, [pc, #388]	; (80013e8 <PINGStartTask+0x28c>)
 8001264:	f7ff fdda 	bl	8000e1c <SIM800_Ans>
 8001268:	4603      	mov	r3, r0
 800126a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			  if (!ans)
 800126e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001272:	2b00      	cmp	r3, #0
 8001274:	d12f      	bne.n	80012d6 <PINGStartTask+0x17a>
			  {
				  strcpy(&(msg.str), "FAILE_send_PING2\r\n\0");
 8001276:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800127a:	4a5c      	ldr	r2, [pc, #368]	; (80013ec <PINGStartTask+0x290>)
 800127c:	461c      	mov	r4, r3
 800127e:	4615      	mov	r5, r2
 8001280:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001282:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001284:	682b      	ldr	r3, [r5, #0]
 8001286:	461a      	mov	r2, r3
 8001288:	8022      	strh	r2, [r4, #0]
 800128a:	3402      	adds	r4, #2
 800128c:	0c1b      	lsrs	r3, r3, #16
 800128e:	7023      	strb	r3, [r4, #0]
				  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001290:	4b4e      	ldr	r3, [pc, #312]	; (80013cc <PINGStartTask+0x270>)
 8001292:	6818      	ldr	r0, [r3, #0]
 8001294:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001298:	f04f 33ff 	mov.w	r3, #4294967295
 800129c:	2200      	movs	r2, #0
 800129e:	f007 f837 	bl	8008310 <osMessageQueuePut>
				  Error_ping = 1;
 80012a2:	4b4b      	ldr	r3, [pc, #300]	; (80013d0 <PINGStartTask+0x274>)
 80012a4:	2201      	movs	r2, #1
 80012a6:	701a      	strb	r2, [r3, #0]
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
 80012a8:	2201      	movs	r2, #1
 80012aa:	2108      	movs	r1, #8
 80012ac:	4849      	ldr	r0, [pc, #292]	; (80013d4 <PINGStartTask+0x278>)
 80012ae:	f003 f9c9 	bl	8004644 <HAL_GPIO_WritePin>
				  osMutexRelease(UART1MutexHandle);
 80012b2:	4b40      	ldr	r3, [pc, #256]	; (80013b4 <PINGStartTask+0x258>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f006 fe59 	bl	8007f6e <osMutexRelease>
				  MQTTConnectTaskHandle = osThreadNew(StartMQTTConnectTask, NULL, &MQTTConnectTask_attributes);
 80012bc:	4a46      	ldr	r2, [pc, #280]	; (80013d8 <PINGStartTask+0x27c>)
 80012be:	2100      	movs	r1, #0
 80012c0:	4846      	ldr	r0, [pc, #280]	; (80013dc <PINGStartTask+0x280>)
 80012c2:	f006 fbe9 	bl	8007a98 <osThreadNew>
 80012c6:	4603      	mov	r3, r0
 80012c8:	4a45      	ldr	r2, [pc, #276]	; (80013e0 <PINGStartTask+0x284>)
 80012ca:	6013      	str	r3, [r2, #0]
				  osThreadTerminate(PINGTaskHandle);
 80012cc:	4b45      	ldr	r3, [pc, #276]	; (80013e4 <PINGStartTask+0x288>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f006 fc73 	bl	8007bbc <osThreadTerminate>
			  }
			  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80012d6:	224c      	movs	r2, #76	; 0x4c
 80012d8:	2100      	movs	r1, #0
 80012da:	4837      	ldr	r0, [pc, #220]	; (80013b8 <PINGStartTask+0x25c>)
 80012dc:	f00a fbde 	bl	800ba9c <memset>
			  ans = SIM800_Ans(PING_ASK);
 80012e0:	4843      	ldr	r0, [pc, #268]	; (80013f0 <PINGStartTask+0x294>)
 80012e2:	f7ff fd9b 	bl	8000e1c <SIM800_Ans>
 80012e6:	4603      	mov	r3, r0
 80012e8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			  if (!ans)
 80012ec:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d13e      	bne.n	8001372 <PINGStartTask+0x216>
			  {
				  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80012f4:	224c      	movs	r2, #76	; 0x4c
 80012f6:	2100      	movs	r1, #0
 80012f8:	482f      	ldr	r0, [pc, #188]	; (80013b8 <PINGStartTask+0x25c>)
 80012fa:	f00a fbcf 	bl	800ba9c <memset>
				  ans = SIM800_Ans(PING_ASK);
 80012fe:	483c      	ldr	r0, [pc, #240]	; (80013f0 <PINGStartTask+0x294>)
 8001300:	f7ff fd8c 	bl	8000e1c <SIM800_Ans>
 8001304:	4603      	mov	r3, r0
 8001306:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				  if (!ans)
 800130a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800130e:	2b00      	cmp	r3, #0
 8001310:	d12f      	bne.n	8001372 <PINGStartTask+0x216>
				  {
					  strcpy(&(msg.str), "FAILE_send_PING3\r\n\0");
 8001312:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001316:	4a37      	ldr	r2, [pc, #220]	; (80013f4 <PINGStartTask+0x298>)
 8001318:	461c      	mov	r4, r3
 800131a:	4615      	mov	r5, r2
 800131c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800131e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001320:	682b      	ldr	r3, [r5, #0]
 8001322:	461a      	mov	r2, r3
 8001324:	8022      	strh	r2, [r4, #0]
 8001326:	3402      	adds	r4, #2
 8001328:	0c1b      	lsrs	r3, r3, #16
 800132a:	7023      	strb	r3, [r4, #0]
					  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 800132c:	4b27      	ldr	r3, [pc, #156]	; (80013cc <PINGStartTask+0x270>)
 800132e:	6818      	ldr	r0, [r3, #0]
 8001330:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001334:	f04f 33ff 	mov.w	r3, #4294967295
 8001338:	2200      	movs	r2, #0
 800133a:	f006 ffe9 	bl	8008310 <osMessageQueuePut>
					  Error_ping = 1;
 800133e:	4b24      	ldr	r3, [pc, #144]	; (80013d0 <PINGStartTask+0x274>)
 8001340:	2201      	movs	r2, #1
 8001342:	701a      	strb	r2, [r3, #0]
					  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
 8001344:	2201      	movs	r2, #1
 8001346:	2108      	movs	r1, #8
 8001348:	4822      	ldr	r0, [pc, #136]	; (80013d4 <PINGStartTask+0x278>)
 800134a:	f003 f97b 	bl	8004644 <HAL_GPIO_WritePin>
					  osMutexRelease(UART1MutexHandle);
 800134e:	4b19      	ldr	r3, [pc, #100]	; (80013b4 <PINGStartTask+0x258>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4618      	mov	r0, r3
 8001354:	f006 fe0b 	bl	8007f6e <osMutexRelease>
					  MQTTConnectTaskHandle = osThreadNew(StartMQTTConnectTask, NULL, &MQTTConnectTask_attributes);
 8001358:	4a1f      	ldr	r2, [pc, #124]	; (80013d8 <PINGStartTask+0x27c>)
 800135a:	2100      	movs	r1, #0
 800135c:	481f      	ldr	r0, [pc, #124]	; (80013dc <PINGStartTask+0x280>)
 800135e:	f006 fb9b 	bl	8007a98 <osThreadNew>
 8001362:	4603      	mov	r3, r0
 8001364:	4a1e      	ldr	r2, [pc, #120]	; (80013e0 <PINGStartTask+0x284>)
 8001366:	6013      	str	r3, [r2, #0]
					  osThreadTerminate(PINGTaskHandle);
 8001368:	4b1e      	ldr	r3, [pc, #120]	; (80013e4 <PINGStartTask+0x288>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4618      	mov	r0, r3
 800136e:	f006 fc25 	bl	8007bbc <osThreadTerminate>
				  }
			  }

			  strcpy(&(msg.str), "PING_SEND_OK\r\n\0");
 8001372:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001376:	4a20      	ldr	r2, [pc, #128]	; (80013f8 <PINGStartTask+0x29c>)
 8001378:	461c      	mov	r4, r3
 800137a:	4613      	mov	r3, r2
 800137c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800137e:	c407      	stmia	r4!, {r0, r1, r2}
 8001380:	8023      	strh	r3, [r4, #0]
 8001382:	3402      	adds	r4, #2
 8001384:	0c1b      	lsrs	r3, r3, #16
 8001386:	7023      	strb	r3, [r4, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001388:	4b10      	ldr	r3, [pc, #64]	; (80013cc <PINGStartTask+0x270>)
 800138a:	6818      	ldr	r0, [r3, #0]
 800138c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001390:	f04f 33ff 	mov.w	r3, #4294967295
 8001394:	2200      	movs	r2, #0
 8001396:	f006 ffbb 	bl	8008310 <osMessageQueuePut>

			  HAL_UART_Receive_DMA(&huart1, SIM800BuffRx, BUFF_SIM_SIZE);
 800139a:	224c      	movs	r2, #76	; 0x4c
 800139c:	4906      	ldr	r1, [pc, #24]	; (80013b8 <PINGStartTask+0x25c>)
 800139e:	4808      	ldr	r0, [pc, #32]	; (80013c0 <PINGStartTask+0x264>)
 80013a0:	f005 f8de 	bl	8006560 <HAL_UART_Receive_DMA>
			  osMutexRelease(UART1MutexHandle);
 80013a4:	4b03      	ldr	r3, [pc, #12]	; (80013b4 <PINGStartTask+0x258>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f006 fde0 	bl	8007f6e <osMutexRelease>
	  if (osSemaphoreAcquire(PINGSemHandle, osWaitForever) == osOK)
 80013ae:	e6e5      	b.n	800117c <PINGStartTask+0x20>
 80013b0:	200003a4 	.word	0x200003a4
 80013b4:	200003a0 	.word	0x200003a0
 80013b8:	20000400 	.word	0x20000400
 80013bc:	0800ce70 	.word	0x0800ce70
 80013c0:	20000164 	.word	0x20000164
 80013c4:	0800ce68 	.word	0x0800ce68
 80013c8:	0800ce80 	.word	0x0800ce80
 80013cc:	20000390 	.word	0x20000390
 80013d0:	200003ad 	.word	0x200003ad
 80013d4:	40020800 	.word	0x40020800
 80013d8:	0800d66c 	.word	0x0800d66c
 80013dc:	08001961 	.word	0x08001961
 80013e0:	20000384 	.word	0x20000384
 80013e4:	2000037c 	.word	0x2000037c
 80013e8:	20000000 	.word	0x20000000
 80013ec:	0800ce94 	.word	0x0800ce94
 80013f0:	20000004 	.word	0x20000004
 80013f4:	0800cea8 	.word	0x0800cea8
 80013f8:	0800cebc 	.word	0x0800cebc

080013fc <StartSIM800Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSIM800Task */
void StartSIM800Task(void *argument)
{
 80013fc:	b5b0      	push	{r4, r5, r7, lr}
 80013fe:	b094      	sub	sp, #80	; 0x50
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSIM800Task */

	message_type msg; // string for debug message
	uint8_t ans = 0; //is one string in another
 8001404:	2300      	movs	r3, #0
 8001406:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  /* Infinite loop */
  for(;;)
  {
	  Error_init = 0;
 800140a:	4bb1      	ldr	r3, [pc, #708]	; (80016d0 <StartSIM800Task+0x2d4>)
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]
	  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8001410:	4bb0      	ldr	r3, [pc, #704]	; (80016d4 <StartSIM800Task+0x2d8>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	68da      	ldr	r2, [r3, #12]
 8001416:	4baf      	ldr	r3, [pc, #700]	; (80016d4 <StartSIM800Task+0x2d8>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f042 0210 	orr.w	r2, r2, #16
 800141e:	60da      	str	r2, [r3, #12]

start:

		//Hardware reset of module

		HAL_GPIO_WritePin(SIM_START_GPIO_Port, SIM_START_Pin, RESET);
 8001420:	2200      	movs	r2, #0
 8001422:	2110      	movs	r1, #16
 8001424:	48ac      	ldr	r0, [pc, #688]	; (80016d8 <StartSIM800Task+0x2dc>)
 8001426:	f003 f90d 	bl	8004644 <HAL_GPIO_WritePin>
		osDelay(500);
 800142a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800142e:	f006 fbf2 	bl	8007c16 <osDelay>
		HAL_GPIO_WritePin(SIM_START_GPIO_Port, SIM_START_Pin, SET);
 8001432:	2201      	movs	r2, #1
 8001434:	2110      	movs	r1, #16
 8001436:	48a8      	ldr	r0, [pc, #672]	; (80016d8 <StartSIM800Task+0x2dc>)
 8001438:	f003 f904 	bl	8004644 <HAL_GPIO_WritePin>
		osDelay(8000);
 800143c:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8001440:	f006 fbe9 	bl	8007c16 <osDelay>

	  	//send initializing data

	  	sprintf(str_SIM800,"ATZ\r\n\0");
 8001444:	49a5      	ldr	r1, [pc, #660]	; (80016dc <StartSIM800Task+0x2e0>)
 8001446:	48a6      	ldr	r0, [pc, #664]	; (80016e0 <StartSIM800Task+0x2e4>)
 8001448:	f00a fb64 	bl	800bb14 <siprintf>
	  	HAL_UART_Transmit_IT(&huart1, str_SIM800, strlen(str_SIM800));
 800144c:	48a4      	ldr	r0, [pc, #656]	; (80016e0 <StartSIM800Task+0x2e4>)
 800144e:	f7fe fedf 	bl	8000210 <strlen>
 8001452:	4603      	mov	r3, r0
 8001454:	b29b      	uxth	r3, r3
 8001456:	461a      	mov	r2, r3
 8001458:	49a1      	ldr	r1, [pc, #644]	; (80016e0 <StartSIM800Task+0x2e4>)
 800145a:	489e      	ldr	r0, [pc, #632]	; (80016d4 <StartSIM800Task+0x2d8>)
 800145c:	f004 ffbd 	bl	80063da <HAL_UART_Transmit_IT>
	  	osDelay(6000);
 8001460:	f241 7070 	movw	r0, #6000	; 0x1770
 8001464:	f006 fbd7 	bl	8007c16 <osDelay>

	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE); //clear receive buffer
 8001468:	224c      	movs	r2, #76	; 0x4c
 800146a:	2100      	movs	r1, #0
 800146c:	489d      	ldr	r0, [pc, #628]	; (80016e4 <StartSIM800Task+0x2e8>)
 800146e:	f00a fb15 	bl	800ba9c <memset>
	  	sprintf(str_SIM800,"AT+CIPMODE=0\r\n\0"); //make string for send
 8001472:	499d      	ldr	r1, [pc, #628]	; (80016e8 <StartSIM800Task+0x2ec>)
 8001474:	489a      	ldr	r0, [pc, #616]	; (80016e0 <StartSIM800Task+0x2e4>)
 8001476:	f00a fb4d 	bl	800bb14 <siprintf>
	  	HAL_UART_Transmit_IT(&huart1, str_SIM800, strlen(str_SIM800)); //send string
 800147a:	4899      	ldr	r0, [pc, #612]	; (80016e0 <StartSIM800Task+0x2e4>)
 800147c:	f7fe fec8 	bl	8000210 <strlen>
 8001480:	4603      	mov	r3, r0
 8001482:	b29b      	uxth	r3, r3
 8001484:	461a      	mov	r2, r3
 8001486:	4996      	ldr	r1, [pc, #600]	; (80016e0 <StartSIM800Task+0x2e4>)
 8001488:	4892      	ldr	r0, [pc, #584]	; (80016d4 <StartSIM800Task+0x2d8>)
 800148a:	f004 ffa6 	bl	80063da <HAL_UART_Transmit_IT>
	  	ans = SIM800_Ans("OK"); //waiting answer, that we transmit in function
 800148e:	4897      	ldr	r0, [pc, #604]	; (80016ec <StartSIM800Task+0x2f0>)
 8001490:	f7ff fcc4 	bl	8000e1c <SIM800_Ans>
 8001494:	4603      	mov	r3, r0
 8001496:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  	if (!ans)
 800149a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d111      	bne.n	80014c6 <StartSIM800Task+0xca>
	  	{
	  		strcpy(&(msg.str), "FAILE_CIPMODE\r\n\0");
 80014a2:	f107 0308 	add.w	r3, r7, #8
 80014a6:	4a92      	ldr	r2, [pc, #584]	; (80016f0 <StartSIM800Task+0x2f4>)
 80014a8:	461c      	mov	r4, r3
 80014aa:	4613      	mov	r3, r2
 80014ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  		osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 80014b2:	4b90      	ldr	r3, [pc, #576]	; (80016f4 <StartSIM800Task+0x2f8>)
 80014b4:	6818      	ldr	r0, [r3, #0]
 80014b6:	f107 0108 	add.w	r1, r7, #8
 80014ba:	f04f 33ff 	mov.w	r3, #4294967295
 80014be:	2200      	movs	r2, #0
 80014c0:	f006 ff26 	bl	8008310 <osMessageQueuePut>
	  		goto start;
 80014c4:	e7ac      	b.n	8001420 <StartSIM800Task+0x24>
	  	}
	  	osDelay(300);
 80014c6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80014ca:	f006 fba4 	bl	8007c16 <osDelay>

	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80014ce:	224c      	movs	r2, #76	; 0x4c
 80014d0:	2100      	movs	r1, #0
 80014d2:	4884      	ldr	r0, [pc, #528]	; (80016e4 <StartSIM800Task+0x2e8>)
 80014d4:	f00a fae2 	bl	800ba9c <memset>
	  	sprintf(str_SIM800,"AT+CIPMUX=0\r\n\0");
 80014d8:	4987      	ldr	r1, [pc, #540]	; (80016f8 <StartSIM800Task+0x2fc>)
 80014da:	4881      	ldr	r0, [pc, #516]	; (80016e0 <StartSIM800Task+0x2e4>)
 80014dc:	f00a fb1a 	bl	800bb14 <siprintf>
	  	HAL_UART_Transmit_IT(&huart1, str_SIM800, strlen(str_SIM800));
 80014e0:	487f      	ldr	r0, [pc, #508]	; (80016e0 <StartSIM800Task+0x2e4>)
 80014e2:	f7fe fe95 	bl	8000210 <strlen>
 80014e6:	4603      	mov	r3, r0
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	461a      	mov	r2, r3
 80014ec:	497c      	ldr	r1, [pc, #496]	; (80016e0 <StartSIM800Task+0x2e4>)
 80014ee:	4879      	ldr	r0, [pc, #484]	; (80016d4 <StartSIM800Task+0x2d8>)
 80014f0:	f004 ff73 	bl	80063da <HAL_UART_Transmit_IT>
	  	ans = SIM800_Ans("OK");
 80014f4:	487d      	ldr	r0, [pc, #500]	; (80016ec <StartSIM800Task+0x2f0>)
 80014f6:	f7ff fc91 	bl	8000e1c <SIM800_Ans>
 80014fa:	4603      	mov	r3, r0
 80014fc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  	if (!ans)
 8001500:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001504:	2b00      	cmp	r3, #0
 8001506:	d114      	bne.n	8001532 <StartSIM800Task+0x136>
		{
			strcpy(&(msg.str), "FAILE_CIPMUX\r\n\0");
 8001508:	f107 0308 	add.w	r3, r7, #8
 800150c:	4a7b      	ldr	r2, [pc, #492]	; (80016fc <StartSIM800Task+0x300>)
 800150e:	461c      	mov	r4, r3
 8001510:	4613      	mov	r3, r2
 8001512:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001514:	c407      	stmia	r4!, {r0, r1, r2}
 8001516:	8023      	strh	r3, [r4, #0]
 8001518:	3402      	adds	r4, #2
 800151a:	0c1b      	lsrs	r3, r3, #16
 800151c:	7023      	strb	r3, [r4, #0]
			osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 800151e:	4b75      	ldr	r3, [pc, #468]	; (80016f4 <StartSIM800Task+0x2f8>)
 8001520:	6818      	ldr	r0, [r3, #0]
 8001522:	f107 0108 	add.w	r1, r7, #8
 8001526:	f04f 33ff 	mov.w	r3, #4294967295
 800152a:	2200      	movs	r2, #0
 800152c:	f006 fef0 	bl	8008310 <osMessageQueuePut>
			goto start;
 8001530:	e776      	b.n	8001420 <StartSIM800Task+0x24>
		}
		osDelay(300);
 8001532:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001536:	f006 fb6e 	bl	8007c16 <osDelay>

	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 800153a:	224c      	movs	r2, #76	; 0x4c
 800153c:	2100      	movs	r1, #0
 800153e:	4869      	ldr	r0, [pc, #420]	; (80016e4 <StartSIM800Task+0x2e8>)
 8001540:	f00a faac 	bl	800ba9c <memset>
	  	sprintf(str_SIM800,"AT+CIPSTATUS\r\n\0");
 8001544:	496e      	ldr	r1, [pc, #440]	; (8001700 <StartSIM800Task+0x304>)
 8001546:	4866      	ldr	r0, [pc, #408]	; (80016e0 <StartSIM800Task+0x2e4>)
 8001548:	f00a fae4 	bl	800bb14 <siprintf>
	  	HAL_UART_Transmit_IT(&huart1, str_SIM800, strlen(str_SIM800));
 800154c:	4864      	ldr	r0, [pc, #400]	; (80016e0 <StartSIM800Task+0x2e4>)
 800154e:	f7fe fe5f 	bl	8000210 <strlen>
 8001552:	4603      	mov	r3, r0
 8001554:	b29b      	uxth	r3, r3
 8001556:	461a      	mov	r2, r3
 8001558:	4961      	ldr	r1, [pc, #388]	; (80016e0 <StartSIM800Task+0x2e4>)
 800155a:	485e      	ldr	r0, [pc, #376]	; (80016d4 <StartSIM800Task+0x2d8>)
 800155c:	f004 ff3d 	bl	80063da <HAL_UART_Transmit_IT>
	  	ans = SIM800_Ans("OK");
 8001560:	4862      	ldr	r0, [pc, #392]	; (80016ec <StartSIM800Task+0x2f0>)
 8001562:	f7ff fc5b 	bl	8000e1c <SIM800_Ans>
 8001566:	4603      	mov	r3, r0
 8001568:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  	if (!ans)
 800156c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001570:	2b00      	cmp	r3, #0
 8001572:	d112      	bne.n	800159a <StartSIM800Task+0x19e>
		{
			strcpy(&(msg.str), "FAILE_CIPSTATUS\r\n\0");
 8001574:	f107 0308 	add.w	r3, r7, #8
 8001578:	4a62      	ldr	r2, [pc, #392]	; (8001704 <StartSIM800Task+0x308>)
 800157a:	461c      	mov	r4, r3
 800157c:	4615      	mov	r5, r2
 800157e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001580:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001582:	682b      	ldr	r3, [r5, #0]
 8001584:	8023      	strh	r3, [r4, #0]
			osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001586:	4b5b      	ldr	r3, [pc, #364]	; (80016f4 <StartSIM800Task+0x2f8>)
 8001588:	6818      	ldr	r0, [r3, #0]
 800158a:	f107 0108 	add.w	r1, r7, #8
 800158e:	f04f 33ff 	mov.w	r3, #4294967295
 8001592:	2200      	movs	r2, #0
 8001594:	f006 febc 	bl	8008310 <osMessageQueuePut>
			goto start;
 8001598:	e742      	b.n	8001420 <StartSIM800Task+0x24>
		}
		osDelay(300);
 800159a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800159e:	f006 fb3a 	bl	8007c16 <osDelay>

	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80015a2:	224c      	movs	r2, #76	; 0x4c
 80015a4:	2100      	movs	r1, #0
 80015a6:	484f      	ldr	r0, [pc, #316]	; (80016e4 <StartSIM800Task+0x2e8>)
 80015a8:	f00a fa78 	bl	800ba9c <memset>
	  	sprintf(str_SIM800,"AT+CIPRXGET=0\r\n\0");
 80015ac:	4956      	ldr	r1, [pc, #344]	; (8001708 <StartSIM800Task+0x30c>)
 80015ae:	484c      	ldr	r0, [pc, #304]	; (80016e0 <StartSIM800Task+0x2e4>)
 80015b0:	f00a fab0 	bl	800bb14 <siprintf>
	  	HAL_UART_Transmit_IT(&huart1, str_SIM800, strlen(str_SIM800));
 80015b4:	484a      	ldr	r0, [pc, #296]	; (80016e0 <StartSIM800Task+0x2e4>)
 80015b6:	f7fe fe2b 	bl	8000210 <strlen>
 80015ba:	4603      	mov	r3, r0
 80015bc:	b29b      	uxth	r3, r3
 80015be:	461a      	mov	r2, r3
 80015c0:	4947      	ldr	r1, [pc, #284]	; (80016e0 <StartSIM800Task+0x2e4>)
 80015c2:	4844      	ldr	r0, [pc, #272]	; (80016d4 <StartSIM800Task+0x2d8>)
 80015c4:	f004 ff09 	bl	80063da <HAL_UART_Transmit_IT>
	  	ans = SIM800_Ans("OK");
 80015c8:	4848      	ldr	r0, [pc, #288]	; (80016ec <StartSIM800Task+0x2f0>)
 80015ca:	f7ff fc27 	bl	8000e1c <SIM800_Ans>
 80015ce:	4603      	mov	r3, r0
 80015d0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  	if (!ans)
 80015d4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d112      	bne.n	8001602 <StartSIM800Task+0x206>
		{
			strcpy(&(msg.str), "FAILE_CIPRXGET\r\n\0");
 80015dc:	f107 0308 	add.w	r3, r7, #8
 80015e0:	4a4a      	ldr	r2, [pc, #296]	; (800170c <StartSIM800Task+0x310>)
 80015e2:	461c      	mov	r4, r3
 80015e4:	4615      	mov	r5, r2
 80015e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015ea:	682b      	ldr	r3, [r5, #0]
 80015ec:	7023      	strb	r3, [r4, #0]
			osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 80015ee:	4b41      	ldr	r3, [pc, #260]	; (80016f4 <StartSIM800Task+0x2f8>)
 80015f0:	6818      	ldr	r0, [r3, #0]
 80015f2:	f107 0108 	add.w	r1, r7, #8
 80015f6:	f04f 33ff 	mov.w	r3, #4294967295
 80015fa:	2200      	movs	r2, #0
 80015fc:	f006 fe88 	bl	8008310 <osMessageQueuePut>
			goto start;
 8001600:	e70e      	b.n	8001420 <StartSIM800Task+0x24>
		}
		osDelay(300);
 8001602:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001606:	f006 fb06 	bl	8007c16 <osDelay>

	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 800160a:	224c      	movs	r2, #76	; 0x4c
 800160c:	2100      	movs	r1, #0
 800160e:	4835      	ldr	r0, [pc, #212]	; (80016e4 <StartSIM800Task+0x2e8>)
 8001610:	f00a fa44 	bl	800ba9c <memset>
	  	sprintf(str_SIM800,"AT+CSTT=\"internet.beeline.ru\",\"beeline\",\"beeline\"\r\n\0");
 8001614:	493e      	ldr	r1, [pc, #248]	; (8001710 <StartSIM800Task+0x314>)
 8001616:	4832      	ldr	r0, [pc, #200]	; (80016e0 <StartSIM800Task+0x2e4>)
 8001618:	f00a fa7c 	bl	800bb14 <siprintf>
	  	HAL_UART_Transmit_IT(&huart1, str_SIM800, strlen(str_SIM800));
 800161c:	4830      	ldr	r0, [pc, #192]	; (80016e0 <StartSIM800Task+0x2e4>)
 800161e:	f7fe fdf7 	bl	8000210 <strlen>
 8001622:	4603      	mov	r3, r0
 8001624:	b29b      	uxth	r3, r3
 8001626:	461a      	mov	r2, r3
 8001628:	492d      	ldr	r1, [pc, #180]	; (80016e0 <StartSIM800Task+0x2e4>)
 800162a:	482a      	ldr	r0, [pc, #168]	; (80016d4 <StartSIM800Task+0x2d8>)
 800162c:	f004 fed5 	bl	80063da <HAL_UART_Transmit_IT>
	  	ans = SIM800_Ans("OK");
 8001630:	482e      	ldr	r0, [pc, #184]	; (80016ec <StartSIM800Task+0x2f0>)
 8001632:	f7ff fbf3 	bl	8000e1c <SIM800_Ans>
 8001636:	4603      	mov	r3, r0
 8001638:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  	if (!ans)
 800163c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001640:	2b00      	cmp	r3, #0
 8001642:	d111      	bne.n	8001668 <StartSIM800Task+0x26c>
		{
			strcpy(&(msg.str), "FAILE_CSTT\r\n\0");
 8001644:	f107 0308 	add.w	r3, r7, #8
 8001648:	4a32      	ldr	r2, [pc, #200]	; (8001714 <StartSIM800Task+0x318>)
 800164a:	461c      	mov	r4, r3
 800164c:	4613      	mov	r3, r2
 800164e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001650:	c407      	stmia	r4!, {r0, r1, r2}
 8001652:	7023      	strb	r3, [r4, #0]
			osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001654:	4b27      	ldr	r3, [pc, #156]	; (80016f4 <StartSIM800Task+0x2f8>)
 8001656:	6818      	ldr	r0, [r3, #0]
 8001658:	f107 0108 	add.w	r1, r7, #8
 800165c:	f04f 33ff 	mov.w	r3, #4294967295
 8001660:	2200      	movs	r2, #0
 8001662:	f006 fe55 	bl	8008310 <osMessageQueuePut>
			goto start;
 8001666:	e6db      	b.n	8001420 <StartSIM800Task+0x24>
		}
		osDelay(300);
 8001668:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800166c:	f006 fad3 	bl	8007c16 <osDelay>

	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001670:	224c      	movs	r2, #76	; 0x4c
 8001672:	2100      	movs	r1, #0
 8001674:	481b      	ldr	r0, [pc, #108]	; (80016e4 <StartSIM800Task+0x2e8>)
 8001676:	f00a fa11 	bl	800ba9c <memset>
	  	sprintf(str_SIM800,"AT+CIPSTATUS\r\n\0");
 800167a:	4921      	ldr	r1, [pc, #132]	; (8001700 <StartSIM800Task+0x304>)
 800167c:	4818      	ldr	r0, [pc, #96]	; (80016e0 <StartSIM800Task+0x2e4>)
 800167e:	f00a fa49 	bl	800bb14 <siprintf>
	  	HAL_UART_Transmit_IT(&huart1, str_SIM800, strlen(str_SIM800));
 8001682:	4817      	ldr	r0, [pc, #92]	; (80016e0 <StartSIM800Task+0x2e4>)
 8001684:	f7fe fdc4 	bl	8000210 <strlen>
 8001688:	4603      	mov	r3, r0
 800168a:	b29b      	uxth	r3, r3
 800168c:	461a      	mov	r2, r3
 800168e:	4914      	ldr	r1, [pc, #80]	; (80016e0 <StartSIM800Task+0x2e4>)
 8001690:	4810      	ldr	r0, [pc, #64]	; (80016d4 <StartSIM800Task+0x2d8>)
 8001692:	f004 fea2 	bl	80063da <HAL_UART_Transmit_IT>
	  	ans = SIM800_Ans("OK");
 8001696:	4815      	ldr	r0, [pc, #84]	; (80016ec <StartSIM800Task+0x2f0>)
 8001698:	f7ff fbc0 	bl	8000e1c <SIM800_Ans>
 800169c:	4603      	mov	r3, r0
 800169e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  	if (!ans)
 80016a2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d136      	bne.n	8001718 <StartSIM800Task+0x31c>
		{
			strcpy(&(msg.str), "FAILE_CIPSTATUS\r\n\0");
 80016aa:	f107 0308 	add.w	r3, r7, #8
 80016ae:	4a15      	ldr	r2, [pc, #84]	; (8001704 <StartSIM800Task+0x308>)
 80016b0:	461c      	mov	r4, r3
 80016b2:	4615      	mov	r5, r2
 80016b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016b8:	682b      	ldr	r3, [r5, #0]
 80016ba:	8023      	strh	r3, [r4, #0]
			osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 80016bc:	4b0d      	ldr	r3, [pc, #52]	; (80016f4 <StartSIM800Task+0x2f8>)
 80016be:	6818      	ldr	r0, [r3, #0]
 80016c0:	f107 0108 	add.w	r1, r7, #8
 80016c4:	f04f 33ff 	mov.w	r3, #4294967295
 80016c8:	2200      	movs	r2, #0
 80016ca:	f006 fe21 	bl	8008310 <osMessageQueuePut>
			goto start;
 80016ce:	e6a7      	b.n	8001420 <StartSIM800Task+0x24>
 80016d0:	200003ac 	.word	0x200003ac
 80016d4:	20000164 	.word	0x20000164
 80016d8:	40020800 	.word	0x40020800
 80016dc:	0800cecc 	.word	0x0800cecc
 80016e0:	200003b4 	.word	0x200003b4
 80016e4:	20000400 	.word	0x20000400
 80016e8:	0800ced4 	.word	0x0800ced4
 80016ec:	0800cee4 	.word	0x0800cee4
 80016f0:	0800cee8 	.word	0x0800cee8
 80016f4:	20000390 	.word	0x20000390
 80016f8:	0800cefc 	.word	0x0800cefc
 80016fc:	0800cf0c 	.word	0x0800cf0c
 8001700:	0800cf1c 	.word	0x0800cf1c
 8001704:	0800cf2c 	.word	0x0800cf2c
 8001708:	0800cf40 	.word	0x0800cf40
 800170c:	0800cf54 	.word	0x0800cf54
 8001710:	0800cf68 	.word	0x0800cf68
 8001714:	0800cfa0 	.word	0x0800cfa0
		}
		osDelay(300);
 8001718:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800171c:	f006 fa7b 	bl	8007c16 <osDelay>

	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001720:	224c      	movs	r2, #76	; 0x4c
 8001722:	2100      	movs	r1, #0
 8001724:	487a      	ldr	r0, [pc, #488]	; (8001910 <StartSIM800Task+0x514>)
 8001726:	f00a f9b9 	bl	800ba9c <memset>
	  	sprintf(str_SIM800,"AT+CIICR\r\n\0");
 800172a:	497a      	ldr	r1, [pc, #488]	; (8001914 <StartSIM800Task+0x518>)
 800172c:	487a      	ldr	r0, [pc, #488]	; (8001918 <StartSIM800Task+0x51c>)
 800172e:	f00a f9f1 	bl	800bb14 <siprintf>
	  	HAL_UART_Transmit_IT(&huart1, str_SIM800, strlen(str_SIM800));
 8001732:	4879      	ldr	r0, [pc, #484]	; (8001918 <StartSIM800Task+0x51c>)
 8001734:	f7fe fd6c 	bl	8000210 <strlen>
 8001738:	4603      	mov	r3, r0
 800173a:	b29b      	uxth	r3, r3
 800173c:	461a      	mov	r2, r3
 800173e:	4976      	ldr	r1, [pc, #472]	; (8001918 <StartSIM800Task+0x51c>)
 8001740:	4876      	ldr	r0, [pc, #472]	; (800191c <StartSIM800Task+0x520>)
 8001742:	f004 fe4a 	bl	80063da <HAL_UART_Transmit_IT>
	  	ans = SIM800_Ans("AT+CIICR");
 8001746:	4876      	ldr	r0, [pc, #472]	; (8001920 <StartSIM800Task+0x524>)
 8001748:	f7ff fb68 	bl	8000e1c <SIM800_Ans>
 800174c:	4603      	mov	r3, r0
 800174e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001752:	224c      	movs	r2, #76	; 0x4c
 8001754:	2100      	movs	r1, #0
 8001756:	486e      	ldr	r0, [pc, #440]	; (8001910 <StartSIM800Task+0x514>)
 8001758:	f00a f9a0 	bl	800ba9c <memset>
	  	ans = SIM800_Ans("OK");
 800175c:	4871      	ldr	r0, [pc, #452]	; (8001924 <StartSIM800Task+0x528>)
 800175e:	f7ff fb5d 	bl	8000e1c <SIM800_Ans>
 8001762:	4603      	mov	r3, r0
 8001764:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  	if (!ans)
 8001768:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800176c:	2b00      	cmp	r3, #0
 800176e:	d111      	bne.n	8001794 <StartSIM800Task+0x398>
		{
			strcpy(&(msg.str), "FAILE_CIICR\r\n\0");
 8001770:	f107 0308 	add.w	r3, r7, #8
 8001774:	4a6c      	ldr	r2, [pc, #432]	; (8001928 <StartSIM800Task+0x52c>)
 8001776:	461c      	mov	r4, r3
 8001778:	4613      	mov	r3, r2
 800177a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800177c:	c407      	stmia	r4!, {r0, r1, r2}
 800177e:	8023      	strh	r3, [r4, #0]
			osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001780:	4b6a      	ldr	r3, [pc, #424]	; (800192c <StartSIM800Task+0x530>)
 8001782:	6818      	ldr	r0, [r3, #0]
 8001784:	f107 0108 	add.w	r1, r7, #8
 8001788:	f04f 33ff 	mov.w	r3, #4294967295
 800178c:	2200      	movs	r2, #0
 800178e:	f006 fdbf 	bl	8008310 <osMessageQueuePut>
			goto start;
 8001792:	e645      	b.n	8001420 <StartSIM800Task+0x24>
		}
		osDelay(500);
 8001794:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001798:	f006 fa3d 	bl	8007c16 <osDelay>

	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 800179c:	224c      	movs	r2, #76	; 0x4c
 800179e:	2100      	movs	r1, #0
 80017a0:	485b      	ldr	r0, [pc, #364]	; (8001910 <StartSIM800Task+0x514>)
 80017a2:	f00a f97b 	bl	800ba9c <memset>
	  	sprintf(str_SIM800,"AT+CIPSTATUS\r\n\0");
 80017a6:	4962      	ldr	r1, [pc, #392]	; (8001930 <StartSIM800Task+0x534>)
 80017a8:	485b      	ldr	r0, [pc, #364]	; (8001918 <StartSIM800Task+0x51c>)
 80017aa:	f00a f9b3 	bl	800bb14 <siprintf>
	  	HAL_UART_Transmit_IT(&huart1, str_SIM800, strlen(str_SIM800));
 80017ae:	485a      	ldr	r0, [pc, #360]	; (8001918 <StartSIM800Task+0x51c>)
 80017b0:	f7fe fd2e 	bl	8000210 <strlen>
 80017b4:	4603      	mov	r3, r0
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	461a      	mov	r2, r3
 80017ba:	4957      	ldr	r1, [pc, #348]	; (8001918 <StartSIM800Task+0x51c>)
 80017bc:	4857      	ldr	r0, [pc, #348]	; (800191c <StartSIM800Task+0x520>)
 80017be:	f004 fe0c 	bl	80063da <HAL_UART_Transmit_IT>
	  	ans = SIM800_Ans("OK");
 80017c2:	4858      	ldr	r0, [pc, #352]	; (8001924 <StartSIM800Task+0x528>)
 80017c4:	f7ff fb2a 	bl	8000e1c <SIM800_Ans>
 80017c8:	4603      	mov	r3, r0
 80017ca:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  	if (!ans)
 80017ce:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d112      	bne.n	80017fc <StartSIM800Task+0x400>
		{
			strcpy(&(msg.str), "FAILE_CIPSTATUS\r\n\0");
 80017d6:	f107 0308 	add.w	r3, r7, #8
 80017da:	4a56      	ldr	r2, [pc, #344]	; (8001934 <StartSIM800Task+0x538>)
 80017dc:	461c      	mov	r4, r3
 80017de:	4615      	mov	r5, r2
 80017e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017e4:	682b      	ldr	r3, [r5, #0]
 80017e6:	8023      	strh	r3, [r4, #0]
			osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 80017e8:	4b50      	ldr	r3, [pc, #320]	; (800192c <StartSIM800Task+0x530>)
 80017ea:	6818      	ldr	r0, [r3, #0]
 80017ec:	f107 0108 	add.w	r1, r7, #8
 80017f0:	f04f 33ff 	mov.w	r3, #4294967295
 80017f4:	2200      	movs	r2, #0
 80017f6:	f006 fd8b 	bl	8008310 <osMessageQueuePut>
			goto start;
 80017fa:	e611      	b.n	8001420 <StartSIM800Task+0x24>
		}
		osDelay(300);
 80017fc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001800:	f006 fa09 	bl	8007c16 <osDelay>

	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001804:	224c      	movs	r2, #76	; 0x4c
 8001806:	2100      	movs	r1, #0
 8001808:	4841      	ldr	r0, [pc, #260]	; (8001910 <StartSIM800Task+0x514>)
 800180a:	f00a f947 	bl	800ba9c <memset>
	  	sprintf(str_SIM800,"AT+CIFSR\r\n\0");
 800180e:	494a      	ldr	r1, [pc, #296]	; (8001938 <StartSIM800Task+0x53c>)
 8001810:	4841      	ldr	r0, [pc, #260]	; (8001918 <StartSIM800Task+0x51c>)
 8001812:	f00a f97f 	bl	800bb14 <siprintf>
	  	HAL_UART_Transmit_IT(&huart1, str_SIM800, strlen(str_SIM800));
 8001816:	4840      	ldr	r0, [pc, #256]	; (8001918 <StartSIM800Task+0x51c>)
 8001818:	f7fe fcfa 	bl	8000210 <strlen>
 800181c:	4603      	mov	r3, r0
 800181e:	b29b      	uxth	r3, r3
 8001820:	461a      	mov	r2, r3
 8001822:	493d      	ldr	r1, [pc, #244]	; (8001918 <StartSIM800Task+0x51c>)
 8001824:	483d      	ldr	r0, [pc, #244]	; (800191c <StartSIM800Task+0x520>)
 8001826:	f004 fdd8 	bl	80063da <HAL_UART_Transmit_IT>
	  	RX = 0;
 800182a:	4b44      	ldr	r3, [pc, #272]	; (800193c <StartSIM800Task+0x540>)
 800182c:	2200      	movs	r2, #0
 800182e:	701a      	strb	r2, [r3, #0]
	  	HAL_UART_Receive_DMA(&huart1, SIM800BuffRx, BUFF_SIM_SIZE);
 8001830:	224c      	movs	r2, #76	; 0x4c
 8001832:	4937      	ldr	r1, [pc, #220]	; (8001910 <StartSIM800Task+0x514>)
 8001834:	4839      	ldr	r0, [pc, #228]	; (800191c <StartSIM800Task+0x520>)
 8001836:	f004 fe93 	bl	8006560 <HAL_UART_Receive_DMA>
	  	while (RX < 1) {};
 800183a:	bf00      	nop
 800183c:	4b3f      	ldr	r3, [pc, #252]	; (800193c <StartSIM800Task+0x540>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d0fb      	beq.n	800183c <StartSIM800Task+0x440>
	  	osDelay(300);
 8001844:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001848:	f006 f9e5 	bl	8007c16 <osDelay>

	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 800184c:	224c      	movs	r2, #76	; 0x4c
 800184e:	2100      	movs	r1, #0
 8001850:	482f      	ldr	r0, [pc, #188]	; (8001910 <StartSIM800Task+0x514>)
 8001852:	f00a f923 	bl	800ba9c <memset>
	  	sprintf(str_SIM800,"AT+CIPSTATUS\r\n\0");
 8001856:	4936      	ldr	r1, [pc, #216]	; (8001930 <StartSIM800Task+0x534>)
 8001858:	482f      	ldr	r0, [pc, #188]	; (8001918 <StartSIM800Task+0x51c>)
 800185a:	f00a f95b 	bl	800bb14 <siprintf>
	  	HAL_UART_Transmit_IT(&huart1, str_SIM800, strlen(str_SIM800));
 800185e:	482e      	ldr	r0, [pc, #184]	; (8001918 <StartSIM800Task+0x51c>)
 8001860:	f7fe fcd6 	bl	8000210 <strlen>
 8001864:	4603      	mov	r3, r0
 8001866:	b29b      	uxth	r3, r3
 8001868:	461a      	mov	r2, r3
 800186a:	492b      	ldr	r1, [pc, #172]	; (8001918 <StartSIM800Task+0x51c>)
 800186c:	482b      	ldr	r0, [pc, #172]	; (800191c <StartSIM800Task+0x520>)
 800186e:	f004 fdb4 	bl	80063da <HAL_UART_Transmit_IT>
	  	ans = SIM800_Ans("OK");
 8001872:	482c      	ldr	r0, [pc, #176]	; (8001924 <StartSIM800Task+0x528>)
 8001874:	f7ff fad2 	bl	8000e1c <SIM800_Ans>
 8001878:	4603      	mov	r3, r0
 800187a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  	if (!ans)
 800187e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001882:	2b00      	cmp	r3, #0
 8001884:	d112      	bne.n	80018ac <StartSIM800Task+0x4b0>
		{
			strcpy(&(msg.str), "FAILE_CIPSTATUS\r\n\0");
 8001886:	f107 0308 	add.w	r3, r7, #8
 800188a:	4a2a      	ldr	r2, [pc, #168]	; (8001934 <StartSIM800Task+0x538>)
 800188c:	461c      	mov	r4, r3
 800188e:	4615      	mov	r5, r2
 8001890:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001892:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001894:	682b      	ldr	r3, [r5, #0]
 8001896:	8023      	strh	r3, [r4, #0]
			osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001898:	4b24      	ldr	r3, [pc, #144]	; (800192c <StartSIM800Task+0x530>)
 800189a:	6818      	ldr	r0, [r3, #0]
 800189c:	f107 0108 	add.w	r1, r7, #8
 80018a0:	f04f 33ff 	mov.w	r3, #4294967295
 80018a4:	2200      	movs	r2, #0
 80018a6:	f006 fd33 	bl	8008310 <osMessageQueuePut>
			goto start;
 80018aa:	e5b9      	b.n	8001420 <StartSIM800Task+0x24>
		}
		osDelay(300);
 80018ac:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80018b0:	f006 f9b1 	bl	8007c16 <osDelay>

		strcpy(&(msg.str), "START_SIM800_OK\r\n\0");
 80018b4:	f107 0308 	add.w	r3, r7, #8
 80018b8:	4a21      	ldr	r2, [pc, #132]	; (8001940 <StartSIM800Task+0x544>)
 80018ba:	461c      	mov	r4, r3
 80018bc:	4615      	mov	r5, r2
 80018be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018c2:	682b      	ldr	r3, [r5, #0]
 80018c4:	8023      	strh	r3, [r4, #0]
		osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 80018c6:	4b19      	ldr	r3, [pc, #100]	; (800192c <StartSIM800Task+0x530>)
 80018c8:	6818      	ldr	r0, [r3, #0]
 80018ca:	f107 0108 	add.w	r1, r7, #8
 80018ce:	f04f 33ff 	mov.w	r3, #4294967295
 80018d2:	2200      	movs	r2, #0
 80018d4:	f006 fd1c 	bl	8008310 <osMessageQueuePut>

	  	Start_SIM800 = 1; //module starting good
 80018d8:	4b1a      	ldr	r3, [pc, #104]	; (8001944 <StartSIM800Task+0x548>)
 80018da:	2201      	movs	r2, #1
 80018dc:	701a      	strb	r2, [r3, #0]
	  	osMutexRelease(UART1MutexHandle); //release UART1
 80018de:	4b1a      	ldr	r3, [pc, #104]	; (8001948 <StartSIM800Task+0x54c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f006 fb43 	bl	8007f6e <osMutexRelease>
	  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 80018e8:	2200      	movs	r2, #0
 80018ea:	2104      	movs	r1, #4
 80018ec:	4817      	ldr	r0, [pc, #92]	; (800194c <StartSIM800Task+0x550>)
 80018ee:	f002 fea9 	bl	8004644 <HAL_GPIO_WritePin>
	  	//start thread to connect to broker
	  	MQTTConnectTaskHandle = osThreadNew(StartMQTTConnectTask, NULL, &MQTTConnectTask_attributes);
 80018f2:	4a17      	ldr	r2, [pc, #92]	; (8001950 <StartSIM800Task+0x554>)
 80018f4:	2100      	movs	r1, #0
 80018f6:	4817      	ldr	r0, [pc, #92]	; (8001954 <StartSIM800Task+0x558>)
 80018f8:	f006 f8ce 	bl	8007a98 <osThreadNew>
 80018fc:	4603      	mov	r3, r0
 80018fe:	4a16      	ldr	r2, [pc, #88]	; (8001958 <StartSIM800Task+0x55c>)
 8001900:	6013      	str	r3, [r2, #0]
	  	osThreadTerminate(SIM800StartTaskHandle); //execute this thread
 8001902:	4b16      	ldr	r3, [pc, #88]	; (800195c <StartSIM800Task+0x560>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4618      	mov	r0, r3
 8001908:	f006 f958 	bl	8007bbc <osThreadTerminate>
  {
 800190c:	e57d      	b.n	800140a <StartSIM800Task+0xe>
 800190e:	bf00      	nop
 8001910:	20000400 	.word	0x20000400
 8001914:	0800cfb0 	.word	0x0800cfb0
 8001918:	200003b4 	.word	0x200003b4
 800191c:	20000164 	.word	0x20000164
 8001920:	0800cfbc 	.word	0x0800cfbc
 8001924:	0800cee4 	.word	0x0800cee4
 8001928:	0800cfc8 	.word	0x0800cfc8
 800192c:	20000390 	.word	0x20000390
 8001930:	0800cf1c 	.word	0x0800cf1c
 8001934:	0800cf2c 	.word	0x0800cf2c
 8001938:	0800cfd8 	.word	0x0800cfd8
 800193c:	200003af 	.word	0x200003af
 8001940:	0800cfe4 	.word	0x0800cfe4
 8001944:	200003ae 	.word	0x200003ae
 8001948:	200003a0 	.word	0x200003a0
 800194c:	40020800 	.word	0x40020800
 8001950:	0800d66c 	.word	0x0800d66c
 8001954:	08001961 	.word	0x08001961
 8001958:	20000384 	.word	0x20000384
 800195c:	20000380 	.word	0x20000380

08001960 <StartMQTTConnectTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMQTTConnectTask */
void StartMQTTConnectTask(void *argument)
{
 8001960:	b5b0      	push	{r4, r5, r7, lr}
 8001962:	b0b4      	sub	sp, #208	; 0xd0
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMQTTConnectTask */

	message_type msg; // string for debug message
	uint8_t ans; //is one string in another
	uint8_t send_MQTT_message[BUFF_SIM_SIZE] = {}; //message to SIM800
 8001968:	2300      	movs	r3, #0
 800196a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800196c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001970:	2248      	movs	r2, #72	; 0x48
 8001972:	2100      	movs	r1, #0
 8001974:	4618      	mov	r0, r3
 8001976:	f00a f891 	bl	800ba9c <memset>
	uint8_t counter = 0; //counter of bad trying to connect to broker
 800197a:	2300      	movs	r3, #0
 800197c:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
  /* Infinite loop */
  for(;;)
  {

	  // waiting mutex
	  if (osMutexAcquire(UART1MutexHandle, osWaitForever) == osOK)
 8001980:	4bc3      	ldr	r3, [pc, #780]	; (8001c90 <StartMQTTConnectTask+0x330>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f04f 31ff 	mov.w	r1, #4294967295
 8001988:	4618      	mov	r0, r3
 800198a:	f006 faa5 	bl	8007ed8 <osMutexAcquire>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d1f5      	bne.n	8001980 <StartMQTTConnectTask+0x20>
	  {
	  start:
 8001994:	bf00      	nop
		  if (counter > 5)
 8001996:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 800199a:	2b05      	cmp	r3, #5
 800199c:	d914      	bls.n	80019c8 <StartMQTTConnectTask+0x68>
		  {
			  Error_init = 1;
 800199e:	4bbd      	ldr	r3, [pc, #756]	; (8001c94 <StartMQTTConnectTask+0x334>)
 80019a0:	2201      	movs	r2, #1
 80019a2:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 1);
 80019a4:	2201      	movs	r2, #1
 80019a6:	2104      	movs	r1, #4
 80019a8:	48bb      	ldr	r0, [pc, #748]	; (8001c98 <StartMQTTConnectTask+0x338>)
 80019aa:	f002 fe4b 	bl	8004644 <HAL_GPIO_WritePin>
			  Start_SIM800 = 0;
 80019ae:	4bbb      	ldr	r3, [pc, #748]	; (8001c9c <StartMQTTConnectTask+0x33c>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	701a      	strb	r2, [r3, #0]
			  osMutexRelease(UART1MutexHandle);
 80019b4:	4bb6      	ldr	r3, [pc, #728]	; (8001c90 <StartMQTTConnectTask+0x330>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f006 fad8 	bl	8007f6e <osMutexRelease>
			  osThreadTerminate(MQTTConnectTaskHandle);
 80019be:	4bb8      	ldr	r3, [pc, #736]	; (8001ca0 <StartMQTTConnectTask+0x340>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f006 f8fa 	bl	8007bbc <osThreadTerminate>
		  }

		  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 80019c8:	4bb6      	ldr	r3, [pc, #728]	; (8001ca4 <StartMQTTConnectTask+0x344>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	68da      	ldr	r2, [r3, #12]
 80019ce:	4bb5      	ldr	r3, [pc, #724]	; (8001ca4 <StartMQTTConnectTask+0x344>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f042 0210 	orr.w	r2, r2, #16
 80019d6:	60da      	str	r2, [r3, #12]
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80019d8:	224c      	movs	r2, #76	; 0x4c
 80019da:	2100      	movs	r1, #0
 80019dc:	48b2      	ldr	r0, [pc, #712]	; (8001ca8 <StartMQTTConnectTask+0x348>)
 80019de:	f00a f85d 	bl	800ba9c <memset>
		  //sprintf(str_SIM800,"AT+CIPSTART=\"TCP\",\"broker.hivemq.com\",1883\r\0");
		  sprintf(str_SIM800,"AT+CIPSTART=\"TCP\",\"broker.emqx.io\",1883\r\n\0");
 80019e2:	49b2      	ldr	r1, [pc, #712]	; (8001cac <StartMQTTConnectTask+0x34c>)
 80019e4:	48b2      	ldr	r0, [pc, #712]	; (8001cb0 <StartMQTTConnectTask+0x350>)
 80019e6:	f00a f895 	bl	800bb14 <siprintf>
		  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 80019ea:	48b1      	ldr	r0, [pc, #708]	; (8001cb0 <StartMQTTConnectTask+0x350>)
 80019ec:	f7fe fc10 	bl	8000210 <strlen>
 80019f0:	4603      	mov	r3, r0
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	461a      	mov	r2, r3
 80019f6:	49ae      	ldr	r1, [pc, #696]	; (8001cb0 <StartMQTTConnectTask+0x350>)
 80019f8:	48aa      	ldr	r0, [pc, #680]	; (8001ca4 <StartMQTTConnectTask+0x344>)
 80019fa:	f004 fd33 	bl	8006464 <HAL_UART_Transmit_DMA>
		  ans = SIM800_Ans("OK");
 80019fe:	48ad      	ldr	r0, [pc, #692]	; (8001cb4 <StartMQTTConnectTask+0x354>)
 8001a00:	f7ff fa0c 	bl	8000e1c <SIM800_Ans>
 8001a04:	4603      	mov	r3, r0
 8001a06:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
		  if (!ans)
 8001a0a:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d117      	bne.n	8001a42 <StartMQTTConnectTask+0xe2>
		  {
			  strcpy(&(msg.str), "FAILE_connect1\r\n\0");
 8001a12:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001a16:	4aa8      	ldr	r2, [pc, #672]	; (8001cb8 <StartMQTTConnectTask+0x358>)
 8001a18:	461c      	mov	r4, r3
 8001a1a:	4615      	mov	r5, r2
 8001a1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a20:	682b      	ldr	r3, [r5, #0]
 8001a22:	7023      	strb	r3, [r4, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001a24:	4ba5      	ldr	r3, [pc, #660]	; (8001cbc <StartMQTTConnectTask+0x35c>)
 8001a26:	6818      	ldr	r0, [r3, #0]
 8001a28:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a30:	2200      	movs	r2, #0
 8001a32:	f006 fc6d 	bl	8008310 <osMessageQueuePut>
			  counter++;
 8001a36:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			  goto start;
 8001a40:	e7a9      	b.n	8001996 <StartMQTTConnectTask+0x36>
		  }
		  osDelay(300);
 8001a42:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001a46:	f006 f8e6 	bl	8007c16 <osDelay>

		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001a4a:	224c      	movs	r2, #76	; 0x4c
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	4896      	ldr	r0, [pc, #600]	; (8001ca8 <StartMQTTConnectTask+0x348>)
 8001a50:	f00a f824 	bl	800ba9c <memset>
		  ans = SIM800_Ans("OK");
 8001a54:	4897      	ldr	r0, [pc, #604]	; (8001cb4 <StartMQTTConnectTask+0x354>)
 8001a56:	f7ff f9e1 	bl	8000e1c <SIM800_Ans>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
		  if (!ans)
 8001a60:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d117      	bne.n	8001a98 <StartMQTTConnectTask+0x138>
		  {
			  strcpy(&(msg.str), "FAILE_connect2\r\n\0");
 8001a68:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001a6c:	4a94      	ldr	r2, [pc, #592]	; (8001cc0 <StartMQTTConnectTask+0x360>)
 8001a6e:	461c      	mov	r4, r3
 8001a70:	4615      	mov	r5, r2
 8001a72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a76:	682b      	ldr	r3, [r5, #0]
 8001a78:	7023      	strb	r3, [r4, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001a7a:	4b90      	ldr	r3, [pc, #576]	; (8001cbc <StartMQTTConnectTask+0x35c>)
 8001a7c:	6818      	ldr	r0, [r3, #0]
 8001a7e:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001a82:	f04f 33ff 	mov.w	r3, #4294967295
 8001a86:	2200      	movs	r2, #0
 8001a88:	f006 fc42 	bl	8008310 <osMessageQueuePut>
			  counter++;
 8001a8c:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8001a90:	3301      	adds	r3, #1
 8001a92:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			  goto start;
 8001a96:	e77e      	b.n	8001996 <StartMQTTConnectTask+0x36>
		  }
		  osDelay(300);
 8001a98:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001a9c:	f006 f8bb 	bl	8007c16 <osDelay>

		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001aa0:	224c      	movs	r2, #76	; 0x4c
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	4880      	ldr	r0, [pc, #512]	; (8001ca8 <StartMQTTConnectTask+0x348>)
 8001aa6:	f009 fff9 	bl	800ba9c <memset>
		  sprintf(str_SIM800,"AT+CIPSEND=14\r\n\0");
 8001aaa:	4986      	ldr	r1, [pc, #536]	; (8001cc4 <StartMQTTConnectTask+0x364>)
 8001aac:	4880      	ldr	r0, [pc, #512]	; (8001cb0 <StartMQTTConnectTask+0x350>)
 8001aae:	f00a f831 	bl	800bb14 <siprintf>
		  //sprintf(str_SIM800,"AT+CIPSEND=24\r\0");
		  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 8001ab2:	487f      	ldr	r0, [pc, #508]	; (8001cb0 <StartMQTTConnectTask+0x350>)
 8001ab4:	f7fe fbac 	bl	8000210 <strlen>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	461a      	mov	r2, r3
 8001abe:	497c      	ldr	r1, [pc, #496]	; (8001cb0 <StartMQTTConnectTask+0x350>)
 8001ac0:	4878      	ldr	r0, [pc, #480]	; (8001ca4 <StartMQTTConnectTask+0x344>)
 8001ac2:	f004 fccf 	bl	8006464 <HAL_UART_Transmit_DMA>
		  ans = SIM800_Ans(">");
 8001ac6:	4880      	ldr	r0, [pc, #512]	; (8001cc8 <StartMQTTConnectTask+0x368>)
 8001ac8:	f7ff f9a8 	bl	8000e1c <SIM800_Ans>
 8001acc:	4603      	mov	r3, r0
 8001ace:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
		  if (!ans)
 8001ad2:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d116      	bne.n	8001b08 <StartMQTTConnectTask+0x1a8>
		  {
			  strcpy(&(msg.str), "FAILE_send\r\n\0");
 8001ada:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001ade:	4a7b      	ldr	r2, [pc, #492]	; (8001ccc <StartMQTTConnectTask+0x36c>)
 8001ae0:	461c      	mov	r4, r3
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ae6:	c407      	stmia	r4!, {r0, r1, r2}
 8001ae8:	7023      	strb	r3, [r4, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001aea:	4b74      	ldr	r3, [pc, #464]	; (8001cbc <StartMQTTConnectTask+0x35c>)
 8001aec:	6818      	ldr	r0, [r3, #0]
 8001aee:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001af2:	f04f 33ff 	mov.w	r3, #4294967295
 8001af6:	2200      	movs	r2, #0
 8001af8:	f006 fc0a 	bl	8008310 <osMessageQueuePut>
			  counter++;
 8001afc:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8001b00:	3301      	adds	r3, #1
 8001b02:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			  goto start;
 8001b06:	e746      	b.n	8001996 <StartMQTTConnectTask+0x36>
		  }
		  osDelay(300);
 8001b08:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001b0c:	f006 f883 	bl	8007c16 <osDelay>

		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001b10:	224c      	movs	r2, #76	; 0x4c
 8001b12:	2100      	movs	r1, #0
 8001b14:	4864      	ldr	r0, [pc, #400]	; (8001ca8 <StartMQTTConnectTask+0x348>)
 8001b16:	f009 ffc1 	bl	800ba9c <memset>
		  uint8_t send_MQTT_init[50] = "\x10\x0C\0\x04MQTT\x04\x02\0\x3C\0\0\0";
 8001b1a:	4b6d      	ldr	r3, [pc, #436]	; (8001cd0 <StartMQTTConnectTask+0x370>)
 8001b1c:	f107 0408 	add.w	r4, r7, #8
 8001b20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b22:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001b26:	f107 0318 	add.w	r3, r7, #24
 8001b2a:	2222      	movs	r2, #34	; 0x22
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f009 ffb4 	bl	800ba9c <memset>
		  HAL_UART_Transmit_DMA(&huart1, send_MQTT_init, 14);
 8001b34:	f107 0308 	add.w	r3, r7, #8
 8001b38:	220e      	movs	r2, #14
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4859      	ldr	r0, [pc, #356]	; (8001ca4 <StartMQTTConnectTask+0x344>)
 8001b3e:	f004 fc91 	bl	8006464 <HAL_UART_Transmit_DMA>
		  //uint8_t send_MQTT_init[50] = "\x10\x16\0\x04MQTT\x04\x02\0\x3C\0\x0A\x34\x62\x58\x34\x56\x66\x47\x42\x51\x75\0";
		  //HAL_UART_Transmit_DMA(&huart1, send_MQTT_init, 24);
		  //osDelay(2000);

		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001b42:	224c      	movs	r2, #76	; 0x4c
 8001b44:	2100      	movs	r1, #0
 8001b46:	4858      	ldr	r0, [pc, #352]	; (8001ca8 <StartMQTTConnectTask+0x348>)
 8001b48:	f009 ffa8 	bl	800ba9c <memset>
		  ans = SIM800_Ans("\x10\x0C\0\x04MQTT\x04\x02\0\x3C\0\0\0");
 8001b4c:	4861      	ldr	r0, [pc, #388]	; (8001cd4 <StartMQTTConnectTask+0x374>)
 8001b4e:	f7ff f965 	bl	8000e1c <SIM800_Ans>
 8001b52:	4603      	mov	r3, r0
 8001b54:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
		  if (!ans)
 8001b58:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d11b      	bne.n	8001b98 <StartMQTTConnectTask+0x238>
		  {
			  strcpy(&(msg.str), "FAILE_init_mqtt1\r\n\0");
 8001b60:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001b64:	4a5c      	ldr	r2, [pc, #368]	; (8001cd8 <StartMQTTConnectTask+0x378>)
 8001b66:	461c      	mov	r4, r3
 8001b68:	4615      	mov	r5, r2
 8001b6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b6e:	682b      	ldr	r3, [r5, #0]
 8001b70:	461a      	mov	r2, r3
 8001b72:	8022      	strh	r2, [r4, #0]
 8001b74:	3402      	adds	r4, #2
 8001b76:	0c1b      	lsrs	r3, r3, #16
 8001b78:	7023      	strb	r3, [r4, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001b7a:	4b50      	ldr	r3, [pc, #320]	; (8001cbc <StartMQTTConnectTask+0x35c>)
 8001b7c:	6818      	ldr	r0, [r3, #0]
 8001b7e:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001b82:	f04f 33ff 	mov.w	r3, #4294967295
 8001b86:	2200      	movs	r2, #0
 8001b88:	f006 fbc2 	bl	8008310 <osMessageQueuePut>
			  counter++;
 8001b8c:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8001b90:	3301      	adds	r3, #1
 8001b92:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			  goto start;
 8001b96:	e6fe      	b.n	8001996 <StartMQTTConnectTask+0x36>
		  }

		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001b98:	224c      	movs	r2, #76	; 0x4c
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	4842      	ldr	r0, [pc, #264]	; (8001ca8 <StartMQTTConnectTask+0x348>)
 8001b9e:	f009 ff7d 	bl	800ba9c <memset>
		  ans = SIM800_Ans(MQTT_CONNECT_ASK);
 8001ba2:	484e      	ldr	r0, [pc, #312]	; (8001cdc <StartMQTTConnectTask+0x37c>)
 8001ba4:	f7ff f93a 	bl	8000e1c <SIM800_Ans>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
		  if (!ans)
 8001bae:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d12a      	bne.n	8001c0c <StartMQTTConnectTask+0x2ac>
		  {
			  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001bb6:	224c      	movs	r2, #76	; 0x4c
 8001bb8:	2100      	movs	r1, #0
 8001bba:	483b      	ldr	r0, [pc, #236]	; (8001ca8 <StartMQTTConnectTask+0x348>)
 8001bbc:	f009 ff6e 	bl	800ba9c <memset>
			  ans = SIM800_Ans(MQTT_CONNECT_ASK);
 8001bc0:	4846      	ldr	r0, [pc, #280]	; (8001cdc <StartMQTTConnectTask+0x37c>)
 8001bc2:	f7ff f92b 	bl	8000e1c <SIM800_Ans>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
			  if (!ans)
 8001bcc:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d11b      	bne.n	8001c0c <StartMQTTConnectTask+0x2ac>
			  {
				  strcpy(&(msg.str), "FAILE_init_mqtt2\r\n\0");
 8001bd4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001bd8:	4a41      	ldr	r2, [pc, #260]	; (8001ce0 <StartMQTTConnectTask+0x380>)
 8001bda:	461c      	mov	r4, r3
 8001bdc:	4615      	mov	r5, r2
 8001bde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001be0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001be2:	682b      	ldr	r3, [r5, #0]
 8001be4:	461a      	mov	r2, r3
 8001be6:	8022      	strh	r2, [r4, #0]
 8001be8:	3402      	adds	r4, #2
 8001bea:	0c1b      	lsrs	r3, r3, #16
 8001bec:	7023      	strb	r3, [r4, #0]
				  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001bee:	4b33      	ldr	r3, [pc, #204]	; (8001cbc <StartMQTTConnectTask+0x35c>)
 8001bf0:	6818      	ldr	r0, [r3, #0]
 8001bf2:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f006 fb88 	bl	8008310 <osMessageQueuePut>
				  counter++;
 8001c00:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8001c04:	3301      	adds	r3, #1
 8001c06:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
				  goto start;
 8001c0a:	e6c4      	b.n	8001996 <StartMQTTConnectTask+0x36>
			  }
		  }
		  osDelay(100);
 8001c0c:	2064      	movs	r0, #100	; 0x64
 8001c0e:	f006 f802 	bl	8007c16 <osDelay>

		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001c12:	224c      	movs	r2, #76	; 0x4c
 8001c14:	2100      	movs	r1, #0
 8001c16:	4824      	ldr	r0, [pc, #144]	; (8001ca8 <StartMQTTConnectTask+0x348>)
 8001c18:	f009 ff40 	bl	800ba9c <memset>
		  sprintf(send_MQTT_message,"AT+CIPSEND=%d\r\n\0", strlen(TOPIC) + 7);
 8001c1c:	4831      	ldr	r0, [pc, #196]	; (8001ce4 <StartMQTTConnectTask+0x384>)
 8001c1e:	f7fe faf7 	bl	8000210 <strlen>
 8001c22:	4603      	mov	r3, r0
 8001c24:	1dda      	adds	r2, r3, #7
 8001c26:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c2a:	492f      	ldr	r1, [pc, #188]	; (8001ce8 <StartMQTTConnectTask+0x388>)
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f009 ff71 	bl	800bb14 <siprintf>
		  HAL_UART_Transmit_DMA(&huart1, send_MQTT_message, strlen(send_MQTT_message));
 8001c32:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7fe faea 	bl	8000210 <strlen>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c44:	4619      	mov	r1, r3
 8001c46:	4817      	ldr	r0, [pc, #92]	; (8001ca4 <StartMQTTConnectTask+0x344>)
 8001c48:	f004 fc0c 	bl	8006464 <HAL_UART_Transmit_DMA>
		  ans = SIM800_Ans(">");
 8001c4c:	481e      	ldr	r0, [pc, #120]	; (8001cc8 <StartMQTTConnectTask+0x368>)
 8001c4e:	f7ff f8e5 	bl	8000e1c <SIM800_Ans>
 8001c52:	4603      	mov	r3, r0
 8001c54:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
		  if (!ans)
 8001c58:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d147      	bne.n	8001cf0 <StartMQTTConnectTask+0x390>
		  {
			  strcpy(&(msg.str), "FAILE_send1\r\n\0");
 8001c60:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001c64:	4a21      	ldr	r2, [pc, #132]	; (8001cec <StartMQTTConnectTask+0x38c>)
 8001c66:	461c      	mov	r4, r3
 8001c68:	4613      	mov	r3, r2
 8001c6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c6c:	c407      	stmia	r4!, {r0, r1, r2}
 8001c6e:	8023      	strh	r3, [r4, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001c70:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <StartMQTTConnectTask+0x35c>)
 8001c72:	6818      	ldr	r0, [r3, #0]
 8001c74:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001c78:	f04f 33ff 	mov.w	r3, #4294967295
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f006 fb47 	bl	8008310 <osMessageQueuePut>
			  counter++;
 8001c82:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8001c86:	3301      	adds	r3, #1
 8001c88:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			  goto start;
 8001c8c:	e683      	b.n	8001996 <StartMQTTConnectTask+0x36>
 8001c8e:	bf00      	nop
 8001c90:	200003a0 	.word	0x200003a0
 8001c94:	200003ac 	.word	0x200003ac
 8001c98:	40020800 	.word	0x40020800
 8001c9c:	200003ae 	.word	0x200003ae
 8001ca0:	20000384 	.word	0x20000384
 8001ca4:	20000164 	.word	0x20000164
 8001ca8:	20000400 	.word	0x20000400
 8001cac:	0800cff8 	.word	0x0800cff8
 8001cb0:	200003b4 	.word	0x200003b4
 8001cb4:	0800cee4 	.word	0x0800cee4
 8001cb8:	0800d024 	.word	0x0800d024
 8001cbc:	20000390 	.word	0x20000390
 8001cc0:	0800d038 	.word	0x0800d038
 8001cc4:	0800d04c 	.word	0x0800d04c
 8001cc8:	0800ce68 	.word	0x0800ce68
 8001ccc:	0800d060 	.word	0x0800d060
 8001cd0:	0800d110 	.word	0x0800d110
 8001cd4:	0800d070 	.word	0x0800d070
 8001cd8:	0800d080 	.word	0x0800d080
 8001cdc:	20000008 	.word	0x20000008
 8001ce0:	0800d094 	.word	0x0800d094
 8001ce4:	20000010 	.word	0x20000010
 8001ce8:	0800ce54 	.word	0x0800ce54
 8001cec:	0800d0a8 	.word	0x0800d0a8
		  }
		  osDelay(100);
 8001cf0:	2064      	movs	r0, #100	; 0x64
 8001cf2:	f005 ff90 	bl	8007c16 <osDelay>
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001cf6:	224c      	movs	r2, #76	; 0x4c
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	486b      	ldr	r0, [pc, #428]	; (8001ea8 <StartMQTTConnectTask+0x548>)
 8001cfc:	f009 fece 	bl	800ba9c <memset>

		  //create packet to subscribe on topic
		  send_MQTT_message[0] = 0x82;
 8001d00:	2382      	movs	r3, #130	; 0x82
 8001d02:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
		  send_MQTT_message[1] = strlen(TOPIC) + 5;
 8001d06:	4869      	ldr	r0, [pc, #420]	; (8001eac <StartMQTTConnectTask+0x54c>)
 8001d08:	f7fe fa82 	bl	8000210 <strlen>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	3305      	adds	r3, #5
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
		  send_MQTT_message[2] = 0;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		  send_MQTT_message[3] = 1;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		  send_MQTT_message[4] = 0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
		  send_MQTT_message[5] = strlen(TOPIC);
 8001d2a:	4860      	ldr	r0, [pc, #384]	; (8001eac <StartMQTTConnectTask+0x54c>)
 8001d2c:	f7fe fa70 	bl	8000210 <strlen>
 8001d30:	4603      	mov	r3, r0
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
		  sprintf(send_MQTT_message + 6,"%s\0",TOPIC);
 8001d38:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d3c:	3306      	adds	r3, #6
 8001d3e:	4a5b      	ldr	r2, [pc, #364]	; (8001eac <StartMQTTConnectTask+0x54c>)
 8001d40:	495b      	ldr	r1, [pc, #364]	; (8001eb0 <StartMQTTConnectTask+0x550>)
 8001d42:	4618      	mov	r0, r3
 8001d44:	f009 fee6 	bl	800bb14 <siprintf>
		  HAL_UART_Transmit_DMA(&huart1, send_MQTT_message, strlen(TOPIC) + 7);
 8001d48:	4858      	ldr	r0, [pc, #352]	; (8001eac <StartMQTTConnectTask+0x54c>)
 8001d4a:	f7fe fa61 	bl	8000210 <strlen>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	3307      	adds	r3, #7
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4855      	ldr	r0, [pc, #340]	; (8001eb4 <StartMQTTConnectTask+0x554>)
 8001d5e:	f004 fb81 	bl	8006464 <HAL_UART_Transmit_DMA>
		  ans = SIM800_Ans(send_MQTT_message);
 8001d62:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff f858 	bl	8000e1c <SIM800_Ans>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
		  if (!ans)
 8001d72:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d116      	bne.n	8001da8 <StartMQTTConnectTask+0x448>
		  {
			  strcpy(&(msg.str), "FAILE_send2\r\n\0");
 8001d7a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001d7e:	4a4e      	ldr	r2, [pc, #312]	; (8001eb8 <StartMQTTConnectTask+0x558>)
 8001d80:	461c      	mov	r4, r3
 8001d82:	4613      	mov	r3, r2
 8001d84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d86:	c407      	stmia	r4!, {r0, r1, r2}
 8001d88:	8023      	strh	r3, [r4, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001d8a:	4b4c      	ldr	r3, [pc, #304]	; (8001ebc <StartMQTTConnectTask+0x55c>)
 8001d8c:	6818      	ldr	r0, [r3, #0]
 8001d8e:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001d92:	f04f 33ff 	mov.w	r3, #4294967295
 8001d96:	2200      	movs	r2, #0
 8001d98:	f006 faba 	bl	8008310 <osMessageQueuePut>
			  counter++;
 8001d9c:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8001da0:	3301      	adds	r3, #1
 8001da2:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			  goto start;
 8001da6:	e5f6      	b.n	8001996 <StartMQTTConnectTask+0x36>
		  }
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001da8:	224c      	movs	r2, #76	; 0x4c
 8001daa:	2100      	movs	r1, #0
 8001dac:	483e      	ldr	r0, [pc, #248]	; (8001ea8 <StartMQTTConnectTask+0x548>)
 8001dae:	f009 fe75 	bl	800ba9c <memset>
		  ans = SIM800_Ans(TOPIC_ASK);
 8001db2:	4843      	ldr	r0, [pc, #268]	; (8001ec0 <StartMQTTConnectTask+0x560>)
 8001db4:	f7ff f832 	bl	8000e1c <SIM800_Ans>
 8001db8:	4603      	mov	r3, r0
 8001dba:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
		  if (!ans)
 8001dbe:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d125      	bne.n	8001e12 <StartMQTTConnectTask+0x4b2>
		  {
			  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001dc6:	224c      	movs	r2, #76	; 0x4c
 8001dc8:	2100      	movs	r1, #0
 8001dca:	4837      	ldr	r0, [pc, #220]	; (8001ea8 <StartMQTTConnectTask+0x548>)
 8001dcc:	f009 fe66 	bl	800ba9c <memset>
			  ans = SIM800_Ans(TOPIC_ASK);
 8001dd0:	483b      	ldr	r0, [pc, #236]	; (8001ec0 <StartMQTTConnectTask+0x560>)
 8001dd2:	f7ff f823 	bl	8000e1c <SIM800_Ans>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
			  if (!ans)
 8001ddc:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d116      	bne.n	8001e12 <StartMQTTConnectTask+0x4b2>
			  {
				  strcpy(&(msg.str), "FAILE_send3\r\n\0");
 8001de4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001de8:	4a36      	ldr	r2, [pc, #216]	; (8001ec4 <StartMQTTConnectTask+0x564>)
 8001dea:	461c      	mov	r4, r3
 8001dec:	4613      	mov	r3, r2
 8001dee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001df0:	c407      	stmia	r4!, {r0, r1, r2}
 8001df2:	8023      	strh	r3, [r4, #0]
				  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001df4:	4b31      	ldr	r3, [pc, #196]	; (8001ebc <StartMQTTConnectTask+0x55c>)
 8001df6:	6818      	ldr	r0, [r3, #0]
 8001df8:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8001e00:	2200      	movs	r2, #0
 8001e02:	f006 fa85 	bl	8008310 <osMessageQueuePut>
				  counter++;
 8001e06:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
				  goto start;
 8001e10:	e5c1      	b.n	8001996 <StartMQTTConnectTask+0x36>
			  }
		  }


		  strcpy(&(msg.str), "MQTT_connect_OK\r\n\0");
 8001e12:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001e16:	4a2c      	ldr	r2, [pc, #176]	; (8001ec8 <StartMQTTConnectTask+0x568>)
 8001e18:	461c      	mov	r4, r3
 8001e1a:	4615      	mov	r5, r2
 8001e1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e20:	682b      	ldr	r3, [r5, #0]
 8001e22:	8023      	strh	r3, [r4, #0]
		  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001e24:	4b25      	ldr	r3, [pc, #148]	; (8001ebc <StartMQTTConnectTask+0x55c>)
 8001e26:	6818      	ldr	r0, [r3, #0]
 8001e28:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e30:	2200      	movs	r2, #0
 8001e32:	f006 fa6d 	bl	8008310 <osMessageQueuePut>

		  Broker_connect = 1;
 8001e36:	4b25      	ldr	r3, [pc, #148]	; (8001ecc <StartMQTTConnectTask+0x56c>)
 8001e38:	2201      	movs	r2, #1
 8001e3a:	701a      	strb	r2, [r3, #0]
		  osTimerStart(PingTimerHandle, PING_TIME); //start ping timer
 8001e3c:	4b24      	ldr	r3, [pc, #144]	; (8001ed0 <StartMQTTConnectTask+0x570>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f24c 3150 	movw	r1, #50000	; 0xc350
 8001e44:	4618      	mov	r0, r3
 8001e46:	f005 ff93 	bl	8007d70 <osTimerStart>
		  HAL_UART_Receive_DMA(&huart1, SIM800BuffRx, BUFF_SIM_SIZE); //start receive messages
 8001e4a:	224c      	movs	r2, #76	; 0x4c
 8001e4c:	4916      	ldr	r1, [pc, #88]	; (8001ea8 <StartMQTTConnectTask+0x548>)
 8001e4e:	4819      	ldr	r0, [pc, #100]	; (8001eb4 <StartMQTTConnectTask+0x554>)
 8001e50:	f004 fb86 	bl	8006560 <HAL_UART_Receive_DMA>
		  Tech_ans_wait = 0;
 8001e54:	4b1f      	ldr	r3, [pc, #124]	; (8001ed4 <StartMQTTConnectTask+0x574>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	701a      	strb	r2, [r3, #0]

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	2108      	movs	r1, #8
 8001e5e:	481e      	ldr	r0, [pc, #120]	; (8001ed8 <StartMQTTConnectTask+0x578>)
 8001e60:	f002 fbf0 	bl	8004644 <HAL_GPIO_WritePin>
		  //start receiving data from broker
		  osMutexRelease(UART1MutexHandle);
 8001e64:	4b1d      	ldr	r3, [pc, #116]	; (8001edc <StartMQTTConnectTask+0x57c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f006 f880 	bl	8007f6e <osMutexRelease>
		  PINGTaskHandle = osThreadNew(PINGStartTask, NULL, &PINGTask_attributes);
 8001e6e:	4a1c      	ldr	r2, [pc, #112]	; (8001ee0 <StartMQTTConnectTask+0x580>)
 8001e70:	2100      	movs	r1, #0
 8001e72:	481c      	ldr	r0, [pc, #112]	; (8001ee4 <StartMQTTConnectTask+0x584>)
 8001e74:	f005 fe10 	bl	8007a98 <osThreadNew>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	4a1b      	ldr	r2, [pc, #108]	; (8001ee8 <StartMQTTConnectTask+0x588>)
 8001e7c:	6013      	str	r3, [r2, #0]
		  sprintf(&(msg.str), "On the line, Firmware V0.91\r\n\0");
 8001e7e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001e82:	491a      	ldr	r1, [pc, #104]	; (8001eec <StartMQTTConnectTask+0x58c>)
 8001e84:	4618      	mov	r0, r3
 8001e86:	f009 fe45 	bl	800bb14 <siprintf>
		  osMessageQueuePut(SIM800SendQueueHandle, &msg, 0, osWaitForever);
 8001e8a:	4b19      	ldr	r3, [pc, #100]	; (8001ef0 <StartMQTTConnectTask+0x590>)
 8001e8c:	6818      	ldr	r0, [r3, #0]
 8001e8e:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001e92:	f04f 33ff 	mov.w	r3, #4294967295
 8001e96:	2200      	movs	r2, #0
 8001e98:	f006 fa3a 	bl	8008310 <osMessageQueuePut>
		  //HAL_UART_Receive_DMA(&huart1, SIM800BuffRx, BUFF_SIM_SIZE); //start receive messages
		  osThreadTerminate(MQTTConnectTaskHandle);
 8001e9c:	4b15      	ldr	r3, [pc, #84]	; (8001ef4 <StartMQTTConnectTask+0x594>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f005 fe8b 	bl	8007bbc <osThreadTerminate>
	  if (osMutexAcquire(UART1MutexHandle, osWaitForever) == osOK)
 8001ea6:	e56b      	b.n	8001980 <StartMQTTConnectTask+0x20>
 8001ea8:	20000400 	.word	0x20000400
 8001eac:	20000010 	.word	0x20000010
 8001eb0:	0800d0b8 	.word	0x0800d0b8
 8001eb4:	20000164 	.word	0x20000164
 8001eb8:	0800d0bc 	.word	0x0800d0bc
 8001ebc:	20000390 	.word	0x20000390
 8001ec0:	20000024 	.word	0x20000024
 8001ec4:	0800d0cc 	.word	0x0800d0cc
 8001ec8:	0800d0dc 	.word	0x0800d0dc
 8001ecc:	200003b0 	.word	0x200003b0
 8001ed0:	2000039c 	.word	0x2000039c
 8001ed4:	200003b1 	.word	0x200003b1
 8001ed8:	40020800 	.word	0x40020800
 8001edc:	200003a0 	.word	0x200003a0
 8001ee0:	0800d624 	.word	0x0800d624
 8001ee4:	0800115d 	.word	0x0800115d
 8001ee8:	2000037c 	.word	0x2000037c
 8001eec:	0800d0f0 	.word	0x0800d0f0
 8001ef0:	20000394 	.word	0x20000394
 8001ef4:	20000384 	.word	0x20000384

08001ef8 <StartMessHandlerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMessHandlerTask */
void StartMessHandlerTask(void *argument)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b0a6      	sub	sp, #152	; 0x98
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
	message_type msg;
	message_type msg2;
  /* Infinite loop */
  for(;;)
  {
	  if (osMessageQueueGet(RxSIM800QueueHandle, &msg, 0, osWaitForever) == osOK)
 8001f00:	4b48      	ldr	r3, [pc, #288]	; (8002024 <StartMessHandlerTask+0x12c>)
 8001f02:	6818      	ldr	r0, [r3, #0]
 8001f04:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001f08:	f04f 33ff 	mov.w	r3, #4294967295
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f006 fa5f 	bl	80083d0 <osMessageQueueGet>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1f3      	bne.n	8001f00 <StartMessHandlerTask+0x8>
	  {

		sprintf(&(msg2.str), "RX\r\n\0");
 8001f18:	f107 0308 	add.w	r3, r7, #8
 8001f1c:	4942      	ldr	r1, [pc, #264]	; (8002028 <StartMessHandlerTask+0x130>)
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f009 fdf8 	bl	800bb14 <siprintf>
		osMessageQueuePut(SIM800SendQueueHandle, &msg2, 0, osWaitForever);
 8001f24:	4b41      	ldr	r3, [pc, #260]	; (800202c <StartMessHandlerTask+0x134>)
 8001f26:	6818      	ldr	r0, [r3, #0]
 8001f28:	f107 0108 	add.w	r1, r7, #8
 8001f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f30:	2200      	movs	r2, #0
 8001f32:	f006 f9ed 	bl	8008310 <osMessageQueuePut>
		if (String_in_String(msg.str,MESSAGE_TYPE_BUFF_SIZE,";;on"))
 8001f36:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f3a:	4a3d      	ldr	r2, [pc, #244]	; (8002030 <StartMessHandlerTask+0x138>)
 8001f3c:	2146      	movs	r1, #70	; 0x46
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7fe febe 	bl	8000cc0 <String_in_String>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d005      	beq.n	8001f56 <StartMessHandlerTask+0x5e>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	2102      	movs	r1, #2
 8001f4e:	4839      	ldr	r0, [pc, #228]	; (8002034 <StartMessHandlerTask+0x13c>)
 8001f50:	f002 fb78 	bl	8004644 <HAL_GPIO_WritePin>
 8001f54:	e7d4      	b.n	8001f00 <StartMessHandlerTask+0x8>
			//HAL_UART_Transmit(&huart2, SIM800BuffRx, BUFF_SIM_SIZE, 1000);
		}
		else if (String_in_String(msg.str,MESSAGE_TYPE_BUFF_SIZE,";;off"))
 8001f56:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f5a:	4a37      	ldr	r2, [pc, #220]	; (8002038 <StartMessHandlerTask+0x140>)
 8001f5c:	2146      	movs	r1, #70	; 0x46
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7fe feae 	bl	8000cc0 <String_in_String>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d005      	beq.n	8001f76 <StartMessHandlerTask+0x7e>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1);
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	2102      	movs	r1, #2
 8001f6e:	4831      	ldr	r0, [pc, #196]	; (8002034 <StartMessHandlerTask+0x13c>)
 8001f70:	f002 fb68 	bl	8004644 <HAL_GPIO_WritePin>
 8001f74:	e7c4      	b.n	8001f00 <StartMessHandlerTask+0x8>
			//HAL_UART_Transmit(&huart2, SIM800BuffRx, BUFF_SIM_SIZE, 1000);
		}
		else if (String_in_String(msg.str,MESSAGE_TYPE_BUFF_SIZE,";;temp"))
 8001f76:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f7a:	4a30      	ldr	r2, [pc, #192]	; (800203c <StartMessHandlerTask+0x144>)
 8001f7c:	2146      	movs	r1, #70	; 0x46
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7fe fe9e 	bl	8000cc0 <String_in_String>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d003      	beq.n	8001f92 <StartMessHandlerTask+0x9a>
		{
			Get_temp = 1;
 8001f8a:	4b2d      	ldr	r3, [pc, #180]	; (8002040 <StartMessHandlerTask+0x148>)
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	701a      	strb	r2, [r3, #0]
 8001f90:	e7b6      	b.n	8001f00 <StartMessHandlerTask+0x8>
			//HAL_UART_Transmit(&huart2, SIM800BuffRx, BUFF_SIM_SIZE, 1000);
		}
		else if (String_in_String(msg.str,MESSAGE_TYPE_BUFF_SIZE,";;updt"))
 8001f92:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f96:	4a2b      	ldr	r2, [pc, #172]	; (8002044 <StartMessHandlerTask+0x14c>)
 8001f98:	2146      	movs	r1, #70	; 0x46
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7fe fe90 	bl	8000cc0 <String_in_String>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d0ac      	beq.n	8001f00 <StartMessHandlerTask+0x8>
		{
			if (osMutexAcquire(UART1MutexHandle, osWaitForever) == osOK)
 8001fa6:	4b28      	ldr	r3, [pc, #160]	; (8002048 <StartMessHandlerTask+0x150>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f04f 31ff 	mov.w	r1, #4294967295
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f005 ff92 	bl	8007ed8 <osMutexAcquire>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1a2      	bne.n	8001f00 <StartMessHandlerTask+0x8>
		    {
				memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001fba:	224c      	movs	r2, #76	; 0x4c
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	4823      	ldr	r0, [pc, #140]	; (800204c <StartMessHandlerTask+0x154>)
 8001fc0:	f009 fd6c 	bl	800ba9c <memset>
				sprintf(str_SIM800,"AT+CIPCLOSE\r\n\0");
 8001fc4:	4922      	ldr	r1, [pc, #136]	; (8002050 <StartMessHandlerTask+0x158>)
 8001fc6:	4823      	ldr	r0, [pc, #140]	; (8002054 <StartMessHandlerTask+0x15c>)
 8001fc8:	f009 fda4 	bl	800bb14 <siprintf>
				HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 8001fcc:	4821      	ldr	r0, [pc, #132]	; (8002054 <StartMessHandlerTask+0x15c>)
 8001fce:	f7fe f91f 	bl	8000210 <strlen>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	491e      	ldr	r1, [pc, #120]	; (8002054 <StartMessHandlerTask+0x15c>)
 8001fda:	481f      	ldr	r0, [pc, #124]	; (8002058 <StartMessHandlerTask+0x160>)
 8001fdc:	f004 fa42 	bl	8006464 <HAL_UART_Transmit_DMA>
				osDelay(1000);
 8001fe0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fe4:	f005 fe17 	bl	8007c16 <osDelay>
				osThreadTerminate(PINGTaskHandle);
 8001fe8:	4b1c      	ldr	r3, [pc, #112]	; (800205c <StartMessHandlerTask+0x164>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f005 fde5 	bl	8007bbc <osThreadTerminate>
				osThreadTerminate(SIM800SendTaskHandle);
 8001ff2:	4b1b      	ldr	r3, [pc, #108]	; (8002060 <StartMessHandlerTask+0x168>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f005 fde0 	bl	8007bbc <osThreadTerminate>
				osThreadTerminate(defaultTaskHandle);
 8001ffc:	4b19      	ldr	r3, [pc, #100]	; (8002064 <StartMessHandlerTask+0x16c>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4618      	mov	r0, r3
 8002002:	f005 fddb 	bl	8007bbc <osThreadTerminate>
				osMutexRelease(UART1MutexHandle); //release UART for SIM800
 8002006:	4b10      	ldr	r3, [pc, #64]	; (8002048 <StartMessHandlerTask+0x150>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f005 ffaf 	bl	8007f6e <osMutexRelease>
				myTaskGetFirmHandle = osThreadNew(StartGetFirmware, NULL, &myTaskGetFirm_attributes);
 8002010:	4a15      	ldr	r2, [pc, #84]	; (8002068 <StartMessHandlerTask+0x170>)
 8002012:	2100      	movs	r1, #0
 8002014:	4815      	ldr	r0, [pc, #84]	; (800206c <StartMessHandlerTask+0x174>)
 8002016:	f005 fd3f 	bl	8007a98 <osThreadNew>
 800201a:	4603      	mov	r3, r0
 800201c:	4a14      	ldr	r2, [pc, #80]	; (8002070 <StartMessHandlerTask+0x178>)
 800201e:	6013      	str	r3, [r2, #0]
	  if (osMessageQueueGet(RxSIM800QueueHandle, &msg, 0, osWaitForever) == osOK)
 8002020:	e76e      	b.n	8001f00 <StartMessHandlerTask+0x8>
 8002022:	bf00      	nop
 8002024:	20000398 	.word	0x20000398
 8002028:	0800d144 	.word	0x0800d144
 800202c:	20000394 	.word	0x20000394
 8002030:	0800d14c 	.word	0x0800d14c
 8002034:	40020800 	.word	0x40020800
 8002038:	0800d154 	.word	0x0800d154
 800203c:	0800d15c 	.word	0x0800d15c
 8002040:	200003b2 	.word	0x200003b2
 8002044:	0800d164 	.word	0x0800d164
 8002048:	200003a0 	.word	0x200003a0
 800204c:	20000400 	.word	0x20000400
 8002050:	0800d16c 	.word	0x0800d16c
 8002054:	200003b4 	.word	0x200003b4
 8002058:	20000164 	.word	0x20000164
 800205c:	2000037c 	.word	0x2000037c
 8002060:	20000378 	.word	0x20000378
 8002064:	2000036c 	.word	0x2000036c
 8002068:	0800d6b4 	.word	0x0800d6b4
 800206c:	08002075 	.word	0x08002075
 8002070:	2000038c 	.word	0x2000038c

08002074 <StartGetFirmware>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGetFirmware */
void StartGetFirmware(void *argument)
{
 8002074:	b590      	push	{r4, r7, lr}
 8002076:	b0c5      	sub	sp, #276	; 0x114
 8002078:	af02      	add	r7, sp, #8
 800207a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800207e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002082:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartGetFirmware */
	message_type msg; // string for debug message
	uint8_t ans; //is one string in another
	uint8_t send_MQTT_message[BUFF_SIM_SIZE] = {}; //message to SIM800
 8002084:	2300      	movs	r3, #0
 8002086:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002088:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800208c:	2248      	movs	r2, #72	; 0x48
 800208e:	2100      	movs	r1, #0
 8002090:	4618      	mov	r0, r3
 8002092:	f009 fd03 	bl	800ba9c <memset>
	uint32_t sector_of_firmware = 30;
 8002096:	231e      	movs	r3, #30
 8002098:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	uint8_t tmp2[30];
	uint8_t tmp3[30];
  /* Infinite loop */
  for(;;)
  {
	  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 800209c:	4bc0      	ldr	r3, [pc, #768]	; (80023a0 <StartGetFirmware+0x32c>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68da      	ldr	r2, [r3, #12]
 80020a2:	4bbf      	ldr	r3, [pc, #764]	; (80023a0 <StartGetFirmware+0x32c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f042 0210 	orr.w	r2, r2, #16
 80020aa:	60da      	str	r2, [r3, #12]
	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80020ac:	224c      	movs	r2, #76	; 0x4c
 80020ae:	2100      	movs	r1, #0
 80020b0:	48bc      	ldr	r0, [pc, #752]	; (80023a4 <StartGetFirmware+0x330>)
 80020b2:	f009 fcf3 	bl	800ba9c <memset>
	  sprintf(str_SIM800,"AT+FTPMODE=1\r\n\0");
 80020b6:	49bc      	ldr	r1, [pc, #752]	; (80023a8 <StartGetFirmware+0x334>)
 80020b8:	48bc      	ldr	r0, [pc, #752]	; (80023ac <StartGetFirmware+0x338>)
 80020ba:	f009 fd2b 	bl	800bb14 <siprintf>
	  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 80020be:	48bb      	ldr	r0, [pc, #748]	; (80023ac <StartGetFirmware+0x338>)
 80020c0:	f7fe f8a6 	bl	8000210 <strlen>
 80020c4:	4603      	mov	r3, r0
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	461a      	mov	r2, r3
 80020ca:	49b8      	ldr	r1, [pc, #736]	; (80023ac <StartGetFirmware+0x338>)
 80020cc:	48b4      	ldr	r0, [pc, #720]	; (80023a0 <StartGetFirmware+0x32c>)
 80020ce:	f004 f9c9 	bl	8006464 <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 80020d2:	48b7      	ldr	r0, [pc, #732]	; (80023b0 <StartGetFirmware+0x33c>)
 80020d4:	f7fe fea2 	bl	8000e1c <SIM800_Ans>
 80020d8:	4603      	mov	r3, r0
 80020da:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	  if (!ans)
 80020de:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d11d      	bne.n	8002122 <StartGetFirmware+0xae>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80020e6:	224c      	movs	r2, #76	; 0x4c
 80020e8:	2100      	movs	r1, #0
 80020ea:	48ae      	ldr	r0, [pc, #696]	; (80023a4 <StartGetFirmware+0x330>)
 80020ec:	f009 fcd6 	bl	800ba9c <memset>
		  ans = SIM800_Ans("OK");
 80020f0:	48af      	ldr	r0, [pc, #700]	; (80023b0 <StartGetFirmware+0x33c>)
 80020f2:	f7fe fe93 	bl	8000e1c <SIM800_Ans>
 80020f6:	4603      	mov	r3, r0
 80020f8:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
		  if (!ans)
 80020fc:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8002100:	2b00      	cmp	r3, #0
 8002102:	d10e      	bne.n	8002122 <StartGetFirmware+0xae>
		  {
			  strcpy(&(msg.str), "FTPMODE\r\n\0");
 8002104:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002108:	4aaa      	ldr	r2, [pc, #680]	; (80023b4 <StartGetFirmware+0x340>)
 800210a:	ca07      	ldmia	r2, {r0, r1, r2}
 800210c:	c303      	stmia	r3!, {r0, r1}
 800210e:	801a      	strh	r2, [r3, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8002110:	4ba9      	ldr	r3, [pc, #676]	; (80023b8 <StartGetFirmware+0x344>)
 8002112:	6818      	ldr	r0, [r3, #0]
 8002114:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002118:	f04f 33ff 	mov.w	r3, #4294967295
 800211c:	2200      	movs	r2, #0
 800211e:	f006 f8f7 	bl	8008310 <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 8002122:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002126:	f005 fd76 	bl	8007c16 <osDelay>
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
		  }
	  }
	  osDelay(300);*/

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 800212a:	224c      	movs	r2, #76	; 0x4c
 800212c:	2100      	movs	r1, #0
 800212e:	489d      	ldr	r0, [pc, #628]	; (80023a4 <StartGetFirmware+0x330>)
 8002130:	f009 fcb4 	bl	800ba9c <memset>
	  sprintf(str_SIM800,"AT+FTPTYPE=I\r\n\0");
 8002134:	49a1      	ldr	r1, [pc, #644]	; (80023bc <StartGetFirmware+0x348>)
 8002136:	489d      	ldr	r0, [pc, #628]	; (80023ac <StartGetFirmware+0x338>)
 8002138:	f009 fcec 	bl	800bb14 <siprintf>
	  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 800213c:	489b      	ldr	r0, [pc, #620]	; (80023ac <StartGetFirmware+0x338>)
 800213e:	f7fe f867 	bl	8000210 <strlen>
 8002142:	4603      	mov	r3, r0
 8002144:	b29b      	uxth	r3, r3
 8002146:	461a      	mov	r2, r3
 8002148:	4998      	ldr	r1, [pc, #608]	; (80023ac <StartGetFirmware+0x338>)
 800214a:	4895      	ldr	r0, [pc, #596]	; (80023a0 <StartGetFirmware+0x32c>)
 800214c:	f004 f98a 	bl	8006464 <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 8002150:	4897      	ldr	r0, [pc, #604]	; (80023b0 <StartGetFirmware+0x33c>)
 8002152:	f7fe fe63 	bl	8000e1c <SIM800_Ans>
 8002156:	4603      	mov	r3, r0
 8002158:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	  if (!ans)
 800215c:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8002160:	2b00      	cmp	r3, #0
 8002162:	d11d      	bne.n	80021a0 <StartGetFirmware+0x12c>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002164:	224c      	movs	r2, #76	; 0x4c
 8002166:	2100      	movs	r1, #0
 8002168:	488e      	ldr	r0, [pc, #568]	; (80023a4 <StartGetFirmware+0x330>)
 800216a:	f009 fc97 	bl	800ba9c <memset>
		  ans = SIM800_Ans("OK");
 800216e:	4890      	ldr	r0, [pc, #576]	; (80023b0 <StartGetFirmware+0x33c>)
 8002170:	f7fe fe54 	bl	8000e1c <SIM800_Ans>
 8002174:	4603      	mov	r3, r0
 8002176:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
		  if (!ans)
 800217a:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 800217e:	2b00      	cmp	r3, #0
 8002180:	d10e      	bne.n	80021a0 <StartGetFirmware+0x12c>
		  {
			  strcpy(&(msg.str), "FTPTYPE\r\n\0");
 8002182:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002186:	4a8e      	ldr	r2, [pc, #568]	; (80023c0 <StartGetFirmware+0x34c>)
 8002188:	ca07      	ldmia	r2, {r0, r1, r2}
 800218a:	c303      	stmia	r3!, {r0, r1}
 800218c:	801a      	strh	r2, [r3, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 800218e:	4b8a      	ldr	r3, [pc, #552]	; (80023b8 <StartGetFirmware+0x344>)
 8002190:	6818      	ldr	r0, [r3, #0]
 8002192:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002196:	f04f 33ff 	mov.w	r3, #4294967295
 800219a:	2200      	movs	r2, #0
 800219c:	f006 f8b8 	bl	8008310 <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 80021a0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80021a4:	f005 fd37 	bl	8007c16 <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80021a8:	224c      	movs	r2, #76	; 0x4c
 80021aa:	2100      	movs	r1, #0
 80021ac:	487d      	ldr	r0, [pc, #500]	; (80023a4 <StartGetFirmware+0x330>)
 80021ae:	f009 fc75 	bl	800ba9c <memset>
	  sprintf(str_SIM800,"AT+SAPBR=3,1,CONTYPE,GPRS\r\n\0");
 80021b2:	4984      	ldr	r1, [pc, #528]	; (80023c4 <StartGetFirmware+0x350>)
 80021b4:	487d      	ldr	r0, [pc, #500]	; (80023ac <StartGetFirmware+0x338>)
 80021b6:	f009 fcad 	bl	800bb14 <siprintf>
	  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 80021ba:	487c      	ldr	r0, [pc, #496]	; (80023ac <StartGetFirmware+0x338>)
 80021bc:	f7fe f828 	bl	8000210 <strlen>
 80021c0:	4603      	mov	r3, r0
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	461a      	mov	r2, r3
 80021c6:	4979      	ldr	r1, [pc, #484]	; (80023ac <StartGetFirmware+0x338>)
 80021c8:	4875      	ldr	r0, [pc, #468]	; (80023a0 <StartGetFirmware+0x32c>)
 80021ca:	f004 f94b 	bl	8006464 <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 80021ce:	4878      	ldr	r0, [pc, #480]	; (80023b0 <StartGetFirmware+0x33c>)
 80021d0:	f7fe fe24 	bl	8000e1c <SIM800_Ans>
 80021d4:	4603      	mov	r3, r0
 80021d6:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	  if (!ans)
 80021da:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d11e      	bne.n	8002220 <StartGetFirmware+0x1ac>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80021e2:	224c      	movs	r2, #76	; 0x4c
 80021e4:	2100      	movs	r1, #0
 80021e6:	486f      	ldr	r0, [pc, #444]	; (80023a4 <StartGetFirmware+0x330>)
 80021e8:	f009 fc58 	bl	800ba9c <memset>
		  ans = SIM800_Ans("OK");
 80021ec:	4870      	ldr	r0, [pc, #448]	; (80023b0 <StartGetFirmware+0x33c>)
 80021ee:	f7fe fe15 	bl	8000e1c <SIM800_Ans>
 80021f2:	4603      	mov	r3, r0
 80021f4:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
		  if (!ans)
 80021f8:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d10f      	bne.n	8002220 <StartGetFirmware+0x1ac>
		  {
			  strcpy(&(msg.str), "SAPBR\r\n\0");
 8002200:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002204:	4a70      	ldr	r2, [pc, #448]	; (80023c8 <StartGetFirmware+0x354>)
 8002206:	e892 0003 	ldmia.w	r2, {r0, r1}
 800220a:	e883 0003 	stmia.w	r3, {r0, r1}
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 800220e:	4b6a      	ldr	r3, [pc, #424]	; (80023b8 <StartGetFirmware+0x344>)
 8002210:	6818      	ldr	r0, [r3, #0]
 8002212:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002216:	f04f 33ff 	mov.w	r3, #4294967295
 800221a:	2200      	movs	r2, #0
 800221c:	f006 f878 	bl	8008310 <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 8002220:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002224:	f005 fcf7 	bl	8007c16 <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002228:	224c      	movs	r2, #76	; 0x4c
 800222a:	2100      	movs	r1, #0
 800222c:	485d      	ldr	r0, [pc, #372]	; (80023a4 <StartGetFirmware+0x330>)
 800222e:	f009 fc35 	bl	800ba9c <memset>
	  sprintf(str_SIM800,"AT+SAPBR=3,1,APN,internet.beeline.ru\r\n\0");
 8002232:	4966      	ldr	r1, [pc, #408]	; (80023cc <StartGetFirmware+0x358>)
 8002234:	485d      	ldr	r0, [pc, #372]	; (80023ac <StartGetFirmware+0x338>)
 8002236:	f009 fc6d 	bl	800bb14 <siprintf>
	  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 800223a:	485c      	ldr	r0, [pc, #368]	; (80023ac <StartGetFirmware+0x338>)
 800223c:	f7fd ffe8 	bl	8000210 <strlen>
 8002240:	4603      	mov	r3, r0
 8002242:	b29b      	uxth	r3, r3
 8002244:	461a      	mov	r2, r3
 8002246:	4959      	ldr	r1, [pc, #356]	; (80023ac <StartGetFirmware+0x338>)
 8002248:	4855      	ldr	r0, [pc, #340]	; (80023a0 <StartGetFirmware+0x32c>)
 800224a:	f004 f90b 	bl	8006464 <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 800224e:	4858      	ldr	r0, [pc, #352]	; (80023b0 <StartGetFirmware+0x33c>)
 8002250:	f7fe fde4 	bl	8000e1c <SIM800_Ans>
 8002254:	4603      	mov	r3, r0
 8002256:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	  if (!ans)
 800225a:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 800225e:	2b00      	cmp	r3, #0
 8002260:	d11e      	bne.n	80022a0 <StartGetFirmware+0x22c>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002262:	224c      	movs	r2, #76	; 0x4c
 8002264:	2100      	movs	r1, #0
 8002266:	484f      	ldr	r0, [pc, #316]	; (80023a4 <StartGetFirmware+0x330>)
 8002268:	f009 fc18 	bl	800ba9c <memset>
		  ans = SIM800_Ans("OK");
 800226c:	4850      	ldr	r0, [pc, #320]	; (80023b0 <StartGetFirmware+0x33c>)
 800226e:	f7fe fdd5 	bl	8000e1c <SIM800_Ans>
 8002272:	4603      	mov	r3, r0
 8002274:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
		  if (!ans)
 8002278:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 800227c:	2b00      	cmp	r3, #0
 800227e:	d10f      	bne.n	80022a0 <StartGetFirmware+0x22c>
		  {
			  strcpy(&(msg.str), "SAPBR\r\n\0");
 8002280:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002284:	4a50      	ldr	r2, [pc, #320]	; (80023c8 <StartGetFirmware+0x354>)
 8002286:	e892 0003 	ldmia.w	r2, {r0, r1}
 800228a:	e883 0003 	stmia.w	r3, {r0, r1}
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 800228e:	4b4a      	ldr	r3, [pc, #296]	; (80023b8 <StartGetFirmware+0x344>)
 8002290:	6818      	ldr	r0, [r3, #0]
 8002292:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002296:	f04f 33ff 	mov.w	r3, #4294967295
 800229a:	2200      	movs	r2, #0
 800229c:	f006 f838 	bl	8008310 <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 80022a0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80022a4:	f005 fcb7 	bl	8007c16 <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80022a8:	224c      	movs	r2, #76	; 0x4c
 80022aa:	2100      	movs	r1, #0
 80022ac:	483d      	ldr	r0, [pc, #244]	; (80023a4 <StartGetFirmware+0x330>)
 80022ae:	f009 fbf5 	bl	800ba9c <memset>
	  sprintf(str_SIM800,"AT+SAPBR=1,1\r\n\0");
 80022b2:	4947      	ldr	r1, [pc, #284]	; (80023d0 <StartGetFirmware+0x35c>)
 80022b4:	483d      	ldr	r0, [pc, #244]	; (80023ac <StartGetFirmware+0x338>)
 80022b6:	f009 fc2d 	bl	800bb14 <siprintf>
	  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 80022ba:	483c      	ldr	r0, [pc, #240]	; (80023ac <StartGetFirmware+0x338>)
 80022bc:	f7fd ffa8 	bl	8000210 <strlen>
 80022c0:	4603      	mov	r3, r0
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	461a      	mov	r2, r3
 80022c6:	4939      	ldr	r1, [pc, #228]	; (80023ac <StartGetFirmware+0x338>)
 80022c8:	4835      	ldr	r0, [pc, #212]	; (80023a0 <StartGetFirmware+0x32c>)
 80022ca:	f004 f8cb 	bl	8006464 <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 80022ce:	4838      	ldr	r0, [pc, #224]	; (80023b0 <StartGetFirmware+0x33c>)
 80022d0:	f7fe fda4 	bl	8000e1c <SIM800_Ans>
 80022d4:	4603      	mov	r3, r0
 80022d6:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	  if (!ans)
 80022da:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d11e      	bne.n	8002320 <StartGetFirmware+0x2ac>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80022e2:	224c      	movs	r2, #76	; 0x4c
 80022e4:	2100      	movs	r1, #0
 80022e6:	482f      	ldr	r0, [pc, #188]	; (80023a4 <StartGetFirmware+0x330>)
 80022e8:	f009 fbd8 	bl	800ba9c <memset>
		  ans = SIM800_Ans("OK");
 80022ec:	4830      	ldr	r0, [pc, #192]	; (80023b0 <StartGetFirmware+0x33c>)
 80022ee:	f7fe fd95 	bl	8000e1c <SIM800_Ans>
 80022f2:	4603      	mov	r3, r0
 80022f4:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
		  if (!ans)
 80022f8:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d10f      	bne.n	8002320 <StartGetFirmware+0x2ac>
		  {
			  strcpy(&(msg.str), "SAPBR\r\n\0");
 8002300:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002304:	4a30      	ldr	r2, [pc, #192]	; (80023c8 <StartGetFirmware+0x354>)
 8002306:	e892 0003 	ldmia.w	r2, {r0, r1}
 800230a:	e883 0003 	stmia.w	r3, {r0, r1}
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 800230e:	4b2a      	ldr	r3, [pc, #168]	; (80023b8 <StartGetFirmware+0x344>)
 8002310:	6818      	ldr	r0, [r3, #0]
 8002312:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002316:	f04f 33ff 	mov.w	r3, #4294967295
 800231a:	2200      	movs	r2, #0
 800231c:	f005 fff8 	bl	8008310 <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 8002320:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002324:	f005 fc77 	bl	8007c16 <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002328:	224c      	movs	r2, #76	; 0x4c
 800232a:	2100      	movs	r1, #0
 800232c:	481d      	ldr	r0, [pc, #116]	; (80023a4 <StartGetFirmware+0x330>)
 800232e:	f009 fbb5 	bl	800ba9c <memset>
	  sprintf(str_SIM800,"AT+FTPCID=1\r\n\0");
 8002332:	4928      	ldr	r1, [pc, #160]	; (80023d4 <StartGetFirmware+0x360>)
 8002334:	481d      	ldr	r0, [pc, #116]	; (80023ac <StartGetFirmware+0x338>)
 8002336:	f009 fbed 	bl	800bb14 <siprintf>
	  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 800233a:	481c      	ldr	r0, [pc, #112]	; (80023ac <StartGetFirmware+0x338>)
 800233c:	f7fd ff68 	bl	8000210 <strlen>
 8002340:	4603      	mov	r3, r0
 8002342:	b29b      	uxth	r3, r3
 8002344:	461a      	mov	r2, r3
 8002346:	4919      	ldr	r1, [pc, #100]	; (80023ac <StartGetFirmware+0x338>)
 8002348:	4815      	ldr	r0, [pc, #84]	; (80023a0 <StartGetFirmware+0x32c>)
 800234a:	f004 f88b 	bl	8006464 <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 800234e:	4818      	ldr	r0, [pc, #96]	; (80023b0 <StartGetFirmware+0x33c>)
 8002350:	f7fe fd64 	bl	8000e1c <SIM800_Ans>
 8002354:	4603      	mov	r3, r0
 8002356:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	  if (!ans)
 800235a:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 800235e:	2b00      	cmp	r3, #0
 8002360:	d13c      	bne.n	80023dc <StartGetFirmware+0x368>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002362:	224c      	movs	r2, #76	; 0x4c
 8002364:	2100      	movs	r1, #0
 8002366:	480f      	ldr	r0, [pc, #60]	; (80023a4 <StartGetFirmware+0x330>)
 8002368:	f009 fb98 	bl	800ba9c <memset>
		  ans = SIM800_Ans("OK");
 800236c:	4810      	ldr	r0, [pc, #64]	; (80023b0 <StartGetFirmware+0x33c>)
 800236e:	f7fe fd55 	bl	8000e1c <SIM800_Ans>
 8002372:	4603      	mov	r3, r0
 8002374:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
		  if (!ans)
 8002378:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 800237c:	2b00      	cmp	r3, #0
 800237e:	d12d      	bne.n	80023dc <StartGetFirmware+0x368>
		  {
			  strcpy(&(msg.str), "FTPCID\r\n\0");
 8002380:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002384:	4a14      	ldr	r2, [pc, #80]	; (80023d8 <StartGetFirmware+0x364>)
 8002386:	ca07      	ldmia	r2, {r0, r1, r2}
 8002388:	c303      	stmia	r3!, {r0, r1}
 800238a:	701a      	strb	r2, [r3, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 800238c:	4b0a      	ldr	r3, [pc, #40]	; (80023b8 <StartGetFirmware+0x344>)
 800238e:	6818      	ldr	r0, [r3, #0]
 8002390:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002394:	f04f 33ff 	mov.w	r3, #4294967295
 8002398:	2200      	movs	r2, #0
 800239a:	f005 ffb9 	bl	8008310 <osMessageQueuePut>
 800239e:	e01d      	b.n	80023dc <StartGetFirmware+0x368>
 80023a0:	20000164 	.word	0x20000164
 80023a4:	20000400 	.word	0x20000400
 80023a8:	0800d17c 	.word	0x0800d17c
 80023ac:	200003b4 	.word	0x200003b4
 80023b0:	0800cee4 	.word	0x0800cee4
 80023b4:	0800d18c 	.word	0x0800d18c
 80023b8:	20000390 	.word	0x20000390
 80023bc:	0800d198 	.word	0x0800d198
 80023c0:	0800d1a8 	.word	0x0800d1a8
 80023c4:	0800d1b4 	.word	0x0800d1b4
 80023c8:	0800d1d4 	.word	0x0800d1d4
 80023cc:	0800d1e0 	.word	0x0800d1e0
 80023d0:	0800d208 	.word	0x0800d208
 80023d4:	0800d218 	.word	0x0800d218
 80023d8:	0800d228 	.word	0x0800d228
		  }
	  }
	  osDelay(300);
 80023dc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80023e0:	f005 fc19 	bl	8007c16 <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80023e4:	224c      	movs	r2, #76	; 0x4c
 80023e6:	2100      	movs	r1, #0
 80023e8:	48c4      	ldr	r0, [pc, #784]	; (80026fc <StartGetFirmware+0x688>)
 80023ea:	f009 fb57 	bl	800ba9c <memset>
	  sprintf(str_SIM800,"AT+FTPSERV=%s\r\n\0", DEF_IP_FTP);
 80023ee:	4ac4      	ldr	r2, [pc, #784]	; (8002700 <StartGetFirmware+0x68c>)
 80023f0:	49c4      	ldr	r1, [pc, #784]	; (8002704 <StartGetFirmware+0x690>)
 80023f2:	48c5      	ldr	r0, [pc, #788]	; (8002708 <StartGetFirmware+0x694>)
 80023f4:	f009 fb8e 	bl	800bb14 <siprintf>
	  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 80023f8:	48c3      	ldr	r0, [pc, #780]	; (8002708 <StartGetFirmware+0x694>)
 80023fa:	f7fd ff09 	bl	8000210 <strlen>
 80023fe:	4603      	mov	r3, r0
 8002400:	b29b      	uxth	r3, r3
 8002402:	461a      	mov	r2, r3
 8002404:	49c0      	ldr	r1, [pc, #768]	; (8002708 <StartGetFirmware+0x694>)
 8002406:	48c1      	ldr	r0, [pc, #772]	; (800270c <StartGetFirmware+0x698>)
 8002408:	f004 f82c 	bl	8006464 <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 800240c:	48c0      	ldr	r0, [pc, #768]	; (8002710 <StartGetFirmware+0x69c>)
 800240e:	f7fe fd05 	bl	8000e1c <SIM800_Ans>
 8002412:	4603      	mov	r3, r0
 8002414:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	  if (!ans)
 8002418:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 800241c:	2b00      	cmp	r3, #0
 800241e:	d11d      	bne.n	800245c <StartGetFirmware+0x3e8>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002420:	224c      	movs	r2, #76	; 0x4c
 8002422:	2100      	movs	r1, #0
 8002424:	48b5      	ldr	r0, [pc, #724]	; (80026fc <StartGetFirmware+0x688>)
 8002426:	f009 fb39 	bl	800ba9c <memset>
		  ans = SIM800_Ans("OK");
 800242a:	48b9      	ldr	r0, [pc, #740]	; (8002710 <StartGetFirmware+0x69c>)
 800242c:	f7fe fcf6 	bl	8000e1c <SIM800_Ans>
 8002430:	4603      	mov	r3, r0
 8002432:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
		  if (!ans)
 8002436:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 800243a:	2b00      	cmp	r3, #0
 800243c:	d10e      	bne.n	800245c <StartGetFirmware+0x3e8>
		  {
			  strcpy(&(msg.str), "FTPSERV\r\n\0");
 800243e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002442:	4ab4      	ldr	r2, [pc, #720]	; (8002714 <StartGetFirmware+0x6a0>)
 8002444:	ca07      	ldmia	r2, {r0, r1, r2}
 8002446:	c303      	stmia	r3!, {r0, r1}
 8002448:	801a      	strh	r2, [r3, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 800244a:	4bb3      	ldr	r3, [pc, #716]	; (8002718 <StartGetFirmware+0x6a4>)
 800244c:	6818      	ldr	r0, [r3, #0]
 800244e:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002452:	f04f 33ff 	mov.w	r3, #4294967295
 8002456:	2200      	movs	r2, #0
 8002458:	f005 ff5a 	bl	8008310 <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 800245c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002460:	f005 fbd9 	bl	8007c16 <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002464:	224c      	movs	r2, #76	; 0x4c
 8002466:	2100      	movs	r1, #0
 8002468:	48a4      	ldr	r0, [pc, #656]	; (80026fc <StartGetFirmware+0x688>)
 800246a:	f009 fb17 	bl	800ba9c <memset>
	  sprintf(str_SIM800,"AT+FTPUN=%s\r\n\0", DEF_USER_FTP);
 800246e:	4aab      	ldr	r2, [pc, #684]	; (800271c <StartGetFirmware+0x6a8>)
 8002470:	49ab      	ldr	r1, [pc, #684]	; (8002720 <StartGetFirmware+0x6ac>)
 8002472:	48a5      	ldr	r0, [pc, #660]	; (8002708 <StartGetFirmware+0x694>)
 8002474:	f009 fb4e 	bl	800bb14 <siprintf>
	  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 8002478:	48a3      	ldr	r0, [pc, #652]	; (8002708 <StartGetFirmware+0x694>)
 800247a:	f7fd fec9 	bl	8000210 <strlen>
 800247e:	4603      	mov	r3, r0
 8002480:	b29b      	uxth	r3, r3
 8002482:	461a      	mov	r2, r3
 8002484:	49a0      	ldr	r1, [pc, #640]	; (8002708 <StartGetFirmware+0x694>)
 8002486:	48a1      	ldr	r0, [pc, #644]	; (800270c <StartGetFirmware+0x698>)
 8002488:	f003 ffec 	bl	8006464 <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 800248c:	48a0      	ldr	r0, [pc, #640]	; (8002710 <StartGetFirmware+0x69c>)
 800248e:	f7fe fcc5 	bl	8000e1c <SIM800_Ans>
 8002492:	4603      	mov	r3, r0
 8002494:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	  if (!ans)
 8002498:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 800249c:	2b00      	cmp	r3, #0
 800249e:	d11e      	bne.n	80024de <StartGetFirmware+0x46a>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80024a0:	224c      	movs	r2, #76	; 0x4c
 80024a2:	2100      	movs	r1, #0
 80024a4:	4895      	ldr	r0, [pc, #596]	; (80026fc <StartGetFirmware+0x688>)
 80024a6:	f009 faf9 	bl	800ba9c <memset>
		  ans = SIM800_Ans("OK");
 80024aa:	4899      	ldr	r0, [pc, #612]	; (8002710 <StartGetFirmware+0x69c>)
 80024ac:	f7fe fcb6 	bl	8000e1c <SIM800_Ans>
 80024b0:	4603      	mov	r3, r0
 80024b2:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
		  if (!ans)
 80024b6:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d10f      	bne.n	80024de <StartGetFirmware+0x46a>
		  {
			  strcpy(&(msg.str), "FTPUN\r\n\0");
 80024be:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80024c2:	4a98      	ldr	r2, [pc, #608]	; (8002724 <StartGetFirmware+0x6b0>)
 80024c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024c8:	e883 0003 	stmia.w	r3, {r0, r1}
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 80024cc:	4b92      	ldr	r3, [pc, #584]	; (8002718 <StartGetFirmware+0x6a4>)
 80024ce:	6818      	ldr	r0, [r3, #0]
 80024d0:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80024d4:	f04f 33ff 	mov.w	r3, #4294967295
 80024d8:	2200      	movs	r2, #0
 80024da:	f005 ff19 	bl	8008310 <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 80024de:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80024e2:	f005 fb98 	bl	8007c16 <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80024e6:	224c      	movs	r2, #76	; 0x4c
 80024e8:	2100      	movs	r1, #0
 80024ea:	4884      	ldr	r0, [pc, #528]	; (80026fc <StartGetFirmware+0x688>)
 80024ec:	f009 fad6 	bl	800ba9c <memset>
	  sprintf(str_SIM800,"AT+FTPPW=%s\r\n\0", DEF_PASSWORD_FTP);
 80024f0:	4a8d      	ldr	r2, [pc, #564]	; (8002728 <StartGetFirmware+0x6b4>)
 80024f2:	498e      	ldr	r1, [pc, #568]	; (800272c <StartGetFirmware+0x6b8>)
 80024f4:	4884      	ldr	r0, [pc, #528]	; (8002708 <StartGetFirmware+0x694>)
 80024f6:	f009 fb0d 	bl	800bb14 <siprintf>
	  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 80024fa:	4883      	ldr	r0, [pc, #524]	; (8002708 <StartGetFirmware+0x694>)
 80024fc:	f7fd fe88 	bl	8000210 <strlen>
 8002500:	4603      	mov	r3, r0
 8002502:	b29b      	uxth	r3, r3
 8002504:	461a      	mov	r2, r3
 8002506:	4980      	ldr	r1, [pc, #512]	; (8002708 <StartGetFirmware+0x694>)
 8002508:	4880      	ldr	r0, [pc, #512]	; (800270c <StartGetFirmware+0x698>)
 800250a:	f003 ffab 	bl	8006464 <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 800250e:	4880      	ldr	r0, [pc, #512]	; (8002710 <StartGetFirmware+0x69c>)
 8002510:	f7fe fc84 	bl	8000e1c <SIM800_Ans>
 8002514:	4603      	mov	r3, r0
 8002516:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	  if (!ans)
 800251a:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 800251e:	2b00      	cmp	r3, #0
 8002520:	d11e      	bne.n	8002560 <StartGetFirmware+0x4ec>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002522:	224c      	movs	r2, #76	; 0x4c
 8002524:	2100      	movs	r1, #0
 8002526:	4875      	ldr	r0, [pc, #468]	; (80026fc <StartGetFirmware+0x688>)
 8002528:	f009 fab8 	bl	800ba9c <memset>
		  ans = SIM800_Ans("OK");
 800252c:	4878      	ldr	r0, [pc, #480]	; (8002710 <StartGetFirmware+0x69c>)
 800252e:	f7fe fc75 	bl	8000e1c <SIM800_Ans>
 8002532:	4603      	mov	r3, r0
 8002534:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
		  if (!ans)
 8002538:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 800253c:	2b00      	cmp	r3, #0
 800253e:	d10f      	bne.n	8002560 <StartGetFirmware+0x4ec>
		  {
			  strcpy(&(msg.str), "FTPPW\r\n\0");
 8002540:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002544:	4a7a      	ldr	r2, [pc, #488]	; (8002730 <StartGetFirmware+0x6bc>)
 8002546:	e892 0003 	ldmia.w	r2, {r0, r1}
 800254a:	e883 0003 	stmia.w	r3, {r0, r1}
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 800254e:	4b72      	ldr	r3, [pc, #456]	; (8002718 <StartGetFirmware+0x6a4>)
 8002550:	6818      	ldr	r0, [r3, #0]
 8002552:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002556:	f04f 33ff 	mov.w	r3, #4294967295
 800255a:	2200      	movs	r2, #0
 800255c:	f005 fed8 	bl	8008310 <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 8002560:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002564:	f005 fb57 	bl	8007c16 <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002568:	224c      	movs	r2, #76	; 0x4c
 800256a:	2100      	movs	r1, #0
 800256c:	4863      	ldr	r0, [pc, #396]	; (80026fc <StartGetFirmware+0x688>)
 800256e:	f009 fa95 	bl	800ba9c <memset>
	  sprintf(str_SIM800,"AT+FTPGETPATH=/firmware/\r\n\0");
 8002572:	4970      	ldr	r1, [pc, #448]	; (8002734 <StartGetFirmware+0x6c0>)
 8002574:	4864      	ldr	r0, [pc, #400]	; (8002708 <StartGetFirmware+0x694>)
 8002576:	f009 facd 	bl	800bb14 <siprintf>
	  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 800257a:	4863      	ldr	r0, [pc, #396]	; (8002708 <StartGetFirmware+0x694>)
 800257c:	f7fd fe48 	bl	8000210 <strlen>
 8002580:	4603      	mov	r3, r0
 8002582:	b29b      	uxth	r3, r3
 8002584:	461a      	mov	r2, r3
 8002586:	4960      	ldr	r1, [pc, #384]	; (8002708 <StartGetFirmware+0x694>)
 8002588:	4860      	ldr	r0, [pc, #384]	; (800270c <StartGetFirmware+0x698>)
 800258a:	f003 ff6b 	bl	8006464 <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 800258e:	4860      	ldr	r0, [pc, #384]	; (8002710 <StartGetFirmware+0x69c>)
 8002590:	f7fe fc44 	bl	8000e1c <SIM800_Ans>
 8002594:	4603      	mov	r3, r0
 8002596:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	  if (!ans)
 800259a:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d11f      	bne.n	80025e2 <StartGetFirmware+0x56e>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80025a2:	224c      	movs	r2, #76	; 0x4c
 80025a4:	2100      	movs	r1, #0
 80025a6:	4855      	ldr	r0, [pc, #340]	; (80026fc <StartGetFirmware+0x688>)
 80025a8:	f009 fa78 	bl	800ba9c <memset>
		  ans = SIM800_Ans("OK");
 80025ac:	4858      	ldr	r0, [pc, #352]	; (8002710 <StartGetFirmware+0x69c>)
 80025ae:	f7fe fc35 	bl	8000e1c <SIM800_Ans>
 80025b2:	4603      	mov	r3, r0
 80025b4:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
		  if (!ans)
 80025b8:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d110      	bne.n	80025e2 <StartGetFirmware+0x56e>
		  {
			  strcpy(&(msg.str), "FTPGETPATH\r\n\0");
 80025c0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80025c4:	4a5c      	ldr	r2, [pc, #368]	; (8002738 <StartGetFirmware+0x6c4>)
 80025c6:	461c      	mov	r4, r3
 80025c8:	4613      	mov	r3, r2
 80025ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025cc:	c407      	stmia	r4!, {r0, r1, r2}
 80025ce:	7023      	strb	r3, [r4, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 80025d0:	4b51      	ldr	r3, [pc, #324]	; (8002718 <StartGetFirmware+0x6a4>)
 80025d2:	6818      	ldr	r0, [r3, #0]
 80025d4:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80025d8:	f04f 33ff 	mov.w	r3, #4294967295
 80025dc:	2200      	movs	r2, #0
 80025de:	f005 fe97 	bl	8008310 <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 80025e2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80025e6:	f005 fb16 	bl	8007c16 <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80025ea:	224c      	movs	r2, #76	; 0x4c
 80025ec:	2100      	movs	r1, #0
 80025ee:	4843      	ldr	r0, [pc, #268]	; (80026fc <StartGetFirmware+0x688>)
 80025f0:	f009 fa54 	bl	800ba9c <memset>
	  sprintf(str_SIM800,"AT+FTPGETNAME=Firmware.txt\r\n\0");
 80025f4:	4951      	ldr	r1, [pc, #324]	; (800273c <StartGetFirmware+0x6c8>)
 80025f6:	4844      	ldr	r0, [pc, #272]	; (8002708 <StartGetFirmware+0x694>)
 80025f8:	f009 fa8c 	bl	800bb14 <siprintf>
	  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 80025fc:	4842      	ldr	r0, [pc, #264]	; (8002708 <StartGetFirmware+0x694>)
 80025fe:	f7fd fe07 	bl	8000210 <strlen>
 8002602:	4603      	mov	r3, r0
 8002604:	b29b      	uxth	r3, r3
 8002606:	461a      	mov	r2, r3
 8002608:	493f      	ldr	r1, [pc, #252]	; (8002708 <StartGetFirmware+0x694>)
 800260a:	4840      	ldr	r0, [pc, #256]	; (800270c <StartGetFirmware+0x698>)
 800260c:	f003 ff2a 	bl	8006464 <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 8002610:	483f      	ldr	r0, [pc, #252]	; (8002710 <StartGetFirmware+0x69c>)
 8002612:	f7fe fc03 	bl	8000e1c <SIM800_Ans>
 8002616:	4603      	mov	r3, r0
 8002618:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	  if (!ans)
 800261c:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8002620:	2b00      	cmp	r3, #0
 8002622:	d11f      	bne.n	8002664 <StartGetFirmware+0x5f0>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002624:	224c      	movs	r2, #76	; 0x4c
 8002626:	2100      	movs	r1, #0
 8002628:	4834      	ldr	r0, [pc, #208]	; (80026fc <StartGetFirmware+0x688>)
 800262a:	f009 fa37 	bl	800ba9c <memset>
		  ans = SIM800_Ans("OK");
 800262e:	4838      	ldr	r0, [pc, #224]	; (8002710 <StartGetFirmware+0x69c>)
 8002630:	f7fe fbf4 	bl	8000e1c <SIM800_Ans>
 8002634:	4603      	mov	r3, r0
 8002636:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
		  if (!ans)
 800263a:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 800263e:	2b00      	cmp	r3, #0
 8002640:	d110      	bne.n	8002664 <StartGetFirmware+0x5f0>
		  {
			  strcpy(&(msg.str), "FTPGETNAME\r\n\0");
 8002642:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002646:	4a3e      	ldr	r2, [pc, #248]	; (8002740 <StartGetFirmware+0x6cc>)
 8002648:	461c      	mov	r4, r3
 800264a:	4613      	mov	r3, r2
 800264c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800264e:	c407      	stmia	r4!, {r0, r1, r2}
 8002650:	7023      	strb	r3, [r4, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8002652:	4b31      	ldr	r3, [pc, #196]	; (8002718 <StartGetFirmware+0x6a4>)
 8002654:	6818      	ldr	r0, [r3, #0]
 8002656:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800265a:	f04f 33ff 	mov.w	r3, #4294967295
 800265e:	2200      	movs	r2, #0
 8002660:	f005 fe56 	bl	8008310 <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 8002664:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002668:	f005 fad5 	bl	8007c16 <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 800266c:	224c      	movs	r2, #76	; 0x4c
 800266e:	2100      	movs	r1, #0
 8002670:	4822      	ldr	r0, [pc, #136]	; (80026fc <StartGetFirmware+0x688>)
 8002672:	f009 fa13 	bl	800ba9c <memset>
	  sprintf(str_SIM800,"AT+FTPGETTOFS=0,Firmware.txt\r\n\0");
 8002676:	4933      	ldr	r1, [pc, #204]	; (8002744 <StartGetFirmware+0x6d0>)
 8002678:	4823      	ldr	r0, [pc, #140]	; (8002708 <StartGetFirmware+0x694>)
 800267a:	f009 fa4b 	bl	800bb14 <siprintf>
	  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 800267e:	4822      	ldr	r0, [pc, #136]	; (8002708 <StartGetFirmware+0x694>)
 8002680:	f7fd fdc6 	bl	8000210 <strlen>
 8002684:	4603      	mov	r3, r0
 8002686:	b29b      	uxth	r3, r3
 8002688:	461a      	mov	r2, r3
 800268a:	491f      	ldr	r1, [pc, #124]	; (8002708 <StartGetFirmware+0x694>)
 800268c:	481f      	ldr	r0, [pc, #124]	; (800270c <StartGetFirmware+0x698>)
 800268e:	f003 fee9 	bl	8006464 <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 8002692:	481f      	ldr	r0, [pc, #124]	; (8002710 <StartGetFirmware+0x69c>)
 8002694:	f7fe fbc2 	bl	8000e1c <SIM800_Ans>
 8002698:	4603      	mov	r3, r0
 800269a:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	  if (!ans)
 800269e:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d11f      	bne.n	80026e6 <StartGetFirmware+0x672>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80026a6:	224c      	movs	r2, #76	; 0x4c
 80026a8:	2100      	movs	r1, #0
 80026aa:	4814      	ldr	r0, [pc, #80]	; (80026fc <StartGetFirmware+0x688>)
 80026ac:	f009 f9f6 	bl	800ba9c <memset>
		  ans = SIM800_Ans("OK");
 80026b0:	4817      	ldr	r0, [pc, #92]	; (8002710 <StartGetFirmware+0x69c>)
 80026b2:	f7fe fbb3 	bl	8000e1c <SIM800_Ans>
 80026b6:	4603      	mov	r3, r0
 80026b8:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
		  if (!ans)
 80026bc:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d110      	bne.n	80026e6 <StartGetFirmware+0x672>
		  {
			  strcpy(&(msg.str), "FTPGETTOFS\r\n\0");
 80026c4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80026c8:	4a1f      	ldr	r2, [pc, #124]	; (8002748 <StartGetFirmware+0x6d4>)
 80026ca:	461c      	mov	r4, r3
 80026cc:	4613      	mov	r3, r2
 80026ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026d0:	c407      	stmia	r4!, {r0, r1, r2}
 80026d2:	7023      	strb	r3, [r4, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 80026d4:	4b10      	ldr	r3, [pc, #64]	; (8002718 <StartGetFirmware+0x6a4>)
 80026d6:	6818      	ldr	r0, [r3, #0]
 80026d8:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80026dc:	f04f 33ff 	mov.w	r3, #4294967295
 80026e0:	2200      	movs	r2, #0
 80026e2:	f005 fe15 	bl	8008310 <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 80026e6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80026ea:	f005 fa94 	bl	8007c16 <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80026ee:	224c      	movs	r2, #76	; 0x4c
 80026f0:	2100      	movs	r1, #0
 80026f2:	4802      	ldr	r0, [pc, #8]	; (80026fc <StartGetFirmware+0x688>)
 80026f4:	f009 f9d2 	bl	800ba9c <memset>
 80026f8:	e028      	b.n	800274c <StartGetFirmware+0x6d8>
 80026fa:	bf00      	nop
 80026fc:	20000400 	.word	0x20000400
 8002700:	0800d234 	.word	0x0800d234
 8002704:	0800d244 	.word	0x0800d244
 8002708:	200003b4 	.word	0x200003b4
 800270c:	20000164 	.word	0x20000164
 8002710:	0800cee4 	.word	0x0800cee4
 8002714:	0800d258 	.word	0x0800d258
 8002718:	20000390 	.word	0x20000390
 800271c:	0800d264 	.word	0x0800d264
 8002720:	0800d270 	.word	0x0800d270
 8002724:	0800d280 	.word	0x0800d280
 8002728:	0800d28c 	.word	0x0800d28c
 800272c:	0800d298 	.word	0x0800d298
 8002730:	0800d2a8 	.word	0x0800d2a8
 8002734:	0800d2b4 	.word	0x0800d2b4
 8002738:	0800d2d0 	.word	0x0800d2d0
 800273c:	0800d2e0 	.word	0x0800d2e0
 8002740:	0800d300 	.word	0x0800d300
 8002744:	0800d310 	.word	0x0800d310
 8002748:	0800d330 	.word	0x0800d330
	  RX = 0;
 800274c:	4b8b      	ldr	r3, [pc, #556]	; (800297c <StartGetFirmware+0x908>)
 800274e:	2200      	movs	r2, #0
 8002750:	701a      	strb	r2, [r3, #0]
	  Tech_ans_wait = 1;
 8002752:	4b8b      	ldr	r3, [pc, #556]	; (8002980 <StartGetFirmware+0x90c>)
 8002754:	2201      	movs	r2, #1
 8002756:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Receive_DMA(&huart1, SIM800BuffRx, BUFF_SIM_SIZE);
 8002758:	224c      	movs	r2, #76	; 0x4c
 800275a:	498a      	ldr	r1, [pc, #552]	; (8002984 <StartGetFirmware+0x910>)
 800275c:	488a      	ldr	r0, [pc, #552]	; (8002988 <StartGetFirmware+0x914>)
 800275e:	f003 feff 	bl	8006560 <HAL_UART_Receive_DMA>
	  while (RX != 1) {};
 8002762:	bf00      	nop
 8002764:	4b85      	ldr	r3, [pc, #532]	; (800297c <StartGetFirmware+0x908>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d1fb      	bne.n	8002764 <StartGetFirmware+0x6f0>
	  Tech_ans_wait = 0;
 800276c:	4b84      	ldr	r3, [pc, #528]	; (8002980 <StartGetFirmware+0x90c>)
 800276e:	2200      	movs	r2, #0
 8002770:	701a      	strb	r2, [r3, #0]



	  //good download
	  if (String_in_SIM800BuffRx("+FTPGETTOFS: "))
 8002772:	4886      	ldr	r0, [pc, #536]	; (800298c <StartGetFirmware+0x918>)
 8002774:	f7fe fa60 	bl	8000c38 <String_in_SIM800BuffRx>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	f43f ac8e 	beq.w	800209c <StartGetFirmware+0x28>
	  {
		  sscanf(SIM800BuffRx, "%s%2s%d", tmp2, tmp3, &firmware_count_bytes);
 8002780:	f107 0108 	add.w	r1, r7, #8
 8002784:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002788:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800278c:	9300      	str	r3, [sp, #0]
 800278e:	460b      	mov	r3, r1
 8002790:	497f      	ldr	r1, [pc, #508]	; (8002990 <StartGetFirmware+0x91c>)
 8002792:	487c      	ldr	r0, [pc, #496]	; (8002984 <StartGetFirmware+0x910>)
 8002794:	f009 f9de 	bl	800bb54 <siscanf>

		  SPI2_Init_Master();
 8002798:	f7fe f9d2 	bl	8000b40 <SPI2_Init_Master>
		  HAL_Delay(200);
 800279c:	20c8      	movs	r0, #200	; 0xc8
 800279e:	f001 f881 	bl	80038a4 <HAL_Delay>

		  W25qxx_Init();
 80027a2:	f000 fcd7 	bl	8003154 <W25qxx_Init>

		  uint32_t count_of_pages = (firmware_count_bytes / 256) + ((firmware_count_bytes % 256) ? 1 : 0);
 80027a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027a8:	0a1b      	lsrs	r3, r3, #8
 80027aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80027ac:	b2d2      	uxtb	r2, r2
 80027ae:	2a00      	cmp	r2, #0
 80027b0:	d001      	beq.n	80027b6 <StartGetFirmware+0x742>
 80027b2:	2201      	movs	r2, #1
 80027b4:	e000      	b.n	80027b8 <StartGetFirmware+0x744>
 80027b6:	2200      	movs	r2, #0
 80027b8:	4413      	add	r3, r2
 80027ba:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		  uint32_t count_of_sectors = (firmware_count_bytes / 4096) + ((firmware_count_bytes % 4096) ? 1 : 0);
 80027be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027c0:	0b1b      	lsrs	r3, r3, #12
 80027c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80027c4:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80027c8:	2a00      	cmp	r2, #0
 80027ca:	d001      	beq.n	80027d0 <StartGetFirmware+0x75c>
 80027cc:	2201      	movs	r2, #1
 80027ce:	e000      	b.n	80027d2 <StartGetFirmware+0x75e>
 80027d0:	2200      	movs	r2, #0
 80027d2:	4413      	add	r3, r2
 80027d4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
		  count_of_sectors++;
 80027d8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80027dc:	3301      	adds	r3, #1
 80027de:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

		  //start write from 30 sector
		  for (uint32_t i = 0; i <= count_of_sectors; i++)
 80027e2:	2300      	movs	r3, #0
 80027e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80027e8:	e010      	b.n	800280c <StartGetFirmware+0x798>
		  {
			  // sectors for clear
			  uint32_t tmp = i + sector_of_firmware - 1;
 80027ea:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80027ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027f2:	4413      	add	r3, r2
 80027f4:	3b01      	subs	r3, #1
 80027f6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
			  W25qxx_EraseSector(tmp);
 80027fa:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 80027fe:	f000 ff0d 	bl	800361c <W25qxx_EraseSector>
		  for (uint32_t i = 0; i <= count_of_sectors; i++)
 8002802:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002806:	3301      	adds	r3, #1
 8002808:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800280c:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8002810:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002814:	429a      	cmp	r2, r3
 8002816:	d9e8      	bls.n	80027ea <StartGetFirmware+0x776>
		  }

		  //writes size of firmware
		  tmp4 = (firmware_count_bytes & 0xFF0000) >> 16;
 8002818:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800281a:	0c1b      	lsrs	r3, r3, #16
 800281c:	b2db      	uxtb	r3, r3
 800281e:	4a5d      	ldr	r2, [pc, #372]	; (8002994 <StartGetFirmware+0x920>)
 8002820:	6013      	str	r3, [r2, #0]
		  tmp5 = (firmware_count_bytes & 0xFF00) >> 8;
 8002822:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002824:	0a1b      	lsrs	r3, r3, #8
 8002826:	b2db      	uxtb	r3, r3
 8002828:	4a5b      	ldr	r2, [pc, #364]	; (8002998 <StartGetFirmware+0x924>)
 800282a:	6013      	str	r3, [r2, #0]
		  tmp6 = (firmware_count_bytes & 0xFF);
 800282c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800282e:	b2db      	uxtb	r3, r3
 8002830:	4a5a      	ldr	r2, [pc, #360]	; (800299c <StartGetFirmware+0x928>)
 8002832:	6013      	str	r3, [r2, #0]
		  Size_of_firmwware[0] = tmp4;
 8002834:	4b57      	ldr	r3, [pc, #348]	; (8002994 <StartGetFirmware+0x920>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	b2da      	uxtb	r2, r3
 800283a:	4b59      	ldr	r3, [pc, #356]	; (80029a0 <StartGetFirmware+0x92c>)
 800283c:	701a      	strb	r2, [r3, #0]
		  Size_of_firmwware[1] = tmp5;
 800283e:	4b56      	ldr	r3, [pc, #344]	; (8002998 <StartGetFirmware+0x924>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	b2da      	uxtb	r2, r3
 8002844:	4b56      	ldr	r3, [pc, #344]	; (80029a0 <StartGetFirmware+0x92c>)
 8002846:	705a      	strb	r2, [r3, #1]
		  Size_of_firmwware[2] = tmp6;
 8002848:	4b54      	ldr	r3, [pc, #336]	; (800299c <StartGetFirmware+0x928>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	b2da      	uxtb	r2, r3
 800284e:	4b54      	ldr	r3, [pc, #336]	; (80029a0 <StartGetFirmware+0x92c>)
 8002850:	709a      	strb	r2, [r3, #2]

		  int32_t page_start1 = 16 * (sector_of_firmware - 1);
 8002852:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002856:	3b01      	subs	r3, #1
 8002858:	011b      	lsls	r3, r3, #4
 800285a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

		  W25qxx_WritePage(Size_of_firmwware, page_start1, 0, 3);
 800285e:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8002862:	2303      	movs	r3, #3
 8002864:	2200      	movs	r2, #0
 8002866:	484e      	ldr	r0, [pc, #312]	; (80029a0 <StartGetFirmware+0x92c>)
 8002868:	f000 ff2e 	bl	80036c8 <W25qxx_WritePage>

		  for (uint32_t i = 0; i < count_of_pages; i++)
 800286c:	2300      	movs	r3, #0
 800286e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002872:	e054      	b.n	800291e <StartGetFirmware+0x8aa>
		  {
			  int32_t start = i * 256;
 8002874:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002878:	021b      	lsls	r3, r3, #8
 800287a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
			  //start += (i > 0) ? 1 : 0;

			  memset(firmware_buf, 0, 399);
 800287e:	f240 128f 	movw	r2, #399	; 0x18f
 8002882:	2100      	movs	r1, #0
 8002884:	4847      	ldr	r0, [pc, #284]	; (80029a4 <StartGetFirmware+0x930>)
 8002886:	f009 f909 	bl	800ba9c <memset>
			  sprintf(str_SIM800,"AT+FSREAD=C:\\User\\FTP\\Firmware.txt,1,256,%d\r\n\0", start);
 800288a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800288e:	4946      	ldr	r1, [pc, #280]	; (80029a8 <StartGetFirmware+0x934>)
 8002890:	4846      	ldr	r0, [pc, #280]	; (80029ac <StartGetFirmware+0x938>)
 8002892:	f009 f93f 	bl	800bb14 <siprintf>
			  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 8002896:	4845      	ldr	r0, [pc, #276]	; (80029ac <StartGetFirmware+0x938>)
 8002898:	f7fd fcba 	bl	8000210 <strlen>
 800289c:	4603      	mov	r3, r0
 800289e:	b29b      	uxth	r3, r3
 80028a0:	461a      	mov	r2, r3
 80028a2:	4942      	ldr	r1, [pc, #264]	; (80029ac <StartGetFirmware+0x938>)
 80028a4:	4838      	ldr	r0, [pc, #224]	; (8002988 <StartGetFirmware+0x914>)
 80028a6:	f003 fddd 	bl	8006464 <HAL_UART_Transmit_DMA>
			  RX = 0;
 80028aa:	4b34      	ldr	r3, [pc, #208]	; (800297c <StartGetFirmware+0x908>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	701a      	strb	r2, [r3, #0]
			  Tech_ans_wait = 1;
 80028b0:	4b33      	ldr	r3, [pc, #204]	; (8002980 <StartGetFirmware+0x90c>)
 80028b2:	2201      	movs	r2, #1
 80028b4:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Receive_DMA(&huart1, firmware_buf, 390);
 80028b6:	f44f 72c3 	mov.w	r2, #390	; 0x186
 80028ba:	493a      	ldr	r1, [pc, #232]	; (80029a4 <StartGetFirmware+0x930>)
 80028bc:	4832      	ldr	r0, [pc, #200]	; (8002988 <StartGetFirmware+0x914>)
 80028be:	f003 fe4f 	bl	8006560 <HAL_UART_Receive_DMA>
			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 80028c2:	2140      	movs	r1, #64	; 0x40
 80028c4:	483a      	ldr	r0, [pc, #232]	; (80029b0 <StartGetFirmware+0x93c>)
 80028c6:	f001 fed6 	bl	8004676 <HAL_GPIO_TogglePin>
			  while (RX != 1) {};
 80028ca:	bf00      	nop
 80028cc:	4b2b      	ldr	r3, [pc, #172]	; (800297c <StartGetFirmware+0x908>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d1fb      	bne.n	80028cc <StartGetFirmware+0x858>
			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 80028d4:	2140      	movs	r1, #64	; 0x40
 80028d6:	4836      	ldr	r0, [pc, #216]	; (80029b0 <StartGetFirmware+0x93c>)
 80028d8:	f001 fecd 	bl	8004676 <HAL_GPIO_TogglePin>
			  Tech_ans_wait = 0;
 80028dc:	4b28      	ldr	r3, [pc, #160]	; (8002980 <StartGetFirmware+0x90c>)
 80028de:	2200      	movs	r2, #0
 80028e0:	701a      	strb	r2, [r3, #0]

			  int32_t page_start =  i + 16 * sector_of_firmware; // number of start page
 80028e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028e6:	011a      	lsls	r2, r3, #4
 80028e8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80028ec:	4413      	add	r3, r2
 80028ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
			  W25qxx_WritePage(firmware_buf + strlen(str_SIM800) + 1, page_start, 0, 256);
 80028f2:	482e      	ldr	r0, [pc, #184]	; (80029ac <StartGetFirmware+0x938>)
 80028f4:	f7fd fc8c 	bl	8000210 <strlen>
 80028f8:	4603      	mov	r3, r0
 80028fa:	3301      	adds	r3, #1
 80028fc:	4a29      	ldr	r2, [pc, #164]	; (80029a4 <StartGetFirmware+0x930>)
 80028fe:	1898      	adds	r0, r3, r2
 8002900:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8002904:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002908:	2200      	movs	r2, #0
 800290a:	f000 fedd 	bl	80036c8 <W25qxx_WritePage>
			  osDelay(10); //importent!!!
 800290e:	200a      	movs	r0, #10
 8002910:	f005 f981 	bl	8007c16 <osDelay>
		  for (uint32_t i = 0; i < count_of_pages; i++)
 8002914:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002918:	3301      	adds	r3, #1
 800291a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800291e:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8002922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002926:	429a      	cmp	r2, r3
 8002928:	d3a4      	bcc.n	8002874 <StartGetFirmware+0x800>
		  }
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 800292a:	2140      	movs	r1, #64	; 0x40
 800292c:	4820      	ldr	r0, [pc, #128]	; (80029b0 <StartGetFirmware+0x93c>)
 800292e:	f001 fea2 	bl	8004676 <HAL_GPIO_TogglePin>
		  osDelay(2000);
 8002932:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002936:	f005 f96e 	bl	8007c16 <osDelay>
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 800293a:	2140      	movs	r1, #64	; 0x40
 800293c:	481c      	ldr	r0, [pc, #112]	; (80029b0 <StartGetFirmware+0x93c>)
 800293e:	f001 fe9a 	bl	8004676 <HAL_GPIO_TogglePin>

		  HAL_Delay(200);
 8002942:	20c8      	movs	r0, #200	; 0xc8
 8002944:	f000 ffae 	bl	80038a4 <HAL_Delay>
		  //";start"
		  strcpy(&(msg.str), ";start");
 8002948:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800294c:	4a19      	ldr	r2, [pc, #100]	; (80029b4 <StartGetFirmware+0x940>)
 800294e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002952:	6018      	str	r0, [r3, #0]
 8002954:	3304      	adds	r3, #4
 8002956:	8019      	strh	r1, [r3, #0]
 8002958:	3302      	adds	r3, #2
 800295a:	0c0a      	lsrs	r2, r1, #16
 800295c:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit_DMA(&huart2, msg.str, MESSAGE_TYPE_BUFF_SIZE);
 800295e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002962:	2246      	movs	r2, #70	; 0x46
 8002964:	4619      	mov	r1, r3
 8002966:	4814      	ldr	r0, [pc, #80]	; (80029b8 <StartGetFirmware+0x944>)
 8002968:	f003 fd7c 	bl	8006464 <HAL_UART_Transmit_DMA>
		  HAL_Delay(1000);
 800296c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002970:	f000 ff98 	bl	80038a4 <HAL_Delay>
		  HAL_NVIC_SystemReset();
 8002974:	f001 f8b3 	bl	8003ade <HAL_NVIC_SystemReset>
  {
 8002978:	f7ff bb90 	b.w	800209c <StartGetFirmware+0x28>
 800297c:	200003af 	.word	0x200003af
 8002980:	200003b1 	.word	0x200003b1
 8002984:	20000400 	.word	0x20000400
 8002988:	20000164 	.word	0x20000164
 800298c:	0800d340 	.word	0x0800d340
 8002990:	0800d350 	.word	0x0800d350
 8002994:	20000624 	.word	0x20000624
 8002998:	20000628 	.word	0x20000628
 800299c:	2000062c 	.word	0x2000062c
 80029a0:	20000630 	.word	0x20000630
 80029a4:	2000044c 	.word	0x2000044c
 80029a8:	0800d358 	.word	0x0800d358
 80029ac:	200003b4 	.word	0x200003b4
 80029b0:	40020000 	.word	0x40020000
 80029b4:	0800d388 	.word	0x0800d388
 80029b8:	200001a8 	.word	0x200001a8

080029bc <CallbackPingTimer>:
  /* USER CODE END StartGetFirmware */
}

/* CallbackPingTimer function */
void CallbackPingTimer(void *argument)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackPingTimer */
	osSemaphoreRelease(PINGSemHandle);
 80029c4:	4b04      	ldr	r3, [pc, #16]	; (80029d8 <CallbackPingTimer+0x1c>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f005 fbe9 	bl	80081a0 <osSemaphoreRelease>
  /* USER CODE END CallbackPingTimer */
}
 80029ce:	bf00      	nop
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	200003a4 	.word	0x200003a4

080029dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a04      	ldr	r2, [pc, #16]	; (80029fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d101      	bne.n	80029f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80029ee:	f000 ff39 	bl	8003864 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80029f2:	bf00      	nop
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	40010000 	.word	0x40010000

08002a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a04:	b672      	cpsid	i
}
 8002a06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a08:	e7fe      	b.n	8002a08 <Error_Handler+0x8>
	...

08002a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a12:	2300      	movs	r3, #0
 8002a14:	607b      	str	r3, [r7, #4]
 8002a16:	4b12      	ldr	r3, [pc, #72]	; (8002a60 <HAL_MspInit+0x54>)
 8002a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1a:	4a11      	ldr	r2, [pc, #68]	; (8002a60 <HAL_MspInit+0x54>)
 8002a1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a20:	6453      	str	r3, [r2, #68]	; 0x44
 8002a22:	4b0f      	ldr	r3, [pc, #60]	; (8002a60 <HAL_MspInit+0x54>)
 8002a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a2a:	607b      	str	r3, [r7, #4]
 8002a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a2e:	2300      	movs	r3, #0
 8002a30:	603b      	str	r3, [r7, #0]
 8002a32:	4b0b      	ldr	r3, [pc, #44]	; (8002a60 <HAL_MspInit+0x54>)
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	4a0a      	ldr	r2, [pc, #40]	; (8002a60 <HAL_MspInit+0x54>)
 8002a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a3e:	4b08      	ldr	r3, [pc, #32]	; (8002a60 <HAL_MspInit+0x54>)
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a46:	603b      	str	r3, [r7, #0]
 8002a48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	210f      	movs	r1, #15
 8002a4e:	f06f 0001 	mvn.w	r0, #1
 8002a52:	f001 f81a 	bl	8003a8a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a56:	bf00      	nop
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	40023800 	.word	0x40023800

08002a64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b08a      	sub	sp, #40	; 0x28
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a6c:	f107 0314 	add.w	r3, r7, #20
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	605a      	str	r2, [r3, #4]
 8002a76:	609a      	str	r2, [r3, #8]
 8002a78:	60da      	str	r2, [r3, #12]
 8002a7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a19      	ldr	r2, [pc, #100]	; (8002ae8 <HAL_I2C_MspInit+0x84>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d12b      	bne.n	8002ade <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	613b      	str	r3, [r7, #16]
 8002a8a:	4b18      	ldr	r3, [pc, #96]	; (8002aec <HAL_I2C_MspInit+0x88>)
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8e:	4a17      	ldr	r2, [pc, #92]	; (8002aec <HAL_I2C_MspInit+0x88>)
 8002a90:	f043 0302 	orr.w	r3, r3, #2
 8002a94:	6313      	str	r3, [r2, #48]	; 0x30
 8002a96:	4b15      	ldr	r3, [pc, #84]	; (8002aec <HAL_I2C_MspInit+0x88>)
 8002a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	613b      	str	r3, [r7, #16]
 8002aa0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002aa2:	23c0      	movs	r3, #192	; 0xc0
 8002aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002aa6:	2312      	movs	r3, #18
 8002aa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ab2:	2304      	movs	r3, #4
 8002ab4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ab6:	f107 0314 	add.w	r3, r7, #20
 8002aba:	4619      	mov	r1, r3
 8002abc:	480c      	ldr	r0, [pc, #48]	; (8002af0 <HAL_I2C_MspInit+0x8c>)
 8002abe:	f001 fc15 	bl	80042ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	60fb      	str	r3, [r7, #12]
 8002ac6:	4b09      	ldr	r3, [pc, #36]	; (8002aec <HAL_I2C_MspInit+0x88>)
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aca:	4a08      	ldr	r2, [pc, #32]	; (8002aec <HAL_I2C_MspInit+0x88>)
 8002acc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ad2:	4b06      	ldr	r3, [pc, #24]	; (8002aec <HAL_I2C_MspInit+0x88>)
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ada:	60fb      	str	r3, [r7, #12]
 8002adc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002ade:	bf00      	nop
 8002ae0:	3728      	adds	r7, #40	; 0x28
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40005400 	.word	0x40005400
 8002aec:	40023800 	.word	0x40023800
 8002af0:	40020400 	.word	0x40020400

08002af4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b08a      	sub	sp, #40	; 0x28
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002afc:	f107 0314 	add.w	r3, r7, #20
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	605a      	str	r2, [r3, #4]
 8002b06:	609a      	str	r2, [r3, #8]
 8002b08:	60da      	str	r2, [r3, #12]
 8002b0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a19      	ldr	r2, [pc, #100]	; (8002b78 <HAL_SPI_MspInit+0x84>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d12c      	bne.n	8002b70 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002b16:	2300      	movs	r3, #0
 8002b18:	613b      	str	r3, [r7, #16]
 8002b1a:	4b18      	ldr	r3, [pc, #96]	; (8002b7c <HAL_SPI_MspInit+0x88>)
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	4a17      	ldr	r2, [pc, #92]	; (8002b7c <HAL_SPI_MspInit+0x88>)
 8002b20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b24:	6413      	str	r3, [r2, #64]	; 0x40
 8002b26:	4b15      	ldr	r3, [pc, #84]	; (8002b7c <HAL_SPI_MspInit+0x88>)
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b2e:	613b      	str	r3, [r7, #16]
 8002b30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b32:	2300      	movs	r3, #0
 8002b34:	60fb      	str	r3, [r7, #12]
 8002b36:	4b11      	ldr	r3, [pc, #68]	; (8002b7c <HAL_SPI_MspInit+0x88>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3a:	4a10      	ldr	r2, [pc, #64]	; (8002b7c <HAL_SPI_MspInit+0x88>)
 8002b3c:	f043 0302 	orr.w	r3, r3, #2
 8002b40:	6313      	str	r3, [r2, #48]	; 0x30
 8002b42:	4b0e      	ldr	r3, [pc, #56]	; (8002b7c <HAL_SPI_MspInit+0x88>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	60fb      	str	r3, [r7, #12]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8002b4e:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8002b52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b54:	2302      	movs	r3, #2
 8002b56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002b60:	2305      	movs	r3, #5
 8002b62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b64:	f107 0314 	add.w	r3, r7, #20
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4805      	ldr	r0, [pc, #20]	; (8002b80 <HAL_SPI_MspInit+0x8c>)
 8002b6c:	f001 fbbe 	bl	80042ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002b70:	bf00      	nop
 8002b72:	3728      	adds	r7, #40	; 0x28
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	40003800 	.word	0x40003800
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	40020400 	.word	0x40020400

08002b84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b08c      	sub	sp, #48	; 0x30
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b8c:	f107 031c 	add.w	r3, r7, #28
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	605a      	str	r2, [r3, #4]
 8002b96:	609a      	str	r2, [r3, #8]
 8002b98:	60da      	str	r2, [r3, #12]
 8002b9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a97      	ldr	r2, [pc, #604]	; (8002e00 <HAL_UART_MspInit+0x27c>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	f040 8092 	bne.w	8002ccc <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ba8:	2300      	movs	r3, #0
 8002baa:	61bb      	str	r3, [r7, #24]
 8002bac:	4b95      	ldr	r3, [pc, #596]	; (8002e04 <HAL_UART_MspInit+0x280>)
 8002bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb0:	4a94      	ldr	r2, [pc, #592]	; (8002e04 <HAL_UART_MspInit+0x280>)
 8002bb2:	f043 0310 	orr.w	r3, r3, #16
 8002bb6:	6453      	str	r3, [r2, #68]	; 0x44
 8002bb8:	4b92      	ldr	r3, [pc, #584]	; (8002e04 <HAL_UART_MspInit+0x280>)
 8002bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bbc:	f003 0310 	and.w	r3, r3, #16
 8002bc0:	61bb      	str	r3, [r7, #24]
 8002bc2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	617b      	str	r3, [r7, #20]
 8002bc8:	4b8e      	ldr	r3, [pc, #568]	; (8002e04 <HAL_UART_MspInit+0x280>)
 8002bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bcc:	4a8d      	ldr	r2, [pc, #564]	; (8002e04 <HAL_UART_MspInit+0x280>)
 8002bce:	f043 0301 	orr.w	r3, r3, #1
 8002bd2:	6313      	str	r3, [r2, #48]	; 0x30
 8002bd4:	4b8b      	ldr	r3, [pc, #556]	; (8002e04 <HAL_UART_MspInit+0x280>)
 8002bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd8:	f003 0301 	and.w	r3, r3, #1
 8002bdc:	617b      	str	r3, [r7, #20]
 8002bde:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002be0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be6:	2302      	movs	r3, #2
 8002be8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bea:	2300      	movs	r3, #0
 8002bec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002bf2:	2307      	movs	r3, #7
 8002bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bf6:	f107 031c 	add.w	r3, r7, #28
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	4882      	ldr	r0, [pc, #520]	; (8002e08 <HAL_UART_MspInit+0x284>)
 8002bfe:	f001 fb75 	bl	80042ec <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002c02:	4b82      	ldr	r3, [pc, #520]	; (8002e0c <HAL_UART_MspInit+0x288>)
 8002c04:	4a82      	ldr	r2, [pc, #520]	; (8002e10 <HAL_UART_MspInit+0x28c>)
 8002c06:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002c08:	4b80      	ldr	r3, [pc, #512]	; (8002e0c <HAL_UART_MspInit+0x288>)
 8002c0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c0e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c10:	4b7e      	ldr	r3, [pc, #504]	; (8002e0c <HAL_UART_MspInit+0x288>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c16:	4b7d      	ldr	r3, [pc, #500]	; (8002e0c <HAL_UART_MspInit+0x288>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c1c:	4b7b      	ldr	r3, [pc, #492]	; (8002e0c <HAL_UART_MspInit+0x288>)
 8002c1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c22:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c24:	4b79      	ldr	r3, [pc, #484]	; (8002e0c <HAL_UART_MspInit+0x288>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c2a:	4b78      	ldr	r3, [pc, #480]	; (8002e0c <HAL_UART_MspInit+0x288>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002c30:	4b76      	ldr	r3, [pc, #472]	; (8002e0c <HAL_UART_MspInit+0x288>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002c36:	4b75      	ldr	r3, [pc, #468]	; (8002e0c <HAL_UART_MspInit+0x288>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c3c:	4b73      	ldr	r3, [pc, #460]	; (8002e0c <HAL_UART_MspInit+0x288>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002c42:	4872      	ldr	r0, [pc, #456]	; (8002e0c <HAL_UART_MspInit+0x288>)
 8002c44:	f000 ff50 	bl	8003ae8 <HAL_DMA_Init>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002c4e:	f7ff fed7 	bl	8002a00 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a6d      	ldr	r2, [pc, #436]	; (8002e0c <HAL_UART_MspInit+0x288>)
 8002c56:	639a      	str	r2, [r3, #56]	; 0x38
 8002c58:	4a6c      	ldr	r2, [pc, #432]	; (8002e0c <HAL_UART_MspInit+0x288>)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002c5e:	4b6d      	ldr	r3, [pc, #436]	; (8002e14 <HAL_UART_MspInit+0x290>)
 8002c60:	4a6d      	ldr	r2, [pc, #436]	; (8002e18 <HAL_UART_MspInit+0x294>)
 8002c62:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002c64:	4b6b      	ldr	r3, [pc, #428]	; (8002e14 <HAL_UART_MspInit+0x290>)
 8002c66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c6a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c6c:	4b69      	ldr	r3, [pc, #420]	; (8002e14 <HAL_UART_MspInit+0x290>)
 8002c6e:	2240      	movs	r2, #64	; 0x40
 8002c70:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c72:	4b68      	ldr	r3, [pc, #416]	; (8002e14 <HAL_UART_MspInit+0x290>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c78:	4b66      	ldr	r3, [pc, #408]	; (8002e14 <HAL_UART_MspInit+0x290>)
 8002c7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c7e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c80:	4b64      	ldr	r3, [pc, #400]	; (8002e14 <HAL_UART_MspInit+0x290>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c86:	4b63      	ldr	r3, [pc, #396]	; (8002e14 <HAL_UART_MspInit+0x290>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002c8c:	4b61      	ldr	r3, [pc, #388]	; (8002e14 <HAL_UART_MspInit+0x290>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002c92:	4b60      	ldr	r3, [pc, #384]	; (8002e14 <HAL_UART_MspInit+0x290>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c98:	4b5e      	ldr	r3, [pc, #376]	; (8002e14 <HAL_UART_MspInit+0x290>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002c9e:	485d      	ldr	r0, [pc, #372]	; (8002e14 <HAL_UART_MspInit+0x290>)
 8002ca0:	f000 ff22 	bl	8003ae8 <HAL_DMA_Init>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8002caa:	f7ff fea9 	bl	8002a00 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a58      	ldr	r2, [pc, #352]	; (8002e14 <HAL_UART_MspInit+0x290>)
 8002cb2:	635a      	str	r2, [r3, #52]	; 0x34
 8002cb4:	4a57      	ldr	r2, [pc, #348]	; (8002e14 <HAL_UART_MspInit+0x290>)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002cba:	2200      	movs	r2, #0
 8002cbc:	2105      	movs	r1, #5
 8002cbe:	2025      	movs	r0, #37	; 0x25
 8002cc0:	f000 fee3 	bl	8003a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002cc4:	2025      	movs	r0, #37	; 0x25
 8002cc6:	f000 fefc 	bl	8003ac2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002cca:	e095      	b.n	8002df8 <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART2)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a52      	ldr	r2, [pc, #328]	; (8002e1c <HAL_UART_MspInit+0x298>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	f040 8090 	bne.w	8002df8 <HAL_UART_MspInit+0x274>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002cd8:	2300      	movs	r3, #0
 8002cda:	613b      	str	r3, [r7, #16]
 8002cdc:	4b49      	ldr	r3, [pc, #292]	; (8002e04 <HAL_UART_MspInit+0x280>)
 8002cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce0:	4a48      	ldr	r2, [pc, #288]	; (8002e04 <HAL_UART_MspInit+0x280>)
 8002ce2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ce6:	6413      	str	r3, [r2, #64]	; 0x40
 8002ce8:	4b46      	ldr	r3, [pc, #280]	; (8002e04 <HAL_UART_MspInit+0x280>)
 8002cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf0:	613b      	str	r3, [r7, #16]
 8002cf2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	60fb      	str	r3, [r7, #12]
 8002cf8:	4b42      	ldr	r3, [pc, #264]	; (8002e04 <HAL_UART_MspInit+0x280>)
 8002cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfc:	4a41      	ldr	r2, [pc, #260]	; (8002e04 <HAL_UART_MspInit+0x280>)
 8002cfe:	f043 0301 	orr.w	r3, r3, #1
 8002d02:	6313      	str	r3, [r2, #48]	; 0x30
 8002d04:	4b3f      	ldr	r3, [pc, #252]	; (8002e04 <HAL_UART_MspInit+0x280>)
 8002d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	60fb      	str	r3, [r7, #12]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002d10:	230c      	movs	r3, #12
 8002d12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d14:	2302      	movs	r3, #2
 8002d16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d20:	2307      	movs	r3, #7
 8002d22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d24:	f107 031c 	add.w	r3, r7, #28
 8002d28:	4619      	mov	r1, r3
 8002d2a:	4837      	ldr	r0, [pc, #220]	; (8002e08 <HAL_UART_MspInit+0x284>)
 8002d2c:	f001 fade 	bl	80042ec <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002d30:	4b3b      	ldr	r3, [pc, #236]	; (8002e20 <HAL_UART_MspInit+0x29c>)
 8002d32:	4a3c      	ldr	r2, [pc, #240]	; (8002e24 <HAL_UART_MspInit+0x2a0>)
 8002d34:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002d36:	4b3a      	ldr	r3, [pc, #232]	; (8002e20 <HAL_UART_MspInit+0x29c>)
 8002d38:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d3c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d3e:	4b38      	ldr	r3, [pc, #224]	; (8002e20 <HAL_UART_MspInit+0x29c>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d44:	4b36      	ldr	r3, [pc, #216]	; (8002e20 <HAL_UART_MspInit+0x29c>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d4a:	4b35      	ldr	r3, [pc, #212]	; (8002e20 <HAL_UART_MspInit+0x29c>)
 8002d4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d50:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d52:	4b33      	ldr	r3, [pc, #204]	; (8002e20 <HAL_UART_MspInit+0x29c>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d58:	4b31      	ldr	r3, [pc, #196]	; (8002e20 <HAL_UART_MspInit+0x29c>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002d5e:	4b30      	ldr	r3, [pc, #192]	; (8002e20 <HAL_UART_MspInit+0x29c>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d64:	4b2e      	ldr	r3, [pc, #184]	; (8002e20 <HAL_UART_MspInit+0x29c>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d6a:	4b2d      	ldr	r3, [pc, #180]	; (8002e20 <HAL_UART_MspInit+0x29c>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002d70:	482b      	ldr	r0, [pc, #172]	; (8002e20 <HAL_UART_MspInit+0x29c>)
 8002d72:	f000 feb9 	bl	8003ae8 <HAL_DMA_Init>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 8002d7c:	f7ff fe40 	bl	8002a00 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a27      	ldr	r2, [pc, #156]	; (8002e20 <HAL_UART_MspInit+0x29c>)
 8002d84:	639a      	str	r2, [r3, #56]	; 0x38
 8002d86:	4a26      	ldr	r2, [pc, #152]	; (8002e20 <HAL_UART_MspInit+0x29c>)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002d8c:	4b26      	ldr	r3, [pc, #152]	; (8002e28 <HAL_UART_MspInit+0x2a4>)
 8002d8e:	4a27      	ldr	r2, [pc, #156]	; (8002e2c <HAL_UART_MspInit+0x2a8>)
 8002d90:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002d92:	4b25      	ldr	r3, [pc, #148]	; (8002e28 <HAL_UART_MspInit+0x2a4>)
 8002d94:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d98:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d9a:	4b23      	ldr	r3, [pc, #140]	; (8002e28 <HAL_UART_MspInit+0x2a4>)
 8002d9c:	2240      	movs	r2, #64	; 0x40
 8002d9e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002da0:	4b21      	ldr	r3, [pc, #132]	; (8002e28 <HAL_UART_MspInit+0x2a4>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002da6:	4b20      	ldr	r3, [pc, #128]	; (8002e28 <HAL_UART_MspInit+0x2a4>)
 8002da8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dac:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002dae:	4b1e      	ldr	r3, [pc, #120]	; (8002e28 <HAL_UART_MspInit+0x2a4>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002db4:	4b1c      	ldr	r3, [pc, #112]	; (8002e28 <HAL_UART_MspInit+0x2a4>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002dba:	4b1b      	ldr	r3, [pc, #108]	; (8002e28 <HAL_UART_MspInit+0x2a4>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002dc0:	4b19      	ldr	r3, [pc, #100]	; (8002e28 <HAL_UART_MspInit+0x2a4>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002dc6:	4b18      	ldr	r3, [pc, #96]	; (8002e28 <HAL_UART_MspInit+0x2a4>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002dcc:	4816      	ldr	r0, [pc, #88]	; (8002e28 <HAL_UART_MspInit+0x2a4>)
 8002dce:	f000 fe8b 	bl	8003ae8 <HAL_DMA_Init>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <HAL_UART_MspInit+0x258>
      Error_Handler();
 8002dd8:	f7ff fe12 	bl	8002a00 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a12      	ldr	r2, [pc, #72]	; (8002e28 <HAL_UART_MspInit+0x2a4>)
 8002de0:	635a      	str	r2, [r3, #52]	; 0x34
 8002de2:	4a11      	ldr	r2, [pc, #68]	; (8002e28 <HAL_UART_MspInit+0x2a4>)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002de8:	2200      	movs	r2, #0
 8002dea:	2105      	movs	r1, #5
 8002dec:	2026      	movs	r0, #38	; 0x26
 8002dee:	f000 fe4c 	bl	8003a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002df2:	2026      	movs	r0, #38	; 0x26
 8002df4:	f000 fe65 	bl	8003ac2 <HAL_NVIC_EnableIRQ>
}
 8002df8:	bf00      	nop
 8002dfa:	3730      	adds	r7, #48	; 0x30
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40011000 	.word	0x40011000
 8002e04:	40023800 	.word	0x40023800
 8002e08:	40020000 	.word	0x40020000
 8002e0c:	200001ec 	.word	0x200001ec
 8002e10:	40026440 	.word	0x40026440
 8002e14:	2000024c 	.word	0x2000024c
 8002e18:	400264b8 	.word	0x400264b8
 8002e1c:	40004400 	.word	0x40004400
 8002e20:	200002ac 	.word	0x200002ac
 8002e24:	40026088 	.word	0x40026088
 8002e28:	2000030c 	.word	0x2000030c
 8002e2c:	400260a0 	.word	0x400260a0

08002e30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b08c      	sub	sp, #48	; 0x30
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8002e40:	2200      	movs	r2, #0
 8002e42:	6879      	ldr	r1, [r7, #4]
 8002e44:	2019      	movs	r0, #25
 8002e46:	f000 fe20 	bl	8003a8a <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002e4a:	2019      	movs	r0, #25
 8002e4c:	f000 fe39 	bl	8003ac2 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002e50:	2300      	movs	r3, #0
 8002e52:	60fb      	str	r3, [r7, #12]
 8002e54:	4b1f      	ldr	r3, [pc, #124]	; (8002ed4 <HAL_InitTick+0xa4>)
 8002e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e58:	4a1e      	ldr	r2, [pc, #120]	; (8002ed4 <HAL_InitTick+0xa4>)
 8002e5a:	f043 0301 	orr.w	r3, r3, #1
 8002e5e:	6453      	str	r3, [r2, #68]	; 0x44
 8002e60:	4b1c      	ldr	r3, [pc, #112]	; (8002ed4 <HAL_InitTick+0xa4>)
 8002e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e64:	f003 0301 	and.w	r3, r3, #1
 8002e68:	60fb      	str	r3, [r7, #12]
 8002e6a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002e6c:	f107 0210 	add.w	r2, r7, #16
 8002e70:	f107 0314 	add.w	r3, r7, #20
 8002e74:	4611      	mov	r1, r2
 8002e76:	4618      	mov	r0, r3
 8002e78:	f001 fe76 	bl	8004b68 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002e7c:	f001 fe60 	bl	8004b40 <HAL_RCC_GetPCLK2Freq>
 8002e80:	4603      	mov	r3, r0
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e88:	4a13      	ldr	r2, [pc, #76]	; (8002ed8 <HAL_InitTick+0xa8>)
 8002e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8e:	0c9b      	lsrs	r3, r3, #18
 8002e90:	3b01      	subs	r3, #1
 8002e92:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002e94:	4b11      	ldr	r3, [pc, #68]	; (8002edc <HAL_InitTick+0xac>)
 8002e96:	4a12      	ldr	r2, [pc, #72]	; (8002ee0 <HAL_InitTick+0xb0>)
 8002e98:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002e9a:	4b10      	ldr	r3, [pc, #64]	; (8002edc <HAL_InitTick+0xac>)
 8002e9c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ea0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002ea2:	4a0e      	ldr	r2, [pc, #56]	; (8002edc <HAL_InitTick+0xac>)
 8002ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002ea8:	4b0c      	ldr	r3, [pc, #48]	; (8002edc <HAL_InitTick+0xac>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eae:	4b0b      	ldr	r3, [pc, #44]	; (8002edc <HAL_InitTick+0xac>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002eb4:	4809      	ldr	r0, [pc, #36]	; (8002edc <HAL_InitTick+0xac>)
 8002eb6:	f002 ff03 	bl	8005cc0 <HAL_TIM_Base_Init>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d104      	bne.n	8002eca <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002ec0:	4806      	ldr	r0, [pc, #24]	; (8002edc <HAL_InitTick+0xac>)
 8002ec2:	f002 ff57 	bl	8005d74 <HAL_TIM_Base_Start_IT>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	e000      	b.n	8002ecc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3730      	adds	r7, #48	; 0x30
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	40023800 	.word	0x40023800
 8002ed8:	431bde83 	.word	0x431bde83
 8002edc:	20000638 	.word	0x20000638
 8002ee0:	40010000 	.word	0x40010000

08002ee4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ee8:	e7fe      	b.n	8002ee8 <NMI_Handler+0x4>

08002eea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002eea:	b480      	push	{r7}
 8002eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002eee:	e7fe      	b.n	8002eee <HardFault_Handler+0x4>

08002ef0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ef4:	e7fe      	b.n	8002ef4 <MemManage_Handler+0x4>

08002ef6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002efa:	e7fe      	b.n	8002efa <BusFault_Handler+0x4>

08002efc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f00:	e7fe      	b.n	8002f00 <UsageFault_Handler+0x4>

08002f02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f02:	b480      	push	{r7}
 8002f04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f06:	bf00      	nop
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002f14:	4802      	ldr	r0, [pc, #8]	; (8002f20 <DMA1_Stream5_IRQHandler+0x10>)
 8002f16:	f000 ff7f 	bl	8003e18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002f1a:	bf00      	nop
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	200002ac 	.word	0x200002ac

08002f24 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002f28:	4802      	ldr	r0, [pc, #8]	; (8002f34 <DMA1_Stream6_IRQHandler+0x10>)
 8002f2a:	f000 ff75 	bl	8003e18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002f2e:	bf00      	nop
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	2000030c 	.word	0x2000030c

08002f38 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002f3c:	4802      	ldr	r0, [pc, #8]	; (8002f48 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002f3e:	f002 ff89 	bl	8005e54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002f42:	bf00      	nop
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	20000638 	.word	0x20000638

08002f4c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002f50:	4803      	ldr	r0, [pc, #12]	; (8002f60 <USART1_IRQHandler+0x14>)
 8002f52:	f003 fbb5 	bl	80066c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  USER_UART_IRQHandler(&huart1);
 8002f56:	4802      	ldr	r0, [pc, #8]	; (8002f60 <USART1_IRQHandler+0x14>)
 8002f58:	f7fd fefa 	bl	8000d50 <USER_UART_IRQHandler>
  /* USER CODE END USART1_IRQn 1 */
}
 8002f5c:	bf00      	nop
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	20000164 	.word	0x20000164

08002f64 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002f68:	4802      	ldr	r0, [pc, #8]	; (8002f74 <USART2_IRQHandler+0x10>)
 8002f6a:	f003 fba9 	bl	80066c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002f6e:	bf00      	nop
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	200001a8 	.word	0x200001a8

08002f78 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002f7c:	4802      	ldr	r0, [pc, #8]	; (8002f88 <DMA2_Stream2_IRQHandler+0x10>)
 8002f7e:	f000 ff4b 	bl	8003e18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002f82:	bf00      	nop
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	200001ec 	.word	0x200001ec

08002f8c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002f90:	4802      	ldr	r0, [pc, #8]	; (8002f9c <DMA2_Stream7_IRQHandler+0x10>)
 8002f92:	f000 ff41 	bl	8003e18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002f96:	bf00      	nop
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	2000024c 	.word	0x2000024c

08002fa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b086      	sub	sp, #24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fa8:	4a14      	ldr	r2, [pc, #80]	; (8002ffc <_sbrk+0x5c>)
 8002faa:	4b15      	ldr	r3, [pc, #84]	; (8003000 <_sbrk+0x60>)
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fb4:	4b13      	ldr	r3, [pc, #76]	; (8003004 <_sbrk+0x64>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d102      	bne.n	8002fc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fbc:	4b11      	ldr	r3, [pc, #68]	; (8003004 <_sbrk+0x64>)
 8002fbe:	4a12      	ldr	r2, [pc, #72]	; (8003008 <_sbrk+0x68>)
 8002fc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fc2:	4b10      	ldr	r3, [pc, #64]	; (8003004 <_sbrk+0x64>)
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4413      	add	r3, r2
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d207      	bcs.n	8002fe0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fd0:	f008 fd2c 	bl	800ba2c <__errno>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	220c      	movs	r2, #12
 8002fd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fda:	f04f 33ff 	mov.w	r3, #4294967295
 8002fde:	e009      	b.n	8002ff4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fe0:	4b08      	ldr	r3, [pc, #32]	; (8003004 <_sbrk+0x64>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fe6:	4b07      	ldr	r3, [pc, #28]	; (8003004 <_sbrk+0x64>)
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4413      	add	r3, r2
 8002fee:	4a05      	ldr	r2, [pc, #20]	; (8003004 <_sbrk+0x64>)
 8002ff0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3718      	adds	r7, #24
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	20020000 	.word	0x20020000
 8003000:	00000400 	.word	0x00000400
 8003004:	20000680 	.word	0x20000680
 8003008:	20005050 	.word	0x20005050

0800300c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003010:	4b06      	ldr	r3, [pc, #24]	; (800302c <SystemInit+0x20>)
 8003012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003016:	4a05      	ldr	r2, [pc, #20]	; (800302c <SystemInit+0x20>)
 8003018:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800301c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003020:	bf00      	nop
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	e000ed00 	.word	0xe000ed00

08003030 <W25qxx_Spi>:



//###################################################################################################################
uint8_t	W25qxx_Spi(uint8_t	Data)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af02      	add	r7, sp, #8
 8003036:	4603      	mov	r3, r0
 8003038:	71fb      	strb	r3, [r7, #7]
	uint8_t	ret;

	HAL_SPI_TransmitReceive(W25QXX_SPI_PTR, &Data, &ret, 1, 100); // spi2
 800303a:	f107 020f 	add.w	r2, r7, #15
 800303e:	1df9      	adds	r1, r7, #7
 8003040:	2364      	movs	r3, #100	; 0x64
 8003042:	9300      	str	r3, [sp, #0]
 8003044:	2301      	movs	r3, #1
 8003046:	4804      	ldr	r0, [pc, #16]	; (8003058 <W25qxx_Spi+0x28>)
 8003048:	f002 fbcd 	bl	80057e6 <HAL_SPI_TransmitReceive>
	ret = W25QXX_SPI->DR;*/

	//while((W25QXX_SPI->SR & SPI_SR_BSY));
	//__HAL_SPI_CLEAR_OVRFLAG(&hspi2);

	return ret;
 800304c:	7bfb      	ldrb	r3, [r7, #15]
}
 800304e:	4618      	mov	r0, r3
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	2000010c 	.word	0x2000010c

0800305c <W25qxx_ReadID>:

//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8003062:	2300      	movs	r3, #0
 8003064:	60fb      	str	r3, [r7, #12]
 8003066:	2300      	movs	r3, #0
 8003068:	60bb      	str	r3, [r7, #8]
 800306a:	2300      	movs	r3, #0
 800306c:	607b      	str	r3, [r7, #4]
 800306e:	2300      	movs	r3, #0
 8003070:	603b      	str	r3, [r7, #0]

	W25QFLASH_CS_SELECT;
 8003072:	2200      	movs	r2, #0
 8003074:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003078:	4813      	ldr	r0, [pc, #76]	; (80030c8 <W25qxx_ReadID+0x6c>)
 800307a:	f001 fae3 	bl	8004644 <HAL_GPIO_WritePin>

	W25qxx_Spi(W25_GET_JEDEC_ID);
 800307e:	209f      	movs	r0, #159	; 0x9f
 8003080:	f7ff ffd6 	bl	8003030 <W25qxx_Spi>

	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003084:	20a5      	movs	r0, #165	; 0xa5
 8003086:	f7ff ffd3 	bl	8003030 <W25qxx_Spi>
 800308a:	4603      	mov	r3, r0
 800308c:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800308e:	20a5      	movs	r0, #165	; 0xa5
 8003090:	f7ff ffce 	bl	8003030 <W25qxx_Spi>
 8003094:	4603      	mov	r3, r0
 8003096:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003098:	20a5      	movs	r0, #165	; 0xa5
 800309a:	f7ff ffc9 	bl	8003030 <W25qxx_Spi>
 800309e:	4603      	mov	r3, r0
 80030a0:	603b      	str	r3, [r7, #0]

	W25QFLASH_CS_UNSELECT;
 80030a2:	2201      	movs	r2, #1
 80030a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030a8:	4807      	ldr	r0, [pc, #28]	; (80030c8 <W25qxx_ReadID+0x6c>)
 80030aa:	f001 facb 	bl	8004644 <HAL_GPIO_WritePin>

	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	041a      	lsls	r2, r3, #16
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	021b      	lsls	r3, r3, #8
 80030b6:	4313      	orrs	r3, r2
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	60fb      	str	r3, [r7, #12]

	return Temp;
 80030be:	68fb      	ldr	r3, [r7, #12]
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3710      	adds	r7, #16
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	40020400 	.word	0x40020400

080030cc <W25qxx_WriteEnable>:
	W25QFLASH_CS_UNSELECT;
}*/

//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
	W25QFLASH_CS_SELECT;
 80030d0:	2200      	movs	r2, #0
 80030d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030d6:	4808      	ldr	r0, [pc, #32]	; (80030f8 <W25qxx_WriteEnable+0x2c>)
 80030d8:	f001 fab4 	bl	8004644 <HAL_GPIO_WritePin>
	W25qxx_Spi(W25_WRITE_ENABLE);
 80030dc:	2006      	movs	r0, #6
 80030de:	f7ff ffa7 	bl	8003030 <W25qxx_Spi>
	W25QFLASH_CS_UNSELECT;
 80030e2:	2201      	movs	r2, #1
 80030e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030e8:	4803      	ldr	r0, [pc, #12]	; (80030f8 <W25qxx_WriteEnable+0x2c>)
 80030ea:	f001 faab 	bl	8004644 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 80030ee:	2001      	movs	r0, #1
 80030f0:	f000 fbd8 	bl	80038a4 <HAL_Delay>
}
 80030f4:	bf00      	nop
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	40020400 	.word	0x40020400

080030fc <W25qxx_WaitForWriteEnd>:
	W25QFLASH_CS_UNSELECT;
}*/

//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8003100:	2001      	movs	r0, #1
 8003102:	f000 fbcf 	bl	80038a4 <HAL_Delay>
	W25QFLASH_CS_SELECT;
 8003106:	2200      	movs	r2, #0
 8003108:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800310c:	480f      	ldr	r0, [pc, #60]	; (800314c <W25qxx_WaitForWriteEnd+0x50>)
 800310e:	f001 fa99 	bl	8004644 <HAL_GPIO_WritePin>
	W25qxx_Spi(W25_READ_STATUS_1);
 8003112:	2005      	movs	r0, #5
 8003114:	f7ff ff8c 	bl	8003030 <W25qxx_Spi>

	do{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003118:	20a5      	movs	r0, #165	; 0xa5
 800311a:	f7ff ff89 	bl	8003030 <W25qxx_Spi>
 800311e:	4603      	mov	r3, r0
 8003120:	461a      	mov	r2, r3
 8003122:	4b0b      	ldr	r3, [pc, #44]	; (8003150 <W25qxx_WaitForWriteEnd+0x54>)
 8003124:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8003128:	2001      	movs	r0, #1
 800312a:	f000 fbbb 	bl	80038a4 <HAL_Delay>
	}
	while((w25qxx.StatusRegister1 & 0x01) == 0x01);
 800312e:	4b08      	ldr	r3, [pc, #32]	; (8003150 <W25qxx_WaitForWriteEnd+0x54>)
 8003130:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1ed      	bne.n	8003118 <W25qxx_WaitForWriteEnd+0x1c>

	W25QFLASH_CS_UNSELECT;
 800313c:	2201      	movs	r2, #1
 800313e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003142:	4802      	ldr	r0, [pc, #8]	; (800314c <W25qxx_WaitForWriteEnd+0x50>)
 8003144:	f001 fa7e 	bl	8004644 <HAL_GPIO_WritePin>
}
 8003148:	bf00      	nop
 800314a:	bd80      	pop	{r7, pc}
 800314c:	40020400 	.word	0x40020400
 8003150:	200006c4 	.word	0x200006c4

08003154 <W25qxx_Init>:

//###################################################################################################################
uint8_t W25qxx_Init(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 800315a:	4bb2      	ldr	r3, [pc, #712]	; (8003424 <W25qxx_Init+0x2d0>)
 800315c:	2201      	movs	r2, #1
 800315e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while(HAL_GetTick() < 100)
 8003162:	e002      	b.n	800316a <W25qxx_Init+0x16>
	W25qxx_Delay(1);
 8003164:	2001      	movs	r0, #1
 8003166:	f000 fb9d 	bl	80038a4 <HAL_Delay>
	while(HAL_GetTick() < 100)
 800316a:	f000 fb8f 	bl	800388c <HAL_GetTick>
 800316e:	4603      	mov	r3, r0
 8003170:	2b63      	cmp	r3, #99	; 0x63
 8003172:	d9f7      	bls.n	8003164 <W25qxx_Init+0x10>

	W25QFLASH_CS_UNSELECT;
 8003174:	2201      	movs	r2, #1
 8003176:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800317a:	48ab      	ldr	r0, [pc, #684]	; (8003428 <W25qxx_Init+0x2d4>)
 800317c:	f001 fa62 	bl	8004644 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8003180:	2064      	movs	r0, #100	; 0x64
 8003182:	f000 fb8f 	bl	80038a4 <HAL_Delay>

	uint32_t id;

	#if (INIT_DEBUG == 1)
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Init Begin...\n", 14, 1000);
 8003186:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800318a:	220e      	movs	r2, #14
 800318c:	49a7      	ldr	r1, [pc, #668]	; (800342c <W25qxx_Init+0x2d8>)
 800318e:	48a8      	ldr	r0, [pc, #672]	; (8003430 <W25qxx_Init+0x2dc>)
 8003190:	f003 f891 	bl	80062b6 <HAL_UART_Transmit>
	#endif
	
	id = W25qxx_ReadID();
 8003194:	f7ff ff62 	bl	800305c <W25qxx_ReadID>
 8003198:	6078      	str	r0, [r7, #4]

	#if (INIT_DEBUG == 1)
	snprintf(buf, 64, "ID:0x%lX\n", id);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4aa5      	ldr	r2, [pc, #660]	; (8003434 <W25qxx_Init+0x2e0>)
 800319e:	2140      	movs	r1, #64	; 0x40
 80031a0:	48a5      	ldr	r0, [pc, #660]	; (8003438 <W25qxx_Init+0x2e4>)
 80031a2:	f008 fc83 	bl	800baac <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 80031a6:	48a4      	ldr	r0, [pc, #656]	; (8003438 <W25qxx_Init+0x2e4>)
 80031a8:	f7fd f832 	bl	8000210 <strlen>
 80031ac:	4603      	mov	r3, r0
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031b4:	49a0      	ldr	r1, [pc, #640]	; (8003438 <W25qxx_Init+0x2e4>)
 80031b6:	489e      	ldr	r0, [pc, #632]	; (8003430 <W25qxx_Init+0x2dc>)
 80031b8:	f003 f87d 	bl	80062b6 <HAL_UART_Transmit>
	#endif

	switch(id & 0x0000FFFF)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	b29b      	uxth	r3, r3
 80031c0:	f243 0217 	movw	r2, #12311	; 0x3017
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d839      	bhi.n	800323c <W25qxx_Init+0xe8>
 80031c8:	f243 0211 	movw	r2, #12305	; 0x3011
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d21d      	bcs.n	800320c <W25qxx_Init+0xb8>
 80031d0:	e11a      	b.n	8003408 <W25qxx_Init+0x2b4>
 80031d2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80031d6:	3b11      	subs	r3, #17
 80031d8:	2b09      	cmp	r3, #9
 80031da:	f200 8115 	bhi.w	8003408 <W25qxx_Init+0x2b4>
 80031de:	a201      	add	r2, pc, #4	; (adr r2, 80031e4 <W25qxx_Init+0x90>)
 80031e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e4:	08003353 	.word	0x08003353
 80031e8:	08003337 	.word	0x08003337
 80031ec:	0800331b 	.word	0x0800331b
 80031f0:	080032ff 	.word	0x080032ff
 80031f4:	080032e3 	.word	0x080032e3
 80031f8:	080032c7 	.word	0x080032c7
 80031fc:	080032ab 	.word	0x080032ab
 8003200:	0800328d 	.word	0x0800328d
 8003204:	0800326f 	.word	0x0800326f
 8003208:	08003251 	.word	0x08003251
 800320c:	f5a3 5340 	sub.w	r3, r3, #12288	; 0x3000
 8003210:	3b11      	subs	r3, #17
 8003212:	2b06      	cmp	r3, #6
 8003214:	f200 80f8 	bhi.w	8003408 <W25qxx_Init+0x2b4>
 8003218:	a201      	add	r2, pc, #4	; (adr r2, 8003220 <W25qxx_Init+0xcc>)
 800321a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800321e:	bf00      	nop
 8003220:	080033f3 	.word	0x080033f3
 8003224:	080033dd 	.word	0x080033dd
 8003228:	080033c7 	.word	0x080033c7
 800322c:	080033b1 	.word	0x080033b1
 8003230:	0800339b 	.word	0x0800339b
 8003234:	08003385 	.word	0x08003385
 8003238:	0800336f 	.word	0x0800336f
 800323c:	f244 021a 	movw	r2, #16410	; 0x401a
 8003240:	4293      	cmp	r3, r2
 8003242:	f200 80e1 	bhi.w	8003408 <W25qxx_Init+0x2b4>
 8003246:	f244 0211 	movw	r2, #16401	; 0x4011
 800324a:	4293      	cmp	r3, r2
 800324c:	d2c1      	bcs.n	80031d2 <W25qxx_Init+0x7e>
 800324e:	e0db      	b.n	8003408 <W25qxx_Init+0x2b4>
	{
		case 0x401A:	// 	w25q512
			w25qxx.ID = W25Q512;
 8003250:	4b74      	ldr	r3, [pc, #464]	; (8003424 <W25qxx_Init+0x2d0>)
 8003252:	220a      	movs	r2, #10
 8003254:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 1024;
 8003256:	4b73      	ldr	r3, [pc, #460]	; (8003424 <W25qxx_Init+0x2d0>)
 8003258:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800325c:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q512\n", 14, 1000);
 800325e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003262:	220e      	movs	r2, #14
 8003264:	4975      	ldr	r1, [pc, #468]	; (800343c <W25qxx_Init+0x2e8>)
 8003266:	4872      	ldr	r0, [pc, #456]	; (8003430 <W25qxx_Init+0x2dc>)
 8003268:	f003 f825 	bl	80062b6 <HAL_UART_Transmit>
			#endif
		break;
 800326c:	e10a      	b.n	8003484 <W25qxx_Init+0x330>

		case 0x4019:	// 	w25q256
			w25qxx.ID = W25Q256;
 800326e:	4b6d      	ldr	r3, [pc, #436]	; (8003424 <W25qxx_Init+0x2d0>)
 8003270:	2209      	movs	r2, #9
 8003272:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 512;
 8003274:	4b6b      	ldr	r3, [pc, #428]	; (8003424 <W25qxx_Init+0x2d0>)
 8003276:	f44f 7200 	mov.w	r2, #512	; 0x200
 800327a:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q256\n", 14, 1000);
 800327c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003280:	220e      	movs	r2, #14
 8003282:	496f      	ldr	r1, [pc, #444]	; (8003440 <W25qxx_Init+0x2ec>)
 8003284:	486a      	ldr	r0, [pc, #424]	; (8003430 <W25qxx_Init+0x2dc>)
 8003286:	f003 f816 	bl	80062b6 <HAL_UART_Transmit>
			#endif
		break;
 800328a:	e0fb      	b.n	8003484 <W25qxx_Init+0x330>

		case 0x4018:	// 	w25q128
			w25qxx.ID = W25Q128;
 800328c:	4b65      	ldr	r3, [pc, #404]	; (8003424 <W25qxx_Init+0x2d0>)
 800328e:	2208      	movs	r2, #8
 8003290:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 256;
 8003292:	4b64      	ldr	r3, [pc, #400]	; (8003424 <W25qxx_Init+0x2d0>)
 8003294:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003298:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q128\n", 14, 1000);
 800329a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800329e:	220e      	movs	r2, #14
 80032a0:	4968      	ldr	r1, [pc, #416]	; (8003444 <W25qxx_Init+0x2f0>)
 80032a2:	4863      	ldr	r0, [pc, #396]	; (8003430 <W25qxx_Init+0x2dc>)
 80032a4:	f003 f807 	bl	80062b6 <HAL_UART_Transmit>
			#endif
		break;
 80032a8:	e0ec      	b.n	8003484 <W25qxx_Init+0x330>

		case 0x4017:	//	w25q64
			w25qxx.ID = W25Q64;
 80032aa:	4b5e      	ldr	r3, [pc, #376]	; (8003424 <W25qxx_Init+0x2d0>)
 80032ac:	2207      	movs	r2, #7
 80032ae:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 128;
 80032b0:	4b5c      	ldr	r3, [pc, #368]	; (8003424 <W25qxx_Init+0x2d0>)
 80032b2:	2280      	movs	r2, #128	; 0x80
 80032b4:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q64\n", 13, 1000);
 80032b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032ba:	220d      	movs	r2, #13
 80032bc:	4962      	ldr	r1, [pc, #392]	; (8003448 <W25qxx_Init+0x2f4>)
 80032be:	485c      	ldr	r0, [pc, #368]	; (8003430 <W25qxx_Init+0x2dc>)
 80032c0:	f002 fff9 	bl	80062b6 <HAL_UART_Transmit>
			#endif
		break;
 80032c4:	e0de      	b.n	8003484 <W25qxx_Init+0x330>

		case 0x4016:	//	w25q32
			w25qxx.ID = W25Q32;
 80032c6:	4b57      	ldr	r3, [pc, #348]	; (8003424 <W25qxx_Init+0x2d0>)
 80032c8:	2206      	movs	r2, #6
 80032ca:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 64;
 80032cc:	4b55      	ldr	r3, [pc, #340]	; (8003424 <W25qxx_Init+0x2d0>)
 80032ce:	2240      	movs	r2, #64	; 0x40
 80032d0:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q32\n", 13, 1000);
 80032d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032d6:	220d      	movs	r2, #13
 80032d8:	495c      	ldr	r1, [pc, #368]	; (800344c <W25qxx_Init+0x2f8>)
 80032da:	4855      	ldr	r0, [pc, #340]	; (8003430 <W25qxx_Init+0x2dc>)
 80032dc:	f002 ffeb 	bl	80062b6 <HAL_UART_Transmit>
			#endif
		break;
 80032e0:	e0d0      	b.n	8003484 <W25qxx_Init+0x330>

		case 0x4015:	//	w25q16
			w25qxx.ID = W25Q16;
 80032e2:	4b50      	ldr	r3, [pc, #320]	; (8003424 <W25qxx_Init+0x2d0>)
 80032e4:	2205      	movs	r2, #5
 80032e6:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 32;
 80032e8:	4b4e      	ldr	r3, [pc, #312]	; (8003424 <W25qxx_Init+0x2d0>)
 80032ea:	2220      	movs	r2, #32
 80032ec:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q16\n", 13, 1000);
 80032ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032f2:	220d      	movs	r2, #13
 80032f4:	4956      	ldr	r1, [pc, #344]	; (8003450 <W25qxx_Init+0x2fc>)
 80032f6:	484e      	ldr	r0, [pc, #312]	; (8003430 <W25qxx_Init+0x2dc>)
 80032f8:	f002 ffdd 	bl	80062b6 <HAL_UART_Transmit>
			#endif
		break;
 80032fc:	e0c2      	b.n	8003484 <W25qxx_Init+0x330>

		case 0x4014:	//	w25q80
			w25qxx.ID = W25Q80;
 80032fe:	4b49      	ldr	r3, [pc, #292]	; (8003424 <W25qxx_Init+0x2d0>)
 8003300:	2204      	movs	r2, #4
 8003302:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 16;
 8003304:	4b47      	ldr	r3, [pc, #284]	; (8003424 <W25qxx_Init+0x2d0>)
 8003306:	2210      	movs	r2, #16
 8003308:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q80\n", 13, 1000);
 800330a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800330e:	220d      	movs	r2, #13
 8003310:	4950      	ldr	r1, [pc, #320]	; (8003454 <W25qxx_Init+0x300>)
 8003312:	4847      	ldr	r0, [pc, #284]	; (8003430 <W25qxx_Init+0x2dc>)
 8003314:	f002 ffcf 	bl	80062b6 <HAL_UART_Transmit>
			#endif
		break;
 8003318:	e0b4      	b.n	8003484 <W25qxx_Init+0x330>

		case 0x4013:	//	w25q40
			w25qxx.ID = W25Q40;
 800331a:	4b42      	ldr	r3, [pc, #264]	; (8003424 <W25qxx_Init+0x2d0>)
 800331c:	2203      	movs	r2, #3
 800331e:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 8;
 8003320:	4b40      	ldr	r3, [pc, #256]	; (8003424 <W25qxx_Init+0x2d0>)
 8003322:	2208      	movs	r2, #8
 8003324:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q40\n", 13, 1000);
 8003326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800332a:	220d      	movs	r2, #13
 800332c:	494a      	ldr	r1, [pc, #296]	; (8003458 <W25qxx_Init+0x304>)
 800332e:	4840      	ldr	r0, [pc, #256]	; (8003430 <W25qxx_Init+0x2dc>)
 8003330:	f002 ffc1 	bl	80062b6 <HAL_UART_Transmit>
			#endif
		break;
 8003334:	e0a6      	b.n	8003484 <W25qxx_Init+0x330>

		case 0x4012:	//	w25q20
			w25qxx.ID = W25Q20;
 8003336:	4b3b      	ldr	r3, [pc, #236]	; (8003424 <W25qxx_Init+0x2d0>)
 8003338:	2202      	movs	r2, #2
 800333a:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 4;
 800333c:	4b39      	ldr	r3, [pc, #228]	; (8003424 <W25qxx_Init+0x2d0>)
 800333e:	2204      	movs	r2, #4
 8003340:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q20\n", 13, 1000);
 8003342:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003346:	220d      	movs	r2, #13
 8003348:	4944      	ldr	r1, [pc, #272]	; (800345c <W25qxx_Init+0x308>)
 800334a:	4839      	ldr	r0, [pc, #228]	; (8003430 <W25qxx_Init+0x2dc>)
 800334c:	f002 ffb3 	bl	80062b6 <HAL_UART_Transmit>
			#endif
		break;
 8003350:	e098      	b.n	8003484 <W25qxx_Init+0x330>

		case 0x4011:	//	w25q10
			w25qxx.ID = W25Q10;
 8003352:	4b34      	ldr	r3, [pc, #208]	; (8003424 <W25qxx_Init+0x2d0>)
 8003354:	2201      	movs	r2, #1
 8003356:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 2;
 8003358:	4b32      	ldr	r3, [pc, #200]	; (8003424 <W25qxx_Init+0x2d0>)
 800335a:	2202      	movs	r2, #2
 800335c:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q10\n", 13, 1000);
 800335e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003362:	220d      	movs	r2, #13
 8003364:	493e      	ldr	r1, [pc, #248]	; (8003460 <W25qxx_Init+0x30c>)
 8003366:	4832      	ldr	r0, [pc, #200]	; (8003430 <W25qxx_Init+0x2dc>)
 8003368:	f002 ffa5 	bl	80062b6 <HAL_UART_Transmit>
			#endif
		break;
 800336c:	e08a      	b.n	8003484 <W25qxx_Init+0x330>

		////////////////////////////////////////////////////////////////////////////////

		case 0x3017:	//	w25x64
			//w25qxx.ID = W25Q64;
			w25qxx.BlockCount = 128;
 800336e:	4b2d      	ldr	r3, [pc, #180]	; (8003424 <W25qxx_Init+0x2d0>)
 8003370:	2280      	movs	r2, #128	; 0x80
 8003372:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x64\n", 13, 1000);
 8003374:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003378:	220d      	movs	r2, #13
 800337a:	493a      	ldr	r1, [pc, #232]	; (8003464 <W25qxx_Init+0x310>)
 800337c:	482c      	ldr	r0, [pc, #176]	; (8003430 <W25qxx_Init+0x2dc>)
 800337e:	f002 ff9a 	bl	80062b6 <HAL_UART_Transmit>
			#endif
		break;
 8003382:	e07f      	b.n	8003484 <W25qxx_Init+0x330>

		case 0x3016:	//	w25x32
			//w25qxx.ID = W25Q32;
			w25qxx.BlockCount = 64;
 8003384:	4b27      	ldr	r3, [pc, #156]	; (8003424 <W25qxx_Init+0x2d0>)
 8003386:	2240      	movs	r2, #64	; 0x40
 8003388:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x32\n", 13, 1000);
 800338a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800338e:	220d      	movs	r2, #13
 8003390:	4935      	ldr	r1, [pc, #212]	; (8003468 <W25qxx_Init+0x314>)
 8003392:	4827      	ldr	r0, [pc, #156]	; (8003430 <W25qxx_Init+0x2dc>)
 8003394:	f002 ff8f 	bl	80062b6 <HAL_UART_Transmit>
			#endif
		break;
 8003398:	e074      	b.n	8003484 <W25qxx_Init+0x330>

		case 0x3015:	//	w25q16
			//w25qxx.ID = W25Q16;
			w25qxx.BlockCount = 32;
 800339a:	4b22      	ldr	r3, [pc, #136]	; (8003424 <W25qxx_Init+0x2d0>)
 800339c:	2220      	movs	r2, #32
 800339e:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x16\n", 13, 1000);
 80033a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033a4:	220d      	movs	r2, #13
 80033a6:	4931      	ldr	r1, [pc, #196]	; (800346c <W25qxx_Init+0x318>)
 80033a8:	4821      	ldr	r0, [pc, #132]	; (8003430 <W25qxx_Init+0x2dc>)
 80033aa:	f002 ff84 	bl	80062b6 <HAL_UART_Transmit>
			#endif
		break;
 80033ae:	e069      	b.n	8003484 <W25qxx_Init+0x330>

		////////////////////////////////////////////////////////////////////////////////
		case 0x3014:	//	w25x80
			//w25qxx.ID = W25Q80;
			w25qxx.BlockCount = 16;
 80033b0:	4b1c      	ldr	r3, [pc, #112]	; (8003424 <W25qxx_Init+0x2d0>)
 80033b2:	2210      	movs	r2, #16
 80033b4:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x80\n", 13, 1000);
 80033b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033ba:	220d      	movs	r2, #13
 80033bc:	492c      	ldr	r1, [pc, #176]	; (8003470 <W25qxx_Init+0x31c>)
 80033be:	481c      	ldr	r0, [pc, #112]	; (8003430 <W25qxx_Init+0x2dc>)
 80033c0:	f002 ff79 	bl	80062b6 <HAL_UART_Transmit>
			#endif
		break;
 80033c4:	e05e      	b.n	8003484 <W25qxx_Init+0x330>

		case 0x3013:	//	w25x40
			//w25qxx.ID = W25Q40;
			w25qxx.BlockCount = 8;
 80033c6:	4b17      	ldr	r3, [pc, #92]	; (8003424 <W25qxx_Init+0x2d0>)
 80033c8:	2208      	movs	r2, #8
 80033ca:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x40\n", 13, 1000);
 80033cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033d0:	220d      	movs	r2, #13
 80033d2:	4928      	ldr	r1, [pc, #160]	; (8003474 <W25qxx_Init+0x320>)
 80033d4:	4816      	ldr	r0, [pc, #88]	; (8003430 <W25qxx_Init+0x2dc>)
 80033d6:	f002 ff6e 	bl	80062b6 <HAL_UART_Transmit>
			#endif
		break;
 80033da:	e053      	b.n	8003484 <W25qxx_Init+0x330>

		case 0x3012:	//	w25x20
			//w25qxx.ID = W25Q20;
			w25qxx.BlockCount = 4;
 80033dc:	4b11      	ldr	r3, [pc, #68]	; (8003424 <W25qxx_Init+0x2d0>)
 80033de:	2204      	movs	r2, #4
 80033e0:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x20\n", 13, 1000);
 80033e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033e6:	220d      	movs	r2, #13
 80033e8:	4923      	ldr	r1, [pc, #140]	; (8003478 <W25qxx_Init+0x324>)
 80033ea:	4811      	ldr	r0, [pc, #68]	; (8003430 <W25qxx_Init+0x2dc>)
 80033ec:	f002 ff63 	bl	80062b6 <HAL_UART_Transmit>
			#endif
		break;
 80033f0:	e048      	b.n	8003484 <W25qxx_Init+0x330>

		case 0x3011:	//	w25x10
			//w25qxx.ID = W25Q10;
			w25qxx.BlockCount = 2;
 80033f2:	4b0c      	ldr	r3, [pc, #48]	; (8003424 <W25qxx_Init+0x2d0>)
 80033f4:	2202      	movs	r2, #2
 80033f6:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x10\n", 13, 1000);
 80033f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033fc:	220d      	movs	r2, #13
 80033fe:	491f      	ldr	r1, [pc, #124]	; (800347c <W25qxx_Init+0x328>)
 8003400:	480b      	ldr	r0, [pc, #44]	; (8003430 <W25qxx_Init+0x2dc>)
 8003402:	f002 ff58 	bl	80062b6 <HAL_UART_Transmit>
			#endif
		break;
 8003406:	e03d      	b.n	8003484 <W25qxx_Init+0x330>



		default:
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Unknown ID\n", 11, 1000);
 8003408:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800340c:	220b      	movs	r2, #11
 800340e:	491c      	ldr	r1, [pc, #112]	; (8003480 <W25qxx_Init+0x32c>)
 8003410:	4807      	ldr	r0, [pc, #28]	; (8003430 <W25qxx_Init+0x2dc>)
 8003412:	f002 ff50 	bl	80062b6 <HAL_UART_Transmit>
			#endif

			w25qxx.Lock = 0;
 8003416:	4b03      	ldr	r3, [pc, #12]	; (8003424 <W25qxx_Init+0x2d0>)
 8003418:	2200      	movs	r2, #0
 800341a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			return 0;
 800341e:	2300      	movs	r3, #0
 8003420:	e0e1      	b.n	80035e6 <W25qxx_Init+0x492>
 8003422:	bf00      	nop
 8003424:	200006c4 	.word	0x200006c4
 8003428:	40020400 	.word	0x40020400
 800342c:	0800d390 	.word	0x0800d390
 8003430:	200001a8 	.word	0x200001a8
 8003434:	0800d3a0 	.word	0x0800d3a0
 8003438:	20000684 	.word	0x20000684
 800343c:	0800d3ac 	.word	0x0800d3ac
 8003440:	0800d3bc 	.word	0x0800d3bc
 8003444:	0800d3cc 	.word	0x0800d3cc
 8003448:	0800d3dc 	.word	0x0800d3dc
 800344c:	0800d3ec 	.word	0x0800d3ec
 8003450:	0800d3fc 	.word	0x0800d3fc
 8003454:	0800d40c 	.word	0x0800d40c
 8003458:	0800d41c 	.word	0x0800d41c
 800345c:	0800d42c 	.word	0x0800d42c
 8003460:	0800d43c 	.word	0x0800d43c
 8003464:	0800d44c 	.word	0x0800d44c
 8003468:	0800d45c 	.word	0x0800d45c
 800346c:	0800d46c 	.word	0x0800d46c
 8003470:	0800d47c 	.word	0x0800d47c
 8003474:	0800d48c 	.word	0x0800d48c
 8003478:	0800d49c 	.word	0x0800d49c
 800347c:	0800d4ac 	.word	0x0800d4ac
 8003480:	0800d4bc 	.word	0x0800d4bc
	}


	w25qxx.PageSize = 256;
 8003484:	4b5a      	ldr	r3, [pc, #360]	; (80035f0 <W25qxx_Init+0x49c>)
 8003486:	f44f 7280 	mov.w	r2, #256	; 0x100
 800348a:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 800348c:	4b58      	ldr	r3, [pc, #352]	; (80035f0 <W25qxx_Init+0x49c>)
 800348e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003492:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8003494:	4b56      	ldr	r3, [pc, #344]	; (80035f0 <W25qxx_Init+0x49c>)
 8003496:	69db      	ldr	r3, [r3, #28]
 8003498:	011b      	lsls	r3, r3, #4
 800349a:	4a55      	ldr	r2, [pc, #340]	; (80035f0 <W25qxx_Init+0x49c>)
 800349c:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 800349e:	4b54      	ldr	r3, [pc, #336]	; (80035f0 <W25qxx_Init+0x49c>)
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	4a53      	ldr	r2, [pc, #332]	; (80035f0 <W25qxx_Init+0x49c>)
 80034a4:	6912      	ldr	r2, [r2, #16]
 80034a6:	fb02 f303 	mul.w	r3, r2, r3
 80034aa:	4a51      	ldr	r2, [pc, #324]	; (80035f0 <W25qxx_Init+0x49c>)
 80034ac:	8952      	ldrh	r2, [r2, #10]
 80034ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80034b2:	4a4f      	ldr	r2, [pc, #316]	; (80035f0 <W25qxx_Init+0x49c>)
 80034b4:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 80034b6:	4b4e      	ldr	r3, [pc, #312]	; (80035f0 <W25qxx_Init+0x49c>)
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	011b      	lsls	r3, r3, #4
 80034bc:	4a4c      	ldr	r2, [pc, #304]	; (80035f0 <W25qxx_Init+0x49c>)
 80034be:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 80034c0:	4b4b      	ldr	r3, [pc, #300]	; (80035f0 <W25qxx_Init+0x49c>)
 80034c2:	695b      	ldr	r3, [r3, #20]
 80034c4:	4a4a      	ldr	r2, [pc, #296]	; (80035f0 <W25qxx_Init+0x49c>)
 80034c6:	6912      	ldr	r2, [r2, #16]
 80034c8:	fb02 f303 	mul.w	r3, r2, r3
 80034cc:	0a9b      	lsrs	r3, r3, #10
 80034ce:	4a48      	ldr	r2, [pc, #288]	; (80035f0 <W25qxx_Init+0x49c>)
 80034d0:	6213      	str	r3, [r2, #32]
	//W25qxx_ReadStatusRegister(1);
	//W25qxx_ReadStatusRegister(2);
	//W25qxx_ReadStatusRegister(3);

	#if (INIT_DEBUG == 1)
	snprintf(buf, 64, "Page Size: %d Bytes\n", w25qxx.PageSize);
 80034d2:	4b47      	ldr	r3, [pc, #284]	; (80035f0 <W25qxx_Init+0x49c>)
 80034d4:	895b      	ldrh	r3, [r3, #10]
 80034d6:	4a47      	ldr	r2, [pc, #284]	; (80035f4 <W25qxx_Init+0x4a0>)
 80034d8:	2140      	movs	r1, #64	; 0x40
 80034da:	4847      	ldr	r0, [pc, #284]	; (80035f8 <W25qxx_Init+0x4a4>)
 80034dc:	f008 fae6 	bl	800baac <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 80034e0:	4845      	ldr	r0, [pc, #276]	; (80035f8 <W25qxx_Init+0x4a4>)
 80034e2:	f7fc fe95 	bl	8000210 <strlen>
 80034e6:	4603      	mov	r3, r0
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034ee:	4942      	ldr	r1, [pc, #264]	; (80035f8 <W25qxx_Init+0x4a4>)
 80034f0:	4842      	ldr	r0, [pc, #264]	; (80035fc <W25qxx_Init+0x4a8>)
 80034f2:	f002 fee0 	bl	80062b6 <HAL_UART_Transmit>

	snprintf(buf, 64, "Page Count: %lu\n", w25qxx.PageCount);
 80034f6:	4b3e      	ldr	r3, [pc, #248]	; (80035f0 <W25qxx_Init+0x49c>)
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	4a41      	ldr	r2, [pc, #260]	; (8003600 <W25qxx_Init+0x4ac>)
 80034fc:	2140      	movs	r1, #64	; 0x40
 80034fe:	483e      	ldr	r0, [pc, #248]	; (80035f8 <W25qxx_Init+0x4a4>)
 8003500:	f008 fad4 	bl	800baac <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 8003504:	483c      	ldr	r0, [pc, #240]	; (80035f8 <W25qxx_Init+0x4a4>)
 8003506:	f7fc fe83 	bl	8000210 <strlen>
 800350a:	4603      	mov	r3, r0
 800350c:	b29a      	uxth	r2, r3
 800350e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003512:	4939      	ldr	r1, [pc, #228]	; (80035f8 <W25qxx_Init+0x4a4>)
 8003514:	4839      	ldr	r0, [pc, #228]	; (80035fc <W25qxx_Init+0x4a8>)
 8003516:	f002 fece 	bl	80062b6 <HAL_UART_Transmit>

	snprintf(buf, 64, "Sector Size: %lu Bytes\n", w25qxx.SectorSize);
 800351a:	4b35      	ldr	r3, [pc, #212]	; (80035f0 <W25qxx_Init+0x49c>)
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	4a39      	ldr	r2, [pc, #228]	; (8003604 <W25qxx_Init+0x4b0>)
 8003520:	2140      	movs	r1, #64	; 0x40
 8003522:	4835      	ldr	r0, [pc, #212]	; (80035f8 <W25qxx_Init+0x4a4>)
 8003524:	f008 fac2 	bl	800baac <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 8003528:	4833      	ldr	r0, [pc, #204]	; (80035f8 <W25qxx_Init+0x4a4>)
 800352a:	f7fc fe71 	bl	8000210 <strlen>
 800352e:	4603      	mov	r3, r0
 8003530:	b29a      	uxth	r2, r3
 8003532:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003536:	4930      	ldr	r1, [pc, #192]	; (80035f8 <W25qxx_Init+0x4a4>)
 8003538:	4830      	ldr	r0, [pc, #192]	; (80035fc <W25qxx_Init+0x4a8>)
 800353a:	f002 febc 	bl	80062b6 <HAL_UART_Transmit>

	snprintf(buf, 64, "Sector Count: %lu\n", w25qxx.SectorCount);
 800353e:	4b2c      	ldr	r3, [pc, #176]	; (80035f0 <W25qxx_Init+0x49c>)
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	4a31      	ldr	r2, [pc, #196]	; (8003608 <W25qxx_Init+0x4b4>)
 8003544:	2140      	movs	r1, #64	; 0x40
 8003546:	482c      	ldr	r0, [pc, #176]	; (80035f8 <W25qxx_Init+0x4a4>)
 8003548:	f008 fab0 	bl	800baac <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 800354c:	482a      	ldr	r0, [pc, #168]	; (80035f8 <W25qxx_Init+0x4a4>)
 800354e:	f7fc fe5f 	bl	8000210 <strlen>
 8003552:	4603      	mov	r3, r0
 8003554:	b29a      	uxth	r2, r3
 8003556:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800355a:	4927      	ldr	r1, [pc, #156]	; (80035f8 <W25qxx_Init+0x4a4>)
 800355c:	4827      	ldr	r0, [pc, #156]	; (80035fc <W25qxx_Init+0x4a8>)
 800355e:	f002 feaa 	bl	80062b6 <HAL_UART_Transmit>

	snprintf(buf, 64, "Block Size: %lu Bytes\n", w25qxx.BlockSize);
 8003562:	4b23      	ldr	r3, [pc, #140]	; (80035f0 <W25qxx_Init+0x49c>)
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	4a29      	ldr	r2, [pc, #164]	; (800360c <W25qxx_Init+0x4b8>)
 8003568:	2140      	movs	r1, #64	; 0x40
 800356a:	4823      	ldr	r0, [pc, #140]	; (80035f8 <W25qxx_Init+0x4a4>)
 800356c:	f008 fa9e 	bl	800baac <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 8003570:	4821      	ldr	r0, [pc, #132]	; (80035f8 <W25qxx_Init+0x4a4>)
 8003572:	f7fc fe4d 	bl	8000210 <strlen>
 8003576:	4603      	mov	r3, r0
 8003578:	b29a      	uxth	r2, r3
 800357a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800357e:	491e      	ldr	r1, [pc, #120]	; (80035f8 <W25qxx_Init+0x4a4>)
 8003580:	481e      	ldr	r0, [pc, #120]	; (80035fc <W25qxx_Init+0x4a8>)
 8003582:	f002 fe98 	bl	80062b6 <HAL_UART_Transmit>

	snprintf(buf, 64, "Block Count: %lu\n", w25qxx.BlockCount);
 8003586:	4b1a      	ldr	r3, [pc, #104]	; (80035f0 <W25qxx_Init+0x49c>)
 8003588:	69db      	ldr	r3, [r3, #28]
 800358a:	4a21      	ldr	r2, [pc, #132]	; (8003610 <W25qxx_Init+0x4bc>)
 800358c:	2140      	movs	r1, #64	; 0x40
 800358e:	481a      	ldr	r0, [pc, #104]	; (80035f8 <W25qxx_Init+0x4a4>)
 8003590:	f008 fa8c 	bl	800baac <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 8003594:	4818      	ldr	r0, [pc, #96]	; (80035f8 <W25qxx_Init+0x4a4>)
 8003596:	f7fc fe3b 	bl	8000210 <strlen>
 800359a:	4603      	mov	r3, r0
 800359c:	b29a      	uxth	r2, r3
 800359e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035a2:	4915      	ldr	r1, [pc, #84]	; (80035f8 <W25qxx_Init+0x4a4>)
 80035a4:	4815      	ldr	r0, [pc, #84]	; (80035fc <W25qxx_Init+0x4a8>)
 80035a6:	f002 fe86 	bl	80062b6 <HAL_UART_Transmit>

	snprintf(buf, 64, "Capacity: %lu KBytes\n", w25qxx.CapacityInKiloByte);
 80035aa:	4b11      	ldr	r3, [pc, #68]	; (80035f0 <W25qxx_Init+0x49c>)
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	4a19      	ldr	r2, [pc, #100]	; (8003614 <W25qxx_Init+0x4c0>)
 80035b0:	2140      	movs	r1, #64	; 0x40
 80035b2:	4811      	ldr	r0, [pc, #68]	; (80035f8 <W25qxx_Init+0x4a4>)
 80035b4:	f008 fa7a 	bl	800baac <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 80035b8:	480f      	ldr	r0, [pc, #60]	; (80035f8 <W25qxx_Init+0x4a4>)
 80035ba:	f7fc fe29 	bl	8000210 <strlen>
 80035be:	4603      	mov	r3, r0
 80035c0:	b29a      	uxth	r2, r3
 80035c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035c6:	490c      	ldr	r1, [pc, #48]	; (80035f8 <W25qxx_Init+0x4a4>)
 80035c8:	480c      	ldr	r0, [pc, #48]	; (80035fc <W25qxx_Init+0x4a8>)
 80035ca:	f002 fe74 	bl	80062b6 <HAL_UART_Transmit>

	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Init Done\n", 10, 1000);
 80035ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035d2:	220a      	movs	r2, #10
 80035d4:	4910      	ldr	r1, [pc, #64]	; (8003618 <W25qxx_Init+0x4c4>)
 80035d6:	4809      	ldr	r0, [pc, #36]	; (80035fc <W25qxx_Init+0x4a8>)
 80035d8:	f002 fe6d 	bl	80062b6 <HAL_UART_Transmit>
	#endif

	w25qxx.Lock = 0;
 80035dc:	4b04      	ldr	r3, [pc, #16]	; (80035f0 <W25qxx_Init+0x49c>)
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return 1;
 80035e4:	2301      	movs	r3, #1
}	
 80035e6:	4618      	mov	r0, r3
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	200006c4 	.word	0x200006c4
 80035f4:	0800d4c8 	.word	0x0800d4c8
 80035f8:	20000684 	.word	0x20000684
 80035fc:	200001a8 	.word	0x200001a8
 8003600:	0800d4e0 	.word	0x0800d4e0
 8003604:	0800d4f4 	.word	0x0800d4f4
 8003608:	0800d50c 	.word	0x0800d50c
 800360c:	0800d520 	.word	0x0800d520
 8003610:	0800d538 	.word	0x0800d538
 8003614:	0800d54c 	.word	0x0800d54c
 8003618:	0800d564 	.word	0x0800d564

0800361c <W25qxx_EraseSector>:
	w25qxx.Lock = 0;
}

//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
	while(w25qxx.Lock == 1)
 8003624:	e002      	b.n	800362c <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 8003626:	2001      	movs	r0, #1
 8003628:	f000 f93c 	bl	80038a4 <HAL_Delay>
	while(w25qxx.Lock == 1)
 800362c:	4b24      	ldr	r3, [pc, #144]	; (80036c0 <W25qxx_EraseSector+0xa4>)
 800362e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003632:	2b01      	cmp	r3, #1
 8003634:	d0f7      	beq.n	8003626 <W25qxx_EraseSector+0xa>

	w25qxx.Lock = 1;
 8003636:	4b22      	ldr	r3, [pc, #136]	; (80036c0 <W25qxx_EraseSector+0xa4>)
 8003638:	2201      	movs	r2, #1
 800363a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	W25qxx_WaitForWriteEnd();
 800363e:	f7ff fd5d 	bl	80030fc <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 8003642:	4b1f      	ldr	r3, [pc, #124]	; (80036c0 <W25qxx_EraseSector+0xa4>)
 8003644:	691a      	ldr	r2, [r3, #16]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	fb02 f303 	mul.w	r3, r2, r3
 800364c:	607b      	str	r3, [r7, #4]

	W25qxx_WriteEnable();
 800364e:	f7ff fd3d 	bl	80030cc <W25qxx_WriteEnable>

	W25QFLASH_CS_SELECT;
 8003652:	2200      	movs	r2, #0
 8003654:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003658:	481a      	ldr	r0, [pc, #104]	; (80036c4 <W25qxx_EraseSector+0xa8>)
 800365a:	f000 fff3 	bl	8004644 <HAL_GPIO_WritePin>

	W25qxx_Spi(W25_SECTOR_ERASE);
 800365e:	2020      	movs	r0, #32
 8003660:	f7ff fce6 	bl	8003030 <W25qxx_Spi>

	if(w25qxx.ID >= W25Q256)
 8003664:	4b16      	ldr	r3, [pc, #88]	; (80036c0 <W25qxx_EraseSector+0xa4>)
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	2b08      	cmp	r3, #8
 800366a:	d905      	bls.n	8003678 <W25qxx_EraseSector+0x5c>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	0e1b      	lsrs	r3, r3, #24
 8003670:	b2db      	uxtb	r3, r3
 8003672:	4618      	mov	r0, r3
 8003674:	f7ff fcdc 	bl	8003030 <W25qxx_Spi>

	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	0c1b      	lsrs	r3, r3, #16
 800367c:	b2db      	uxtb	r3, r3
 800367e:	4618      	mov	r0, r3
 8003680:	f7ff fcd6 	bl	8003030 <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	0a1b      	lsrs	r3, r3, #8
 8003688:	b2db      	uxtb	r3, r3
 800368a:	4618      	mov	r0, r3
 800368c:	f7ff fcd0 	bl	8003030 <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	b2db      	uxtb	r3, r3
 8003694:	4618      	mov	r0, r3
 8003696:	f7ff fccb 	bl	8003030 <W25qxx_Spi>

	W25QFLASH_CS_UNSELECT;
 800369a:	2201      	movs	r2, #1
 800369c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80036a0:	4808      	ldr	r0, [pc, #32]	; (80036c4 <W25qxx_EraseSector+0xa8>)
 80036a2:	f000 ffcf 	bl	8004644 <HAL_GPIO_WritePin>

	W25qxx_WaitForWriteEnd();
 80036a6:	f7ff fd29 	bl	80030fc <W25qxx_WaitForWriteEnd>

	W25qxx_Delay(1);
 80036aa:	2001      	movs	r0, #1
 80036ac:	f000 f8fa 	bl	80038a4 <HAL_Delay>
	w25qxx.Lock = 0;
 80036b0:	4b03      	ldr	r3, [pc, #12]	; (80036c0 <W25qxx_EraseSector+0xa4>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80036b8:	bf00      	nop
 80036ba:	3708      	adds	r7, #8
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	200006c4 	.word	0x200006c4
 80036c4:	40020400 	.word	0x40020400

080036c8 <W25qxx_WritePage>:
	w25qxx.Lock = 0;
}

//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
 80036d4:	603b      	str	r3, [r7, #0]
	while(w25qxx.Lock == 1)
 80036d6:	e002      	b.n	80036de <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 80036d8:	2001      	movs	r0, #1
 80036da:	f000 f8e3 	bl	80038a4 <HAL_Delay>
	while(w25qxx.Lock == 1)
 80036de:	4b38      	ldr	r3, [pc, #224]	; (80037c0 <W25qxx_WritePage+0xf8>)
 80036e0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d0f7      	beq.n	80036d8 <W25qxx_WritePage+0x10>

	w25qxx.Lock = 1;
 80036e8:	4b35      	ldr	r3, [pc, #212]	; (80037c0 <W25qxx_WritePage+0xf8>)
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	if(((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 80036f0:	683a      	ldr	r2, [r7, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4413      	add	r3, r2
 80036f6:	4a32      	ldr	r2, [pc, #200]	; (80037c0 <W25qxx_WritePage+0xf8>)
 80036f8:	8952      	ldrh	r2, [r2, #10]
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d802      	bhi.n	8003704 <W25qxx_WritePage+0x3c>
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d105      	bne.n	8003710 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8003704:	4b2e      	ldr	r3, [pc, #184]	; (80037c0 <W25qxx_WritePage+0xf8>)
 8003706:	895b      	ldrh	r3, [r3, #10]
 8003708:	461a      	mov	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	603b      	str	r3, [r7, #0]

	if((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	4413      	add	r3, r2
 8003716:	4a2a      	ldr	r2, [pc, #168]	; (80037c0 <W25qxx_WritePage+0xf8>)
 8003718:	8952      	ldrh	r2, [r2, #10]
 800371a:	4293      	cmp	r3, r2
 800371c:	d905      	bls.n	800372a <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800371e:	4b28      	ldr	r3, [pc, #160]	; (80037c0 <W25qxx_WritePage+0xf8>)
 8003720:	895b      	ldrh	r3, [r3, #10]
 8003722:	461a      	mov	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	603b      	str	r3, [r7, #0]


	W25qxx_WaitForWriteEnd();
 800372a:	f7ff fce7 	bl	80030fc <W25qxx_WaitForWriteEnd>

	W25qxx_WriteEnable();
 800372e:	f7ff fccd 	bl	80030cc <W25qxx_WriteEnable>

	W25QFLASH_CS_SELECT;
 8003732:	2200      	movs	r2, #0
 8003734:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003738:	4822      	ldr	r0, [pc, #136]	; (80037c4 <W25qxx_WritePage+0xfc>)
 800373a:	f000 ff83 	bl	8004644 <HAL_GPIO_WritePin>

	W25qxx_Spi(W25_PAGE_PROGRAMM);
 800373e:	2002      	movs	r0, #2
 8003740:	f7ff fc76 	bl	8003030 <W25qxx_Spi>

	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8003744:	4b1e      	ldr	r3, [pc, #120]	; (80037c0 <W25qxx_WritePage+0xf8>)
 8003746:	895b      	ldrh	r3, [r3, #10]
 8003748:	461a      	mov	r2, r3
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	fb02 f303 	mul.w	r3, r2, r3
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	4413      	add	r3, r2
 8003754:	60bb      	str	r3, [r7, #8]

	if(w25qxx.ID >= W25Q256)
 8003756:	4b1a      	ldr	r3, [pc, #104]	; (80037c0 <W25qxx_WritePage+0xf8>)
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	2b08      	cmp	r3, #8
 800375c:	d905      	bls.n	800376a <W25qxx_WritePage+0xa2>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	0e1b      	lsrs	r3, r3, #24
 8003762:	b2db      	uxtb	r3, r3
 8003764:	4618      	mov	r0, r3
 8003766:	f7ff fc63 	bl	8003030 <W25qxx_Spi>

	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	0c1b      	lsrs	r3, r3, #16
 800376e:	b2db      	uxtb	r3, r3
 8003770:	4618      	mov	r0, r3
 8003772:	f7ff fc5d 	bl	8003030 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	0a1b      	lsrs	r3, r3, #8
 800377a:	b2db      	uxtb	r3, r3
 800377c:	4618      	mov	r0, r3
 800377e:	f7ff fc57 	bl	8003030 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	b2db      	uxtb	r3, r3
 8003786:	4618      	mov	r0, r3
 8003788:	f7ff fc52 	bl	8003030 <W25qxx_Spi>

	HAL_SPI_Transmit(W25QXX_SPI_PTR, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	b29a      	uxth	r2, r3
 8003790:	2364      	movs	r3, #100	; 0x64
 8003792:	68f9      	ldr	r1, [r7, #12]
 8003794:	480c      	ldr	r0, [pc, #48]	; (80037c8 <W25qxx_WritePage+0x100>)
 8003796:	f001 feea 	bl	800556e <HAL_SPI_Transmit>

	W25QFLASH_CS_UNSELECT;
 800379a:	2201      	movs	r2, #1
 800379c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80037a0:	4808      	ldr	r0, [pc, #32]	; (80037c4 <W25qxx_WritePage+0xfc>)
 80037a2:	f000 ff4f 	bl	8004644 <HAL_GPIO_WritePin>

	W25qxx_WaitForWriteEnd();
 80037a6:	f7ff fca9 	bl	80030fc <W25qxx_WaitForWriteEnd>

	W25qxx_Delay(1);
 80037aa:	2001      	movs	r0, #1
 80037ac:	f000 f87a 	bl	80038a4 <HAL_Delay>
	w25qxx.Lock = 0;
 80037b0:	4b03      	ldr	r3, [pc, #12]	; (80037c0 <W25qxx_WritePage+0xf8>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80037b8:	bf00      	nop
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	200006c4 	.word	0x200006c4
 80037c4:	40020400 	.word	0x40020400
 80037c8:	2000010c 	.word	0x2000010c

080037cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80037cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003804 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80037d0:	480d      	ldr	r0, [pc, #52]	; (8003808 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80037d2:	490e      	ldr	r1, [pc, #56]	; (800380c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80037d4:	4a0e      	ldr	r2, [pc, #56]	; (8003810 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80037d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037d8:	e002      	b.n	80037e0 <LoopCopyDataInit>

080037da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037de:	3304      	adds	r3, #4

080037e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037e4:	d3f9      	bcc.n	80037da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037e6:	4a0b      	ldr	r2, [pc, #44]	; (8003814 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80037e8:	4c0b      	ldr	r4, [pc, #44]	; (8003818 <LoopFillZerobss+0x26>)
  movs r3, #0
 80037ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037ec:	e001      	b.n	80037f2 <LoopFillZerobss>

080037ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037f0:	3204      	adds	r2, #4

080037f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037f4:	d3fb      	bcc.n	80037ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80037f6:	f7ff fc09 	bl	800300c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037fa:	f008 f91d 	bl	800ba38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037fe:	f7fc fee1 	bl	80005c4 <main>
  bx  lr    
 8003802:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003804:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003808:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800380c:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8003810:	0800d940 	.word	0x0800d940
  ldr r2, =_sbss
 8003814:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8003818:	20005050 	.word	0x20005050

0800381c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800381c:	e7fe      	b.n	800381c <ADC_IRQHandler>
	...

08003820 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003824:	4b0e      	ldr	r3, [pc, #56]	; (8003860 <HAL_Init+0x40>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a0d      	ldr	r2, [pc, #52]	; (8003860 <HAL_Init+0x40>)
 800382a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800382e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003830:	4b0b      	ldr	r3, [pc, #44]	; (8003860 <HAL_Init+0x40>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a0a      	ldr	r2, [pc, #40]	; (8003860 <HAL_Init+0x40>)
 8003836:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800383a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800383c:	4b08      	ldr	r3, [pc, #32]	; (8003860 <HAL_Init+0x40>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a07      	ldr	r2, [pc, #28]	; (8003860 <HAL_Init+0x40>)
 8003842:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003846:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003848:	2003      	movs	r0, #3
 800384a:	f000 f913 	bl	8003a74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800384e:	2000      	movs	r0, #0
 8003850:	f7ff faee 	bl	8002e30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003854:	f7ff f8da 	bl	8002a0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	40023c00 	.word	0x40023c00

08003864 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003868:	4b06      	ldr	r3, [pc, #24]	; (8003884 <HAL_IncTick+0x20>)
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	461a      	mov	r2, r3
 800386e:	4b06      	ldr	r3, [pc, #24]	; (8003888 <HAL_IncTick+0x24>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4413      	add	r3, r2
 8003874:	4a04      	ldr	r2, [pc, #16]	; (8003888 <HAL_IncTick+0x24>)
 8003876:	6013      	str	r3, [r2, #0]
}
 8003878:	bf00      	nop
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	20000030 	.word	0x20000030
 8003888:	200006ec 	.word	0x200006ec

0800388c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
  return uwTick;
 8003890:	4b03      	ldr	r3, [pc, #12]	; (80038a0 <HAL_GetTick+0x14>)
 8003892:	681b      	ldr	r3, [r3, #0]
}
 8003894:	4618      	mov	r0, r3
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	200006ec 	.word	0x200006ec

080038a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038ac:	f7ff ffee 	bl	800388c <HAL_GetTick>
 80038b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038bc:	d005      	beq.n	80038ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038be:	4b0a      	ldr	r3, [pc, #40]	; (80038e8 <HAL_Delay+0x44>)
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	461a      	mov	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	4413      	add	r3, r2
 80038c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80038ca:	bf00      	nop
 80038cc:	f7ff ffde 	bl	800388c <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d8f7      	bhi.n	80038cc <HAL_Delay+0x28>
  {
  }
}
 80038dc:	bf00      	nop
 80038de:	bf00      	nop
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	20000030 	.word	0x20000030

080038ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f003 0307 	and.w	r3, r3, #7
 80038fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038fc:	4b0c      	ldr	r3, [pc, #48]	; (8003930 <__NVIC_SetPriorityGrouping+0x44>)
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003902:	68ba      	ldr	r2, [r7, #8]
 8003904:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003908:	4013      	ands	r3, r2
 800390a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003914:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800391c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800391e:	4a04      	ldr	r2, [pc, #16]	; (8003930 <__NVIC_SetPriorityGrouping+0x44>)
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	60d3      	str	r3, [r2, #12]
}
 8003924:	bf00      	nop
 8003926:	3714      	adds	r7, #20
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr
 8003930:	e000ed00 	.word	0xe000ed00

08003934 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003934:	b480      	push	{r7}
 8003936:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003938:	4b04      	ldr	r3, [pc, #16]	; (800394c <__NVIC_GetPriorityGrouping+0x18>)
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	0a1b      	lsrs	r3, r3, #8
 800393e:	f003 0307 	and.w	r3, r3, #7
}
 8003942:	4618      	mov	r0, r3
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr
 800394c:	e000ed00 	.word	0xe000ed00

08003950 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	4603      	mov	r3, r0
 8003958:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800395a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800395e:	2b00      	cmp	r3, #0
 8003960:	db0b      	blt.n	800397a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003962:	79fb      	ldrb	r3, [r7, #7]
 8003964:	f003 021f 	and.w	r2, r3, #31
 8003968:	4907      	ldr	r1, [pc, #28]	; (8003988 <__NVIC_EnableIRQ+0x38>)
 800396a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800396e:	095b      	lsrs	r3, r3, #5
 8003970:	2001      	movs	r0, #1
 8003972:	fa00 f202 	lsl.w	r2, r0, r2
 8003976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800397a:	bf00      	nop
 800397c:	370c      	adds	r7, #12
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	e000e100 	.word	0xe000e100

0800398c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	4603      	mov	r3, r0
 8003994:	6039      	str	r1, [r7, #0]
 8003996:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800399c:	2b00      	cmp	r3, #0
 800399e:	db0a      	blt.n	80039b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	b2da      	uxtb	r2, r3
 80039a4:	490c      	ldr	r1, [pc, #48]	; (80039d8 <__NVIC_SetPriority+0x4c>)
 80039a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039aa:	0112      	lsls	r2, r2, #4
 80039ac:	b2d2      	uxtb	r2, r2
 80039ae:	440b      	add	r3, r1
 80039b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039b4:	e00a      	b.n	80039cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	b2da      	uxtb	r2, r3
 80039ba:	4908      	ldr	r1, [pc, #32]	; (80039dc <__NVIC_SetPriority+0x50>)
 80039bc:	79fb      	ldrb	r3, [r7, #7]
 80039be:	f003 030f 	and.w	r3, r3, #15
 80039c2:	3b04      	subs	r3, #4
 80039c4:	0112      	lsls	r2, r2, #4
 80039c6:	b2d2      	uxtb	r2, r2
 80039c8:	440b      	add	r3, r1
 80039ca:	761a      	strb	r2, [r3, #24]
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr
 80039d8:	e000e100 	.word	0xe000e100
 80039dc:	e000ed00 	.word	0xe000ed00

080039e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b089      	sub	sp, #36	; 0x24
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f003 0307 	and.w	r3, r3, #7
 80039f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	f1c3 0307 	rsb	r3, r3, #7
 80039fa:	2b04      	cmp	r3, #4
 80039fc:	bf28      	it	cs
 80039fe:	2304      	movcs	r3, #4
 8003a00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	3304      	adds	r3, #4
 8003a06:	2b06      	cmp	r3, #6
 8003a08:	d902      	bls.n	8003a10 <NVIC_EncodePriority+0x30>
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	3b03      	subs	r3, #3
 8003a0e:	e000      	b.n	8003a12 <NVIC_EncodePriority+0x32>
 8003a10:	2300      	movs	r3, #0
 8003a12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a14:	f04f 32ff 	mov.w	r2, #4294967295
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1e:	43da      	mvns	r2, r3
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	401a      	ands	r2, r3
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a28:	f04f 31ff 	mov.w	r1, #4294967295
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a32:	43d9      	mvns	r1, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a38:	4313      	orrs	r3, r2
         );
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3724      	adds	r7, #36	; 0x24
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
	...

08003a48 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003a4c:	f3bf 8f4f 	dsb	sy
}
 8003a50:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003a52:	4b06      	ldr	r3, [pc, #24]	; (8003a6c <__NVIC_SystemReset+0x24>)
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003a5a:	4904      	ldr	r1, [pc, #16]	; (8003a6c <__NVIC_SystemReset+0x24>)
 8003a5c:	4b04      	ldr	r3, [pc, #16]	; (8003a70 <__NVIC_SystemReset+0x28>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003a62:	f3bf 8f4f 	dsb	sy
}
 8003a66:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003a68:	bf00      	nop
 8003a6a:	e7fd      	b.n	8003a68 <__NVIC_SystemReset+0x20>
 8003a6c:	e000ed00 	.word	0xe000ed00
 8003a70:	05fa0004 	.word	0x05fa0004

08003a74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f7ff ff35 	bl	80038ec <__NVIC_SetPriorityGrouping>
}
 8003a82:	bf00      	nop
 8003a84:	3708      	adds	r7, #8
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b086      	sub	sp, #24
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	4603      	mov	r3, r0
 8003a92:	60b9      	str	r1, [r7, #8]
 8003a94:	607a      	str	r2, [r7, #4]
 8003a96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a9c:	f7ff ff4a 	bl	8003934 <__NVIC_GetPriorityGrouping>
 8003aa0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	68b9      	ldr	r1, [r7, #8]
 8003aa6:	6978      	ldr	r0, [r7, #20]
 8003aa8:	f7ff ff9a 	bl	80039e0 <NVIC_EncodePriority>
 8003aac:	4602      	mov	r2, r0
 8003aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ab2:	4611      	mov	r1, r2
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7ff ff69 	bl	800398c <__NVIC_SetPriority>
}
 8003aba:	bf00      	nop
 8003abc:	3718      	adds	r7, #24
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b082      	sub	sp, #8
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	4603      	mov	r3, r0
 8003aca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7ff ff3d 	bl	8003950 <__NVIC_EnableIRQ>
}
 8003ad6:	bf00      	nop
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8003ae2:	f7ff ffb1 	bl	8003a48 <__NVIC_SystemReset>
	...

08003ae8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b086      	sub	sp, #24
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003af0:	2300      	movs	r3, #0
 8003af2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003af4:	f7ff feca 	bl	800388c <HAL_GetTick>
 8003af8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d101      	bne.n	8003b04 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e099      	b.n	8003c38 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2202      	movs	r2, #2
 8003b08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f022 0201 	bic.w	r2, r2, #1
 8003b22:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b24:	e00f      	b.n	8003b46 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b26:	f7ff feb1 	bl	800388c <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	2b05      	cmp	r3, #5
 8003b32:	d908      	bls.n	8003b46 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2220      	movs	r2, #32
 8003b38:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2203      	movs	r2, #3
 8003b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e078      	b.n	8003c38 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0301 	and.w	r3, r3, #1
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d1e8      	bne.n	8003b26 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	4b38      	ldr	r3, [pc, #224]	; (8003c40 <HAL_DMA_Init+0x158>)
 8003b60:	4013      	ands	r3, r2
 8003b62:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685a      	ldr	r2, [r3, #4]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b72:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	699b      	ldr	r3, [r3, #24]
 8003b84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a1b      	ldr	r3, [r3, #32]
 8003b90:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9c:	2b04      	cmp	r3, #4
 8003b9e:	d107      	bne.n	8003bb0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	697a      	ldr	r2, [r7, #20]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	f023 0307 	bic.w	r3, r3, #7
 8003bc6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	d117      	bne.n	8003c0a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00e      	beq.n	8003c0a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 fb01 	bl	80041f4 <DMA_CheckFifoParam>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d008      	beq.n	8003c0a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2240      	movs	r2, #64	; 0x40
 8003bfc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003c06:	2301      	movs	r3, #1
 8003c08:	e016      	b.n	8003c38 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 fab8 	bl	8004188 <DMA_CalcBaseAndBitshift>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c20:	223f      	movs	r2, #63	; 0x3f
 8003c22:	409a      	lsls	r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3718      	adds	r7, #24
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	f010803f 	.word	0xf010803f

08003c44 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b086      	sub	sp, #24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
 8003c50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c52:	2300      	movs	r3, #0
 8003c54:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c5a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d101      	bne.n	8003c6a <HAL_DMA_Start_IT+0x26>
 8003c66:	2302      	movs	r3, #2
 8003c68:	e040      	b.n	8003cec <HAL_DMA_Start_IT+0xa8>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d12f      	bne.n	8003cde <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2202      	movs	r2, #2
 8003c82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	68b9      	ldr	r1, [r7, #8]
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f000 fa4a 	bl	800412c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c9c:	223f      	movs	r2, #63	; 0x3f
 8003c9e:	409a      	lsls	r2, r3
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f042 0216 	orr.w	r2, r2, #22
 8003cb2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d007      	beq.n	8003ccc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f042 0208 	orr.w	r2, r2, #8
 8003cca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f042 0201 	orr.w	r2, r2, #1
 8003cda:	601a      	str	r2, [r3, #0]
 8003cdc:	e005      	b.n	8003cea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003cea:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3718      	adds	r7, #24
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d00:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003d02:	f7ff fdc3 	bl	800388c <HAL_GetTick>
 8003d06:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d008      	beq.n	8003d26 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2280      	movs	r2, #128	; 0x80
 8003d18:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e052      	b.n	8003dcc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f022 0216 	bic.w	r2, r2, #22
 8003d34:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	695a      	ldr	r2, [r3, #20]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d44:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d103      	bne.n	8003d56 <HAL_DMA_Abort+0x62>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d007      	beq.n	8003d66 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f022 0208 	bic.w	r2, r2, #8
 8003d64:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f022 0201 	bic.w	r2, r2, #1
 8003d74:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d76:	e013      	b.n	8003da0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d78:	f7ff fd88 	bl	800388c <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b05      	cmp	r3, #5
 8003d84:	d90c      	bls.n	8003da0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2220      	movs	r2, #32
 8003d8a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2203      	movs	r2, #3
 8003d90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e015      	b.n	8003dcc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1e4      	bne.n	8003d78 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db2:	223f      	movs	r2, #63	; 0x3f
 8003db4:	409a      	lsls	r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003dca:	2300      	movs	r3, #0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3710      	adds	r7, #16
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d004      	beq.n	8003df2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2280      	movs	r2, #128	; 0x80
 8003dec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e00c      	b.n	8003e0c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2205      	movs	r2, #5
 8003df6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f022 0201 	bic.w	r2, r2, #1
 8003e08:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b086      	sub	sp, #24
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003e20:	2300      	movs	r3, #0
 8003e22:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e24:	4b8e      	ldr	r3, [pc, #568]	; (8004060 <HAL_DMA_IRQHandler+0x248>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a8e      	ldr	r2, [pc, #568]	; (8004064 <HAL_DMA_IRQHandler+0x24c>)
 8003e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e2e:	0a9b      	lsrs	r3, r3, #10
 8003e30:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e36:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e42:	2208      	movs	r2, #8
 8003e44:	409a      	lsls	r2, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	4013      	ands	r3, r2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d01a      	beq.n	8003e84 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0304 	and.w	r3, r3, #4
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d013      	beq.n	8003e84 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f022 0204 	bic.w	r2, r2, #4
 8003e6a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e70:	2208      	movs	r2, #8
 8003e72:	409a      	lsls	r2, r3
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e7c:	f043 0201 	orr.w	r2, r3, #1
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e88:	2201      	movs	r2, #1
 8003e8a:	409a      	lsls	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	4013      	ands	r3, r2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d012      	beq.n	8003eba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00b      	beq.n	8003eba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	409a      	lsls	r2, r3
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb2:	f043 0202 	orr.w	r2, r3, #2
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ebe:	2204      	movs	r2, #4
 8003ec0:	409a      	lsls	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d012      	beq.n	8003ef0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0302 	and.w	r3, r3, #2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00b      	beq.n	8003ef0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003edc:	2204      	movs	r2, #4
 8003ede:	409a      	lsls	r2, r3
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee8:	f043 0204 	orr.w	r2, r3, #4
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ef4:	2210      	movs	r2, #16
 8003ef6:	409a      	lsls	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	4013      	ands	r3, r2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d043      	beq.n	8003f88 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0308 	and.w	r3, r3, #8
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d03c      	beq.n	8003f88 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f12:	2210      	movs	r2, #16
 8003f14:	409a      	lsls	r2, r3
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d018      	beq.n	8003f5a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d108      	bne.n	8003f48 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d024      	beq.n	8003f88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	4798      	blx	r3
 8003f46:	e01f      	b.n	8003f88 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d01b      	beq.n	8003f88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	4798      	blx	r3
 8003f58:	e016      	b.n	8003f88 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d107      	bne.n	8003f78 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 0208 	bic.w	r2, r2, #8
 8003f76:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d003      	beq.n	8003f88 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f8c:	2220      	movs	r2, #32
 8003f8e:	409a      	lsls	r2, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	4013      	ands	r3, r2
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f000 808f 	beq.w	80040b8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0310 	and.w	r3, r3, #16
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f000 8087 	beq.w	80040b8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fae:	2220      	movs	r2, #32
 8003fb0:	409a      	lsls	r2, r3
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b05      	cmp	r3, #5
 8003fc0:	d136      	bne.n	8004030 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f022 0216 	bic.w	r2, r2, #22
 8003fd0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	695a      	ldr	r2, [r3, #20]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fe0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d103      	bne.n	8003ff2 <HAL_DMA_IRQHandler+0x1da>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d007      	beq.n	8004002 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f022 0208 	bic.w	r2, r2, #8
 8004000:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004006:	223f      	movs	r2, #63	; 0x3f
 8004008:	409a      	lsls	r2, r3
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004022:	2b00      	cmp	r3, #0
 8004024:	d07e      	beq.n	8004124 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	4798      	blx	r3
        }
        return;
 800402e:	e079      	b.n	8004124 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d01d      	beq.n	800407a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d10d      	bne.n	8004068 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004050:	2b00      	cmp	r3, #0
 8004052:	d031      	beq.n	80040b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	4798      	blx	r3
 800405c:	e02c      	b.n	80040b8 <HAL_DMA_IRQHandler+0x2a0>
 800405e:	bf00      	nop
 8004060:	20000028 	.word	0x20000028
 8004064:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800406c:	2b00      	cmp	r3, #0
 800406e:	d023      	beq.n	80040b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	4798      	blx	r3
 8004078:	e01e      	b.n	80040b8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004084:	2b00      	cmp	r3, #0
 8004086:	d10f      	bne.n	80040a8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f022 0210 	bic.w	r2, r2, #16
 8004096:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d003      	beq.n	80040b8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d032      	beq.n	8004126 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d022      	beq.n	8004112 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2205      	movs	r2, #5
 80040d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f022 0201 	bic.w	r2, r2, #1
 80040e2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	3301      	adds	r3, #1
 80040e8:	60bb      	str	r3, [r7, #8]
 80040ea:	697a      	ldr	r2, [r7, #20]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d307      	bcc.n	8004100 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1f2      	bne.n	80040e4 <HAL_DMA_IRQHandler+0x2cc>
 80040fe:	e000      	b.n	8004102 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004100:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2201      	movs	r2, #1
 8004106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004116:	2b00      	cmp	r3, #0
 8004118:	d005      	beq.n	8004126 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	4798      	blx	r3
 8004122:	e000      	b.n	8004126 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004124:	bf00      	nop
    }
  }
}
 8004126:	3718      	adds	r7, #24
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]
 8004138:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004148:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	683a      	ldr	r2, [r7, #0]
 8004150:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	2b40      	cmp	r3, #64	; 0x40
 8004158:	d108      	bne.n	800416c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68ba      	ldr	r2, [r7, #8]
 8004168:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800416a:	e007      	b.n	800417c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68ba      	ldr	r2, [r7, #8]
 8004172:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	60da      	str	r2, [r3, #12]
}
 800417c:	bf00      	nop
 800417e:	3714      	adds	r7, #20
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	b2db      	uxtb	r3, r3
 8004196:	3b10      	subs	r3, #16
 8004198:	4a14      	ldr	r2, [pc, #80]	; (80041ec <DMA_CalcBaseAndBitshift+0x64>)
 800419a:	fba2 2303 	umull	r2, r3, r2, r3
 800419e:	091b      	lsrs	r3, r3, #4
 80041a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80041a2:	4a13      	ldr	r2, [pc, #76]	; (80041f0 <DMA_CalcBaseAndBitshift+0x68>)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	4413      	add	r3, r2
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	461a      	mov	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2b03      	cmp	r3, #3
 80041b4:	d909      	bls.n	80041ca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80041be:	f023 0303 	bic.w	r3, r3, #3
 80041c2:	1d1a      	adds	r2, r3, #4
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	659a      	str	r2, [r3, #88]	; 0x58
 80041c8:	e007      	b.n	80041da <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80041d2:	f023 0303 	bic.w	r3, r3, #3
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3714      	adds	r7, #20
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	aaaaaaab 	.word	0xaaaaaaab
 80041f0:	0800d778 	.word	0x0800d778

080041f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041fc:	2300      	movs	r3, #0
 80041fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004204:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d11f      	bne.n	800424e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	2b03      	cmp	r3, #3
 8004212:	d856      	bhi.n	80042c2 <DMA_CheckFifoParam+0xce>
 8004214:	a201      	add	r2, pc, #4	; (adr r2, 800421c <DMA_CheckFifoParam+0x28>)
 8004216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800421a:	bf00      	nop
 800421c:	0800422d 	.word	0x0800422d
 8004220:	0800423f 	.word	0x0800423f
 8004224:	0800422d 	.word	0x0800422d
 8004228:	080042c3 	.word	0x080042c3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004230:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d046      	beq.n	80042c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800423c:	e043      	b.n	80042c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004242:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004246:	d140      	bne.n	80042ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800424c:	e03d      	b.n	80042ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004256:	d121      	bne.n	800429c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	2b03      	cmp	r3, #3
 800425c:	d837      	bhi.n	80042ce <DMA_CheckFifoParam+0xda>
 800425e:	a201      	add	r2, pc, #4	; (adr r2, 8004264 <DMA_CheckFifoParam+0x70>)
 8004260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004264:	08004275 	.word	0x08004275
 8004268:	0800427b 	.word	0x0800427b
 800426c:	08004275 	.word	0x08004275
 8004270:	0800428d 	.word	0x0800428d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	73fb      	strb	r3, [r7, #15]
      break;
 8004278:	e030      	b.n	80042dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d025      	beq.n	80042d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800428a:	e022      	b.n	80042d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004290:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004294:	d11f      	bne.n	80042d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800429a:	e01c      	b.n	80042d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d903      	bls.n	80042aa <DMA_CheckFifoParam+0xb6>
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	2b03      	cmp	r3, #3
 80042a6:	d003      	beq.n	80042b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80042a8:	e018      	b.n	80042dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	73fb      	strb	r3, [r7, #15]
      break;
 80042ae:	e015      	b.n	80042dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d00e      	beq.n	80042da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	73fb      	strb	r3, [r7, #15]
      break;
 80042c0:	e00b      	b.n	80042da <DMA_CheckFifoParam+0xe6>
      break;
 80042c2:	bf00      	nop
 80042c4:	e00a      	b.n	80042dc <DMA_CheckFifoParam+0xe8>
      break;
 80042c6:	bf00      	nop
 80042c8:	e008      	b.n	80042dc <DMA_CheckFifoParam+0xe8>
      break;
 80042ca:	bf00      	nop
 80042cc:	e006      	b.n	80042dc <DMA_CheckFifoParam+0xe8>
      break;
 80042ce:	bf00      	nop
 80042d0:	e004      	b.n	80042dc <DMA_CheckFifoParam+0xe8>
      break;
 80042d2:	bf00      	nop
 80042d4:	e002      	b.n	80042dc <DMA_CheckFifoParam+0xe8>
      break;   
 80042d6:	bf00      	nop
 80042d8:	e000      	b.n	80042dc <DMA_CheckFifoParam+0xe8>
      break;
 80042da:	bf00      	nop
    }
  } 
  
  return status; 
 80042dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3714      	adds	r7, #20
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop

080042ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b089      	sub	sp, #36	; 0x24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80042f6:	2300      	movs	r3, #0
 80042f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80042fa:	2300      	movs	r3, #0
 80042fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80042fe:	2300      	movs	r3, #0
 8004300:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004302:	2300      	movs	r3, #0
 8004304:	61fb      	str	r3, [r7, #28]
 8004306:	e165      	b.n	80045d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004308:	2201      	movs	r2, #1
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	fa02 f303 	lsl.w	r3, r2, r3
 8004310:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	4013      	ands	r3, r2
 800431a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	429a      	cmp	r2, r3
 8004322:	f040 8154 	bne.w	80045ce <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f003 0303 	and.w	r3, r3, #3
 800432e:	2b01      	cmp	r3, #1
 8004330:	d005      	beq.n	800433e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800433a:	2b02      	cmp	r3, #2
 800433c:	d130      	bne.n	80043a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	005b      	lsls	r3, r3, #1
 8004348:	2203      	movs	r2, #3
 800434a:	fa02 f303 	lsl.w	r3, r2, r3
 800434e:	43db      	mvns	r3, r3
 8004350:	69ba      	ldr	r2, [r7, #24]
 8004352:	4013      	ands	r3, r2
 8004354:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	68da      	ldr	r2, [r3, #12]
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	005b      	lsls	r3, r3, #1
 800435e:	fa02 f303 	lsl.w	r3, r2, r3
 8004362:	69ba      	ldr	r2, [r7, #24]
 8004364:	4313      	orrs	r3, r2
 8004366:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	69ba      	ldr	r2, [r7, #24]
 800436c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004374:	2201      	movs	r2, #1
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	fa02 f303 	lsl.w	r3, r2, r3
 800437c:	43db      	mvns	r3, r3
 800437e:	69ba      	ldr	r2, [r7, #24]
 8004380:	4013      	ands	r3, r2
 8004382:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	091b      	lsrs	r3, r3, #4
 800438a:	f003 0201 	and.w	r2, r3, #1
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	fa02 f303 	lsl.w	r3, r2, r3
 8004394:	69ba      	ldr	r2, [r7, #24]
 8004396:	4313      	orrs	r3, r2
 8004398:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	69ba      	ldr	r2, [r7, #24]
 800439e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f003 0303 	and.w	r3, r3, #3
 80043a8:	2b03      	cmp	r3, #3
 80043aa:	d017      	beq.n	80043dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	2203      	movs	r2, #3
 80043b8:	fa02 f303 	lsl.w	r3, r2, r3
 80043bc:	43db      	mvns	r3, r3
 80043be:	69ba      	ldr	r2, [r7, #24]
 80043c0:	4013      	ands	r3, r2
 80043c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	689a      	ldr	r2, [r3, #8]
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	005b      	lsls	r3, r3, #1
 80043cc:	fa02 f303 	lsl.w	r3, r2, r3
 80043d0:	69ba      	ldr	r2, [r7, #24]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	69ba      	ldr	r2, [r7, #24]
 80043da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f003 0303 	and.w	r3, r3, #3
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d123      	bne.n	8004430 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	08da      	lsrs	r2, r3, #3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	3208      	adds	r2, #8
 80043f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	f003 0307 	and.w	r3, r3, #7
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	220f      	movs	r2, #15
 8004400:	fa02 f303 	lsl.w	r3, r2, r3
 8004404:	43db      	mvns	r3, r3
 8004406:	69ba      	ldr	r2, [r7, #24]
 8004408:	4013      	ands	r3, r2
 800440a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	691a      	ldr	r2, [r3, #16]
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	f003 0307 	and.w	r3, r3, #7
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	fa02 f303 	lsl.w	r3, r2, r3
 800441c:	69ba      	ldr	r2, [r7, #24]
 800441e:	4313      	orrs	r3, r2
 8004420:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	08da      	lsrs	r2, r3, #3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	3208      	adds	r2, #8
 800442a:	69b9      	ldr	r1, [r7, #24]
 800442c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	005b      	lsls	r3, r3, #1
 800443a:	2203      	movs	r2, #3
 800443c:	fa02 f303 	lsl.w	r3, r2, r3
 8004440:	43db      	mvns	r3, r3
 8004442:	69ba      	ldr	r2, [r7, #24]
 8004444:	4013      	ands	r3, r2
 8004446:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f003 0203 	and.w	r2, r3, #3
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	005b      	lsls	r3, r3, #1
 8004454:	fa02 f303 	lsl.w	r3, r2, r3
 8004458:	69ba      	ldr	r2, [r7, #24]
 800445a:	4313      	orrs	r3, r2
 800445c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800446c:	2b00      	cmp	r3, #0
 800446e:	f000 80ae 	beq.w	80045ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004472:	2300      	movs	r3, #0
 8004474:	60fb      	str	r3, [r7, #12]
 8004476:	4b5d      	ldr	r3, [pc, #372]	; (80045ec <HAL_GPIO_Init+0x300>)
 8004478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800447a:	4a5c      	ldr	r2, [pc, #368]	; (80045ec <HAL_GPIO_Init+0x300>)
 800447c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004480:	6453      	str	r3, [r2, #68]	; 0x44
 8004482:	4b5a      	ldr	r3, [pc, #360]	; (80045ec <HAL_GPIO_Init+0x300>)
 8004484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800448a:	60fb      	str	r3, [r7, #12]
 800448c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800448e:	4a58      	ldr	r2, [pc, #352]	; (80045f0 <HAL_GPIO_Init+0x304>)
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	089b      	lsrs	r3, r3, #2
 8004494:	3302      	adds	r3, #2
 8004496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800449a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	f003 0303 	and.w	r3, r3, #3
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	220f      	movs	r2, #15
 80044a6:	fa02 f303 	lsl.w	r3, r2, r3
 80044aa:	43db      	mvns	r3, r3
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	4013      	ands	r3, r2
 80044b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a4f      	ldr	r2, [pc, #316]	; (80045f4 <HAL_GPIO_Init+0x308>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d025      	beq.n	8004506 <HAL_GPIO_Init+0x21a>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a4e      	ldr	r2, [pc, #312]	; (80045f8 <HAL_GPIO_Init+0x30c>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d01f      	beq.n	8004502 <HAL_GPIO_Init+0x216>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a4d      	ldr	r2, [pc, #308]	; (80045fc <HAL_GPIO_Init+0x310>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d019      	beq.n	80044fe <HAL_GPIO_Init+0x212>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a4c      	ldr	r2, [pc, #304]	; (8004600 <HAL_GPIO_Init+0x314>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d013      	beq.n	80044fa <HAL_GPIO_Init+0x20e>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a4b      	ldr	r2, [pc, #300]	; (8004604 <HAL_GPIO_Init+0x318>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d00d      	beq.n	80044f6 <HAL_GPIO_Init+0x20a>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a4a      	ldr	r2, [pc, #296]	; (8004608 <HAL_GPIO_Init+0x31c>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d007      	beq.n	80044f2 <HAL_GPIO_Init+0x206>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a49      	ldr	r2, [pc, #292]	; (800460c <HAL_GPIO_Init+0x320>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d101      	bne.n	80044ee <HAL_GPIO_Init+0x202>
 80044ea:	2306      	movs	r3, #6
 80044ec:	e00c      	b.n	8004508 <HAL_GPIO_Init+0x21c>
 80044ee:	2307      	movs	r3, #7
 80044f0:	e00a      	b.n	8004508 <HAL_GPIO_Init+0x21c>
 80044f2:	2305      	movs	r3, #5
 80044f4:	e008      	b.n	8004508 <HAL_GPIO_Init+0x21c>
 80044f6:	2304      	movs	r3, #4
 80044f8:	e006      	b.n	8004508 <HAL_GPIO_Init+0x21c>
 80044fa:	2303      	movs	r3, #3
 80044fc:	e004      	b.n	8004508 <HAL_GPIO_Init+0x21c>
 80044fe:	2302      	movs	r3, #2
 8004500:	e002      	b.n	8004508 <HAL_GPIO_Init+0x21c>
 8004502:	2301      	movs	r3, #1
 8004504:	e000      	b.n	8004508 <HAL_GPIO_Init+0x21c>
 8004506:	2300      	movs	r3, #0
 8004508:	69fa      	ldr	r2, [r7, #28]
 800450a:	f002 0203 	and.w	r2, r2, #3
 800450e:	0092      	lsls	r2, r2, #2
 8004510:	4093      	lsls	r3, r2
 8004512:	69ba      	ldr	r2, [r7, #24]
 8004514:	4313      	orrs	r3, r2
 8004516:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004518:	4935      	ldr	r1, [pc, #212]	; (80045f0 <HAL_GPIO_Init+0x304>)
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	089b      	lsrs	r3, r3, #2
 800451e:	3302      	adds	r3, #2
 8004520:	69ba      	ldr	r2, [r7, #24]
 8004522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004526:	4b3a      	ldr	r3, [pc, #232]	; (8004610 <HAL_GPIO_Init+0x324>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	43db      	mvns	r3, r3
 8004530:	69ba      	ldr	r2, [r7, #24]
 8004532:	4013      	ands	r3, r2
 8004534:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d003      	beq.n	800454a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004542:	69ba      	ldr	r2, [r7, #24]
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	4313      	orrs	r3, r2
 8004548:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800454a:	4a31      	ldr	r2, [pc, #196]	; (8004610 <HAL_GPIO_Init+0x324>)
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004550:	4b2f      	ldr	r3, [pc, #188]	; (8004610 <HAL_GPIO_Init+0x324>)
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	43db      	mvns	r3, r3
 800455a:	69ba      	ldr	r2, [r7, #24]
 800455c:	4013      	ands	r3, r2
 800455e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d003      	beq.n	8004574 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800456c:	69ba      	ldr	r2, [r7, #24]
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	4313      	orrs	r3, r2
 8004572:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004574:	4a26      	ldr	r2, [pc, #152]	; (8004610 <HAL_GPIO_Init+0x324>)
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800457a:	4b25      	ldr	r3, [pc, #148]	; (8004610 <HAL_GPIO_Init+0x324>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	43db      	mvns	r3, r3
 8004584:	69ba      	ldr	r2, [r7, #24]
 8004586:	4013      	ands	r3, r2
 8004588:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d003      	beq.n	800459e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004596:	69ba      	ldr	r2, [r7, #24]
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	4313      	orrs	r3, r2
 800459c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800459e:	4a1c      	ldr	r2, [pc, #112]	; (8004610 <HAL_GPIO_Init+0x324>)
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80045a4:	4b1a      	ldr	r3, [pc, #104]	; (8004610 <HAL_GPIO_Init+0x324>)
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	43db      	mvns	r3, r3
 80045ae:	69ba      	ldr	r2, [r7, #24]
 80045b0:	4013      	ands	r3, r2
 80045b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d003      	beq.n	80045c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80045c8:	4a11      	ldr	r2, [pc, #68]	; (8004610 <HAL_GPIO_Init+0x324>)
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	3301      	adds	r3, #1
 80045d2:	61fb      	str	r3, [r7, #28]
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	2b0f      	cmp	r3, #15
 80045d8:	f67f ae96 	bls.w	8004308 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80045dc:	bf00      	nop
 80045de:	bf00      	nop
 80045e0:	3724      	adds	r7, #36	; 0x24
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	40023800 	.word	0x40023800
 80045f0:	40013800 	.word	0x40013800
 80045f4:	40020000 	.word	0x40020000
 80045f8:	40020400 	.word	0x40020400
 80045fc:	40020800 	.word	0x40020800
 8004600:	40020c00 	.word	0x40020c00
 8004604:	40021000 	.word	0x40021000
 8004608:	40021400 	.word	0x40021400
 800460c:	40021800 	.word	0x40021800
 8004610:	40013c00 	.word	0x40013c00

08004614 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	460b      	mov	r3, r1
 800461e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	691a      	ldr	r2, [r3, #16]
 8004624:	887b      	ldrh	r3, [r7, #2]
 8004626:	4013      	ands	r3, r2
 8004628:	2b00      	cmp	r3, #0
 800462a:	d002      	beq.n	8004632 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800462c:	2301      	movs	r3, #1
 800462e:	73fb      	strb	r3, [r7, #15]
 8004630:	e001      	b.n	8004636 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004632:	2300      	movs	r3, #0
 8004634:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004636:	7bfb      	ldrb	r3, [r7, #15]
}
 8004638:	4618      	mov	r0, r3
 800463a:	3714      	adds	r7, #20
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	460b      	mov	r3, r1
 800464e:	807b      	strh	r3, [r7, #2]
 8004650:	4613      	mov	r3, r2
 8004652:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004654:	787b      	ldrb	r3, [r7, #1]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d003      	beq.n	8004662 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800465a:	887a      	ldrh	r2, [r7, #2]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004660:	e003      	b.n	800466a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004662:	887b      	ldrh	r3, [r7, #2]
 8004664:	041a      	lsls	r2, r3, #16
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	619a      	str	r2, [r3, #24]
}
 800466a:	bf00      	nop
 800466c:	370c      	adds	r7, #12
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr

08004676 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004676:	b480      	push	{r7}
 8004678:	b085      	sub	sp, #20
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
 800467e:	460b      	mov	r3, r1
 8004680:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004688:	887a      	ldrh	r2, [r7, #2]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	4013      	ands	r3, r2
 800468e:	041a      	lsls	r2, r3, #16
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	43d9      	mvns	r1, r3
 8004694:	887b      	ldrh	r3, [r7, #2]
 8004696:	400b      	ands	r3, r1
 8004698:	431a      	orrs	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	619a      	str	r2, [r3, #24]
}
 800469e:	bf00      	nop
 80046a0:	3714      	adds	r7, #20
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
	...

080046ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d101      	bne.n	80046be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e12b      	b.n	8004916 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d106      	bne.n	80046d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f7fe f9c6 	bl	8002a64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2224      	movs	r2, #36	; 0x24
 80046dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f022 0201 	bic.w	r2, r2, #1
 80046ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800470e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004710:	f000 fa02 	bl	8004b18 <HAL_RCC_GetPCLK1Freq>
 8004714:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	4a81      	ldr	r2, [pc, #516]	; (8004920 <HAL_I2C_Init+0x274>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d807      	bhi.n	8004730 <HAL_I2C_Init+0x84>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	4a80      	ldr	r2, [pc, #512]	; (8004924 <HAL_I2C_Init+0x278>)
 8004724:	4293      	cmp	r3, r2
 8004726:	bf94      	ite	ls
 8004728:	2301      	movls	r3, #1
 800472a:	2300      	movhi	r3, #0
 800472c:	b2db      	uxtb	r3, r3
 800472e:	e006      	b.n	800473e <HAL_I2C_Init+0x92>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	4a7d      	ldr	r2, [pc, #500]	; (8004928 <HAL_I2C_Init+0x27c>)
 8004734:	4293      	cmp	r3, r2
 8004736:	bf94      	ite	ls
 8004738:	2301      	movls	r3, #1
 800473a:	2300      	movhi	r3, #0
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d001      	beq.n	8004746 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e0e7      	b.n	8004916 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	4a78      	ldr	r2, [pc, #480]	; (800492c <HAL_I2C_Init+0x280>)
 800474a:	fba2 2303 	umull	r2, r3, r2, r3
 800474e:	0c9b      	lsrs	r3, r3, #18
 8004750:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68ba      	ldr	r2, [r7, #8]
 8004762:	430a      	orrs	r2, r1
 8004764:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	6a1b      	ldr	r3, [r3, #32]
 800476c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	4a6a      	ldr	r2, [pc, #424]	; (8004920 <HAL_I2C_Init+0x274>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d802      	bhi.n	8004780 <HAL_I2C_Init+0xd4>
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	3301      	adds	r3, #1
 800477e:	e009      	b.n	8004794 <HAL_I2C_Init+0xe8>
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004786:	fb02 f303 	mul.w	r3, r2, r3
 800478a:	4a69      	ldr	r2, [pc, #420]	; (8004930 <HAL_I2C_Init+0x284>)
 800478c:	fba2 2303 	umull	r2, r3, r2, r3
 8004790:	099b      	lsrs	r3, r3, #6
 8004792:	3301      	adds	r3, #1
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	6812      	ldr	r2, [r2, #0]
 8004798:	430b      	orrs	r3, r1
 800479a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	69db      	ldr	r3, [r3, #28]
 80047a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80047a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	495c      	ldr	r1, [pc, #368]	; (8004920 <HAL_I2C_Init+0x274>)
 80047b0:	428b      	cmp	r3, r1
 80047b2:	d819      	bhi.n	80047e8 <HAL_I2C_Init+0x13c>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	1e59      	subs	r1, r3, #1
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	005b      	lsls	r3, r3, #1
 80047be:	fbb1 f3f3 	udiv	r3, r1, r3
 80047c2:	1c59      	adds	r1, r3, #1
 80047c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80047c8:	400b      	ands	r3, r1
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00a      	beq.n	80047e4 <HAL_I2C_Init+0x138>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	1e59      	subs	r1, r3, #1
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	005b      	lsls	r3, r3, #1
 80047d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80047dc:	3301      	adds	r3, #1
 80047de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047e2:	e051      	b.n	8004888 <HAL_I2C_Init+0x1dc>
 80047e4:	2304      	movs	r3, #4
 80047e6:	e04f      	b.n	8004888 <HAL_I2C_Init+0x1dc>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d111      	bne.n	8004814 <HAL_I2C_Init+0x168>
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	1e58      	subs	r0, r3, #1
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6859      	ldr	r1, [r3, #4]
 80047f8:	460b      	mov	r3, r1
 80047fa:	005b      	lsls	r3, r3, #1
 80047fc:	440b      	add	r3, r1
 80047fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004802:	3301      	adds	r3, #1
 8004804:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004808:	2b00      	cmp	r3, #0
 800480a:	bf0c      	ite	eq
 800480c:	2301      	moveq	r3, #1
 800480e:	2300      	movne	r3, #0
 8004810:	b2db      	uxtb	r3, r3
 8004812:	e012      	b.n	800483a <HAL_I2C_Init+0x18e>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	1e58      	subs	r0, r3, #1
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6859      	ldr	r1, [r3, #4]
 800481c:	460b      	mov	r3, r1
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	440b      	add	r3, r1
 8004822:	0099      	lsls	r1, r3, #2
 8004824:	440b      	add	r3, r1
 8004826:	fbb0 f3f3 	udiv	r3, r0, r3
 800482a:	3301      	adds	r3, #1
 800482c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004830:	2b00      	cmp	r3, #0
 8004832:	bf0c      	ite	eq
 8004834:	2301      	moveq	r3, #1
 8004836:	2300      	movne	r3, #0
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d001      	beq.n	8004842 <HAL_I2C_Init+0x196>
 800483e:	2301      	movs	r3, #1
 8004840:	e022      	b.n	8004888 <HAL_I2C_Init+0x1dc>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10e      	bne.n	8004868 <HAL_I2C_Init+0x1bc>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	1e58      	subs	r0, r3, #1
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6859      	ldr	r1, [r3, #4]
 8004852:	460b      	mov	r3, r1
 8004854:	005b      	lsls	r3, r3, #1
 8004856:	440b      	add	r3, r1
 8004858:	fbb0 f3f3 	udiv	r3, r0, r3
 800485c:	3301      	adds	r3, #1
 800485e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004862:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004866:	e00f      	b.n	8004888 <HAL_I2C_Init+0x1dc>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	1e58      	subs	r0, r3, #1
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6859      	ldr	r1, [r3, #4]
 8004870:	460b      	mov	r3, r1
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	440b      	add	r3, r1
 8004876:	0099      	lsls	r1, r3, #2
 8004878:	440b      	add	r3, r1
 800487a:	fbb0 f3f3 	udiv	r3, r0, r3
 800487e:	3301      	adds	r3, #1
 8004880:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004884:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004888:	6879      	ldr	r1, [r7, #4]
 800488a:	6809      	ldr	r1, [r1, #0]
 800488c:	4313      	orrs	r3, r2
 800488e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	69da      	ldr	r2, [r3, #28]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	431a      	orrs	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	430a      	orrs	r2, r1
 80048aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80048b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	6911      	ldr	r1, [r2, #16]
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	68d2      	ldr	r2, [r2, #12]
 80048c2:	4311      	orrs	r1, r2
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	6812      	ldr	r2, [r2, #0]
 80048c8:	430b      	orrs	r3, r1
 80048ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	695a      	ldr	r2, [r3, #20]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	431a      	orrs	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	430a      	orrs	r2, r1
 80048e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f042 0201 	orr.w	r2, r2, #1
 80048f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2220      	movs	r2, #32
 8004902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3710      	adds	r7, #16
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	000186a0 	.word	0x000186a0
 8004924:	001e847f 	.word	0x001e847f
 8004928:	003d08ff 	.word	0x003d08ff
 800492c:	431bde83 	.word	0x431bde83
 8004930:	10624dd3 	.word	0x10624dd3

08004934 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d101      	bne.n	8004948 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e0cc      	b.n	8004ae2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004948:	4b68      	ldr	r3, [pc, #416]	; (8004aec <HAL_RCC_ClockConfig+0x1b8>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 030f 	and.w	r3, r3, #15
 8004950:	683a      	ldr	r2, [r7, #0]
 8004952:	429a      	cmp	r2, r3
 8004954:	d90c      	bls.n	8004970 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004956:	4b65      	ldr	r3, [pc, #404]	; (8004aec <HAL_RCC_ClockConfig+0x1b8>)
 8004958:	683a      	ldr	r2, [r7, #0]
 800495a:	b2d2      	uxtb	r2, r2
 800495c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800495e:	4b63      	ldr	r3, [pc, #396]	; (8004aec <HAL_RCC_ClockConfig+0x1b8>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 030f 	and.w	r3, r3, #15
 8004966:	683a      	ldr	r2, [r7, #0]
 8004968:	429a      	cmp	r2, r3
 800496a:	d001      	beq.n	8004970 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e0b8      	b.n	8004ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0302 	and.w	r3, r3, #2
 8004978:	2b00      	cmp	r3, #0
 800497a:	d020      	beq.n	80049be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0304 	and.w	r3, r3, #4
 8004984:	2b00      	cmp	r3, #0
 8004986:	d005      	beq.n	8004994 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004988:	4b59      	ldr	r3, [pc, #356]	; (8004af0 <HAL_RCC_ClockConfig+0x1bc>)
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	4a58      	ldr	r2, [pc, #352]	; (8004af0 <HAL_RCC_ClockConfig+0x1bc>)
 800498e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004992:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0308 	and.w	r3, r3, #8
 800499c:	2b00      	cmp	r3, #0
 800499e:	d005      	beq.n	80049ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049a0:	4b53      	ldr	r3, [pc, #332]	; (8004af0 <HAL_RCC_ClockConfig+0x1bc>)
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	4a52      	ldr	r2, [pc, #328]	; (8004af0 <HAL_RCC_ClockConfig+0x1bc>)
 80049a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80049aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049ac:	4b50      	ldr	r3, [pc, #320]	; (8004af0 <HAL_RCC_ClockConfig+0x1bc>)
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	494d      	ldr	r1, [pc, #308]	; (8004af0 <HAL_RCC_ClockConfig+0x1bc>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d044      	beq.n	8004a54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d107      	bne.n	80049e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049d2:	4b47      	ldr	r3, [pc, #284]	; (8004af0 <HAL_RCC_ClockConfig+0x1bc>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d119      	bne.n	8004a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e07f      	b.n	8004ae2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d003      	beq.n	80049f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049ee:	2b03      	cmp	r3, #3
 80049f0:	d107      	bne.n	8004a02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049f2:	4b3f      	ldr	r3, [pc, #252]	; (8004af0 <HAL_RCC_ClockConfig+0x1bc>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d109      	bne.n	8004a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e06f      	b.n	8004ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a02:	4b3b      	ldr	r3, [pc, #236]	; (8004af0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d101      	bne.n	8004a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e067      	b.n	8004ae2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a12:	4b37      	ldr	r3, [pc, #220]	; (8004af0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f023 0203 	bic.w	r2, r3, #3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	4934      	ldr	r1, [pc, #208]	; (8004af0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a24:	f7fe ff32 	bl	800388c <HAL_GetTick>
 8004a28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a2a:	e00a      	b.n	8004a42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a2c:	f7fe ff2e 	bl	800388c <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e04f      	b.n	8004ae2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a42:	4b2b      	ldr	r3, [pc, #172]	; (8004af0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f003 020c 	and.w	r2, r3, #12
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d1eb      	bne.n	8004a2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a54:	4b25      	ldr	r3, [pc, #148]	; (8004aec <HAL_RCC_ClockConfig+0x1b8>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 030f 	and.w	r3, r3, #15
 8004a5c:	683a      	ldr	r2, [r7, #0]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d20c      	bcs.n	8004a7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a62:	4b22      	ldr	r3, [pc, #136]	; (8004aec <HAL_RCC_ClockConfig+0x1b8>)
 8004a64:	683a      	ldr	r2, [r7, #0]
 8004a66:	b2d2      	uxtb	r2, r2
 8004a68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a6a:	4b20      	ldr	r3, [pc, #128]	; (8004aec <HAL_RCC_ClockConfig+0x1b8>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 030f 	and.w	r3, r3, #15
 8004a72:	683a      	ldr	r2, [r7, #0]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d001      	beq.n	8004a7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e032      	b.n	8004ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0304 	and.w	r3, r3, #4
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d008      	beq.n	8004a9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a88:	4b19      	ldr	r3, [pc, #100]	; (8004af0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	4916      	ldr	r1, [pc, #88]	; (8004af0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0308 	and.w	r3, r3, #8
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d009      	beq.n	8004aba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004aa6:	4b12      	ldr	r3, [pc, #72]	; (8004af0 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	00db      	lsls	r3, r3, #3
 8004ab4:	490e      	ldr	r1, [pc, #56]	; (8004af0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004aba:	f000 f887 	bl	8004bcc <HAL_RCC_GetSysClockFreq>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	4b0b      	ldr	r3, [pc, #44]	; (8004af0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	091b      	lsrs	r3, r3, #4
 8004ac6:	f003 030f 	and.w	r3, r3, #15
 8004aca:	490a      	ldr	r1, [pc, #40]	; (8004af4 <HAL_RCC_ClockConfig+0x1c0>)
 8004acc:	5ccb      	ldrb	r3, [r1, r3]
 8004ace:	fa22 f303 	lsr.w	r3, r2, r3
 8004ad2:	4a09      	ldr	r2, [pc, #36]	; (8004af8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ad4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ad6:	4b09      	ldr	r3, [pc, #36]	; (8004afc <HAL_RCC_ClockConfig+0x1c8>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7fe f9a8 	bl	8002e30 <HAL_InitTick>

  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3710      	adds	r7, #16
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	40023c00 	.word	0x40023c00
 8004af0:	40023800 	.word	0x40023800
 8004af4:	0800d760 	.word	0x0800d760
 8004af8:	20000028 	.word	0x20000028
 8004afc:	2000002c 	.word	0x2000002c

08004b00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b00:	b480      	push	{r7}
 8004b02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b04:	4b03      	ldr	r3, [pc, #12]	; (8004b14 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b06:	681b      	ldr	r3, [r3, #0]
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	20000028 	.word	0x20000028

08004b18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b1c:	f7ff fff0 	bl	8004b00 <HAL_RCC_GetHCLKFreq>
 8004b20:	4602      	mov	r2, r0
 8004b22:	4b05      	ldr	r3, [pc, #20]	; (8004b38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	0a9b      	lsrs	r3, r3, #10
 8004b28:	f003 0307 	and.w	r3, r3, #7
 8004b2c:	4903      	ldr	r1, [pc, #12]	; (8004b3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b2e:	5ccb      	ldrb	r3, [r1, r3]
 8004b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	40023800 	.word	0x40023800
 8004b3c:	0800d770 	.word	0x0800d770

08004b40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b44:	f7ff ffdc 	bl	8004b00 <HAL_RCC_GetHCLKFreq>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	4b05      	ldr	r3, [pc, #20]	; (8004b60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	0b5b      	lsrs	r3, r3, #13
 8004b50:	f003 0307 	and.w	r3, r3, #7
 8004b54:	4903      	ldr	r1, [pc, #12]	; (8004b64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b56:	5ccb      	ldrb	r3, [r1, r3]
 8004b58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	40023800 	.word	0x40023800
 8004b64:	0800d770 	.word	0x0800d770

08004b68 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	220f      	movs	r2, #15
 8004b76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004b78:	4b12      	ldr	r3, [pc, #72]	; (8004bc4 <HAL_RCC_GetClockConfig+0x5c>)
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f003 0203 	and.w	r2, r3, #3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004b84:	4b0f      	ldr	r3, [pc, #60]	; (8004bc4 <HAL_RCC_GetClockConfig+0x5c>)
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004b90:	4b0c      	ldr	r3, [pc, #48]	; (8004bc4 <HAL_RCC_GetClockConfig+0x5c>)
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004b9c:	4b09      	ldr	r3, [pc, #36]	; (8004bc4 <HAL_RCC_GetClockConfig+0x5c>)
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	08db      	lsrs	r3, r3, #3
 8004ba2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004baa:	4b07      	ldr	r3, [pc, #28]	; (8004bc8 <HAL_RCC_GetClockConfig+0x60>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 020f 	and.w	r2, r3, #15
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	601a      	str	r2, [r3, #0]
}
 8004bb6:	bf00      	nop
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	40023800 	.word	0x40023800
 8004bc8:	40023c00 	.word	0x40023c00

08004bcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bd0:	b0a6      	sub	sp, #152	; 0x98
 8004bd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8004be0:	2300      	movs	r3, #0
 8004be2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8004be6:	2300      	movs	r3, #0
 8004be8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8004bec:	2300      	movs	r3, #0
 8004bee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bf2:	4bc8      	ldr	r3, [pc, #800]	; (8004f14 <HAL_RCC_GetSysClockFreq+0x348>)
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f003 030c 	and.w	r3, r3, #12
 8004bfa:	2b0c      	cmp	r3, #12
 8004bfc:	f200 817e 	bhi.w	8004efc <HAL_RCC_GetSysClockFreq+0x330>
 8004c00:	a201      	add	r2, pc, #4	; (adr r2, 8004c08 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c06:	bf00      	nop
 8004c08:	08004c3d 	.word	0x08004c3d
 8004c0c:	08004efd 	.word	0x08004efd
 8004c10:	08004efd 	.word	0x08004efd
 8004c14:	08004efd 	.word	0x08004efd
 8004c18:	08004c45 	.word	0x08004c45
 8004c1c:	08004efd 	.word	0x08004efd
 8004c20:	08004efd 	.word	0x08004efd
 8004c24:	08004efd 	.word	0x08004efd
 8004c28:	08004c4d 	.word	0x08004c4d
 8004c2c:	08004efd 	.word	0x08004efd
 8004c30:	08004efd 	.word	0x08004efd
 8004c34:	08004efd 	.word	0x08004efd
 8004c38:	08004db7 	.word	0x08004db7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c3c:	4bb6      	ldr	r3, [pc, #728]	; (8004f18 <HAL_RCC_GetSysClockFreq+0x34c>)
 8004c3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8004c42:	e15f      	b.n	8004f04 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c44:	4bb5      	ldr	r3, [pc, #724]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x350>)
 8004c46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004c4a:	e15b      	b.n	8004f04 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c4c:	4bb1      	ldr	r3, [pc, #708]	; (8004f14 <HAL_RCC_GetSysClockFreq+0x348>)
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c58:	4bae      	ldr	r3, [pc, #696]	; (8004f14 <HAL_RCC_GetSysClockFreq+0x348>)
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d031      	beq.n	8004cc8 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c64:	4bab      	ldr	r3, [pc, #684]	; (8004f14 <HAL_RCC_GetSysClockFreq+0x348>)
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	099b      	lsrs	r3, r3, #6
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c6e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004c70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c76:	663b      	str	r3, [r7, #96]	; 0x60
 8004c78:	2300      	movs	r3, #0
 8004c7a:	667b      	str	r3, [r7, #100]	; 0x64
 8004c7c:	4ba7      	ldr	r3, [pc, #668]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x350>)
 8004c7e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004c82:	462a      	mov	r2, r5
 8004c84:	fb03 f202 	mul.w	r2, r3, r2
 8004c88:	2300      	movs	r3, #0
 8004c8a:	4621      	mov	r1, r4
 8004c8c:	fb01 f303 	mul.w	r3, r1, r3
 8004c90:	4413      	add	r3, r2
 8004c92:	4aa2      	ldr	r2, [pc, #648]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x350>)
 8004c94:	4621      	mov	r1, r4
 8004c96:	fba1 1202 	umull	r1, r2, r1, r2
 8004c9a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004c9c:	460a      	mov	r2, r1
 8004c9e:	67ba      	str	r2, [r7, #120]	; 0x78
 8004ca0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004ca2:	4413      	add	r3, r2
 8004ca4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004ca6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004caa:	2200      	movs	r2, #0
 8004cac:	65bb      	str	r3, [r7, #88]	; 0x58
 8004cae:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004cb0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004cb4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8004cb8:	f7fb fb02 	bl	80002c0 <__aeabi_uldivmod>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004cc6:	e064      	b.n	8004d92 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cc8:	4b92      	ldr	r3, [pc, #584]	; (8004f14 <HAL_RCC_GetSysClockFreq+0x348>)
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	099b      	lsrs	r3, r3, #6
 8004cce:	2200      	movs	r2, #0
 8004cd0:	653b      	str	r3, [r7, #80]	; 0x50
 8004cd2:	657a      	str	r2, [r7, #84]	; 0x54
 8004cd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cda:	64bb      	str	r3, [r7, #72]	; 0x48
 8004cdc:	2300      	movs	r3, #0
 8004cde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ce0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8004ce4:	4622      	mov	r2, r4
 8004ce6:	462b      	mov	r3, r5
 8004ce8:	f04f 0000 	mov.w	r0, #0
 8004cec:	f04f 0100 	mov.w	r1, #0
 8004cf0:	0159      	lsls	r1, r3, #5
 8004cf2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cf6:	0150      	lsls	r0, r2, #5
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	4621      	mov	r1, r4
 8004cfe:	1a51      	subs	r1, r2, r1
 8004d00:	6139      	str	r1, [r7, #16]
 8004d02:	4629      	mov	r1, r5
 8004d04:	eb63 0301 	sbc.w	r3, r3, r1
 8004d08:	617b      	str	r3, [r7, #20]
 8004d0a:	f04f 0200 	mov.w	r2, #0
 8004d0e:	f04f 0300 	mov.w	r3, #0
 8004d12:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d16:	4659      	mov	r1, fp
 8004d18:	018b      	lsls	r3, r1, #6
 8004d1a:	4651      	mov	r1, sl
 8004d1c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d20:	4651      	mov	r1, sl
 8004d22:	018a      	lsls	r2, r1, #6
 8004d24:	4651      	mov	r1, sl
 8004d26:	ebb2 0801 	subs.w	r8, r2, r1
 8004d2a:	4659      	mov	r1, fp
 8004d2c:	eb63 0901 	sbc.w	r9, r3, r1
 8004d30:	f04f 0200 	mov.w	r2, #0
 8004d34:	f04f 0300 	mov.w	r3, #0
 8004d38:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d3c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d40:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d44:	4690      	mov	r8, r2
 8004d46:	4699      	mov	r9, r3
 8004d48:	4623      	mov	r3, r4
 8004d4a:	eb18 0303 	adds.w	r3, r8, r3
 8004d4e:	60bb      	str	r3, [r7, #8]
 8004d50:	462b      	mov	r3, r5
 8004d52:	eb49 0303 	adc.w	r3, r9, r3
 8004d56:	60fb      	str	r3, [r7, #12]
 8004d58:	f04f 0200 	mov.w	r2, #0
 8004d5c:	f04f 0300 	mov.w	r3, #0
 8004d60:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004d64:	4629      	mov	r1, r5
 8004d66:	028b      	lsls	r3, r1, #10
 8004d68:	4621      	mov	r1, r4
 8004d6a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d6e:	4621      	mov	r1, r4
 8004d70:	028a      	lsls	r2, r1, #10
 8004d72:	4610      	mov	r0, r2
 8004d74:	4619      	mov	r1, r3
 8004d76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	643b      	str	r3, [r7, #64]	; 0x40
 8004d7e:	647a      	str	r2, [r7, #68]	; 0x44
 8004d80:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d84:	f7fb fa9c 	bl	80002c0 <__aeabi_uldivmod>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d92:	4b60      	ldr	r3, [pc, #384]	; (8004f14 <HAL_RCC_GetSysClockFreq+0x348>)
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	0c1b      	lsrs	r3, r3, #16
 8004d98:	f003 0303 	and.w	r3, r3, #3
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	005b      	lsls	r3, r3, #1
 8004da0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8004da4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004da8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004db4:	e0a6      	b.n	8004f04 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004db6:	4b57      	ldr	r3, [pc, #348]	; (8004f14 <HAL_RCC_GetSysClockFreq+0x348>)
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dbe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004dc2:	4b54      	ldr	r3, [pc, #336]	; (8004f14 <HAL_RCC_GetSysClockFreq+0x348>)
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d02a      	beq.n	8004e24 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dce:	4b51      	ldr	r3, [pc, #324]	; (8004f14 <HAL_RCC_GetSysClockFreq+0x348>)
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	099b      	lsrs	r3, r3, #6
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004dd8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ddc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004de0:	2100      	movs	r1, #0
 8004de2:	4b4e      	ldr	r3, [pc, #312]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x350>)
 8004de4:	fb03 f201 	mul.w	r2, r3, r1
 8004de8:	2300      	movs	r3, #0
 8004dea:	fb00 f303 	mul.w	r3, r0, r3
 8004dee:	4413      	add	r3, r2
 8004df0:	4a4a      	ldr	r2, [pc, #296]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x350>)
 8004df2:	fba0 1202 	umull	r1, r2, r0, r2
 8004df6:	677a      	str	r2, [r7, #116]	; 0x74
 8004df8:	460a      	mov	r2, r1
 8004dfa:	673a      	str	r2, [r7, #112]	; 0x70
 8004dfc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004dfe:	4413      	add	r3, r2
 8004e00:	677b      	str	r3, [r7, #116]	; 0x74
 8004e02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e06:	2200      	movs	r2, #0
 8004e08:	633b      	str	r3, [r7, #48]	; 0x30
 8004e0a:	637a      	str	r2, [r7, #52]	; 0x34
 8004e0c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004e10:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8004e14:	f7fb fa54 	bl	80002c0 <__aeabi_uldivmod>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	460b      	mov	r3, r1
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004e22:	e05b      	b.n	8004edc <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e24:	4b3b      	ldr	r3, [pc, #236]	; (8004f14 <HAL_RCC_GetSysClockFreq+0x348>)
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	099b      	lsrs	r3, r3, #6
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e36:	623b      	str	r3, [r7, #32]
 8004e38:	2300      	movs	r3, #0
 8004e3a:	627b      	str	r3, [r7, #36]	; 0x24
 8004e3c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e40:	4642      	mov	r2, r8
 8004e42:	464b      	mov	r3, r9
 8004e44:	f04f 0000 	mov.w	r0, #0
 8004e48:	f04f 0100 	mov.w	r1, #0
 8004e4c:	0159      	lsls	r1, r3, #5
 8004e4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e52:	0150      	lsls	r0, r2, #5
 8004e54:	4602      	mov	r2, r0
 8004e56:	460b      	mov	r3, r1
 8004e58:	4641      	mov	r1, r8
 8004e5a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e5e:	4649      	mov	r1, r9
 8004e60:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e64:	f04f 0200 	mov.w	r2, #0
 8004e68:	f04f 0300 	mov.w	r3, #0
 8004e6c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004e70:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004e74:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e78:	ebb2 040a 	subs.w	r4, r2, sl
 8004e7c:	eb63 050b 	sbc.w	r5, r3, fp
 8004e80:	f04f 0200 	mov.w	r2, #0
 8004e84:	f04f 0300 	mov.w	r3, #0
 8004e88:	00eb      	lsls	r3, r5, #3
 8004e8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e8e:	00e2      	lsls	r2, r4, #3
 8004e90:	4614      	mov	r4, r2
 8004e92:	461d      	mov	r5, r3
 8004e94:	4643      	mov	r3, r8
 8004e96:	18e3      	adds	r3, r4, r3
 8004e98:	603b      	str	r3, [r7, #0]
 8004e9a:	464b      	mov	r3, r9
 8004e9c:	eb45 0303 	adc.w	r3, r5, r3
 8004ea0:	607b      	str	r3, [r7, #4]
 8004ea2:	f04f 0200 	mov.w	r2, #0
 8004ea6:	f04f 0300 	mov.w	r3, #0
 8004eaa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004eae:	4629      	mov	r1, r5
 8004eb0:	028b      	lsls	r3, r1, #10
 8004eb2:	4621      	mov	r1, r4
 8004eb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004eb8:	4621      	mov	r1, r4
 8004eba:	028a      	lsls	r2, r1, #10
 8004ebc:	4610      	mov	r0, r2
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	61bb      	str	r3, [r7, #24]
 8004ec8:	61fa      	str	r2, [r7, #28]
 8004eca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ece:	f7fb f9f7 	bl	80002c0 <__aeabi_uldivmod>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004edc:	4b0d      	ldr	r3, [pc, #52]	; (8004f14 <HAL_RCC_GetSysClockFreq+0x348>)
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	0f1b      	lsrs	r3, r3, #28
 8004ee2:	f003 0307 	and.w	r3, r3, #7
 8004ee6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8004eea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004eee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ef6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004efa:	e003      	b.n	8004f04 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004efc:	4b06      	ldr	r3, [pc, #24]	; (8004f18 <HAL_RCC_GetSysClockFreq+0x34c>)
 8004efe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004f02:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f04:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3798      	adds	r7, #152	; 0x98
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f12:	bf00      	nop
 8004f14:	40023800 	.word	0x40023800
 8004f18:	00f42400 	.word	0x00f42400
 8004f1c:	017d7840 	.word	0x017d7840

08004f20 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b086      	sub	sp, #24
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d101      	bne.n	8004f32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e28d      	b.n	800544e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0301 	and.w	r3, r3, #1
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	f000 8083 	beq.w	8005046 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004f40:	4b94      	ldr	r3, [pc, #592]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	f003 030c 	and.w	r3, r3, #12
 8004f48:	2b04      	cmp	r3, #4
 8004f4a:	d019      	beq.n	8004f80 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004f4c:	4b91      	ldr	r3, [pc, #580]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004f54:	2b08      	cmp	r3, #8
 8004f56:	d106      	bne.n	8004f66 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004f58:	4b8e      	ldr	r3, [pc, #568]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f64:	d00c      	beq.n	8004f80 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f66:	4b8b      	ldr	r3, [pc, #556]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004f6e:	2b0c      	cmp	r3, #12
 8004f70:	d112      	bne.n	8004f98 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f72:	4b88      	ldr	r3, [pc, #544]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f7e:	d10b      	bne.n	8004f98 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f80:	4b84      	ldr	r3, [pc, #528]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d05b      	beq.n	8005044 <HAL_RCC_OscConfig+0x124>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d157      	bne.n	8005044 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e25a      	b.n	800544e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fa0:	d106      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x90>
 8004fa2:	4b7c      	ldr	r3, [pc, #496]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a7b      	ldr	r2, [pc, #492]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8004fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fac:	6013      	str	r3, [r2, #0]
 8004fae:	e01d      	b.n	8004fec <HAL_RCC_OscConfig+0xcc>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fb8:	d10c      	bne.n	8004fd4 <HAL_RCC_OscConfig+0xb4>
 8004fba:	4b76      	ldr	r3, [pc, #472]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a75      	ldr	r2, [pc, #468]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8004fc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fc4:	6013      	str	r3, [r2, #0]
 8004fc6:	4b73      	ldr	r3, [pc, #460]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a72      	ldr	r2, [pc, #456]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8004fcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fd0:	6013      	str	r3, [r2, #0]
 8004fd2:	e00b      	b.n	8004fec <HAL_RCC_OscConfig+0xcc>
 8004fd4:	4b6f      	ldr	r3, [pc, #444]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a6e      	ldr	r2, [pc, #440]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8004fda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fde:	6013      	str	r3, [r2, #0]
 8004fe0:	4b6c      	ldr	r3, [pc, #432]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a6b      	ldr	r2, [pc, #428]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8004fe6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d013      	beq.n	800501c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ff4:	f7fe fc4a 	bl	800388c <HAL_GetTick>
 8004ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ffa:	e008      	b.n	800500e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ffc:	f7fe fc46 	bl	800388c <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	2b64      	cmp	r3, #100	; 0x64
 8005008:	d901      	bls.n	800500e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e21f      	b.n	800544e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800500e:	4b61      	ldr	r3, [pc, #388]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d0f0      	beq.n	8004ffc <HAL_RCC_OscConfig+0xdc>
 800501a:	e014      	b.n	8005046 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800501c:	f7fe fc36 	bl	800388c <HAL_GetTick>
 8005020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005022:	e008      	b.n	8005036 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005024:	f7fe fc32 	bl	800388c <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	2b64      	cmp	r3, #100	; 0x64
 8005030:	d901      	bls.n	8005036 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e20b      	b.n	800544e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005036:	4b57      	ldr	r3, [pc, #348]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1f0      	bne.n	8005024 <HAL_RCC_OscConfig+0x104>
 8005042:	e000      	b.n	8005046 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005044:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0302 	and.w	r3, r3, #2
 800504e:	2b00      	cmp	r3, #0
 8005050:	d06f      	beq.n	8005132 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005052:	4b50      	ldr	r3, [pc, #320]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	f003 030c 	and.w	r3, r3, #12
 800505a:	2b00      	cmp	r3, #0
 800505c:	d017      	beq.n	800508e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800505e:	4b4d      	ldr	r3, [pc, #308]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005066:	2b08      	cmp	r3, #8
 8005068:	d105      	bne.n	8005076 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800506a:	4b4a      	ldr	r3, [pc, #296]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00b      	beq.n	800508e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005076:	4b47      	ldr	r3, [pc, #284]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800507e:	2b0c      	cmp	r3, #12
 8005080:	d11c      	bne.n	80050bc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005082:	4b44      	ldr	r3, [pc, #272]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d116      	bne.n	80050bc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800508e:	4b41      	ldr	r3, [pc, #260]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0302 	and.w	r3, r3, #2
 8005096:	2b00      	cmp	r3, #0
 8005098:	d005      	beq.n	80050a6 <HAL_RCC_OscConfig+0x186>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d001      	beq.n	80050a6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e1d3      	b.n	800544e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050a6:	4b3b      	ldr	r3, [pc, #236]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	00db      	lsls	r3, r3, #3
 80050b4:	4937      	ldr	r1, [pc, #220]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050ba:	e03a      	b.n	8005132 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d020      	beq.n	8005106 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050c4:	4b34      	ldr	r3, [pc, #208]	; (8005198 <HAL_RCC_OscConfig+0x278>)
 80050c6:	2201      	movs	r2, #1
 80050c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ca:	f7fe fbdf 	bl	800388c <HAL_GetTick>
 80050ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050d0:	e008      	b.n	80050e4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050d2:	f7fe fbdb 	bl	800388c <HAL_GetTick>
 80050d6:	4602      	mov	r2, r0
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d901      	bls.n	80050e4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e1b4      	b.n	800544e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050e4:	4b2b      	ldr	r3, [pc, #172]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0302 	and.w	r3, r3, #2
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d0f0      	beq.n	80050d2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050f0:	4b28      	ldr	r3, [pc, #160]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	00db      	lsls	r3, r3, #3
 80050fe:	4925      	ldr	r1, [pc, #148]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8005100:	4313      	orrs	r3, r2
 8005102:	600b      	str	r3, [r1, #0]
 8005104:	e015      	b.n	8005132 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005106:	4b24      	ldr	r3, [pc, #144]	; (8005198 <HAL_RCC_OscConfig+0x278>)
 8005108:	2200      	movs	r2, #0
 800510a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800510c:	f7fe fbbe 	bl	800388c <HAL_GetTick>
 8005110:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005112:	e008      	b.n	8005126 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005114:	f7fe fbba 	bl	800388c <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	2b02      	cmp	r3, #2
 8005120:	d901      	bls.n	8005126 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e193      	b.n	800544e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005126:	4b1b      	ldr	r3, [pc, #108]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0302 	and.w	r3, r3, #2
 800512e:	2b00      	cmp	r3, #0
 8005130:	d1f0      	bne.n	8005114 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0308 	and.w	r3, r3, #8
 800513a:	2b00      	cmp	r3, #0
 800513c:	d036      	beq.n	80051ac <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d016      	beq.n	8005174 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005146:	4b15      	ldr	r3, [pc, #84]	; (800519c <HAL_RCC_OscConfig+0x27c>)
 8005148:	2201      	movs	r2, #1
 800514a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800514c:	f7fe fb9e 	bl	800388c <HAL_GetTick>
 8005150:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005152:	e008      	b.n	8005166 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005154:	f7fe fb9a 	bl	800388c <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	2b02      	cmp	r3, #2
 8005160:	d901      	bls.n	8005166 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e173      	b.n	800544e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005166:	4b0b      	ldr	r3, [pc, #44]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8005168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800516a:	f003 0302 	and.w	r3, r3, #2
 800516e:	2b00      	cmp	r3, #0
 8005170:	d0f0      	beq.n	8005154 <HAL_RCC_OscConfig+0x234>
 8005172:	e01b      	b.n	80051ac <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005174:	4b09      	ldr	r3, [pc, #36]	; (800519c <HAL_RCC_OscConfig+0x27c>)
 8005176:	2200      	movs	r2, #0
 8005178:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800517a:	f7fe fb87 	bl	800388c <HAL_GetTick>
 800517e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005180:	e00e      	b.n	80051a0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005182:	f7fe fb83 	bl	800388c <HAL_GetTick>
 8005186:	4602      	mov	r2, r0
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	2b02      	cmp	r3, #2
 800518e:	d907      	bls.n	80051a0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	e15c      	b.n	800544e <HAL_RCC_OscConfig+0x52e>
 8005194:	40023800 	.word	0x40023800
 8005198:	42470000 	.word	0x42470000
 800519c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051a0:	4b8a      	ldr	r3, [pc, #552]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 80051a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051a4:	f003 0302 	and.w	r3, r3, #2
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d1ea      	bne.n	8005182 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0304 	and.w	r3, r3, #4
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f000 8097 	beq.w	80052e8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051ba:	2300      	movs	r3, #0
 80051bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051be:	4b83      	ldr	r3, [pc, #524]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 80051c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d10f      	bne.n	80051ea <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051ca:	2300      	movs	r3, #0
 80051cc:	60bb      	str	r3, [r7, #8]
 80051ce:	4b7f      	ldr	r3, [pc, #508]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 80051d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d2:	4a7e      	ldr	r2, [pc, #504]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 80051d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051d8:	6413      	str	r3, [r2, #64]	; 0x40
 80051da:	4b7c      	ldr	r3, [pc, #496]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 80051dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051e2:	60bb      	str	r3, [r7, #8]
 80051e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051e6:	2301      	movs	r3, #1
 80051e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051ea:	4b79      	ldr	r3, [pc, #484]	; (80053d0 <HAL_RCC_OscConfig+0x4b0>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d118      	bne.n	8005228 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051f6:	4b76      	ldr	r3, [pc, #472]	; (80053d0 <HAL_RCC_OscConfig+0x4b0>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a75      	ldr	r2, [pc, #468]	; (80053d0 <HAL_RCC_OscConfig+0x4b0>)
 80051fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005200:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005202:	f7fe fb43 	bl	800388c <HAL_GetTick>
 8005206:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005208:	e008      	b.n	800521c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800520a:	f7fe fb3f 	bl	800388c <HAL_GetTick>
 800520e:	4602      	mov	r2, r0
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	2b02      	cmp	r3, #2
 8005216:	d901      	bls.n	800521c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e118      	b.n	800544e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800521c:	4b6c      	ldr	r3, [pc, #432]	; (80053d0 <HAL_RCC_OscConfig+0x4b0>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005224:	2b00      	cmp	r3, #0
 8005226:	d0f0      	beq.n	800520a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	2b01      	cmp	r3, #1
 800522e:	d106      	bne.n	800523e <HAL_RCC_OscConfig+0x31e>
 8005230:	4b66      	ldr	r3, [pc, #408]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 8005232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005234:	4a65      	ldr	r2, [pc, #404]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 8005236:	f043 0301 	orr.w	r3, r3, #1
 800523a:	6713      	str	r3, [r2, #112]	; 0x70
 800523c:	e01c      	b.n	8005278 <HAL_RCC_OscConfig+0x358>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	2b05      	cmp	r3, #5
 8005244:	d10c      	bne.n	8005260 <HAL_RCC_OscConfig+0x340>
 8005246:	4b61      	ldr	r3, [pc, #388]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 8005248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800524a:	4a60      	ldr	r2, [pc, #384]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 800524c:	f043 0304 	orr.w	r3, r3, #4
 8005250:	6713      	str	r3, [r2, #112]	; 0x70
 8005252:	4b5e      	ldr	r3, [pc, #376]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 8005254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005256:	4a5d      	ldr	r2, [pc, #372]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 8005258:	f043 0301 	orr.w	r3, r3, #1
 800525c:	6713      	str	r3, [r2, #112]	; 0x70
 800525e:	e00b      	b.n	8005278 <HAL_RCC_OscConfig+0x358>
 8005260:	4b5a      	ldr	r3, [pc, #360]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 8005262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005264:	4a59      	ldr	r2, [pc, #356]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 8005266:	f023 0301 	bic.w	r3, r3, #1
 800526a:	6713      	str	r3, [r2, #112]	; 0x70
 800526c:	4b57      	ldr	r3, [pc, #348]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 800526e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005270:	4a56      	ldr	r2, [pc, #344]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 8005272:	f023 0304 	bic.w	r3, r3, #4
 8005276:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d015      	beq.n	80052ac <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005280:	f7fe fb04 	bl	800388c <HAL_GetTick>
 8005284:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005286:	e00a      	b.n	800529e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005288:	f7fe fb00 	bl	800388c <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	f241 3288 	movw	r2, #5000	; 0x1388
 8005296:	4293      	cmp	r3, r2
 8005298:	d901      	bls.n	800529e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e0d7      	b.n	800544e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800529e:	4b4b      	ldr	r3, [pc, #300]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 80052a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052a2:	f003 0302 	and.w	r3, r3, #2
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d0ee      	beq.n	8005288 <HAL_RCC_OscConfig+0x368>
 80052aa:	e014      	b.n	80052d6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ac:	f7fe faee 	bl	800388c <HAL_GetTick>
 80052b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052b2:	e00a      	b.n	80052ca <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052b4:	f7fe faea 	bl	800388c <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	f241 3288 	movw	r2, #5000	; 0x1388
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d901      	bls.n	80052ca <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e0c1      	b.n	800544e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052ca:	4b40      	ldr	r3, [pc, #256]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 80052cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ce:	f003 0302 	and.w	r3, r3, #2
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d1ee      	bne.n	80052b4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052d6:	7dfb      	ldrb	r3, [r7, #23]
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d105      	bne.n	80052e8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052dc:	4b3b      	ldr	r3, [pc, #236]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 80052de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e0:	4a3a      	ldr	r2, [pc, #232]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 80052e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	699b      	ldr	r3, [r3, #24]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f000 80ad 	beq.w	800544c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052f2:	4b36      	ldr	r3, [pc, #216]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	f003 030c 	and.w	r3, r3, #12
 80052fa:	2b08      	cmp	r3, #8
 80052fc:	d060      	beq.n	80053c0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	2b02      	cmp	r3, #2
 8005304:	d145      	bne.n	8005392 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005306:	4b33      	ldr	r3, [pc, #204]	; (80053d4 <HAL_RCC_OscConfig+0x4b4>)
 8005308:	2200      	movs	r2, #0
 800530a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800530c:	f7fe fabe 	bl	800388c <HAL_GetTick>
 8005310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005312:	e008      	b.n	8005326 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005314:	f7fe faba 	bl	800388c <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	2b02      	cmp	r3, #2
 8005320:	d901      	bls.n	8005326 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e093      	b.n	800544e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005326:	4b29      	ldr	r3, [pc, #164]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d1f0      	bne.n	8005314 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	69da      	ldr	r2, [r3, #28]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	431a      	orrs	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005340:	019b      	lsls	r3, r3, #6
 8005342:	431a      	orrs	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005348:	085b      	lsrs	r3, r3, #1
 800534a:	3b01      	subs	r3, #1
 800534c:	041b      	lsls	r3, r3, #16
 800534e:	431a      	orrs	r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005354:	061b      	lsls	r3, r3, #24
 8005356:	431a      	orrs	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535c:	071b      	lsls	r3, r3, #28
 800535e:	491b      	ldr	r1, [pc, #108]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 8005360:	4313      	orrs	r3, r2
 8005362:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005364:	4b1b      	ldr	r3, [pc, #108]	; (80053d4 <HAL_RCC_OscConfig+0x4b4>)
 8005366:	2201      	movs	r2, #1
 8005368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800536a:	f7fe fa8f 	bl	800388c <HAL_GetTick>
 800536e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005370:	e008      	b.n	8005384 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005372:	f7fe fa8b 	bl	800388c <HAL_GetTick>
 8005376:	4602      	mov	r2, r0
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	2b02      	cmp	r3, #2
 800537e:	d901      	bls.n	8005384 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e064      	b.n	800544e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005384:	4b11      	ldr	r3, [pc, #68]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800538c:	2b00      	cmp	r3, #0
 800538e:	d0f0      	beq.n	8005372 <HAL_RCC_OscConfig+0x452>
 8005390:	e05c      	b.n	800544c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005392:	4b10      	ldr	r3, [pc, #64]	; (80053d4 <HAL_RCC_OscConfig+0x4b4>)
 8005394:	2200      	movs	r2, #0
 8005396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005398:	f7fe fa78 	bl	800388c <HAL_GetTick>
 800539c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800539e:	e008      	b.n	80053b2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053a0:	f7fe fa74 	bl	800388c <HAL_GetTick>
 80053a4:	4602      	mov	r2, r0
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d901      	bls.n	80053b2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e04d      	b.n	800544e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053b2:	4b06      	ldr	r3, [pc, #24]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1f0      	bne.n	80053a0 <HAL_RCC_OscConfig+0x480>
 80053be:	e045      	b.n	800544c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	699b      	ldr	r3, [r3, #24]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d107      	bne.n	80053d8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e040      	b.n	800544e <HAL_RCC_OscConfig+0x52e>
 80053cc:	40023800 	.word	0x40023800
 80053d0:	40007000 	.word	0x40007000
 80053d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80053d8:	4b1f      	ldr	r3, [pc, #124]	; (8005458 <HAL_RCC_OscConfig+0x538>)
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	699b      	ldr	r3, [r3, #24]
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d030      	beq.n	8005448 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d129      	bne.n	8005448 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053fe:	429a      	cmp	r2, r3
 8005400:	d122      	bne.n	8005448 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005408:	4013      	ands	r3, r2
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800540e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005410:	4293      	cmp	r3, r2
 8005412:	d119      	bne.n	8005448 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800541e:	085b      	lsrs	r3, r3, #1
 8005420:	3b01      	subs	r3, #1
 8005422:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005424:	429a      	cmp	r2, r3
 8005426:	d10f      	bne.n	8005448 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005432:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005434:	429a      	cmp	r2, r3
 8005436:	d107      	bne.n	8005448 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005442:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005444:	429a      	cmp	r2, r3
 8005446:	d001      	beq.n	800544c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e000      	b.n	800544e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3718      	adds	r7, #24
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	40023800 	.word	0x40023800

0800545c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d101      	bne.n	800546e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e07b      	b.n	8005566 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005472:	2b00      	cmp	r3, #0
 8005474:	d108      	bne.n	8005488 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800547e:	d009      	beq.n	8005494 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	61da      	str	r2, [r3, #28]
 8005486:	e005      	b.n	8005494 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d106      	bne.n	80054b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f7fd fb20 	bl	8002af4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2202      	movs	r2, #2
 80054b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80054dc:	431a      	orrs	r2, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054e6:	431a      	orrs	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	691b      	ldr	r3, [r3, #16]
 80054ec:	f003 0302 	and.w	r3, r3, #2
 80054f0:	431a      	orrs	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	f003 0301 	and.w	r3, r3, #1
 80054fa:	431a      	orrs	r2, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005504:	431a      	orrs	r2, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	69db      	ldr	r3, [r3, #28]
 800550a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800550e:	431a      	orrs	r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6a1b      	ldr	r3, [r3, #32]
 8005514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005518:	ea42 0103 	orr.w	r1, r2, r3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005520:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	430a      	orrs	r2, r1
 800552a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	699b      	ldr	r3, [r3, #24]
 8005530:	0c1b      	lsrs	r3, r3, #16
 8005532:	f003 0104 	and.w	r1, r3, #4
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553a:	f003 0210 	and.w	r2, r3, #16
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	430a      	orrs	r2, r1
 8005544:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	69da      	ldr	r2, [r3, #28]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005554:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	4618      	mov	r0, r3
 8005568:	3708      	adds	r7, #8
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}

0800556e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800556e:	b580      	push	{r7, lr}
 8005570:	b088      	sub	sp, #32
 8005572:	af00      	add	r7, sp, #0
 8005574:	60f8      	str	r0, [r7, #12]
 8005576:	60b9      	str	r1, [r7, #8]
 8005578:	603b      	str	r3, [r7, #0]
 800557a:	4613      	mov	r3, r2
 800557c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800557e:	2300      	movs	r3, #0
 8005580:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005588:	2b01      	cmp	r3, #1
 800558a:	d101      	bne.n	8005590 <HAL_SPI_Transmit+0x22>
 800558c:	2302      	movs	r3, #2
 800558e:	e126      	b.n	80057de <HAL_SPI_Transmit+0x270>
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005598:	f7fe f978 	bl	800388c <HAL_GetTick>
 800559c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800559e:	88fb      	ldrh	r3, [r7, #6]
 80055a0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d002      	beq.n	80055b4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80055ae:	2302      	movs	r3, #2
 80055b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80055b2:	e10b      	b.n	80057cc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d002      	beq.n	80055c0 <HAL_SPI_Transmit+0x52>
 80055ba:	88fb      	ldrh	r3, [r7, #6]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d102      	bne.n	80055c6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80055c4:	e102      	b.n	80057cc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2203      	movs	r2, #3
 80055ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2200      	movs	r2, #0
 80055d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	68ba      	ldr	r2, [r7, #8]
 80055d8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	88fa      	ldrh	r2, [r7, #6]
 80055de:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	88fa      	ldrh	r2, [r7, #6]
 80055e4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2200      	movs	r2, #0
 80055f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2200      	movs	r2, #0
 80055f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2200      	movs	r2, #0
 80055fc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2200      	movs	r2, #0
 8005602:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800560c:	d10f      	bne.n	800562e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800561c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800562c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005638:	2b40      	cmp	r3, #64	; 0x40
 800563a:	d007      	beq.n	800564c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800564a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005654:	d14b      	bne.n	80056ee <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d002      	beq.n	8005664 <HAL_SPI_Transmit+0xf6>
 800565e:	8afb      	ldrh	r3, [r7, #22]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d13e      	bne.n	80056e2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005668:	881a      	ldrh	r2, [r3, #0]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005674:	1c9a      	adds	r2, r3, #2
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800567e:	b29b      	uxth	r3, r3
 8005680:	3b01      	subs	r3, #1
 8005682:	b29a      	uxth	r2, r3
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005688:	e02b      	b.n	80056e2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	f003 0302 	and.w	r3, r3, #2
 8005694:	2b02      	cmp	r3, #2
 8005696:	d112      	bne.n	80056be <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800569c:	881a      	ldrh	r2, [r3, #0]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a8:	1c9a      	adds	r2, r3, #2
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	3b01      	subs	r3, #1
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	86da      	strh	r2, [r3, #54]	; 0x36
 80056bc:	e011      	b.n	80056e2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056be:	f7fe f8e5 	bl	800388c <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	683a      	ldr	r2, [r7, #0]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d803      	bhi.n	80056d6 <HAL_SPI_Transmit+0x168>
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d4:	d102      	bne.n	80056dc <HAL_SPI_Transmit+0x16e>
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d102      	bne.n	80056e2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	77fb      	strb	r3, [r7, #31]
          goto error;
 80056e0:	e074      	b.n	80057cc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1ce      	bne.n	800568a <HAL_SPI_Transmit+0x11c>
 80056ec:	e04c      	b.n	8005788 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d002      	beq.n	80056fc <HAL_SPI_Transmit+0x18e>
 80056f6:	8afb      	ldrh	r3, [r7, #22]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d140      	bne.n	800577e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	330c      	adds	r3, #12
 8005706:	7812      	ldrb	r2, [r2, #0]
 8005708:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800570e:	1c5a      	adds	r2, r3, #1
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005718:	b29b      	uxth	r3, r3
 800571a:	3b01      	subs	r3, #1
 800571c:	b29a      	uxth	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005722:	e02c      	b.n	800577e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	f003 0302 	and.w	r3, r3, #2
 800572e:	2b02      	cmp	r3, #2
 8005730:	d113      	bne.n	800575a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	330c      	adds	r3, #12
 800573c:	7812      	ldrb	r2, [r2, #0]
 800573e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005744:	1c5a      	adds	r2, r3, #1
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800574e:	b29b      	uxth	r3, r3
 8005750:	3b01      	subs	r3, #1
 8005752:	b29a      	uxth	r2, r3
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	86da      	strh	r2, [r3, #54]	; 0x36
 8005758:	e011      	b.n	800577e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800575a:	f7fe f897 	bl	800388c <HAL_GetTick>
 800575e:	4602      	mov	r2, r0
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	683a      	ldr	r2, [r7, #0]
 8005766:	429a      	cmp	r2, r3
 8005768:	d803      	bhi.n	8005772 <HAL_SPI_Transmit+0x204>
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005770:	d102      	bne.n	8005778 <HAL_SPI_Transmit+0x20a>
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d102      	bne.n	800577e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005778:	2303      	movs	r3, #3
 800577a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800577c:	e026      	b.n	80057cc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005782:	b29b      	uxth	r3, r3
 8005784:	2b00      	cmp	r3, #0
 8005786:	d1cd      	bne.n	8005724 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005788:	69ba      	ldr	r2, [r7, #24]
 800578a:	6839      	ldr	r1, [r7, #0]
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	f000 fa55 	bl	8005c3c <SPI_EndRxTxTransaction>
 8005792:	4603      	mov	r3, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d002      	beq.n	800579e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2220      	movs	r2, #32
 800579c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d10a      	bne.n	80057bc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057a6:	2300      	movs	r3, #0
 80057a8:	613b      	str	r3, [r7, #16]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	613b      	str	r3, [r7, #16]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	613b      	str	r3, [r7, #16]
 80057ba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d002      	beq.n	80057ca <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	77fb      	strb	r3, [r7, #31]
 80057c8:	e000      	b.n	80057cc <HAL_SPI_Transmit+0x25e>
  }

error:
 80057ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80057dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3720      	adds	r7, #32
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}

080057e6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80057e6:	b580      	push	{r7, lr}
 80057e8:	b08c      	sub	sp, #48	; 0x30
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	60f8      	str	r0, [r7, #12]
 80057ee:	60b9      	str	r1, [r7, #8]
 80057f0:	607a      	str	r2, [r7, #4]
 80057f2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80057f4:	2301      	movs	r3, #1
 80057f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80057f8:	2300      	movs	r3, #0
 80057fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005804:	2b01      	cmp	r3, #1
 8005806:	d101      	bne.n	800580c <HAL_SPI_TransmitReceive+0x26>
 8005808:	2302      	movs	r3, #2
 800580a:	e18a      	b.n	8005b22 <HAL_SPI_TransmitReceive+0x33c>
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005814:	f7fe f83a 	bl	800388c <HAL_GetTick>
 8005818:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005820:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800582a:	887b      	ldrh	r3, [r7, #2]
 800582c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800582e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005832:	2b01      	cmp	r3, #1
 8005834:	d00f      	beq.n	8005856 <HAL_SPI_TransmitReceive+0x70>
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800583c:	d107      	bne.n	800584e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d103      	bne.n	800584e <HAL_SPI_TransmitReceive+0x68>
 8005846:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800584a:	2b04      	cmp	r3, #4
 800584c:	d003      	beq.n	8005856 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800584e:	2302      	movs	r3, #2
 8005850:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005854:	e15b      	b.n	8005b0e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d005      	beq.n	8005868 <HAL_SPI_TransmitReceive+0x82>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d002      	beq.n	8005868 <HAL_SPI_TransmitReceive+0x82>
 8005862:	887b      	ldrh	r3, [r7, #2]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d103      	bne.n	8005870 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800586e:	e14e      	b.n	8005b0e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005876:	b2db      	uxtb	r3, r3
 8005878:	2b04      	cmp	r3, #4
 800587a:	d003      	beq.n	8005884 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2205      	movs	r2, #5
 8005880:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2200      	movs	r2, #0
 8005888:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	887a      	ldrh	r2, [r7, #2]
 8005894:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	887a      	ldrh	r2, [r7, #2]
 800589a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	68ba      	ldr	r2, [r7, #8]
 80058a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	887a      	ldrh	r2, [r7, #2]
 80058a6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	887a      	ldrh	r2, [r7, #2]
 80058ac:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2200      	movs	r2, #0
 80058b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2200      	movs	r2, #0
 80058b8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c4:	2b40      	cmp	r3, #64	; 0x40
 80058c6:	d007      	beq.n	80058d8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058e0:	d178      	bne.n	80059d4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d002      	beq.n	80058f0 <HAL_SPI_TransmitReceive+0x10a>
 80058ea:	8b7b      	ldrh	r3, [r7, #26]
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d166      	bne.n	80059be <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f4:	881a      	ldrh	r2, [r3, #0]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005900:	1c9a      	adds	r2, r3, #2
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800590a:	b29b      	uxth	r3, r3
 800590c:	3b01      	subs	r3, #1
 800590e:	b29a      	uxth	r2, r3
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005914:	e053      	b.n	80059be <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	f003 0302 	and.w	r3, r3, #2
 8005920:	2b02      	cmp	r3, #2
 8005922:	d11b      	bne.n	800595c <HAL_SPI_TransmitReceive+0x176>
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005928:	b29b      	uxth	r3, r3
 800592a:	2b00      	cmp	r3, #0
 800592c:	d016      	beq.n	800595c <HAL_SPI_TransmitReceive+0x176>
 800592e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005930:	2b01      	cmp	r3, #1
 8005932:	d113      	bne.n	800595c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005938:	881a      	ldrh	r2, [r3, #0]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005944:	1c9a      	adds	r2, r3, #2
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800594e:	b29b      	uxth	r3, r3
 8005950:	3b01      	subs	r3, #1
 8005952:	b29a      	uxth	r2, r3
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005958:	2300      	movs	r3, #0
 800595a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f003 0301 	and.w	r3, r3, #1
 8005966:	2b01      	cmp	r3, #1
 8005968:	d119      	bne.n	800599e <HAL_SPI_TransmitReceive+0x1b8>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800596e:	b29b      	uxth	r3, r3
 8005970:	2b00      	cmp	r3, #0
 8005972:	d014      	beq.n	800599e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68da      	ldr	r2, [r3, #12]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800597e:	b292      	uxth	r2, r2
 8005980:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005986:	1c9a      	adds	r2, r3, #2
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005990:	b29b      	uxth	r3, r3
 8005992:	3b01      	subs	r3, #1
 8005994:	b29a      	uxth	r2, r3
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800599a:	2301      	movs	r3, #1
 800599c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800599e:	f7fd ff75 	bl	800388c <HAL_GetTick>
 80059a2:	4602      	mov	r2, r0
 80059a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d807      	bhi.n	80059be <HAL_SPI_TransmitReceive+0x1d8>
 80059ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b4:	d003      	beq.n	80059be <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80059bc:	e0a7      	b.n	8005b0e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d1a6      	bne.n	8005916 <HAL_SPI_TransmitReceive+0x130>
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d1a1      	bne.n	8005916 <HAL_SPI_TransmitReceive+0x130>
 80059d2:	e07c      	b.n	8005ace <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d002      	beq.n	80059e2 <HAL_SPI_TransmitReceive+0x1fc>
 80059dc:	8b7b      	ldrh	r3, [r7, #26]
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d16b      	bne.n	8005aba <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	330c      	adds	r3, #12
 80059ec:	7812      	ldrb	r2, [r2, #0]
 80059ee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f4:	1c5a      	adds	r2, r3, #1
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	3b01      	subs	r3, #1
 8005a02:	b29a      	uxth	r2, r3
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a08:	e057      	b.n	8005aba <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f003 0302 	and.w	r3, r3, #2
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d11c      	bne.n	8005a52 <HAL_SPI_TransmitReceive+0x26c>
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d017      	beq.n	8005a52 <HAL_SPI_TransmitReceive+0x26c>
 8005a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d114      	bne.n	8005a52 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	330c      	adds	r3, #12
 8005a32:	7812      	ldrb	r2, [r2, #0]
 8005a34:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a3a:	1c5a      	adds	r2, r3, #1
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	3b01      	subs	r3, #1
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f003 0301 	and.w	r3, r3, #1
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d119      	bne.n	8005a94 <HAL_SPI_TransmitReceive+0x2ae>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d014      	beq.n	8005a94 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	68da      	ldr	r2, [r3, #12]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a74:	b2d2      	uxtb	r2, r2
 8005a76:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a7c:	1c5a      	adds	r2, r3, #1
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	3b01      	subs	r3, #1
 8005a8a:	b29a      	uxth	r2, r3
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a90:	2301      	movs	r3, #1
 8005a92:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005a94:	f7fd fefa 	bl	800388c <HAL_GetTick>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d803      	bhi.n	8005aac <HAL_SPI_TransmitReceive+0x2c6>
 8005aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aaa:	d102      	bne.n	8005ab2 <HAL_SPI_TransmitReceive+0x2cc>
 8005aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d103      	bne.n	8005aba <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005ab8:	e029      	b.n	8005b0e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d1a2      	bne.n	8005a0a <HAL_SPI_TransmitReceive+0x224>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d19d      	bne.n	8005a0a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ad0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005ad2:	68f8      	ldr	r0, [r7, #12]
 8005ad4:	f000 f8b2 	bl	8005c3c <SPI_EndRxTxTransaction>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d006      	beq.n	8005aec <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2220      	movs	r2, #32
 8005ae8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005aea:	e010      	b.n	8005b0e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d10b      	bne.n	8005b0c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005af4:	2300      	movs	r3, #0
 8005af6:	617b      	str	r3, [r7, #20]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	617b      	str	r3, [r7, #20]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	617b      	str	r3, [r7, #20]
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	e000      	b.n	8005b0e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005b0c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2201      	movs	r2, #1
 8005b12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005b1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3730      	adds	r7, #48	; 0x30
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
	...

08005b2c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b088      	sub	sp, #32
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	603b      	str	r3, [r7, #0]
 8005b38:	4613      	mov	r3, r2
 8005b3a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005b3c:	f7fd fea6 	bl	800388c <HAL_GetTick>
 8005b40:	4602      	mov	r2, r0
 8005b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b44:	1a9b      	subs	r3, r3, r2
 8005b46:	683a      	ldr	r2, [r7, #0]
 8005b48:	4413      	add	r3, r2
 8005b4a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005b4c:	f7fd fe9e 	bl	800388c <HAL_GetTick>
 8005b50:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005b52:	4b39      	ldr	r3, [pc, #228]	; (8005c38 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	015b      	lsls	r3, r3, #5
 8005b58:	0d1b      	lsrs	r3, r3, #20
 8005b5a:	69fa      	ldr	r2, [r7, #28]
 8005b5c:	fb02 f303 	mul.w	r3, r2, r3
 8005b60:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b62:	e054      	b.n	8005c0e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b6a:	d050      	beq.n	8005c0e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005b6c:	f7fd fe8e 	bl	800388c <HAL_GetTick>
 8005b70:	4602      	mov	r2, r0
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	69fa      	ldr	r2, [r7, #28]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d902      	bls.n	8005b82 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d13d      	bne.n	8005bfe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	685a      	ldr	r2, [r3, #4]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005b90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b9a:	d111      	bne.n	8005bc0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ba4:	d004      	beq.n	8005bb0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bae:	d107      	bne.n	8005bc0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bbe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bc8:	d10f      	bne.n	8005bea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005bd8:	601a      	str	r2, [r3, #0]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005be8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2201      	movs	r2, #1
 8005bee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e017      	b.n	8005c2e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d101      	bne.n	8005c08 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005c04:	2300      	movs	r3, #0
 8005c06:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	3b01      	subs	r3, #1
 8005c0c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	689a      	ldr	r2, [r3, #8]
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	4013      	ands	r3, r2
 8005c18:	68ba      	ldr	r2, [r7, #8]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	bf0c      	ite	eq
 8005c1e:	2301      	moveq	r3, #1
 8005c20:	2300      	movne	r3, #0
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	461a      	mov	r2, r3
 8005c26:	79fb      	ldrb	r3, [r7, #7]
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d19b      	bne.n	8005b64 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3720      	adds	r7, #32
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	20000028 	.word	0x20000028

08005c3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b088      	sub	sp, #32
 8005c40:	af02      	add	r7, sp, #8
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005c48:	4b1b      	ldr	r3, [pc, #108]	; (8005cb8 <SPI_EndRxTxTransaction+0x7c>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a1b      	ldr	r2, [pc, #108]	; (8005cbc <SPI_EndRxTxTransaction+0x80>)
 8005c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c52:	0d5b      	lsrs	r3, r3, #21
 8005c54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005c58:	fb02 f303 	mul.w	r3, r2, r3
 8005c5c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c66:	d112      	bne.n	8005c8e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	9300      	str	r3, [sp, #0]
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	2180      	movs	r1, #128	; 0x80
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	f7ff ff5a 	bl	8005b2c <SPI_WaitFlagStateUntilTimeout>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d016      	beq.n	8005cac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c82:	f043 0220 	orr.w	r2, r3, #32
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e00f      	b.n	8005cae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d00a      	beq.n	8005caa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	3b01      	subs	r3, #1
 8005c98:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ca4:	2b80      	cmp	r3, #128	; 0x80
 8005ca6:	d0f2      	beq.n	8005c8e <SPI_EndRxTxTransaction+0x52>
 8005ca8:	e000      	b.n	8005cac <SPI_EndRxTxTransaction+0x70>
        break;
 8005caa:	bf00      	nop
  }

  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3718      	adds	r7, #24
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	20000028 	.word	0x20000028
 8005cbc:	165e9f81 	.word	0x165e9f81

08005cc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b082      	sub	sp, #8
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d101      	bne.n	8005cd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e041      	b.n	8005d56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d106      	bne.n	8005cec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 f839 	bl	8005d5e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2202      	movs	r2, #2
 8005cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	3304      	adds	r3, #4
 8005cfc:	4619      	mov	r1, r3
 8005cfe:	4610      	mov	r0, r2
 8005d00:	f000 f9d8 	bl	80060b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3708      	adds	r7, #8
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}

08005d5e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005d5e:	b480      	push	{r7}
 8005d60:	b083      	sub	sp, #12
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005d66:	bf00      	nop
 8005d68:	370c      	adds	r7, #12
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
	...

08005d74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b085      	sub	sp, #20
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d001      	beq.n	8005d8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e04e      	b.n	8005e2a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2202      	movs	r2, #2
 8005d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68da      	ldr	r2, [r3, #12]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f042 0201 	orr.w	r2, r2, #1
 8005da2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a23      	ldr	r2, [pc, #140]	; (8005e38 <HAL_TIM_Base_Start_IT+0xc4>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d022      	beq.n	8005df4 <HAL_TIM_Base_Start_IT+0x80>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005db6:	d01d      	beq.n	8005df4 <HAL_TIM_Base_Start_IT+0x80>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a1f      	ldr	r2, [pc, #124]	; (8005e3c <HAL_TIM_Base_Start_IT+0xc8>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d018      	beq.n	8005df4 <HAL_TIM_Base_Start_IT+0x80>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a1e      	ldr	r2, [pc, #120]	; (8005e40 <HAL_TIM_Base_Start_IT+0xcc>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d013      	beq.n	8005df4 <HAL_TIM_Base_Start_IT+0x80>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a1c      	ldr	r2, [pc, #112]	; (8005e44 <HAL_TIM_Base_Start_IT+0xd0>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d00e      	beq.n	8005df4 <HAL_TIM_Base_Start_IT+0x80>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a1b      	ldr	r2, [pc, #108]	; (8005e48 <HAL_TIM_Base_Start_IT+0xd4>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d009      	beq.n	8005df4 <HAL_TIM_Base_Start_IT+0x80>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a19      	ldr	r2, [pc, #100]	; (8005e4c <HAL_TIM_Base_Start_IT+0xd8>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d004      	beq.n	8005df4 <HAL_TIM_Base_Start_IT+0x80>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a18      	ldr	r2, [pc, #96]	; (8005e50 <HAL_TIM_Base_Start_IT+0xdc>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d111      	bne.n	8005e18 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	f003 0307 	and.w	r3, r3, #7
 8005dfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2b06      	cmp	r3, #6
 8005e04:	d010      	beq.n	8005e28 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f042 0201 	orr.w	r2, r2, #1
 8005e14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e16:	e007      	b.n	8005e28 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f042 0201 	orr.w	r2, r2, #1
 8005e26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3714      	adds	r7, #20
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop
 8005e38:	40010000 	.word	0x40010000
 8005e3c:	40000400 	.word	0x40000400
 8005e40:	40000800 	.word	0x40000800
 8005e44:	40000c00 	.word	0x40000c00
 8005e48:	40010400 	.word	0x40010400
 8005e4c:	40014000 	.word	0x40014000
 8005e50:	40001800 	.word	0x40001800

08005e54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	f003 0302 	and.w	r3, r3, #2
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	d122      	bne.n	8005eb0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	f003 0302 	and.w	r3, r3, #2
 8005e74:	2b02      	cmp	r3, #2
 8005e76:	d11b      	bne.n	8005eb0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f06f 0202 	mvn.w	r2, #2
 8005e80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2201      	movs	r2, #1
 8005e86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	699b      	ldr	r3, [r3, #24]
 8005e8e:	f003 0303 	and.w	r3, r3, #3
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d003      	beq.n	8005e9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 f8ee 	bl	8006078 <HAL_TIM_IC_CaptureCallback>
 8005e9c:	e005      	b.n	8005eaa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 f8e0 	bl	8006064 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 f8f1 	bl	800608c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	f003 0304 	and.w	r3, r3, #4
 8005eba:	2b04      	cmp	r3, #4
 8005ebc:	d122      	bne.n	8005f04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	f003 0304 	and.w	r3, r3, #4
 8005ec8:	2b04      	cmp	r3, #4
 8005eca:	d11b      	bne.n	8005f04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f06f 0204 	mvn.w	r2, #4
 8005ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2202      	movs	r2, #2
 8005eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	699b      	ldr	r3, [r3, #24]
 8005ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d003      	beq.n	8005ef2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 f8c4 	bl	8006078 <HAL_TIM_IC_CaptureCallback>
 8005ef0:	e005      	b.n	8005efe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 f8b6 	bl	8006064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 f8c7 	bl	800608c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	f003 0308 	and.w	r3, r3, #8
 8005f0e:	2b08      	cmp	r3, #8
 8005f10:	d122      	bne.n	8005f58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	f003 0308 	and.w	r3, r3, #8
 8005f1c:	2b08      	cmp	r3, #8
 8005f1e:	d11b      	bne.n	8005f58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f06f 0208 	mvn.w	r2, #8
 8005f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2204      	movs	r2, #4
 8005f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	69db      	ldr	r3, [r3, #28]
 8005f36:	f003 0303 	and.w	r3, r3, #3
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d003      	beq.n	8005f46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 f89a 	bl	8006078 <HAL_TIM_IC_CaptureCallback>
 8005f44:	e005      	b.n	8005f52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 f88c 	bl	8006064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 f89d 	bl	800608c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	f003 0310 	and.w	r3, r3, #16
 8005f62:	2b10      	cmp	r3, #16
 8005f64:	d122      	bne.n	8005fac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	f003 0310 	and.w	r3, r3, #16
 8005f70:	2b10      	cmp	r3, #16
 8005f72:	d11b      	bne.n	8005fac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f06f 0210 	mvn.w	r2, #16
 8005f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2208      	movs	r2, #8
 8005f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	69db      	ldr	r3, [r3, #28]
 8005f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d003      	beq.n	8005f9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 f870 	bl	8006078 <HAL_TIM_IC_CaptureCallback>
 8005f98:	e005      	b.n	8005fa6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 f862 	bl	8006064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 f873 	bl	800608c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	f003 0301 	and.w	r3, r3, #1
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d10e      	bne.n	8005fd8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	f003 0301 	and.w	r3, r3, #1
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d107      	bne.n	8005fd8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f06f 0201 	mvn.w	r2, #1
 8005fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f7fc fd02 	bl	80029dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fe2:	2b80      	cmp	r3, #128	; 0x80
 8005fe4:	d10e      	bne.n	8006004 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ff0:	2b80      	cmp	r3, #128	; 0x80
 8005ff2:	d107      	bne.n	8006004 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 f902 	bl	8006208 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800600e:	2b40      	cmp	r3, #64	; 0x40
 8006010:	d10e      	bne.n	8006030 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800601c:	2b40      	cmp	r3, #64	; 0x40
 800601e:	d107      	bne.n	8006030 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 f838 	bl	80060a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	f003 0320 	and.w	r3, r3, #32
 800603a:	2b20      	cmp	r3, #32
 800603c:	d10e      	bne.n	800605c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	f003 0320 	and.w	r3, r3, #32
 8006048:	2b20      	cmp	r3, #32
 800604a:	d107      	bne.n	800605c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f06f 0220 	mvn.w	r2, #32
 8006054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 f8cc 	bl	80061f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800605c:	bf00      	nop
 800605e:	3708      	adds	r7, #8
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800606c:	bf00      	nop
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006080:	bf00      	nop
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006094:	bf00      	nop
 8006096:	370c      	adds	r7, #12
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060a8:	bf00      	nop
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b085      	sub	sp, #20
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a40      	ldr	r2, [pc, #256]	; (80061c8 <TIM_Base_SetConfig+0x114>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d013      	beq.n	80060f4 <TIM_Base_SetConfig+0x40>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060d2:	d00f      	beq.n	80060f4 <TIM_Base_SetConfig+0x40>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4a3d      	ldr	r2, [pc, #244]	; (80061cc <TIM_Base_SetConfig+0x118>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d00b      	beq.n	80060f4 <TIM_Base_SetConfig+0x40>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a3c      	ldr	r2, [pc, #240]	; (80061d0 <TIM_Base_SetConfig+0x11c>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d007      	beq.n	80060f4 <TIM_Base_SetConfig+0x40>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a3b      	ldr	r2, [pc, #236]	; (80061d4 <TIM_Base_SetConfig+0x120>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d003      	beq.n	80060f4 <TIM_Base_SetConfig+0x40>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a3a      	ldr	r2, [pc, #232]	; (80061d8 <TIM_Base_SetConfig+0x124>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d108      	bne.n	8006106 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	68fa      	ldr	r2, [r7, #12]
 8006102:	4313      	orrs	r3, r2
 8006104:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4a2f      	ldr	r2, [pc, #188]	; (80061c8 <TIM_Base_SetConfig+0x114>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d02b      	beq.n	8006166 <TIM_Base_SetConfig+0xb2>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006114:	d027      	beq.n	8006166 <TIM_Base_SetConfig+0xb2>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a2c      	ldr	r2, [pc, #176]	; (80061cc <TIM_Base_SetConfig+0x118>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d023      	beq.n	8006166 <TIM_Base_SetConfig+0xb2>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a2b      	ldr	r2, [pc, #172]	; (80061d0 <TIM_Base_SetConfig+0x11c>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d01f      	beq.n	8006166 <TIM_Base_SetConfig+0xb2>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a2a      	ldr	r2, [pc, #168]	; (80061d4 <TIM_Base_SetConfig+0x120>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d01b      	beq.n	8006166 <TIM_Base_SetConfig+0xb2>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4a29      	ldr	r2, [pc, #164]	; (80061d8 <TIM_Base_SetConfig+0x124>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d017      	beq.n	8006166 <TIM_Base_SetConfig+0xb2>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4a28      	ldr	r2, [pc, #160]	; (80061dc <TIM_Base_SetConfig+0x128>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d013      	beq.n	8006166 <TIM_Base_SetConfig+0xb2>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a27      	ldr	r2, [pc, #156]	; (80061e0 <TIM_Base_SetConfig+0x12c>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d00f      	beq.n	8006166 <TIM_Base_SetConfig+0xb2>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a26      	ldr	r2, [pc, #152]	; (80061e4 <TIM_Base_SetConfig+0x130>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d00b      	beq.n	8006166 <TIM_Base_SetConfig+0xb2>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a25      	ldr	r2, [pc, #148]	; (80061e8 <TIM_Base_SetConfig+0x134>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d007      	beq.n	8006166 <TIM_Base_SetConfig+0xb2>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4a24      	ldr	r2, [pc, #144]	; (80061ec <TIM_Base_SetConfig+0x138>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d003      	beq.n	8006166 <TIM_Base_SetConfig+0xb2>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a23      	ldr	r2, [pc, #140]	; (80061f0 <TIM_Base_SetConfig+0x13c>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d108      	bne.n	8006178 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800616c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	68fa      	ldr	r2, [r7, #12]
 8006174:	4313      	orrs	r3, r2
 8006176:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	695b      	ldr	r3, [r3, #20]
 8006182:	4313      	orrs	r3, r2
 8006184:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	689a      	ldr	r2, [r3, #8]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4a0a      	ldr	r2, [pc, #40]	; (80061c8 <TIM_Base_SetConfig+0x114>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d003      	beq.n	80061ac <TIM_Base_SetConfig+0xf8>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4a0c      	ldr	r2, [pc, #48]	; (80061d8 <TIM_Base_SetConfig+0x124>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d103      	bne.n	80061b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	691a      	ldr	r2, [r3, #16]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	615a      	str	r2, [r3, #20]
}
 80061ba:	bf00      	nop
 80061bc:	3714      	adds	r7, #20
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr
 80061c6:	bf00      	nop
 80061c8:	40010000 	.word	0x40010000
 80061cc:	40000400 	.word	0x40000400
 80061d0:	40000800 	.word	0x40000800
 80061d4:	40000c00 	.word	0x40000c00
 80061d8:	40010400 	.word	0x40010400
 80061dc:	40014000 	.word	0x40014000
 80061e0:	40014400 	.word	0x40014400
 80061e4:	40014800 	.word	0x40014800
 80061e8:	40001800 	.word	0x40001800
 80061ec:	40001c00 	.word	0x40001c00
 80061f0:	40002000 	.word	0x40002000

080061f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006210:	bf00      	nop
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b082      	sub	sp, #8
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d101      	bne.n	800622e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e03f      	b.n	80062ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006234:	b2db      	uxtb	r3, r3
 8006236:	2b00      	cmp	r3, #0
 8006238:	d106      	bne.n	8006248 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f7fc fc9e 	bl	8002b84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2224      	movs	r2, #36	; 0x24
 800624c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68da      	ldr	r2, [r3, #12]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800625e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f001 f917 	bl	8007494 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	691a      	ldr	r2, [r3, #16]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006274:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	695a      	ldr	r2, [r3, #20]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006284:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	68da      	ldr	r2, [r3, #12]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006294:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2220      	movs	r2, #32
 80062a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2220      	movs	r2, #32
 80062a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3708      	adds	r7, #8
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}

080062b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062b6:	b580      	push	{r7, lr}
 80062b8:	b08a      	sub	sp, #40	; 0x28
 80062ba:	af02      	add	r7, sp, #8
 80062bc:	60f8      	str	r0, [r7, #12]
 80062be:	60b9      	str	r1, [r7, #8]
 80062c0:	603b      	str	r3, [r7, #0]
 80062c2:	4613      	mov	r3, r2
 80062c4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80062c6:	2300      	movs	r3, #0
 80062c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	2b20      	cmp	r3, #32
 80062d4:	d17c      	bne.n	80063d0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d002      	beq.n	80062e2 <HAL_UART_Transmit+0x2c>
 80062dc:	88fb      	ldrh	r3, [r7, #6]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d101      	bne.n	80062e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	e075      	b.n	80063d2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d101      	bne.n	80062f4 <HAL_UART_Transmit+0x3e>
 80062f0:	2302      	movs	r3, #2
 80062f2:	e06e      	b.n	80063d2 <HAL_UART_Transmit+0x11c>
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2200      	movs	r2, #0
 8006300:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2221      	movs	r2, #33	; 0x21
 8006306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800630a:	f7fd fabf 	bl	800388c <HAL_GetTick>
 800630e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	88fa      	ldrh	r2, [r7, #6]
 8006314:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	88fa      	ldrh	r2, [r7, #6]
 800631a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006324:	d108      	bne.n	8006338 <HAL_UART_Transmit+0x82>
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d104      	bne.n	8006338 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800632e:	2300      	movs	r3, #0
 8006330:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	61bb      	str	r3, [r7, #24]
 8006336:	e003      	b.n	8006340 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800633c:	2300      	movs	r3, #0
 800633e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2200      	movs	r2, #0
 8006344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006348:	e02a      	b.n	80063a0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	9300      	str	r3, [sp, #0]
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	2200      	movs	r2, #0
 8006352:	2180      	movs	r1, #128	; 0x80
 8006354:	68f8      	ldr	r0, [r7, #12]
 8006356:	f000 fdd2 	bl	8006efe <UART_WaitOnFlagUntilTimeout>
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d001      	beq.n	8006364 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006360:	2303      	movs	r3, #3
 8006362:	e036      	b.n	80063d2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d10b      	bne.n	8006382 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800636a:	69bb      	ldr	r3, [r7, #24]
 800636c:	881b      	ldrh	r3, [r3, #0]
 800636e:	461a      	mov	r2, r3
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006378:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	3302      	adds	r3, #2
 800637e:	61bb      	str	r3, [r7, #24]
 8006380:	e007      	b.n	8006392 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	781a      	ldrb	r2, [r3, #0]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	3301      	adds	r3, #1
 8006390:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006396:	b29b      	uxth	r3, r3
 8006398:	3b01      	subs	r3, #1
 800639a:	b29a      	uxth	r2, r3
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d1cf      	bne.n	800634a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	9300      	str	r3, [sp, #0]
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	2200      	movs	r2, #0
 80063b2:	2140      	movs	r1, #64	; 0x40
 80063b4:	68f8      	ldr	r0, [r7, #12]
 80063b6:	f000 fda2 	bl	8006efe <UART_WaitOnFlagUntilTimeout>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d001      	beq.n	80063c4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80063c0:	2303      	movs	r3, #3
 80063c2:	e006      	b.n	80063d2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2220      	movs	r2, #32
 80063c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80063cc:	2300      	movs	r3, #0
 80063ce:	e000      	b.n	80063d2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80063d0:	2302      	movs	r3, #2
  }
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3720      	adds	r7, #32
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}

080063da <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063da:	b480      	push	{r7}
 80063dc:	b085      	sub	sp, #20
 80063de:	af00      	add	r7, sp, #0
 80063e0:	60f8      	str	r0, [r7, #12]
 80063e2:	60b9      	str	r1, [r7, #8]
 80063e4:	4613      	mov	r3, r2
 80063e6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	2b20      	cmp	r3, #32
 80063f2:	d130      	bne.n	8006456 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d002      	beq.n	8006400 <HAL_UART_Transmit_IT+0x26>
 80063fa:	88fb      	ldrh	r3, [r7, #6]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d101      	bne.n	8006404 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	e029      	b.n	8006458 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800640a:	2b01      	cmp	r3, #1
 800640c:	d101      	bne.n	8006412 <HAL_UART_Transmit_IT+0x38>
 800640e:	2302      	movs	r3, #2
 8006410:	e022      	b.n	8006458 <HAL_UART_Transmit_IT+0x7e>
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2201      	movs	r2, #1
 8006416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	68ba      	ldr	r2, [r7, #8]
 800641e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	88fa      	ldrh	r2, [r7, #6]
 8006424:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	88fa      	ldrh	r2, [r7, #6]
 800642a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2200      	movs	r2, #0
 8006430:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2221      	movs	r2, #33	; 0x21
 8006436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2200      	movs	r2, #0
 800643e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	68da      	ldr	r2, [r3, #12]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006450:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006452:	2300      	movs	r3, #0
 8006454:	e000      	b.n	8006458 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8006456:	2302      	movs	r3, #2
  }
}
 8006458:	4618      	mov	r0, r3
 800645a:	3714      	adds	r7, #20
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b08c      	sub	sp, #48	; 0x30
 8006468:	af00      	add	r7, sp, #0
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	4613      	mov	r3, r2
 8006470:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006478:	b2db      	uxtb	r3, r3
 800647a:	2b20      	cmp	r3, #32
 800647c:	d165      	bne.n	800654a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d002      	beq.n	800648a <HAL_UART_Transmit_DMA+0x26>
 8006484:	88fb      	ldrh	r3, [r7, #6]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d101      	bne.n	800648e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e05e      	b.n	800654c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006494:	2b01      	cmp	r3, #1
 8006496:	d101      	bne.n	800649c <HAL_UART_Transmit_DMA+0x38>
 8006498:	2302      	movs	r3, #2
 800649a:	e057      	b.n	800654c <HAL_UART_Transmit_DMA+0xe8>
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80064a4:	68ba      	ldr	r2, [r7, #8]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	88fa      	ldrh	r2, [r7, #6]
 80064ae:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	88fa      	ldrh	r2, [r7, #6]
 80064b4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2200      	movs	r2, #0
 80064ba:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2221      	movs	r2, #33	; 0x21
 80064c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064c8:	4a22      	ldr	r2, [pc, #136]	; (8006554 <HAL_UART_Transmit_DMA+0xf0>)
 80064ca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064d0:	4a21      	ldr	r2, [pc, #132]	; (8006558 <HAL_UART_Transmit_DMA+0xf4>)
 80064d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064d8:	4a20      	ldr	r2, [pc, #128]	; (800655c <HAL_UART_Transmit_DMA+0xf8>)
 80064da:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064e0:	2200      	movs	r2, #0
 80064e2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80064e4:	f107 0308 	add.w	r3, r7, #8
 80064e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80064ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f0:	6819      	ldr	r1, [r3, #0]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	3304      	adds	r3, #4
 80064f8:	461a      	mov	r2, r3
 80064fa:	88fb      	ldrh	r3, [r7, #6]
 80064fc:	f7fd fba2 	bl	8003c44 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006508:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2200      	movs	r2, #0
 800650e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	3314      	adds	r3, #20
 8006518:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	e853 3f00 	ldrex	r3, [r3]
 8006520:	617b      	str	r3, [r7, #20]
   return(result);
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006528:	62bb      	str	r3, [r7, #40]	; 0x28
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	3314      	adds	r3, #20
 8006530:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006532:	627a      	str	r2, [r7, #36]	; 0x24
 8006534:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006536:	6a39      	ldr	r1, [r7, #32]
 8006538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800653a:	e841 2300 	strex	r3, r2, [r1]
 800653e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1e5      	bne.n	8006512 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8006546:	2300      	movs	r3, #0
 8006548:	e000      	b.n	800654c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800654a:	2302      	movs	r3, #2
  }
}
 800654c:	4618      	mov	r0, r3
 800654e:	3730      	adds	r7, #48	; 0x30
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}
 8006554:	08006c59 	.word	0x08006c59
 8006558:	08006cf3 	.word	0x08006cf3
 800655c:	08006e6b 	.word	0x08006e6b

08006560 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	60f8      	str	r0, [r7, #12]
 8006568:	60b9      	str	r1, [r7, #8]
 800656a:	4613      	mov	r3, r2
 800656c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006574:	b2db      	uxtb	r3, r3
 8006576:	2b20      	cmp	r3, #32
 8006578:	d11d      	bne.n	80065b6 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d002      	beq.n	8006586 <HAL_UART_Receive_DMA+0x26>
 8006580:	88fb      	ldrh	r3, [r7, #6]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d101      	bne.n	800658a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	e016      	b.n	80065b8 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006590:	2b01      	cmp	r3, #1
 8006592:	d101      	bne.n	8006598 <HAL_UART_Receive_DMA+0x38>
 8006594:	2302      	movs	r3, #2
 8006596:	e00f      	b.n	80065b8 <HAL_UART_Receive_DMA+0x58>
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2200      	movs	r2, #0
 80065a4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80065a6:	88fb      	ldrh	r3, [r7, #6]
 80065a8:	461a      	mov	r2, r3
 80065aa:	68b9      	ldr	r1, [r7, #8]
 80065ac:	68f8      	ldr	r0, [r7, #12]
 80065ae:	f000 fd15 	bl	8006fdc <UART_Start_Receive_DMA>
 80065b2:	4603      	mov	r3, r0
 80065b4:	e000      	b.n	80065b8 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80065b6:	2302      	movs	r3, #2
  }
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3710      	adds	r7, #16
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b090      	sub	sp, #64	; 0x40
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80065c8:	2300      	movs	r3, #0
 80065ca:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	695b      	ldr	r3, [r3, #20]
 80065d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065d6:	2b80      	cmp	r3, #128	; 0x80
 80065d8:	bf0c      	ite	eq
 80065da:	2301      	moveq	r3, #1
 80065dc:	2300      	movne	r3, #0
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	2b21      	cmp	r3, #33	; 0x21
 80065ec:	d128      	bne.n	8006640 <HAL_UART_DMAStop+0x80>
 80065ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d025      	beq.n	8006640 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	3314      	adds	r3, #20
 80065fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fe:	e853 3f00 	ldrex	r3, [r3]
 8006602:	623b      	str	r3, [r7, #32]
   return(result);
 8006604:	6a3b      	ldr	r3, [r7, #32]
 8006606:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800660a:	63bb      	str	r3, [r7, #56]	; 0x38
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	3314      	adds	r3, #20
 8006612:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006614:	633a      	str	r2, [r7, #48]	; 0x30
 8006616:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006618:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800661a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800661c:	e841 2300 	strex	r3, r2, [r1]
 8006620:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006624:	2b00      	cmp	r3, #0
 8006626:	d1e5      	bne.n	80065f4 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800662c:	2b00      	cmp	r3, #0
 800662e:	d004      	beq.n	800663a <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006634:	4618      	mov	r0, r3
 8006636:	f7fd fb5d 	bl	8003cf4 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 fd68 	bl	8007110 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	695b      	ldr	r3, [r3, #20]
 8006646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800664a:	2b40      	cmp	r3, #64	; 0x40
 800664c:	bf0c      	ite	eq
 800664e:	2301      	moveq	r3, #1
 8006650:	2300      	movne	r3, #0
 8006652:	b2db      	uxtb	r3, r3
 8006654:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800665c:	b2db      	uxtb	r3, r3
 800665e:	2b22      	cmp	r3, #34	; 0x22
 8006660:	d128      	bne.n	80066b4 <HAL_UART_DMAStop+0xf4>
 8006662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006664:	2b00      	cmp	r3, #0
 8006666:	d025      	beq.n	80066b4 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	3314      	adds	r3, #20
 800666e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	e853 3f00 	ldrex	r3, [r3]
 8006676:	60fb      	str	r3, [r7, #12]
   return(result);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800667e:	637b      	str	r3, [r7, #52]	; 0x34
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	3314      	adds	r3, #20
 8006686:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006688:	61fa      	str	r2, [r7, #28]
 800668a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668c:	69b9      	ldr	r1, [r7, #24]
 800668e:	69fa      	ldr	r2, [r7, #28]
 8006690:	e841 2300 	strex	r3, r2, [r1]
 8006694:	617b      	str	r3, [r7, #20]
   return(result);
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d1e5      	bne.n	8006668 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d004      	beq.n	80066ae <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a8:	4618      	mov	r0, r3
 80066aa:	f7fd fb23 	bl	8003cf4 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 fd56 	bl	8007160 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80066b4:	2300      	movs	r3, #0
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3740      	adds	r7, #64	; 0x40
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
	...

080066c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b0ba      	sub	sp, #232	; 0xe8
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	695b      	ldr	r3, [r3, #20]
 80066e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80066e6:	2300      	movs	r3, #0
 80066e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80066ec:	2300      	movs	r3, #0
 80066ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80066f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066f6:	f003 030f 	and.w	r3, r3, #15
 80066fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80066fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006702:	2b00      	cmp	r3, #0
 8006704:	d10f      	bne.n	8006726 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800670a:	f003 0320 	and.w	r3, r3, #32
 800670e:	2b00      	cmp	r3, #0
 8006710:	d009      	beq.n	8006726 <HAL_UART_IRQHandler+0x66>
 8006712:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006716:	f003 0320 	and.w	r3, r3, #32
 800671a:	2b00      	cmp	r3, #0
 800671c:	d003      	beq.n	8006726 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 fdfd 	bl	800731e <UART_Receive_IT>
      return;
 8006724:	e256      	b.n	8006bd4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006726:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800672a:	2b00      	cmp	r3, #0
 800672c:	f000 80de 	beq.w	80068ec <HAL_UART_IRQHandler+0x22c>
 8006730:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006734:	f003 0301 	and.w	r3, r3, #1
 8006738:	2b00      	cmp	r3, #0
 800673a:	d106      	bne.n	800674a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800673c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006740:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006744:	2b00      	cmp	r3, #0
 8006746:	f000 80d1 	beq.w	80068ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800674a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800674e:	f003 0301 	and.w	r3, r3, #1
 8006752:	2b00      	cmp	r3, #0
 8006754:	d00b      	beq.n	800676e <HAL_UART_IRQHandler+0xae>
 8006756:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800675a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800675e:	2b00      	cmp	r3, #0
 8006760:	d005      	beq.n	800676e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006766:	f043 0201 	orr.w	r2, r3, #1
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800676e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006772:	f003 0304 	and.w	r3, r3, #4
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00b      	beq.n	8006792 <HAL_UART_IRQHandler+0xd2>
 800677a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800677e:	f003 0301 	and.w	r3, r3, #1
 8006782:	2b00      	cmp	r3, #0
 8006784:	d005      	beq.n	8006792 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678a:	f043 0202 	orr.w	r2, r3, #2
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006796:	f003 0302 	and.w	r3, r3, #2
 800679a:	2b00      	cmp	r3, #0
 800679c:	d00b      	beq.n	80067b6 <HAL_UART_IRQHandler+0xf6>
 800679e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067a2:	f003 0301 	and.w	r3, r3, #1
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d005      	beq.n	80067b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ae:	f043 0204 	orr.w	r2, r3, #4
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80067b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067ba:	f003 0308 	and.w	r3, r3, #8
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d011      	beq.n	80067e6 <HAL_UART_IRQHandler+0x126>
 80067c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067c6:	f003 0320 	and.w	r3, r3, #32
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d105      	bne.n	80067da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80067ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067d2:	f003 0301 	and.w	r3, r3, #1
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d005      	beq.n	80067e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067de:	f043 0208 	orr.w	r2, r3, #8
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	f000 81ed 	beq.w	8006bca <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80067f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067f4:	f003 0320 	and.w	r3, r3, #32
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d008      	beq.n	800680e <HAL_UART_IRQHandler+0x14e>
 80067fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006800:	f003 0320 	and.w	r3, r3, #32
 8006804:	2b00      	cmp	r3, #0
 8006806:	d002      	beq.n	800680e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f000 fd88 	bl	800731e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	695b      	ldr	r3, [r3, #20]
 8006814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006818:	2b40      	cmp	r3, #64	; 0x40
 800681a:	bf0c      	ite	eq
 800681c:	2301      	moveq	r3, #1
 800681e:	2300      	movne	r3, #0
 8006820:	b2db      	uxtb	r3, r3
 8006822:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682a:	f003 0308 	and.w	r3, r3, #8
 800682e:	2b00      	cmp	r3, #0
 8006830:	d103      	bne.n	800683a <HAL_UART_IRQHandler+0x17a>
 8006832:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006836:	2b00      	cmp	r3, #0
 8006838:	d04f      	beq.n	80068da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 fc90 	bl	8007160 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	695b      	ldr	r3, [r3, #20]
 8006846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800684a:	2b40      	cmp	r3, #64	; 0x40
 800684c:	d141      	bne.n	80068d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	3314      	adds	r3, #20
 8006854:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006858:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800685c:	e853 3f00 	ldrex	r3, [r3]
 8006860:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006864:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006868:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800686c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	3314      	adds	r3, #20
 8006876:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800687a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800687e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006882:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006886:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800688a:	e841 2300 	strex	r3, r2, [r1]
 800688e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006892:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d1d9      	bne.n	800684e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d013      	beq.n	80068ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a6:	4a7d      	ldr	r2, [pc, #500]	; (8006a9c <HAL_UART_IRQHandler+0x3dc>)
 80068a8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ae:	4618      	mov	r0, r3
 80068b0:	f7fd fa90 	bl	8003dd4 <HAL_DMA_Abort_IT>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d016      	beq.n	80068e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80068c4:	4610      	mov	r0, r2
 80068c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068c8:	e00e      	b.n	80068e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 f9ae 	bl	8006c2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068d0:	e00a      	b.n	80068e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 f9aa 	bl	8006c2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068d8:	e006      	b.n	80068e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 f9a6 	bl	8006c2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80068e6:	e170      	b.n	8006bca <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068e8:	bf00      	nop
    return;
 80068ea:	e16e      	b.n	8006bca <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	f040 814a 	bne.w	8006b8a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80068f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068fa:	f003 0310 	and.w	r3, r3, #16
 80068fe:	2b00      	cmp	r3, #0
 8006900:	f000 8143 	beq.w	8006b8a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006904:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006908:	f003 0310 	and.w	r3, r3, #16
 800690c:	2b00      	cmp	r3, #0
 800690e:	f000 813c 	beq.w	8006b8a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006912:	2300      	movs	r3, #0
 8006914:	60bb      	str	r3, [r7, #8]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	60bb      	str	r3, [r7, #8]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	60bb      	str	r3, [r7, #8]
 8006926:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	695b      	ldr	r3, [r3, #20]
 800692e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006932:	2b40      	cmp	r3, #64	; 0x40
 8006934:	f040 80b4 	bne.w	8006aa0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006944:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006948:	2b00      	cmp	r3, #0
 800694a:	f000 8140 	beq.w	8006bce <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006952:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006956:	429a      	cmp	r2, r3
 8006958:	f080 8139 	bcs.w	8006bce <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006962:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006968:	69db      	ldr	r3, [r3, #28]
 800696a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800696e:	f000 8088 	beq.w	8006a82 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	330c      	adds	r3, #12
 8006978:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006980:	e853 3f00 	ldrex	r3, [r3]
 8006984:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006988:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800698c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006990:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	330c      	adds	r3, #12
 800699a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800699e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80069a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80069aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80069ae:	e841 2300 	strex	r3, r2, [r1]
 80069b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80069b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d1d9      	bne.n	8006972 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	3314      	adds	r3, #20
 80069c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069c8:	e853 3f00 	ldrex	r3, [r3]
 80069cc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80069ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069d0:	f023 0301 	bic.w	r3, r3, #1
 80069d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	3314      	adds	r3, #20
 80069de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80069e2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80069e6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80069ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80069ee:	e841 2300 	strex	r3, r2, [r1]
 80069f2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80069f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d1e1      	bne.n	80069be <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	3314      	adds	r3, #20
 8006a00:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a04:	e853 3f00 	ldrex	r3, [r3]
 8006a08:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006a0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	3314      	adds	r3, #20
 8006a1a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006a1e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006a20:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a22:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006a24:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006a26:	e841 2300 	strex	r3, r2, [r1]
 8006a2a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006a2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d1e3      	bne.n	80069fa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2220      	movs	r2, #32
 8006a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	330c      	adds	r3, #12
 8006a46:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a4a:	e853 3f00 	ldrex	r3, [r3]
 8006a4e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006a50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a52:	f023 0310 	bic.w	r3, r3, #16
 8006a56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	330c      	adds	r3, #12
 8006a60:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006a64:	65ba      	str	r2, [r7, #88]	; 0x58
 8006a66:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a68:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006a6a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a6c:	e841 2300 	strex	r3, r2, [r1]
 8006a70:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006a72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d1e3      	bne.n	8006a40 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f7fd f939 	bl	8003cf4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	1ad3      	subs	r3, r2, r3
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	4619      	mov	r1, r3
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 f8d4 	bl	8006c40 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006a98:	e099      	b.n	8006bce <HAL_UART_IRQHandler+0x50e>
 8006a9a:	bf00      	nop
 8006a9c:	08007227 	.word	0x08007227
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	1ad3      	subs	r3, r2, r3
 8006aac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	f000 808b 	beq.w	8006bd2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006abc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	f000 8086 	beq.w	8006bd2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	330c      	adds	r3, #12
 8006acc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad0:	e853 3f00 	ldrex	r3, [r3]
 8006ad4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ad8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006adc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	330c      	adds	r3, #12
 8006ae6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006aea:	647a      	str	r2, [r7, #68]	; 0x44
 8006aec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006af0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006af2:	e841 2300 	strex	r3, r2, [r1]
 8006af6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006af8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d1e3      	bne.n	8006ac6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	3314      	adds	r3, #20
 8006b04:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b08:	e853 3f00 	ldrex	r3, [r3]
 8006b0c:	623b      	str	r3, [r7, #32]
   return(result);
 8006b0e:	6a3b      	ldr	r3, [r7, #32]
 8006b10:	f023 0301 	bic.w	r3, r3, #1
 8006b14:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	3314      	adds	r3, #20
 8006b1e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006b22:	633a      	str	r2, [r7, #48]	; 0x30
 8006b24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b2a:	e841 2300 	strex	r3, r2, [r1]
 8006b2e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d1e3      	bne.n	8006afe <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2220      	movs	r2, #32
 8006b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	330c      	adds	r3, #12
 8006b4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	e853 3f00 	ldrex	r3, [r3]
 8006b52:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f023 0310 	bic.w	r3, r3, #16
 8006b5a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	330c      	adds	r3, #12
 8006b64:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006b68:	61fa      	str	r2, [r7, #28]
 8006b6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6c:	69b9      	ldr	r1, [r7, #24]
 8006b6e:	69fa      	ldr	r2, [r7, #28]
 8006b70:	e841 2300 	strex	r3, r2, [r1]
 8006b74:	617b      	str	r3, [r7, #20]
   return(result);
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d1e3      	bne.n	8006b44 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b80:	4619      	mov	r1, r3
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 f85c 	bl	8006c40 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006b88:	e023      	b.n	8006bd2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d009      	beq.n	8006baa <HAL_UART_IRQHandler+0x4ea>
 8006b96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d003      	beq.n	8006baa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 fb53 	bl	800724e <UART_Transmit_IT>
    return;
 8006ba8:	e014      	b.n	8006bd4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d00e      	beq.n	8006bd4 <HAL_UART_IRQHandler+0x514>
 8006bb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d008      	beq.n	8006bd4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 fb93 	bl	80072ee <UART_EndTransmit_IT>
    return;
 8006bc8:	e004      	b.n	8006bd4 <HAL_UART_IRQHandler+0x514>
    return;
 8006bca:	bf00      	nop
 8006bcc:	e002      	b.n	8006bd4 <HAL_UART_IRQHandler+0x514>
      return;
 8006bce:	bf00      	nop
 8006bd0:	e000      	b.n	8006bd4 <HAL_UART_IRQHandler+0x514>
      return;
 8006bd2:	bf00      	nop
  }
}
 8006bd4:	37e8      	adds	r7, #232	; 0xe8
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop

08006bdc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b083      	sub	sp, #12
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006be4:	bf00      	nop
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006bf8:	bf00      	nop
 8006bfa:	370c      	adds	r7, #12
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006c0c:	bf00      	nop
 8006c0e:	370c      	adds	r7, #12
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006c20:	bf00      	nop
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006c34:	bf00      	nop
 8006c36:	370c      	adds	r7, #12
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	460b      	mov	r3, r1
 8006c4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c4c:	bf00      	nop
 8006c4e:	370c      	adds	r7, #12
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b090      	sub	sp, #64	; 0x40
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c64:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d137      	bne.n	8006ce4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c76:	2200      	movs	r2, #0
 8006c78:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006c7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	3314      	adds	r3, #20
 8006c80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c84:	e853 3f00 	ldrex	r3, [r3]
 8006c88:	623b      	str	r3, [r7, #32]
   return(result);
 8006c8a:	6a3b      	ldr	r3, [r7, #32]
 8006c8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c90:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	3314      	adds	r3, #20
 8006c98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c9a:	633a      	str	r2, [r7, #48]	; 0x30
 8006c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ca0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ca2:	e841 2300 	strex	r3, r2, [r1]
 8006ca6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d1e5      	bne.n	8006c7a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	330c      	adds	r3, #12
 8006cb4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	e853 3f00 	ldrex	r3, [r3]
 8006cbc:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cc4:	637b      	str	r3, [r7, #52]	; 0x34
 8006cc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	330c      	adds	r3, #12
 8006ccc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006cce:	61fa      	str	r2, [r7, #28]
 8006cd0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd2:	69b9      	ldr	r1, [r7, #24]
 8006cd4:	69fa      	ldr	r2, [r7, #28]
 8006cd6:	e841 2300 	strex	r3, r2, [r1]
 8006cda:	617b      	str	r3, [r7, #20]
   return(result);
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d1e5      	bne.n	8006cae <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006ce2:	e002      	b.n	8006cea <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006ce4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006ce6:	f7ff ff79 	bl	8006bdc <HAL_UART_TxCpltCallback>
}
 8006cea:	bf00      	nop
 8006cec:	3740      	adds	r7, #64	; 0x40
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}

08006cf2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006cf2:	b580      	push	{r7, lr}
 8006cf4:	b084      	sub	sp, #16
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cfe:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006d00:	68f8      	ldr	r0, [r7, #12]
 8006d02:	f7ff ff75 	bl	8006bf0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d06:	bf00      	nop
 8006d08:	3710      	adds	r7, #16
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}

08006d0e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006d0e:	b580      	push	{r7, lr}
 8006d10:	b09c      	sub	sp, #112	; 0x70
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d1a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d172      	bne.n	8006e10 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006d2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	330c      	adds	r3, #12
 8006d36:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d3a:	e853 3f00 	ldrex	r3, [r3]
 8006d3e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006d40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d46:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	330c      	adds	r3, #12
 8006d4e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006d50:	65ba      	str	r2, [r7, #88]	; 0x58
 8006d52:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d54:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006d56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006d58:	e841 2300 	strex	r3, r2, [r1]
 8006d5c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006d5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d1e5      	bne.n	8006d30 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	3314      	adds	r3, #20
 8006d6a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d6e:	e853 3f00 	ldrex	r3, [r3]
 8006d72:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d76:	f023 0301 	bic.w	r3, r3, #1
 8006d7a:	667b      	str	r3, [r7, #100]	; 0x64
 8006d7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	3314      	adds	r3, #20
 8006d82:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006d84:	647a      	str	r2, [r7, #68]	; 0x44
 8006d86:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d88:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d8c:	e841 2300 	strex	r3, r2, [r1]
 8006d90:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d1e5      	bne.n	8006d64 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	3314      	adds	r3, #20
 8006d9e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da2:	e853 3f00 	ldrex	r3, [r3]
 8006da6:	623b      	str	r3, [r7, #32]
   return(result);
 8006da8:	6a3b      	ldr	r3, [r7, #32]
 8006daa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dae:	663b      	str	r3, [r7, #96]	; 0x60
 8006db0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	3314      	adds	r3, #20
 8006db6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006db8:	633a      	str	r2, [r7, #48]	; 0x30
 8006dba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dbc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006dbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dc0:	e841 2300 	strex	r3, r2, [r1]
 8006dc4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d1e5      	bne.n	8006d98 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dce:	2220      	movs	r2, #32
 8006dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d119      	bne.n	8006e10 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ddc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	330c      	adds	r3, #12
 8006de2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	e853 3f00 	ldrex	r3, [r3]
 8006dea:	60fb      	str	r3, [r7, #12]
   return(result);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f023 0310 	bic.w	r3, r3, #16
 8006df2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006df4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	330c      	adds	r3, #12
 8006dfa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006dfc:	61fa      	str	r2, [r7, #28]
 8006dfe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e00:	69b9      	ldr	r1, [r7, #24]
 8006e02:	69fa      	ldr	r2, [r7, #28]
 8006e04:	e841 2300 	strex	r3, r2, [r1]
 8006e08:	617b      	str	r3, [r7, #20]
   return(result);
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d1e5      	bne.n	8006ddc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d106      	bne.n	8006e26 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e1a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006e20:	f7ff ff0e 	bl	8006c40 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006e24:	e002      	b.n	8006e2c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006e26:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006e28:	f7ff feec 	bl	8006c04 <HAL_UART_RxCpltCallback>
}
 8006e2c:	bf00      	nop
 8006e2e:	3770      	adds	r7, #112	; 0x70
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e40:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d108      	bne.n	8006e5c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006e4e:	085b      	lsrs	r3, r3, #1
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	4619      	mov	r1, r3
 8006e54:	68f8      	ldr	r0, [r7, #12]
 8006e56:	f7ff fef3 	bl	8006c40 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006e5a:	e002      	b.n	8006e62 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006e5c:	68f8      	ldr	r0, [r7, #12]
 8006e5e:	f7ff fedb 	bl	8006c18 <HAL_UART_RxHalfCpltCallback>
}
 8006e62:	bf00      	nop
 8006e64:	3710      	adds	r7, #16
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b084      	sub	sp, #16
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006e72:	2300      	movs	r3, #0
 8006e74:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e7a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	695b      	ldr	r3, [r3, #20]
 8006e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e86:	2b80      	cmp	r3, #128	; 0x80
 8006e88:	bf0c      	ite	eq
 8006e8a:	2301      	moveq	r3, #1
 8006e8c:	2300      	movne	r3, #0
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	2b21      	cmp	r3, #33	; 0x21
 8006e9c:	d108      	bne.n	8006eb0 <UART_DMAError+0x46>
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d005      	beq.n	8006eb0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006eaa:	68b8      	ldr	r0, [r7, #8]
 8006eac:	f000 f930 	bl	8007110 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	695b      	ldr	r3, [r3, #20]
 8006eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eba:	2b40      	cmp	r3, #64	; 0x40
 8006ebc:	bf0c      	ite	eq
 8006ebe:	2301      	moveq	r3, #1
 8006ec0:	2300      	movne	r3, #0
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	2b22      	cmp	r3, #34	; 0x22
 8006ed0:	d108      	bne.n	8006ee4 <UART_DMAError+0x7a>
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d005      	beq.n	8006ee4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	2200      	movs	r2, #0
 8006edc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006ede:	68b8      	ldr	r0, [r7, #8]
 8006ee0:	f000 f93e 	bl	8007160 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee8:	f043 0210 	orr.w	r2, r3, #16
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ef0:	68b8      	ldr	r0, [r7, #8]
 8006ef2:	f7ff fe9b 	bl	8006c2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ef6:	bf00      	nop
 8006ef8:	3710      	adds	r7, #16
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}

08006efe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006efe:	b580      	push	{r7, lr}
 8006f00:	b090      	sub	sp, #64	; 0x40
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	60f8      	str	r0, [r7, #12]
 8006f06:	60b9      	str	r1, [r7, #8]
 8006f08:	603b      	str	r3, [r7, #0]
 8006f0a:	4613      	mov	r3, r2
 8006f0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f0e:	e050      	b.n	8006fb2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f16:	d04c      	beq.n	8006fb2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006f18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d007      	beq.n	8006f2e <UART_WaitOnFlagUntilTimeout+0x30>
 8006f1e:	f7fc fcb5 	bl	800388c <HAL_GetTick>
 8006f22:	4602      	mov	r2, r0
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	1ad3      	subs	r3, r2, r3
 8006f28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d241      	bcs.n	8006fb2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	330c      	adds	r3, #12
 8006f34:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f38:	e853 3f00 	ldrex	r3, [r3]
 8006f3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f40:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	330c      	adds	r3, #12
 8006f4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006f4e:	637a      	str	r2, [r7, #52]	; 0x34
 8006f50:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f52:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f56:	e841 2300 	strex	r3, r2, [r1]
 8006f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d1e5      	bne.n	8006f2e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	3314      	adds	r3, #20
 8006f68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	e853 3f00 	ldrex	r3, [r3]
 8006f70:	613b      	str	r3, [r7, #16]
   return(result);
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	f023 0301 	bic.w	r3, r3, #1
 8006f78:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	3314      	adds	r3, #20
 8006f80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f82:	623a      	str	r2, [r7, #32]
 8006f84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f86:	69f9      	ldr	r1, [r7, #28]
 8006f88:	6a3a      	ldr	r2, [r7, #32]
 8006f8a:	e841 2300 	strex	r3, r2, [r1]
 8006f8e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f90:	69bb      	ldr	r3, [r7, #24]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d1e5      	bne.n	8006f62 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2220      	movs	r2, #32
 8006f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2220      	movs	r2, #32
 8006fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006fae:	2303      	movs	r3, #3
 8006fb0:	e00f      	b.n	8006fd2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	4013      	ands	r3, r2
 8006fbc:	68ba      	ldr	r2, [r7, #8]
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	bf0c      	ite	eq
 8006fc2:	2301      	moveq	r3, #1
 8006fc4:	2300      	movne	r3, #0
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	461a      	mov	r2, r3
 8006fca:	79fb      	ldrb	r3, [r7, #7]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d09f      	beq.n	8006f10 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006fd0:	2300      	movs	r3, #0
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3740      	adds	r7, #64	; 0x40
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
	...

08006fdc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b098      	sub	sp, #96	; 0x60
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	60b9      	str	r1, [r7, #8]
 8006fe6:	4613      	mov	r3, r2
 8006fe8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006fea:	68ba      	ldr	r2, [r7, #8]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	88fa      	ldrh	r2, [r7, #6]
 8006ff4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2222      	movs	r2, #34	; 0x22
 8007000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007008:	4a3e      	ldr	r2, [pc, #248]	; (8007104 <UART_Start_Receive_DMA+0x128>)
 800700a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007010:	4a3d      	ldr	r2, [pc, #244]	; (8007108 <UART_Start_Receive_DMA+0x12c>)
 8007012:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007018:	4a3c      	ldr	r2, [pc, #240]	; (800710c <UART_Start_Receive_DMA+0x130>)
 800701a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007020:	2200      	movs	r2, #0
 8007022:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007024:	f107 0308 	add.w	r3, r7, #8
 8007028:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	3304      	adds	r3, #4
 8007034:	4619      	mov	r1, r3
 8007036:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	88fb      	ldrh	r3, [r7, #6]
 800703c:	f7fc fe02 	bl	8003c44 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007040:	2300      	movs	r3, #0
 8007042:	613b      	str	r3, [r7, #16]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	613b      	str	r3, [r7, #16]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	613b      	str	r3, [r7, #16]
 8007054:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2200      	movs	r2, #0
 800705a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	330c      	adds	r3, #12
 8007064:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007066:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007068:	e853 3f00 	ldrex	r3, [r3]
 800706c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800706e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007074:	65bb      	str	r3, [r7, #88]	; 0x58
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	330c      	adds	r3, #12
 800707c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800707e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007080:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007082:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007084:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007086:	e841 2300 	strex	r3, r2, [r1]
 800708a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800708c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800708e:	2b00      	cmp	r3, #0
 8007090:	d1e5      	bne.n	800705e <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	3314      	adds	r3, #20
 8007098:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800709c:	e853 3f00 	ldrex	r3, [r3]
 80070a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80070a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a4:	f043 0301 	orr.w	r3, r3, #1
 80070a8:	657b      	str	r3, [r7, #84]	; 0x54
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	3314      	adds	r3, #20
 80070b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80070b2:	63ba      	str	r2, [r7, #56]	; 0x38
 80070b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80070b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070ba:	e841 2300 	strex	r3, r2, [r1]
 80070be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80070c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d1e5      	bne.n	8007092 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	3314      	adds	r3, #20
 80070cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ce:	69bb      	ldr	r3, [r7, #24]
 80070d0:	e853 3f00 	ldrex	r3, [r3]
 80070d4:	617b      	str	r3, [r7, #20]
   return(result);
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070dc:	653b      	str	r3, [r7, #80]	; 0x50
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	3314      	adds	r3, #20
 80070e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80070e6:	627a      	str	r2, [r7, #36]	; 0x24
 80070e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ea:	6a39      	ldr	r1, [r7, #32]
 80070ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070ee:	e841 2300 	strex	r3, r2, [r1]
 80070f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d1e5      	bne.n	80070c6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80070fa:	2300      	movs	r3, #0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3760      	adds	r7, #96	; 0x60
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	08006d0f 	.word	0x08006d0f
 8007108:	08006e35 	.word	0x08006e35
 800710c:	08006e6b 	.word	0x08006e6b

08007110 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007110:	b480      	push	{r7}
 8007112:	b089      	sub	sp, #36	; 0x24
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	330c      	adds	r3, #12
 800711e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	e853 3f00 	ldrex	r3, [r3]
 8007126:	60bb      	str	r3, [r7, #8]
   return(result);
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800712e:	61fb      	str	r3, [r7, #28]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	330c      	adds	r3, #12
 8007136:	69fa      	ldr	r2, [r7, #28]
 8007138:	61ba      	str	r2, [r7, #24]
 800713a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800713c:	6979      	ldr	r1, [r7, #20]
 800713e:	69ba      	ldr	r2, [r7, #24]
 8007140:	e841 2300 	strex	r3, r2, [r1]
 8007144:	613b      	str	r3, [r7, #16]
   return(result);
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d1e5      	bne.n	8007118 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2220      	movs	r2, #32
 8007150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007154:	bf00      	nop
 8007156:	3724      	adds	r7, #36	; 0x24
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr

08007160 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007160:	b480      	push	{r7}
 8007162:	b095      	sub	sp, #84	; 0x54
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	330c      	adds	r3, #12
 800716e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007172:	e853 3f00 	ldrex	r3, [r3]
 8007176:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800717a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800717e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	330c      	adds	r3, #12
 8007186:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007188:	643a      	str	r2, [r7, #64]	; 0x40
 800718a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800718c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800718e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007190:	e841 2300 	strex	r3, r2, [r1]
 8007194:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007198:	2b00      	cmp	r3, #0
 800719a:	d1e5      	bne.n	8007168 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	3314      	adds	r3, #20
 80071a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a4:	6a3b      	ldr	r3, [r7, #32]
 80071a6:	e853 3f00 	ldrex	r3, [r3]
 80071aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80071ac:	69fb      	ldr	r3, [r7, #28]
 80071ae:	f023 0301 	bic.w	r3, r3, #1
 80071b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	3314      	adds	r3, #20
 80071ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80071be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071c4:	e841 2300 	strex	r3, r2, [r1]
 80071c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d1e5      	bne.n	800719c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d119      	bne.n	800720c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	330c      	adds	r3, #12
 80071de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	e853 3f00 	ldrex	r3, [r3]
 80071e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	f023 0310 	bic.w	r3, r3, #16
 80071ee:	647b      	str	r3, [r7, #68]	; 0x44
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	330c      	adds	r3, #12
 80071f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071f8:	61ba      	str	r2, [r7, #24]
 80071fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fc:	6979      	ldr	r1, [r7, #20]
 80071fe:	69ba      	ldr	r2, [r7, #24]
 8007200:	e841 2300 	strex	r3, r2, [r1]
 8007204:	613b      	str	r3, [r7, #16]
   return(result);
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d1e5      	bne.n	80071d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2220      	movs	r2, #32
 8007210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2200      	movs	r2, #0
 8007218:	631a      	str	r2, [r3, #48]	; 0x30
}
 800721a:	bf00      	nop
 800721c:	3754      	adds	r7, #84	; 0x54
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr

08007226 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007226:	b580      	push	{r7, lr}
 8007228:	b084      	sub	sp, #16
 800722a:	af00      	add	r7, sp, #0
 800722c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007232:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2200      	movs	r2, #0
 8007238:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2200      	movs	r2, #0
 800723e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	f7ff fcf3 	bl	8006c2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007246:	bf00      	nop
 8007248:	3710      	adds	r7, #16
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}

0800724e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800724e:	b480      	push	{r7}
 8007250:	b085      	sub	sp, #20
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800725c:	b2db      	uxtb	r3, r3
 800725e:	2b21      	cmp	r3, #33	; 0x21
 8007260:	d13e      	bne.n	80072e0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800726a:	d114      	bne.n	8007296 <UART_Transmit_IT+0x48>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	691b      	ldr	r3, [r3, #16]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d110      	bne.n	8007296 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6a1b      	ldr	r3, [r3, #32]
 8007278:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	881b      	ldrh	r3, [r3, #0]
 800727e:	461a      	mov	r2, r3
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007288:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6a1b      	ldr	r3, [r3, #32]
 800728e:	1c9a      	adds	r2, r3, #2
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	621a      	str	r2, [r3, #32]
 8007294:	e008      	b.n	80072a8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6a1b      	ldr	r3, [r3, #32]
 800729a:	1c59      	adds	r1, r3, #1
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	6211      	str	r1, [r2, #32]
 80072a0:	781a      	ldrb	r2, [r3, #0]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	3b01      	subs	r3, #1
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	4619      	mov	r1, r3
 80072b6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d10f      	bne.n	80072dc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	68da      	ldr	r2, [r3, #12]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80072ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	68da      	ldr	r2, [r3, #12]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80072dc:	2300      	movs	r3, #0
 80072de:	e000      	b.n	80072e2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80072e0:	2302      	movs	r3, #2
  }
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3714      	adds	r7, #20
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr

080072ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	b082      	sub	sp, #8
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	68da      	ldr	r2, [r3, #12]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007304:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2220      	movs	r2, #32
 800730a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f7ff fc64 	bl	8006bdc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3708      	adds	r7, #8
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}

0800731e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800731e:	b580      	push	{r7, lr}
 8007320:	b08c      	sub	sp, #48	; 0x30
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800732c:	b2db      	uxtb	r3, r3
 800732e:	2b22      	cmp	r3, #34	; 0x22
 8007330:	f040 80ab 	bne.w	800748a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800733c:	d117      	bne.n	800736e <UART_Receive_IT+0x50>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	691b      	ldr	r3, [r3, #16]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d113      	bne.n	800736e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007346:	2300      	movs	r3, #0
 8007348:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800734e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	b29b      	uxth	r3, r3
 8007358:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800735c:	b29a      	uxth	r2, r3
 800735e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007360:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007366:	1c9a      	adds	r2, r3, #2
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	629a      	str	r2, [r3, #40]	; 0x28
 800736c:	e026      	b.n	80073bc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007372:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007374:	2300      	movs	r3, #0
 8007376:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007380:	d007      	beq.n	8007392 <UART_Receive_IT+0x74>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d10a      	bne.n	80073a0 <UART_Receive_IT+0x82>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	691b      	ldr	r3, [r3, #16]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d106      	bne.n	80073a0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	b2da      	uxtb	r2, r3
 800739a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800739c:	701a      	strb	r2, [r3, #0]
 800739e:	e008      	b.n	80073b2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073ac:	b2da      	uxtb	r2, r3
 80073ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b6:	1c5a      	adds	r2, r3, #1
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	3b01      	subs	r3, #1
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	4619      	mov	r1, r3
 80073ca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d15a      	bne.n	8007486 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	68da      	ldr	r2, [r3, #12]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f022 0220 	bic.w	r2, r2, #32
 80073de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	68da      	ldr	r2, [r3, #12]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80073ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	695a      	ldr	r2, [r3, #20]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f022 0201 	bic.w	r2, r2, #1
 80073fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2220      	movs	r2, #32
 8007404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800740c:	2b01      	cmp	r3, #1
 800740e:	d135      	bne.n	800747c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	330c      	adds	r3, #12
 800741c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	e853 3f00 	ldrex	r3, [r3]
 8007424:	613b      	str	r3, [r7, #16]
   return(result);
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	f023 0310 	bic.w	r3, r3, #16
 800742c:	627b      	str	r3, [r7, #36]	; 0x24
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	330c      	adds	r3, #12
 8007434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007436:	623a      	str	r2, [r7, #32]
 8007438:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743a:	69f9      	ldr	r1, [r7, #28]
 800743c:	6a3a      	ldr	r2, [r7, #32]
 800743e:	e841 2300 	strex	r3, r2, [r1]
 8007442:	61bb      	str	r3, [r7, #24]
   return(result);
 8007444:	69bb      	ldr	r3, [r7, #24]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d1e5      	bne.n	8007416 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f003 0310 	and.w	r3, r3, #16
 8007454:	2b10      	cmp	r3, #16
 8007456:	d10a      	bne.n	800746e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007458:	2300      	movs	r3, #0
 800745a:	60fb      	str	r3, [r7, #12]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	60fb      	str	r3, [r7, #12]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	60fb      	str	r3, [r7, #12]
 800746c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007472:	4619      	mov	r1, r3
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f7ff fbe3 	bl	8006c40 <HAL_UARTEx_RxEventCallback>
 800747a:	e002      	b.n	8007482 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f7ff fbc1 	bl	8006c04 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007482:	2300      	movs	r3, #0
 8007484:	e002      	b.n	800748c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007486:	2300      	movs	r3, #0
 8007488:	e000      	b.n	800748c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800748a:	2302      	movs	r3, #2
  }
}
 800748c:	4618      	mov	r0, r3
 800748e:	3730      	adds	r7, #48	; 0x30
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007494:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007498:	b0c0      	sub	sp, #256	; 0x100
 800749a:	af00      	add	r7, sp, #0
 800749c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	691b      	ldr	r3, [r3, #16]
 80074a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80074ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074b0:	68d9      	ldr	r1, [r3, #12]
 80074b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	ea40 0301 	orr.w	r3, r0, r1
 80074bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80074be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074c2:	689a      	ldr	r2, [r3, #8]
 80074c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074c8:	691b      	ldr	r3, [r3, #16]
 80074ca:	431a      	orrs	r2, r3
 80074cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074d0:	695b      	ldr	r3, [r3, #20]
 80074d2:	431a      	orrs	r2, r3
 80074d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074d8:	69db      	ldr	r3, [r3, #28]
 80074da:	4313      	orrs	r3, r2
 80074dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80074e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	68db      	ldr	r3, [r3, #12]
 80074e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80074ec:	f021 010c 	bic.w	r1, r1, #12
 80074f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80074fa:	430b      	orrs	r3, r1
 80074fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80074fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	695b      	ldr	r3, [r3, #20]
 8007506:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800750a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800750e:	6999      	ldr	r1, [r3, #24]
 8007510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	ea40 0301 	orr.w	r3, r0, r1
 800751a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800751c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	4b8f      	ldr	r3, [pc, #572]	; (8007760 <UART_SetConfig+0x2cc>)
 8007524:	429a      	cmp	r2, r3
 8007526:	d005      	beq.n	8007534 <UART_SetConfig+0xa0>
 8007528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	4b8d      	ldr	r3, [pc, #564]	; (8007764 <UART_SetConfig+0x2d0>)
 8007530:	429a      	cmp	r2, r3
 8007532:	d104      	bne.n	800753e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007534:	f7fd fb04 	bl	8004b40 <HAL_RCC_GetPCLK2Freq>
 8007538:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800753c:	e003      	b.n	8007546 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800753e:	f7fd faeb 	bl	8004b18 <HAL_RCC_GetPCLK1Freq>
 8007542:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800754a:	69db      	ldr	r3, [r3, #28]
 800754c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007550:	f040 810c 	bne.w	800776c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007554:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007558:	2200      	movs	r2, #0
 800755a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800755e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007562:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007566:	4622      	mov	r2, r4
 8007568:	462b      	mov	r3, r5
 800756a:	1891      	adds	r1, r2, r2
 800756c:	65b9      	str	r1, [r7, #88]	; 0x58
 800756e:	415b      	adcs	r3, r3
 8007570:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007572:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007576:	4621      	mov	r1, r4
 8007578:	eb12 0801 	adds.w	r8, r2, r1
 800757c:	4629      	mov	r1, r5
 800757e:	eb43 0901 	adc.w	r9, r3, r1
 8007582:	f04f 0200 	mov.w	r2, #0
 8007586:	f04f 0300 	mov.w	r3, #0
 800758a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800758e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007592:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007596:	4690      	mov	r8, r2
 8007598:	4699      	mov	r9, r3
 800759a:	4623      	mov	r3, r4
 800759c:	eb18 0303 	adds.w	r3, r8, r3
 80075a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80075a4:	462b      	mov	r3, r5
 80075a6:	eb49 0303 	adc.w	r3, r9, r3
 80075aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80075ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80075ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80075be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80075c2:	460b      	mov	r3, r1
 80075c4:	18db      	adds	r3, r3, r3
 80075c6:	653b      	str	r3, [r7, #80]	; 0x50
 80075c8:	4613      	mov	r3, r2
 80075ca:	eb42 0303 	adc.w	r3, r2, r3
 80075ce:	657b      	str	r3, [r7, #84]	; 0x54
 80075d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80075d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80075d8:	f7f8 fe72 	bl	80002c0 <__aeabi_uldivmod>
 80075dc:	4602      	mov	r2, r0
 80075de:	460b      	mov	r3, r1
 80075e0:	4b61      	ldr	r3, [pc, #388]	; (8007768 <UART_SetConfig+0x2d4>)
 80075e2:	fba3 2302 	umull	r2, r3, r3, r2
 80075e6:	095b      	lsrs	r3, r3, #5
 80075e8:	011c      	lsls	r4, r3, #4
 80075ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075ee:	2200      	movs	r2, #0
 80075f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80075f4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80075f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80075fc:	4642      	mov	r2, r8
 80075fe:	464b      	mov	r3, r9
 8007600:	1891      	adds	r1, r2, r2
 8007602:	64b9      	str	r1, [r7, #72]	; 0x48
 8007604:	415b      	adcs	r3, r3
 8007606:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007608:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800760c:	4641      	mov	r1, r8
 800760e:	eb12 0a01 	adds.w	sl, r2, r1
 8007612:	4649      	mov	r1, r9
 8007614:	eb43 0b01 	adc.w	fp, r3, r1
 8007618:	f04f 0200 	mov.w	r2, #0
 800761c:	f04f 0300 	mov.w	r3, #0
 8007620:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007624:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007628:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800762c:	4692      	mov	sl, r2
 800762e:	469b      	mov	fp, r3
 8007630:	4643      	mov	r3, r8
 8007632:	eb1a 0303 	adds.w	r3, sl, r3
 8007636:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800763a:	464b      	mov	r3, r9
 800763c:	eb4b 0303 	adc.w	r3, fp, r3
 8007640:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007650:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007654:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007658:	460b      	mov	r3, r1
 800765a:	18db      	adds	r3, r3, r3
 800765c:	643b      	str	r3, [r7, #64]	; 0x40
 800765e:	4613      	mov	r3, r2
 8007660:	eb42 0303 	adc.w	r3, r2, r3
 8007664:	647b      	str	r3, [r7, #68]	; 0x44
 8007666:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800766a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800766e:	f7f8 fe27 	bl	80002c0 <__aeabi_uldivmod>
 8007672:	4602      	mov	r2, r0
 8007674:	460b      	mov	r3, r1
 8007676:	4611      	mov	r1, r2
 8007678:	4b3b      	ldr	r3, [pc, #236]	; (8007768 <UART_SetConfig+0x2d4>)
 800767a:	fba3 2301 	umull	r2, r3, r3, r1
 800767e:	095b      	lsrs	r3, r3, #5
 8007680:	2264      	movs	r2, #100	; 0x64
 8007682:	fb02 f303 	mul.w	r3, r2, r3
 8007686:	1acb      	subs	r3, r1, r3
 8007688:	00db      	lsls	r3, r3, #3
 800768a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800768e:	4b36      	ldr	r3, [pc, #216]	; (8007768 <UART_SetConfig+0x2d4>)
 8007690:	fba3 2302 	umull	r2, r3, r3, r2
 8007694:	095b      	lsrs	r3, r3, #5
 8007696:	005b      	lsls	r3, r3, #1
 8007698:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800769c:	441c      	add	r4, r3
 800769e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076a2:	2200      	movs	r2, #0
 80076a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80076a8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80076ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80076b0:	4642      	mov	r2, r8
 80076b2:	464b      	mov	r3, r9
 80076b4:	1891      	adds	r1, r2, r2
 80076b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80076b8:	415b      	adcs	r3, r3
 80076ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80076c0:	4641      	mov	r1, r8
 80076c2:	1851      	adds	r1, r2, r1
 80076c4:	6339      	str	r1, [r7, #48]	; 0x30
 80076c6:	4649      	mov	r1, r9
 80076c8:	414b      	adcs	r3, r1
 80076ca:	637b      	str	r3, [r7, #52]	; 0x34
 80076cc:	f04f 0200 	mov.w	r2, #0
 80076d0:	f04f 0300 	mov.w	r3, #0
 80076d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80076d8:	4659      	mov	r1, fp
 80076da:	00cb      	lsls	r3, r1, #3
 80076dc:	4651      	mov	r1, sl
 80076de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80076e2:	4651      	mov	r1, sl
 80076e4:	00ca      	lsls	r2, r1, #3
 80076e6:	4610      	mov	r0, r2
 80076e8:	4619      	mov	r1, r3
 80076ea:	4603      	mov	r3, r0
 80076ec:	4642      	mov	r2, r8
 80076ee:	189b      	adds	r3, r3, r2
 80076f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80076f4:	464b      	mov	r3, r9
 80076f6:	460a      	mov	r2, r1
 80076f8:	eb42 0303 	adc.w	r3, r2, r3
 80076fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800770c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007710:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007714:	460b      	mov	r3, r1
 8007716:	18db      	adds	r3, r3, r3
 8007718:	62bb      	str	r3, [r7, #40]	; 0x28
 800771a:	4613      	mov	r3, r2
 800771c:	eb42 0303 	adc.w	r3, r2, r3
 8007720:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007722:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007726:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800772a:	f7f8 fdc9 	bl	80002c0 <__aeabi_uldivmod>
 800772e:	4602      	mov	r2, r0
 8007730:	460b      	mov	r3, r1
 8007732:	4b0d      	ldr	r3, [pc, #52]	; (8007768 <UART_SetConfig+0x2d4>)
 8007734:	fba3 1302 	umull	r1, r3, r3, r2
 8007738:	095b      	lsrs	r3, r3, #5
 800773a:	2164      	movs	r1, #100	; 0x64
 800773c:	fb01 f303 	mul.w	r3, r1, r3
 8007740:	1ad3      	subs	r3, r2, r3
 8007742:	00db      	lsls	r3, r3, #3
 8007744:	3332      	adds	r3, #50	; 0x32
 8007746:	4a08      	ldr	r2, [pc, #32]	; (8007768 <UART_SetConfig+0x2d4>)
 8007748:	fba2 2303 	umull	r2, r3, r2, r3
 800774c:	095b      	lsrs	r3, r3, #5
 800774e:	f003 0207 	and.w	r2, r3, #7
 8007752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4422      	add	r2, r4
 800775a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800775c:	e105      	b.n	800796a <UART_SetConfig+0x4d6>
 800775e:	bf00      	nop
 8007760:	40011000 	.word	0x40011000
 8007764:	40011400 	.word	0x40011400
 8007768:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800776c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007770:	2200      	movs	r2, #0
 8007772:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007776:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800777a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800777e:	4642      	mov	r2, r8
 8007780:	464b      	mov	r3, r9
 8007782:	1891      	adds	r1, r2, r2
 8007784:	6239      	str	r1, [r7, #32]
 8007786:	415b      	adcs	r3, r3
 8007788:	627b      	str	r3, [r7, #36]	; 0x24
 800778a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800778e:	4641      	mov	r1, r8
 8007790:	1854      	adds	r4, r2, r1
 8007792:	4649      	mov	r1, r9
 8007794:	eb43 0501 	adc.w	r5, r3, r1
 8007798:	f04f 0200 	mov.w	r2, #0
 800779c:	f04f 0300 	mov.w	r3, #0
 80077a0:	00eb      	lsls	r3, r5, #3
 80077a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80077a6:	00e2      	lsls	r2, r4, #3
 80077a8:	4614      	mov	r4, r2
 80077aa:	461d      	mov	r5, r3
 80077ac:	4643      	mov	r3, r8
 80077ae:	18e3      	adds	r3, r4, r3
 80077b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80077b4:	464b      	mov	r3, r9
 80077b6:	eb45 0303 	adc.w	r3, r5, r3
 80077ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80077be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	2200      	movs	r2, #0
 80077c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80077ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80077ce:	f04f 0200 	mov.w	r2, #0
 80077d2:	f04f 0300 	mov.w	r3, #0
 80077d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80077da:	4629      	mov	r1, r5
 80077dc:	008b      	lsls	r3, r1, #2
 80077de:	4621      	mov	r1, r4
 80077e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80077e4:	4621      	mov	r1, r4
 80077e6:	008a      	lsls	r2, r1, #2
 80077e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80077ec:	f7f8 fd68 	bl	80002c0 <__aeabi_uldivmod>
 80077f0:	4602      	mov	r2, r0
 80077f2:	460b      	mov	r3, r1
 80077f4:	4b60      	ldr	r3, [pc, #384]	; (8007978 <UART_SetConfig+0x4e4>)
 80077f6:	fba3 2302 	umull	r2, r3, r3, r2
 80077fa:	095b      	lsrs	r3, r3, #5
 80077fc:	011c      	lsls	r4, r3, #4
 80077fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007802:	2200      	movs	r2, #0
 8007804:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007808:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800780c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007810:	4642      	mov	r2, r8
 8007812:	464b      	mov	r3, r9
 8007814:	1891      	adds	r1, r2, r2
 8007816:	61b9      	str	r1, [r7, #24]
 8007818:	415b      	adcs	r3, r3
 800781a:	61fb      	str	r3, [r7, #28]
 800781c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007820:	4641      	mov	r1, r8
 8007822:	1851      	adds	r1, r2, r1
 8007824:	6139      	str	r1, [r7, #16]
 8007826:	4649      	mov	r1, r9
 8007828:	414b      	adcs	r3, r1
 800782a:	617b      	str	r3, [r7, #20]
 800782c:	f04f 0200 	mov.w	r2, #0
 8007830:	f04f 0300 	mov.w	r3, #0
 8007834:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007838:	4659      	mov	r1, fp
 800783a:	00cb      	lsls	r3, r1, #3
 800783c:	4651      	mov	r1, sl
 800783e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007842:	4651      	mov	r1, sl
 8007844:	00ca      	lsls	r2, r1, #3
 8007846:	4610      	mov	r0, r2
 8007848:	4619      	mov	r1, r3
 800784a:	4603      	mov	r3, r0
 800784c:	4642      	mov	r2, r8
 800784e:	189b      	adds	r3, r3, r2
 8007850:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007854:	464b      	mov	r3, r9
 8007856:	460a      	mov	r2, r1
 8007858:	eb42 0303 	adc.w	r3, r2, r3
 800785c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	67bb      	str	r3, [r7, #120]	; 0x78
 800786a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800786c:	f04f 0200 	mov.w	r2, #0
 8007870:	f04f 0300 	mov.w	r3, #0
 8007874:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007878:	4649      	mov	r1, r9
 800787a:	008b      	lsls	r3, r1, #2
 800787c:	4641      	mov	r1, r8
 800787e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007882:	4641      	mov	r1, r8
 8007884:	008a      	lsls	r2, r1, #2
 8007886:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800788a:	f7f8 fd19 	bl	80002c0 <__aeabi_uldivmod>
 800788e:	4602      	mov	r2, r0
 8007890:	460b      	mov	r3, r1
 8007892:	4b39      	ldr	r3, [pc, #228]	; (8007978 <UART_SetConfig+0x4e4>)
 8007894:	fba3 1302 	umull	r1, r3, r3, r2
 8007898:	095b      	lsrs	r3, r3, #5
 800789a:	2164      	movs	r1, #100	; 0x64
 800789c:	fb01 f303 	mul.w	r3, r1, r3
 80078a0:	1ad3      	subs	r3, r2, r3
 80078a2:	011b      	lsls	r3, r3, #4
 80078a4:	3332      	adds	r3, #50	; 0x32
 80078a6:	4a34      	ldr	r2, [pc, #208]	; (8007978 <UART_SetConfig+0x4e4>)
 80078a8:	fba2 2303 	umull	r2, r3, r2, r3
 80078ac:	095b      	lsrs	r3, r3, #5
 80078ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80078b2:	441c      	add	r4, r3
 80078b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078b8:	2200      	movs	r2, #0
 80078ba:	673b      	str	r3, [r7, #112]	; 0x70
 80078bc:	677a      	str	r2, [r7, #116]	; 0x74
 80078be:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80078c2:	4642      	mov	r2, r8
 80078c4:	464b      	mov	r3, r9
 80078c6:	1891      	adds	r1, r2, r2
 80078c8:	60b9      	str	r1, [r7, #8]
 80078ca:	415b      	adcs	r3, r3
 80078cc:	60fb      	str	r3, [r7, #12]
 80078ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80078d2:	4641      	mov	r1, r8
 80078d4:	1851      	adds	r1, r2, r1
 80078d6:	6039      	str	r1, [r7, #0]
 80078d8:	4649      	mov	r1, r9
 80078da:	414b      	adcs	r3, r1
 80078dc:	607b      	str	r3, [r7, #4]
 80078de:	f04f 0200 	mov.w	r2, #0
 80078e2:	f04f 0300 	mov.w	r3, #0
 80078e6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80078ea:	4659      	mov	r1, fp
 80078ec:	00cb      	lsls	r3, r1, #3
 80078ee:	4651      	mov	r1, sl
 80078f0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80078f4:	4651      	mov	r1, sl
 80078f6:	00ca      	lsls	r2, r1, #3
 80078f8:	4610      	mov	r0, r2
 80078fa:	4619      	mov	r1, r3
 80078fc:	4603      	mov	r3, r0
 80078fe:	4642      	mov	r2, r8
 8007900:	189b      	adds	r3, r3, r2
 8007902:	66bb      	str	r3, [r7, #104]	; 0x68
 8007904:	464b      	mov	r3, r9
 8007906:	460a      	mov	r2, r1
 8007908:	eb42 0303 	adc.w	r3, r2, r3
 800790c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800790e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	2200      	movs	r2, #0
 8007916:	663b      	str	r3, [r7, #96]	; 0x60
 8007918:	667a      	str	r2, [r7, #100]	; 0x64
 800791a:	f04f 0200 	mov.w	r2, #0
 800791e:	f04f 0300 	mov.w	r3, #0
 8007922:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007926:	4649      	mov	r1, r9
 8007928:	008b      	lsls	r3, r1, #2
 800792a:	4641      	mov	r1, r8
 800792c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007930:	4641      	mov	r1, r8
 8007932:	008a      	lsls	r2, r1, #2
 8007934:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007938:	f7f8 fcc2 	bl	80002c0 <__aeabi_uldivmod>
 800793c:	4602      	mov	r2, r0
 800793e:	460b      	mov	r3, r1
 8007940:	4b0d      	ldr	r3, [pc, #52]	; (8007978 <UART_SetConfig+0x4e4>)
 8007942:	fba3 1302 	umull	r1, r3, r3, r2
 8007946:	095b      	lsrs	r3, r3, #5
 8007948:	2164      	movs	r1, #100	; 0x64
 800794a:	fb01 f303 	mul.w	r3, r1, r3
 800794e:	1ad3      	subs	r3, r2, r3
 8007950:	011b      	lsls	r3, r3, #4
 8007952:	3332      	adds	r3, #50	; 0x32
 8007954:	4a08      	ldr	r2, [pc, #32]	; (8007978 <UART_SetConfig+0x4e4>)
 8007956:	fba2 2303 	umull	r2, r3, r2, r3
 800795a:	095b      	lsrs	r3, r3, #5
 800795c:	f003 020f 	and.w	r2, r3, #15
 8007960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4422      	add	r2, r4
 8007968:	609a      	str	r2, [r3, #8]
}
 800796a:	bf00      	nop
 800796c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007970:	46bd      	mov	sp, r7
 8007972:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007976:	bf00      	nop
 8007978:	51eb851f 	.word	0x51eb851f

0800797c <__NVIC_SetPriority>:
{
 800797c:	b480      	push	{r7}
 800797e:	b083      	sub	sp, #12
 8007980:	af00      	add	r7, sp, #0
 8007982:	4603      	mov	r3, r0
 8007984:	6039      	str	r1, [r7, #0]
 8007986:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800798c:	2b00      	cmp	r3, #0
 800798e:	db0a      	blt.n	80079a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	b2da      	uxtb	r2, r3
 8007994:	490c      	ldr	r1, [pc, #48]	; (80079c8 <__NVIC_SetPriority+0x4c>)
 8007996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800799a:	0112      	lsls	r2, r2, #4
 800799c:	b2d2      	uxtb	r2, r2
 800799e:	440b      	add	r3, r1
 80079a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80079a4:	e00a      	b.n	80079bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	b2da      	uxtb	r2, r3
 80079aa:	4908      	ldr	r1, [pc, #32]	; (80079cc <__NVIC_SetPriority+0x50>)
 80079ac:	79fb      	ldrb	r3, [r7, #7]
 80079ae:	f003 030f 	and.w	r3, r3, #15
 80079b2:	3b04      	subs	r3, #4
 80079b4:	0112      	lsls	r2, r2, #4
 80079b6:	b2d2      	uxtb	r2, r2
 80079b8:	440b      	add	r3, r1
 80079ba:	761a      	strb	r2, [r3, #24]
}
 80079bc:	bf00      	nop
 80079be:	370c      	adds	r7, #12
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr
 80079c8:	e000e100 	.word	0xe000e100
 80079cc:	e000ed00 	.word	0xe000ed00

080079d0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80079d0:	b580      	push	{r7, lr}
 80079d2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80079d4:	4b05      	ldr	r3, [pc, #20]	; (80079ec <SysTick_Handler+0x1c>)
 80079d6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80079d8:	f002 fe0a 	bl	800a5f0 <xTaskGetSchedulerState>
 80079dc:	4603      	mov	r3, r0
 80079de:	2b01      	cmp	r3, #1
 80079e0:	d001      	beq.n	80079e6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80079e2:	f003 fda9 	bl	800b538 <xPortSysTickHandler>
  }
}
 80079e6:	bf00      	nop
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop
 80079ec:	e000e010 	.word	0xe000e010

080079f0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80079f0:	b580      	push	{r7, lr}
 80079f2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80079f4:	2100      	movs	r1, #0
 80079f6:	f06f 0004 	mvn.w	r0, #4
 80079fa:	f7ff ffbf 	bl	800797c <__NVIC_SetPriority>
#endif
}
 80079fe:	bf00      	nop
 8007a00:	bd80      	pop	{r7, pc}
	...

08007a04 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a0a:	f3ef 8305 	mrs	r3, IPSR
 8007a0e:	603b      	str	r3, [r7, #0]
  return(result);
 8007a10:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d003      	beq.n	8007a1e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007a16:	f06f 0305 	mvn.w	r3, #5
 8007a1a:	607b      	str	r3, [r7, #4]
 8007a1c:	e00c      	b.n	8007a38 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007a1e:	4b0a      	ldr	r3, [pc, #40]	; (8007a48 <osKernelInitialize+0x44>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d105      	bne.n	8007a32 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007a26:	4b08      	ldr	r3, [pc, #32]	; (8007a48 <osKernelInitialize+0x44>)
 8007a28:	2201      	movs	r2, #1
 8007a2a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	607b      	str	r3, [r7, #4]
 8007a30:	e002      	b.n	8007a38 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007a32:	f04f 33ff 	mov.w	r3, #4294967295
 8007a36:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007a38:	687b      	ldr	r3, [r7, #4]
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	370c      	adds	r7, #12
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr
 8007a46:	bf00      	nop
 8007a48:	200006f0 	.word	0x200006f0

08007a4c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b082      	sub	sp, #8
 8007a50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a52:	f3ef 8305 	mrs	r3, IPSR
 8007a56:	603b      	str	r3, [r7, #0]
  return(result);
 8007a58:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d003      	beq.n	8007a66 <osKernelStart+0x1a>
    stat = osErrorISR;
 8007a5e:	f06f 0305 	mvn.w	r3, #5
 8007a62:	607b      	str	r3, [r7, #4]
 8007a64:	e010      	b.n	8007a88 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007a66:	4b0b      	ldr	r3, [pc, #44]	; (8007a94 <osKernelStart+0x48>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d109      	bne.n	8007a82 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007a6e:	f7ff ffbf 	bl	80079f0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007a72:	4b08      	ldr	r3, [pc, #32]	; (8007a94 <osKernelStart+0x48>)
 8007a74:	2202      	movs	r2, #2
 8007a76:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007a78:	f002 f962 	bl	8009d40 <vTaskStartScheduler>
      stat = osOK;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	607b      	str	r3, [r7, #4]
 8007a80:	e002      	b.n	8007a88 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007a82:	f04f 33ff 	mov.w	r3, #4294967295
 8007a86:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007a88:	687b      	ldr	r3, [r7, #4]
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3708      	adds	r7, #8
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}
 8007a92:	bf00      	nop
 8007a94:	200006f0 	.word	0x200006f0

08007a98 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b08e      	sub	sp, #56	; 0x38
 8007a9c:	af04      	add	r7, sp, #16
 8007a9e:	60f8      	str	r0, [r7, #12]
 8007aa0:	60b9      	str	r1, [r7, #8]
 8007aa2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007aa8:	f3ef 8305 	mrs	r3, IPSR
 8007aac:	617b      	str	r3, [r7, #20]
  return(result);
 8007aae:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d17e      	bne.n	8007bb2 <osThreadNew+0x11a>
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d07b      	beq.n	8007bb2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007aba:	2380      	movs	r3, #128	; 0x80
 8007abc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007abe:	2318      	movs	r3, #24
 8007ac0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8007aca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d045      	beq.n	8007b5e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d002      	beq.n	8007ae0 <osThreadNew+0x48>
        name = attr->name;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	699b      	ldr	r3, [r3, #24]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d002      	beq.n	8007aee <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	699b      	ldr	r3, [r3, #24]
 8007aec:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007aee:	69fb      	ldr	r3, [r7, #28]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d008      	beq.n	8007b06 <osThreadNew+0x6e>
 8007af4:	69fb      	ldr	r3, [r7, #28]
 8007af6:	2b38      	cmp	r3, #56	; 0x38
 8007af8:	d805      	bhi.n	8007b06 <osThreadNew+0x6e>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	f003 0301 	and.w	r3, r3, #1
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d001      	beq.n	8007b0a <osThreadNew+0x72>
        return (NULL);
 8007b06:	2300      	movs	r3, #0
 8007b08:	e054      	b.n	8007bb4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	695b      	ldr	r3, [r3, #20]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d003      	beq.n	8007b1a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	695b      	ldr	r3, [r3, #20]
 8007b16:	089b      	lsrs	r3, r3, #2
 8007b18:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d00e      	beq.n	8007b40 <osThreadNew+0xa8>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	68db      	ldr	r3, [r3, #12]
 8007b26:	2b5b      	cmp	r3, #91	; 0x5b
 8007b28:	d90a      	bls.n	8007b40 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d006      	beq.n	8007b40 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	695b      	ldr	r3, [r3, #20]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d002      	beq.n	8007b40 <osThreadNew+0xa8>
        mem = 1;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	61bb      	str	r3, [r7, #24]
 8007b3e:	e010      	b.n	8007b62 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	689b      	ldr	r3, [r3, #8]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d10c      	bne.n	8007b62 <osThreadNew+0xca>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	68db      	ldr	r3, [r3, #12]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d108      	bne.n	8007b62 <osThreadNew+0xca>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	691b      	ldr	r3, [r3, #16]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d104      	bne.n	8007b62 <osThreadNew+0xca>
          mem = 0;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	61bb      	str	r3, [r7, #24]
 8007b5c:	e001      	b.n	8007b62 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007b62:	69bb      	ldr	r3, [r7, #24]
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d110      	bne.n	8007b8a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007b70:	9202      	str	r2, [sp, #8]
 8007b72:	9301      	str	r3, [sp, #4]
 8007b74:	69fb      	ldr	r3, [r7, #28]
 8007b76:	9300      	str	r3, [sp, #0]
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	6a3a      	ldr	r2, [r7, #32]
 8007b7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b7e:	68f8      	ldr	r0, [r7, #12]
 8007b80:	f001 fe30 	bl	80097e4 <xTaskCreateStatic>
 8007b84:	4603      	mov	r3, r0
 8007b86:	613b      	str	r3, [r7, #16]
 8007b88:	e013      	b.n	8007bb2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007b8a:	69bb      	ldr	r3, [r7, #24]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d110      	bne.n	8007bb2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007b90:	6a3b      	ldr	r3, [r7, #32]
 8007b92:	b29a      	uxth	r2, r3
 8007b94:	f107 0310 	add.w	r3, r7, #16
 8007b98:	9301      	str	r3, [sp, #4]
 8007b9a:	69fb      	ldr	r3, [r7, #28]
 8007b9c:	9300      	str	r3, [sp, #0]
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007ba2:	68f8      	ldr	r0, [r7, #12]
 8007ba4:	f001 fe7b 	bl	800989e <xTaskCreate>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d001      	beq.n	8007bb2 <osThreadNew+0x11a>
            hTask = NULL;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007bb2:	693b      	ldr	r3, [r7, #16]
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3728      	adds	r7, #40	; 0x28
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b086      	sub	sp, #24
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bc8:	f3ef 8305 	mrs	r3, IPSR
 8007bcc:	60bb      	str	r3, [r7, #8]
  return(result);
 8007bce:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d003      	beq.n	8007bdc <osThreadTerminate+0x20>
    stat = osErrorISR;
 8007bd4:	f06f 0305 	mvn.w	r3, #5
 8007bd8:	617b      	str	r3, [r7, #20]
 8007bda:	e017      	b.n	8007c0c <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d103      	bne.n	8007bea <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 8007be2:	f06f 0303 	mvn.w	r3, #3
 8007be6:	617b      	str	r3, [r7, #20]
 8007be8:	e010      	b.n	8007c0c <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 8007bea:	6938      	ldr	r0, [r7, #16]
 8007bec:	f002 f842 	bl	8009c74 <eTaskGetState>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 8007bf4:	7bfb      	ldrb	r3, [r7, #15]
 8007bf6:	2b04      	cmp	r3, #4
 8007bf8:	d005      	beq.n	8007c06 <osThreadTerminate+0x4a>
      stat = osOK;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 8007bfe:	6938      	ldr	r0, [r7, #16]
 8007c00:	f001 ff92 	bl	8009b28 <vTaskDelete>
 8007c04:	e002      	b.n	8007c0c <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 8007c06:	f06f 0302 	mvn.w	r3, #2
 8007c0a:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 8007c0c:	697b      	ldr	r3, [r7, #20]
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3718      	adds	r7, #24
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}

08007c16 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007c16:	b580      	push	{r7, lr}
 8007c18:	b084      	sub	sp, #16
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c1e:	f3ef 8305 	mrs	r3, IPSR
 8007c22:	60bb      	str	r3, [r7, #8]
  return(result);
 8007c24:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d003      	beq.n	8007c32 <osDelay+0x1c>
    stat = osErrorISR;
 8007c2a:	f06f 0305 	mvn.w	r3, #5
 8007c2e:	60fb      	str	r3, [r7, #12]
 8007c30:	e007      	b.n	8007c42 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007c32:	2300      	movs	r3, #0
 8007c34:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d002      	beq.n	8007c42 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f001 ffe5 	bl	8009c0c <vTaskDelay>
    }
  }

  return (stat);
 8007c42:	68fb      	ldr	r3, [r7, #12]
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3710      	adds	r7, #16
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b084      	sub	sp, #16
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f003 fa91 	bl	800b17c <pvTimerGetTimerID>
 8007c5a:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d005      	beq.n	8007c6e <TimerCallback+0x22>
    callb->func (callb->arg);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	68fa      	ldr	r2, [r7, #12]
 8007c68:	6852      	ldr	r2, [r2, #4]
 8007c6a:	4610      	mov	r0, r2
 8007c6c:	4798      	blx	r3
  }
}
 8007c6e:	bf00      	nop
 8007c70:	3710      	adds	r7, #16
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
	...

08007c78 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b08c      	sub	sp, #48	; 0x30
 8007c7c:	af02      	add	r7, sp, #8
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	607a      	str	r2, [r7, #4]
 8007c82:	603b      	str	r3, [r7, #0]
 8007c84:	460b      	mov	r3, r1
 8007c86:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c8c:	f3ef 8305 	mrs	r3, IPSR
 8007c90:	613b      	str	r3, [r7, #16]
  return(result);
 8007c92:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d163      	bne.n	8007d60 <osTimerNew+0xe8>
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d060      	beq.n	8007d60 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8007c9e:	2008      	movs	r0, #8
 8007ca0:	f003 fcda 	bl	800b658 <pvPortMalloc>
 8007ca4:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d059      	beq.n	8007d60 <osTimerNew+0xe8>
      callb->func = func;
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	68fa      	ldr	r2, [r7, #12]
 8007cb0:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8007cb8:	7afb      	ldrb	r3, [r7, #11]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d102      	bne.n	8007cc4 <osTimerNew+0x4c>
        reload = pdFALSE;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	61fb      	str	r3, [r7, #28]
 8007cc2:	e001      	b.n	8007cc8 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8007cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8007ccc:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d01c      	beq.n	8007d12 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d002      	beq.n	8007ce6 <osTimerNew+0x6e>
          name = attr->name;
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	689b      	ldr	r3, [r3, #8]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d006      	beq.n	8007cfc <osTimerNew+0x84>
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	68db      	ldr	r3, [r3, #12]
 8007cf2:	2b2b      	cmp	r3, #43	; 0x2b
 8007cf4:	d902      	bls.n	8007cfc <osTimerNew+0x84>
          mem = 1;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	61bb      	str	r3, [r7, #24]
 8007cfa:	e00c      	b.n	8007d16 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d108      	bne.n	8007d16 <osTimerNew+0x9e>
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d104      	bne.n	8007d16 <osTimerNew+0x9e>
            mem = 0;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	61bb      	str	r3, [r7, #24]
 8007d10:	e001      	b.n	8007d16 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8007d12:	2300      	movs	r3, #0
 8007d14:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8007d16:	69bb      	ldr	r3, [r7, #24]
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d10c      	bne.n	8007d36 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	9301      	str	r3, [sp, #4]
 8007d22:	4b12      	ldr	r3, [pc, #72]	; (8007d6c <osTimerNew+0xf4>)
 8007d24:	9300      	str	r3, [sp, #0]
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	69fa      	ldr	r2, [r7, #28]
 8007d2a:	2101      	movs	r1, #1
 8007d2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007d2e:	f002 fea6 	bl	800aa7e <xTimerCreateStatic>
 8007d32:	6238      	str	r0, [r7, #32]
 8007d34:	e00b      	b.n	8007d4e <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8007d36:	69bb      	ldr	r3, [r7, #24]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d108      	bne.n	8007d4e <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8007d3c:	4b0b      	ldr	r3, [pc, #44]	; (8007d6c <osTimerNew+0xf4>)
 8007d3e:	9300      	str	r3, [sp, #0]
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	69fa      	ldr	r2, [r7, #28]
 8007d44:	2101      	movs	r1, #1
 8007d46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007d48:	f002 fe78 	bl	800aa3c <xTimerCreate>
 8007d4c:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8007d4e:	6a3b      	ldr	r3, [r7, #32]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d105      	bne.n	8007d60 <osTimerNew+0xe8>
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d002      	beq.n	8007d60 <osTimerNew+0xe8>
        vPortFree (callb);
 8007d5a:	6978      	ldr	r0, [r7, #20]
 8007d5c:	f003 fd48 	bl	800b7f0 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8007d60:	6a3b      	ldr	r3, [r7, #32]
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3728      	adds	r7, #40	; 0x28
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
 8007d6a:	bf00      	nop
 8007d6c:	08007c4d 	.word	0x08007c4d

08007d70 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b088      	sub	sp, #32
 8007d74:	af02      	add	r7, sp, #8
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d7e:	f3ef 8305 	mrs	r3, IPSR
 8007d82:	60fb      	str	r3, [r7, #12]
  return(result);
 8007d84:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d003      	beq.n	8007d92 <osTimerStart+0x22>
    stat = osErrorISR;
 8007d8a:	f06f 0305 	mvn.w	r3, #5
 8007d8e:	617b      	str	r3, [r7, #20]
 8007d90:	e017      	b.n	8007dc2 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d103      	bne.n	8007da0 <osTimerStart+0x30>
    stat = osErrorParameter;
 8007d98:	f06f 0303 	mvn.w	r3, #3
 8007d9c:	617b      	str	r3, [r7, #20]
 8007d9e:	e010      	b.n	8007dc2 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8007da0:	2300      	movs	r3, #0
 8007da2:	9300      	str	r3, [sp, #0]
 8007da4:	2300      	movs	r3, #0
 8007da6:	683a      	ldr	r2, [r7, #0]
 8007da8:	2104      	movs	r1, #4
 8007daa:	6938      	ldr	r0, [r7, #16]
 8007dac:	f002 fee0 	bl	800ab70 <xTimerGenericCommand>
 8007db0:	4603      	mov	r3, r0
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d102      	bne.n	8007dbc <osTimerStart+0x4c>
      stat = osOK;
 8007db6:	2300      	movs	r3, #0
 8007db8:	617b      	str	r3, [r7, #20]
 8007dba:	e002      	b.n	8007dc2 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8007dbc:	f06f 0302 	mvn.w	r3, #2
 8007dc0:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8007dc2:	697b      	ldr	r3, [r7, #20]
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3718      	adds	r7, #24
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}

08007dcc <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b088      	sub	sp, #32
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007dd8:	f3ef 8305 	mrs	r3, IPSR
 8007ddc:	60bb      	str	r3, [r7, #8]
  return(result);
 8007dde:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d174      	bne.n	8007ece <osMutexNew+0x102>
    if (attr != NULL) {
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d003      	beq.n	8007df2 <osMutexNew+0x26>
      type = attr->attr_bits;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	61bb      	str	r3, [r7, #24]
 8007df0:	e001      	b.n	8007df6 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8007df2:	2300      	movs	r3, #0
 8007df4:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8007df6:	69bb      	ldr	r3, [r7, #24]
 8007df8:	f003 0301 	and.w	r3, r3, #1
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d002      	beq.n	8007e06 <osMutexNew+0x3a>
      rmtx = 1U;
 8007e00:	2301      	movs	r3, #1
 8007e02:	617b      	str	r3, [r7, #20]
 8007e04:	e001      	b.n	8007e0a <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8007e06:	2300      	movs	r3, #0
 8007e08:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8007e0a:	69bb      	ldr	r3, [r7, #24]
 8007e0c:	f003 0308 	and.w	r3, r3, #8
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d15c      	bne.n	8007ece <osMutexNew+0x102>
      mem = -1;
 8007e14:	f04f 33ff 	mov.w	r3, #4294967295
 8007e18:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d015      	beq.n	8007e4c <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d006      	beq.n	8007e36 <osMutexNew+0x6a>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	68db      	ldr	r3, [r3, #12]
 8007e2c:	2b4f      	cmp	r3, #79	; 0x4f
 8007e2e:	d902      	bls.n	8007e36 <osMutexNew+0x6a>
          mem = 1;
 8007e30:	2301      	movs	r3, #1
 8007e32:	613b      	str	r3, [r7, #16]
 8007e34:	e00c      	b.n	8007e50 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d108      	bne.n	8007e50 <osMutexNew+0x84>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	68db      	ldr	r3, [r3, #12]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d104      	bne.n	8007e50 <osMutexNew+0x84>
            mem = 0;
 8007e46:	2300      	movs	r3, #0
 8007e48:	613b      	str	r3, [r7, #16]
 8007e4a:	e001      	b.n	8007e50 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	d112      	bne.n	8007e7c <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d007      	beq.n	8007e6c <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	4619      	mov	r1, r3
 8007e62:	2004      	movs	r0, #4
 8007e64:	f000 fd69 	bl	800893a <xQueueCreateMutexStatic>
 8007e68:	61f8      	str	r0, [r7, #28]
 8007e6a:	e016      	b.n	8007e9a <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	4619      	mov	r1, r3
 8007e72:	2001      	movs	r0, #1
 8007e74:	f000 fd61 	bl	800893a <xQueueCreateMutexStatic>
 8007e78:	61f8      	str	r0, [r7, #28]
 8007e7a:	e00e      	b.n	8007e9a <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d10b      	bne.n	8007e9a <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d004      	beq.n	8007e92 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8007e88:	2004      	movs	r0, #4
 8007e8a:	f000 fd3e 	bl	800890a <xQueueCreateMutex>
 8007e8e:	61f8      	str	r0, [r7, #28]
 8007e90:	e003      	b.n	8007e9a <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8007e92:	2001      	movs	r0, #1
 8007e94:	f000 fd39 	bl	800890a <xQueueCreateMutex>
 8007e98:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8007e9a:	69fb      	ldr	r3, [r7, #28]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d00c      	beq.n	8007eba <osMutexNew+0xee>
        if (attr != NULL) {
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d003      	beq.n	8007eae <osMutexNew+0xe2>
          name = attr->name;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	60fb      	str	r3, [r7, #12]
 8007eac:	e001      	b.n	8007eb2 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8007eb2:	68f9      	ldr	r1, [r7, #12]
 8007eb4:	69f8      	ldr	r0, [r7, #28]
 8007eb6:	f001 fc0d 	bl	80096d4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8007eba:	69fb      	ldr	r3, [r7, #28]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d006      	beq.n	8007ece <osMutexNew+0x102>
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d003      	beq.n	8007ece <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007ec6:	69fb      	ldr	r3, [r7, #28]
 8007ec8:	f043 0301 	orr.w	r3, r3, #1
 8007ecc:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8007ece:	69fb      	ldr	r3, [r7, #28]
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3720      	adds	r7, #32
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b086      	sub	sp, #24
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f023 0301 	bic.w	r3, r3, #1
 8007ee8:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f003 0301 	and.w	r3, r3, #1
 8007ef0:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ef6:	f3ef 8305 	mrs	r3, IPSR
 8007efa:	60bb      	str	r3, [r7, #8]
  return(result);
 8007efc:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d003      	beq.n	8007f0a <osMutexAcquire+0x32>
    stat = osErrorISR;
 8007f02:	f06f 0305 	mvn.w	r3, #5
 8007f06:	617b      	str	r3, [r7, #20]
 8007f08:	e02c      	b.n	8007f64 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d103      	bne.n	8007f18 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8007f10:	f06f 0303 	mvn.w	r3, #3
 8007f14:	617b      	str	r3, [r7, #20]
 8007f16:	e025      	b.n	8007f64 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d011      	beq.n	8007f42 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8007f1e:	6839      	ldr	r1, [r7, #0]
 8007f20:	6938      	ldr	r0, [r7, #16]
 8007f22:	f000 fd59 	bl	80089d8 <xQueueTakeMutexRecursive>
 8007f26:	4603      	mov	r3, r0
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d01b      	beq.n	8007f64 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d003      	beq.n	8007f3a <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8007f32:	f06f 0301 	mvn.w	r3, #1
 8007f36:	617b      	str	r3, [r7, #20]
 8007f38:	e014      	b.n	8007f64 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8007f3a:	f06f 0302 	mvn.w	r3, #2
 8007f3e:	617b      	str	r3, [r7, #20]
 8007f40:	e010      	b.n	8007f64 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8007f42:	6839      	ldr	r1, [r7, #0]
 8007f44:	6938      	ldr	r0, [r7, #16]
 8007f46:	f001 f8ed 	bl	8009124 <xQueueSemaphoreTake>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d009      	beq.n	8007f64 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d003      	beq.n	8007f5e <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8007f56:	f06f 0301 	mvn.w	r3, #1
 8007f5a:	617b      	str	r3, [r7, #20]
 8007f5c:	e002      	b.n	8007f64 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8007f5e:	f06f 0302 	mvn.w	r3, #2
 8007f62:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8007f64:	697b      	ldr	r3, [r7, #20]
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3718      	adds	r7, #24
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}

08007f6e <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8007f6e:	b580      	push	{r7, lr}
 8007f70:	b086      	sub	sp, #24
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f023 0301 	bic.w	r3, r3, #1
 8007f7c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f003 0301 	and.w	r3, r3, #1
 8007f84:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8007f86:	2300      	movs	r3, #0
 8007f88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f8a:	f3ef 8305 	mrs	r3, IPSR
 8007f8e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007f90:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d003      	beq.n	8007f9e <osMutexRelease+0x30>
    stat = osErrorISR;
 8007f96:	f06f 0305 	mvn.w	r3, #5
 8007f9a:	617b      	str	r3, [r7, #20]
 8007f9c:	e01f      	b.n	8007fde <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d103      	bne.n	8007fac <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8007fa4:	f06f 0303 	mvn.w	r3, #3
 8007fa8:	617b      	str	r3, [r7, #20]
 8007faa:	e018      	b.n	8007fde <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d009      	beq.n	8007fc6 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8007fb2:	6938      	ldr	r0, [r7, #16]
 8007fb4:	f000 fcdc 	bl	8008970 <xQueueGiveMutexRecursive>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	2b01      	cmp	r3, #1
 8007fbc:	d00f      	beq.n	8007fde <osMutexRelease+0x70>
        stat = osErrorResource;
 8007fbe:	f06f 0302 	mvn.w	r3, #2
 8007fc2:	617b      	str	r3, [r7, #20]
 8007fc4:	e00b      	b.n	8007fde <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	2200      	movs	r2, #0
 8007fca:	2100      	movs	r1, #0
 8007fcc:	6938      	ldr	r0, [r7, #16]
 8007fce:	f000 fda3 	bl	8008b18 <xQueueGenericSend>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	d002      	beq.n	8007fde <osMutexRelease+0x70>
        stat = osErrorResource;
 8007fd8:	f06f 0302 	mvn.w	r3, #2
 8007fdc:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8007fde:	697b      	ldr	r3, [r7, #20]
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3718      	adds	r7, #24
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}

08007fe8 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b08a      	sub	sp, #40	; 0x28
 8007fec:	af02      	add	r7, sp, #8
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ff8:	f3ef 8305 	mrs	r3, IPSR
 8007ffc:	613b      	str	r3, [r7, #16]
  return(result);
 8007ffe:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008000:	2b00      	cmp	r3, #0
 8008002:	d175      	bne.n	80080f0 <osSemaphoreNew+0x108>
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d072      	beq.n	80080f0 <osSemaphoreNew+0x108>
 800800a:	68ba      	ldr	r2, [r7, #8]
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	429a      	cmp	r2, r3
 8008010:	d86e      	bhi.n	80080f0 <osSemaphoreNew+0x108>
    mem = -1;
 8008012:	f04f 33ff 	mov.w	r3, #4294967295
 8008016:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d015      	beq.n	800804a <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	689b      	ldr	r3, [r3, #8]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d006      	beq.n	8008034 <osSemaphoreNew+0x4c>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	68db      	ldr	r3, [r3, #12]
 800802a:	2b4f      	cmp	r3, #79	; 0x4f
 800802c:	d902      	bls.n	8008034 <osSemaphoreNew+0x4c>
        mem = 1;
 800802e:	2301      	movs	r3, #1
 8008030:	61bb      	str	r3, [r7, #24]
 8008032:	e00c      	b.n	800804e <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d108      	bne.n	800804e <osSemaphoreNew+0x66>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	68db      	ldr	r3, [r3, #12]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d104      	bne.n	800804e <osSemaphoreNew+0x66>
          mem = 0;
 8008044:	2300      	movs	r3, #0
 8008046:	61bb      	str	r3, [r7, #24]
 8008048:	e001      	b.n	800804e <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800804a:	2300      	movs	r3, #0
 800804c:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800804e:	69bb      	ldr	r3, [r7, #24]
 8008050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008054:	d04c      	beq.n	80080f0 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2b01      	cmp	r3, #1
 800805a:	d128      	bne.n	80080ae <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800805c:	69bb      	ldr	r3, [r7, #24]
 800805e:	2b01      	cmp	r3, #1
 8008060:	d10a      	bne.n	8008078 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	2203      	movs	r2, #3
 8008068:	9200      	str	r2, [sp, #0]
 800806a:	2200      	movs	r2, #0
 800806c:	2100      	movs	r1, #0
 800806e:	2001      	movs	r0, #1
 8008070:	f000 fb5c 	bl	800872c <xQueueGenericCreateStatic>
 8008074:	61f8      	str	r0, [r7, #28]
 8008076:	e005      	b.n	8008084 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8008078:	2203      	movs	r2, #3
 800807a:	2100      	movs	r1, #0
 800807c:	2001      	movs	r0, #1
 800807e:	f000 fbcd 	bl	800881c <xQueueGenericCreate>
 8008082:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008084:	69fb      	ldr	r3, [r7, #28]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d022      	beq.n	80080d0 <osSemaphoreNew+0xe8>
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d01f      	beq.n	80080d0 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008090:	2300      	movs	r3, #0
 8008092:	2200      	movs	r2, #0
 8008094:	2100      	movs	r1, #0
 8008096:	69f8      	ldr	r0, [r7, #28]
 8008098:	f000 fd3e 	bl	8008b18 <xQueueGenericSend>
 800809c:	4603      	mov	r3, r0
 800809e:	2b01      	cmp	r3, #1
 80080a0:	d016      	beq.n	80080d0 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80080a2:	69f8      	ldr	r0, [r7, #28]
 80080a4:	f001 f9ca 	bl	800943c <vQueueDelete>
            hSemaphore = NULL;
 80080a8:	2300      	movs	r3, #0
 80080aa:	61fb      	str	r3, [r7, #28]
 80080ac:	e010      	b.n	80080d0 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80080ae:	69bb      	ldr	r3, [r7, #24]
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d108      	bne.n	80080c6 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	689b      	ldr	r3, [r3, #8]
 80080b8:	461a      	mov	r2, r3
 80080ba:	68b9      	ldr	r1, [r7, #8]
 80080bc:	68f8      	ldr	r0, [r7, #12]
 80080be:	f000 fcc1 	bl	8008a44 <xQueueCreateCountingSemaphoreStatic>
 80080c2:	61f8      	str	r0, [r7, #28]
 80080c4:	e004      	b.n	80080d0 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80080c6:	68b9      	ldr	r1, [r7, #8]
 80080c8:	68f8      	ldr	r0, [r7, #12]
 80080ca:	f000 fcf2 	bl	8008ab2 <xQueueCreateCountingSemaphore>
 80080ce:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80080d0:	69fb      	ldr	r3, [r7, #28]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d00c      	beq.n	80080f0 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d003      	beq.n	80080e4 <osSemaphoreNew+0xfc>
          name = attr->name;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	617b      	str	r3, [r7, #20]
 80080e2:	e001      	b.n	80080e8 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80080e4:	2300      	movs	r3, #0
 80080e6:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80080e8:	6979      	ldr	r1, [r7, #20]
 80080ea:	69f8      	ldr	r0, [r7, #28]
 80080ec:	f001 faf2 	bl	80096d4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80080f0:	69fb      	ldr	r3, [r7, #28]
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3720      	adds	r7, #32
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
	...

080080fc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b086      	sub	sp, #24
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800810a:	2300      	movs	r3, #0
 800810c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d103      	bne.n	800811c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8008114:	f06f 0303 	mvn.w	r3, #3
 8008118:	617b      	str	r3, [r7, #20]
 800811a:	e039      	b.n	8008190 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800811c:	f3ef 8305 	mrs	r3, IPSR
 8008120:	60fb      	str	r3, [r7, #12]
  return(result);
 8008122:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008124:	2b00      	cmp	r3, #0
 8008126:	d022      	beq.n	800816e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d003      	beq.n	8008136 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800812e:	f06f 0303 	mvn.w	r3, #3
 8008132:	617b      	str	r3, [r7, #20]
 8008134:	e02c      	b.n	8008190 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8008136:	2300      	movs	r3, #0
 8008138:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800813a:	f107 0308 	add.w	r3, r7, #8
 800813e:	461a      	mov	r2, r3
 8008140:	2100      	movs	r1, #0
 8008142:	6938      	ldr	r0, [r7, #16]
 8008144:	f001 f8fa 	bl	800933c <xQueueReceiveFromISR>
 8008148:	4603      	mov	r3, r0
 800814a:	2b01      	cmp	r3, #1
 800814c:	d003      	beq.n	8008156 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800814e:	f06f 0302 	mvn.w	r3, #2
 8008152:	617b      	str	r3, [r7, #20]
 8008154:	e01c      	b.n	8008190 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d019      	beq.n	8008190 <osSemaphoreAcquire+0x94>
 800815c:	4b0f      	ldr	r3, [pc, #60]	; (800819c <osSemaphoreAcquire+0xa0>)
 800815e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008162:	601a      	str	r2, [r3, #0]
 8008164:	f3bf 8f4f 	dsb	sy
 8008168:	f3bf 8f6f 	isb	sy
 800816c:	e010      	b.n	8008190 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800816e:	6839      	ldr	r1, [r7, #0]
 8008170:	6938      	ldr	r0, [r7, #16]
 8008172:	f000 ffd7 	bl	8009124 <xQueueSemaphoreTake>
 8008176:	4603      	mov	r3, r0
 8008178:	2b01      	cmp	r3, #1
 800817a:	d009      	beq.n	8008190 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d003      	beq.n	800818a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8008182:	f06f 0301 	mvn.w	r3, #1
 8008186:	617b      	str	r3, [r7, #20]
 8008188:	e002      	b.n	8008190 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800818a:	f06f 0302 	mvn.w	r3, #2
 800818e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008190:	697b      	ldr	r3, [r7, #20]
}
 8008192:	4618      	mov	r0, r3
 8008194:	3718      	adds	r7, #24
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
 800819a:	bf00      	nop
 800819c:	e000ed04 	.word	0xe000ed04

080081a0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b086      	sub	sp, #24
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80081ac:	2300      	movs	r3, #0
 80081ae:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d103      	bne.n	80081be <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80081b6:	f06f 0303 	mvn.w	r3, #3
 80081ba:	617b      	str	r3, [r7, #20]
 80081bc:	e02c      	b.n	8008218 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081be:	f3ef 8305 	mrs	r3, IPSR
 80081c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80081c4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d01a      	beq.n	8008200 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80081ca:	2300      	movs	r3, #0
 80081cc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80081ce:	f107 0308 	add.w	r3, r7, #8
 80081d2:	4619      	mov	r1, r3
 80081d4:	6938      	ldr	r0, [r7, #16]
 80081d6:	f000 fe38 	bl	8008e4a <xQueueGiveFromISR>
 80081da:	4603      	mov	r3, r0
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d003      	beq.n	80081e8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80081e0:	f06f 0302 	mvn.w	r3, #2
 80081e4:	617b      	str	r3, [r7, #20]
 80081e6:	e017      	b.n	8008218 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d014      	beq.n	8008218 <osSemaphoreRelease+0x78>
 80081ee:	4b0d      	ldr	r3, [pc, #52]	; (8008224 <osSemaphoreRelease+0x84>)
 80081f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081f4:	601a      	str	r2, [r3, #0]
 80081f6:	f3bf 8f4f 	dsb	sy
 80081fa:	f3bf 8f6f 	isb	sy
 80081fe:	e00b      	b.n	8008218 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008200:	2300      	movs	r3, #0
 8008202:	2200      	movs	r2, #0
 8008204:	2100      	movs	r1, #0
 8008206:	6938      	ldr	r0, [r7, #16]
 8008208:	f000 fc86 	bl	8008b18 <xQueueGenericSend>
 800820c:	4603      	mov	r3, r0
 800820e:	2b01      	cmp	r3, #1
 8008210:	d002      	beq.n	8008218 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8008212:	f06f 0302 	mvn.w	r3, #2
 8008216:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8008218:	697b      	ldr	r3, [r7, #20]
}
 800821a:	4618      	mov	r0, r3
 800821c:	3718      	adds	r7, #24
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
 8008222:	bf00      	nop
 8008224:	e000ed04 	.word	0xe000ed04

08008228 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008228:	b580      	push	{r7, lr}
 800822a:	b08a      	sub	sp, #40	; 0x28
 800822c:	af02      	add	r7, sp, #8
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008234:	2300      	movs	r3, #0
 8008236:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008238:	f3ef 8305 	mrs	r3, IPSR
 800823c:	613b      	str	r3, [r7, #16]
  return(result);
 800823e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008240:	2b00      	cmp	r3, #0
 8008242:	d15f      	bne.n	8008304 <osMessageQueueNew+0xdc>
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d05c      	beq.n	8008304 <osMessageQueueNew+0xdc>
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d059      	beq.n	8008304 <osMessageQueueNew+0xdc>
    mem = -1;
 8008250:	f04f 33ff 	mov.w	r3, #4294967295
 8008254:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d029      	beq.n	80082b0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d012      	beq.n	800828a <osMessageQueueNew+0x62>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	68db      	ldr	r3, [r3, #12]
 8008268:	2b4f      	cmp	r3, #79	; 0x4f
 800826a:	d90e      	bls.n	800828a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008270:	2b00      	cmp	r3, #0
 8008272:	d00a      	beq.n	800828a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	695a      	ldr	r2, [r3, #20]
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	68b9      	ldr	r1, [r7, #8]
 800827c:	fb01 f303 	mul.w	r3, r1, r3
 8008280:	429a      	cmp	r2, r3
 8008282:	d302      	bcc.n	800828a <osMessageQueueNew+0x62>
        mem = 1;
 8008284:	2301      	movs	r3, #1
 8008286:	61bb      	str	r3, [r7, #24]
 8008288:	e014      	b.n	80082b4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	689b      	ldr	r3, [r3, #8]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d110      	bne.n	80082b4 <osMessageQueueNew+0x8c>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	68db      	ldr	r3, [r3, #12]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d10c      	bne.n	80082b4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d108      	bne.n	80082b4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	695b      	ldr	r3, [r3, #20]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d104      	bne.n	80082b4 <osMessageQueueNew+0x8c>
          mem = 0;
 80082aa:	2300      	movs	r3, #0
 80082ac:	61bb      	str	r3, [r7, #24]
 80082ae:	e001      	b.n	80082b4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80082b0:	2300      	movs	r3, #0
 80082b2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80082b4:	69bb      	ldr	r3, [r7, #24]
 80082b6:	2b01      	cmp	r3, #1
 80082b8:	d10b      	bne.n	80082d2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	691a      	ldr	r2, [r3, #16]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	689b      	ldr	r3, [r3, #8]
 80082c2:	2100      	movs	r1, #0
 80082c4:	9100      	str	r1, [sp, #0]
 80082c6:	68b9      	ldr	r1, [r7, #8]
 80082c8:	68f8      	ldr	r0, [r7, #12]
 80082ca:	f000 fa2f 	bl	800872c <xQueueGenericCreateStatic>
 80082ce:	61f8      	str	r0, [r7, #28]
 80082d0:	e008      	b.n	80082e4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80082d2:	69bb      	ldr	r3, [r7, #24]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d105      	bne.n	80082e4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80082d8:	2200      	movs	r2, #0
 80082da:	68b9      	ldr	r1, [r7, #8]
 80082dc:	68f8      	ldr	r0, [r7, #12]
 80082de:	f000 fa9d 	bl	800881c <xQueueGenericCreate>
 80082e2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80082e4:	69fb      	ldr	r3, [r7, #28]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d00c      	beq.n	8008304 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d003      	beq.n	80082f8 <osMessageQueueNew+0xd0>
        name = attr->name;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	617b      	str	r3, [r7, #20]
 80082f6:	e001      	b.n	80082fc <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80082f8:	2300      	movs	r3, #0
 80082fa:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80082fc:	6979      	ldr	r1, [r7, #20]
 80082fe:	69f8      	ldr	r0, [r7, #28]
 8008300:	f001 f9e8 	bl	80096d4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008304:	69fb      	ldr	r3, [r7, #28]
}
 8008306:	4618      	mov	r0, r3
 8008308:	3720      	adds	r7, #32
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
	...

08008310 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008310:	b580      	push	{r7, lr}
 8008312:	b088      	sub	sp, #32
 8008314:	af00      	add	r7, sp, #0
 8008316:	60f8      	str	r0, [r7, #12]
 8008318:	60b9      	str	r1, [r7, #8]
 800831a:	603b      	str	r3, [r7, #0]
 800831c:	4613      	mov	r3, r2
 800831e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008324:	2300      	movs	r3, #0
 8008326:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008328:	f3ef 8305 	mrs	r3, IPSR
 800832c:	617b      	str	r3, [r7, #20]
  return(result);
 800832e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008330:	2b00      	cmp	r3, #0
 8008332:	d028      	beq.n	8008386 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008334:	69bb      	ldr	r3, [r7, #24]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d005      	beq.n	8008346 <osMessageQueuePut+0x36>
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d002      	beq.n	8008346 <osMessageQueuePut+0x36>
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d003      	beq.n	800834e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8008346:	f06f 0303 	mvn.w	r3, #3
 800834a:	61fb      	str	r3, [r7, #28]
 800834c:	e038      	b.n	80083c0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800834e:	2300      	movs	r3, #0
 8008350:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008352:	f107 0210 	add.w	r2, r7, #16
 8008356:	2300      	movs	r3, #0
 8008358:	68b9      	ldr	r1, [r7, #8]
 800835a:	69b8      	ldr	r0, [r7, #24]
 800835c:	f000 fcda 	bl	8008d14 <xQueueGenericSendFromISR>
 8008360:	4603      	mov	r3, r0
 8008362:	2b01      	cmp	r3, #1
 8008364:	d003      	beq.n	800836e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8008366:	f06f 0302 	mvn.w	r3, #2
 800836a:	61fb      	str	r3, [r7, #28]
 800836c:	e028      	b.n	80083c0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d025      	beq.n	80083c0 <osMessageQueuePut+0xb0>
 8008374:	4b15      	ldr	r3, [pc, #84]	; (80083cc <osMessageQueuePut+0xbc>)
 8008376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800837a:	601a      	str	r2, [r3, #0]
 800837c:	f3bf 8f4f 	dsb	sy
 8008380:	f3bf 8f6f 	isb	sy
 8008384:	e01c      	b.n	80083c0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008386:	69bb      	ldr	r3, [r7, #24]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d002      	beq.n	8008392 <osMessageQueuePut+0x82>
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d103      	bne.n	800839a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8008392:	f06f 0303 	mvn.w	r3, #3
 8008396:	61fb      	str	r3, [r7, #28]
 8008398:	e012      	b.n	80083c0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800839a:	2300      	movs	r3, #0
 800839c:	683a      	ldr	r2, [r7, #0]
 800839e:	68b9      	ldr	r1, [r7, #8]
 80083a0:	69b8      	ldr	r0, [r7, #24]
 80083a2:	f000 fbb9 	bl	8008b18 <xQueueGenericSend>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d009      	beq.n	80083c0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d003      	beq.n	80083ba <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80083b2:	f06f 0301 	mvn.w	r3, #1
 80083b6:	61fb      	str	r3, [r7, #28]
 80083b8:	e002      	b.n	80083c0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80083ba:	f06f 0302 	mvn.w	r3, #2
 80083be:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80083c0:	69fb      	ldr	r3, [r7, #28]
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3720      	adds	r7, #32
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
 80083ca:	bf00      	nop
 80083cc:	e000ed04 	.word	0xe000ed04

080083d0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b088      	sub	sp, #32
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	60f8      	str	r0, [r7, #12]
 80083d8:	60b9      	str	r1, [r7, #8]
 80083da:	607a      	str	r2, [r7, #4]
 80083dc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80083e2:	2300      	movs	r3, #0
 80083e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083e6:	f3ef 8305 	mrs	r3, IPSR
 80083ea:	617b      	str	r3, [r7, #20]
  return(result);
 80083ec:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d028      	beq.n	8008444 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80083f2:	69bb      	ldr	r3, [r7, #24]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d005      	beq.n	8008404 <osMessageQueueGet+0x34>
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d002      	beq.n	8008404 <osMessageQueueGet+0x34>
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d003      	beq.n	800840c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8008404:	f06f 0303 	mvn.w	r3, #3
 8008408:	61fb      	str	r3, [r7, #28]
 800840a:	e037      	b.n	800847c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800840c:	2300      	movs	r3, #0
 800840e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008410:	f107 0310 	add.w	r3, r7, #16
 8008414:	461a      	mov	r2, r3
 8008416:	68b9      	ldr	r1, [r7, #8]
 8008418:	69b8      	ldr	r0, [r7, #24]
 800841a:	f000 ff8f 	bl	800933c <xQueueReceiveFromISR>
 800841e:	4603      	mov	r3, r0
 8008420:	2b01      	cmp	r3, #1
 8008422:	d003      	beq.n	800842c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8008424:	f06f 0302 	mvn.w	r3, #2
 8008428:	61fb      	str	r3, [r7, #28]
 800842a:	e027      	b.n	800847c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d024      	beq.n	800847c <osMessageQueueGet+0xac>
 8008432:	4b15      	ldr	r3, [pc, #84]	; (8008488 <osMessageQueueGet+0xb8>)
 8008434:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008438:	601a      	str	r2, [r3, #0]
 800843a:	f3bf 8f4f 	dsb	sy
 800843e:	f3bf 8f6f 	isb	sy
 8008442:	e01b      	b.n	800847c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008444:	69bb      	ldr	r3, [r7, #24]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d002      	beq.n	8008450 <osMessageQueueGet+0x80>
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d103      	bne.n	8008458 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8008450:	f06f 0303 	mvn.w	r3, #3
 8008454:	61fb      	str	r3, [r7, #28]
 8008456:	e011      	b.n	800847c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008458:	683a      	ldr	r2, [r7, #0]
 800845a:	68b9      	ldr	r1, [r7, #8]
 800845c:	69b8      	ldr	r0, [r7, #24]
 800845e:	f000 fd81 	bl	8008f64 <xQueueReceive>
 8008462:	4603      	mov	r3, r0
 8008464:	2b01      	cmp	r3, #1
 8008466:	d009      	beq.n	800847c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d003      	beq.n	8008476 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800846e:	f06f 0301 	mvn.w	r3, #1
 8008472:	61fb      	str	r3, [r7, #28]
 8008474:	e002      	b.n	800847c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8008476:	f06f 0302 	mvn.w	r3, #2
 800847a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800847c:	69fb      	ldr	r3, [r7, #28]
}
 800847e:	4618      	mov	r0, r3
 8008480:	3720      	adds	r7, #32
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}
 8008486:	bf00      	nop
 8008488:	e000ed04 	.word	0xe000ed04

0800848c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800848c:	b480      	push	{r7}
 800848e:	b085      	sub	sp, #20
 8008490:	af00      	add	r7, sp, #0
 8008492:	60f8      	str	r0, [r7, #12]
 8008494:	60b9      	str	r1, [r7, #8]
 8008496:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	4a07      	ldr	r2, [pc, #28]	; (80084b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800849c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	4a06      	ldr	r2, [pc, #24]	; (80084bc <vApplicationGetIdleTaskMemory+0x30>)
 80084a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2280      	movs	r2, #128	; 0x80
 80084a8:	601a      	str	r2, [r3, #0]
}
 80084aa:	bf00      	nop
 80084ac:	3714      	adds	r7, #20
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr
 80084b6:	bf00      	nop
 80084b8:	200006f4 	.word	0x200006f4
 80084bc:	20000750 	.word	0x20000750

080084c0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80084c0:	b480      	push	{r7}
 80084c2:	b085      	sub	sp, #20
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	60b9      	str	r1, [r7, #8]
 80084ca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	4a07      	ldr	r2, [pc, #28]	; (80084ec <vApplicationGetTimerTaskMemory+0x2c>)
 80084d0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	4a06      	ldr	r2, [pc, #24]	; (80084f0 <vApplicationGetTimerTaskMemory+0x30>)
 80084d6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80084de:	601a      	str	r2, [r3, #0]
}
 80084e0:	bf00      	nop
 80084e2:	3714      	adds	r7, #20
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr
 80084ec:	20000950 	.word	0x20000950
 80084f0:	200009ac 	.word	0x200009ac

080084f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80084f4:	b480      	push	{r7}
 80084f6:	b083      	sub	sp, #12
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f103 0208 	add.w	r2, r3, #8
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f04f 32ff 	mov.w	r2, #4294967295
 800850c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f103 0208 	add.w	r2, r3, #8
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f103 0208 	add.w	r2, r3, #8
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008528:	bf00      	nop
 800852a:	370c      	adds	r7, #12
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr

08008534 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008534:	b480      	push	{r7}
 8008536:	b083      	sub	sp, #12
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2200      	movs	r2, #0
 8008540:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008542:	bf00      	nop
 8008544:	370c      	adds	r7, #12
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr

0800854e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800854e:	b480      	push	{r7}
 8008550:	b085      	sub	sp, #20
 8008552:	af00      	add	r7, sp, #0
 8008554:	6078      	str	r0, [r7, #4]
 8008556:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	68fa      	ldr	r2, [r7, #12]
 8008562:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	689a      	ldr	r2, [r3, #8]
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	689b      	ldr	r3, [r3, #8]
 8008570:	683a      	ldr	r2, [r7, #0]
 8008572:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	683a      	ldr	r2, [r7, #0]
 8008578:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	687a      	ldr	r2, [r7, #4]
 800857e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	1c5a      	adds	r2, r3, #1
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	601a      	str	r2, [r3, #0]
}
 800858a:	bf00      	nop
 800858c:	3714      	adds	r7, #20
 800858e:	46bd      	mov	sp, r7
 8008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008594:	4770      	bx	lr

08008596 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008596:	b480      	push	{r7}
 8008598:	b085      	sub	sp, #20
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
 800859e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ac:	d103      	bne.n	80085b6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	691b      	ldr	r3, [r3, #16]
 80085b2:	60fb      	str	r3, [r7, #12]
 80085b4:	e00c      	b.n	80085d0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	3308      	adds	r3, #8
 80085ba:	60fb      	str	r3, [r7, #12]
 80085bc:	e002      	b.n	80085c4 <vListInsert+0x2e>
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	60fb      	str	r3, [r7, #12]
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	68ba      	ldr	r2, [r7, #8]
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d2f6      	bcs.n	80085be <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	685a      	ldr	r2, [r3, #4]
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	683a      	ldr	r2, [r7, #0]
 80085de:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	68fa      	ldr	r2, [r7, #12]
 80085e4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	683a      	ldr	r2, [r7, #0]
 80085ea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	687a      	ldr	r2, [r7, #4]
 80085f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	1c5a      	adds	r2, r3, #1
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	601a      	str	r2, [r3, #0]
}
 80085fc:	bf00      	nop
 80085fe:	3714      	adds	r7, #20
 8008600:	46bd      	mov	sp, r7
 8008602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008606:	4770      	bx	lr

08008608 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008608:	b480      	push	{r7}
 800860a:	b085      	sub	sp, #20
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	691b      	ldr	r3, [r3, #16]
 8008614:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	687a      	ldr	r2, [r7, #4]
 800861c:	6892      	ldr	r2, [r2, #8]
 800861e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	689b      	ldr	r3, [r3, #8]
 8008624:	687a      	ldr	r2, [r7, #4]
 8008626:	6852      	ldr	r2, [r2, #4]
 8008628:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	687a      	ldr	r2, [r7, #4]
 8008630:	429a      	cmp	r2, r3
 8008632:	d103      	bne.n	800863c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	689a      	ldr	r2, [r3, #8]
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2200      	movs	r2, #0
 8008640:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	1e5a      	subs	r2, r3, #1
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
}
 8008650:	4618      	mov	r0, r3
 8008652:	3714      	adds	r7, #20
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr

0800865c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b084      	sub	sp, #16
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d10a      	bne.n	8008686 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008674:	f383 8811 	msr	BASEPRI, r3
 8008678:	f3bf 8f6f 	isb	sy
 800867c:	f3bf 8f4f 	dsb	sy
 8008680:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008682:	bf00      	nop
 8008684:	e7fe      	b.n	8008684 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008686:	f002 fec5 	bl	800b414 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681a      	ldr	r2, [r3, #0]
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008692:	68f9      	ldr	r1, [r7, #12]
 8008694:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008696:	fb01 f303 	mul.w	r3, r1, r3
 800869a:	441a      	add	r2, r3
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2200      	movs	r2, #0
 80086a4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681a      	ldr	r2, [r3, #0]
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086b6:	3b01      	subs	r3, #1
 80086b8:	68f9      	ldr	r1, [r7, #12]
 80086ba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80086bc:	fb01 f303 	mul.w	r3, r1, r3
 80086c0:	441a      	add	r2, r3
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	22ff      	movs	r2, #255	; 0xff
 80086ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	22ff      	movs	r2, #255	; 0xff
 80086d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d114      	bne.n	8008706 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	691b      	ldr	r3, [r3, #16]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d01a      	beq.n	800871a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	3310      	adds	r3, #16
 80086e8:	4618      	mov	r0, r3
 80086ea:	f001 fdb3 	bl	800a254 <xTaskRemoveFromEventList>
 80086ee:	4603      	mov	r3, r0
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d012      	beq.n	800871a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80086f4:	4b0c      	ldr	r3, [pc, #48]	; (8008728 <xQueueGenericReset+0xcc>)
 80086f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086fa:	601a      	str	r2, [r3, #0]
 80086fc:	f3bf 8f4f 	dsb	sy
 8008700:	f3bf 8f6f 	isb	sy
 8008704:	e009      	b.n	800871a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	3310      	adds	r3, #16
 800870a:	4618      	mov	r0, r3
 800870c:	f7ff fef2 	bl	80084f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	3324      	adds	r3, #36	; 0x24
 8008714:	4618      	mov	r0, r3
 8008716:	f7ff feed 	bl	80084f4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800871a:	f002 feab 	bl	800b474 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800871e:	2301      	movs	r3, #1
}
 8008720:	4618      	mov	r0, r3
 8008722:	3710      	adds	r7, #16
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}
 8008728:	e000ed04 	.word	0xe000ed04

0800872c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800872c:	b580      	push	{r7, lr}
 800872e:	b08e      	sub	sp, #56	; 0x38
 8008730:	af02      	add	r7, sp, #8
 8008732:	60f8      	str	r0, [r7, #12]
 8008734:	60b9      	str	r1, [r7, #8]
 8008736:	607a      	str	r2, [r7, #4]
 8008738:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d10a      	bne.n	8008756 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008744:	f383 8811 	msr	BASEPRI, r3
 8008748:	f3bf 8f6f 	isb	sy
 800874c:	f3bf 8f4f 	dsb	sy
 8008750:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008752:	bf00      	nop
 8008754:	e7fe      	b.n	8008754 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d10a      	bne.n	8008772 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800875c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008760:	f383 8811 	msr	BASEPRI, r3
 8008764:	f3bf 8f6f 	isb	sy
 8008768:	f3bf 8f4f 	dsb	sy
 800876c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800876e:	bf00      	nop
 8008770:	e7fe      	b.n	8008770 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d002      	beq.n	800877e <xQueueGenericCreateStatic+0x52>
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d001      	beq.n	8008782 <xQueueGenericCreateStatic+0x56>
 800877e:	2301      	movs	r3, #1
 8008780:	e000      	b.n	8008784 <xQueueGenericCreateStatic+0x58>
 8008782:	2300      	movs	r3, #0
 8008784:	2b00      	cmp	r3, #0
 8008786:	d10a      	bne.n	800879e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800878c:	f383 8811 	msr	BASEPRI, r3
 8008790:	f3bf 8f6f 	isb	sy
 8008794:	f3bf 8f4f 	dsb	sy
 8008798:	623b      	str	r3, [r7, #32]
}
 800879a:	bf00      	nop
 800879c:	e7fe      	b.n	800879c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d102      	bne.n	80087aa <xQueueGenericCreateStatic+0x7e>
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d101      	bne.n	80087ae <xQueueGenericCreateStatic+0x82>
 80087aa:	2301      	movs	r3, #1
 80087ac:	e000      	b.n	80087b0 <xQueueGenericCreateStatic+0x84>
 80087ae:	2300      	movs	r3, #0
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d10a      	bne.n	80087ca <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80087b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b8:	f383 8811 	msr	BASEPRI, r3
 80087bc:	f3bf 8f6f 	isb	sy
 80087c0:	f3bf 8f4f 	dsb	sy
 80087c4:	61fb      	str	r3, [r7, #28]
}
 80087c6:	bf00      	nop
 80087c8:	e7fe      	b.n	80087c8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80087ca:	2350      	movs	r3, #80	; 0x50
 80087cc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	2b50      	cmp	r3, #80	; 0x50
 80087d2:	d00a      	beq.n	80087ea <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80087d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d8:	f383 8811 	msr	BASEPRI, r3
 80087dc:	f3bf 8f6f 	isb	sy
 80087e0:	f3bf 8f4f 	dsb	sy
 80087e4:	61bb      	str	r3, [r7, #24]
}
 80087e6:	bf00      	nop
 80087e8:	e7fe      	b.n	80087e8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80087ea:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80087f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d00d      	beq.n	8008812 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80087f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087f8:	2201      	movs	r2, #1
 80087fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80087fe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008804:	9300      	str	r3, [sp, #0]
 8008806:	4613      	mov	r3, r2
 8008808:	687a      	ldr	r2, [r7, #4]
 800880a:	68b9      	ldr	r1, [r7, #8]
 800880c:	68f8      	ldr	r0, [r7, #12]
 800880e:	f000 f83f 	bl	8008890 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008814:	4618      	mov	r0, r3
 8008816:	3730      	adds	r7, #48	; 0x30
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}

0800881c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800881c:	b580      	push	{r7, lr}
 800881e:	b08a      	sub	sp, #40	; 0x28
 8008820:	af02      	add	r7, sp, #8
 8008822:	60f8      	str	r0, [r7, #12]
 8008824:	60b9      	str	r1, [r7, #8]
 8008826:	4613      	mov	r3, r2
 8008828:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d10a      	bne.n	8008846 <xQueueGenericCreate+0x2a>
	__asm volatile
 8008830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008834:	f383 8811 	msr	BASEPRI, r3
 8008838:	f3bf 8f6f 	isb	sy
 800883c:	f3bf 8f4f 	dsb	sy
 8008840:	613b      	str	r3, [r7, #16]
}
 8008842:	bf00      	nop
 8008844:	e7fe      	b.n	8008844 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	68ba      	ldr	r2, [r7, #8]
 800884a:	fb02 f303 	mul.w	r3, r2, r3
 800884e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008850:	69fb      	ldr	r3, [r7, #28]
 8008852:	3350      	adds	r3, #80	; 0x50
 8008854:	4618      	mov	r0, r3
 8008856:	f002 feff 	bl	800b658 <pvPortMalloc>
 800885a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800885c:	69bb      	ldr	r3, [r7, #24]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d011      	beq.n	8008886 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008862:	69bb      	ldr	r3, [r7, #24]
 8008864:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	3350      	adds	r3, #80	; 0x50
 800886a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800886c:	69bb      	ldr	r3, [r7, #24]
 800886e:	2200      	movs	r2, #0
 8008870:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008874:	79fa      	ldrb	r2, [r7, #7]
 8008876:	69bb      	ldr	r3, [r7, #24]
 8008878:	9300      	str	r3, [sp, #0]
 800887a:	4613      	mov	r3, r2
 800887c:	697a      	ldr	r2, [r7, #20]
 800887e:	68b9      	ldr	r1, [r7, #8]
 8008880:	68f8      	ldr	r0, [r7, #12]
 8008882:	f000 f805 	bl	8008890 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008886:	69bb      	ldr	r3, [r7, #24]
	}
 8008888:	4618      	mov	r0, r3
 800888a:	3720      	adds	r7, #32
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b084      	sub	sp, #16
 8008894:	af00      	add	r7, sp, #0
 8008896:	60f8      	str	r0, [r7, #12]
 8008898:	60b9      	str	r1, [r7, #8]
 800889a:	607a      	str	r2, [r7, #4]
 800889c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d103      	bne.n	80088ac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80088a4:	69bb      	ldr	r3, [r7, #24]
 80088a6:	69ba      	ldr	r2, [r7, #24]
 80088a8:	601a      	str	r2, [r3, #0]
 80088aa:	e002      	b.n	80088b2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80088ac:	69bb      	ldr	r3, [r7, #24]
 80088ae:	687a      	ldr	r2, [r7, #4]
 80088b0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80088b2:	69bb      	ldr	r3, [r7, #24]
 80088b4:	68fa      	ldr	r2, [r7, #12]
 80088b6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80088b8:	69bb      	ldr	r3, [r7, #24]
 80088ba:	68ba      	ldr	r2, [r7, #8]
 80088bc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80088be:	2101      	movs	r1, #1
 80088c0:	69b8      	ldr	r0, [r7, #24]
 80088c2:	f7ff fecb 	bl	800865c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80088c6:	69bb      	ldr	r3, [r7, #24]
 80088c8:	78fa      	ldrb	r2, [r7, #3]
 80088ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80088ce:	bf00      	nop
 80088d0:	3710      	adds	r7, #16
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}

080088d6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80088d6:	b580      	push	{r7, lr}
 80088d8:	b082      	sub	sp, #8
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d00e      	beq.n	8008902 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2200      	movs	r2, #0
 80088e8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2200      	movs	r2, #0
 80088ee:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2200      	movs	r2, #0
 80088f4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80088f6:	2300      	movs	r3, #0
 80088f8:	2200      	movs	r2, #0
 80088fa:	2100      	movs	r1, #0
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f000 f90b 	bl	8008b18 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008902:	bf00      	nop
 8008904:	3708      	adds	r7, #8
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}

0800890a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800890a:	b580      	push	{r7, lr}
 800890c:	b086      	sub	sp, #24
 800890e:	af00      	add	r7, sp, #0
 8008910:	4603      	mov	r3, r0
 8008912:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008914:	2301      	movs	r3, #1
 8008916:	617b      	str	r3, [r7, #20]
 8008918:	2300      	movs	r3, #0
 800891a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800891c:	79fb      	ldrb	r3, [r7, #7]
 800891e:	461a      	mov	r2, r3
 8008920:	6939      	ldr	r1, [r7, #16]
 8008922:	6978      	ldr	r0, [r7, #20]
 8008924:	f7ff ff7a 	bl	800881c <xQueueGenericCreate>
 8008928:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800892a:	68f8      	ldr	r0, [r7, #12]
 800892c:	f7ff ffd3 	bl	80088d6 <prvInitialiseMutex>

		return xNewQueue;
 8008930:	68fb      	ldr	r3, [r7, #12]
	}
 8008932:	4618      	mov	r0, r3
 8008934:	3718      	adds	r7, #24
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}

0800893a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800893a:	b580      	push	{r7, lr}
 800893c:	b088      	sub	sp, #32
 800893e:	af02      	add	r7, sp, #8
 8008940:	4603      	mov	r3, r0
 8008942:	6039      	str	r1, [r7, #0]
 8008944:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008946:	2301      	movs	r3, #1
 8008948:	617b      	str	r3, [r7, #20]
 800894a:	2300      	movs	r3, #0
 800894c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800894e:	79fb      	ldrb	r3, [r7, #7]
 8008950:	9300      	str	r3, [sp, #0]
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	2200      	movs	r2, #0
 8008956:	6939      	ldr	r1, [r7, #16]
 8008958:	6978      	ldr	r0, [r7, #20]
 800895a:	f7ff fee7 	bl	800872c <xQueueGenericCreateStatic>
 800895e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008960:	68f8      	ldr	r0, [r7, #12]
 8008962:	f7ff ffb8 	bl	80088d6 <prvInitialiseMutex>

		return xNewQueue;
 8008966:	68fb      	ldr	r3, [r7, #12]
	}
 8008968:	4618      	mov	r0, r3
 800896a:	3718      	adds	r7, #24
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8008970:	b590      	push	{r4, r7, lr}
 8008972:	b087      	sub	sp, #28
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d10a      	bne.n	8008998 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8008982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008986:	f383 8811 	msr	BASEPRI, r3
 800898a:	f3bf 8f6f 	isb	sy
 800898e:	f3bf 8f4f 	dsb	sy
 8008992:	60fb      	str	r3, [r7, #12]
}
 8008994:	bf00      	nop
 8008996:	e7fe      	b.n	8008996 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	689c      	ldr	r4, [r3, #8]
 800899c:	f001 fe18 	bl	800a5d0 <xTaskGetCurrentTaskHandle>
 80089a0:	4603      	mov	r3, r0
 80089a2:	429c      	cmp	r4, r3
 80089a4:	d111      	bne.n	80089ca <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	68db      	ldr	r3, [r3, #12]
 80089aa:	1e5a      	subs	r2, r3, #1
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	68db      	ldr	r3, [r3, #12]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d105      	bne.n	80089c4 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80089b8:	2300      	movs	r3, #0
 80089ba:	2200      	movs	r2, #0
 80089bc:	2100      	movs	r1, #0
 80089be:	6938      	ldr	r0, [r7, #16]
 80089c0:	f000 f8aa 	bl	8008b18 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80089c4:	2301      	movs	r3, #1
 80089c6:	617b      	str	r3, [r7, #20]
 80089c8:	e001      	b.n	80089ce <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80089ca:	2300      	movs	r3, #0
 80089cc:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80089ce:	697b      	ldr	r3, [r7, #20]
	}
 80089d0:	4618      	mov	r0, r3
 80089d2:	371c      	adds	r7, #28
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd90      	pop	{r4, r7, pc}

080089d8 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80089d8:	b590      	push	{r4, r7, lr}
 80089da:	b087      	sub	sp, #28
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d10a      	bne.n	8008a02 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 80089ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f0:	f383 8811 	msr	BASEPRI, r3
 80089f4:	f3bf 8f6f 	isb	sy
 80089f8:	f3bf 8f4f 	dsb	sy
 80089fc:	60fb      	str	r3, [r7, #12]
}
 80089fe:	bf00      	nop
 8008a00:	e7fe      	b.n	8008a00 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	689c      	ldr	r4, [r3, #8]
 8008a06:	f001 fde3 	bl	800a5d0 <xTaskGetCurrentTaskHandle>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	429c      	cmp	r4, r3
 8008a0e:	d107      	bne.n	8008a20 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	68db      	ldr	r3, [r3, #12]
 8008a14:	1c5a      	adds	r2, r3, #1
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	617b      	str	r3, [r7, #20]
 8008a1e:	e00c      	b.n	8008a3a <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8008a20:	6839      	ldr	r1, [r7, #0]
 8008a22:	6938      	ldr	r0, [r7, #16]
 8008a24:	f000 fb7e 	bl	8009124 <xQueueSemaphoreTake>
 8008a28:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d004      	beq.n	8008a3a <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	68db      	ldr	r3, [r3, #12]
 8008a34:	1c5a      	adds	r2, r3, #1
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8008a3a:	697b      	ldr	r3, [r7, #20]
	}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	371c      	adds	r7, #28
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd90      	pop	{r4, r7, pc}

08008a44 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b08a      	sub	sp, #40	; 0x28
 8008a48:	af02      	add	r7, sp, #8
 8008a4a:	60f8      	str	r0, [r7, #12]
 8008a4c:	60b9      	str	r1, [r7, #8]
 8008a4e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d10a      	bne.n	8008a6c <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8008a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a5a:	f383 8811 	msr	BASEPRI, r3
 8008a5e:	f3bf 8f6f 	isb	sy
 8008a62:	f3bf 8f4f 	dsb	sy
 8008a66:	61bb      	str	r3, [r7, #24]
}
 8008a68:	bf00      	nop
 8008a6a:	e7fe      	b.n	8008a6a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008a6c:	68ba      	ldr	r2, [r7, #8]
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d90a      	bls.n	8008a8a <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8008a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a78:	f383 8811 	msr	BASEPRI, r3
 8008a7c:	f3bf 8f6f 	isb	sy
 8008a80:	f3bf 8f4f 	dsb	sy
 8008a84:	617b      	str	r3, [r7, #20]
}
 8008a86:	bf00      	nop
 8008a88:	e7fe      	b.n	8008a88 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008a8a:	2302      	movs	r3, #2
 8008a8c:	9300      	str	r3, [sp, #0]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2200      	movs	r2, #0
 8008a92:	2100      	movs	r1, #0
 8008a94:	68f8      	ldr	r0, [r7, #12]
 8008a96:	f7ff fe49 	bl	800872c <xQueueGenericCreateStatic>
 8008a9a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008a9c:	69fb      	ldr	r3, [r7, #28]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d002      	beq.n	8008aa8 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008aa2:	69fb      	ldr	r3, [r7, #28]
 8008aa4:	68ba      	ldr	r2, [r7, #8]
 8008aa6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008aa8:	69fb      	ldr	r3, [r7, #28]
	}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3720      	adds	r7, #32
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}

08008ab2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008ab2:	b580      	push	{r7, lr}
 8008ab4:	b086      	sub	sp, #24
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	6078      	str	r0, [r7, #4]
 8008aba:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d10a      	bne.n	8008ad8 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8008ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac6:	f383 8811 	msr	BASEPRI, r3
 8008aca:	f3bf 8f6f 	isb	sy
 8008ace:	f3bf 8f4f 	dsb	sy
 8008ad2:	613b      	str	r3, [r7, #16]
}
 8008ad4:	bf00      	nop
 8008ad6:	e7fe      	b.n	8008ad6 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008ad8:	683a      	ldr	r2, [r7, #0]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d90a      	bls.n	8008af6 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8008ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae4:	f383 8811 	msr	BASEPRI, r3
 8008ae8:	f3bf 8f6f 	isb	sy
 8008aec:	f3bf 8f4f 	dsb	sy
 8008af0:	60fb      	str	r3, [r7, #12]
}
 8008af2:	bf00      	nop
 8008af4:	e7fe      	b.n	8008af4 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008af6:	2202      	movs	r2, #2
 8008af8:	2100      	movs	r1, #0
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f7ff fe8e 	bl	800881c <xQueueGenericCreate>
 8008b00:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d002      	beq.n	8008b0e <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	683a      	ldr	r2, [r7, #0]
 8008b0c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008b0e:	697b      	ldr	r3, [r7, #20]
	}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3718      	adds	r7, #24
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b08e      	sub	sp, #56	; 0x38
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	60f8      	str	r0, [r7, #12]
 8008b20:	60b9      	str	r1, [r7, #8]
 8008b22:	607a      	str	r2, [r7, #4]
 8008b24:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008b26:	2300      	movs	r3, #0
 8008b28:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d10a      	bne.n	8008b4a <xQueueGenericSend+0x32>
	__asm volatile
 8008b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b38:	f383 8811 	msr	BASEPRI, r3
 8008b3c:	f3bf 8f6f 	isb	sy
 8008b40:	f3bf 8f4f 	dsb	sy
 8008b44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008b46:	bf00      	nop
 8008b48:	e7fe      	b.n	8008b48 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d103      	bne.n	8008b58 <xQueueGenericSend+0x40>
 8008b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d101      	bne.n	8008b5c <xQueueGenericSend+0x44>
 8008b58:	2301      	movs	r3, #1
 8008b5a:	e000      	b.n	8008b5e <xQueueGenericSend+0x46>
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d10a      	bne.n	8008b78 <xQueueGenericSend+0x60>
	__asm volatile
 8008b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b66:	f383 8811 	msr	BASEPRI, r3
 8008b6a:	f3bf 8f6f 	isb	sy
 8008b6e:	f3bf 8f4f 	dsb	sy
 8008b72:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008b74:	bf00      	nop
 8008b76:	e7fe      	b.n	8008b76 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	2b02      	cmp	r3, #2
 8008b7c:	d103      	bne.n	8008b86 <xQueueGenericSend+0x6e>
 8008b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b82:	2b01      	cmp	r3, #1
 8008b84:	d101      	bne.n	8008b8a <xQueueGenericSend+0x72>
 8008b86:	2301      	movs	r3, #1
 8008b88:	e000      	b.n	8008b8c <xQueueGenericSend+0x74>
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d10a      	bne.n	8008ba6 <xQueueGenericSend+0x8e>
	__asm volatile
 8008b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b94:	f383 8811 	msr	BASEPRI, r3
 8008b98:	f3bf 8f6f 	isb	sy
 8008b9c:	f3bf 8f4f 	dsb	sy
 8008ba0:	623b      	str	r3, [r7, #32]
}
 8008ba2:	bf00      	nop
 8008ba4:	e7fe      	b.n	8008ba4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008ba6:	f001 fd23 	bl	800a5f0 <xTaskGetSchedulerState>
 8008baa:	4603      	mov	r3, r0
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d102      	bne.n	8008bb6 <xQueueGenericSend+0x9e>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d101      	bne.n	8008bba <xQueueGenericSend+0xa2>
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	e000      	b.n	8008bbc <xQueueGenericSend+0xa4>
 8008bba:	2300      	movs	r3, #0
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d10a      	bne.n	8008bd6 <xQueueGenericSend+0xbe>
	__asm volatile
 8008bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc4:	f383 8811 	msr	BASEPRI, r3
 8008bc8:	f3bf 8f6f 	isb	sy
 8008bcc:	f3bf 8f4f 	dsb	sy
 8008bd0:	61fb      	str	r3, [r7, #28]
}
 8008bd2:	bf00      	nop
 8008bd4:	e7fe      	b.n	8008bd4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008bd6:	f002 fc1d 	bl	800b414 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d302      	bcc.n	8008bec <xQueueGenericSend+0xd4>
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	2b02      	cmp	r3, #2
 8008bea:	d129      	bne.n	8008c40 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008bec:	683a      	ldr	r2, [r7, #0]
 8008bee:	68b9      	ldr	r1, [r7, #8]
 8008bf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008bf2:	f000 fc5e 	bl	80094b2 <prvCopyDataToQueue>
 8008bf6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d010      	beq.n	8008c22 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c02:	3324      	adds	r3, #36	; 0x24
 8008c04:	4618      	mov	r0, r3
 8008c06:	f001 fb25 	bl	800a254 <xTaskRemoveFromEventList>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d013      	beq.n	8008c38 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008c10:	4b3f      	ldr	r3, [pc, #252]	; (8008d10 <xQueueGenericSend+0x1f8>)
 8008c12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c16:	601a      	str	r2, [r3, #0]
 8008c18:	f3bf 8f4f 	dsb	sy
 8008c1c:	f3bf 8f6f 	isb	sy
 8008c20:	e00a      	b.n	8008c38 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d007      	beq.n	8008c38 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008c28:	4b39      	ldr	r3, [pc, #228]	; (8008d10 <xQueueGenericSend+0x1f8>)
 8008c2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c2e:	601a      	str	r2, [r3, #0]
 8008c30:	f3bf 8f4f 	dsb	sy
 8008c34:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008c38:	f002 fc1c 	bl	800b474 <vPortExitCritical>
				return pdPASS;
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	e063      	b.n	8008d08 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d103      	bne.n	8008c4e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008c46:	f002 fc15 	bl	800b474 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	e05c      	b.n	8008d08 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d106      	bne.n	8008c62 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008c54:	f107 0314 	add.w	r3, r7, #20
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f001 fb5f 	bl	800a31c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008c5e:	2301      	movs	r3, #1
 8008c60:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008c62:	f002 fc07 	bl	800b474 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008c66:	f001 f8d1 	bl	8009e0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008c6a:	f002 fbd3 	bl	800b414 <vPortEnterCritical>
 8008c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c74:	b25b      	sxtb	r3, r3
 8008c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c7a:	d103      	bne.n	8008c84 <xQueueGenericSend+0x16c>
 8008c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c7e:	2200      	movs	r2, #0
 8008c80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c8a:	b25b      	sxtb	r3, r3
 8008c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c90:	d103      	bne.n	8008c9a <xQueueGenericSend+0x182>
 8008c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c94:	2200      	movs	r2, #0
 8008c96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c9a:	f002 fbeb 	bl	800b474 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008c9e:	1d3a      	adds	r2, r7, #4
 8008ca0:	f107 0314 	add.w	r3, r7, #20
 8008ca4:	4611      	mov	r1, r2
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f001 fb4e 	bl	800a348 <xTaskCheckForTimeOut>
 8008cac:	4603      	mov	r3, r0
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d124      	bne.n	8008cfc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008cb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008cb4:	f000 fcf5 	bl	80096a2 <prvIsQueueFull>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d018      	beq.n	8008cf0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc0:	3310      	adds	r3, #16
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	4611      	mov	r1, r2
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f001 fa74 	bl	800a1b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008ccc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008cce:	f000 fc80 	bl	80095d2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008cd2:	f001 f8a9 	bl	8009e28 <xTaskResumeAll>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	f47f af7c 	bne.w	8008bd6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008cde:	4b0c      	ldr	r3, [pc, #48]	; (8008d10 <xQueueGenericSend+0x1f8>)
 8008ce0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ce4:	601a      	str	r2, [r3, #0]
 8008ce6:	f3bf 8f4f 	dsb	sy
 8008cea:	f3bf 8f6f 	isb	sy
 8008cee:	e772      	b.n	8008bd6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008cf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008cf2:	f000 fc6e 	bl	80095d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008cf6:	f001 f897 	bl	8009e28 <xTaskResumeAll>
 8008cfa:	e76c      	b.n	8008bd6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008cfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008cfe:	f000 fc68 	bl	80095d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008d02:	f001 f891 	bl	8009e28 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008d06:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3738      	adds	r7, #56	; 0x38
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}
 8008d10:	e000ed04 	.word	0xe000ed04

08008d14 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b090      	sub	sp, #64	; 0x40
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	60f8      	str	r0, [r7, #12]
 8008d1c:	60b9      	str	r1, [r7, #8]
 8008d1e:	607a      	str	r2, [r7, #4]
 8008d20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d10a      	bne.n	8008d42 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d30:	f383 8811 	msr	BASEPRI, r3
 8008d34:	f3bf 8f6f 	isb	sy
 8008d38:	f3bf 8f4f 	dsb	sy
 8008d3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008d3e:	bf00      	nop
 8008d40:	e7fe      	b.n	8008d40 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d103      	bne.n	8008d50 <xQueueGenericSendFromISR+0x3c>
 8008d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d101      	bne.n	8008d54 <xQueueGenericSendFromISR+0x40>
 8008d50:	2301      	movs	r3, #1
 8008d52:	e000      	b.n	8008d56 <xQueueGenericSendFromISR+0x42>
 8008d54:	2300      	movs	r3, #0
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d10a      	bne.n	8008d70 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d5e:	f383 8811 	msr	BASEPRI, r3
 8008d62:	f3bf 8f6f 	isb	sy
 8008d66:	f3bf 8f4f 	dsb	sy
 8008d6a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008d6c:	bf00      	nop
 8008d6e:	e7fe      	b.n	8008d6e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	2b02      	cmp	r3, #2
 8008d74:	d103      	bne.n	8008d7e <xQueueGenericSendFromISR+0x6a>
 8008d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d7a:	2b01      	cmp	r3, #1
 8008d7c:	d101      	bne.n	8008d82 <xQueueGenericSendFromISR+0x6e>
 8008d7e:	2301      	movs	r3, #1
 8008d80:	e000      	b.n	8008d84 <xQueueGenericSendFromISR+0x70>
 8008d82:	2300      	movs	r3, #0
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d10a      	bne.n	8008d9e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d8c:	f383 8811 	msr	BASEPRI, r3
 8008d90:	f3bf 8f6f 	isb	sy
 8008d94:	f3bf 8f4f 	dsb	sy
 8008d98:	623b      	str	r3, [r7, #32]
}
 8008d9a:	bf00      	nop
 8008d9c:	e7fe      	b.n	8008d9c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008d9e:	f002 fc1b 	bl	800b5d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008da2:	f3ef 8211 	mrs	r2, BASEPRI
 8008da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008daa:	f383 8811 	msr	BASEPRI, r3
 8008dae:	f3bf 8f6f 	isb	sy
 8008db2:	f3bf 8f4f 	dsb	sy
 8008db6:	61fa      	str	r2, [r7, #28]
 8008db8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008dba:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008dbc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d302      	bcc.n	8008dd0 <xQueueGenericSendFromISR+0xbc>
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	2b02      	cmp	r3, #2
 8008dce:	d12f      	bne.n	8008e30 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008dd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dde:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008de0:	683a      	ldr	r2, [r7, #0]
 8008de2:	68b9      	ldr	r1, [r7, #8]
 8008de4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008de6:	f000 fb64 	bl	80094b2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008dea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008df2:	d112      	bne.n	8008e1a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d016      	beq.n	8008e2a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dfe:	3324      	adds	r3, #36	; 0x24
 8008e00:	4618      	mov	r0, r3
 8008e02:	f001 fa27 	bl	800a254 <xTaskRemoveFromEventList>
 8008e06:	4603      	mov	r3, r0
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d00e      	beq.n	8008e2a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d00b      	beq.n	8008e2a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2201      	movs	r2, #1
 8008e16:	601a      	str	r2, [r3, #0]
 8008e18:	e007      	b.n	8008e2a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008e1a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008e1e:	3301      	adds	r3, #1
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	b25a      	sxtb	r2, r3
 8008e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008e2e:	e001      	b.n	8008e34 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008e30:	2300      	movs	r3, #0
 8008e32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e36:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008e3e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3740      	adds	r7, #64	; 0x40
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}

08008e4a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008e4a:	b580      	push	{r7, lr}
 8008e4c:	b08e      	sub	sp, #56	; 0x38
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	6078      	str	r0, [r7, #4]
 8008e52:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d10a      	bne.n	8008e74 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8008e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e62:	f383 8811 	msr	BASEPRI, r3
 8008e66:	f3bf 8f6f 	isb	sy
 8008e6a:	f3bf 8f4f 	dsb	sy
 8008e6e:	623b      	str	r3, [r7, #32]
}
 8008e70:	bf00      	nop
 8008e72:	e7fe      	b.n	8008e72 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d00a      	beq.n	8008e92 <xQueueGiveFromISR+0x48>
	__asm volatile
 8008e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e80:	f383 8811 	msr	BASEPRI, r3
 8008e84:	f3bf 8f6f 	isb	sy
 8008e88:	f3bf 8f4f 	dsb	sy
 8008e8c:	61fb      	str	r3, [r7, #28]
}
 8008e8e:	bf00      	nop
 8008e90:	e7fe      	b.n	8008e90 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d103      	bne.n	8008ea2 <xQueueGiveFromISR+0x58>
 8008e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e9c:	689b      	ldr	r3, [r3, #8]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d101      	bne.n	8008ea6 <xQueueGiveFromISR+0x5c>
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	e000      	b.n	8008ea8 <xQueueGiveFromISR+0x5e>
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d10a      	bne.n	8008ec2 <xQueueGiveFromISR+0x78>
	__asm volatile
 8008eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb0:	f383 8811 	msr	BASEPRI, r3
 8008eb4:	f3bf 8f6f 	isb	sy
 8008eb8:	f3bf 8f4f 	dsb	sy
 8008ebc:	61bb      	str	r3, [r7, #24]
}
 8008ebe:	bf00      	nop
 8008ec0:	e7fe      	b.n	8008ec0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008ec2:	f002 fb89 	bl	800b5d8 <vPortValidateInterruptPriority>
	__asm volatile
 8008ec6:	f3ef 8211 	mrs	r2, BASEPRI
 8008eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ece:	f383 8811 	msr	BASEPRI, r3
 8008ed2:	f3bf 8f6f 	isb	sy
 8008ed6:	f3bf 8f4f 	dsb	sy
 8008eda:	617a      	str	r2, [r7, #20]
 8008edc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008ede:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ee6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008eec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d22b      	bcs.n	8008f4a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ef8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008efe:	1c5a      	adds	r2, r3, #1
 8008f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f02:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008f04:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f0c:	d112      	bne.n	8008f34 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d016      	beq.n	8008f44 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f18:	3324      	adds	r3, #36	; 0x24
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f001 f99a 	bl	800a254 <xTaskRemoveFromEventList>
 8008f20:	4603      	mov	r3, r0
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d00e      	beq.n	8008f44 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d00b      	beq.n	8008f44 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	2201      	movs	r2, #1
 8008f30:	601a      	str	r2, [r3, #0]
 8008f32:	e007      	b.n	8008f44 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008f34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f38:	3301      	adds	r3, #1
 8008f3a:	b2db      	uxtb	r3, r3
 8008f3c:	b25a      	sxtb	r2, r3
 8008f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008f44:	2301      	movs	r3, #1
 8008f46:	637b      	str	r3, [r7, #52]	; 0x34
 8008f48:	e001      	b.n	8008f4e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	637b      	str	r3, [r7, #52]	; 0x34
 8008f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f50:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	f383 8811 	msr	BASEPRI, r3
}
 8008f58:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3738      	adds	r7, #56	; 0x38
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b08c      	sub	sp, #48	; 0x30
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	60f8      	str	r0, [r7, #12]
 8008f6c:	60b9      	str	r1, [r7, #8]
 8008f6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008f70:	2300      	movs	r3, #0
 8008f72:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d10a      	bne.n	8008f94 <xQueueReceive+0x30>
	__asm volatile
 8008f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f82:	f383 8811 	msr	BASEPRI, r3
 8008f86:	f3bf 8f6f 	isb	sy
 8008f8a:	f3bf 8f4f 	dsb	sy
 8008f8e:	623b      	str	r3, [r7, #32]
}
 8008f90:	bf00      	nop
 8008f92:	e7fe      	b.n	8008f92 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d103      	bne.n	8008fa2 <xQueueReceive+0x3e>
 8008f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d101      	bne.n	8008fa6 <xQueueReceive+0x42>
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	e000      	b.n	8008fa8 <xQueueReceive+0x44>
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d10a      	bne.n	8008fc2 <xQueueReceive+0x5e>
	__asm volatile
 8008fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb0:	f383 8811 	msr	BASEPRI, r3
 8008fb4:	f3bf 8f6f 	isb	sy
 8008fb8:	f3bf 8f4f 	dsb	sy
 8008fbc:	61fb      	str	r3, [r7, #28]
}
 8008fbe:	bf00      	nop
 8008fc0:	e7fe      	b.n	8008fc0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008fc2:	f001 fb15 	bl	800a5f0 <xTaskGetSchedulerState>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d102      	bne.n	8008fd2 <xQueueReceive+0x6e>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d101      	bne.n	8008fd6 <xQueueReceive+0x72>
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	e000      	b.n	8008fd8 <xQueueReceive+0x74>
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d10a      	bne.n	8008ff2 <xQueueReceive+0x8e>
	__asm volatile
 8008fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe0:	f383 8811 	msr	BASEPRI, r3
 8008fe4:	f3bf 8f6f 	isb	sy
 8008fe8:	f3bf 8f4f 	dsb	sy
 8008fec:	61bb      	str	r3, [r7, #24]
}
 8008fee:	bf00      	nop
 8008ff0:	e7fe      	b.n	8008ff0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008ff2:	f002 fa0f 	bl	800b414 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ffa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d01f      	beq.n	8009042 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009002:	68b9      	ldr	r1, [r7, #8]
 8009004:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009006:	f000 fabe 	bl	8009586 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800900a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800900c:	1e5a      	subs	r2, r3, #1
 800900e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009010:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009014:	691b      	ldr	r3, [r3, #16]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d00f      	beq.n	800903a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800901a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800901c:	3310      	adds	r3, #16
 800901e:	4618      	mov	r0, r3
 8009020:	f001 f918 	bl	800a254 <xTaskRemoveFromEventList>
 8009024:	4603      	mov	r3, r0
 8009026:	2b00      	cmp	r3, #0
 8009028:	d007      	beq.n	800903a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800902a:	4b3d      	ldr	r3, [pc, #244]	; (8009120 <xQueueReceive+0x1bc>)
 800902c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009030:	601a      	str	r2, [r3, #0]
 8009032:	f3bf 8f4f 	dsb	sy
 8009036:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800903a:	f002 fa1b 	bl	800b474 <vPortExitCritical>
				return pdPASS;
 800903e:	2301      	movs	r3, #1
 8009040:	e069      	b.n	8009116 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d103      	bne.n	8009050 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009048:	f002 fa14 	bl	800b474 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800904c:	2300      	movs	r3, #0
 800904e:	e062      	b.n	8009116 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009052:	2b00      	cmp	r3, #0
 8009054:	d106      	bne.n	8009064 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009056:	f107 0310 	add.w	r3, r7, #16
 800905a:	4618      	mov	r0, r3
 800905c:	f001 f95e 	bl	800a31c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009060:	2301      	movs	r3, #1
 8009062:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009064:	f002 fa06 	bl	800b474 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009068:	f000 fed0 	bl	8009e0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800906c:	f002 f9d2 	bl	800b414 <vPortEnterCritical>
 8009070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009072:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009076:	b25b      	sxtb	r3, r3
 8009078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800907c:	d103      	bne.n	8009086 <xQueueReceive+0x122>
 800907e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009080:	2200      	movs	r2, #0
 8009082:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009088:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800908c:	b25b      	sxtb	r3, r3
 800908e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009092:	d103      	bne.n	800909c <xQueueReceive+0x138>
 8009094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009096:	2200      	movs	r2, #0
 8009098:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800909c:	f002 f9ea 	bl	800b474 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80090a0:	1d3a      	adds	r2, r7, #4
 80090a2:	f107 0310 	add.w	r3, r7, #16
 80090a6:	4611      	mov	r1, r2
 80090a8:	4618      	mov	r0, r3
 80090aa:	f001 f94d 	bl	800a348 <xTaskCheckForTimeOut>
 80090ae:	4603      	mov	r3, r0
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d123      	bne.n	80090fc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80090b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090b6:	f000 fade 	bl	8009676 <prvIsQueueEmpty>
 80090ba:	4603      	mov	r3, r0
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d017      	beq.n	80090f0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80090c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c2:	3324      	adds	r3, #36	; 0x24
 80090c4:	687a      	ldr	r2, [r7, #4]
 80090c6:	4611      	mov	r1, r2
 80090c8:	4618      	mov	r0, r3
 80090ca:	f001 f873 	bl	800a1b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80090ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090d0:	f000 fa7f 	bl	80095d2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80090d4:	f000 fea8 	bl	8009e28 <xTaskResumeAll>
 80090d8:	4603      	mov	r3, r0
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d189      	bne.n	8008ff2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80090de:	4b10      	ldr	r3, [pc, #64]	; (8009120 <xQueueReceive+0x1bc>)
 80090e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090e4:	601a      	str	r2, [r3, #0]
 80090e6:	f3bf 8f4f 	dsb	sy
 80090ea:	f3bf 8f6f 	isb	sy
 80090ee:	e780      	b.n	8008ff2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80090f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090f2:	f000 fa6e 	bl	80095d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80090f6:	f000 fe97 	bl	8009e28 <xTaskResumeAll>
 80090fa:	e77a      	b.n	8008ff2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80090fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090fe:	f000 fa68 	bl	80095d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009102:	f000 fe91 	bl	8009e28 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009106:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009108:	f000 fab5 	bl	8009676 <prvIsQueueEmpty>
 800910c:	4603      	mov	r3, r0
 800910e:	2b00      	cmp	r3, #0
 8009110:	f43f af6f 	beq.w	8008ff2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009114:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009116:	4618      	mov	r0, r3
 8009118:	3730      	adds	r7, #48	; 0x30
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}
 800911e:	bf00      	nop
 8009120:	e000ed04 	.word	0xe000ed04

08009124 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b08e      	sub	sp, #56	; 0x38
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800912e:	2300      	movs	r3, #0
 8009130:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009136:	2300      	movs	r3, #0
 8009138:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800913a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800913c:	2b00      	cmp	r3, #0
 800913e:	d10a      	bne.n	8009156 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009144:	f383 8811 	msr	BASEPRI, r3
 8009148:	f3bf 8f6f 	isb	sy
 800914c:	f3bf 8f4f 	dsb	sy
 8009150:	623b      	str	r3, [r7, #32]
}
 8009152:	bf00      	nop
 8009154:	e7fe      	b.n	8009154 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800915a:	2b00      	cmp	r3, #0
 800915c:	d00a      	beq.n	8009174 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800915e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009162:	f383 8811 	msr	BASEPRI, r3
 8009166:	f3bf 8f6f 	isb	sy
 800916a:	f3bf 8f4f 	dsb	sy
 800916e:	61fb      	str	r3, [r7, #28]
}
 8009170:	bf00      	nop
 8009172:	e7fe      	b.n	8009172 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009174:	f001 fa3c 	bl	800a5f0 <xTaskGetSchedulerState>
 8009178:	4603      	mov	r3, r0
 800917a:	2b00      	cmp	r3, #0
 800917c:	d102      	bne.n	8009184 <xQueueSemaphoreTake+0x60>
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d101      	bne.n	8009188 <xQueueSemaphoreTake+0x64>
 8009184:	2301      	movs	r3, #1
 8009186:	e000      	b.n	800918a <xQueueSemaphoreTake+0x66>
 8009188:	2300      	movs	r3, #0
 800918a:	2b00      	cmp	r3, #0
 800918c:	d10a      	bne.n	80091a4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800918e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009192:	f383 8811 	msr	BASEPRI, r3
 8009196:	f3bf 8f6f 	isb	sy
 800919a:	f3bf 8f4f 	dsb	sy
 800919e:	61bb      	str	r3, [r7, #24]
}
 80091a0:	bf00      	nop
 80091a2:	e7fe      	b.n	80091a2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80091a4:	f002 f936 	bl	800b414 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80091a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091ac:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80091ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d024      	beq.n	80091fe <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80091b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b6:	1e5a      	subs	r2, r3, #1
 80091b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ba:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80091bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d104      	bne.n	80091ce <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80091c4:	f001 fb8a 	bl	800a8dc <pvTaskIncrementMutexHeldCount>
 80091c8:	4602      	mov	r2, r0
 80091ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091cc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80091ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091d0:	691b      	ldr	r3, [r3, #16]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d00f      	beq.n	80091f6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80091d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091d8:	3310      	adds	r3, #16
 80091da:	4618      	mov	r0, r3
 80091dc:	f001 f83a 	bl	800a254 <xTaskRemoveFromEventList>
 80091e0:	4603      	mov	r3, r0
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d007      	beq.n	80091f6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80091e6:	4b54      	ldr	r3, [pc, #336]	; (8009338 <xQueueSemaphoreTake+0x214>)
 80091e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091ec:	601a      	str	r2, [r3, #0]
 80091ee:	f3bf 8f4f 	dsb	sy
 80091f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80091f6:	f002 f93d 	bl	800b474 <vPortExitCritical>
				return pdPASS;
 80091fa:	2301      	movs	r3, #1
 80091fc:	e097      	b.n	800932e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d111      	bne.n	8009228 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009206:	2b00      	cmp	r3, #0
 8009208:	d00a      	beq.n	8009220 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800920a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800920e:	f383 8811 	msr	BASEPRI, r3
 8009212:	f3bf 8f6f 	isb	sy
 8009216:	f3bf 8f4f 	dsb	sy
 800921a:	617b      	str	r3, [r7, #20]
}
 800921c:	bf00      	nop
 800921e:	e7fe      	b.n	800921e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009220:	f002 f928 	bl	800b474 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009224:	2300      	movs	r3, #0
 8009226:	e082      	b.n	800932e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800922a:	2b00      	cmp	r3, #0
 800922c:	d106      	bne.n	800923c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800922e:	f107 030c 	add.w	r3, r7, #12
 8009232:	4618      	mov	r0, r3
 8009234:	f001 f872 	bl	800a31c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009238:	2301      	movs	r3, #1
 800923a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800923c:	f002 f91a 	bl	800b474 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009240:	f000 fde4 	bl	8009e0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009244:	f002 f8e6 	bl	800b414 <vPortEnterCritical>
 8009248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800924a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800924e:	b25b      	sxtb	r3, r3
 8009250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009254:	d103      	bne.n	800925e <xQueueSemaphoreTake+0x13a>
 8009256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009258:	2200      	movs	r2, #0
 800925a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800925e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009260:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009264:	b25b      	sxtb	r3, r3
 8009266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800926a:	d103      	bne.n	8009274 <xQueueSemaphoreTake+0x150>
 800926c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800926e:	2200      	movs	r2, #0
 8009270:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009274:	f002 f8fe 	bl	800b474 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009278:	463a      	mov	r2, r7
 800927a:	f107 030c 	add.w	r3, r7, #12
 800927e:	4611      	mov	r1, r2
 8009280:	4618      	mov	r0, r3
 8009282:	f001 f861 	bl	800a348 <xTaskCheckForTimeOut>
 8009286:	4603      	mov	r3, r0
 8009288:	2b00      	cmp	r3, #0
 800928a:	d132      	bne.n	80092f2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800928c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800928e:	f000 f9f2 	bl	8009676 <prvIsQueueEmpty>
 8009292:	4603      	mov	r3, r0
 8009294:	2b00      	cmp	r3, #0
 8009296:	d026      	beq.n	80092e6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d109      	bne.n	80092b4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80092a0:	f002 f8b8 	bl	800b414 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80092a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092a6:	689b      	ldr	r3, [r3, #8]
 80092a8:	4618      	mov	r0, r3
 80092aa:	f001 f9bf 	bl	800a62c <xTaskPriorityInherit>
 80092ae:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80092b0:	f002 f8e0 	bl	800b474 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80092b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092b6:	3324      	adds	r3, #36	; 0x24
 80092b8:	683a      	ldr	r2, [r7, #0]
 80092ba:	4611      	mov	r1, r2
 80092bc:	4618      	mov	r0, r3
 80092be:	f000 ff79 	bl	800a1b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80092c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80092c4:	f000 f985 	bl	80095d2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80092c8:	f000 fdae 	bl	8009e28 <xTaskResumeAll>
 80092cc:	4603      	mov	r3, r0
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	f47f af68 	bne.w	80091a4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80092d4:	4b18      	ldr	r3, [pc, #96]	; (8009338 <xQueueSemaphoreTake+0x214>)
 80092d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092da:	601a      	str	r2, [r3, #0]
 80092dc:	f3bf 8f4f 	dsb	sy
 80092e0:	f3bf 8f6f 	isb	sy
 80092e4:	e75e      	b.n	80091a4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80092e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80092e8:	f000 f973 	bl	80095d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80092ec:	f000 fd9c 	bl	8009e28 <xTaskResumeAll>
 80092f0:	e758      	b.n	80091a4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80092f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80092f4:	f000 f96d 	bl	80095d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80092f8:	f000 fd96 	bl	8009e28 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80092fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80092fe:	f000 f9ba 	bl	8009676 <prvIsQueueEmpty>
 8009302:	4603      	mov	r3, r0
 8009304:	2b00      	cmp	r3, #0
 8009306:	f43f af4d 	beq.w	80091a4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800930a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800930c:	2b00      	cmp	r3, #0
 800930e:	d00d      	beq.n	800932c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009310:	f002 f880 	bl	800b414 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009314:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009316:	f000 f8b4 	bl	8009482 <prvGetDisinheritPriorityAfterTimeout>
 800931a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800931c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800931e:	689b      	ldr	r3, [r3, #8]
 8009320:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009322:	4618      	mov	r0, r3
 8009324:	f001 fa58 	bl	800a7d8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009328:	f002 f8a4 	bl	800b474 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800932c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800932e:	4618      	mov	r0, r3
 8009330:	3738      	adds	r7, #56	; 0x38
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop
 8009338:	e000ed04 	.word	0xe000ed04

0800933c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b08e      	sub	sp, #56	; 0x38
 8009340:	af00      	add	r7, sp, #0
 8009342:	60f8      	str	r0, [r7, #12]
 8009344:	60b9      	str	r1, [r7, #8]
 8009346:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800934c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800934e:	2b00      	cmp	r3, #0
 8009350:	d10a      	bne.n	8009368 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8009352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009356:	f383 8811 	msr	BASEPRI, r3
 800935a:	f3bf 8f6f 	isb	sy
 800935e:	f3bf 8f4f 	dsb	sy
 8009362:	623b      	str	r3, [r7, #32]
}
 8009364:	bf00      	nop
 8009366:	e7fe      	b.n	8009366 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d103      	bne.n	8009376 <xQueueReceiveFromISR+0x3a>
 800936e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009372:	2b00      	cmp	r3, #0
 8009374:	d101      	bne.n	800937a <xQueueReceiveFromISR+0x3e>
 8009376:	2301      	movs	r3, #1
 8009378:	e000      	b.n	800937c <xQueueReceiveFromISR+0x40>
 800937a:	2300      	movs	r3, #0
 800937c:	2b00      	cmp	r3, #0
 800937e:	d10a      	bne.n	8009396 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009384:	f383 8811 	msr	BASEPRI, r3
 8009388:	f3bf 8f6f 	isb	sy
 800938c:	f3bf 8f4f 	dsb	sy
 8009390:	61fb      	str	r3, [r7, #28]
}
 8009392:	bf00      	nop
 8009394:	e7fe      	b.n	8009394 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009396:	f002 f91f 	bl	800b5d8 <vPortValidateInterruptPriority>
	__asm volatile
 800939a:	f3ef 8211 	mrs	r2, BASEPRI
 800939e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a2:	f383 8811 	msr	BASEPRI, r3
 80093a6:	f3bf 8f6f 	isb	sy
 80093aa:	f3bf 8f4f 	dsb	sy
 80093ae:	61ba      	str	r2, [r7, #24]
 80093b0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80093b2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80093b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80093b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80093bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d02f      	beq.n	8009422 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80093c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80093c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80093cc:	68b9      	ldr	r1, [r7, #8]
 80093ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093d0:	f000 f8d9 	bl	8009586 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80093d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d6:	1e5a      	subs	r2, r3, #1
 80093d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093da:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80093dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80093e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093e4:	d112      	bne.n	800940c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80093e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e8:	691b      	ldr	r3, [r3, #16]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d016      	beq.n	800941c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f0:	3310      	adds	r3, #16
 80093f2:	4618      	mov	r0, r3
 80093f4:	f000 ff2e 	bl	800a254 <xTaskRemoveFromEventList>
 80093f8:	4603      	mov	r3, r0
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d00e      	beq.n	800941c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d00b      	beq.n	800941c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2201      	movs	r2, #1
 8009408:	601a      	str	r2, [r3, #0]
 800940a:	e007      	b.n	800941c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800940c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009410:	3301      	adds	r3, #1
 8009412:	b2db      	uxtb	r3, r3
 8009414:	b25a      	sxtb	r2, r3
 8009416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009418:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800941c:	2301      	movs	r3, #1
 800941e:	637b      	str	r3, [r7, #52]	; 0x34
 8009420:	e001      	b.n	8009426 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8009422:	2300      	movs	r3, #0
 8009424:	637b      	str	r3, [r7, #52]	; 0x34
 8009426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009428:	613b      	str	r3, [r7, #16]
	__asm volatile
 800942a:	693b      	ldr	r3, [r7, #16]
 800942c:	f383 8811 	msr	BASEPRI, r3
}
 8009430:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009434:	4618      	mov	r0, r3
 8009436:	3738      	adds	r7, #56	; 0x38
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b084      	sub	sp, #16
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d10a      	bne.n	8009464 <vQueueDelete+0x28>
	__asm volatile
 800944e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009452:	f383 8811 	msr	BASEPRI, r3
 8009456:	f3bf 8f6f 	isb	sy
 800945a:	f3bf 8f4f 	dsb	sy
 800945e:	60bb      	str	r3, [r7, #8]
}
 8009460:	bf00      	nop
 8009462:	e7fe      	b.n	8009462 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009464:	68f8      	ldr	r0, [r7, #12]
 8009466:	f000 f95f 	bl	8009728 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009470:	2b00      	cmp	r3, #0
 8009472:	d102      	bne.n	800947a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8009474:	68f8      	ldr	r0, [r7, #12]
 8009476:	f002 f9bb 	bl	800b7f0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800947a:	bf00      	nop
 800947c:	3710      	adds	r7, #16
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}

08009482 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009482:	b480      	push	{r7}
 8009484:	b085      	sub	sp, #20
 8009486:	af00      	add	r7, sp, #0
 8009488:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800948e:	2b00      	cmp	r3, #0
 8009490:	d006      	beq.n	80094a0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800949c:	60fb      	str	r3, [r7, #12]
 800949e:	e001      	b.n	80094a4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80094a0:	2300      	movs	r3, #0
 80094a2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80094a4:	68fb      	ldr	r3, [r7, #12]
	}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3714      	adds	r7, #20
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr

080094b2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80094b2:	b580      	push	{r7, lr}
 80094b4:	b086      	sub	sp, #24
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	60f8      	str	r0, [r7, #12]
 80094ba:	60b9      	str	r1, [r7, #8]
 80094bc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80094be:	2300      	movs	r3, #0
 80094c0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094c6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d10d      	bne.n	80094ec <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d14d      	bne.n	8009574 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	689b      	ldr	r3, [r3, #8]
 80094dc:	4618      	mov	r0, r3
 80094de:	f001 f90d 	bl	800a6fc <xTaskPriorityDisinherit>
 80094e2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	2200      	movs	r2, #0
 80094e8:	609a      	str	r2, [r3, #8]
 80094ea:	e043      	b.n	8009574 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d119      	bne.n	8009526 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	6858      	ldr	r0, [r3, #4]
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094fa:	461a      	mov	r2, r3
 80094fc:	68b9      	ldr	r1, [r7, #8]
 80094fe:	f002 fabf 	bl	800ba80 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	685a      	ldr	r2, [r3, #4]
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800950a:	441a      	add	r2, r3
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	685a      	ldr	r2, [r3, #4]
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	689b      	ldr	r3, [r3, #8]
 8009518:	429a      	cmp	r2, r3
 800951a:	d32b      	bcc.n	8009574 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681a      	ldr	r2, [r3, #0]
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	605a      	str	r2, [r3, #4]
 8009524:	e026      	b.n	8009574 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	68d8      	ldr	r0, [r3, #12]
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800952e:	461a      	mov	r2, r3
 8009530:	68b9      	ldr	r1, [r7, #8]
 8009532:	f002 faa5 	bl	800ba80 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	68da      	ldr	r2, [r3, #12]
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800953e:	425b      	negs	r3, r3
 8009540:	441a      	add	r2, r3
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	68da      	ldr	r2, [r3, #12]
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	429a      	cmp	r2, r3
 8009550:	d207      	bcs.n	8009562 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	689a      	ldr	r2, [r3, #8]
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800955a:	425b      	negs	r3, r3
 800955c:	441a      	add	r2, r3
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2b02      	cmp	r3, #2
 8009566:	d105      	bne.n	8009574 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d002      	beq.n	8009574 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	3b01      	subs	r3, #1
 8009572:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	1c5a      	adds	r2, r3, #1
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800957c:	697b      	ldr	r3, [r7, #20]
}
 800957e:	4618      	mov	r0, r3
 8009580:	3718      	adds	r7, #24
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}

08009586 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009586:	b580      	push	{r7, lr}
 8009588:	b082      	sub	sp, #8
 800958a:	af00      	add	r7, sp, #0
 800958c:	6078      	str	r0, [r7, #4]
 800958e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009594:	2b00      	cmp	r3, #0
 8009596:	d018      	beq.n	80095ca <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	68da      	ldr	r2, [r3, #12]
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095a0:	441a      	add	r2, r3
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	68da      	ldr	r2, [r3, #12]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	689b      	ldr	r3, [r3, #8]
 80095ae:	429a      	cmp	r2, r3
 80095b0:	d303      	bcc.n	80095ba <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681a      	ldr	r2, [r3, #0]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	68d9      	ldr	r1, [r3, #12]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095c2:	461a      	mov	r2, r3
 80095c4:	6838      	ldr	r0, [r7, #0]
 80095c6:	f002 fa5b 	bl	800ba80 <memcpy>
	}
}
 80095ca:	bf00      	nop
 80095cc:	3708      	adds	r7, #8
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}

080095d2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80095d2:	b580      	push	{r7, lr}
 80095d4:	b084      	sub	sp, #16
 80095d6:	af00      	add	r7, sp, #0
 80095d8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80095da:	f001 ff1b 	bl	800b414 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80095e4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80095e6:	e011      	b.n	800960c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d012      	beq.n	8009616 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	3324      	adds	r3, #36	; 0x24
 80095f4:	4618      	mov	r0, r3
 80095f6:	f000 fe2d 	bl	800a254 <xTaskRemoveFromEventList>
 80095fa:	4603      	mov	r3, r0
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d001      	beq.n	8009604 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009600:	f000 ff04 	bl	800a40c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009604:	7bfb      	ldrb	r3, [r7, #15]
 8009606:	3b01      	subs	r3, #1
 8009608:	b2db      	uxtb	r3, r3
 800960a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800960c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009610:	2b00      	cmp	r3, #0
 8009612:	dce9      	bgt.n	80095e8 <prvUnlockQueue+0x16>
 8009614:	e000      	b.n	8009618 <prvUnlockQueue+0x46>
					break;
 8009616:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	22ff      	movs	r2, #255	; 0xff
 800961c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009620:	f001 ff28 	bl	800b474 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009624:	f001 fef6 	bl	800b414 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800962e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009630:	e011      	b.n	8009656 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	691b      	ldr	r3, [r3, #16]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d012      	beq.n	8009660 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	3310      	adds	r3, #16
 800963e:	4618      	mov	r0, r3
 8009640:	f000 fe08 	bl	800a254 <xTaskRemoveFromEventList>
 8009644:	4603      	mov	r3, r0
 8009646:	2b00      	cmp	r3, #0
 8009648:	d001      	beq.n	800964e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800964a:	f000 fedf 	bl	800a40c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800964e:	7bbb      	ldrb	r3, [r7, #14]
 8009650:	3b01      	subs	r3, #1
 8009652:	b2db      	uxtb	r3, r3
 8009654:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009656:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800965a:	2b00      	cmp	r3, #0
 800965c:	dce9      	bgt.n	8009632 <prvUnlockQueue+0x60>
 800965e:	e000      	b.n	8009662 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009660:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	22ff      	movs	r2, #255	; 0xff
 8009666:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800966a:	f001 ff03 	bl	800b474 <vPortExitCritical>
}
 800966e:	bf00      	nop
 8009670:	3710      	adds	r7, #16
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}

08009676 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009676:	b580      	push	{r7, lr}
 8009678:	b084      	sub	sp, #16
 800967a:	af00      	add	r7, sp, #0
 800967c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800967e:	f001 fec9 	bl	800b414 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009686:	2b00      	cmp	r3, #0
 8009688:	d102      	bne.n	8009690 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800968a:	2301      	movs	r3, #1
 800968c:	60fb      	str	r3, [r7, #12]
 800968e:	e001      	b.n	8009694 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009690:	2300      	movs	r3, #0
 8009692:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009694:	f001 feee 	bl	800b474 <vPortExitCritical>

	return xReturn;
 8009698:	68fb      	ldr	r3, [r7, #12]
}
 800969a:	4618      	mov	r0, r3
 800969c:	3710      	adds	r7, #16
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}

080096a2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80096a2:	b580      	push	{r7, lr}
 80096a4:	b084      	sub	sp, #16
 80096a6:	af00      	add	r7, sp, #0
 80096a8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80096aa:	f001 feb3 	bl	800b414 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096b6:	429a      	cmp	r2, r3
 80096b8:	d102      	bne.n	80096c0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80096ba:	2301      	movs	r3, #1
 80096bc:	60fb      	str	r3, [r7, #12]
 80096be:	e001      	b.n	80096c4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80096c0:	2300      	movs	r3, #0
 80096c2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80096c4:	f001 fed6 	bl	800b474 <vPortExitCritical>

	return xReturn;
 80096c8:	68fb      	ldr	r3, [r7, #12]
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3710      	adds	r7, #16
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}
	...

080096d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80096d4:	b480      	push	{r7}
 80096d6:	b085      	sub	sp, #20
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
 80096dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80096de:	2300      	movs	r3, #0
 80096e0:	60fb      	str	r3, [r7, #12]
 80096e2:	e014      	b.n	800970e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80096e4:	4a0f      	ldr	r2, [pc, #60]	; (8009724 <vQueueAddToRegistry+0x50>)
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d10b      	bne.n	8009708 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80096f0:	490c      	ldr	r1, [pc, #48]	; (8009724 <vQueueAddToRegistry+0x50>)
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	683a      	ldr	r2, [r7, #0]
 80096f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80096fa:	4a0a      	ldr	r2, [pc, #40]	; (8009724 <vQueueAddToRegistry+0x50>)
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	00db      	lsls	r3, r3, #3
 8009700:	4413      	add	r3, r2
 8009702:	687a      	ldr	r2, [r7, #4]
 8009704:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009706:	e006      	b.n	8009716 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	3301      	adds	r3, #1
 800970c:	60fb      	str	r3, [r7, #12]
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	2b07      	cmp	r3, #7
 8009712:	d9e7      	bls.n	80096e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009714:	bf00      	nop
 8009716:	bf00      	nop
 8009718:	3714      	adds	r7, #20
 800971a:	46bd      	mov	sp, r7
 800971c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009720:	4770      	bx	lr
 8009722:	bf00      	nop
 8009724:	20000dac 	.word	0x20000dac

08009728 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009728:	b480      	push	{r7}
 800972a:	b085      	sub	sp, #20
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009730:	2300      	movs	r3, #0
 8009732:	60fb      	str	r3, [r7, #12]
 8009734:	e016      	b.n	8009764 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009736:	4a10      	ldr	r2, [pc, #64]	; (8009778 <vQueueUnregisterQueue+0x50>)
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	00db      	lsls	r3, r3, #3
 800973c:	4413      	add	r3, r2
 800973e:	685b      	ldr	r3, [r3, #4]
 8009740:	687a      	ldr	r2, [r7, #4]
 8009742:	429a      	cmp	r2, r3
 8009744:	d10b      	bne.n	800975e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009746:	4a0c      	ldr	r2, [pc, #48]	; (8009778 <vQueueUnregisterQueue+0x50>)
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2100      	movs	r1, #0
 800974c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009750:	4a09      	ldr	r2, [pc, #36]	; (8009778 <vQueueUnregisterQueue+0x50>)
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	00db      	lsls	r3, r3, #3
 8009756:	4413      	add	r3, r2
 8009758:	2200      	movs	r2, #0
 800975a:	605a      	str	r2, [r3, #4]
				break;
 800975c:	e006      	b.n	800976c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	3301      	adds	r3, #1
 8009762:	60fb      	str	r3, [r7, #12]
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2b07      	cmp	r3, #7
 8009768:	d9e5      	bls.n	8009736 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800976a:	bf00      	nop
 800976c:	bf00      	nop
 800976e:	3714      	adds	r7, #20
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr
 8009778:	20000dac 	.word	0x20000dac

0800977c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800977c:	b580      	push	{r7, lr}
 800977e:	b086      	sub	sp, #24
 8009780:	af00      	add	r7, sp, #0
 8009782:	60f8      	str	r0, [r7, #12]
 8009784:	60b9      	str	r1, [r7, #8]
 8009786:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800978c:	f001 fe42 	bl	800b414 <vPortEnterCritical>
 8009790:	697b      	ldr	r3, [r7, #20]
 8009792:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009796:	b25b      	sxtb	r3, r3
 8009798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800979c:	d103      	bne.n	80097a6 <vQueueWaitForMessageRestricted+0x2a>
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	2200      	movs	r2, #0
 80097a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80097ac:	b25b      	sxtb	r3, r3
 80097ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097b2:	d103      	bne.n	80097bc <vQueueWaitForMessageRestricted+0x40>
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	2200      	movs	r2, #0
 80097b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80097bc:	f001 fe5a 	bl	800b474 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d106      	bne.n	80097d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	3324      	adds	r3, #36	; 0x24
 80097cc:	687a      	ldr	r2, [r7, #4]
 80097ce:	68b9      	ldr	r1, [r7, #8]
 80097d0:	4618      	mov	r0, r3
 80097d2:	f000 fd13 	bl	800a1fc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80097d6:	6978      	ldr	r0, [r7, #20]
 80097d8:	f7ff fefb 	bl	80095d2 <prvUnlockQueue>
	}
 80097dc:	bf00      	nop
 80097de:	3718      	adds	r7, #24
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}

080097e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b08e      	sub	sp, #56	; 0x38
 80097e8:	af04      	add	r7, sp, #16
 80097ea:	60f8      	str	r0, [r7, #12]
 80097ec:	60b9      	str	r1, [r7, #8]
 80097ee:	607a      	str	r2, [r7, #4]
 80097f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80097f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d10a      	bne.n	800980e <xTaskCreateStatic+0x2a>
	__asm volatile
 80097f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097fc:	f383 8811 	msr	BASEPRI, r3
 8009800:	f3bf 8f6f 	isb	sy
 8009804:	f3bf 8f4f 	dsb	sy
 8009808:	623b      	str	r3, [r7, #32]
}
 800980a:	bf00      	nop
 800980c:	e7fe      	b.n	800980c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800980e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009810:	2b00      	cmp	r3, #0
 8009812:	d10a      	bne.n	800982a <xTaskCreateStatic+0x46>
	__asm volatile
 8009814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009818:	f383 8811 	msr	BASEPRI, r3
 800981c:	f3bf 8f6f 	isb	sy
 8009820:	f3bf 8f4f 	dsb	sy
 8009824:	61fb      	str	r3, [r7, #28]
}
 8009826:	bf00      	nop
 8009828:	e7fe      	b.n	8009828 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800982a:	235c      	movs	r3, #92	; 0x5c
 800982c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	2b5c      	cmp	r3, #92	; 0x5c
 8009832:	d00a      	beq.n	800984a <xTaskCreateStatic+0x66>
	__asm volatile
 8009834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009838:	f383 8811 	msr	BASEPRI, r3
 800983c:	f3bf 8f6f 	isb	sy
 8009840:	f3bf 8f4f 	dsb	sy
 8009844:	61bb      	str	r3, [r7, #24]
}
 8009846:	bf00      	nop
 8009848:	e7fe      	b.n	8009848 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800984a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800984c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800984e:	2b00      	cmp	r3, #0
 8009850:	d01e      	beq.n	8009890 <xTaskCreateStatic+0xac>
 8009852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009854:	2b00      	cmp	r3, #0
 8009856:	d01b      	beq.n	8009890 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800985a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800985c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800985e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009860:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009864:	2202      	movs	r2, #2
 8009866:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800986a:	2300      	movs	r3, #0
 800986c:	9303      	str	r3, [sp, #12]
 800986e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009870:	9302      	str	r3, [sp, #8]
 8009872:	f107 0314 	add.w	r3, r7, #20
 8009876:	9301      	str	r3, [sp, #4]
 8009878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800987a:	9300      	str	r3, [sp, #0]
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	687a      	ldr	r2, [r7, #4]
 8009880:	68b9      	ldr	r1, [r7, #8]
 8009882:	68f8      	ldr	r0, [r7, #12]
 8009884:	f000 f850 	bl	8009928 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009888:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800988a:	f000 f8dd 	bl	8009a48 <prvAddNewTaskToReadyList>
 800988e:	e001      	b.n	8009894 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009890:	2300      	movs	r3, #0
 8009892:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009894:	697b      	ldr	r3, [r7, #20]
	}
 8009896:	4618      	mov	r0, r3
 8009898:	3728      	adds	r7, #40	; 0x28
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}

0800989e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800989e:	b580      	push	{r7, lr}
 80098a0:	b08c      	sub	sp, #48	; 0x30
 80098a2:	af04      	add	r7, sp, #16
 80098a4:	60f8      	str	r0, [r7, #12]
 80098a6:	60b9      	str	r1, [r7, #8]
 80098a8:	603b      	str	r3, [r7, #0]
 80098aa:	4613      	mov	r3, r2
 80098ac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80098ae:	88fb      	ldrh	r3, [r7, #6]
 80098b0:	009b      	lsls	r3, r3, #2
 80098b2:	4618      	mov	r0, r3
 80098b4:	f001 fed0 	bl	800b658 <pvPortMalloc>
 80098b8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d00e      	beq.n	80098de <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80098c0:	205c      	movs	r0, #92	; 0x5c
 80098c2:	f001 fec9 	bl	800b658 <pvPortMalloc>
 80098c6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80098c8:	69fb      	ldr	r3, [r7, #28]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d003      	beq.n	80098d6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80098ce:	69fb      	ldr	r3, [r7, #28]
 80098d0:	697a      	ldr	r2, [r7, #20]
 80098d2:	631a      	str	r2, [r3, #48]	; 0x30
 80098d4:	e005      	b.n	80098e2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80098d6:	6978      	ldr	r0, [r7, #20]
 80098d8:	f001 ff8a 	bl	800b7f0 <vPortFree>
 80098dc:	e001      	b.n	80098e2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80098de:	2300      	movs	r3, #0
 80098e0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80098e2:	69fb      	ldr	r3, [r7, #28]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d017      	beq.n	8009918 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80098e8:	69fb      	ldr	r3, [r7, #28]
 80098ea:	2200      	movs	r2, #0
 80098ec:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80098f0:	88fa      	ldrh	r2, [r7, #6]
 80098f2:	2300      	movs	r3, #0
 80098f4:	9303      	str	r3, [sp, #12]
 80098f6:	69fb      	ldr	r3, [r7, #28]
 80098f8:	9302      	str	r3, [sp, #8]
 80098fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098fc:	9301      	str	r3, [sp, #4]
 80098fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009900:	9300      	str	r3, [sp, #0]
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	68b9      	ldr	r1, [r7, #8]
 8009906:	68f8      	ldr	r0, [r7, #12]
 8009908:	f000 f80e 	bl	8009928 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800990c:	69f8      	ldr	r0, [r7, #28]
 800990e:	f000 f89b 	bl	8009a48 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009912:	2301      	movs	r3, #1
 8009914:	61bb      	str	r3, [r7, #24]
 8009916:	e002      	b.n	800991e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009918:	f04f 33ff 	mov.w	r3, #4294967295
 800991c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800991e:	69bb      	ldr	r3, [r7, #24]
	}
 8009920:	4618      	mov	r0, r3
 8009922:	3720      	adds	r7, #32
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}

08009928 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b088      	sub	sp, #32
 800992c:	af00      	add	r7, sp, #0
 800992e:	60f8      	str	r0, [r7, #12]
 8009930:	60b9      	str	r1, [r7, #8]
 8009932:	607a      	str	r2, [r7, #4]
 8009934:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009938:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	009b      	lsls	r3, r3, #2
 800993e:	461a      	mov	r2, r3
 8009940:	21a5      	movs	r1, #165	; 0xa5
 8009942:	f002 f8ab 	bl	800ba9c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009948:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009950:	3b01      	subs	r3, #1
 8009952:	009b      	lsls	r3, r3, #2
 8009954:	4413      	add	r3, r2
 8009956:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009958:	69bb      	ldr	r3, [r7, #24]
 800995a:	f023 0307 	bic.w	r3, r3, #7
 800995e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009960:	69bb      	ldr	r3, [r7, #24]
 8009962:	f003 0307 	and.w	r3, r3, #7
 8009966:	2b00      	cmp	r3, #0
 8009968:	d00a      	beq.n	8009980 <prvInitialiseNewTask+0x58>
	__asm volatile
 800996a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800996e:	f383 8811 	msr	BASEPRI, r3
 8009972:	f3bf 8f6f 	isb	sy
 8009976:	f3bf 8f4f 	dsb	sy
 800997a:	617b      	str	r3, [r7, #20]
}
 800997c:	bf00      	nop
 800997e:	e7fe      	b.n	800997e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d01f      	beq.n	80099c6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009986:	2300      	movs	r3, #0
 8009988:	61fb      	str	r3, [r7, #28]
 800998a:	e012      	b.n	80099b2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800998c:	68ba      	ldr	r2, [r7, #8]
 800998e:	69fb      	ldr	r3, [r7, #28]
 8009990:	4413      	add	r3, r2
 8009992:	7819      	ldrb	r1, [r3, #0]
 8009994:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009996:	69fb      	ldr	r3, [r7, #28]
 8009998:	4413      	add	r3, r2
 800999a:	3334      	adds	r3, #52	; 0x34
 800999c:	460a      	mov	r2, r1
 800999e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80099a0:	68ba      	ldr	r2, [r7, #8]
 80099a2:	69fb      	ldr	r3, [r7, #28]
 80099a4:	4413      	add	r3, r2
 80099a6:	781b      	ldrb	r3, [r3, #0]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d006      	beq.n	80099ba <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80099ac:	69fb      	ldr	r3, [r7, #28]
 80099ae:	3301      	adds	r3, #1
 80099b0:	61fb      	str	r3, [r7, #28]
 80099b2:	69fb      	ldr	r3, [r7, #28]
 80099b4:	2b0f      	cmp	r3, #15
 80099b6:	d9e9      	bls.n	800998c <prvInitialiseNewTask+0x64>
 80099b8:	e000      	b.n	80099bc <prvInitialiseNewTask+0x94>
			{
				break;
 80099ba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80099bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099be:	2200      	movs	r2, #0
 80099c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80099c4:	e003      	b.n	80099ce <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80099c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c8:	2200      	movs	r2, #0
 80099ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80099ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d0:	2b37      	cmp	r3, #55	; 0x37
 80099d2:	d901      	bls.n	80099d8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80099d4:	2337      	movs	r3, #55	; 0x37
 80099d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80099d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80099de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099e2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80099e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e6:	2200      	movs	r2, #0
 80099e8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80099ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ec:	3304      	adds	r3, #4
 80099ee:	4618      	mov	r0, r3
 80099f0:	f7fe fda0 	bl	8008534 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80099f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f6:	3318      	adds	r3, #24
 80099f8:	4618      	mov	r0, r3
 80099fa:	f7fe fd9b 	bl	8008534 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80099fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a02:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a06:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a0c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a12:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a16:	2200      	movs	r2, #0
 8009a18:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009a22:	683a      	ldr	r2, [r7, #0]
 8009a24:	68f9      	ldr	r1, [r7, #12]
 8009a26:	69b8      	ldr	r0, [r7, #24]
 8009a28:	f001 fbc8 	bl	800b1bc <pxPortInitialiseStack>
 8009a2c:	4602      	mov	r2, r0
 8009a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a30:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d002      	beq.n	8009a3e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a3e:	bf00      	nop
 8009a40:	3720      	adds	r7, #32
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
	...

08009a48 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b082      	sub	sp, #8
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009a50:	f001 fce0 	bl	800b414 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009a54:	4b2d      	ldr	r3, [pc, #180]	; (8009b0c <prvAddNewTaskToReadyList+0xc4>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	3301      	adds	r3, #1
 8009a5a:	4a2c      	ldr	r2, [pc, #176]	; (8009b0c <prvAddNewTaskToReadyList+0xc4>)
 8009a5c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009a5e:	4b2c      	ldr	r3, [pc, #176]	; (8009b10 <prvAddNewTaskToReadyList+0xc8>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d109      	bne.n	8009a7a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009a66:	4a2a      	ldr	r2, [pc, #168]	; (8009b10 <prvAddNewTaskToReadyList+0xc8>)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009a6c:	4b27      	ldr	r3, [pc, #156]	; (8009b0c <prvAddNewTaskToReadyList+0xc4>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	2b01      	cmp	r3, #1
 8009a72:	d110      	bne.n	8009a96 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009a74:	f000 fcee 	bl	800a454 <prvInitialiseTaskLists>
 8009a78:	e00d      	b.n	8009a96 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009a7a:	4b26      	ldr	r3, [pc, #152]	; (8009b14 <prvAddNewTaskToReadyList+0xcc>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d109      	bne.n	8009a96 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009a82:	4b23      	ldr	r3, [pc, #140]	; (8009b10 <prvAddNewTaskToReadyList+0xc8>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a8c:	429a      	cmp	r2, r3
 8009a8e:	d802      	bhi.n	8009a96 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009a90:	4a1f      	ldr	r2, [pc, #124]	; (8009b10 <prvAddNewTaskToReadyList+0xc8>)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009a96:	4b20      	ldr	r3, [pc, #128]	; (8009b18 <prvAddNewTaskToReadyList+0xd0>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	3301      	adds	r3, #1
 8009a9c:	4a1e      	ldr	r2, [pc, #120]	; (8009b18 <prvAddNewTaskToReadyList+0xd0>)
 8009a9e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009aa0:	4b1d      	ldr	r3, [pc, #116]	; (8009b18 <prvAddNewTaskToReadyList+0xd0>)
 8009aa2:	681a      	ldr	r2, [r3, #0]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aac:	4b1b      	ldr	r3, [pc, #108]	; (8009b1c <prvAddNewTaskToReadyList+0xd4>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d903      	bls.n	8009abc <prvAddNewTaskToReadyList+0x74>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ab8:	4a18      	ldr	r2, [pc, #96]	; (8009b1c <prvAddNewTaskToReadyList+0xd4>)
 8009aba:	6013      	str	r3, [r2, #0]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ac0:	4613      	mov	r3, r2
 8009ac2:	009b      	lsls	r3, r3, #2
 8009ac4:	4413      	add	r3, r2
 8009ac6:	009b      	lsls	r3, r3, #2
 8009ac8:	4a15      	ldr	r2, [pc, #84]	; (8009b20 <prvAddNewTaskToReadyList+0xd8>)
 8009aca:	441a      	add	r2, r3
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	3304      	adds	r3, #4
 8009ad0:	4619      	mov	r1, r3
 8009ad2:	4610      	mov	r0, r2
 8009ad4:	f7fe fd3b 	bl	800854e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009ad8:	f001 fccc 	bl	800b474 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009adc:	4b0d      	ldr	r3, [pc, #52]	; (8009b14 <prvAddNewTaskToReadyList+0xcc>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d00e      	beq.n	8009b02 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009ae4:	4b0a      	ldr	r3, [pc, #40]	; (8009b10 <prvAddNewTaskToReadyList+0xc8>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d207      	bcs.n	8009b02 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009af2:	4b0c      	ldr	r3, [pc, #48]	; (8009b24 <prvAddNewTaskToReadyList+0xdc>)
 8009af4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009af8:	601a      	str	r2, [r3, #0]
 8009afa:	f3bf 8f4f 	dsb	sy
 8009afe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b02:	bf00      	nop
 8009b04:	3708      	adds	r7, #8
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}
 8009b0a:	bf00      	nop
 8009b0c:	200012c0 	.word	0x200012c0
 8009b10:	20000dec 	.word	0x20000dec
 8009b14:	200012cc 	.word	0x200012cc
 8009b18:	200012dc 	.word	0x200012dc
 8009b1c:	200012c8 	.word	0x200012c8
 8009b20:	20000df0 	.word	0x20000df0
 8009b24:	e000ed04 	.word	0xe000ed04

08009b28 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b084      	sub	sp, #16
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8009b30:	f001 fc70 	bl	800b414 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d102      	bne.n	8009b40 <vTaskDelete+0x18>
 8009b3a:	4b2c      	ldr	r3, [pc, #176]	; (8009bec <vTaskDelete+0xc4>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	e000      	b.n	8009b42 <vTaskDelete+0x1a>
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	3304      	adds	r3, #4
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f7fe fd5d 	bl	8008608 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d004      	beq.n	8009b60 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	3318      	adds	r3, #24
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f7fe fd54 	bl	8008608 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8009b60:	4b23      	ldr	r3, [pc, #140]	; (8009bf0 <vTaskDelete+0xc8>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	3301      	adds	r3, #1
 8009b66:	4a22      	ldr	r2, [pc, #136]	; (8009bf0 <vTaskDelete+0xc8>)
 8009b68:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8009b6a:	4b20      	ldr	r3, [pc, #128]	; (8009bec <vTaskDelete+0xc4>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	68fa      	ldr	r2, [r7, #12]
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d10b      	bne.n	8009b8c <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	3304      	adds	r3, #4
 8009b78:	4619      	mov	r1, r3
 8009b7a:	481e      	ldr	r0, [pc, #120]	; (8009bf4 <vTaskDelete+0xcc>)
 8009b7c:	f7fe fce7 	bl	800854e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8009b80:	4b1d      	ldr	r3, [pc, #116]	; (8009bf8 <vTaskDelete+0xd0>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	3301      	adds	r3, #1
 8009b86:	4a1c      	ldr	r2, [pc, #112]	; (8009bf8 <vTaskDelete+0xd0>)
 8009b88:	6013      	str	r3, [r2, #0]
 8009b8a:	e009      	b.n	8009ba0 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8009b8c:	4b1b      	ldr	r3, [pc, #108]	; (8009bfc <vTaskDelete+0xd4>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	3b01      	subs	r3, #1
 8009b92:	4a1a      	ldr	r2, [pc, #104]	; (8009bfc <vTaskDelete+0xd4>)
 8009b94:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8009b96:	68f8      	ldr	r0, [r7, #12]
 8009b98:	f000 fcca 	bl	800a530 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8009b9c:	f000 fcf8 	bl	800a590 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8009ba0:	f001 fc68 	bl	800b474 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8009ba4:	4b16      	ldr	r3, [pc, #88]	; (8009c00 <vTaskDelete+0xd8>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d01b      	beq.n	8009be4 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8009bac:	4b0f      	ldr	r3, [pc, #60]	; (8009bec <vTaskDelete+0xc4>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	68fa      	ldr	r2, [r7, #12]
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d116      	bne.n	8009be4 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8009bb6:	4b13      	ldr	r3, [pc, #76]	; (8009c04 <vTaskDelete+0xdc>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d00a      	beq.n	8009bd4 <vTaskDelete+0xac>
	__asm volatile
 8009bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc2:	f383 8811 	msr	BASEPRI, r3
 8009bc6:	f3bf 8f6f 	isb	sy
 8009bca:	f3bf 8f4f 	dsb	sy
 8009bce:	60bb      	str	r3, [r7, #8]
}
 8009bd0:	bf00      	nop
 8009bd2:	e7fe      	b.n	8009bd2 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8009bd4:	4b0c      	ldr	r3, [pc, #48]	; (8009c08 <vTaskDelete+0xe0>)
 8009bd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bda:	601a      	str	r2, [r3, #0]
 8009bdc:	f3bf 8f4f 	dsb	sy
 8009be0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009be4:	bf00      	nop
 8009be6:	3710      	adds	r7, #16
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}
 8009bec:	20000dec 	.word	0x20000dec
 8009bf0:	200012dc 	.word	0x200012dc
 8009bf4:	20001294 	.word	0x20001294
 8009bf8:	200012a8 	.word	0x200012a8
 8009bfc:	200012c0 	.word	0x200012c0
 8009c00:	200012cc 	.word	0x200012cc
 8009c04:	200012e8 	.word	0x200012e8
 8009c08:	e000ed04 	.word	0xe000ed04

08009c0c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b084      	sub	sp, #16
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009c14:	2300      	movs	r3, #0
 8009c16:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d017      	beq.n	8009c4e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009c1e:	4b13      	ldr	r3, [pc, #76]	; (8009c6c <vTaskDelay+0x60>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d00a      	beq.n	8009c3c <vTaskDelay+0x30>
	__asm volatile
 8009c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c2a:	f383 8811 	msr	BASEPRI, r3
 8009c2e:	f3bf 8f6f 	isb	sy
 8009c32:	f3bf 8f4f 	dsb	sy
 8009c36:	60bb      	str	r3, [r7, #8]
}
 8009c38:	bf00      	nop
 8009c3a:	e7fe      	b.n	8009c3a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009c3c:	f000 f8e6 	bl	8009e0c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009c40:	2100      	movs	r1, #0
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f000 fe5e 	bl	800a904 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009c48:	f000 f8ee 	bl	8009e28 <xTaskResumeAll>
 8009c4c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d107      	bne.n	8009c64 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009c54:	4b06      	ldr	r3, [pc, #24]	; (8009c70 <vTaskDelay+0x64>)
 8009c56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c5a:	601a      	str	r2, [r3, #0]
 8009c5c:	f3bf 8f4f 	dsb	sy
 8009c60:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009c64:	bf00      	nop
 8009c66:	3710      	adds	r7, #16
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}
 8009c6c:	200012e8 	.word	0x200012e8
 8009c70:	e000ed04 	.word	0xe000ed04

08009c74 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b088      	sub	sp, #32
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8009c80:	69bb      	ldr	r3, [r7, #24]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d10a      	bne.n	8009c9c <eTaskGetState+0x28>
	__asm volatile
 8009c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c8a:	f383 8811 	msr	BASEPRI, r3
 8009c8e:	f3bf 8f6f 	isb	sy
 8009c92:	f3bf 8f4f 	dsb	sy
 8009c96:	60bb      	str	r3, [r7, #8]
}
 8009c98:	bf00      	nop
 8009c9a:	e7fe      	b.n	8009c9a <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8009c9c:	4b23      	ldr	r3, [pc, #140]	; (8009d2c <eTaskGetState+0xb8>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	69ba      	ldr	r2, [r7, #24]
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	d102      	bne.n	8009cac <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	77fb      	strb	r3, [r7, #31]
 8009caa:	e03a      	b.n	8009d22 <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 8009cac:	f001 fbb2 	bl	800b414 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8009cb0:	69bb      	ldr	r3, [r7, #24]
 8009cb2:	695b      	ldr	r3, [r3, #20]
 8009cb4:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8009cb6:	4b1e      	ldr	r3, [pc, #120]	; (8009d30 <eTaskGetState+0xbc>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8009cbc:	4b1d      	ldr	r3, [pc, #116]	; (8009d34 <eTaskGetState+0xc0>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8009cc2:	f001 fbd7 	bl	800b474 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8009cc6:	697a      	ldr	r2, [r7, #20]
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	429a      	cmp	r2, r3
 8009ccc:	d003      	beq.n	8009cd6 <eTaskGetState+0x62>
 8009cce:	697a      	ldr	r2, [r7, #20]
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	429a      	cmp	r2, r3
 8009cd4:	d102      	bne.n	8009cdc <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8009cd6:	2302      	movs	r3, #2
 8009cd8:	77fb      	strb	r3, [r7, #31]
 8009cda:	e022      	b.n	8009d22 <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	4a16      	ldr	r2, [pc, #88]	; (8009d38 <eTaskGetState+0xc4>)
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d112      	bne.n	8009d0a <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8009ce4:	69bb      	ldr	r3, [r7, #24]
 8009ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d10b      	bne.n	8009d04 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8009cec:	69bb      	ldr	r3, [r7, #24]
 8009cee:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009cf2:	b2db      	uxtb	r3, r3
 8009cf4:	2b01      	cmp	r3, #1
 8009cf6:	d102      	bne.n	8009cfe <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8009cf8:	2302      	movs	r3, #2
 8009cfa:	77fb      	strb	r3, [r7, #31]
 8009cfc:	e011      	b.n	8009d22 <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 8009cfe:	2303      	movs	r3, #3
 8009d00:	77fb      	strb	r3, [r7, #31]
 8009d02:	e00e      	b.n	8009d22 <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8009d04:	2302      	movs	r3, #2
 8009d06:	77fb      	strb	r3, [r7, #31]
 8009d08:	e00b      	b.n	8009d22 <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	4a0b      	ldr	r2, [pc, #44]	; (8009d3c <eTaskGetState+0xc8>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d002      	beq.n	8009d18 <eTaskGetState+0xa4>
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d102      	bne.n	8009d1e <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8009d18:	2304      	movs	r3, #4
 8009d1a:	77fb      	strb	r3, [r7, #31]
 8009d1c:	e001      	b.n	8009d22 <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8009d1e:	2301      	movs	r3, #1
 8009d20:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8009d22:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8009d24:	4618      	mov	r0, r3
 8009d26:	3720      	adds	r7, #32
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}
 8009d2c:	20000dec 	.word	0x20000dec
 8009d30:	20001278 	.word	0x20001278
 8009d34:	2000127c 	.word	0x2000127c
 8009d38:	200012ac 	.word	0x200012ac
 8009d3c:	20001294 	.word	0x20001294

08009d40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b08a      	sub	sp, #40	; 0x28
 8009d44:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009d46:	2300      	movs	r3, #0
 8009d48:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009d4e:	463a      	mov	r2, r7
 8009d50:	1d39      	adds	r1, r7, #4
 8009d52:	f107 0308 	add.w	r3, r7, #8
 8009d56:	4618      	mov	r0, r3
 8009d58:	f7fe fb98 	bl	800848c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009d5c:	6839      	ldr	r1, [r7, #0]
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	68ba      	ldr	r2, [r7, #8]
 8009d62:	9202      	str	r2, [sp, #8]
 8009d64:	9301      	str	r3, [sp, #4]
 8009d66:	2300      	movs	r3, #0
 8009d68:	9300      	str	r3, [sp, #0]
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	460a      	mov	r2, r1
 8009d6e:	4921      	ldr	r1, [pc, #132]	; (8009df4 <vTaskStartScheduler+0xb4>)
 8009d70:	4821      	ldr	r0, [pc, #132]	; (8009df8 <vTaskStartScheduler+0xb8>)
 8009d72:	f7ff fd37 	bl	80097e4 <xTaskCreateStatic>
 8009d76:	4603      	mov	r3, r0
 8009d78:	4a20      	ldr	r2, [pc, #128]	; (8009dfc <vTaskStartScheduler+0xbc>)
 8009d7a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009d7c:	4b1f      	ldr	r3, [pc, #124]	; (8009dfc <vTaskStartScheduler+0xbc>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d002      	beq.n	8009d8a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009d84:	2301      	movs	r3, #1
 8009d86:	617b      	str	r3, [r7, #20]
 8009d88:	e001      	b.n	8009d8e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009d8e:	697b      	ldr	r3, [r7, #20]
 8009d90:	2b01      	cmp	r3, #1
 8009d92:	d102      	bne.n	8009d9a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009d94:	f000 fe0a 	bl	800a9ac <xTimerCreateTimerTask>
 8009d98:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009d9a:	697b      	ldr	r3, [r7, #20]
 8009d9c:	2b01      	cmp	r3, #1
 8009d9e:	d116      	bne.n	8009dce <vTaskStartScheduler+0x8e>
	__asm volatile
 8009da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da4:	f383 8811 	msr	BASEPRI, r3
 8009da8:	f3bf 8f6f 	isb	sy
 8009dac:	f3bf 8f4f 	dsb	sy
 8009db0:	613b      	str	r3, [r7, #16]
}
 8009db2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009db4:	4b12      	ldr	r3, [pc, #72]	; (8009e00 <vTaskStartScheduler+0xc0>)
 8009db6:	f04f 32ff 	mov.w	r2, #4294967295
 8009dba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009dbc:	4b11      	ldr	r3, [pc, #68]	; (8009e04 <vTaskStartScheduler+0xc4>)
 8009dbe:	2201      	movs	r2, #1
 8009dc0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009dc2:	4b11      	ldr	r3, [pc, #68]	; (8009e08 <vTaskStartScheduler+0xc8>)
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009dc8:	f001 fa82 	bl	800b2d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009dcc:	e00e      	b.n	8009dec <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009dce:	697b      	ldr	r3, [r7, #20]
 8009dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dd4:	d10a      	bne.n	8009dec <vTaskStartScheduler+0xac>
	__asm volatile
 8009dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dda:	f383 8811 	msr	BASEPRI, r3
 8009dde:	f3bf 8f6f 	isb	sy
 8009de2:	f3bf 8f4f 	dsb	sy
 8009de6:	60fb      	str	r3, [r7, #12]
}
 8009de8:	bf00      	nop
 8009dea:	e7fe      	b.n	8009dea <vTaskStartScheduler+0xaa>
}
 8009dec:	bf00      	nop
 8009dee:	3718      	adds	r7, #24
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}
 8009df4:	0800d570 	.word	0x0800d570
 8009df8:	0800a425 	.word	0x0800a425
 8009dfc:	200012e4 	.word	0x200012e4
 8009e00:	200012e0 	.word	0x200012e0
 8009e04:	200012cc 	.word	0x200012cc
 8009e08:	200012c4 	.word	0x200012c4

08009e0c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009e10:	4b04      	ldr	r3, [pc, #16]	; (8009e24 <vTaskSuspendAll+0x18>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	3301      	adds	r3, #1
 8009e16:	4a03      	ldr	r2, [pc, #12]	; (8009e24 <vTaskSuspendAll+0x18>)
 8009e18:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009e1a:	bf00      	nop
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e22:	4770      	bx	lr
 8009e24:	200012e8 	.word	0x200012e8

08009e28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b084      	sub	sp, #16
 8009e2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009e2e:	2300      	movs	r3, #0
 8009e30:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009e32:	2300      	movs	r3, #0
 8009e34:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009e36:	4b42      	ldr	r3, [pc, #264]	; (8009f40 <xTaskResumeAll+0x118>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d10a      	bne.n	8009e54 <xTaskResumeAll+0x2c>
	__asm volatile
 8009e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e42:	f383 8811 	msr	BASEPRI, r3
 8009e46:	f3bf 8f6f 	isb	sy
 8009e4a:	f3bf 8f4f 	dsb	sy
 8009e4e:	603b      	str	r3, [r7, #0]
}
 8009e50:	bf00      	nop
 8009e52:	e7fe      	b.n	8009e52 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009e54:	f001 fade 	bl	800b414 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009e58:	4b39      	ldr	r3, [pc, #228]	; (8009f40 <xTaskResumeAll+0x118>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	3b01      	subs	r3, #1
 8009e5e:	4a38      	ldr	r2, [pc, #224]	; (8009f40 <xTaskResumeAll+0x118>)
 8009e60:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e62:	4b37      	ldr	r3, [pc, #220]	; (8009f40 <xTaskResumeAll+0x118>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d162      	bne.n	8009f30 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009e6a:	4b36      	ldr	r3, [pc, #216]	; (8009f44 <xTaskResumeAll+0x11c>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d05e      	beq.n	8009f30 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009e72:	e02f      	b.n	8009ed4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e74:	4b34      	ldr	r3, [pc, #208]	; (8009f48 <xTaskResumeAll+0x120>)
 8009e76:	68db      	ldr	r3, [r3, #12]
 8009e78:	68db      	ldr	r3, [r3, #12]
 8009e7a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	3318      	adds	r3, #24
 8009e80:	4618      	mov	r0, r3
 8009e82:	f7fe fbc1 	bl	8008608 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	3304      	adds	r3, #4
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f7fe fbbc 	bl	8008608 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e94:	4b2d      	ldr	r3, [pc, #180]	; (8009f4c <xTaskResumeAll+0x124>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	429a      	cmp	r2, r3
 8009e9a:	d903      	bls.n	8009ea4 <xTaskResumeAll+0x7c>
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ea0:	4a2a      	ldr	r2, [pc, #168]	; (8009f4c <xTaskResumeAll+0x124>)
 8009ea2:	6013      	str	r3, [r2, #0]
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ea8:	4613      	mov	r3, r2
 8009eaa:	009b      	lsls	r3, r3, #2
 8009eac:	4413      	add	r3, r2
 8009eae:	009b      	lsls	r3, r3, #2
 8009eb0:	4a27      	ldr	r2, [pc, #156]	; (8009f50 <xTaskResumeAll+0x128>)
 8009eb2:	441a      	add	r2, r3
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	3304      	adds	r3, #4
 8009eb8:	4619      	mov	r1, r3
 8009eba:	4610      	mov	r0, r2
 8009ebc:	f7fe fb47 	bl	800854e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ec4:	4b23      	ldr	r3, [pc, #140]	; (8009f54 <xTaskResumeAll+0x12c>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eca:	429a      	cmp	r2, r3
 8009ecc:	d302      	bcc.n	8009ed4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009ece:	4b22      	ldr	r3, [pc, #136]	; (8009f58 <xTaskResumeAll+0x130>)
 8009ed0:	2201      	movs	r2, #1
 8009ed2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009ed4:	4b1c      	ldr	r3, [pc, #112]	; (8009f48 <xTaskResumeAll+0x120>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d1cb      	bne.n	8009e74 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d001      	beq.n	8009ee6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009ee2:	f000 fb55 	bl	800a590 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009ee6:	4b1d      	ldr	r3, [pc, #116]	; (8009f5c <xTaskResumeAll+0x134>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d010      	beq.n	8009f14 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009ef2:	f000 f847 	bl	8009f84 <xTaskIncrementTick>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d002      	beq.n	8009f02 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009efc:	4b16      	ldr	r3, [pc, #88]	; (8009f58 <xTaskResumeAll+0x130>)
 8009efe:	2201      	movs	r2, #1
 8009f00:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	3b01      	subs	r3, #1
 8009f06:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d1f1      	bne.n	8009ef2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009f0e:	4b13      	ldr	r3, [pc, #76]	; (8009f5c <xTaskResumeAll+0x134>)
 8009f10:	2200      	movs	r2, #0
 8009f12:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009f14:	4b10      	ldr	r3, [pc, #64]	; (8009f58 <xTaskResumeAll+0x130>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d009      	beq.n	8009f30 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009f20:	4b0f      	ldr	r3, [pc, #60]	; (8009f60 <xTaskResumeAll+0x138>)
 8009f22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f26:	601a      	str	r2, [r3, #0]
 8009f28:	f3bf 8f4f 	dsb	sy
 8009f2c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009f30:	f001 faa0 	bl	800b474 <vPortExitCritical>

	return xAlreadyYielded;
 8009f34:	68bb      	ldr	r3, [r7, #8]
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3710      	adds	r7, #16
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}
 8009f3e:	bf00      	nop
 8009f40:	200012e8 	.word	0x200012e8
 8009f44:	200012c0 	.word	0x200012c0
 8009f48:	20001280 	.word	0x20001280
 8009f4c:	200012c8 	.word	0x200012c8
 8009f50:	20000df0 	.word	0x20000df0
 8009f54:	20000dec 	.word	0x20000dec
 8009f58:	200012d4 	.word	0x200012d4
 8009f5c:	200012d0 	.word	0x200012d0
 8009f60:	e000ed04 	.word	0xe000ed04

08009f64 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009f64:	b480      	push	{r7}
 8009f66:	b083      	sub	sp, #12
 8009f68:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009f6a:	4b05      	ldr	r3, [pc, #20]	; (8009f80 <xTaskGetTickCount+0x1c>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009f70:	687b      	ldr	r3, [r7, #4]
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	370c      	adds	r7, #12
 8009f76:	46bd      	mov	sp, r7
 8009f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7c:	4770      	bx	lr
 8009f7e:	bf00      	nop
 8009f80:	200012c4 	.word	0x200012c4

08009f84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b086      	sub	sp, #24
 8009f88:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f8e:	4b4f      	ldr	r3, [pc, #316]	; (800a0cc <xTaskIncrementTick+0x148>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	f040 808f 	bne.w	800a0b6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009f98:	4b4d      	ldr	r3, [pc, #308]	; (800a0d0 <xTaskIncrementTick+0x14c>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	3301      	adds	r3, #1
 8009f9e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009fa0:	4a4b      	ldr	r2, [pc, #300]	; (800a0d0 <xTaskIncrementTick+0x14c>)
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009fa6:	693b      	ldr	r3, [r7, #16]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d120      	bne.n	8009fee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009fac:	4b49      	ldr	r3, [pc, #292]	; (800a0d4 <xTaskIncrementTick+0x150>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d00a      	beq.n	8009fcc <xTaskIncrementTick+0x48>
	__asm volatile
 8009fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fba:	f383 8811 	msr	BASEPRI, r3
 8009fbe:	f3bf 8f6f 	isb	sy
 8009fc2:	f3bf 8f4f 	dsb	sy
 8009fc6:	603b      	str	r3, [r7, #0]
}
 8009fc8:	bf00      	nop
 8009fca:	e7fe      	b.n	8009fca <xTaskIncrementTick+0x46>
 8009fcc:	4b41      	ldr	r3, [pc, #260]	; (800a0d4 <xTaskIncrementTick+0x150>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	60fb      	str	r3, [r7, #12]
 8009fd2:	4b41      	ldr	r3, [pc, #260]	; (800a0d8 <xTaskIncrementTick+0x154>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	4a3f      	ldr	r2, [pc, #252]	; (800a0d4 <xTaskIncrementTick+0x150>)
 8009fd8:	6013      	str	r3, [r2, #0]
 8009fda:	4a3f      	ldr	r2, [pc, #252]	; (800a0d8 <xTaskIncrementTick+0x154>)
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	6013      	str	r3, [r2, #0]
 8009fe0:	4b3e      	ldr	r3, [pc, #248]	; (800a0dc <xTaskIncrementTick+0x158>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	3301      	adds	r3, #1
 8009fe6:	4a3d      	ldr	r2, [pc, #244]	; (800a0dc <xTaskIncrementTick+0x158>)
 8009fe8:	6013      	str	r3, [r2, #0]
 8009fea:	f000 fad1 	bl	800a590 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009fee:	4b3c      	ldr	r3, [pc, #240]	; (800a0e0 <xTaskIncrementTick+0x15c>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	693a      	ldr	r2, [r7, #16]
 8009ff4:	429a      	cmp	r2, r3
 8009ff6:	d349      	bcc.n	800a08c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ff8:	4b36      	ldr	r3, [pc, #216]	; (800a0d4 <xTaskIncrementTick+0x150>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d104      	bne.n	800a00c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a002:	4b37      	ldr	r3, [pc, #220]	; (800a0e0 <xTaskIncrementTick+0x15c>)
 800a004:	f04f 32ff 	mov.w	r2, #4294967295
 800a008:	601a      	str	r2, [r3, #0]
					break;
 800a00a:	e03f      	b.n	800a08c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a00c:	4b31      	ldr	r3, [pc, #196]	; (800a0d4 <xTaskIncrementTick+0x150>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	68db      	ldr	r3, [r3, #12]
 800a012:	68db      	ldr	r3, [r3, #12]
 800a014:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	685b      	ldr	r3, [r3, #4]
 800a01a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a01c:	693a      	ldr	r2, [r7, #16]
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	429a      	cmp	r2, r3
 800a022:	d203      	bcs.n	800a02c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a024:	4a2e      	ldr	r2, [pc, #184]	; (800a0e0 <xTaskIncrementTick+0x15c>)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a02a:	e02f      	b.n	800a08c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	3304      	adds	r3, #4
 800a030:	4618      	mov	r0, r3
 800a032:	f7fe fae9 	bl	8008608 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d004      	beq.n	800a048 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	3318      	adds	r3, #24
 800a042:	4618      	mov	r0, r3
 800a044:	f7fe fae0 	bl	8008608 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a04c:	4b25      	ldr	r3, [pc, #148]	; (800a0e4 <xTaskIncrementTick+0x160>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	429a      	cmp	r2, r3
 800a052:	d903      	bls.n	800a05c <xTaskIncrementTick+0xd8>
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a058:	4a22      	ldr	r2, [pc, #136]	; (800a0e4 <xTaskIncrementTick+0x160>)
 800a05a:	6013      	str	r3, [r2, #0]
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a060:	4613      	mov	r3, r2
 800a062:	009b      	lsls	r3, r3, #2
 800a064:	4413      	add	r3, r2
 800a066:	009b      	lsls	r3, r3, #2
 800a068:	4a1f      	ldr	r2, [pc, #124]	; (800a0e8 <xTaskIncrementTick+0x164>)
 800a06a:	441a      	add	r2, r3
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	3304      	adds	r3, #4
 800a070:	4619      	mov	r1, r3
 800a072:	4610      	mov	r0, r2
 800a074:	f7fe fa6b 	bl	800854e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a07c:	4b1b      	ldr	r3, [pc, #108]	; (800a0ec <xTaskIncrementTick+0x168>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a082:	429a      	cmp	r2, r3
 800a084:	d3b8      	bcc.n	8009ff8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a086:	2301      	movs	r3, #1
 800a088:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a08a:	e7b5      	b.n	8009ff8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a08c:	4b17      	ldr	r3, [pc, #92]	; (800a0ec <xTaskIncrementTick+0x168>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a092:	4915      	ldr	r1, [pc, #84]	; (800a0e8 <xTaskIncrementTick+0x164>)
 800a094:	4613      	mov	r3, r2
 800a096:	009b      	lsls	r3, r3, #2
 800a098:	4413      	add	r3, r2
 800a09a:	009b      	lsls	r3, r3, #2
 800a09c:	440b      	add	r3, r1
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	d901      	bls.n	800a0a8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a0a8:	4b11      	ldr	r3, [pc, #68]	; (800a0f0 <xTaskIncrementTick+0x16c>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d007      	beq.n	800a0c0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	617b      	str	r3, [r7, #20]
 800a0b4:	e004      	b.n	800a0c0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a0b6:	4b0f      	ldr	r3, [pc, #60]	; (800a0f4 <xTaskIncrementTick+0x170>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	3301      	adds	r3, #1
 800a0bc:	4a0d      	ldr	r2, [pc, #52]	; (800a0f4 <xTaskIncrementTick+0x170>)
 800a0be:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a0c0:	697b      	ldr	r3, [r7, #20]
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3718      	adds	r7, #24
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}
 800a0ca:	bf00      	nop
 800a0cc:	200012e8 	.word	0x200012e8
 800a0d0:	200012c4 	.word	0x200012c4
 800a0d4:	20001278 	.word	0x20001278
 800a0d8:	2000127c 	.word	0x2000127c
 800a0dc:	200012d8 	.word	0x200012d8
 800a0e0:	200012e0 	.word	0x200012e0
 800a0e4:	200012c8 	.word	0x200012c8
 800a0e8:	20000df0 	.word	0x20000df0
 800a0ec:	20000dec 	.word	0x20000dec
 800a0f0:	200012d4 	.word	0x200012d4
 800a0f4:	200012d0 	.word	0x200012d0

0800a0f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b085      	sub	sp, #20
 800a0fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a0fe:	4b28      	ldr	r3, [pc, #160]	; (800a1a0 <vTaskSwitchContext+0xa8>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d003      	beq.n	800a10e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a106:	4b27      	ldr	r3, [pc, #156]	; (800a1a4 <vTaskSwitchContext+0xac>)
 800a108:	2201      	movs	r2, #1
 800a10a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a10c:	e041      	b.n	800a192 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800a10e:	4b25      	ldr	r3, [pc, #148]	; (800a1a4 <vTaskSwitchContext+0xac>)
 800a110:	2200      	movs	r2, #0
 800a112:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a114:	4b24      	ldr	r3, [pc, #144]	; (800a1a8 <vTaskSwitchContext+0xb0>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	60fb      	str	r3, [r7, #12]
 800a11a:	e010      	b.n	800a13e <vTaskSwitchContext+0x46>
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d10a      	bne.n	800a138 <vTaskSwitchContext+0x40>
	__asm volatile
 800a122:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a126:	f383 8811 	msr	BASEPRI, r3
 800a12a:	f3bf 8f6f 	isb	sy
 800a12e:	f3bf 8f4f 	dsb	sy
 800a132:	607b      	str	r3, [r7, #4]
}
 800a134:	bf00      	nop
 800a136:	e7fe      	b.n	800a136 <vTaskSwitchContext+0x3e>
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	3b01      	subs	r3, #1
 800a13c:	60fb      	str	r3, [r7, #12]
 800a13e:	491b      	ldr	r1, [pc, #108]	; (800a1ac <vTaskSwitchContext+0xb4>)
 800a140:	68fa      	ldr	r2, [r7, #12]
 800a142:	4613      	mov	r3, r2
 800a144:	009b      	lsls	r3, r3, #2
 800a146:	4413      	add	r3, r2
 800a148:	009b      	lsls	r3, r3, #2
 800a14a:	440b      	add	r3, r1
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d0e4      	beq.n	800a11c <vTaskSwitchContext+0x24>
 800a152:	68fa      	ldr	r2, [r7, #12]
 800a154:	4613      	mov	r3, r2
 800a156:	009b      	lsls	r3, r3, #2
 800a158:	4413      	add	r3, r2
 800a15a:	009b      	lsls	r3, r3, #2
 800a15c:	4a13      	ldr	r2, [pc, #76]	; (800a1ac <vTaskSwitchContext+0xb4>)
 800a15e:	4413      	add	r3, r2
 800a160:	60bb      	str	r3, [r7, #8]
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	685b      	ldr	r3, [r3, #4]
 800a166:	685a      	ldr	r2, [r3, #4]
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	605a      	str	r2, [r3, #4]
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	685a      	ldr	r2, [r3, #4]
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	3308      	adds	r3, #8
 800a174:	429a      	cmp	r2, r3
 800a176:	d104      	bne.n	800a182 <vTaskSwitchContext+0x8a>
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	685b      	ldr	r3, [r3, #4]
 800a17c:	685a      	ldr	r2, [r3, #4]
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	605a      	str	r2, [r3, #4]
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	685b      	ldr	r3, [r3, #4]
 800a186:	68db      	ldr	r3, [r3, #12]
 800a188:	4a09      	ldr	r2, [pc, #36]	; (800a1b0 <vTaskSwitchContext+0xb8>)
 800a18a:	6013      	str	r3, [r2, #0]
 800a18c:	4a06      	ldr	r2, [pc, #24]	; (800a1a8 <vTaskSwitchContext+0xb0>)
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	6013      	str	r3, [r2, #0]
}
 800a192:	bf00      	nop
 800a194:	3714      	adds	r7, #20
 800a196:	46bd      	mov	sp, r7
 800a198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19c:	4770      	bx	lr
 800a19e:	bf00      	nop
 800a1a0:	200012e8 	.word	0x200012e8
 800a1a4:	200012d4 	.word	0x200012d4
 800a1a8:	200012c8 	.word	0x200012c8
 800a1ac:	20000df0 	.word	0x20000df0
 800a1b0:	20000dec 	.word	0x20000dec

0800a1b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b084      	sub	sp, #16
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
 800a1bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d10a      	bne.n	800a1da <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a1c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c8:	f383 8811 	msr	BASEPRI, r3
 800a1cc:	f3bf 8f6f 	isb	sy
 800a1d0:	f3bf 8f4f 	dsb	sy
 800a1d4:	60fb      	str	r3, [r7, #12]
}
 800a1d6:	bf00      	nop
 800a1d8:	e7fe      	b.n	800a1d8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a1da:	4b07      	ldr	r3, [pc, #28]	; (800a1f8 <vTaskPlaceOnEventList+0x44>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	3318      	adds	r3, #24
 800a1e0:	4619      	mov	r1, r3
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f7fe f9d7 	bl	8008596 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a1e8:	2101      	movs	r1, #1
 800a1ea:	6838      	ldr	r0, [r7, #0]
 800a1ec:	f000 fb8a 	bl	800a904 <prvAddCurrentTaskToDelayedList>
}
 800a1f0:	bf00      	nop
 800a1f2:	3710      	adds	r7, #16
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}
 800a1f8:	20000dec 	.word	0x20000dec

0800a1fc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b086      	sub	sp, #24
 800a200:	af00      	add	r7, sp, #0
 800a202:	60f8      	str	r0, [r7, #12]
 800a204:	60b9      	str	r1, [r7, #8]
 800a206:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d10a      	bne.n	800a224 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a212:	f383 8811 	msr	BASEPRI, r3
 800a216:	f3bf 8f6f 	isb	sy
 800a21a:	f3bf 8f4f 	dsb	sy
 800a21e:	617b      	str	r3, [r7, #20]
}
 800a220:	bf00      	nop
 800a222:	e7fe      	b.n	800a222 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a224:	4b0a      	ldr	r3, [pc, #40]	; (800a250 <vTaskPlaceOnEventListRestricted+0x54>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	3318      	adds	r3, #24
 800a22a:	4619      	mov	r1, r3
 800a22c:	68f8      	ldr	r0, [r7, #12]
 800a22e:	f7fe f98e 	bl	800854e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d002      	beq.n	800a23e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a238:	f04f 33ff 	mov.w	r3, #4294967295
 800a23c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a23e:	6879      	ldr	r1, [r7, #4]
 800a240:	68b8      	ldr	r0, [r7, #8]
 800a242:	f000 fb5f 	bl	800a904 <prvAddCurrentTaskToDelayedList>
	}
 800a246:	bf00      	nop
 800a248:	3718      	adds	r7, #24
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}
 800a24e:	bf00      	nop
 800a250:	20000dec 	.word	0x20000dec

0800a254 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b086      	sub	sp, #24
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	68db      	ldr	r3, [r3, #12]
 800a260:	68db      	ldr	r3, [r3, #12]
 800a262:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a264:	693b      	ldr	r3, [r7, #16]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d10a      	bne.n	800a280 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a26e:	f383 8811 	msr	BASEPRI, r3
 800a272:	f3bf 8f6f 	isb	sy
 800a276:	f3bf 8f4f 	dsb	sy
 800a27a:	60fb      	str	r3, [r7, #12]
}
 800a27c:	bf00      	nop
 800a27e:	e7fe      	b.n	800a27e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	3318      	adds	r3, #24
 800a284:	4618      	mov	r0, r3
 800a286:	f7fe f9bf 	bl	8008608 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a28a:	4b1e      	ldr	r3, [pc, #120]	; (800a304 <xTaskRemoveFromEventList+0xb0>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d11d      	bne.n	800a2ce <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	3304      	adds	r3, #4
 800a296:	4618      	mov	r0, r3
 800a298:	f7fe f9b6 	bl	8008608 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2a0:	4b19      	ldr	r3, [pc, #100]	; (800a308 <xTaskRemoveFromEventList+0xb4>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	429a      	cmp	r2, r3
 800a2a6:	d903      	bls.n	800a2b0 <xTaskRemoveFromEventList+0x5c>
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ac:	4a16      	ldr	r2, [pc, #88]	; (800a308 <xTaskRemoveFromEventList+0xb4>)
 800a2ae:	6013      	str	r3, [r2, #0]
 800a2b0:	693b      	ldr	r3, [r7, #16]
 800a2b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2b4:	4613      	mov	r3, r2
 800a2b6:	009b      	lsls	r3, r3, #2
 800a2b8:	4413      	add	r3, r2
 800a2ba:	009b      	lsls	r3, r3, #2
 800a2bc:	4a13      	ldr	r2, [pc, #76]	; (800a30c <xTaskRemoveFromEventList+0xb8>)
 800a2be:	441a      	add	r2, r3
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	3304      	adds	r3, #4
 800a2c4:	4619      	mov	r1, r3
 800a2c6:	4610      	mov	r0, r2
 800a2c8:	f7fe f941 	bl	800854e <vListInsertEnd>
 800a2cc:	e005      	b.n	800a2da <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	3318      	adds	r3, #24
 800a2d2:	4619      	mov	r1, r3
 800a2d4:	480e      	ldr	r0, [pc, #56]	; (800a310 <xTaskRemoveFromEventList+0xbc>)
 800a2d6:	f7fe f93a 	bl	800854e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a2da:	693b      	ldr	r3, [r7, #16]
 800a2dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2de:	4b0d      	ldr	r3, [pc, #52]	; (800a314 <xTaskRemoveFromEventList+0xc0>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2e4:	429a      	cmp	r2, r3
 800a2e6:	d905      	bls.n	800a2f4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a2ec:	4b0a      	ldr	r3, [pc, #40]	; (800a318 <xTaskRemoveFromEventList+0xc4>)
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	601a      	str	r2, [r3, #0]
 800a2f2:	e001      	b.n	800a2f8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a2f8:	697b      	ldr	r3, [r7, #20]
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3718      	adds	r7, #24
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}
 800a302:	bf00      	nop
 800a304:	200012e8 	.word	0x200012e8
 800a308:	200012c8 	.word	0x200012c8
 800a30c:	20000df0 	.word	0x20000df0
 800a310:	20001280 	.word	0x20001280
 800a314:	20000dec 	.word	0x20000dec
 800a318:	200012d4 	.word	0x200012d4

0800a31c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a31c:	b480      	push	{r7}
 800a31e:	b083      	sub	sp, #12
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a324:	4b06      	ldr	r3, [pc, #24]	; (800a340 <vTaskInternalSetTimeOutState+0x24>)
 800a326:	681a      	ldr	r2, [r3, #0]
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a32c:	4b05      	ldr	r3, [pc, #20]	; (800a344 <vTaskInternalSetTimeOutState+0x28>)
 800a32e:	681a      	ldr	r2, [r3, #0]
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	605a      	str	r2, [r3, #4]
}
 800a334:	bf00      	nop
 800a336:	370c      	adds	r7, #12
 800a338:	46bd      	mov	sp, r7
 800a33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33e:	4770      	bx	lr
 800a340:	200012d8 	.word	0x200012d8
 800a344:	200012c4 	.word	0x200012c4

0800a348 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b088      	sub	sp, #32
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
 800a350:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d10a      	bne.n	800a36e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a35c:	f383 8811 	msr	BASEPRI, r3
 800a360:	f3bf 8f6f 	isb	sy
 800a364:	f3bf 8f4f 	dsb	sy
 800a368:	613b      	str	r3, [r7, #16]
}
 800a36a:	bf00      	nop
 800a36c:	e7fe      	b.n	800a36c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d10a      	bne.n	800a38a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a374:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a378:	f383 8811 	msr	BASEPRI, r3
 800a37c:	f3bf 8f6f 	isb	sy
 800a380:	f3bf 8f4f 	dsb	sy
 800a384:	60fb      	str	r3, [r7, #12]
}
 800a386:	bf00      	nop
 800a388:	e7fe      	b.n	800a388 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a38a:	f001 f843 	bl	800b414 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a38e:	4b1d      	ldr	r3, [pc, #116]	; (800a404 <xTaskCheckForTimeOut+0xbc>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	685b      	ldr	r3, [r3, #4]
 800a398:	69ba      	ldr	r2, [r7, #24]
 800a39a:	1ad3      	subs	r3, r2, r3
 800a39c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3a6:	d102      	bne.n	800a3ae <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	61fb      	str	r3, [r7, #28]
 800a3ac:	e023      	b.n	800a3f6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681a      	ldr	r2, [r3, #0]
 800a3b2:	4b15      	ldr	r3, [pc, #84]	; (800a408 <xTaskCheckForTimeOut+0xc0>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	429a      	cmp	r2, r3
 800a3b8:	d007      	beq.n	800a3ca <xTaskCheckForTimeOut+0x82>
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	685b      	ldr	r3, [r3, #4]
 800a3be:	69ba      	ldr	r2, [r7, #24]
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d302      	bcc.n	800a3ca <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	61fb      	str	r3, [r7, #28]
 800a3c8:	e015      	b.n	800a3f6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	697a      	ldr	r2, [r7, #20]
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d20b      	bcs.n	800a3ec <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	681a      	ldr	r2, [r3, #0]
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	1ad2      	subs	r2, r2, r3
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f7ff ff9b 	bl	800a31c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	61fb      	str	r3, [r7, #28]
 800a3ea:	e004      	b.n	800a3f6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a3f6:	f001 f83d 	bl	800b474 <vPortExitCritical>

	return xReturn;
 800a3fa:	69fb      	ldr	r3, [r7, #28]
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3720      	adds	r7, #32
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}
 800a404:	200012c4 	.word	0x200012c4
 800a408:	200012d8 	.word	0x200012d8

0800a40c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a40c:	b480      	push	{r7}
 800a40e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a410:	4b03      	ldr	r3, [pc, #12]	; (800a420 <vTaskMissedYield+0x14>)
 800a412:	2201      	movs	r2, #1
 800a414:	601a      	str	r2, [r3, #0]
}
 800a416:	bf00      	nop
 800a418:	46bd      	mov	sp, r7
 800a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41e:	4770      	bx	lr
 800a420:	200012d4 	.word	0x200012d4

0800a424 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b082      	sub	sp, #8
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a42c:	f000 f852 	bl	800a4d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a430:	4b06      	ldr	r3, [pc, #24]	; (800a44c <prvIdleTask+0x28>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	2b01      	cmp	r3, #1
 800a436:	d9f9      	bls.n	800a42c <prvIdleTask+0x8>
			{
				taskYIELD();
 800a438:	4b05      	ldr	r3, [pc, #20]	; (800a450 <prvIdleTask+0x2c>)
 800a43a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a43e:	601a      	str	r2, [r3, #0]
 800a440:	f3bf 8f4f 	dsb	sy
 800a444:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a448:	e7f0      	b.n	800a42c <prvIdleTask+0x8>
 800a44a:	bf00      	nop
 800a44c:	20000df0 	.word	0x20000df0
 800a450:	e000ed04 	.word	0xe000ed04

0800a454 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b082      	sub	sp, #8
 800a458:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a45a:	2300      	movs	r3, #0
 800a45c:	607b      	str	r3, [r7, #4]
 800a45e:	e00c      	b.n	800a47a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a460:	687a      	ldr	r2, [r7, #4]
 800a462:	4613      	mov	r3, r2
 800a464:	009b      	lsls	r3, r3, #2
 800a466:	4413      	add	r3, r2
 800a468:	009b      	lsls	r3, r3, #2
 800a46a:	4a12      	ldr	r2, [pc, #72]	; (800a4b4 <prvInitialiseTaskLists+0x60>)
 800a46c:	4413      	add	r3, r2
 800a46e:	4618      	mov	r0, r3
 800a470:	f7fe f840 	bl	80084f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	3301      	adds	r3, #1
 800a478:	607b      	str	r3, [r7, #4]
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2b37      	cmp	r3, #55	; 0x37
 800a47e:	d9ef      	bls.n	800a460 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a480:	480d      	ldr	r0, [pc, #52]	; (800a4b8 <prvInitialiseTaskLists+0x64>)
 800a482:	f7fe f837 	bl	80084f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a486:	480d      	ldr	r0, [pc, #52]	; (800a4bc <prvInitialiseTaskLists+0x68>)
 800a488:	f7fe f834 	bl	80084f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a48c:	480c      	ldr	r0, [pc, #48]	; (800a4c0 <prvInitialiseTaskLists+0x6c>)
 800a48e:	f7fe f831 	bl	80084f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a492:	480c      	ldr	r0, [pc, #48]	; (800a4c4 <prvInitialiseTaskLists+0x70>)
 800a494:	f7fe f82e 	bl	80084f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a498:	480b      	ldr	r0, [pc, #44]	; (800a4c8 <prvInitialiseTaskLists+0x74>)
 800a49a:	f7fe f82b 	bl	80084f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a49e:	4b0b      	ldr	r3, [pc, #44]	; (800a4cc <prvInitialiseTaskLists+0x78>)
 800a4a0:	4a05      	ldr	r2, [pc, #20]	; (800a4b8 <prvInitialiseTaskLists+0x64>)
 800a4a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a4a4:	4b0a      	ldr	r3, [pc, #40]	; (800a4d0 <prvInitialiseTaskLists+0x7c>)
 800a4a6:	4a05      	ldr	r2, [pc, #20]	; (800a4bc <prvInitialiseTaskLists+0x68>)
 800a4a8:	601a      	str	r2, [r3, #0]
}
 800a4aa:	bf00      	nop
 800a4ac:	3708      	adds	r7, #8
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}
 800a4b2:	bf00      	nop
 800a4b4:	20000df0 	.word	0x20000df0
 800a4b8:	20001250 	.word	0x20001250
 800a4bc:	20001264 	.word	0x20001264
 800a4c0:	20001280 	.word	0x20001280
 800a4c4:	20001294 	.word	0x20001294
 800a4c8:	200012ac 	.word	0x200012ac
 800a4cc:	20001278 	.word	0x20001278
 800a4d0:	2000127c 	.word	0x2000127c

0800a4d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b082      	sub	sp, #8
 800a4d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a4da:	e019      	b.n	800a510 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a4dc:	f000 ff9a 	bl	800b414 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4e0:	4b10      	ldr	r3, [pc, #64]	; (800a524 <prvCheckTasksWaitingTermination+0x50>)
 800a4e2:	68db      	ldr	r3, [r3, #12]
 800a4e4:	68db      	ldr	r3, [r3, #12]
 800a4e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	3304      	adds	r3, #4
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f7fe f88b 	bl	8008608 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a4f2:	4b0d      	ldr	r3, [pc, #52]	; (800a528 <prvCheckTasksWaitingTermination+0x54>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	3b01      	subs	r3, #1
 800a4f8:	4a0b      	ldr	r2, [pc, #44]	; (800a528 <prvCheckTasksWaitingTermination+0x54>)
 800a4fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a4fc:	4b0b      	ldr	r3, [pc, #44]	; (800a52c <prvCheckTasksWaitingTermination+0x58>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	3b01      	subs	r3, #1
 800a502:	4a0a      	ldr	r2, [pc, #40]	; (800a52c <prvCheckTasksWaitingTermination+0x58>)
 800a504:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a506:	f000 ffb5 	bl	800b474 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f000 f810 	bl	800a530 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a510:	4b06      	ldr	r3, [pc, #24]	; (800a52c <prvCheckTasksWaitingTermination+0x58>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d1e1      	bne.n	800a4dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a518:	bf00      	nop
 800a51a:	bf00      	nop
 800a51c:	3708      	adds	r7, #8
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}
 800a522:	bf00      	nop
 800a524:	20001294 	.word	0x20001294
 800a528:	200012c0 	.word	0x200012c0
 800a52c:	200012a8 	.word	0x200012a8

0800a530 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a530:	b580      	push	{r7, lr}
 800a532:	b084      	sub	sp, #16
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d108      	bne.n	800a554 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a546:	4618      	mov	r0, r3
 800a548:	f001 f952 	bl	800b7f0 <vPortFree>
				vPortFree( pxTCB );
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f001 f94f 	bl	800b7f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a552:	e018      	b.n	800a586 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a55a:	2b01      	cmp	r3, #1
 800a55c:	d103      	bne.n	800a566 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f001 f946 	bl	800b7f0 <vPortFree>
	}
 800a564:	e00f      	b.n	800a586 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a56c:	2b02      	cmp	r3, #2
 800a56e:	d00a      	beq.n	800a586 <prvDeleteTCB+0x56>
	__asm volatile
 800a570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a574:	f383 8811 	msr	BASEPRI, r3
 800a578:	f3bf 8f6f 	isb	sy
 800a57c:	f3bf 8f4f 	dsb	sy
 800a580:	60fb      	str	r3, [r7, #12]
}
 800a582:	bf00      	nop
 800a584:	e7fe      	b.n	800a584 <prvDeleteTCB+0x54>
	}
 800a586:	bf00      	nop
 800a588:	3710      	adds	r7, #16
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}
	...

0800a590 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a590:	b480      	push	{r7}
 800a592:	b083      	sub	sp, #12
 800a594:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a596:	4b0c      	ldr	r3, [pc, #48]	; (800a5c8 <prvResetNextTaskUnblockTime+0x38>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d104      	bne.n	800a5aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a5a0:	4b0a      	ldr	r3, [pc, #40]	; (800a5cc <prvResetNextTaskUnblockTime+0x3c>)
 800a5a2:	f04f 32ff 	mov.w	r2, #4294967295
 800a5a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a5a8:	e008      	b.n	800a5bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5aa:	4b07      	ldr	r3, [pc, #28]	; (800a5c8 <prvResetNextTaskUnblockTime+0x38>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	68db      	ldr	r3, [r3, #12]
 800a5b0:	68db      	ldr	r3, [r3, #12]
 800a5b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	685b      	ldr	r3, [r3, #4]
 800a5b8:	4a04      	ldr	r2, [pc, #16]	; (800a5cc <prvResetNextTaskUnblockTime+0x3c>)
 800a5ba:	6013      	str	r3, [r2, #0]
}
 800a5bc:	bf00      	nop
 800a5be:	370c      	adds	r7, #12
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr
 800a5c8:	20001278 	.word	0x20001278
 800a5cc:	200012e0 	.word	0x200012e0

0800a5d0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800a5d0:	b480      	push	{r7}
 800a5d2:	b083      	sub	sp, #12
 800a5d4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800a5d6:	4b05      	ldr	r3, [pc, #20]	; (800a5ec <xTaskGetCurrentTaskHandle+0x1c>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	607b      	str	r3, [r7, #4]

		return xReturn;
 800a5dc:	687b      	ldr	r3, [r7, #4]
	}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	370c      	adds	r7, #12
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e8:	4770      	bx	lr
 800a5ea:	bf00      	nop
 800a5ec:	20000dec 	.word	0x20000dec

0800a5f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a5f0:	b480      	push	{r7}
 800a5f2:	b083      	sub	sp, #12
 800a5f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a5f6:	4b0b      	ldr	r3, [pc, #44]	; (800a624 <xTaskGetSchedulerState+0x34>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d102      	bne.n	800a604 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a5fe:	2301      	movs	r3, #1
 800a600:	607b      	str	r3, [r7, #4]
 800a602:	e008      	b.n	800a616 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a604:	4b08      	ldr	r3, [pc, #32]	; (800a628 <xTaskGetSchedulerState+0x38>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d102      	bne.n	800a612 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a60c:	2302      	movs	r3, #2
 800a60e:	607b      	str	r3, [r7, #4]
 800a610:	e001      	b.n	800a616 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a612:	2300      	movs	r3, #0
 800a614:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a616:	687b      	ldr	r3, [r7, #4]
	}
 800a618:	4618      	mov	r0, r3
 800a61a:	370c      	adds	r7, #12
 800a61c:	46bd      	mov	sp, r7
 800a61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a622:	4770      	bx	lr
 800a624:	200012cc 	.word	0x200012cc
 800a628:	200012e8 	.word	0x200012e8

0800a62c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b084      	sub	sp, #16
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a638:	2300      	movs	r3, #0
 800a63a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d051      	beq.n	800a6e6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a646:	4b2a      	ldr	r3, [pc, #168]	; (800a6f0 <xTaskPriorityInherit+0xc4>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d241      	bcs.n	800a6d4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	699b      	ldr	r3, [r3, #24]
 800a654:	2b00      	cmp	r3, #0
 800a656:	db06      	blt.n	800a666 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a658:	4b25      	ldr	r3, [pc, #148]	; (800a6f0 <xTaskPriorityInherit+0xc4>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a65e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	6959      	ldr	r1, [r3, #20]
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a66e:	4613      	mov	r3, r2
 800a670:	009b      	lsls	r3, r3, #2
 800a672:	4413      	add	r3, r2
 800a674:	009b      	lsls	r3, r3, #2
 800a676:	4a1f      	ldr	r2, [pc, #124]	; (800a6f4 <xTaskPriorityInherit+0xc8>)
 800a678:	4413      	add	r3, r2
 800a67a:	4299      	cmp	r1, r3
 800a67c:	d122      	bne.n	800a6c4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	3304      	adds	r3, #4
 800a682:	4618      	mov	r0, r3
 800a684:	f7fd ffc0 	bl	8008608 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a688:	4b19      	ldr	r3, [pc, #100]	; (800a6f0 <xTaskPriorityInherit+0xc4>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a692:	68bb      	ldr	r3, [r7, #8]
 800a694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a696:	4b18      	ldr	r3, [pc, #96]	; (800a6f8 <xTaskPriorityInherit+0xcc>)
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	429a      	cmp	r2, r3
 800a69c:	d903      	bls.n	800a6a6 <xTaskPriorityInherit+0x7a>
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6a2:	4a15      	ldr	r2, [pc, #84]	; (800a6f8 <xTaskPriorityInherit+0xcc>)
 800a6a4:	6013      	str	r3, [r2, #0]
 800a6a6:	68bb      	ldr	r3, [r7, #8]
 800a6a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6aa:	4613      	mov	r3, r2
 800a6ac:	009b      	lsls	r3, r3, #2
 800a6ae:	4413      	add	r3, r2
 800a6b0:	009b      	lsls	r3, r3, #2
 800a6b2:	4a10      	ldr	r2, [pc, #64]	; (800a6f4 <xTaskPriorityInherit+0xc8>)
 800a6b4:	441a      	add	r2, r3
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	3304      	adds	r3, #4
 800a6ba:	4619      	mov	r1, r3
 800a6bc:	4610      	mov	r0, r2
 800a6be:	f7fd ff46 	bl	800854e <vListInsertEnd>
 800a6c2:	e004      	b.n	800a6ce <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a6c4:	4b0a      	ldr	r3, [pc, #40]	; (800a6f0 <xTaskPriorityInherit+0xc4>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	60fb      	str	r3, [r7, #12]
 800a6d2:	e008      	b.n	800a6e6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a6d4:	68bb      	ldr	r3, [r7, #8]
 800a6d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a6d8:	4b05      	ldr	r3, [pc, #20]	; (800a6f0 <xTaskPriorityInherit+0xc4>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6de:	429a      	cmp	r2, r3
 800a6e0:	d201      	bcs.n	800a6e6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
	}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	3710      	adds	r7, #16
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}
 800a6f0:	20000dec 	.word	0x20000dec
 800a6f4:	20000df0 	.word	0x20000df0
 800a6f8:	200012c8 	.word	0x200012c8

0800a6fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b086      	sub	sp, #24
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a708:	2300      	movs	r3, #0
 800a70a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d056      	beq.n	800a7c0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a712:	4b2e      	ldr	r3, [pc, #184]	; (800a7cc <xTaskPriorityDisinherit+0xd0>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	693a      	ldr	r2, [r7, #16]
 800a718:	429a      	cmp	r2, r3
 800a71a:	d00a      	beq.n	800a732 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a71c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a720:	f383 8811 	msr	BASEPRI, r3
 800a724:	f3bf 8f6f 	isb	sy
 800a728:	f3bf 8f4f 	dsb	sy
 800a72c:	60fb      	str	r3, [r7, #12]
}
 800a72e:	bf00      	nop
 800a730:	e7fe      	b.n	800a730 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a736:	2b00      	cmp	r3, #0
 800a738:	d10a      	bne.n	800a750 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a73e:	f383 8811 	msr	BASEPRI, r3
 800a742:	f3bf 8f6f 	isb	sy
 800a746:	f3bf 8f4f 	dsb	sy
 800a74a:	60bb      	str	r3, [r7, #8]
}
 800a74c:	bf00      	nop
 800a74e:	e7fe      	b.n	800a74e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a754:	1e5a      	subs	r2, r3, #1
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a75a:	693b      	ldr	r3, [r7, #16]
 800a75c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a762:	429a      	cmp	r2, r3
 800a764:	d02c      	beq.n	800a7c0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d128      	bne.n	800a7c0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a76e:	693b      	ldr	r3, [r7, #16]
 800a770:	3304      	adds	r3, #4
 800a772:	4618      	mov	r0, r3
 800a774:	f7fd ff48 	bl	8008608 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a77c:	693b      	ldr	r3, [r7, #16]
 800a77e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a780:	693b      	ldr	r3, [r7, #16]
 800a782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a784:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a78c:	693b      	ldr	r3, [r7, #16]
 800a78e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a790:	4b0f      	ldr	r3, [pc, #60]	; (800a7d0 <xTaskPriorityDisinherit+0xd4>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	429a      	cmp	r2, r3
 800a796:	d903      	bls.n	800a7a0 <xTaskPriorityDisinherit+0xa4>
 800a798:	693b      	ldr	r3, [r7, #16]
 800a79a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a79c:	4a0c      	ldr	r2, [pc, #48]	; (800a7d0 <xTaskPriorityDisinherit+0xd4>)
 800a79e:	6013      	str	r3, [r2, #0]
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7a4:	4613      	mov	r3, r2
 800a7a6:	009b      	lsls	r3, r3, #2
 800a7a8:	4413      	add	r3, r2
 800a7aa:	009b      	lsls	r3, r3, #2
 800a7ac:	4a09      	ldr	r2, [pc, #36]	; (800a7d4 <xTaskPriorityDisinherit+0xd8>)
 800a7ae:	441a      	add	r2, r3
 800a7b0:	693b      	ldr	r3, [r7, #16]
 800a7b2:	3304      	adds	r3, #4
 800a7b4:	4619      	mov	r1, r3
 800a7b6:	4610      	mov	r0, r2
 800a7b8:	f7fd fec9 	bl	800854e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a7bc:	2301      	movs	r3, #1
 800a7be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a7c0:	697b      	ldr	r3, [r7, #20]
	}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	3718      	adds	r7, #24
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}
 800a7ca:	bf00      	nop
 800a7cc:	20000dec 	.word	0x20000dec
 800a7d0:	200012c8 	.word	0x200012c8
 800a7d4:	20000df0 	.word	0x20000df0

0800a7d8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b088      	sub	sp, #32
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
 800a7e0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d06a      	beq.n	800a8c6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a7f0:	69bb      	ldr	r3, [r7, #24]
 800a7f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d10a      	bne.n	800a80e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800a7f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7fc:	f383 8811 	msr	BASEPRI, r3
 800a800:	f3bf 8f6f 	isb	sy
 800a804:	f3bf 8f4f 	dsb	sy
 800a808:	60fb      	str	r3, [r7, #12]
}
 800a80a:	bf00      	nop
 800a80c:	e7fe      	b.n	800a80c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a80e:	69bb      	ldr	r3, [r7, #24]
 800a810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a812:	683a      	ldr	r2, [r7, #0]
 800a814:	429a      	cmp	r2, r3
 800a816:	d902      	bls.n	800a81e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	61fb      	str	r3, [r7, #28]
 800a81c:	e002      	b.n	800a824 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a81e:	69bb      	ldr	r3, [r7, #24]
 800a820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a822:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a824:	69bb      	ldr	r3, [r7, #24]
 800a826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a828:	69fa      	ldr	r2, [r7, #28]
 800a82a:	429a      	cmp	r2, r3
 800a82c:	d04b      	beq.n	800a8c6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a82e:	69bb      	ldr	r3, [r7, #24]
 800a830:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a832:	697a      	ldr	r2, [r7, #20]
 800a834:	429a      	cmp	r2, r3
 800a836:	d146      	bne.n	800a8c6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a838:	4b25      	ldr	r3, [pc, #148]	; (800a8d0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	69ba      	ldr	r2, [r7, #24]
 800a83e:	429a      	cmp	r2, r3
 800a840:	d10a      	bne.n	800a858 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800a842:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a846:	f383 8811 	msr	BASEPRI, r3
 800a84a:	f3bf 8f6f 	isb	sy
 800a84e:	f3bf 8f4f 	dsb	sy
 800a852:	60bb      	str	r3, [r7, #8]
}
 800a854:	bf00      	nop
 800a856:	e7fe      	b.n	800a856 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a858:	69bb      	ldr	r3, [r7, #24]
 800a85a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a85c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a85e:	69bb      	ldr	r3, [r7, #24]
 800a860:	69fa      	ldr	r2, [r7, #28]
 800a862:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a864:	69bb      	ldr	r3, [r7, #24]
 800a866:	699b      	ldr	r3, [r3, #24]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	db04      	blt.n	800a876 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a86c:	69fb      	ldr	r3, [r7, #28]
 800a86e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a872:	69bb      	ldr	r3, [r7, #24]
 800a874:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a876:	69bb      	ldr	r3, [r7, #24]
 800a878:	6959      	ldr	r1, [r3, #20]
 800a87a:	693a      	ldr	r2, [r7, #16]
 800a87c:	4613      	mov	r3, r2
 800a87e:	009b      	lsls	r3, r3, #2
 800a880:	4413      	add	r3, r2
 800a882:	009b      	lsls	r3, r3, #2
 800a884:	4a13      	ldr	r2, [pc, #76]	; (800a8d4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a886:	4413      	add	r3, r2
 800a888:	4299      	cmp	r1, r3
 800a88a:	d11c      	bne.n	800a8c6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a88c:	69bb      	ldr	r3, [r7, #24]
 800a88e:	3304      	adds	r3, #4
 800a890:	4618      	mov	r0, r3
 800a892:	f7fd feb9 	bl	8008608 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a896:	69bb      	ldr	r3, [r7, #24]
 800a898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a89a:	4b0f      	ldr	r3, [pc, #60]	; (800a8d8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	429a      	cmp	r2, r3
 800a8a0:	d903      	bls.n	800a8aa <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800a8a2:	69bb      	ldr	r3, [r7, #24]
 800a8a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8a6:	4a0c      	ldr	r2, [pc, #48]	; (800a8d8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a8a8:	6013      	str	r3, [r2, #0]
 800a8aa:	69bb      	ldr	r3, [r7, #24]
 800a8ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8ae:	4613      	mov	r3, r2
 800a8b0:	009b      	lsls	r3, r3, #2
 800a8b2:	4413      	add	r3, r2
 800a8b4:	009b      	lsls	r3, r3, #2
 800a8b6:	4a07      	ldr	r2, [pc, #28]	; (800a8d4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a8b8:	441a      	add	r2, r3
 800a8ba:	69bb      	ldr	r3, [r7, #24]
 800a8bc:	3304      	adds	r3, #4
 800a8be:	4619      	mov	r1, r3
 800a8c0:	4610      	mov	r0, r2
 800a8c2:	f7fd fe44 	bl	800854e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a8c6:	bf00      	nop
 800a8c8:	3720      	adds	r7, #32
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}
 800a8ce:	bf00      	nop
 800a8d0:	20000dec 	.word	0x20000dec
 800a8d4:	20000df0 	.word	0x20000df0
 800a8d8:	200012c8 	.word	0x200012c8

0800a8dc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a8dc:	b480      	push	{r7}
 800a8de:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a8e0:	4b07      	ldr	r3, [pc, #28]	; (800a900 <pvTaskIncrementMutexHeldCount+0x24>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d004      	beq.n	800a8f2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a8e8:	4b05      	ldr	r3, [pc, #20]	; (800a900 <pvTaskIncrementMutexHeldCount+0x24>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a8ee:	3201      	adds	r2, #1
 800a8f0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800a8f2:	4b03      	ldr	r3, [pc, #12]	; (800a900 <pvTaskIncrementMutexHeldCount+0x24>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
	}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fe:	4770      	bx	lr
 800a900:	20000dec 	.word	0x20000dec

0800a904 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b084      	sub	sp, #16
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
 800a90c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a90e:	4b21      	ldr	r3, [pc, #132]	; (800a994 <prvAddCurrentTaskToDelayedList+0x90>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a914:	4b20      	ldr	r3, [pc, #128]	; (800a998 <prvAddCurrentTaskToDelayedList+0x94>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	3304      	adds	r3, #4
 800a91a:	4618      	mov	r0, r3
 800a91c:	f7fd fe74 	bl	8008608 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a926:	d10a      	bne.n	800a93e <prvAddCurrentTaskToDelayedList+0x3a>
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d007      	beq.n	800a93e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a92e:	4b1a      	ldr	r3, [pc, #104]	; (800a998 <prvAddCurrentTaskToDelayedList+0x94>)
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	3304      	adds	r3, #4
 800a934:	4619      	mov	r1, r3
 800a936:	4819      	ldr	r0, [pc, #100]	; (800a99c <prvAddCurrentTaskToDelayedList+0x98>)
 800a938:	f7fd fe09 	bl	800854e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a93c:	e026      	b.n	800a98c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a93e:	68fa      	ldr	r2, [r7, #12]
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	4413      	add	r3, r2
 800a944:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a946:	4b14      	ldr	r3, [pc, #80]	; (800a998 <prvAddCurrentTaskToDelayedList+0x94>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	68ba      	ldr	r2, [r7, #8]
 800a94c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a94e:	68ba      	ldr	r2, [r7, #8]
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	429a      	cmp	r2, r3
 800a954:	d209      	bcs.n	800a96a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a956:	4b12      	ldr	r3, [pc, #72]	; (800a9a0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a958:	681a      	ldr	r2, [r3, #0]
 800a95a:	4b0f      	ldr	r3, [pc, #60]	; (800a998 <prvAddCurrentTaskToDelayedList+0x94>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	3304      	adds	r3, #4
 800a960:	4619      	mov	r1, r3
 800a962:	4610      	mov	r0, r2
 800a964:	f7fd fe17 	bl	8008596 <vListInsert>
}
 800a968:	e010      	b.n	800a98c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a96a:	4b0e      	ldr	r3, [pc, #56]	; (800a9a4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a96c:	681a      	ldr	r2, [r3, #0]
 800a96e:	4b0a      	ldr	r3, [pc, #40]	; (800a998 <prvAddCurrentTaskToDelayedList+0x94>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	3304      	adds	r3, #4
 800a974:	4619      	mov	r1, r3
 800a976:	4610      	mov	r0, r2
 800a978:	f7fd fe0d 	bl	8008596 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a97c:	4b0a      	ldr	r3, [pc, #40]	; (800a9a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	68ba      	ldr	r2, [r7, #8]
 800a982:	429a      	cmp	r2, r3
 800a984:	d202      	bcs.n	800a98c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a986:	4a08      	ldr	r2, [pc, #32]	; (800a9a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a988:	68bb      	ldr	r3, [r7, #8]
 800a98a:	6013      	str	r3, [r2, #0]
}
 800a98c:	bf00      	nop
 800a98e:	3710      	adds	r7, #16
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}
 800a994:	200012c4 	.word	0x200012c4
 800a998:	20000dec 	.word	0x20000dec
 800a99c:	200012ac 	.word	0x200012ac
 800a9a0:	2000127c 	.word	0x2000127c
 800a9a4:	20001278 	.word	0x20001278
 800a9a8:	200012e0 	.word	0x200012e0

0800a9ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b08a      	sub	sp, #40	; 0x28
 800a9b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a9b6:	f000 fba1 	bl	800b0fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a9ba:	4b1c      	ldr	r3, [pc, #112]	; (800aa2c <xTimerCreateTimerTask+0x80>)
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d021      	beq.n	800aa06 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a9ca:	1d3a      	adds	r2, r7, #4
 800a9cc:	f107 0108 	add.w	r1, r7, #8
 800a9d0:	f107 030c 	add.w	r3, r7, #12
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f7fd fd73 	bl	80084c0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a9da:	6879      	ldr	r1, [r7, #4]
 800a9dc:	68bb      	ldr	r3, [r7, #8]
 800a9de:	68fa      	ldr	r2, [r7, #12]
 800a9e0:	9202      	str	r2, [sp, #8]
 800a9e2:	9301      	str	r3, [sp, #4]
 800a9e4:	2302      	movs	r3, #2
 800a9e6:	9300      	str	r3, [sp, #0]
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	460a      	mov	r2, r1
 800a9ec:	4910      	ldr	r1, [pc, #64]	; (800aa30 <xTimerCreateTimerTask+0x84>)
 800a9ee:	4811      	ldr	r0, [pc, #68]	; (800aa34 <xTimerCreateTimerTask+0x88>)
 800a9f0:	f7fe fef8 	bl	80097e4 <xTaskCreateStatic>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	4a10      	ldr	r2, [pc, #64]	; (800aa38 <xTimerCreateTimerTask+0x8c>)
 800a9f8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a9fa:	4b0f      	ldr	r3, [pc, #60]	; (800aa38 <xTimerCreateTimerTask+0x8c>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d001      	beq.n	800aa06 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800aa02:	2301      	movs	r3, #1
 800aa04:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d10a      	bne.n	800aa22 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800aa0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa10:	f383 8811 	msr	BASEPRI, r3
 800aa14:	f3bf 8f6f 	isb	sy
 800aa18:	f3bf 8f4f 	dsb	sy
 800aa1c:	613b      	str	r3, [r7, #16]
}
 800aa1e:	bf00      	nop
 800aa20:	e7fe      	b.n	800aa20 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800aa22:	697b      	ldr	r3, [r7, #20]
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	3718      	adds	r7, #24
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}
 800aa2c:	2000131c 	.word	0x2000131c
 800aa30:	0800d578 	.word	0x0800d578
 800aa34:	0800aca5 	.word	0x0800aca5
 800aa38:	20001320 	.word	0x20001320

0800aa3c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b088      	sub	sp, #32
 800aa40:	af02      	add	r7, sp, #8
 800aa42:	60f8      	str	r0, [r7, #12]
 800aa44:	60b9      	str	r1, [r7, #8]
 800aa46:	607a      	str	r2, [r7, #4]
 800aa48:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800aa4a:	202c      	movs	r0, #44	; 0x2c
 800aa4c:	f000 fe04 	bl	800b658 <pvPortMalloc>
 800aa50:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d00d      	beq.n	800aa74 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800aa58:	697b      	ldr	r3, [r7, #20]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	9301      	str	r3, [sp, #4]
 800aa64:	6a3b      	ldr	r3, [r7, #32]
 800aa66:	9300      	str	r3, [sp, #0]
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	687a      	ldr	r2, [r7, #4]
 800aa6c:	68b9      	ldr	r1, [r7, #8]
 800aa6e:	68f8      	ldr	r0, [r7, #12]
 800aa70:	f000 f843 	bl	800aafa <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800aa74:	697b      	ldr	r3, [r7, #20]
	}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3718      	adds	r7, #24
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}

0800aa7e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800aa7e:	b580      	push	{r7, lr}
 800aa80:	b08a      	sub	sp, #40	; 0x28
 800aa82:	af02      	add	r7, sp, #8
 800aa84:	60f8      	str	r0, [r7, #12]
 800aa86:	60b9      	str	r1, [r7, #8]
 800aa88:	607a      	str	r2, [r7, #4]
 800aa8a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800aa8c:	232c      	movs	r3, #44	; 0x2c
 800aa8e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800aa90:	693b      	ldr	r3, [r7, #16]
 800aa92:	2b2c      	cmp	r3, #44	; 0x2c
 800aa94:	d00a      	beq.n	800aaac <xTimerCreateStatic+0x2e>
	__asm volatile
 800aa96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa9a:	f383 8811 	msr	BASEPRI, r3
 800aa9e:	f3bf 8f6f 	isb	sy
 800aaa2:	f3bf 8f4f 	dsb	sy
 800aaa6:	61bb      	str	r3, [r7, #24]
}
 800aaa8:	bf00      	nop
 800aaaa:	e7fe      	b.n	800aaaa <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800aaac:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800aaae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d10a      	bne.n	800aaca <xTimerCreateStatic+0x4c>
	__asm volatile
 800aab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aab8:	f383 8811 	msr	BASEPRI, r3
 800aabc:	f3bf 8f6f 	isb	sy
 800aac0:	f3bf 8f4f 	dsb	sy
 800aac4:	617b      	str	r3, [r7, #20]
}
 800aac6:	bf00      	nop
 800aac8:	e7fe      	b.n	800aac8 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800aaca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aacc:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800aace:	69fb      	ldr	r3, [r7, #28]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d00d      	beq.n	800aaf0 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800aad4:	69fb      	ldr	r3, [r7, #28]
 800aad6:	2202      	movs	r2, #2
 800aad8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800aadc:	69fb      	ldr	r3, [r7, #28]
 800aade:	9301      	str	r3, [sp, #4]
 800aae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aae2:	9300      	str	r3, [sp, #0]
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	687a      	ldr	r2, [r7, #4]
 800aae8:	68b9      	ldr	r1, [r7, #8]
 800aaea:	68f8      	ldr	r0, [r7, #12]
 800aaec:	f000 f805 	bl	800aafa <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800aaf0:	69fb      	ldr	r3, [r7, #28]
	}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	3720      	adds	r7, #32
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}

0800aafa <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800aafa:	b580      	push	{r7, lr}
 800aafc:	b086      	sub	sp, #24
 800aafe:	af00      	add	r7, sp, #0
 800ab00:	60f8      	str	r0, [r7, #12]
 800ab02:	60b9      	str	r1, [r7, #8]
 800ab04:	607a      	str	r2, [r7, #4]
 800ab06:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d10a      	bne.n	800ab24 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800ab0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab12:	f383 8811 	msr	BASEPRI, r3
 800ab16:	f3bf 8f6f 	isb	sy
 800ab1a:	f3bf 8f4f 	dsb	sy
 800ab1e:	617b      	str	r3, [r7, #20]
}
 800ab20:	bf00      	nop
 800ab22:	e7fe      	b.n	800ab22 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800ab24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d01e      	beq.n	800ab68 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800ab2a:	f000 fae7 	bl	800b0fc <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800ab2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab30:	68fa      	ldr	r2, [r7, #12]
 800ab32:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800ab34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab36:	68ba      	ldr	r2, [r7, #8]
 800ab38:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800ab3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab3c:	683a      	ldr	r2, [r7, #0]
 800ab3e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800ab40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab42:	6a3a      	ldr	r2, [r7, #32]
 800ab44:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800ab46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab48:	3304      	adds	r3, #4
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f7fd fcf2 	bl	8008534 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d008      	beq.n	800ab68 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800ab56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab5c:	f043 0304 	orr.w	r3, r3, #4
 800ab60:	b2da      	uxtb	r2, r3
 800ab62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800ab68:	bf00      	nop
 800ab6a:	3718      	adds	r7, #24
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd80      	pop	{r7, pc}

0800ab70 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b08a      	sub	sp, #40	; 0x28
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	60f8      	str	r0, [r7, #12]
 800ab78:	60b9      	str	r1, [r7, #8]
 800ab7a:	607a      	str	r2, [r7, #4]
 800ab7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d10a      	bne.n	800ab9e <xTimerGenericCommand+0x2e>
	__asm volatile
 800ab88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab8c:	f383 8811 	msr	BASEPRI, r3
 800ab90:	f3bf 8f6f 	isb	sy
 800ab94:	f3bf 8f4f 	dsb	sy
 800ab98:	623b      	str	r3, [r7, #32]
}
 800ab9a:	bf00      	nop
 800ab9c:	e7fe      	b.n	800ab9c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ab9e:	4b1a      	ldr	r3, [pc, #104]	; (800ac08 <xTimerGenericCommand+0x98>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d02a      	beq.n	800abfc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	2b05      	cmp	r3, #5
 800abb6:	dc18      	bgt.n	800abea <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800abb8:	f7ff fd1a 	bl	800a5f0 <xTaskGetSchedulerState>
 800abbc:	4603      	mov	r3, r0
 800abbe:	2b02      	cmp	r3, #2
 800abc0:	d109      	bne.n	800abd6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800abc2:	4b11      	ldr	r3, [pc, #68]	; (800ac08 <xTimerGenericCommand+0x98>)
 800abc4:	6818      	ldr	r0, [r3, #0]
 800abc6:	f107 0110 	add.w	r1, r7, #16
 800abca:	2300      	movs	r3, #0
 800abcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abce:	f7fd ffa3 	bl	8008b18 <xQueueGenericSend>
 800abd2:	6278      	str	r0, [r7, #36]	; 0x24
 800abd4:	e012      	b.n	800abfc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800abd6:	4b0c      	ldr	r3, [pc, #48]	; (800ac08 <xTimerGenericCommand+0x98>)
 800abd8:	6818      	ldr	r0, [r3, #0]
 800abda:	f107 0110 	add.w	r1, r7, #16
 800abde:	2300      	movs	r3, #0
 800abe0:	2200      	movs	r2, #0
 800abe2:	f7fd ff99 	bl	8008b18 <xQueueGenericSend>
 800abe6:	6278      	str	r0, [r7, #36]	; 0x24
 800abe8:	e008      	b.n	800abfc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800abea:	4b07      	ldr	r3, [pc, #28]	; (800ac08 <xTimerGenericCommand+0x98>)
 800abec:	6818      	ldr	r0, [r3, #0]
 800abee:	f107 0110 	add.w	r1, r7, #16
 800abf2:	2300      	movs	r3, #0
 800abf4:	683a      	ldr	r2, [r7, #0]
 800abf6:	f7fe f88d 	bl	8008d14 <xQueueGenericSendFromISR>
 800abfa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800abfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800abfe:	4618      	mov	r0, r3
 800ac00:	3728      	adds	r7, #40	; 0x28
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd80      	pop	{r7, pc}
 800ac06:	bf00      	nop
 800ac08:	2000131c 	.word	0x2000131c

0800ac0c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b088      	sub	sp, #32
 800ac10:	af02      	add	r7, sp, #8
 800ac12:	6078      	str	r0, [r7, #4]
 800ac14:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac16:	4b22      	ldr	r3, [pc, #136]	; (800aca0 <prvProcessExpiredTimer+0x94>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	68db      	ldr	r3, [r3, #12]
 800ac1c:	68db      	ldr	r3, [r3, #12]
 800ac1e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ac20:	697b      	ldr	r3, [r7, #20]
 800ac22:	3304      	adds	r3, #4
 800ac24:	4618      	mov	r0, r3
 800ac26:	f7fd fcef 	bl	8008608 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac30:	f003 0304 	and.w	r3, r3, #4
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d022      	beq.n	800ac7e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ac38:	697b      	ldr	r3, [r7, #20]
 800ac3a:	699a      	ldr	r2, [r3, #24]
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	18d1      	adds	r1, r2, r3
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	683a      	ldr	r2, [r7, #0]
 800ac44:	6978      	ldr	r0, [r7, #20]
 800ac46:	f000 f8d1 	bl	800adec <prvInsertTimerInActiveList>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d01f      	beq.n	800ac90 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ac50:	2300      	movs	r3, #0
 800ac52:	9300      	str	r3, [sp, #0]
 800ac54:	2300      	movs	r3, #0
 800ac56:	687a      	ldr	r2, [r7, #4]
 800ac58:	2100      	movs	r1, #0
 800ac5a:	6978      	ldr	r0, [r7, #20]
 800ac5c:	f7ff ff88 	bl	800ab70 <xTimerGenericCommand>
 800ac60:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d113      	bne.n	800ac90 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ac68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac6c:	f383 8811 	msr	BASEPRI, r3
 800ac70:	f3bf 8f6f 	isb	sy
 800ac74:	f3bf 8f4f 	dsb	sy
 800ac78:	60fb      	str	r3, [r7, #12]
}
 800ac7a:	bf00      	nop
 800ac7c:	e7fe      	b.n	800ac7c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac84:	f023 0301 	bic.w	r3, r3, #1
 800ac88:	b2da      	uxtb	r2, r3
 800ac8a:	697b      	ldr	r3, [r7, #20]
 800ac8c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ac90:	697b      	ldr	r3, [r7, #20]
 800ac92:	6a1b      	ldr	r3, [r3, #32]
 800ac94:	6978      	ldr	r0, [r7, #20]
 800ac96:	4798      	blx	r3
}
 800ac98:	bf00      	nop
 800ac9a:	3718      	adds	r7, #24
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}
 800aca0:	20001314 	.word	0x20001314

0800aca4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b084      	sub	sp, #16
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800acac:	f107 0308 	add.w	r3, r7, #8
 800acb0:	4618      	mov	r0, r3
 800acb2:	f000 f857 	bl	800ad64 <prvGetNextExpireTime>
 800acb6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	4619      	mov	r1, r3
 800acbc:	68f8      	ldr	r0, [r7, #12]
 800acbe:	f000 f803 	bl	800acc8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800acc2:	f000 f8d5 	bl	800ae70 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800acc6:	e7f1      	b.n	800acac <prvTimerTask+0x8>

0800acc8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b084      	sub	sp, #16
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
 800acd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800acd2:	f7ff f89b 	bl	8009e0c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800acd6:	f107 0308 	add.w	r3, r7, #8
 800acda:	4618      	mov	r0, r3
 800acdc:	f000 f866 	bl	800adac <prvSampleTimeNow>
 800ace0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d130      	bne.n	800ad4a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d10a      	bne.n	800ad04 <prvProcessTimerOrBlockTask+0x3c>
 800acee:	687a      	ldr	r2, [r7, #4]
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	429a      	cmp	r2, r3
 800acf4:	d806      	bhi.n	800ad04 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800acf6:	f7ff f897 	bl	8009e28 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800acfa:	68f9      	ldr	r1, [r7, #12]
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f7ff ff85 	bl	800ac0c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ad02:	e024      	b.n	800ad4e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d008      	beq.n	800ad1c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ad0a:	4b13      	ldr	r3, [pc, #76]	; (800ad58 <prvProcessTimerOrBlockTask+0x90>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d101      	bne.n	800ad18 <prvProcessTimerOrBlockTask+0x50>
 800ad14:	2301      	movs	r3, #1
 800ad16:	e000      	b.n	800ad1a <prvProcessTimerOrBlockTask+0x52>
 800ad18:	2300      	movs	r3, #0
 800ad1a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ad1c:	4b0f      	ldr	r3, [pc, #60]	; (800ad5c <prvProcessTimerOrBlockTask+0x94>)
 800ad1e:	6818      	ldr	r0, [r3, #0]
 800ad20:	687a      	ldr	r2, [r7, #4]
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	1ad3      	subs	r3, r2, r3
 800ad26:	683a      	ldr	r2, [r7, #0]
 800ad28:	4619      	mov	r1, r3
 800ad2a:	f7fe fd27 	bl	800977c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ad2e:	f7ff f87b 	bl	8009e28 <xTaskResumeAll>
 800ad32:	4603      	mov	r3, r0
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d10a      	bne.n	800ad4e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ad38:	4b09      	ldr	r3, [pc, #36]	; (800ad60 <prvProcessTimerOrBlockTask+0x98>)
 800ad3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad3e:	601a      	str	r2, [r3, #0]
 800ad40:	f3bf 8f4f 	dsb	sy
 800ad44:	f3bf 8f6f 	isb	sy
}
 800ad48:	e001      	b.n	800ad4e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ad4a:	f7ff f86d 	bl	8009e28 <xTaskResumeAll>
}
 800ad4e:	bf00      	nop
 800ad50:	3710      	adds	r7, #16
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}
 800ad56:	bf00      	nop
 800ad58:	20001318 	.word	0x20001318
 800ad5c:	2000131c 	.word	0x2000131c
 800ad60:	e000ed04 	.word	0xe000ed04

0800ad64 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ad64:	b480      	push	{r7}
 800ad66:	b085      	sub	sp, #20
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ad6c:	4b0e      	ldr	r3, [pc, #56]	; (800ada8 <prvGetNextExpireTime+0x44>)
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d101      	bne.n	800ad7a <prvGetNextExpireTime+0x16>
 800ad76:	2201      	movs	r2, #1
 800ad78:	e000      	b.n	800ad7c <prvGetNextExpireTime+0x18>
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d105      	bne.n	800ad94 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ad88:	4b07      	ldr	r3, [pc, #28]	; (800ada8 <prvGetNextExpireTime+0x44>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	68db      	ldr	r3, [r3, #12]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	60fb      	str	r3, [r7, #12]
 800ad92:	e001      	b.n	800ad98 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ad94:	2300      	movs	r3, #0
 800ad96:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ad98:	68fb      	ldr	r3, [r7, #12]
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3714      	adds	r7, #20
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada4:	4770      	bx	lr
 800ada6:	bf00      	nop
 800ada8:	20001314 	.word	0x20001314

0800adac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b084      	sub	sp, #16
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800adb4:	f7ff f8d6 	bl	8009f64 <xTaskGetTickCount>
 800adb8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800adba:	4b0b      	ldr	r3, [pc, #44]	; (800ade8 <prvSampleTimeNow+0x3c>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	68fa      	ldr	r2, [r7, #12]
 800adc0:	429a      	cmp	r2, r3
 800adc2:	d205      	bcs.n	800add0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800adc4:	f000 f936 	bl	800b034 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2201      	movs	r2, #1
 800adcc:	601a      	str	r2, [r3, #0]
 800adce:	e002      	b.n	800add6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2200      	movs	r2, #0
 800add4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800add6:	4a04      	ldr	r2, [pc, #16]	; (800ade8 <prvSampleTimeNow+0x3c>)
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800addc:	68fb      	ldr	r3, [r7, #12]
}
 800adde:	4618      	mov	r0, r3
 800ade0:	3710      	adds	r7, #16
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}
 800ade6:	bf00      	nop
 800ade8:	20001324 	.word	0x20001324

0800adec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b086      	sub	sp, #24
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	60f8      	str	r0, [r7, #12]
 800adf4:	60b9      	str	r1, [r7, #8]
 800adf6:	607a      	str	r2, [r7, #4]
 800adf8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800adfa:	2300      	movs	r3, #0
 800adfc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	68ba      	ldr	r2, [r7, #8]
 800ae02:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	68fa      	ldr	r2, [r7, #12]
 800ae08:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ae0a:	68ba      	ldr	r2, [r7, #8]
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	429a      	cmp	r2, r3
 800ae10:	d812      	bhi.n	800ae38 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae12:	687a      	ldr	r2, [r7, #4]
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	1ad2      	subs	r2, r2, r3
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	699b      	ldr	r3, [r3, #24]
 800ae1c:	429a      	cmp	r2, r3
 800ae1e:	d302      	bcc.n	800ae26 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ae20:	2301      	movs	r3, #1
 800ae22:	617b      	str	r3, [r7, #20]
 800ae24:	e01b      	b.n	800ae5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ae26:	4b10      	ldr	r3, [pc, #64]	; (800ae68 <prvInsertTimerInActiveList+0x7c>)
 800ae28:	681a      	ldr	r2, [r3, #0]
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	3304      	adds	r3, #4
 800ae2e:	4619      	mov	r1, r3
 800ae30:	4610      	mov	r0, r2
 800ae32:	f7fd fbb0 	bl	8008596 <vListInsert>
 800ae36:	e012      	b.n	800ae5e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ae38:	687a      	ldr	r2, [r7, #4]
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	429a      	cmp	r2, r3
 800ae3e:	d206      	bcs.n	800ae4e <prvInsertTimerInActiveList+0x62>
 800ae40:	68ba      	ldr	r2, [r7, #8]
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d302      	bcc.n	800ae4e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ae48:	2301      	movs	r3, #1
 800ae4a:	617b      	str	r3, [r7, #20]
 800ae4c:	e007      	b.n	800ae5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ae4e:	4b07      	ldr	r3, [pc, #28]	; (800ae6c <prvInsertTimerInActiveList+0x80>)
 800ae50:	681a      	ldr	r2, [r3, #0]
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	3304      	adds	r3, #4
 800ae56:	4619      	mov	r1, r3
 800ae58:	4610      	mov	r0, r2
 800ae5a:	f7fd fb9c 	bl	8008596 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ae5e:	697b      	ldr	r3, [r7, #20]
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	3718      	adds	r7, #24
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}
 800ae68:	20001318 	.word	0x20001318
 800ae6c:	20001314 	.word	0x20001314

0800ae70 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b08e      	sub	sp, #56	; 0x38
 800ae74:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ae76:	e0ca      	b.n	800b00e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	da18      	bge.n	800aeb0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ae7e:	1d3b      	adds	r3, r7, #4
 800ae80:	3304      	adds	r3, #4
 800ae82:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ae84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d10a      	bne.n	800aea0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ae8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae8e:	f383 8811 	msr	BASEPRI, r3
 800ae92:	f3bf 8f6f 	isb	sy
 800ae96:	f3bf 8f4f 	dsb	sy
 800ae9a:	61fb      	str	r3, [r7, #28]
}
 800ae9c:	bf00      	nop
 800ae9e:	e7fe      	b.n	800ae9e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800aea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aea6:	6850      	ldr	r0, [r2, #4]
 800aea8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aeaa:	6892      	ldr	r2, [r2, #8]
 800aeac:	4611      	mov	r1, r2
 800aeae:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	f2c0 80aa 	blt.w	800b00c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800aebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aebe:	695b      	ldr	r3, [r3, #20]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d004      	beq.n	800aece <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aec6:	3304      	adds	r3, #4
 800aec8:	4618      	mov	r0, r3
 800aeca:	f7fd fb9d 	bl	8008608 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aece:	463b      	mov	r3, r7
 800aed0:	4618      	mov	r0, r3
 800aed2:	f7ff ff6b 	bl	800adac <prvSampleTimeNow>
 800aed6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2b09      	cmp	r3, #9
 800aedc:	f200 8097 	bhi.w	800b00e <prvProcessReceivedCommands+0x19e>
 800aee0:	a201      	add	r2, pc, #4	; (adr r2, 800aee8 <prvProcessReceivedCommands+0x78>)
 800aee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aee6:	bf00      	nop
 800aee8:	0800af11 	.word	0x0800af11
 800aeec:	0800af11 	.word	0x0800af11
 800aef0:	0800af11 	.word	0x0800af11
 800aef4:	0800af85 	.word	0x0800af85
 800aef8:	0800af99 	.word	0x0800af99
 800aefc:	0800afe3 	.word	0x0800afe3
 800af00:	0800af11 	.word	0x0800af11
 800af04:	0800af11 	.word	0x0800af11
 800af08:	0800af85 	.word	0x0800af85
 800af0c:	0800af99 	.word	0x0800af99
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800af10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af16:	f043 0301 	orr.w	r3, r3, #1
 800af1a:	b2da      	uxtb	r2, r3
 800af1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800af22:	68ba      	ldr	r2, [r7, #8]
 800af24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af26:	699b      	ldr	r3, [r3, #24]
 800af28:	18d1      	adds	r1, r2, r3
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af30:	f7ff ff5c 	bl	800adec <prvInsertTimerInActiveList>
 800af34:	4603      	mov	r3, r0
 800af36:	2b00      	cmp	r3, #0
 800af38:	d069      	beq.n	800b00e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800af3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af3c:	6a1b      	ldr	r3, [r3, #32]
 800af3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af40:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800af42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af48:	f003 0304 	and.w	r3, r3, #4
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d05e      	beq.n	800b00e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800af50:	68ba      	ldr	r2, [r7, #8]
 800af52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af54:	699b      	ldr	r3, [r3, #24]
 800af56:	441a      	add	r2, r3
 800af58:	2300      	movs	r3, #0
 800af5a:	9300      	str	r3, [sp, #0]
 800af5c:	2300      	movs	r3, #0
 800af5e:	2100      	movs	r1, #0
 800af60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af62:	f7ff fe05 	bl	800ab70 <xTimerGenericCommand>
 800af66:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800af68:	6a3b      	ldr	r3, [r7, #32]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d14f      	bne.n	800b00e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800af6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af72:	f383 8811 	msr	BASEPRI, r3
 800af76:	f3bf 8f6f 	isb	sy
 800af7a:	f3bf 8f4f 	dsb	sy
 800af7e:	61bb      	str	r3, [r7, #24]
}
 800af80:	bf00      	nop
 800af82:	e7fe      	b.n	800af82 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800af84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af8a:	f023 0301 	bic.w	r3, r3, #1
 800af8e:	b2da      	uxtb	r2, r3
 800af90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800af96:	e03a      	b.n	800b00e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800af98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af9e:	f043 0301 	orr.w	r3, r3, #1
 800afa2:	b2da      	uxtb	r2, r3
 800afa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afa6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800afaa:	68ba      	ldr	r2, [r7, #8]
 800afac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afae:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800afb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afb2:	699b      	ldr	r3, [r3, #24]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d10a      	bne.n	800afce <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800afb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afbc:	f383 8811 	msr	BASEPRI, r3
 800afc0:	f3bf 8f6f 	isb	sy
 800afc4:	f3bf 8f4f 	dsb	sy
 800afc8:	617b      	str	r3, [r7, #20]
}
 800afca:	bf00      	nop
 800afcc:	e7fe      	b.n	800afcc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800afce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afd0:	699a      	ldr	r2, [r3, #24]
 800afd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd4:	18d1      	adds	r1, r2, r3
 800afd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800afdc:	f7ff ff06 	bl	800adec <prvInsertTimerInActiveList>
					break;
 800afe0:	e015      	b.n	800b00e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800afe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afe4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800afe8:	f003 0302 	and.w	r3, r3, #2
 800afec:	2b00      	cmp	r3, #0
 800afee:	d103      	bne.n	800aff8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800aff0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aff2:	f000 fbfd 	bl	800b7f0 <vPortFree>
 800aff6:	e00a      	b.n	800b00e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800affa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800affe:	f023 0301 	bic.w	r3, r3, #1
 800b002:	b2da      	uxtb	r2, r3
 800b004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b006:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b00a:	e000      	b.n	800b00e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b00c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b00e:	4b08      	ldr	r3, [pc, #32]	; (800b030 <prvProcessReceivedCommands+0x1c0>)
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	1d39      	adds	r1, r7, #4
 800b014:	2200      	movs	r2, #0
 800b016:	4618      	mov	r0, r3
 800b018:	f7fd ffa4 	bl	8008f64 <xQueueReceive>
 800b01c:	4603      	mov	r3, r0
 800b01e:	2b00      	cmp	r3, #0
 800b020:	f47f af2a 	bne.w	800ae78 <prvProcessReceivedCommands+0x8>
	}
}
 800b024:	bf00      	nop
 800b026:	bf00      	nop
 800b028:	3730      	adds	r7, #48	; 0x30
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}
 800b02e:	bf00      	nop
 800b030:	2000131c 	.word	0x2000131c

0800b034 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b088      	sub	sp, #32
 800b038:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b03a:	e048      	b.n	800b0ce <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b03c:	4b2d      	ldr	r3, [pc, #180]	; (800b0f4 <prvSwitchTimerLists+0xc0>)
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	68db      	ldr	r3, [r3, #12]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b046:	4b2b      	ldr	r3, [pc, #172]	; (800b0f4 <prvSwitchTimerLists+0xc0>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	68db      	ldr	r3, [r3, #12]
 800b04c:	68db      	ldr	r3, [r3, #12]
 800b04e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	3304      	adds	r3, #4
 800b054:	4618      	mov	r0, r3
 800b056:	f7fd fad7 	bl	8008608 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	6a1b      	ldr	r3, [r3, #32]
 800b05e:	68f8      	ldr	r0, [r7, #12]
 800b060:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b068:	f003 0304 	and.w	r3, r3, #4
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d02e      	beq.n	800b0ce <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	699b      	ldr	r3, [r3, #24]
 800b074:	693a      	ldr	r2, [r7, #16]
 800b076:	4413      	add	r3, r2
 800b078:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b07a:	68ba      	ldr	r2, [r7, #8]
 800b07c:	693b      	ldr	r3, [r7, #16]
 800b07e:	429a      	cmp	r2, r3
 800b080:	d90e      	bls.n	800b0a0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	68ba      	ldr	r2, [r7, #8]
 800b086:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	68fa      	ldr	r2, [r7, #12]
 800b08c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b08e:	4b19      	ldr	r3, [pc, #100]	; (800b0f4 <prvSwitchTimerLists+0xc0>)
 800b090:	681a      	ldr	r2, [r3, #0]
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	3304      	adds	r3, #4
 800b096:	4619      	mov	r1, r3
 800b098:	4610      	mov	r0, r2
 800b09a:	f7fd fa7c 	bl	8008596 <vListInsert>
 800b09e:	e016      	b.n	800b0ce <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	9300      	str	r3, [sp, #0]
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	693a      	ldr	r2, [r7, #16]
 800b0a8:	2100      	movs	r1, #0
 800b0aa:	68f8      	ldr	r0, [r7, #12]
 800b0ac:	f7ff fd60 	bl	800ab70 <xTimerGenericCommand>
 800b0b0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d10a      	bne.n	800b0ce <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b0b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0bc:	f383 8811 	msr	BASEPRI, r3
 800b0c0:	f3bf 8f6f 	isb	sy
 800b0c4:	f3bf 8f4f 	dsb	sy
 800b0c8:	603b      	str	r3, [r7, #0]
}
 800b0ca:	bf00      	nop
 800b0cc:	e7fe      	b.n	800b0cc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b0ce:	4b09      	ldr	r3, [pc, #36]	; (800b0f4 <prvSwitchTimerLists+0xc0>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d1b1      	bne.n	800b03c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b0d8:	4b06      	ldr	r3, [pc, #24]	; (800b0f4 <prvSwitchTimerLists+0xc0>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b0de:	4b06      	ldr	r3, [pc, #24]	; (800b0f8 <prvSwitchTimerLists+0xc4>)
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	4a04      	ldr	r2, [pc, #16]	; (800b0f4 <prvSwitchTimerLists+0xc0>)
 800b0e4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b0e6:	4a04      	ldr	r2, [pc, #16]	; (800b0f8 <prvSwitchTimerLists+0xc4>)
 800b0e8:	697b      	ldr	r3, [r7, #20]
 800b0ea:	6013      	str	r3, [r2, #0]
}
 800b0ec:	bf00      	nop
 800b0ee:	3718      	adds	r7, #24
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}
 800b0f4:	20001314 	.word	0x20001314
 800b0f8:	20001318 	.word	0x20001318

0800b0fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b082      	sub	sp, #8
 800b100:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b102:	f000 f987 	bl	800b414 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b106:	4b15      	ldr	r3, [pc, #84]	; (800b15c <prvCheckForValidListAndQueue+0x60>)
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d120      	bne.n	800b150 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b10e:	4814      	ldr	r0, [pc, #80]	; (800b160 <prvCheckForValidListAndQueue+0x64>)
 800b110:	f7fd f9f0 	bl	80084f4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b114:	4813      	ldr	r0, [pc, #76]	; (800b164 <prvCheckForValidListAndQueue+0x68>)
 800b116:	f7fd f9ed 	bl	80084f4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b11a:	4b13      	ldr	r3, [pc, #76]	; (800b168 <prvCheckForValidListAndQueue+0x6c>)
 800b11c:	4a10      	ldr	r2, [pc, #64]	; (800b160 <prvCheckForValidListAndQueue+0x64>)
 800b11e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b120:	4b12      	ldr	r3, [pc, #72]	; (800b16c <prvCheckForValidListAndQueue+0x70>)
 800b122:	4a10      	ldr	r2, [pc, #64]	; (800b164 <prvCheckForValidListAndQueue+0x68>)
 800b124:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b126:	2300      	movs	r3, #0
 800b128:	9300      	str	r3, [sp, #0]
 800b12a:	4b11      	ldr	r3, [pc, #68]	; (800b170 <prvCheckForValidListAndQueue+0x74>)
 800b12c:	4a11      	ldr	r2, [pc, #68]	; (800b174 <prvCheckForValidListAndQueue+0x78>)
 800b12e:	2110      	movs	r1, #16
 800b130:	200a      	movs	r0, #10
 800b132:	f7fd fafb 	bl	800872c <xQueueGenericCreateStatic>
 800b136:	4603      	mov	r3, r0
 800b138:	4a08      	ldr	r2, [pc, #32]	; (800b15c <prvCheckForValidListAndQueue+0x60>)
 800b13a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b13c:	4b07      	ldr	r3, [pc, #28]	; (800b15c <prvCheckForValidListAndQueue+0x60>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d005      	beq.n	800b150 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b144:	4b05      	ldr	r3, [pc, #20]	; (800b15c <prvCheckForValidListAndQueue+0x60>)
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	490b      	ldr	r1, [pc, #44]	; (800b178 <prvCheckForValidListAndQueue+0x7c>)
 800b14a:	4618      	mov	r0, r3
 800b14c:	f7fe fac2 	bl	80096d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b150:	f000 f990 	bl	800b474 <vPortExitCritical>
}
 800b154:	bf00      	nop
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}
 800b15a:	bf00      	nop
 800b15c:	2000131c 	.word	0x2000131c
 800b160:	200012ec 	.word	0x200012ec
 800b164:	20001300 	.word	0x20001300
 800b168:	20001314 	.word	0x20001314
 800b16c:	20001318 	.word	0x20001318
 800b170:	200013c8 	.word	0x200013c8
 800b174:	20001328 	.word	0x20001328
 800b178:	0800d580 	.word	0x0800d580

0800b17c <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b086      	sub	sp, #24
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d10a      	bne.n	800b1a4 <pvTimerGetTimerID+0x28>
	__asm volatile
 800b18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b192:	f383 8811 	msr	BASEPRI, r3
 800b196:	f3bf 8f6f 	isb	sy
 800b19a:	f3bf 8f4f 	dsb	sy
 800b19e:	60fb      	str	r3, [r7, #12]
}
 800b1a0:	bf00      	nop
 800b1a2:	e7fe      	b.n	800b1a2 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800b1a4:	f000 f936 	bl	800b414 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800b1a8:	697b      	ldr	r3, [r7, #20]
 800b1aa:	69db      	ldr	r3, [r3, #28]
 800b1ac:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800b1ae:	f000 f961 	bl	800b474 <vPortExitCritical>

	return pvReturn;
 800b1b2:	693b      	ldr	r3, [r7, #16]
}
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	3718      	adds	r7, #24
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bd80      	pop	{r7, pc}

0800b1bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b1bc:	b480      	push	{r7}
 800b1be:	b085      	sub	sp, #20
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	60f8      	str	r0, [r7, #12]
 800b1c4:	60b9      	str	r1, [r7, #8]
 800b1c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	3b04      	subs	r3, #4
 800b1cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b1d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	3b04      	subs	r3, #4
 800b1da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b1dc:	68bb      	ldr	r3, [r7, #8]
 800b1de:	f023 0201 	bic.w	r2, r3, #1
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	3b04      	subs	r3, #4
 800b1ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b1ec:	4a0c      	ldr	r2, [pc, #48]	; (800b220 <pxPortInitialiseStack+0x64>)
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	3b14      	subs	r3, #20
 800b1f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b1f8:	687a      	ldr	r2, [r7, #4]
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	3b04      	subs	r3, #4
 800b202:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	f06f 0202 	mvn.w	r2, #2
 800b20a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	3b20      	subs	r3, #32
 800b210:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b212:	68fb      	ldr	r3, [r7, #12]
}
 800b214:	4618      	mov	r0, r3
 800b216:	3714      	adds	r7, #20
 800b218:	46bd      	mov	sp, r7
 800b21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21e:	4770      	bx	lr
 800b220:	0800b225 	.word	0x0800b225

0800b224 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b224:	b480      	push	{r7}
 800b226:	b085      	sub	sp, #20
 800b228:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b22a:	2300      	movs	r3, #0
 800b22c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b22e:	4b12      	ldr	r3, [pc, #72]	; (800b278 <prvTaskExitError+0x54>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b236:	d00a      	beq.n	800b24e <prvTaskExitError+0x2a>
	__asm volatile
 800b238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b23c:	f383 8811 	msr	BASEPRI, r3
 800b240:	f3bf 8f6f 	isb	sy
 800b244:	f3bf 8f4f 	dsb	sy
 800b248:	60fb      	str	r3, [r7, #12]
}
 800b24a:	bf00      	nop
 800b24c:	e7fe      	b.n	800b24c <prvTaskExitError+0x28>
	__asm volatile
 800b24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b252:	f383 8811 	msr	BASEPRI, r3
 800b256:	f3bf 8f6f 	isb	sy
 800b25a:	f3bf 8f4f 	dsb	sy
 800b25e:	60bb      	str	r3, [r7, #8]
}
 800b260:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b262:	bf00      	nop
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d0fc      	beq.n	800b264 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b26a:	bf00      	nop
 800b26c:	bf00      	nop
 800b26e:	3714      	adds	r7, #20
 800b270:	46bd      	mov	sp, r7
 800b272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b276:	4770      	bx	lr
 800b278:	20000034 	.word	0x20000034
 800b27c:	00000000 	.word	0x00000000

0800b280 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b280:	4b07      	ldr	r3, [pc, #28]	; (800b2a0 <pxCurrentTCBConst2>)
 800b282:	6819      	ldr	r1, [r3, #0]
 800b284:	6808      	ldr	r0, [r1, #0]
 800b286:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b28a:	f380 8809 	msr	PSP, r0
 800b28e:	f3bf 8f6f 	isb	sy
 800b292:	f04f 0000 	mov.w	r0, #0
 800b296:	f380 8811 	msr	BASEPRI, r0
 800b29a:	4770      	bx	lr
 800b29c:	f3af 8000 	nop.w

0800b2a0 <pxCurrentTCBConst2>:
 800b2a0:	20000dec 	.word	0x20000dec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b2a4:	bf00      	nop
 800b2a6:	bf00      	nop

0800b2a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b2a8:	4808      	ldr	r0, [pc, #32]	; (800b2cc <prvPortStartFirstTask+0x24>)
 800b2aa:	6800      	ldr	r0, [r0, #0]
 800b2ac:	6800      	ldr	r0, [r0, #0]
 800b2ae:	f380 8808 	msr	MSP, r0
 800b2b2:	f04f 0000 	mov.w	r0, #0
 800b2b6:	f380 8814 	msr	CONTROL, r0
 800b2ba:	b662      	cpsie	i
 800b2bc:	b661      	cpsie	f
 800b2be:	f3bf 8f4f 	dsb	sy
 800b2c2:	f3bf 8f6f 	isb	sy
 800b2c6:	df00      	svc	0
 800b2c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b2ca:	bf00      	nop
 800b2cc:	e000ed08 	.word	0xe000ed08

0800b2d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b086      	sub	sp, #24
 800b2d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b2d6:	4b46      	ldr	r3, [pc, #280]	; (800b3f0 <xPortStartScheduler+0x120>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	4a46      	ldr	r2, [pc, #280]	; (800b3f4 <xPortStartScheduler+0x124>)
 800b2dc:	4293      	cmp	r3, r2
 800b2de:	d10a      	bne.n	800b2f6 <xPortStartScheduler+0x26>
	__asm volatile
 800b2e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2e4:	f383 8811 	msr	BASEPRI, r3
 800b2e8:	f3bf 8f6f 	isb	sy
 800b2ec:	f3bf 8f4f 	dsb	sy
 800b2f0:	613b      	str	r3, [r7, #16]
}
 800b2f2:	bf00      	nop
 800b2f4:	e7fe      	b.n	800b2f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b2f6:	4b3e      	ldr	r3, [pc, #248]	; (800b3f0 <xPortStartScheduler+0x120>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	4a3f      	ldr	r2, [pc, #252]	; (800b3f8 <xPortStartScheduler+0x128>)
 800b2fc:	4293      	cmp	r3, r2
 800b2fe:	d10a      	bne.n	800b316 <xPortStartScheduler+0x46>
	__asm volatile
 800b300:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b304:	f383 8811 	msr	BASEPRI, r3
 800b308:	f3bf 8f6f 	isb	sy
 800b30c:	f3bf 8f4f 	dsb	sy
 800b310:	60fb      	str	r3, [r7, #12]
}
 800b312:	bf00      	nop
 800b314:	e7fe      	b.n	800b314 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b316:	4b39      	ldr	r3, [pc, #228]	; (800b3fc <xPortStartScheduler+0x12c>)
 800b318:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b31a:	697b      	ldr	r3, [r7, #20]
 800b31c:	781b      	ldrb	r3, [r3, #0]
 800b31e:	b2db      	uxtb	r3, r3
 800b320:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	22ff      	movs	r2, #255	; 0xff
 800b326:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b328:	697b      	ldr	r3, [r7, #20]
 800b32a:	781b      	ldrb	r3, [r3, #0]
 800b32c:	b2db      	uxtb	r3, r3
 800b32e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b330:	78fb      	ldrb	r3, [r7, #3]
 800b332:	b2db      	uxtb	r3, r3
 800b334:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b338:	b2da      	uxtb	r2, r3
 800b33a:	4b31      	ldr	r3, [pc, #196]	; (800b400 <xPortStartScheduler+0x130>)
 800b33c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b33e:	4b31      	ldr	r3, [pc, #196]	; (800b404 <xPortStartScheduler+0x134>)
 800b340:	2207      	movs	r2, #7
 800b342:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b344:	e009      	b.n	800b35a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b346:	4b2f      	ldr	r3, [pc, #188]	; (800b404 <xPortStartScheduler+0x134>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	3b01      	subs	r3, #1
 800b34c:	4a2d      	ldr	r2, [pc, #180]	; (800b404 <xPortStartScheduler+0x134>)
 800b34e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b350:	78fb      	ldrb	r3, [r7, #3]
 800b352:	b2db      	uxtb	r3, r3
 800b354:	005b      	lsls	r3, r3, #1
 800b356:	b2db      	uxtb	r3, r3
 800b358:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b35a:	78fb      	ldrb	r3, [r7, #3]
 800b35c:	b2db      	uxtb	r3, r3
 800b35e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b362:	2b80      	cmp	r3, #128	; 0x80
 800b364:	d0ef      	beq.n	800b346 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b366:	4b27      	ldr	r3, [pc, #156]	; (800b404 <xPortStartScheduler+0x134>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	f1c3 0307 	rsb	r3, r3, #7
 800b36e:	2b04      	cmp	r3, #4
 800b370:	d00a      	beq.n	800b388 <xPortStartScheduler+0xb8>
	__asm volatile
 800b372:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b376:	f383 8811 	msr	BASEPRI, r3
 800b37a:	f3bf 8f6f 	isb	sy
 800b37e:	f3bf 8f4f 	dsb	sy
 800b382:	60bb      	str	r3, [r7, #8]
}
 800b384:	bf00      	nop
 800b386:	e7fe      	b.n	800b386 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b388:	4b1e      	ldr	r3, [pc, #120]	; (800b404 <xPortStartScheduler+0x134>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	021b      	lsls	r3, r3, #8
 800b38e:	4a1d      	ldr	r2, [pc, #116]	; (800b404 <xPortStartScheduler+0x134>)
 800b390:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b392:	4b1c      	ldr	r3, [pc, #112]	; (800b404 <xPortStartScheduler+0x134>)
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b39a:	4a1a      	ldr	r2, [pc, #104]	; (800b404 <xPortStartScheduler+0x134>)
 800b39c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	b2da      	uxtb	r2, r3
 800b3a2:	697b      	ldr	r3, [r7, #20]
 800b3a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b3a6:	4b18      	ldr	r3, [pc, #96]	; (800b408 <xPortStartScheduler+0x138>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	4a17      	ldr	r2, [pc, #92]	; (800b408 <xPortStartScheduler+0x138>)
 800b3ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b3b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b3b2:	4b15      	ldr	r3, [pc, #84]	; (800b408 <xPortStartScheduler+0x138>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	4a14      	ldr	r2, [pc, #80]	; (800b408 <xPortStartScheduler+0x138>)
 800b3b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b3bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b3be:	f000 f8dd 	bl	800b57c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b3c2:	4b12      	ldr	r3, [pc, #72]	; (800b40c <xPortStartScheduler+0x13c>)
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b3c8:	f000 f8fc 	bl	800b5c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b3cc:	4b10      	ldr	r3, [pc, #64]	; (800b410 <xPortStartScheduler+0x140>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	4a0f      	ldr	r2, [pc, #60]	; (800b410 <xPortStartScheduler+0x140>)
 800b3d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b3d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b3d8:	f7ff ff66 	bl	800b2a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b3dc:	f7fe fe8c 	bl	800a0f8 <vTaskSwitchContext>
	prvTaskExitError();
 800b3e0:	f7ff ff20 	bl	800b224 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b3e4:	2300      	movs	r3, #0
}
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	3718      	adds	r7, #24
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bd80      	pop	{r7, pc}
 800b3ee:	bf00      	nop
 800b3f0:	e000ed00 	.word	0xe000ed00
 800b3f4:	410fc271 	.word	0x410fc271
 800b3f8:	410fc270 	.word	0x410fc270
 800b3fc:	e000e400 	.word	0xe000e400
 800b400:	20001418 	.word	0x20001418
 800b404:	2000141c 	.word	0x2000141c
 800b408:	e000ed20 	.word	0xe000ed20
 800b40c:	20000034 	.word	0x20000034
 800b410:	e000ef34 	.word	0xe000ef34

0800b414 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b414:	b480      	push	{r7}
 800b416:	b083      	sub	sp, #12
 800b418:	af00      	add	r7, sp, #0
	__asm volatile
 800b41a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b41e:	f383 8811 	msr	BASEPRI, r3
 800b422:	f3bf 8f6f 	isb	sy
 800b426:	f3bf 8f4f 	dsb	sy
 800b42a:	607b      	str	r3, [r7, #4]
}
 800b42c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b42e:	4b0f      	ldr	r3, [pc, #60]	; (800b46c <vPortEnterCritical+0x58>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	3301      	adds	r3, #1
 800b434:	4a0d      	ldr	r2, [pc, #52]	; (800b46c <vPortEnterCritical+0x58>)
 800b436:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b438:	4b0c      	ldr	r3, [pc, #48]	; (800b46c <vPortEnterCritical+0x58>)
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	2b01      	cmp	r3, #1
 800b43e:	d10f      	bne.n	800b460 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b440:	4b0b      	ldr	r3, [pc, #44]	; (800b470 <vPortEnterCritical+0x5c>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	b2db      	uxtb	r3, r3
 800b446:	2b00      	cmp	r3, #0
 800b448:	d00a      	beq.n	800b460 <vPortEnterCritical+0x4c>
	__asm volatile
 800b44a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b44e:	f383 8811 	msr	BASEPRI, r3
 800b452:	f3bf 8f6f 	isb	sy
 800b456:	f3bf 8f4f 	dsb	sy
 800b45a:	603b      	str	r3, [r7, #0]
}
 800b45c:	bf00      	nop
 800b45e:	e7fe      	b.n	800b45e <vPortEnterCritical+0x4a>
	}
}
 800b460:	bf00      	nop
 800b462:	370c      	adds	r7, #12
 800b464:	46bd      	mov	sp, r7
 800b466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46a:	4770      	bx	lr
 800b46c:	20000034 	.word	0x20000034
 800b470:	e000ed04 	.word	0xe000ed04

0800b474 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b474:	b480      	push	{r7}
 800b476:	b083      	sub	sp, #12
 800b478:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b47a:	4b12      	ldr	r3, [pc, #72]	; (800b4c4 <vPortExitCritical+0x50>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d10a      	bne.n	800b498 <vPortExitCritical+0x24>
	__asm volatile
 800b482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b486:	f383 8811 	msr	BASEPRI, r3
 800b48a:	f3bf 8f6f 	isb	sy
 800b48e:	f3bf 8f4f 	dsb	sy
 800b492:	607b      	str	r3, [r7, #4]
}
 800b494:	bf00      	nop
 800b496:	e7fe      	b.n	800b496 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b498:	4b0a      	ldr	r3, [pc, #40]	; (800b4c4 <vPortExitCritical+0x50>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	3b01      	subs	r3, #1
 800b49e:	4a09      	ldr	r2, [pc, #36]	; (800b4c4 <vPortExitCritical+0x50>)
 800b4a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b4a2:	4b08      	ldr	r3, [pc, #32]	; (800b4c4 <vPortExitCritical+0x50>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d105      	bne.n	800b4b6 <vPortExitCritical+0x42>
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	f383 8811 	msr	BASEPRI, r3
}
 800b4b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b4b6:	bf00      	nop
 800b4b8:	370c      	adds	r7, #12
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c0:	4770      	bx	lr
 800b4c2:	bf00      	nop
 800b4c4:	20000034 	.word	0x20000034
	...

0800b4d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b4d0:	f3ef 8009 	mrs	r0, PSP
 800b4d4:	f3bf 8f6f 	isb	sy
 800b4d8:	4b15      	ldr	r3, [pc, #84]	; (800b530 <pxCurrentTCBConst>)
 800b4da:	681a      	ldr	r2, [r3, #0]
 800b4dc:	f01e 0f10 	tst.w	lr, #16
 800b4e0:	bf08      	it	eq
 800b4e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b4e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4ea:	6010      	str	r0, [r2, #0]
 800b4ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b4f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b4f4:	f380 8811 	msr	BASEPRI, r0
 800b4f8:	f3bf 8f4f 	dsb	sy
 800b4fc:	f3bf 8f6f 	isb	sy
 800b500:	f7fe fdfa 	bl	800a0f8 <vTaskSwitchContext>
 800b504:	f04f 0000 	mov.w	r0, #0
 800b508:	f380 8811 	msr	BASEPRI, r0
 800b50c:	bc09      	pop	{r0, r3}
 800b50e:	6819      	ldr	r1, [r3, #0]
 800b510:	6808      	ldr	r0, [r1, #0]
 800b512:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b516:	f01e 0f10 	tst.w	lr, #16
 800b51a:	bf08      	it	eq
 800b51c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b520:	f380 8809 	msr	PSP, r0
 800b524:	f3bf 8f6f 	isb	sy
 800b528:	4770      	bx	lr
 800b52a:	bf00      	nop
 800b52c:	f3af 8000 	nop.w

0800b530 <pxCurrentTCBConst>:
 800b530:	20000dec 	.word	0x20000dec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b534:	bf00      	nop
 800b536:	bf00      	nop

0800b538 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b082      	sub	sp, #8
 800b53c:	af00      	add	r7, sp, #0
	__asm volatile
 800b53e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b542:	f383 8811 	msr	BASEPRI, r3
 800b546:	f3bf 8f6f 	isb	sy
 800b54a:	f3bf 8f4f 	dsb	sy
 800b54e:	607b      	str	r3, [r7, #4]
}
 800b550:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b552:	f7fe fd17 	bl	8009f84 <xTaskIncrementTick>
 800b556:	4603      	mov	r3, r0
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d003      	beq.n	800b564 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b55c:	4b06      	ldr	r3, [pc, #24]	; (800b578 <xPortSysTickHandler+0x40>)
 800b55e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b562:	601a      	str	r2, [r3, #0]
 800b564:	2300      	movs	r3, #0
 800b566:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	f383 8811 	msr	BASEPRI, r3
}
 800b56e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b570:	bf00      	nop
 800b572:	3708      	adds	r7, #8
 800b574:	46bd      	mov	sp, r7
 800b576:	bd80      	pop	{r7, pc}
 800b578:	e000ed04 	.word	0xe000ed04

0800b57c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b57c:	b480      	push	{r7}
 800b57e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b580:	4b0b      	ldr	r3, [pc, #44]	; (800b5b0 <vPortSetupTimerInterrupt+0x34>)
 800b582:	2200      	movs	r2, #0
 800b584:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b586:	4b0b      	ldr	r3, [pc, #44]	; (800b5b4 <vPortSetupTimerInterrupt+0x38>)
 800b588:	2200      	movs	r2, #0
 800b58a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b58c:	4b0a      	ldr	r3, [pc, #40]	; (800b5b8 <vPortSetupTimerInterrupt+0x3c>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	4a0a      	ldr	r2, [pc, #40]	; (800b5bc <vPortSetupTimerInterrupt+0x40>)
 800b592:	fba2 2303 	umull	r2, r3, r2, r3
 800b596:	099b      	lsrs	r3, r3, #6
 800b598:	4a09      	ldr	r2, [pc, #36]	; (800b5c0 <vPortSetupTimerInterrupt+0x44>)
 800b59a:	3b01      	subs	r3, #1
 800b59c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b59e:	4b04      	ldr	r3, [pc, #16]	; (800b5b0 <vPortSetupTimerInterrupt+0x34>)
 800b5a0:	2207      	movs	r2, #7
 800b5a2:	601a      	str	r2, [r3, #0]
}
 800b5a4:	bf00      	nop
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ac:	4770      	bx	lr
 800b5ae:	bf00      	nop
 800b5b0:	e000e010 	.word	0xe000e010
 800b5b4:	e000e018 	.word	0xe000e018
 800b5b8:	20000028 	.word	0x20000028
 800b5bc:	10624dd3 	.word	0x10624dd3
 800b5c0:	e000e014 	.word	0xe000e014

0800b5c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b5c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b5d4 <vPortEnableVFP+0x10>
 800b5c8:	6801      	ldr	r1, [r0, #0]
 800b5ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b5ce:	6001      	str	r1, [r0, #0]
 800b5d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b5d2:	bf00      	nop
 800b5d4:	e000ed88 	.word	0xe000ed88

0800b5d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b5d8:	b480      	push	{r7}
 800b5da:	b085      	sub	sp, #20
 800b5dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b5de:	f3ef 8305 	mrs	r3, IPSR
 800b5e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	2b0f      	cmp	r3, #15
 800b5e8:	d914      	bls.n	800b614 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b5ea:	4a17      	ldr	r2, [pc, #92]	; (800b648 <vPortValidateInterruptPriority+0x70>)
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	4413      	add	r3, r2
 800b5f0:	781b      	ldrb	r3, [r3, #0]
 800b5f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b5f4:	4b15      	ldr	r3, [pc, #84]	; (800b64c <vPortValidateInterruptPriority+0x74>)
 800b5f6:	781b      	ldrb	r3, [r3, #0]
 800b5f8:	7afa      	ldrb	r2, [r7, #11]
 800b5fa:	429a      	cmp	r2, r3
 800b5fc:	d20a      	bcs.n	800b614 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b602:	f383 8811 	msr	BASEPRI, r3
 800b606:	f3bf 8f6f 	isb	sy
 800b60a:	f3bf 8f4f 	dsb	sy
 800b60e:	607b      	str	r3, [r7, #4]
}
 800b610:	bf00      	nop
 800b612:	e7fe      	b.n	800b612 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b614:	4b0e      	ldr	r3, [pc, #56]	; (800b650 <vPortValidateInterruptPriority+0x78>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b61c:	4b0d      	ldr	r3, [pc, #52]	; (800b654 <vPortValidateInterruptPriority+0x7c>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	429a      	cmp	r2, r3
 800b622:	d90a      	bls.n	800b63a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b628:	f383 8811 	msr	BASEPRI, r3
 800b62c:	f3bf 8f6f 	isb	sy
 800b630:	f3bf 8f4f 	dsb	sy
 800b634:	603b      	str	r3, [r7, #0]
}
 800b636:	bf00      	nop
 800b638:	e7fe      	b.n	800b638 <vPortValidateInterruptPriority+0x60>
	}
 800b63a:	bf00      	nop
 800b63c:	3714      	adds	r7, #20
 800b63e:	46bd      	mov	sp, r7
 800b640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b644:	4770      	bx	lr
 800b646:	bf00      	nop
 800b648:	e000e3f0 	.word	0xe000e3f0
 800b64c:	20001418 	.word	0x20001418
 800b650:	e000ed0c 	.word	0xe000ed0c
 800b654:	2000141c 	.word	0x2000141c

0800b658 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b08a      	sub	sp, #40	; 0x28
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b660:	2300      	movs	r3, #0
 800b662:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b664:	f7fe fbd2 	bl	8009e0c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b668:	4b5b      	ldr	r3, [pc, #364]	; (800b7d8 <pvPortMalloc+0x180>)
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d101      	bne.n	800b674 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b670:	f000 f920 	bl	800b8b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b674:	4b59      	ldr	r3, [pc, #356]	; (800b7dc <pvPortMalloc+0x184>)
 800b676:	681a      	ldr	r2, [r3, #0]
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	4013      	ands	r3, r2
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	f040 8093 	bne.w	800b7a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d01d      	beq.n	800b6c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b688:	2208      	movs	r2, #8
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	4413      	add	r3, r2
 800b68e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f003 0307 	and.w	r3, r3, #7
 800b696:	2b00      	cmp	r3, #0
 800b698:	d014      	beq.n	800b6c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	f023 0307 	bic.w	r3, r3, #7
 800b6a0:	3308      	adds	r3, #8
 800b6a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	f003 0307 	and.w	r3, r3, #7
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d00a      	beq.n	800b6c4 <pvPortMalloc+0x6c>
	__asm volatile
 800b6ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6b2:	f383 8811 	msr	BASEPRI, r3
 800b6b6:	f3bf 8f6f 	isb	sy
 800b6ba:	f3bf 8f4f 	dsb	sy
 800b6be:	617b      	str	r3, [r7, #20]
}
 800b6c0:	bf00      	nop
 800b6c2:	e7fe      	b.n	800b6c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d06e      	beq.n	800b7a8 <pvPortMalloc+0x150>
 800b6ca:	4b45      	ldr	r3, [pc, #276]	; (800b7e0 <pvPortMalloc+0x188>)
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	687a      	ldr	r2, [r7, #4]
 800b6d0:	429a      	cmp	r2, r3
 800b6d2:	d869      	bhi.n	800b7a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b6d4:	4b43      	ldr	r3, [pc, #268]	; (800b7e4 <pvPortMalloc+0x18c>)
 800b6d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b6d8:	4b42      	ldr	r3, [pc, #264]	; (800b7e4 <pvPortMalloc+0x18c>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b6de:	e004      	b.n	800b6ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ec:	685b      	ldr	r3, [r3, #4]
 800b6ee:	687a      	ldr	r2, [r7, #4]
 800b6f0:	429a      	cmp	r2, r3
 800b6f2:	d903      	bls.n	800b6fc <pvPortMalloc+0xa4>
 800b6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d1f1      	bne.n	800b6e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b6fc:	4b36      	ldr	r3, [pc, #216]	; (800b7d8 <pvPortMalloc+0x180>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b702:	429a      	cmp	r2, r3
 800b704:	d050      	beq.n	800b7a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b706:	6a3b      	ldr	r3, [r7, #32]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	2208      	movs	r2, #8
 800b70c:	4413      	add	r3, r2
 800b70e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b712:	681a      	ldr	r2, [r3, #0]
 800b714:	6a3b      	ldr	r3, [r7, #32]
 800b716:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b71a:	685a      	ldr	r2, [r3, #4]
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	1ad2      	subs	r2, r2, r3
 800b720:	2308      	movs	r3, #8
 800b722:	005b      	lsls	r3, r3, #1
 800b724:	429a      	cmp	r2, r3
 800b726:	d91f      	bls.n	800b768 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	4413      	add	r3, r2
 800b72e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b730:	69bb      	ldr	r3, [r7, #24]
 800b732:	f003 0307 	and.w	r3, r3, #7
 800b736:	2b00      	cmp	r3, #0
 800b738:	d00a      	beq.n	800b750 <pvPortMalloc+0xf8>
	__asm volatile
 800b73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b73e:	f383 8811 	msr	BASEPRI, r3
 800b742:	f3bf 8f6f 	isb	sy
 800b746:	f3bf 8f4f 	dsb	sy
 800b74a:	613b      	str	r3, [r7, #16]
}
 800b74c:	bf00      	nop
 800b74e:	e7fe      	b.n	800b74e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b752:	685a      	ldr	r2, [r3, #4]
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	1ad2      	subs	r2, r2, r3
 800b758:	69bb      	ldr	r3, [r7, #24]
 800b75a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b75e:	687a      	ldr	r2, [r7, #4]
 800b760:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b762:	69b8      	ldr	r0, [r7, #24]
 800b764:	f000 f908 	bl	800b978 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b768:	4b1d      	ldr	r3, [pc, #116]	; (800b7e0 <pvPortMalloc+0x188>)
 800b76a:	681a      	ldr	r2, [r3, #0]
 800b76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b76e:	685b      	ldr	r3, [r3, #4]
 800b770:	1ad3      	subs	r3, r2, r3
 800b772:	4a1b      	ldr	r2, [pc, #108]	; (800b7e0 <pvPortMalloc+0x188>)
 800b774:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b776:	4b1a      	ldr	r3, [pc, #104]	; (800b7e0 <pvPortMalloc+0x188>)
 800b778:	681a      	ldr	r2, [r3, #0]
 800b77a:	4b1b      	ldr	r3, [pc, #108]	; (800b7e8 <pvPortMalloc+0x190>)
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	429a      	cmp	r2, r3
 800b780:	d203      	bcs.n	800b78a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b782:	4b17      	ldr	r3, [pc, #92]	; (800b7e0 <pvPortMalloc+0x188>)
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	4a18      	ldr	r2, [pc, #96]	; (800b7e8 <pvPortMalloc+0x190>)
 800b788:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b78c:	685a      	ldr	r2, [r3, #4]
 800b78e:	4b13      	ldr	r3, [pc, #76]	; (800b7dc <pvPortMalloc+0x184>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	431a      	orrs	r2, r3
 800b794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b796:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b79a:	2200      	movs	r2, #0
 800b79c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b79e:	4b13      	ldr	r3, [pc, #76]	; (800b7ec <pvPortMalloc+0x194>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	3301      	adds	r3, #1
 800b7a4:	4a11      	ldr	r2, [pc, #68]	; (800b7ec <pvPortMalloc+0x194>)
 800b7a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b7a8:	f7fe fb3e 	bl	8009e28 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b7ac:	69fb      	ldr	r3, [r7, #28]
 800b7ae:	f003 0307 	and.w	r3, r3, #7
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d00a      	beq.n	800b7cc <pvPortMalloc+0x174>
	__asm volatile
 800b7b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ba:	f383 8811 	msr	BASEPRI, r3
 800b7be:	f3bf 8f6f 	isb	sy
 800b7c2:	f3bf 8f4f 	dsb	sy
 800b7c6:	60fb      	str	r3, [r7, #12]
}
 800b7c8:	bf00      	nop
 800b7ca:	e7fe      	b.n	800b7ca <pvPortMalloc+0x172>
	return pvReturn;
 800b7cc:	69fb      	ldr	r3, [r7, #28]
}
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	3728      	adds	r7, #40	; 0x28
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}
 800b7d6:	bf00      	nop
 800b7d8:	20005028 	.word	0x20005028
 800b7dc:	2000503c 	.word	0x2000503c
 800b7e0:	2000502c 	.word	0x2000502c
 800b7e4:	20005020 	.word	0x20005020
 800b7e8:	20005030 	.word	0x20005030
 800b7ec:	20005034 	.word	0x20005034

0800b7f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b086      	sub	sp, #24
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d04d      	beq.n	800b89e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b802:	2308      	movs	r3, #8
 800b804:	425b      	negs	r3, r3
 800b806:	697a      	ldr	r2, [r7, #20]
 800b808:	4413      	add	r3, r2
 800b80a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b80c:	697b      	ldr	r3, [r7, #20]
 800b80e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b810:	693b      	ldr	r3, [r7, #16]
 800b812:	685a      	ldr	r2, [r3, #4]
 800b814:	4b24      	ldr	r3, [pc, #144]	; (800b8a8 <vPortFree+0xb8>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	4013      	ands	r3, r2
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d10a      	bne.n	800b834 <vPortFree+0x44>
	__asm volatile
 800b81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b822:	f383 8811 	msr	BASEPRI, r3
 800b826:	f3bf 8f6f 	isb	sy
 800b82a:	f3bf 8f4f 	dsb	sy
 800b82e:	60fb      	str	r3, [r7, #12]
}
 800b830:	bf00      	nop
 800b832:	e7fe      	b.n	800b832 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b834:	693b      	ldr	r3, [r7, #16]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d00a      	beq.n	800b852 <vPortFree+0x62>
	__asm volatile
 800b83c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b840:	f383 8811 	msr	BASEPRI, r3
 800b844:	f3bf 8f6f 	isb	sy
 800b848:	f3bf 8f4f 	dsb	sy
 800b84c:	60bb      	str	r3, [r7, #8]
}
 800b84e:	bf00      	nop
 800b850:	e7fe      	b.n	800b850 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b852:	693b      	ldr	r3, [r7, #16]
 800b854:	685a      	ldr	r2, [r3, #4]
 800b856:	4b14      	ldr	r3, [pc, #80]	; (800b8a8 <vPortFree+0xb8>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	4013      	ands	r3, r2
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d01e      	beq.n	800b89e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b860:	693b      	ldr	r3, [r7, #16]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d11a      	bne.n	800b89e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b868:	693b      	ldr	r3, [r7, #16]
 800b86a:	685a      	ldr	r2, [r3, #4]
 800b86c:	4b0e      	ldr	r3, [pc, #56]	; (800b8a8 <vPortFree+0xb8>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	43db      	mvns	r3, r3
 800b872:	401a      	ands	r2, r3
 800b874:	693b      	ldr	r3, [r7, #16]
 800b876:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b878:	f7fe fac8 	bl	8009e0c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b87c:	693b      	ldr	r3, [r7, #16]
 800b87e:	685a      	ldr	r2, [r3, #4]
 800b880:	4b0a      	ldr	r3, [pc, #40]	; (800b8ac <vPortFree+0xbc>)
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	4413      	add	r3, r2
 800b886:	4a09      	ldr	r2, [pc, #36]	; (800b8ac <vPortFree+0xbc>)
 800b888:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b88a:	6938      	ldr	r0, [r7, #16]
 800b88c:	f000 f874 	bl	800b978 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b890:	4b07      	ldr	r3, [pc, #28]	; (800b8b0 <vPortFree+0xc0>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	3301      	adds	r3, #1
 800b896:	4a06      	ldr	r2, [pc, #24]	; (800b8b0 <vPortFree+0xc0>)
 800b898:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b89a:	f7fe fac5 	bl	8009e28 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b89e:	bf00      	nop
 800b8a0:	3718      	adds	r7, #24
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}
 800b8a6:	bf00      	nop
 800b8a8:	2000503c 	.word	0x2000503c
 800b8ac:	2000502c 	.word	0x2000502c
 800b8b0:	20005038 	.word	0x20005038

0800b8b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b8b4:	b480      	push	{r7}
 800b8b6:	b085      	sub	sp, #20
 800b8b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b8ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b8be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b8c0:	4b27      	ldr	r3, [pc, #156]	; (800b960 <prvHeapInit+0xac>)
 800b8c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	f003 0307 	and.w	r3, r3, #7
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d00c      	beq.n	800b8e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	3307      	adds	r3, #7
 800b8d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	f023 0307 	bic.w	r3, r3, #7
 800b8da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b8dc:	68ba      	ldr	r2, [r7, #8]
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	1ad3      	subs	r3, r2, r3
 800b8e2:	4a1f      	ldr	r2, [pc, #124]	; (800b960 <prvHeapInit+0xac>)
 800b8e4:	4413      	add	r3, r2
 800b8e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b8ec:	4a1d      	ldr	r2, [pc, #116]	; (800b964 <prvHeapInit+0xb0>)
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b8f2:	4b1c      	ldr	r3, [pc, #112]	; (800b964 <prvHeapInit+0xb0>)
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	68ba      	ldr	r2, [r7, #8]
 800b8fc:	4413      	add	r3, r2
 800b8fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b900:	2208      	movs	r2, #8
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	1a9b      	subs	r3, r3, r2
 800b906:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	f023 0307 	bic.w	r3, r3, #7
 800b90e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	4a15      	ldr	r2, [pc, #84]	; (800b968 <prvHeapInit+0xb4>)
 800b914:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b916:	4b14      	ldr	r3, [pc, #80]	; (800b968 <prvHeapInit+0xb4>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	2200      	movs	r2, #0
 800b91c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b91e:	4b12      	ldr	r3, [pc, #72]	; (800b968 <prvHeapInit+0xb4>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	2200      	movs	r2, #0
 800b924:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	68fa      	ldr	r2, [r7, #12]
 800b92e:	1ad2      	subs	r2, r2, r3
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b934:	4b0c      	ldr	r3, [pc, #48]	; (800b968 <prvHeapInit+0xb4>)
 800b936:	681a      	ldr	r2, [r3, #0]
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	685b      	ldr	r3, [r3, #4]
 800b940:	4a0a      	ldr	r2, [pc, #40]	; (800b96c <prvHeapInit+0xb8>)
 800b942:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	685b      	ldr	r3, [r3, #4]
 800b948:	4a09      	ldr	r2, [pc, #36]	; (800b970 <prvHeapInit+0xbc>)
 800b94a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b94c:	4b09      	ldr	r3, [pc, #36]	; (800b974 <prvHeapInit+0xc0>)
 800b94e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b952:	601a      	str	r2, [r3, #0]
}
 800b954:	bf00      	nop
 800b956:	3714      	adds	r7, #20
 800b958:	46bd      	mov	sp, r7
 800b95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95e:	4770      	bx	lr
 800b960:	20001420 	.word	0x20001420
 800b964:	20005020 	.word	0x20005020
 800b968:	20005028 	.word	0x20005028
 800b96c:	20005030 	.word	0x20005030
 800b970:	2000502c 	.word	0x2000502c
 800b974:	2000503c 	.word	0x2000503c

0800b978 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b978:	b480      	push	{r7}
 800b97a:	b085      	sub	sp, #20
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b980:	4b28      	ldr	r3, [pc, #160]	; (800ba24 <prvInsertBlockIntoFreeList+0xac>)
 800b982:	60fb      	str	r3, [r7, #12]
 800b984:	e002      	b.n	800b98c <prvInsertBlockIntoFreeList+0x14>
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	60fb      	str	r3, [r7, #12]
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	687a      	ldr	r2, [r7, #4]
 800b992:	429a      	cmp	r2, r3
 800b994:	d8f7      	bhi.n	800b986 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	685b      	ldr	r3, [r3, #4]
 800b99e:	68ba      	ldr	r2, [r7, #8]
 800b9a0:	4413      	add	r3, r2
 800b9a2:	687a      	ldr	r2, [r7, #4]
 800b9a4:	429a      	cmp	r2, r3
 800b9a6:	d108      	bne.n	800b9ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	685a      	ldr	r2, [r3, #4]
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	685b      	ldr	r3, [r3, #4]
 800b9b0:	441a      	add	r2, r3
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	685b      	ldr	r3, [r3, #4]
 800b9c2:	68ba      	ldr	r2, [r7, #8]
 800b9c4:	441a      	add	r2, r3
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	429a      	cmp	r2, r3
 800b9cc:	d118      	bne.n	800ba00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	681a      	ldr	r2, [r3, #0]
 800b9d2:	4b15      	ldr	r3, [pc, #84]	; (800ba28 <prvInsertBlockIntoFreeList+0xb0>)
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	429a      	cmp	r2, r3
 800b9d8:	d00d      	beq.n	800b9f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	685a      	ldr	r2, [r3, #4]
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	685b      	ldr	r3, [r3, #4]
 800b9e4:	441a      	add	r2, r3
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	681a      	ldr	r2, [r3, #0]
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	601a      	str	r2, [r3, #0]
 800b9f4:	e008      	b.n	800ba08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b9f6:	4b0c      	ldr	r3, [pc, #48]	; (800ba28 <prvInsertBlockIntoFreeList+0xb0>)
 800b9f8:	681a      	ldr	r2, [r3, #0]
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	601a      	str	r2, [r3, #0]
 800b9fe:	e003      	b.n	800ba08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	681a      	ldr	r2, [r3, #0]
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ba08:	68fa      	ldr	r2, [r7, #12]
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	429a      	cmp	r2, r3
 800ba0e:	d002      	beq.n	800ba16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	687a      	ldr	r2, [r7, #4]
 800ba14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ba16:	bf00      	nop
 800ba18:	3714      	adds	r7, #20
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba20:	4770      	bx	lr
 800ba22:	bf00      	nop
 800ba24:	20005020 	.word	0x20005020
 800ba28:	20005028 	.word	0x20005028

0800ba2c <__errno>:
 800ba2c:	4b01      	ldr	r3, [pc, #4]	; (800ba34 <__errno+0x8>)
 800ba2e:	6818      	ldr	r0, [r3, #0]
 800ba30:	4770      	bx	lr
 800ba32:	bf00      	nop
 800ba34:	20000038 	.word	0x20000038

0800ba38 <__libc_init_array>:
 800ba38:	b570      	push	{r4, r5, r6, lr}
 800ba3a:	4d0d      	ldr	r5, [pc, #52]	; (800ba70 <__libc_init_array+0x38>)
 800ba3c:	4c0d      	ldr	r4, [pc, #52]	; (800ba74 <__libc_init_array+0x3c>)
 800ba3e:	1b64      	subs	r4, r4, r5
 800ba40:	10a4      	asrs	r4, r4, #2
 800ba42:	2600      	movs	r6, #0
 800ba44:	42a6      	cmp	r6, r4
 800ba46:	d109      	bne.n	800ba5c <__libc_init_array+0x24>
 800ba48:	4d0b      	ldr	r5, [pc, #44]	; (800ba78 <__libc_init_array+0x40>)
 800ba4a:	4c0c      	ldr	r4, [pc, #48]	; (800ba7c <__libc_init_array+0x44>)
 800ba4c:	f001 f97e 	bl	800cd4c <_init>
 800ba50:	1b64      	subs	r4, r4, r5
 800ba52:	10a4      	asrs	r4, r4, #2
 800ba54:	2600      	movs	r6, #0
 800ba56:	42a6      	cmp	r6, r4
 800ba58:	d105      	bne.n	800ba66 <__libc_init_array+0x2e>
 800ba5a:	bd70      	pop	{r4, r5, r6, pc}
 800ba5c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba60:	4798      	blx	r3
 800ba62:	3601      	adds	r6, #1
 800ba64:	e7ee      	b.n	800ba44 <__libc_init_array+0xc>
 800ba66:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba6a:	4798      	blx	r3
 800ba6c:	3601      	adds	r6, #1
 800ba6e:	e7f2      	b.n	800ba56 <__libc_init_array+0x1e>
 800ba70:	0800d938 	.word	0x0800d938
 800ba74:	0800d938 	.word	0x0800d938
 800ba78:	0800d938 	.word	0x0800d938
 800ba7c:	0800d93c 	.word	0x0800d93c

0800ba80 <memcpy>:
 800ba80:	440a      	add	r2, r1
 800ba82:	4291      	cmp	r1, r2
 800ba84:	f100 33ff 	add.w	r3, r0, #4294967295
 800ba88:	d100      	bne.n	800ba8c <memcpy+0xc>
 800ba8a:	4770      	bx	lr
 800ba8c:	b510      	push	{r4, lr}
 800ba8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba92:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba96:	4291      	cmp	r1, r2
 800ba98:	d1f9      	bne.n	800ba8e <memcpy+0xe>
 800ba9a:	bd10      	pop	{r4, pc}

0800ba9c <memset>:
 800ba9c:	4402      	add	r2, r0
 800ba9e:	4603      	mov	r3, r0
 800baa0:	4293      	cmp	r3, r2
 800baa2:	d100      	bne.n	800baa6 <memset+0xa>
 800baa4:	4770      	bx	lr
 800baa6:	f803 1b01 	strb.w	r1, [r3], #1
 800baaa:	e7f9      	b.n	800baa0 <memset+0x4>

0800baac <sniprintf>:
 800baac:	b40c      	push	{r2, r3}
 800baae:	b530      	push	{r4, r5, lr}
 800bab0:	4b17      	ldr	r3, [pc, #92]	; (800bb10 <sniprintf+0x64>)
 800bab2:	1e0c      	subs	r4, r1, #0
 800bab4:	681d      	ldr	r5, [r3, #0]
 800bab6:	b09d      	sub	sp, #116	; 0x74
 800bab8:	da08      	bge.n	800bacc <sniprintf+0x20>
 800baba:	238b      	movs	r3, #139	; 0x8b
 800babc:	602b      	str	r3, [r5, #0]
 800babe:	f04f 30ff 	mov.w	r0, #4294967295
 800bac2:	b01d      	add	sp, #116	; 0x74
 800bac4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bac8:	b002      	add	sp, #8
 800baca:	4770      	bx	lr
 800bacc:	f44f 7302 	mov.w	r3, #520	; 0x208
 800bad0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bad4:	bf14      	ite	ne
 800bad6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bada:	4623      	moveq	r3, r4
 800badc:	9304      	str	r3, [sp, #16]
 800bade:	9307      	str	r3, [sp, #28]
 800bae0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bae4:	9002      	str	r0, [sp, #8]
 800bae6:	9006      	str	r0, [sp, #24]
 800bae8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800baec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800baee:	ab21      	add	r3, sp, #132	; 0x84
 800baf0:	a902      	add	r1, sp, #8
 800baf2:	4628      	mov	r0, r5
 800baf4:	9301      	str	r3, [sp, #4]
 800baf6:	f000 f8b7 	bl	800bc68 <_svfiprintf_r>
 800bafa:	1c43      	adds	r3, r0, #1
 800bafc:	bfbc      	itt	lt
 800bafe:	238b      	movlt	r3, #139	; 0x8b
 800bb00:	602b      	strlt	r3, [r5, #0]
 800bb02:	2c00      	cmp	r4, #0
 800bb04:	d0dd      	beq.n	800bac2 <sniprintf+0x16>
 800bb06:	9b02      	ldr	r3, [sp, #8]
 800bb08:	2200      	movs	r2, #0
 800bb0a:	701a      	strb	r2, [r3, #0]
 800bb0c:	e7d9      	b.n	800bac2 <sniprintf+0x16>
 800bb0e:	bf00      	nop
 800bb10:	20000038 	.word	0x20000038

0800bb14 <siprintf>:
 800bb14:	b40e      	push	{r1, r2, r3}
 800bb16:	b500      	push	{lr}
 800bb18:	b09c      	sub	sp, #112	; 0x70
 800bb1a:	ab1d      	add	r3, sp, #116	; 0x74
 800bb1c:	9002      	str	r0, [sp, #8]
 800bb1e:	9006      	str	r0, [sp, #24]
 800bb20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bb24:	4809      	ldr	r0, [pc, #36]	; (800bb4c <siprintf+0x38>)
 800bb26:	9107      	str	r1, [sp, #28]
 800bb28:	9104      	str	r1, [sp, #16]
 800bb2a:	4909      	ldr	r1, [pc, #36]	; (800bb50 <siprintf+0x3c>)
 800bb2c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb30:	9105      	str	r1, [sp, #20]
 800bb32:	6800      	ldr	r0, [r0, #0]
 800bb34:	9301      	str	r3, [sp, #4]
 800bb36:	a902      	add	r1, sp, #8
 800bb38:	f000 f896 	bl	800bc68 <_svfiprintf_r>
 800bb3c:	9b02      	ldr	r3, [sp, #8]
 800bb3e:	2200      	movs	r2, #0
 800bb40:	701a      	strb	r2, [r3, #0]
 800bb42:	b01c      	add	sp, #112	; 0x70
 800bb44:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb48:	b003      	add	sp, #12
 800bb4a:	4770      	bx	lr
 800bb4c:	20000038 	.word	0x20000038
 800bb50:	ffff0208 	.word	0xffff0208

0800bb54 <siscanf>:
 800bb54:	b40e      	push	{r1, r2, r3}
 800bb56:	b510      	push	{r4, lr}
 800bb58:	b09f      	sub	sp, #124	; 0x7c
 800bb5a:	ac21      	add	r4, sp, #132	; 0x84
 800bb5c:	f44f 7101 	mov.w	r1, #516	; 0x204
 800bb60:	f854 2b04 	ldr.w	r2, [r4], #4
 800bb64:	9201      	str	r2, [sp, #4]
 800bb66:	f8ad 101c 	strh.w	r1, [sp, #28]
 800bb6a:	9004      	str	r0, [sp, #16]
 800bb6c:	9008      	str	r0, [sp, #32]
 800bb6e:	f7f4 fb4f 	bl	8000210 <strlen>
 800bb72:	4b0c      	ldr	r3, [pc, #48]	; (800bba4 <siscanf+0x50>)
 800bb74:	9005      	str	r0, [sp, #20]
 800bb76:	9009      	str	r0, [sp, #36]	; 0x24
 800bb78:	930d      	str	r3, [sp, #52]	; 0x34
 800bb7a:	480b      	ldr	r0, [pc, #44]	; (800bba8 <siscanf+0x54>)
 800bb7c:	9a01      	ldr	r2, [sp, #4]
 800bb7e:	6800      	ldr	r0, [r0, #0]
 800bb80:	9403      	str	r4, [sp, #12]
 800bb82:	2300      	movs	r3, #0
 800bb84:	9311      	str	r3, [sp, #68]	; 0x44
 800bb86:	9316      	str	r3, [sp, #88]	; 0x58
 800bb88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bb8c:	f8ad 301e 	strh.w	r3, [sp, #30]
 800bb90:	a904      	add	r1, sp, #16
 800bb92:	4623      	mov	r3, r4
 800bb94:	f000 f9c2 	bl	800bf1c <__ssvfiscanf_r>
 800bb98:	b01f      	add	sp, #124	; 0x7c
 800bb9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb9e:	b003      	add	sp, #12
 800bba0:	4770      	bx	lr
 800bba2:	bf00      	nop
 800bba4:	0800bbad 	.word	0x0800bbad
 800bba8:	20000038 	.word	0x20000038

0800bbac <__seofread>:
 800bbac:	2000      	movs	r0, #0
 800bbae:	4770      	bx	lr

0800bbb0 <__ssputs_r>:
 800bbb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbb4:	688e      	ldr	r6, [r1, #8]
 800bbb6:	429e      	cmp	r6, r3
 800bbb8:	4682      	mov	sl, r0
 800bbba:	460c      	mov	r4, r1
 800bbbc:	4690      	mov	r8, r2
 800bbbe:	461f      	mov	r7, r3
 800bbc0:	d838      	bhi.n	800bc34 <__ssputs_r+0x84>
 800bbc2:	898a      	ldrh	r2, [r1, #12]
 800bbc4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bbc8:	d032      	beq.n	800bc30 <__ssputs_r+0x80>
 800bbca:	6825      	ldr	r5, [r4, #0]
 800bbcc:	6909      	ldr	r1, [r1, #16]
 800bbce:	eba5 0901 	sub.w	r9, r5, r1
 800bbd2:	6965      	ldr	r5, [r4, #20]
 800bbd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bbd8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bbdc:	3301      	adds	r3, #1
 800bbde:	444b      	add	r3, r9
 800bbe0:	106d      	asrs	r5, r5, #1
 800bbe2:	429d      	cmp	r5, r3
 800bbe4:	bf38      	it	cc
 800bbe6:	461d      	movcc	r5, r3
 800bbe8:	0553      	lsls	r3, r2, #21
 800bbea:	d531      	bpl.n	800bc50 <__ssputs_r+0xa0>
 800bbec:	4629      	mov	r1, r5
 800bbee:	f000 ffe5 	bl	800cbbc <_malloc_r>
 800bbf2:	4606      	mov	r6, r0
 800bbf4:	b950      	cbnz	r0, 800bc0c <__ssputs_r+0x5c>
 800bbf6:	230c      	movs	r3, #12
 800bbf8:	f8ca 3000 	str.w	r3, [sl]
 800bbfc:	89a3      	ldrh	r3, [r4, #12]
 800bbfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc02:	81a3      	strh	r3, [r4, #12]
 800bc04:	f04f 30ff 	mov.w	r0, #4294967295
 800bc08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc0c:	6921      	ldr	r1, [r4, #16]
 800bc0e:	464a      	mov	r2, r9
 800bc10:	f7ff ff36 	bl	800ba80 <memcpy>
 800bc14:	89a3      	ldrh	r3, [r4, #12]
 800bc16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bc1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc1e:	81a3      	strh	r3, [r4, #12]
 800bc20:	6126      	str	r6, [r4, #16]
 800bc22:	6165      	str	r5, [r4, #20]
 800bc24:	444e      	add	r6, r9
 800bc26:	eba5 0509 	sub.w	r5, r5, r9
 800bc2a:	6026      	str	r6, [r4, #0]
 800bc2c:	60a5      	str	r5, [r4, #8]
 800bc2e:	463e      	mov	r6, r7
 800bc30:	42be      	cmp	r6, r7
 800bc32:	d900      	bls.n	800bc36 <__ssputs_r+0x86>
 800bc34:	463e      	mov	r6, r7
 800bc36:	6820      	ldr	r0, [r4, #0]
 800bc38:	4632      	mov	r2, r6
 800bc3a:	4641      	mov	r1, r8
 800bc3c:	f000 ff38 	bl	800cab0 <memmove>
 800bc40:	68a3      	ldr	r3, [r4, #8]
 800bc42:	1b9b      	subs	r3, r3, r6
 800bc44:	60a3      	str	r3, [r4, #8]
 800bc46:	6823      	ldr	r3, [r4, #0]
 800bc48:	4433      	add	r3, r6
 800bc4a:	6023      	str	r3, [r4, #0]
 800bc4c:	2000      	movs	r0, #0
 800bc4e:	e7db      	b.n	800bc08 <__ssputs_r+0x58>
 800bc50:	462a      	mov	r2, r5
 800bc52:	f001 f827 	bl	800cca4 <_realloc_r>
 800bc56:	4606      	mov	r6, r0
 800bc58:	2800      	cmp	r0, #0
 800bc5a:	d1e1      	bne.n	800bc20 <__ssputs_r+0x70>
 800bc5c:	6921      	ldr	r1, [r4, #16]
 800bc5e:	4650      	mov	r0, sl
 800bc60:	f000 ff40 	bl	800cae4 <_free_r>
 800bc64:	e7c7      	b.n	800bbf6 <__ssputs_r+0x46>
	...

0800bc68 <_svfiprintf_r>:
 800bc68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc6c:	4698      	mov	r8, r3
 800bc6e:	898b      	ldrh	r3, [r1, #12]
 800bc70:	061b      	lsls	r3, r3, #24
 800bc72:	b09d      	sub	sp, #116	; 0x74
 800bc74:	4607      	mov	r7, r0
 800bc76:	460d      	mov	r5, r1
 800bc78:	4614      	mov	r4, r2
 800bc7a:	d50e      	bpl.n	800bc9a <_svfiprintf_r+0x32>
 800bc7c:	690b      	ldr	r3, [r1, #16]
 800bc7e:	b963      	cbnz	r3, 800bc9a <_svfiprintf_r+0x32>
 800bc80:	2140      	movs	r1, #64	; 0x40
 800bc82:	f000 ff9b 	bl	800cbbc <_malloc_r>
 800bc86:	6028      	str	r0, [r5, #0]
 800bc88:	6128      	str	r0, [r5, #16]
 800bc8a:	b920      	cbnz	r0, 800bc96 <_svfiprintf_r+0x2e>
 800bc8c:	230c      	movs	r3, #12
 800bc8e:	603b      	str	r3, [r7, #0]
 800bc90:	f04f 30ff 	mov.w	r0, #4294967295
 800bc94:	e0d1      	b.n	800be3a <_svfiprintf_r+0x1d2>
 800bc96:	2340      	movs	r3, #64	; 0x40
 800bc98:	616b      	str	r3, [r5, #20]
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	9309      	str	r3, [sp, #36]	; 0x24
 800bc9e:	2320      	movs	r3, #32
 800bca0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bca4:	f8cd 800c 	str.w	r8, [sp, #12]
 800bca8:	2330      	movs	r3, #48	; 0x30
 800bcaa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800be54 <_svfiprintf_r+0x1ec>
 800bcae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bcb2:	f04f 0901 	mov.w	r9, #1
 800bcb6:	4623      	mov	r3, r4
 800bcb8:	469a      	mov	sl, r3
 800bcba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bcbe:	b10a      	cbz	r2, 800bcc4 <_svfiprintf_r+0x5c>
 800bcc0:	2a25      	cmp	r2, #37	; 0x25
 800bcc2:	d1f9      	bne.n	800bcb8 <_svfiprintf_r+0x50>
 800bcc4:	ebba 0b04 	subs.w	fp, sl, r4
 800bcc8:	d00b      	beq.n	800bce2 <_svfiprintf_r+0x7a>
 800bcca:	465b      	mov	r3, fp
 800bccc:	4622      	mov	r2, r4
 800bcce:	4629      	mov	r1, r5
 800bcd0:	4638      	mov	r0, r7
 800bcd2:	f7ff ff6d 	bl	800bbb0 <__ssputs_r>
 800bcd6:	3001      	adds	r0, #1
 800bcd8:	f000 80aa 	beq.w	800be30 <_svfiprintf_r+0x1c8>
 800bcdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bcde:	445a      	add	r2, fp
 800bce0:	9209      	str	r2, [sp, #36]	; 0x24
 800bce2:	f89a 3000 	ldrb.w	r3, [sl]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	f000 80a2 	beq.w	800be30 <_svfiprintf_r+0x1c8>
 800bcec:	2300      	movs	r3, #0
 800bcee:	f04f 32ff 	mov.w	r2, #4294967295
 800bcf2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bcf6:	f10a 0a01 	add.w	sl, sl, #1
 800bcfa:	9304      	str	r3, [sp, #16]
 800bcfc:	9307      	str	r3, [sp, #28]
 800bcfe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bd02:	931a      	str	r3, [sp, #104]	; 0x68
 800bd04:	4654      	mov	r4, sl
 800bd06:	2205      	movs	r2, #5
 800bd08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd0c:	4851      	ldr	r0, [pc, #324]	; (800be54 <_svfiprintf_r+0x1ec>)
 800bd0e:	f7f4 fa87 	bl	8000220 <memchr>
 800bd12:	9a04      	ldr	r2, [sp, #16]
 800bd14:	b9d8      	cbnz	r0, 800bd4e <_svfiprintf_r+0xe6>
 800bd16:	06d0      	lsls	r0, r2, #27
 800bd18:	bf44      	itt	mi
 800bd1a:	2320      	movmi	r3, #32
 800bd1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd20:	0711      	lsls	r1, r2, #28
 800bd22:	bf44      	itt	mi
 800bd24:	232b      	movmi	r3, #43	; 0x2b
 800bd26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd2a:	f89a 3000 	ldrb.w	r3, [sl]
 800bd2e:	2b2a      	cmp	r3, #42	; 0x2a
 800bd30:	d015      	beq.n	800bd5e <_svfiprintf_r+0xf6>
 800bd32:	9a07      	ldr	r2, [sp, #28]
 800bd34:	4654      	mov	r4, sl
 800bd36:	2000      	movs	r0, #0
 800bd38:	f04f 0c0a 	mov.w	ip, #10
 800bd3c:	4621      	mov	r1, r4
 800bd3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd42:	3b30      	subs	r3, #48	; 0x30
 800bd44:	2b09      	cmp	r3, #9
 800bd46:	d94e      	bls.n	800bde6 <_svfiprintf_r+0x17e>
 800bd48:	b1b0      	cbz	r0, 800bd78 <_svfiprintf_r+0x110>
 800bd4a:	9207      	str	r2, [sp, #28]
 800bd4c:	e014      	b.n	800bd78 <_svfiprintf_r+0x110>
 800bd4e:	eba0 0308 	sub.w	r3, r0, r8
 800bd52:	fa09 f303 	lsl.w	r3, r9, r3
 800bd56:	4313      	orrs	r3, r2
 800bd58:	9304      	str	r3, [sp, #16]
 800bd5a:	46a2      	mov	sl, r4
 800bd5c:	e7d2      	b.n	800bd04 <_svfiprintf_r+0x9c>
 800bd5e:	9b03      	ldr	r3, [sp, #12]
 800bd60:	1d19      	adds	r1, r3, #4
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	9103      	str	r1, [sp, #12]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	bfbb      	ittet	lt
 800bd6a:	425b      	neglt	r3, r3
 800bd6c:	f042 0202 	orrlt.w	r2, r2, #2
 800bd70:	9307      	strge	r3, [sp, #28]
 800bd72:	9307      	strlt	r3, [sp, #28]
 800bd74:	bfb8      	it	lt
 800bd76:	9204      	strlt	r2, [sp, #16]
 800bd78:	7823      	ldrb	r3, [r4, #0]
 800bd7a:	2b2e      	cmp	r3, #46	; 0x2e
 800bd7c:	d10c      	bne.n	800bd98 <_svfiprintf_r+0x130>
 800bd7e:	7863      	ldrb	r3, [r4, #1]
 800bd80:	2b2a      	cmp	r3, #42	; 0x2a
 800bd82:	d135      	bne.n	800bdf0 <_svfiprintf_r+0x188>
 800bd84:	9b03      	ldr	r3, [sp, #12]
 800bd86:	1d1a      	adds	r2, r3, #4
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	9203      	str	r2, [sp, #12]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	bfb8      	it	lt
 800bd90:	f04f 33ff 	movlt.w	r3, #4294967295
 800bd94:	3402      	adds	r4, #2
 800bd96:	9305      	str	r3, [sp, #20]
 800bd98:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800be64 <_svfiprintf_r+0x1fc>
 800bd9c:	7821      	ldrb	r1, [r4, #0]
 800bd9e:	2203      	movs	r2, #3
 800bda0:	4650      	mov	r0, sl
 800bda2:	f7f4 fa3d 	bl	8000220 <memchr>
 800bda6:	b140      	cbz	r0, 800bdba <_svfiprintf_r+0x152>
 800bda8:	2340      	movs	r3, #64	; 0x40
 800bdaa:	eba0 000a 	sub.w	r0, r0, sl
 800bdae:	fa03 f000 	lsl.w	r0, r3, r0
 800bdb2:	9b04      	ldr	r3, [sp, #16]
 800bdb4:	4303      	orrs	r3, r0
 800bdb6:	3401      	adds	r4, #1
 800bdb8:	9304      	str	r3, [sp, #16]
 800bdba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdbe:	4826      	ldr	r0, [pc, #152]	; (800be58 <_svfiprintf_r+0x1f0>)
 800bdc0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bdc4:	2206      	movs	r2, #6
 800bdc6:	f7f4 fa2b 	bl	8000220 <memchr>
 800bdca:	2800      	cmp	r0, #0
 800bdcc:	d038      	beq.n	800be40 <_svfiprintf_r+0x1d8>
 800bdce:	4b23      	ldr	r3, [pc, #140]	; (800be5c <_svfiprintf_r+0x1f4>)
 800bdd0:	bb1b      	cbnz	r3, 800be1a <_svfiprintf_r+0x1b2>
 800bdd2:	9b03      	ldr	r3, [sp, #12]
 800bdd4:	3307      	adds	r3, #7
 800bdd6:	f023 0307 	bic.w	r3, r3, #7
 800bdda:	3308      	adds	r3, #8
 800bddc:	9303      	str	r3, [sp, #12]
 800bdde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bde0:	4433      	add	r3, r6
 800bde2:	9309      	str	r3, [sp, #36]	; 0x24
 800bde4:	e767      	b.n	800bcb6 <_svfiprintf_r+0x4e>
 800bde6:	fb0c 3202 	mla	r2, ip, r2, r3
 800bdea:	460c      	mov	r4, r1
 800bdec:	2001      	movs	r0, #1
 800bdee:	e7a5      	b.n	800bd3c <_svfiprintf_r+0xd4>
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	3401      	adds	r4, #1
 800bdf4:	9305      	str	r3, [sp, #20]
 800bdf6:	4619      	mov	r1, r3
 800bdf8:	f04f 0c0a 	mov.w	ip, #10
 800bdfc:	4620      	mov	r0, r4
 800bdfe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be02:	3a30      	subs	r2, #48	; 0x30
 800be04:	2a09      	cmp	r2, #9
 800be06:	d903      	bls.n	800be10 <_svfiprintf_r+0x1a8>
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d0c5      	beq.n	800bd98 <_svfiprintf_r+0x130>
 800be0c:	9105      	str	r1, [sp, #20]
 800be0e:	e7c3      	b.n	800bd98 <_svfiprintf_r+0x130>
 800be10:	fb0c 2101 	mla	r1, ip, r1, r2
 800be14:	4604      	mov	r4, r0
 800be16:	2301      	movs	r3, #1
 800be18:	e7f0      	b.n	800bdfc <_svfiprintf_r+0x194>
 800be1a:	ab03      	add	r3, sp, #12
 800be1c:	9300      	str	r3, [sp, #0]
 800be1e:	462a      	mov	r2, r5
 800be20:	4b0f      	ldr	r3, [pc, #60]	; (800be60 <_svfiprintf_r+0x1f8>)
 800be22:	a904      	add	r1, sp, #16
 800be24:	4638      	mov	r0, r7
 800be26:	f3af 8000 	nop.w
 800be2a:	1c42      	adds	r2, r0, #1
 800be2c:	4606      	mov	r6, r0
 800be2e:	d1d6      	bne.n	800bdde <_svfiprintf_r+0x176>
 800be30:	89ab      	ldrh	r3, [r5, #12]
 800be32:	065b      	lsls	r3, r3, #25
 800be34:	f53f af2c 	bmi.w	800bc90 <_svfiprintf_r+0x28>
 800be38:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be3a:	b01d      	add	sp, #116	; 0x74
 800be3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be40:	ab03      	add	r3, sp, #12
 800be42:	9300      	str	r3, [sp, #0]
 800be44:	462a      	mov	r2, r5
 800be46:	4b06      	ldr	r3, [pc, #24]	; (800be60 <_svfiprintf_r+0x1f8>)
 800be48:	a904      	add	r1, sp, #16
 800be4a:	4638      	mov	r0, r7
 800be4c:	f000 fa4c 	bl	800c2e8 <_printf_i>
 800be50:	e7eb      	b.n	800be2a <_svfiprintf_r+0x1c2>
 800be52:	bf00      	nop
 800be54:	0800d780 	.word	0x0800d780
 800be58:	0800d78a 	.word	0x0800d78a
 800be5c:	00000000 	.word	0x00000000
 800be60:	0800bbb1 	.word	0x0800bbb1
 800be64:	0800d786 	.word	0x0800d786

0800be68 <_sungetc_r>:
 800be68:	b538      	push	{r3, r4, r5, lr}
 800be6a:	1c4b      	adds	r3, r1, #1
 800be6c:	4614      	mov	r4, r2
 800be6e:	d103      	bne.n	800be78 <_sungetc_r+0x10>
 800be70:	f04f 35ff 	mov.w	r5, #4294967295
 800be74:	4628      	mov	r0, r5
 800be76:	bd38      	pop	{r3, r4, r5, pc}
 800be78:	8993      	ldrh	r3, [r2, #12]
 800be7a:	f023 0320 	bic.w	r3, r3, #32
 800be7e:	8193      	strh	r3, [r2, #12]
 800be80:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800be82:	6852      	ldr	r2, [r2, #4]
 800be84:	b2cd      	uxtb	r5, r1
 800be86:	b18b      	cbz	r3, 800beac <_sungetc_r+0x44>
 800be88:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800be8a:	4293      	cmp	r3, r2
 800be8c:	dd08      	ble.n	800bea0 <_sungetc_r+0x38>
 800be8e:	6823      	ldr	r3, [r4, #0]
 800be90:	1e5a      	subs	r2, r3, #1
 800be92:	6022      	str	r2, [r4, #0]
 800be94:	f803 5c01 	strb.w	r5, [r3, #-1]
 800be98:	6863      	ldr	r3, [r4, #4]
 800be9a:	3301      	adds	r3, #1
 800be9c:	6063      	str	r3, [r4, #4]
 800be9e:	e7e9      	b.n	800be74 <_sungetc_r+0xc>
 800bea0:	4621      	mov	r1, r4
 800bea2:	f000 fdc9 	bl	800ca38 <__submore>
 800bea6:	2800      	cmp	r0, #0
 800bea8:	d0f1      	beq.n	800be8e <_sungetc_r+0x26>
 800beaa:	e7e1      	b.n	800be70 <_sungetc_r+0x8>
 800beac:	6921      	ldr	r1, [r4, #16]
 800beae:	6823      	ldr	r3, [r4, #0]
 800beb0:	b151      	cbz	r1, 800bec8 <_sungetc_r+0x60>
 800beb2:	4299      	cmp	r1, r3
 800beb4:	d208      	bcs.n	800bec8 <_sungetc_r+0x60>
 800beb6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800beba:	42a9      	cmp	r1, r5
 800bebc:	d104      	bne.n	800bec8 <_sungetc_r+0x60>
 800bebe:	3b01      	subs	r3, #1
 800bec0:	3201      	adds	r2, #1
 800bec2:	6023      	str	r3, [r4, #0]
 800bec4:	6062      	str	r2, [r4, #4]
 800bec6:	e7d5      	b.n	800be74 <_sungetc_r+0xc>
 800bec8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800becc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bed0:	6363      	str	r3, [r4, #52]	; 0x34
 800bed2:	2303      	movs	r3, #3
 800bed4:	63a3      	str	r3, [r4, #56]	; 0x38
 800bed6:	4623      	mov	r3, r4
 800bed8:	f803 5f46 	strb.w	r5, [r3, #70]!
 800bedc:	6023      	str	r3, [r4, #0]
 800bede:	2301      	movs	r3, #1
 800bee0:	e7dc      	b.n	800be9c <_sungetc_r+0x34>

0800bee2 <__ssrefill_r>:
 800bee2:	b510      	push	{r4, lr}
 800bee4:	460c      	mov	r4, r1
 800bee6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800bee8:	b169      	cbz	r1, 800bf06 <__ssrefill_r+0x24>
 800beea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800beee:	4299      	cmp	r1, r3
 800bef0:	d001      	beq.n	800bef6 <__ssrefill_r+0x14>
 800bef2:	f000 fdf7 	bl	800cae4 <_free_r>
 800bef6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bef8:	6063      	str	r3, [r4, #4]
 800befa:	2000      	movs	r0, #0
 800befc:	6360      	str	r0, [r4, #52]	; 0x34
 800befe:	b113      	cbz	r3, 800bf06 <__ssrefill_r+0x24>
 800bf00:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bf02:	6023      	str	r3, [r4, #0]
 800bf04:	bd10      	pop	{r4, pc}
 800bf06:	6923      	ldr	r3, [r4, #16]
 800bf08:	6023      	str	r3, [r4, #0]
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	6063      	str	r3, [r4, #4]
 800bf0e:	89a3      	ldrh	r3, [r4, #12]
 800bf10:	f043 0320 	orr.w	r3, r3, #32
 800bf14:	81a3      	strh	r3, [r4, #12]
 800bf16:	f04f 30ff 	mov.w	r0, #4294967295
 800bf1a:	e7f3      	b.n	800bf04 <__ssrefill_r+0x22>

0800bf1c <__ssvfiscanf_r>:
 800bf1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf20:	460c      	mov	r4, r1
 800bf22:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800bf26:	2100      	movs	r1, #0
 800bf28:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800bf2c:	49a6      	ldr	r1, [pc, #664]	; (800c1c8 <__ssvfiscanf_r+0x2ac>)
 800bf2e:	91a0      	str	r1, [sp, #640]	; 0x280
 800bf30:	f10d 0804 	add.w	r8, sp, #4
 800bf34:	49a5      	ldr	r1, [pc, #660]	; (800c1cc <__ssvfiscanf_r+0x2b0>)
 800bf36:	4fa6      	ldr	r7, [pc, #664]	; (800c1d0 <__ssvfiscanf_r+0x2b4>)
 800bf38:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800c1d4 <__ssvfiscanf_r+0x2b8>
 800bf3c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800bf40:	4606      	mov	r6, r0
 800bf42:	91a1      	str	r1, [sp, #644]	; 0x284
 800bf44:	9300      	str	r3, [sp, #0]
 800bf46:	7813      	ldrb	r3, [r2, #0]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	f000 815a 	beq.w	800c202 <__ssvfiscanf_r+0x2e6>
 800bf4e:	5dd9      	ldrb	r1, [r3, r7]
 800bf50:	f011 0108 	ands.w	r1, r1, #8
 800bf54:	f102 0501 	add.w	r5, r2, #1
 800bf58:	d019      	beq.n	800bf8e <__ssvfiscanf_r+0x72>
 800bf5a:	6863      	ldr	r3, [r4, #4]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	dd0f      	ble.n	800bf80 <__ssvfiscanf_r+0x64>
 800bf60:	6823      	ldr	r3, [r4, #0]
 800bf62:	781a      	ldrb	r2, [r3, #0]
 800bf64:	5cba      	ldrb	r2, [r7, r2]
 800bf66:	0712      	lsls	r2, r2, #28
 800bf68:	d401      	bmi.n	800bf6e <__ssvfiscanf_r+0x52>
 800bf6a:	462a      	mov	r2, r5
 800bf6c:	e7eb      	b.n	800bf46 <__ssvfiscanf_r+0x2a>
 800bf6e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bf70:	3201      	adds	r2, #1
 800bf72:	9245      	str	r2, [sp, #276]	; 0x114
 800bf74:	6862      	ldr	r2, [r4, #4]
 800bf76:	3301      	adds	r3, #1
 800bf78:	3a01      	subs	r2, #1
 800bf7a:	6062      	str	r2, [r4, #4]
 800bf7c:	6023      	str	r3, [r4, #0]
 800bf7e:	e7ec      	b.n	800bf5a <__ssvfiscanf_r+0x3e>
 800bf80:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bf82:	4621      	mov	r1, r4
 800bf84:	4630      	mov	r0, r6
 800bf86:	4798      	blx	r3
 800bf88:	2800      	cmp	r0, #0
 800bf8a:	d0e9      	beq.n	800bf60 <__ssvfiscanf_r+0x44>
 800bf8c:	e7ed      	b.n	800bf6a <__ssvfiscanf_r+0x4e>
 800bf8e:	2b25      	cmp	r3, #37	; 0x25
 800bf90:	d012      	beq.n	800bfb8 <__ssvfiscanf_r+0x9c>
 800bf92:	469a      	mov	sl, r3
 800bf94:	6863      	ldr	r3, [r4, #4]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	f340 8091 	ble.w	800c0be <__ssvfiscanf_r+0x1a2>
 800bf9c:	6822      	ldr	r2, [r4, #0]
 800bf9e:	7813      	ldrb	r3, [r2, #0]
 800bfa0:	4553      	cmp	r3, sl
 800bfa2:	f040 812e 	bne.w	800c202 <__ssvfiscanf_r+0x2e6>
 800bfa6:	6863      	ldr	r3, [r4, #4]
 800bfa8:	3b01      	subs	r3, #1
 800bfaa:	6063      	str	r3, [r4, #4]
 800bfac:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800bfae:	3201      	adds	r2, #1
 800bfb0:	3301      	adds	r3, #1
 800bfb2:	6022      	str	r2, [r4, #0]
 800bfb4:	9345      	str	r3, [sp, #276]	; 0x114
 800bfb6:	e7d8      	b.n	800bf6a <__ssvfiscanf_r+0x4e>
 800bfb8:	9141      	str	r1, [sp, #260]	; 0x104
 800bfba:	9143      	str	r1, [sp, #268]	; 0x10c
 800bfbc:	7853      	ldrb	r3, [r2, #1]
 800bfbe:	2b2a      	cmp	r3, #42	; 0x2a
 800bfc0:	bf02      	ittt	eq
 800bfc2:	2310      	moveq	r3, #16
 800bfc4:	1c95      	addeq	r5, r2, #2
 800bfc6:	9341      	streq	r3, [sp, #260]	; 0x104
 800bfc8:	220a      	movs	r2, #10
 800bfca:	46aa      	mov	sl, r5
 800bfcc:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800bfd0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800bfd4:	2b09      	cmp	r3, #9
 800bfd6:	d91d      	bls.n	800c014 <__ssvfiscanf_r+0xf8>
 800bfd8:	487e      	ldr	r0, [pc, #504]	; (800c1d4 <__ssvfiscanf_r+0x2b8>)
 800bfda:	2203      	movs	r2, #3
 800bfdc:	f7f4 f920 	bl	8000220 <memchr>
 800bfe0:	b140      	cbz	r0, 800bff4 <__ssvfiscanf_r+0xd8>
 800bfe2:	2301      	movs	r3, #1
 800bfe4:	eba0 0009 	sub.w	r0, r0, r9
 800bfe8:	fa03 f000 	lsl.w	r0, r3, r0
 800bfec:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bfee:	4318      	orrs	r0, r3
 800bff0:	9041      	str	r0, [sp, #260]	; 0x104
 800bff2:	4655      	mov	r5, sl
 800bff4:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bff8:	2b78      	cmp	r3, #120	; 0x78
 800bffa:	d806      	bhi.n	800c00a <__ssvfiscanf_r+0xee>
 800bffc:	2b57      	cmp	r3, #87	; 0x57
 800bffe:	d810      	bhi.n	800c022 <__ssvfiscanf_r+0x106>
 800c000:	2b25      	cmp	r3, #37	; 0x25
 800c002:	d0c6      	beq.n	800bf92 <__ssvfiscanf_r+0x76>
 800c004:	d856      	bhi.n	800c0b4 <__ssvfiscanf_r+0x198>
 800c006:	2b00      	cmp	r3, #0
 800c008:	d064      	beq.n	800c0d4 <__ssvfiscanf_r+0x1b8>
 800c00a:	2303      	movs	r3, #3
 800c00c:	9347      	str	r3, [sp, #284]	; 0x11c
 800c00e:	230a      	movs	r3, #10
 800c010:	9342      	str	r3, [sp, #264]	; 0x108
 800c012:	e071      	b.n	800c0f8 <__ssvfiscanf_r+0x1dc>
 800c014:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c016:	fb02 1103 	mla	r1, r2, r3, r1
 800c01a:	3930      	subs	r1, #48	; 0x30
 800c01c:	9143      	str	r1, [sp, #268]	; 0x10c
 800c01e:	4655      	mov	r5, sl
 800c020:	e7d3      	b.n	800bfca <__ssvfiscanf_r+0xae>
 800c022:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800c026:	2a20      	cmp	r2, #32
 800c028:	d8ef      	bhi.n	800c00a <__ssvfiscanf_r+0xee>
 800c02a:	a101      	add	r1, pc, #4	; (adr r1, 800c030 <__ssvfiscanf_r+0x114>)
 800c02c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c030:	0800c0e3 	.word	0x0800c0e3
 800c034:	0800c00b 	.word	0x0800c00b
 800c038:	0800c00b 	.word	0x0800c00b
 800c03c:	0800c141 	.word	0x0800c141
 800c040:	0800c00b 	.word	0x0800c00b
 800c044:	0800c00b 	.word	0x0800c00b
 800c048:	0800c00b 	.word	0x0800c00b
 800c04c:	0800c00b 	.word	0x0800c00b
 800c050:	0800c00b 	.word	0x0800c00b
 800c054:	0800c00b 	.word	0x0800c00b
 800c058:	0800c00b 	.word	0x0800c00b
 800c05c:	0800c157 	.word	0x0800c157
 800c060:	0800c12d 	.word	0x0800c12d
 800c064:	0800c0bb 	.word	0x0800c0bb
 800c068:	0800c0bb 	.word	0x0800c0bb
 800c06c:	0800c0bb 	.word	0x0800c0bb
 800c070:	0800c00b 	.word	0x0800c00b
 800c074:	0800c131 	.word	0x0800c131
 800c078:	0800c00b 	.word	0x0800c00b
 800c07c:	0800c00b 	.word	0x0800c00b
 800c080:	0800c00b 	.word	0x0800c00b
 800c084:	0800c00b 	.word	0x0800c00b
 800c088:	0800c167 	.word	0x0800c167
 800c08c:	0800c139 	.word	0x0800c139
 800c090:	0800c0db 	.word	0x0800c0db
 800c094:	0800c00b 	.word	0x0800c00b
 800c098:	0800c00b 	.word	0x0800c00b
 800c09c:	0800c163 	.word	0x0800c163
 800c0a0:	0800c00b 	.word	0x0800c00b
 800c0a4:	0800c12d 	.word	0x0800c12d
 800c0a8:	0800c00b 	.word	0x0800c00b
 800c0ac:	0800c00b 	.word	0x0800c00b
 800c0b0:	0800c0e3 	.word	0x0800c0e3
 800c0b4:	3b45      	subs	r3, #69	; 0x45
 800c0b6:	2b02      	cmp	r3, #2
 800c0b8:	d8a7      	bhi.n	800c00a <__ssvfiscanf_r+0xee>
 800c0ba:	2305      	movs	r3, #5
 800c0bc:	e01b      	b.n	800c0f6 <__ssvfiscanf_r+0x1da>
 800c0be:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c0c0:	4621      	mov	r1, r4
 800c0c2:	4630      	mov	r0, r6
 800c0c4:	4798      	blx	r3
 800c0c6:	2800      	cmp	r0, #0
 800c0c8:	f43f af68 	beq.w	800bf9c <__ssvfiscanf_r+0x80>
 800c0cc:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c0ce:	2800      	cmp	r0, #0
 800c0d0:	f040 808d 	bne.w	800c1ee <__ssvfiscanf_r+0x2d2>
 800c0d4:	f04f 30ff 	mov.w	r0, #4294967295
 800c0d8:	e08f      	b.n	800c1fa <__ssvfiscanf_r+0x2de>
 800c0da:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c0dc:	f042 0220 	orr.w	r2, r2, #32
 800c0e0:	9241      	str	r2, [sp, #260]	; 0x104
 800c0e2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c0e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c0e8:	9241      	str	r2, [sp, #260]	; 0x104
 800c0ea:	2210      	movs	r2, #16
 800c0ec:	2b6f      	cmp	r3, #111	; 0x6f
 800c0ee:	9242      	str	r2, [sp, #264]	; 0x108
 800c0f0:	bf34      	ite	cc
 800c0f2:	2303      	movcc	r3, #3
 800c0f4:	2304      	movcs	r3, #4
 800c0f6:	9347      	str	r3, [sp, #284]	; 0x11c
 800c0f8:	6863      	ldr	r3, [r4, #4]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	dd42      	ble.n	800c184 <__ssvfiscanf_r+0x268>
 800c0fe:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c100:	0659      	lsls	r1, r3, #25
 800c102:	d404      	bmi.n	800c10e <__ssvfiscanf_r+0x1f2>
 800c104:	6823      	ldr	r3, [r4, #0]
 800c106:	781a      	ldrb	r2, [r3, #0]
 800c108:	5cba      	ldrb	r2, [r7, r2]
 800c10a:	0712      	lsls	r2, r2, #28
 800c10c:	d441      	bmi.n	800c192 <__ssvfiscanf_r+0x276>
 800c10e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800c110:	2b02      	cmp	r3, #2
 800c112:	dc50      	bgt.n	800c1b6 <__ssvfiscanf_r+0x29a>
 800c114:	466b      	mov	r3, sp
 800c116:	4622      	mov	r2, r4
 800c118:	a941      	add	r1, sp, #260	; 0x104
 800c11a:	4630      	mov	r0, r6
 800c11c:	f000 fa0a 	bl	800c534 <_scanf_chars>
 800c120:	2801      	cmp	r0, #1
 800c122:	d06e      	beq.n	800c202 <__ssvfiscanf_r+0x2e6>
 800c124:	2802      	cmp	r0, #2
 800c126:	f47f af20 	bne.w	800bf6a <__ssvfiscanf_r+0x4e>
 800c12a:	e7cf      	b.n	800c0cc <__ssvfiscanf_r+0x1b0>
 800c12c:	220a      	movs	r2, #10
 800c12e:	e7dd      	b.n	800c0ec <__ssvfiscanf_r+0x1d0>
 800c130:	2300      	movs	r3, #0
 800c132:	9342      	str	r3, [sp, #264]	; 0x108
 800c134:	2303      	movs	r3, #3
 800c136:	e7de      	b.n	800c0f6 <__ssvfiscanf_r+0x1da>
 800c138:	2308      	movs	r3, #8
 800c13a:	9342      	str	r3, [sp, #264]	; 0x108
 800c13c:	2304      	movs	r3, #4
 800c13e:	e7da      	b.n	800c0f6 <__ssvfiscanf_r+0x1da>
 800c140:	4629      	mov	r1, r5
 800c142:	4640      	mov	r0, r8
 800c144:	f000 fb48 	bl	800c7d8 <__sccl>
 800c148:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c14a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c14e:	9341      	str	r3, [sp, #260]	; 0x104
 800c150:	4605      	mov	r5, r0
 800c152:	2301      	movs	r3, #1
 800c154:	e7cf      	b.n	800c0f6 <__ssvfiscanf_r+0x1da>
 800c156:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c158:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c15c:	9341      	str	r3, [sp, #260]	; 0x104
 800c15e:	2300      	movs	r3, #0
 800c160:	e7c9      	b.n	800c0f6 <__ssvfiscanf_r+0x1da>
 800c162:	2302      	movs	r3, #2
 800c164:	e7c7      	b.n	800c0f6 <__ssvfiscanf_r+0x1da>
 800c166:	9841      	ldr	r0, [sp, #260]	; 0x104
 800c168:	06c3      	lsls	r3, r0, #27
 800c16a:	f53f aefe 	bmi.w	800bf6a <__ssvfiscanf_r+0x4e>
 800c16e:	9b00      	ldr	r3, [sp, #0]
 800c170:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c172:	1d19      	adds	r1, r3, #4
 800c174:	9100      	str	r1, [sp, #0]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	f010 0f01 	tst.w	r0, #1
 800c17c:	bf14      	ite	ne
 800c17e:	801a      	strhne	r2, [r3, #0]
 800c180:	601a      	streq	r2, [r3, #0]
 800c182:	e6f2      	b.n	800bf6a <__ssvfiscanf_r+0x4e>
 800c184:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c186:	4621      	mov	r1, r4
 800c188:	4630      	mov	r0, r6
 800c18a:	4798      	blx	r3
 800c18c:	2800      	cmp	r0, #0
 800c18e:	d0b6      	beq.n	800c0fe <__ssvfiscanf_r+0x1e2>
 800c190:	e79c      	b.n	800c0cc <__ssvfiscanf_r+0x1b0>
 800c192:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c194:	3201      	adds	r2, #1
 800c196:	9245      	str	r2, [sp, #276]	; 0x114
 800c198:	6862      	ldr	r2, [r4, #4]
 800c19a:	3a01      	subs	r2, #1
 800c19c:	2a00      	cmp	r2, #0
 800c19e:	6062      	str	r2, [r4, #4]
 800c1a0:	dd02      	ble.n	800c1a8 <__ssvfiscanf_r+0x28c>
 800c1a2:	3301      	adds	r3, #1
 800c1a4:	6023      	str	r3, [r4, #0]
 800c1a6:	e7ad      	b.n	800c104 <__ssvfiscanf_r+0x1e8>
 800c1a8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c1aa:	4621      	mov	r1, r4
 800c1ac:	4630      	mov	r0, r6
 800c1ae:	4798      	blx	r3
 800c1b0:	2800      	cmp	r0, #0
 800c1b2:	d0a7      	beq.n	800c104 <__ssvfiscanf_r+0x1e8>
 800c1b4:	e78a      	b.n	800c0cc <__ssvfiscanf_r+0x1b0>
 800c1b6:	2b04      	cmp	r3, #4
 800c1b8:	dc0e      	bgt.n	800c1d8 <__ssvfiscanf_r+0x2bc>
 800c1ba:	466b      	mov	r3, sp
 800c1bc:	4622      	mov	r2, r4
 800c1be:	a941      	add	r1, sp, #260	; 0x104
 800c1c0:	4630      	mov	r0, r6
 800c1c2:	f000 fa11 	bl	800c5e8 <_scanf_i>
 800c1c6:	e7ab      	b.n	800c120 <__ssvfiscanf_r+0x204>
 800c1c8:	0800be69 	.word	0x0800be69
 800c1cc:	0800bee3 	.word	0x0800bee3
 800c1d0:	0800d7cf 	.word	0x0800d7cf
 800c1d4:	0800d786 	.word	0x0800d786
 800c1d8:	4b0b      	ldr	r3, [pc, #44]	; (800c208 <__ssvfiscanf_r+0x2ec>)
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	f43f aec5 	beq.w	800bf6a <__ssvfiscanf_r+0x4e>
 800c1e0:	466b      	mov	r3, sp
 800c1e2:	4622      	mov	r2, r4
 800c1e4:	a941      	add	r1, sp, #260	; 0x104
 800c1e6:	4630      	mov	r0, r6
 800c1e8:	f3af 8000 	nop.w
 800c1ec:	e798      	b.n	800c120 <__ssvfiscanf_r+0x204>
 800c1ee:	89a3      	ldrh	r3, [r4, #12]
 800c1f0:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c1f4:	bf18      	it	ne
 800c1f6:	f04f 30ff 	movne.w	r0, #4294967295
 800c1fa:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800c1fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c202:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c204:	e7f9      	b.n	800c1fa <__ssvfiscanf_r+0x2de>
 800c206:	bf00      	nop
 800c208:	00000000 	.word	0x00000000

0800c20c <_printf_common>:
 800c20c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c210:	4616      	mov	r6, r2
 800c212:	4699      	mov	r9, r3
 800c214:	688a      	ldr	r2, [r1, #8]
 800c216:	690b      	ldr	r3, [r1, #16]
 800c218:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c21c:	4293      	cmp	r3, r2
 800c21e:	bfb8      	it	lt
 800c220:	4613      	movlt	r3, r2
 800c222:	6033      	str	r3, [r6, #0]
 800c224:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c228:	4607      	mov	r7, r0
 800c22a:	460c      	mov	r4, r1
 800c22c:	b10a      	cbz	r2, 800c232 <_printf_common+0x26>
 800c22e:	3301      	adds	r3, #1
 800c230:	6033      	str	r3, [r6, #0]
 800c232:	6823      	ldr	r3, [r4, #0]
 800c234:	0699      	lsls	r1, r3, #26
 800c236:	bf42      	ittt	mi
 800c238:	6833      	ldrmi	r3, [r6, #0]
 800c23a:	3302      	addmi	r3, #2
 800c23c:	6033      	strmi	r3, [r6, #0]
 800c23e:	6825      	ldr	r5, [r4, #0]
 800c240:	f015 0506 	ands.w	r5, r5, #6
 800c244:	d106      	bne.n	800c254 <_printf_common+0x48>
 800c246:	f104 0a19 	add.w	sl, r4, #25
 800c24a:	68e3      	ldr	r3, [r4, #12]
 800c24c:	6832      	ldr	r2, [r6, #0]
 800c24e:	1a9b      	subs	r3, r3, r2
 800c250:	42ab      	cmp	r3, r5
 800c252:	dc26      	bgt.n	800c2a2 <_printf_common+0x96>
 800c254:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c258:	1e13      	subs	r3, r2, #0
 800c25a:	6822      	ldr	r2, [r4, #0]
 800c25c:	bf18      	it	ne
 800c25e:	2301      	movne	r3, #1
 800c260:	0692      	lsls	r2, r2, #26
 800c262:	d42b      	bmi.n	800c2bc <_printf_common+0xb0>
 800c264:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c268:	4649      	mov	r1, r9
 800c26a:	4638      	mov	r0, r7
 800c26c:	47c0      	blx	r8
 800c26e:	3001      	adds	r0, #1
 800c270:	d01e      	beq.n	800c2b0 <_printf_common+0xa4>
 800c272:	6823      	ldr	r3, [r4, #0]
 800c274:	68e5      	ldr	r5, [r4, #12]
 800c276:	6832      	ldr	r2, [r6, #0]
 800c278:	f003 0306 	and.w	r3, r3, #6
 800c27c:	2b04      	cmp	r3, #4
 800c27e:	bf08      	it	eq
 800c280:	1aad      	subeq	r5, r5, r2
 800c282:	68a3      	ldr	r3, [r4, #8]
 800c284:	6922      	ldr	r2, [r4, #16]
 800c286:	bf0c      	ite	eq
 800c288:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c28c:	2500      	movne	r5, #0
 800c28e:	4293      	cmp	r3, r2
 800c290:	bfc4      	itt	gt
 800c292:	1a9b      	subgt	r3, r3, r2
 800c294:	18ed      	addgt	r5, r5, r3
 800c296:	2600      	movs	r6, #0
 800c298:	341a      	adds	r4, #26
 800c29a:	42b5      	cmp	r5, r6
 800c29c:	d11a      	bne.n	800c2d4 <_printf_common+0xc8>
 800c29e:	2000      	movs	r0, #0
 800c2a0:	e008      	b.n	800c2b4 <_printf_common+0xa8>
 800c2a2:	2301      	movs	r3, #1
 800c2a4:	4652      	mov	r2, sl
 800c2a6:	4649      	mov	r1, r9
 800c2a8:	4638      	mov	r0, r7
 800c2aa:	47c0      	blx	r8
 800c2ac:	3001      	adds	r0, #1
 800c2ae:	d103      	bne.n	800c2b8 <_printf_common+0xac>
 800c2b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c2b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2b8:	3501      	adds	r5, #1
 800c2ba:	e7c6      	b.n	800c24a <_printf_common+0x3e>
 800c2bc:	18e1      	adds	r1, r4, r3
 800c2be:	1c5a      	adds	r2, r3, #1
 800c2c0:	2030      	movs	r0, #48	; 0x30
 800c2c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c2c6:	4422      	add	r2, r4
 800c2c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c2cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c2d0:	3302      	adds	r3, #2
 800c2d2:	e7c7      	b.n	800c264 <_printf_common+0x58>
 800c2d4:	2301      	movs	r3, #1
 800c2d6:	4622      	mov	r2, r4
 800c2d8:	4649      	mov	r1, r9
 800c2da:	4638      	mov	r0, r7
 800c2dc:	47c0      	blx	r8
 800c2de:	3001      	adds	r0, #1
 800c2e0:	d0e6      	beq.n	800c2b0 <_printf_common+0xa4>
 800c2e2:	3601      	adds	r6, #1
 800c2e4:	e7d9      	b.n	800c29a <_printf_common+0x8e>
	...

0800c2e8 <_printf_i>:
 800c2e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c2ec:	7e0f      	ldrb	r7, [r1, #24]
 800c2ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c2f0:	2f78      	cmp	r7, #120	; 0x78
 800c2f2:	4691      	mov	r9, r2
 800c2f4:	4680      	mov	r8, r0
 800c2f6:	460c      	mov	r4, r1
 800c2f8:	469a      	mov	sl, r3
 800c2fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c2fe:	d807      	bhi.n	800c310 <_printf_i+0x28>
 800c300:	2f62      	cmp	r7, #98	; 0x62
 800c302:	d80a      	bhi.n	800c31a <_printf_i+0x32>
 800c304:	2f00      	cmp	r7, #0
 800c306:	f000 80d8 	beq.w	800c4ba <_printf_i+0x1d2>
 800c30a:	2f58      	cmp	r7, #88	; 0x58
 800c30c:	f000 80a3 	beq.w	800c456 <_printf_i+0x16e>
 800c310:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c314:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c318:	e03a      	b.n	800c390 <_printf_i+0xa8>
 800c31a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c31e:	2b15      	cmp	r3, #21
 800c320:	d8f6      	bhi.n	800c310 <_printf_i+0x28>
 800c322:	a101      	add	r1, pc, #4	; (adr r1, 800c328 <_printf_i+0x40>)
 800c324:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c328:	0800c381 	.word	0x0800c381
 800c32c:	0800c395 	.word	0x0800c395
 800c330:	0800c311 	.word	0x0800c311
 800c334:	0800c311 	.word	0x0800c311
 800c338:	0800c311 	.word	0x0800c311
 800c33c:	0800c311 	.word	0x0800c311
 800c340:	0800c395 	.word	0x0800c395
 800c344:	0800c311 	.word	0x0800c311
 800c348:	0800c311 	.word	0x0800c311
 800c34c:	0800c311 	.word	0x0800c311
 800c350:	0800c311 	.word	0x0800c311
 800c354:	0800c4a1 	.word	0x0800c4a1
 800c358:	0800c3c5 	.word	0x0800c3c5
 800c35c:	0800c483 	.word	0x0800c483
 800c360:	0800c311 	.word	0x0800c311
 800c364:	0800c311 	.word	0x0800c311
 800c368:	0800c4c3 	.word	0x0800c4c3
 800c36c:	0800c311 	.word	0x0800c311
 800c370:	0800c3c5 	.word	0x0800c3c5
 800c374:	0800c311 	.word	0x0800c311
 800c378:	0800c311 	.word	0x0800c311
 800c37c:	0800c48b 	.word	0x0800c48b
 800c380:	682b      	ldr	r3, [r5, #0]
 800c382:	1d1a      	adds	r2, r3, #4
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	602a      	str	r2, [r5, #0]
 800c388:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c38c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c390:	2301      	movs	r3, #1
 800c392:	e0a3      	b.n	800c4dc <_printf_i+0x1f4>
 800c394:	6820      	ldr	r0, [r4, #0]
 800c396:	6829      	ldr	r1, [r5, #0]
 800c398:	0606      	lsls	r6, r0, #24
 800c39a:	f101 0304 	add.w	r3, r1, #4
 800c39e:	d50a      	bpl.n	800c3b6 <_printf_i+0xce>
 800c3a0:	680e      	ldr	r6, [r1, #0]
 800c3a2:	602b      	str	r3, [r5, #0]
 800c3a4:	2e00      	cmp	r6, #0
 800c3a6:	da03      	bge.n	800c3b0 <_printf_i+0xc8>
 800c3a8:	232d      	movs	r3, #45	; 0x2d
 800c3aa:	4276      	negs	r6, r6
 800c3ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c3b0:	485e      	ldr	r0, [pc, #376]	; (800c52c <_printf_i+0x244>)
 800c3b2:	230a      	movs	r3, #10
 800c3b4:	e019      	b.n	800c3ea <_printf_i+0x102>
 800c3b6:	680e      	ldr	r6, [r1, #0]
 800c3b8:	602b      	str	r3, [r5, #0]
 800c3ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c3be:	bf18      	it	ne
 800c3c0:	b236      	sxthne	r6, r6
 800c3c2:	e7ef      	b.n	800c3a4 <_printf_i+0xbc>
 800c3c4:	682b      	ldr	r3, [r5, #0]
 800c3c6:	6820      	ldr	r0, [r4, #0]
 800c3c8:	1d19      	adds	r1, r3, #4
 800c3ca:	6029      	str	r1, [r5, #0]
 800c3cc:	0601      	lsls	r1, r0, #24
 800c3ce:	d501      	bpl.n	800c3d4 <_printf_i+0xec>
 800c3d0:	681e      	ldr	r6, [r3, #0]
 800c3d2:	e002      	b.n	800c3da <_printf_i+0xf2>
 800c3d4:	0646      	lsls	r6, r0, #25
 800c3d6:	d5fb      	bpl.n	800c3d0 <_printf_i+0xe8>
 800c3d8:	881e      	ldrh	r6, [r3, #0]
 800c3da:	4854      	ldr	r0, [pc, #336]	; (800c52c <_printf_i+0x244>)
 800c3dc:	2f6f      	cmp	r7, #111	; 0x6f
 800c3de:	bf0c      	ite	eq
 800c3e0:	2308      	moveq	r3, #8
 800c3e2:	230a      	movne	r3, #10
 800c3e4:	2100      	movs	r1, #0
 800c3e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c3ea:	6865      	ldr	r5, [r4, #4]
 800c3ec:	60a5      	str	r5, [r4, #8]
 800c3ee:	2d00      	cmp	r5, #0
 800c3f0:	bfa2      	ittt	ge
 800c3f2:	6821      	ldrge	r1, [r4, #0]
 800c3f4:	f021 0104 	bicge.w	r1, r1, #4
 800c3f8:	6021      	strge	r1, [r4, #0]
 800c3fa:	b90e      	cbnz	r6, 800c400 <_printf_i+0x118>
 800c3fc:	2d00      	cmp	r5, #0
 800c3fe:	d04d      	beq.n	800c49c <_printf_i+0x1b4>
 800c400:	4615      	mov	r5, r2
 800c402:	fbb6 f1f3 	udiv	r1, r6, r3
 800c406:	fb03 6711 	mls	r7, r3, r1, r6
 800c40a:	5dc7      	ldrb	r7, [r0, r7]
 800c40c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c410:	4637      	mov	r7, r6
 800c412:	42bb      	cmp	r3, r7
 800c414:	460e      	mov	r6, r1
 800c416:	d9f4      	bls.n	800c402 <_printf_i+0x11a>
 800c418:	2b08      	cmp	r3, #8
 800c41a:	d10b      	bne.n	800c434 <_printf_i+0x14c>
 800c41c:	6823      	ldr	r3, [r4, #0]
 800c41e:	07de      	lsls	r6, r3, #31
 800c420:	d508      	bpl.n	800c434 <_printf_i+0x14c>
 800c422:	6923      	ldr	r3, [r4, #16]
 800c424:	6861      	ldr	r1, [r4, #4]
 800c426:	4299      	cmp	r1, r3
 800c428:	bfde      	ittt	le
 800c42a:	2330      	movle	r3, #48	; 0x30
 800c42c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c430:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c434:	1b52      	subs	r2, r2, r5
 800c436:	6122      	str	r2, [r4, #16]
 800c438:	f8cd a000 	str.w	sl, [sp]
 800c43c:	464b      	mov	r3, r9
 800c43e:	aa03      	add	r2, sp, #12
 800c440:	4621      	mov	r1, r4
 800c442:	4640      	mov	r0, r8
 800c444:	f7ff fee2 	bl	800c20c <_printf_common>
 800c448:	3001      	adds	r0, #1
 800c44a:	d14c      	bne.n	800c4e6 <_printf_i+0x1fe>
 800c44c:	f04f 30ff 	mov.w	r0, #4294967295
 800c450:	b004      	add	sp, #16
 800c452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c456:	4835      	ldr	r0, [pc, #212]	; (800c52c <_printf_i+0x244>)
 800c458:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c45c:	6829      	ldr	r1, [r5, #0]
 800c45e:	6823      	ldr	r3, [r4, #0]
 800c460:	f851 6b04 	ldr.w	r6, [r1], #4
 800c464:	6029      	str	r1, [r5, #0]
 800c466:	061d      	lsls	r5, r3, #24
 800c468:	d514      	bpl.n	800c494 <_printf_i+0x1ac>
 800c46a:	07df      	lsls	r7, r3, #31
 800c46c:	bf44      	itt	mi
 800c46e:	f043 0320 	orrmi.w	r3, r3, #32
 800c472:	6023      	strmi	r3, [r4, #0]
 800c474:	b91e      	cbnz	r6, 800c47e <_printf_i+0x196>
 800c476:	6823      	ldr	r3, [r4, #0]
 800c478:	f023 0320 	bic.w	r3, r3, #32
 800c47c:	6023      	str	r3, [r4, #0]
 800c47e:	2310      	movs	r3, #16
 800c480:	e7b0      	b.n	800c3e4 <_printf_i+0xfc>
 800c482:	6823      	ldr	r3, [r4, #0]
 800c484:	f043 0320 	orr.w	r3, r3, #32
 800c488:	6023      	str	r3, [r4, #0]
 800c48a:	2378      	movs	r3, #120	; 0x78
 800c48c:	4828      	ldr	r0, [pc, #160]	; (800c530 <_printf_i+0x248>)
 800c48e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c492:	e7e3      	b.n	800c45c <_printf_i+0x174>
 800c494:	0659      	lsls	r1, r3, #25
 800c496:	bf48      	it	mi
 800c498:	b2b6      	uxthmi	r6, r6
 800c49a:	e7e6      	b.n	800c46a <_printf_i+0x182>
 800c49c:	4615      	mov	r5, r2
 800c49e:	e7bb      	b.n	800c418 <_printf_i+0x130>
 800c4a0:	682b      	ldr	r3, [r5, #0]
 800c4a2:	6826      	ldr	r6, [r4, #0]
 800c4a4:	6961      	ldr	r1, [r4, #20]
 800c4a6:	1d18      	adds	r0, r3, #4
 800c4a8:	6028      	str	r0, [r5, #0]
 800c4aa:	0635      	lsls	r5, r6, #24
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	d501      	bpl.n	800c4b4 <_printf_i+0x1cc>
 800c4b0:	6019      	str	r1, [r3, #0]
 800c4b2:	e002      	b.n	800c4ba <_printf_i+0x1d2>
 800c4b4:	0670      	lsls	r0, r6, #25
 800c4b6:	d5fb      	bpl.n	800c4b0 <_printf_i+0x1c8>
 800c4b8:	8019      	strh	r1, [r3, #0]
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	6123      	str	r3, [r4, #16]
 800c4be:	4615      	mov	r5, r2
 800c4c0:	e7ba      	b.n	800c438 <_printf_i+0x150>
 800c4c2:	682b      	ldr	r3, [r5, #0]
 800c4c4:	1d1a      	adds	r2, r3, #4
 800c4c6:	602a      	str	r2, [r5, #0]
 800c4c8:	681d      	ldr	r5, [r3, #0]
 800c4ca:	6862      	ldr	r2, [r4, #4]
 800c4cc:	2100      	movs	r1, #0
 800c4ce:	4628      	mov	r0, r5
 800c4d0:	f7f3 fea6 	bl	8000220 <memchr>
 800c4d4:	b108      	cbz	r0, 800c4da <_printf_i+0x1f2>
 800c4d6:	1b40      	subs	r0, r0, r5
 800c4d8:	6060      	str	r0, [r4, #4]
 800c4da:	6863      	ldr	r3, [r4, #4]
 800c4dc:	6123      	str	r3, [r4, #16]
 800c4de:	2300      	movs	r3, #0
 800c4e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c4e4:	e7a8      	b.n	800c438 <_printf_i+0x150>
 800c4e6:	6923      	ldr	r3, [r4, #16]
 800c4e8:	462a      	mov	r2, r5
 800c4ea:	4649      	mov	r1, r9
 800c4ec:	4640      	mov	r0, r8
 800c4ee:	47d0      	blx	sl
 800c4f0:	3001      	adds	r0, #1
 800c4f2:	d0ab      	beq.n	800c44c <_printf_i+0x164>
 800c4f4:	6823      	ldr	r3, [r4, #0]
 800c4f6:	079b      	lsls	r3, r3, #30
 800c4f8:	d413      	bmi.n	800c522 <_printf_i+0x23a>
 800c4fa:	68e0      	ldr	r0, [r4, #12]
 800c4fc:	9b03      	ldr	r3, [sp, #12]
 800c4fe:	4298      	cmp	r0, r3
 800c500:	bfb8      	it	lt
 800c502:	4618      	movlt	r0, r3
 800c504:	e7a4      	b.n	800c450 <_printf_i+0x168>
 800c506:	2301      	movs	r3, #1
 800c508:	4632      	mov	r2, r6
 800c50a:	4649      	mov	r1, r9
 800c50c:	4640      	mov	r0, r8
 800c50e:	47d0      	blx	sl
 800c510:	3001      	adds	r0, #1
 800c512:	d09b      	beq.n	800c44c <_printf_i+0x164>
 800c514:	3501      	adds	r5, #1
 800c516:	68e3      	ldr	r3, [r4, #12]
 800c518:	9903      	ldr	r1, [sp, #12]
 800c51a:	1a5b      	subs	r3, r3, r1
 800c51c:	42ab      	cmp	r3, r5
 800c51e:	dcf2      	bgt.n	800c506 <_printf_i+0x21e>
 800c520:	e7eb      	b.n	800c4fa <_printf_i+0x212>
 800c522:	2500      	movs	r5, #0
 800c524:	f104 0619 	add.w	r6, r4, #25
 800c528:	e7f5      	b.n	800c516 <_printf_i+0x22e>
 800c52a:	bf00      	nop
 800c52c:	0800d791 	.word	0x0800d791
 800c530:	0800d7a2 	.word	0x0800d7a2

0800c534 <_scanf_chars>:
 800c534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c538:	4615      	mov	r5, r2
 800c53a:	688a      	ldr	r2, [r1, #8]
 800c53c:	4680      	mov	r8, r0
 800c53e:	460c      	mov	r4, r1
 800c540:	b932      	cbnz	r2, 800c550 <_scanf_chars+0x1c>
 800c542:	698a      	ldr	r2, [r1, #24]
 800c544:	2a00      	cmp	r2, #0
 800c546:	bf0c      	ite	eq
 800c548:	2201      	moveq	r2, #1
 800c54a:	f04f 32ff 	movne.w	r2, #4294967295
 800c54e:	608a      	str	r2, [r1, #8]
 800c550:	6822      	ldr	r2, [r4, #0]
 800c552:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800c5e4 <_scanf_chars+0xb0>
 800c556:	06d1      	lsls	r1, r2, #27
 800c558:	bf5f      	itttt	pl
 800c55a:	681a      	ldrpl	r2, [r3, #0]
 800c55c:	1d11      	addpl	r1, r2, #4
 800c55e:	6019      	strpl	r1, [r3, #0]
 800c560:	6816      	ldrpl	r6, [r2, #0]
 800c562:	2700      	movs	r7, #0
 800c564:	69a0      	ldr	r0, [r4, #24]
 800c566:	b188      	cbz	r0, 800c58c <_scanf_chars+0x58>
 800c568:	2801      	cmp	r0, #1
 800c56a:	d107      	bne.n	800c57c <_scanf_chars+0x48>
 800c56c:	682a      	ldr	r2, [r5, #0]
 800c56e:	7811      	ldrb	r1, [r2, #0]
 800c570:	6962      	ldr	r2, [r4, #20]
 800c572:	5c52      	ldrb	r2, [r2, r1]
 800c574:	b952      	cbnz	r2, 800c58c <_scanf_chars+0x58>
 800c576:	2f00      	cmp	r7, #0
 800c578:	d031      	beq.n	800c5de <_scanf_chars+0xaa>
 800c57a:	e022      	b.n	800c5c2 <_scanf_chars+0x8e>
 800c57c:	2802      	cmp	r0, #2
 800c57e:	d120      	bne.n	800c5c2 <_scanf_chars+0x8e>
 800c580:	682b      	ldr	r3, [r5, #0]
 800c582:	781b      	ldrb	r3, [r3, #0]
 800c584:	f813 3009 	ldrb.w	r3, [r3, r9]
 800c588:	071b      	lsls	r3, r3, #28
 800c58a:	d41a      	bmi.n	800c5c2 <_scanf_chars+0x8e>
 800c58c:	6823      	ldr	r3, [r4, #0]
 800c58e:	06da      	lsls	r2, r3, #27
 800c590:	bf5e      	ittt	pl
 800c592:	682b      	ldrpl	r3, [r5, #0]
 800c594:	781b      	ldrbpl	r3, [r3, #0]
 800c596:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c59a:	682a      	ldr	r2, [r5, #0]
 800c59c:	686b      	ldr	r3, [r5, #4]
 800c59e:	3201      	adds	r2, #1
 800c5a0:	602a      	str	r2, [r5, #0]
 800c5a2:	68a2      	ldr	r2, [r4, #8]
 800c5a4:	3b01      	subs	r3, #1
 800c5a6:	3a01      	subs	r2, #1
 800c5a8:	606b      	str	r3, [r5, #4]
 800c5aa:	3701      	adds	r7, #1
 800c5ac:	60a2      	str	r2, [r4, #8]
 800c5ae:	b142      	cbz	r2, 800c5c2 <_scanf_chars+0x8e>
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	dcd7      	bgt.n	800c564 <_scanf_chars+0x30>
 800c5b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c5b8:	4629      	mov	r1, r5
 800c5ba:	4640      	mov	r0, r8
 800c5bc:	4798      	blx	r3
 800c5be:	2800      	cmp	r0, #0
 800c5c0:	d0d0      	beq.n	800c564 <_scanf_chars+0x30>
 800c5c2:	6823      	ldr	r3, [r4, #0]
 800c5c4:	f013 0310 	ands.w	r3, r3, #16
 800c5c8:	d105      	bne.n	800c5d6 <_scanf_chars+0xa2>
 800c5ca:	68e2      	ldr	r2, [r4, #12]
 800c5cc:	3201      	adds	r2, #1
 800c5ce:	60e2      	str	r2, [r4, #12]
 800c5d0:	69a2      	ldr	r2, [r4, #24]
 800c5d2:	b102      	cbz	r2, 800c5d6 <_scanf_chars+0xa2>
 800c5d4:	7033      	strb	r3, [r6, #0]
 800c5d6:	6923      	ldr	r3, [r4, #16]
 800c5d8:	443b      	add	r3, r7
 800c5da:	6123      	str	r3, [r4, #16]
 800c5dc:	2000      	movs	r0, #0
 800c5de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5e2:	bf00      	nop
 800c5e4:	0800d7cf 	.word	0x0800d7cf

0800c5e8 <_scanf_i>:
 800c5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5ec:	4698      	mov	r8, r3
 800c5ee:	4b76      	ldr	r3, [pc, #472]	; (800c7c8 <_scanf_i+0x1e0>)
 800c5f0:	460c      	mov	r4, r1
 800c5f2:	4682      	mov	sl, r0
 800c5f4:	4616      	mov	r6, r2
 800c5f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c5fa:	b087      	sub	sp, #28
 800c5fc:	ab03      	add	r3, sp, #12
 800c5fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c602:	4b72      	ldr	r3, [pc, #456]	; (800c7cc <_scanf_i+0x1e4>)
 800c604:	69a1      	ldr	r1, [r4, #24]
 800c606:	4a72      	ldr	r2, [pc, #456]	; (800c7d0 <_scanf_i+0x1e8>)
 800c608:	2903      	cmp	r1, #3
 800c60a:	bf18      	it	ne
 800c60c:	461a      	movne	r2, r3
 800c60e:	68a3      	ldr	r3, [r4, #8]
 800c610:	9201      	str	r2, [sp, #4]
 800c612:	1e5a      	subs	r2, r3, #1
 800c614:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c618:	bf88      	it	hi
 800c61a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c61e:	4627      	mov	r7, r4
 800c620:	bf82      	ittt	hi
 800c622:	eb03 0905 	addhi.w	r9, r3, r5
 800c626:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c62a:	60a3      	strhi	r3, [r4, #8]
 800c62c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c630:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c634:	bf98      	it	ls
 800c636:	f04f 0900 	movls.w	r9, #0
 800c63a:	6023      	str	r3, [r4, #0]
 800c63c:	463d      	mov	r5, r7
 800c63e:	f04f 0b00 	mov.w	fp, #0
 800c642:	6831      	ldr	r1, [r6, #0]
 800c644:	ab03      	add	r3, sp, #12
 800c646:	7809      	ldrb	r1, [r1, #0]
 800c648:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c64c:	2202      	movs	r2, #2
 800c64e:	f7f3 fde7 	bl	8000220 <memchr>
 800c652:	b328      	cbz	r0, 800c6a0 <_scanf_i+0xb8>
 800c654:	f1bb 0f01 	cmp.w	fp, #1
 800c658:	d159      	bne.n	800c70e <_scanf_i+0x126>
 800c65a:	6862      	ldr	r2, [r4, #4]
 800c65c:	b92a      	cbnz	r2, 800c66a <_scanf_i+0x82>
 800c65e:	6822      	ldr	r2, [r4, #0]
 800c660:	2308      	movs	r3, #8
 800c662:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c666:	6063      	str	r3, [r4, #4]
 800c668:	6022      	str	r2, [r4, #0]
 800c66a:	6822      	ldr	r2, [r4, #0]
 800c66c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c670:	6022      	str	r2, [r4, #0]
 800c672:	68a2      	ldr	r2, [r4, #8]
 800c674:	1e51      	subs	r1, r2, #1
 800c676:	60a1      	str	r1, [r4, #8]
 800c678:	b192      	cbz	r2, 800c6a0 <_scanf_i+0xb8>
 800c67a:	6832      	ldr	r2, [r6, #0]
 800c67c:	1c51      	adds	r1, r2, #1
 800c67e:	6031      	str	r1, [r6, #0]
 800c680:	7812      	ldrb	r2, [r2, #0]
 800c682:	f805 2b01 	strb.w	r2, [r5], #1
 800c686:	6872      	ldr	r2, [r6, #4]
 800c688:	3a01      	subs	r2, #1
 800c68a:	2a00      	cmp	r2, #0
 800c68c:	6072      	str	r2, [r6, #4]
 800c68e:	dc07      	bgt.n	800c6a0 <_scanf_i+0xb8>
 800c690:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800c694:	4631      	mov	r1, r6
 800c696:	4650      	mov	r0, sl
 800c698:	4790      	blx	r2
 800c69a:	2800      	cmp	r0, #0
 800c69c:	f040 8085 	bne.w	800c7aa <_scanf_i+0x1c2>
 800c6a0:	f10b 0b01 	add.w	fp, fp, #1
 800c6a4:	f1bb 0f03 	cmp.w	fp, #3
 800c6a8:	d1cb      	bne.n	800c642 <_scanf_i+0x5a>
 800c6aa:	6863      	ldr	r3, [r4, #4]
 800c6ac:	b90b      	cbnz	r3, 800c6b2 <_scanf_i+0xca>
 800c6ae:	230a      	movs	r3, #10
 800c6b0:	6063      	str	r3, [r4, #4]
 800c6b2:	6863      	ldr	r3, [r4, #4]
 800c6b4:	4947      	ldr	r1, [pc, #284]	; (800c7d4 <_scanf_i+0x1ec>)
 800c6b6:	6960      	ldr	r0, [r4, #20]
 800c6b8:	1ac9      	subs	r1, r1, r3
 800c6ba:	f000 f88d 	bl	800c7d8 <__sccl>
 800c6be:	f04f 0b00 	mov.w	fp, #0
 800c6c2:	68a3      	ldr	r3, [r4, #8]
 800c6c4:	6822      	ldr	r2, [r4, #0]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d03d      	beq.n	800c746 <_scanf_i+0x15e>
 800c6ca:	6831      	ldr	r1, [r6, #0]
 800c6cc:	6960      	ldr	r0, [r4, #20]
 800c6ce:	f891 c000 	ldrb.w	ip, [r1]
 800c6d2:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c6d6:	2800      	cmp	r0, #0
 800c6d8:	d035      	beq.n	800c746 <_scanf_i+0x15e>
 800c6da:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800c6de:	d124      	bne.n	800c72a <_scanf_i+0x142>
 800c6e0:	0510      	lsls	r0, r2, #20
 800c6e2:	d522      	bpl.n	800c72a <_scanf_i+0x142>
 800c6e4:	f10b 0b01 	add.w	fp, fp, #1
 800c6e8:	f1b9 0f00 	cmp.w	r9, #0
 800c6ec:	d003      	beq.n	800c6f6 <_scanf_i+0x10e>
 800c6ee:	3301      	adds	r3, #1
 800c6f0:	f109 39ff 	add.w	r9, r9, #4294967295
 800c6f4:	60a3      	str	r3, [r4, #8]
 800c6f6:	6873      	ldr	r3, [r6, #4]
 800c6f8:	3b01      	subs	r3, #1
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	6073      	str	r3, [r6, #4]
 800c6fe:	dd1b      	ble.n	800c738 <_scanf_i+0x150>
 800c700:	6833      	ldr	r3, [r6, #0]
 800c702:	3301      	adds	r3, #1
 800c704:	6033      	str	r3, [r6, #0]
 800c706:	68a3      	ldr	r3, [r4, #8]
 800c708:	3b01      	subs	r3, #1
 800c70a:	60a3      	str	r3, [r4, #8]
 800c70c:	e7d9      	b.n	800c6c2 <_scanf_i+0xda>
 800c70e:	f1bb 0f02 	cmp.w	fp, #2
 800c712:	d1ae      	bne.n	800c672 <_scanf_i+0x8a>
 800c714:	6822      	ldr	r2, [r4, #0]
 800c716:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c71a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c71e:	d1bf      	bne.n	800c6a0 <_scanf_i+0xb8>
 800c720:	2310      	movs	r3, #16
 800c722:	6063      	str	r3, [r4, #4]
 800c724:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c728:	e7a2      	b.n	800c670 <_scanf_i+0x88>
 800c72a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800c72e:	6022      	str	r2, [r4, #0]
 800c730:	780b      	ldrb	r3, [r1, #0]
 800c732:	f805 3b01 	strb.w	r3, [r5], #1
 800c736:	e7de      	b.n	800c6f6 <_scanf_i+0x10e>
 800c738:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c73c:	4631      	mov	r1, r6
 800c73e:	4650      	mov	r0, sl
 800c740:	4798      	blx	r3
 800c742:	2800      	cmp	r0, #0
 800c744:	d0df      	beq.n	800c706 <_scanf_i+0x11e>
 800c746:	6823      	ldr	r3, [r4, #0]
 800c748:	05db      	lsls	r3, r3, #23
 800c74a:	d50d      	bpl.n	800c768 <_scanf_i+0x180>
 800c74c:	42bd      	cmp	r5, r7
 800c74e:	d909      	bls.n	800c764 <_scanf_i+0x17c>
 800c750:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c754:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c758:	4632      	mov	r2, r6
 800c75a:	4650      	mov	r0, sl
 800c75c:	4798      	blx	r3
 800c75e:	f105 39ff 	add.w	r9, r5, #4294967295
 800c762:	464d      	mov	r5, r9
 800c764:	42bd      	cmp	r5, r7
 800c766:	d02d      	beq.n	800c7c4 <_scanf_i+0x1dc>
 800c768:	6822      	ldr	r2, [r4, #0]
 800c76a:	f012 0210 	ands.w	r2, r2, #16
 800c76e:	d113      	bne.n	800c798 <_scanf_i+0x1b0>
 800c770:	702a      	strb	r2, [r5, #0]
 800c772:	6863      	ldr	r3, [r4, #4]
 800c774:	9e01      	ldr	r6, [sp, #4]
 800c776:	4639      	mov	r1, r7
 800c778:	4650      	mov	r0, sl
 800c77a:	47b0      	blx	r6
 800c77c:	6821      	ldr	r1, [r4, #0]
 800c77e:	f8d8 3000 	ldr.w	r3, [r8]
 800c782:	f011 0f20 	tst.w	r1, #32
 800c786:	d013      	beq.n	800c7b0 <_scanf_i+0x1c8>
 800c788:	1d1a      	adds	r2, r3, #4
 800c78a:	f8c8 2000 	str.w	r2, [r8]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	6018      	str	r0, [r3, #0]
 800c792:	68e3      	ldr	r3, [r4, #12]
 800c794:	3301      	adds	r3, #1
 800c796:	60e3      	str	r3, [r4, #12]
 800c798:	1bed      	subs	r5, r5, r7
 800c79a:	44ab      	add	fp, r5
 800c79c:	6925      	ldr	r5, [r4, #16]
 800c79e:	445d      	add	r5, fp
 800c7a0:	6125      	str	r5, [r4, #16]
 800c7a2:	2000      	movs	r0, #0
 800c7a4:	b007      	add	sp, #28
 800c7a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7aa:	f04f 0b00 	mov.w	fp, #0
 800c7ae:	e7ca      	b.n	800c746 <_scanf_i+0x15e>
 800c7b0:	1d1a      	adds	r2, r3, #4
 800c7b2:	f8c8 2000 	str.w	r2, [r8]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	f011 0f01 	tst.w	r1, #1
 800c7bc:	bf14      	ite	ne
 800c7be:	8018      	strhne	r0, [r3, #0]
 800c7c0:	6018      	streq	r0, [r3, #0]
 800c7c2:	e7e6      	b.n	800c792 <_scanf_i+0x1aa>
 800c7c4:	2001      	movs	r0, #1
 800c7c6:	e7ed      	b.n	800c7a4 <_scanf_i+0x1bc>
 800c7c8:	0800d588 	.word	0x0800d588
 800c7cc:	0800ca35 	.word	0x0800ca35
 800c7d0:	0800c94d 	.word	0x0800c94d
 800c7d4:	0800d7cc 	.word	0x0800d7cc

0800c7d8 <__sccl>:
 800c7d8:	b570      	push	{r4, r5, r6, lr}
 800c7da:	780b      	ldrb	r3, [r1, #0]
 800c7dc:	4604      	mov	r4, r0
 800c7de:	2b5e      	cmp	r3, #94	; 0x5e
 800c7e0:	bf0b      	itete	eq
 800c7e2:	784b      	ldrbeq	r3, [r1, #1]
 800c7e4:	1c48      	addne	r0, r1, #1
 800c7e6:	1c88      	addeq	r0, r1, #2
 800c7e8:	2200      	movne	r2, #0
 800c7ea:	bf08      	it	eq
 800c7ec:	2201      	moveq	r2, #1
 800c7ee:	1e61      	subs	r1, r4, #1
 800c7f0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800c7f4:	f801 2f01 	strb.w	r2, [r1, #1]!
 800c7f8:	42a9      	cmp	r1, r5
 800c7fa:	d1fb      	bne.n	800c7f4 <__sccl+0x1c>
 800c7fc:	b90b      	cbnz	r3, 800c802 <__sccl+0x2a>
 800c7fe:	3801      	subs	r0, #1
 800c800:	bd70      	pop	{r4, r5, r6, pc}
 800c802:	f082 0201 	eor.w	r2, r2, #1
 800c806:	54e2      	strb	r2, [r4, r3]
 800c808:	4605      	mov	r5, r0
 800c80a:	4628      	mov	r0, r5
 800c80c:	f810 1b01 	ldrb.w	r1, [r0], #1
 800c810:	292d      	cmp	r1, #45	; 0x2d
 800c812:	d006      	beq.n	800c822 <__sccl+0x4a>
 800c814:	295d      	cmp	r1, #93	; 0x5d
 800c816:	d0f3      	beq.n	800c800 <__sccl+0x28>
 800c818:	b909      	cbnz	r1, 800c81e <__sccl+0x46>
 800c81a:	4628      	mov	r0, r5
 800c81c:	e7f0      	b.n	800c800 <__sccl+0x28>
 800c81e:	460b      	mov	r3, r1
 800c820:	e7f1      	b.n	800c806 <__sccl+0x2e>
 800c822:	786e      	ldrb	r6, [r5, #1]
 800c824:	2e5d      	cmp	r6, #93	; 0x5d
 800c826:	d0fa      	beq.n	800c81e <__sccl+0x46>
 800c828:	42b3      	cmp	r3, r6
 800c82a:	dcf8      	bgt.n	800c81e <__sccl+0x46>
 800c82c:	3502      	adds	r5, #2
 800c82e:	4619      	mov	r1, r3
 800c830:	3101      	adds	r1, #1
 800c832:	428e      	cmp	r6, r1
 800c834:	5462      	strb	r2, [r4, r1]
 800c836:	dcfb      	bgt.n	800c830 <__sccl+0x58>
 800c838:	1af1      	subs	r1, r6, r3
 800c83a:	3901      	subs	r1, #1
 800c83c:	1c58      	adds	r0, r3, #1
 800c83e:	42b3      	cmp	r3, r6
 800c840:	bfa8      	it	ge
 800c842:	2100      	movge	r1, #0
 800c844:	1843      	adds	r3, r0, r1
 800c846:	e7e0      	b.n	800c80a <__sccl+0x32>

0800c848 <_strtol_l.constprop.0>:
 800c848:	2b01      	cmp	r3, #1
 800c84a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c84e:	d001      	beq.n	800c854 <_strtol_l.constprop.0+0xc>
 800c850:	2b24      	cmp	r3, #36	; 0x24
 800c852:	d906      	bls.n	800c862 <_strtol_l.constprop.0+0x1a>
 800c854:	f7ff f8ea 	bl	800ba2c <__errno>
 800c858:	2316      	movs	r3, #22
 800c85a:	6003      	str	r3, [r0, #0]
 800c85c:	2000      	movs	r0, #0
 800c85e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c862:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c948 <_strtol_l.constprop.0+0x100>
 800c866:	460d      	mov	r5, r1
 800c868:	462e      	mov	r6, r5
 800c86a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c86e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c872:	f017 0708 	ands.w	r7, r7, #8
 800c876:	d1f7      	bne.n	800c868 <_strtol_l.constprop.0+0x20>
 800c878:	2c2d      	cmp	r4, #45	; 0x2d
 800c87a:	d132      	bne.n	800c8e2 <_strtol_l.constprop.0+0x9a>
 800c87c:	782c      	ldrb	r4, [r5, #0]
 800c87e:	2701      	movs	r7, #1
 800c880:	1cb5      	adds	r5, r6, #2
 800c882:	2b00      	cmp	r3, #0
 800c884:	d05b      	beq.n	800c93e <_strtol_l.constprop.0+0xf6>
 800c886:	2b10      	cmp	r3, #16
 800c888:	d109      	bne.n	800c89e <_strtol_l.constprop.0+0x56>
 800c88a:	2c30      	cmp	r4, #48	; 0x30
 800c88c:	d107      	bne.n	800c89e <_strtol_l.constprop.0+0x56>
 800c88e:	782c      	ldrb	r4, [r5, #0]
 800c890:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c894:	2c58      	cmp	r4, #88	; 0x58
 800c896:	d14d      	bne.n	800c934 <_strtol_l.constprop.0+0xec>
 800c898:	786c      	ldrb	r4, [r5, #1]
 800c89a:	2310      	movs	r3, #16
 800c89c:	3502      	adds	r5, #2
 800c89e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c8a2:	f108 38ff 	add.w	r8, r8, #4294967295
 800c8a6:	f04f 0c00 	mov.w	ip, #0
 800c8aa:	fbb8 f9f3 	udiv	r9, r8, r3
 800c8ae:	4666      	mov	r6, ip
 800c8b0:	fb03 8a19 	mls	sl, r3, r9, r8
 800c8b4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c8b8:	f1be 0f09 	cmp.w	lr, #9
 800c8bc:	d816      	bhi.n	800c8ec <_strtol_l.constprop.0+0xa4>
 800c8be:	4674      	mov	r4, lr
 800c8c0:	42a3      	cmp	r3, r4
 800c8c2:	dd24      	ble.n	800c90e <_strtol_l.constprop.0+0xc6>
 800c8c4:	f1bc 0f00 	cmp.w	ip, #0
 800c8c8:	db1e      	blt.n	800c908 <_strtol_l.constprop.0+0xc0>
 800c8ca:	45b1      	cmp	r9, r6
 800c8cc:	d31c      	bcc.n	800c908 <_strtol_l.constprop.0+0xc0>
 800c8ce:	d101      	bne.n	800c8d4 <_strtol_l.constprop.0+0x8c>
 800c8d0:	45a2      	cmp	sl, r4
 800c8d2:	db19      	blt.n	800c908 <_strtol_l.constprop.0+0xc0>
 800c8d4:	fb06 4603 	mla	r6, r6, r3, r4
 800c8d8:	f04f 0c01 	mov.w	ip, #1
 800c8dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c8e0:	e7e8      	b.n	800c8b4 <_strtol_l.constprop.0+0x6c>
 800c8e2:	2c2b      	cmp	r4, #43	; 0x2b
 800c8e4:	bf04      	itt	eq
 800c8e6:	782c      	ldrbeq	r4, [r5, #0]
 800c8e8:	1cb5      	addeq	r5, r6, #2
 800c8ea:	e7ca      	b.n	800c882 <_strtol_l.constprop.0+0x3a>
 800c8ec:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c8f0:	f1be 0f19 	cmp.w	lr, #25
 800c8f4:	d801      	bhi.n	800c8fa <_strtol_l.constprop.0+0xb2>
 800c8f6:	3c37      	subs	r4, #55	; 0x37
 800c8f8:	e7e2      	b.n	800c8c0 <_strtol_l.constprop.0+0x78>
 800c8fa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c8fe:	f1be 0f19 	cmp.w	lr, #25
 800c902:	d804      	bhi.n	800c90e <_strtol_l.constprop.0+0xc6>
 800c904:	3c57      	subs	r4, #87	; 0x57
 800c906:	e7db      	b.n	800c8c0 <_strtol_l.constprop.0+0x78>
 800c908:	f04f 3cff 	mov.w	ip, #4294967295
 800c90c:	e7e6      	b.n	800c8dc <_strtol_l.constprop.0+0x94>
 800c90e:	f1bc 0f00 	cmp.w	ip, #0
 800c912:	da05      	bge.n	800c920 <_strtol_l.constprop.0+0xd8>
 800c914:	2322      	movs	r3, #34	; 0x22
 800c916:	6003      	str	r3, [r0, #0]
 800c918:	4646      	mov	r6, r8
 800c91a:	b942      	cbnz	r2, 800c92e <_strtol_l.constprop.0+0xe6>
 800c91c:	4630      	mov	r0, r6
 800c91e:	e79e      	b.n	800c85e <_strtol_l.constprop.0+0x16>
 800c920:	b107      	cbz	r7, 800c924 <_strtol_l.constprop.0+0xdc>
 800c922:	4276      	negs	r6, r6
 800c924:	2a00      	cmp	r2, #0
 800c926:	d0f9      	beq.n	800c91c <_strtol_l.constprop.0+0xd4>
 800c928:	f1bc 0f00 	cmp.w	ip, #0
 800c92c:	d000      	beq.n	800c930 <_strtol_l.constprop.0+0xe8>
 800c92e:	1e69      	subs	r1, r5, #1
 800c930:	6011      	str	r1, [r2, #0]
 800c932:	e7f3      	b.n	800c91c <_strtol_l.constprop.0+0xd4>
 800c934:	2430      	movs	r4, #48	; 0x30
 800c936:	2b00      	cmp	r3, #0
 800c938:	d1b1      	bne.n	800c89e <_strtol_l.constprop.0+0x56>
 800c93a:	2308      	movs	r3, #8
 800c93c:	e7af      	b.n	800c89e <_strtol_l.constprop.0+0x56>
 800c93e:	2c30      	cmp	r4, #48	; 0x30
 800c940:	d0a5      	beq.n	800c88e <_strtol_l.constprop.0+0x46>
 800c942:	230a      	movs	r3, #10
 800c944:	e7ab      	b.n	800c89e <_strtol_l.constprop.0+0x56>
 800c946:	bf00      	nop
 800c948:	0800d7cf 	.word	0x0800d7cf

0800c94c <_strtol_r>:
 800c94c:	f7ff bf7c 	b.w	800c848 <_strtol_l.constprop.0>

0800c950 <_strtoul_l.constprop.0>:
 800c950:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c954:	4f36      	ldr	r7, [pc, #216]	; (800ca30 <_strtoul_l.constprop.0+0xe0>)
 800c956:	4686      	mov	lr, r0
 800c958:	460d      	mov	r5, r1
 800c95a:	4628      	mov	r0, r5
 800c95c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c960:	5de6      	ldrb	r6, [r4, r7]
 800c962:	f016 0608 	ands.w	r6, r6, #8
 800c966:	d1f8      	bne.n	800c95a <_strtoul_l.constprop.0+0xa>
 800c968:	2c2d      	cmp	r4, #45	; 0x2d
 800c96a:	d12f      	bne.n	800c9cc <_strtoul_l.constprop.0+0x7c>
 800c96c:	782c      	ldrb	r4, [r5, #0]
 800c96e:	2601      	movs	r6, #1
 800c970:	1c85      	adds	r5, r0, #2
 800c972:	2b00      	cmp	r3, #0
 800c974:	d057      	beq.n	800ca26 <_strtoul_l.constprop.0+0xd6>
 800c976:	2b10      	cmp	r3, #16
 800c978:	d109      	bne.n	800c98e <_strtoul_l.constprop.0+0x3e>
 800c97a:	2c30      	cmp	r4, #48	; 0x30
 800c97c:	d107      	bne.n	800c98e <_strtoul_l.constprop.0+0x3e>
 800c97e:	7828      	ldrb	r0, [r5, #0]
 800c980:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800c984:	2858      	cmp	r0, #88	; 0x58
 800c986:	d149      	bne.n	800ca1c <_strtoul_l.constprop.0+0xcc>
 800c988:	786c      	ldrb	r4, [r5, #1]
 800c98a:	2310      	movs	r3, #16
 800c98c:	3502      	adds	r5, #2
 800c98e:	f04f 38ff 	mov.w	r8, #4294967295
 800c992:	2700      	movs	r7, #0
 800c994:	fbb8 f8f3 	udiv	r8, r8, r3
 800c998:	fb03 f908 	mul.w	r9, r3, r8
 800c99c:	ea6f 0909 	mvn.w	r9, r9
 800c9a0:	4638      	mov	r0, r7
 800c9a2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c9a6:	f1bc 0f09 	cmp.w	ip, #9
 800c9aa:	d814      	bhi.n	800c9d6 <_strtoul_l.constprop.0+0x86>
 800c9ac:	4664      	mov	r4, ip
 800c9ae:	42a3      	cmp	r3, r4
 800c9b0:	dd22      	ble.n	800c9f8 <_strtoul_l.constprop.0+0xa8>
 800c9b2:	2f00      	cmp	r7, #0
 800c9b4:	db1d      	blt.n	800c9f2 <_strtoul_l.constprop.0+0xa2>
 800c9b6:	4580      	cmp	r8, r0
 800c9b8:	d31b      	bcc.n	800c9f2 <_strtoul_l.constprop.0+0xa2>
 800c9ba:	d101      	bne.n	800c9c0 <_strtoul_l.constprop.0+0x70>
 800c9bc:	45a1      	cmp	r9, r4
 800c9be:	db18      	blt.n	800c9f2 <_strtoul_l.constprop.0+0xa2>
 800c9c0:	fb00 4003 	mla	r0, r0, r3, r4
 800c9c4:	2701      	movs	r7, #1
 800c9c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c9ca:	e7ea      	b.n	800c9a2 <_strtoul_l.constprop.0+0x52>
 800c9cc:	2c2b      	cmp	r4, #43	; 0x2b
 800c9ce:	bf04      	itt	eq
 800c9d0:	782c      	ldrbeq	r4, [r5, #0]
 800c9d2:	1c85      	addeq	r5, r0, #2
 800c9d4:	e7cd      	b.n	800c972 <_strtoul_l.constprop.0+0x22>
 800c9d6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c9da:	f1bc 0f19 	cmp.w	ip, #25
 800c9de:	d801      	bhi.n	800c9e4 <_strtoul_l.constprop.0+0x94>
 800c9e0:	3c37      	subs	r4, #55	; 0x37
 800c9e2:	e7e4      	b.n	800c9ae <_strtoul_l.constprop.0+0x5e>
 800c9e4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c9e8:	f1bc 0f19 	cmp.w	ip, #25
 800c9ec:	d804      	bhi.n	800c9f8 <_strtoul_l.constprop.0+0xa8>
 800c9ee:	3c57      	subs	r4, #87	; 0x57
 800c9f0:	e7dd      	b.n	800c9ae <_strtoul_l.constprop.0+0x5e>
 800c9f2:	f04f 37ff 	mov.w	r7, #4294967295
 800c9f6:	e7e6      	b.n	800c9c6 <_strtoul_l.constprop.0+0x76>
 800c9f8:	2f00      	cmp	r7, #0
 800c9fa:	da07      	bge.n	800ca0c <_strtoul_l.constprop.0+0xbc>
 800c9fc:	2322      	movs	r3, #34	; 0x22
 800c9fe:	f8ce 3000 	str.w	r3, [lr]
 800ca02:	f04f 30ff 	mov.w	r0, #4294967295
 800ca06:	b932      	cbnz	r2, 800ca16 <_strtoul_l.constprop.0+0xc6>
 800ca08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca0c:	b106      	cbz	r6, 800ca10 <_strtoul_l.constprop.0+0xc0>
 800ca0e:	4240      	negs	r0, r0
 800ca10:	2a00      	cmp	r2, #0
 800ca12:	d0f9      	beq.n	800ca08 <_strtoul_l.constprop.0+0xb8>
 800ca14:	b107      	cbz	r7, 800ca18 <_strtoul_l.constprop.0+0xc8>
 800ca16:	1e69      	subs	r1, r5, #1
 800ca18:	6011      	str	r1, [r2, #0]
 800ca1a:	e7f5      	b.n	800ca08 <_strtoul_l.constprop.0+0xb8>
 800ca1c:	2430      	movs	r4, #48	; 0x30
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d1b5      	bne.n	800c98e <_strtoul_l.constprop.0+0x3e>
 800ca22:	2308      	movs	r3, #8
 800ca24:	e7b3      	b.n	800c98e <_strtoul_l.constprop.0+0x3e>
 800ca26:	2c30      	cmp	r4, #48	; 0x30
 800ca28:	d0a9      	beq.n	800c97e <_strtoul_l.constprop.0+0x2e>
 800ca2a:	230a      	movs	r3, #10
 800ca2c:	e7af      	b.n	800c98e <_strtoul_l.constprop.0+0x3e>
 800ca2e:	bf00      	nop
 800ca30:	0800d7cf 	.word	0x0800d7cf

0800ca34 <_strtoul_r>:
 800ca34:	f7ff bf8c 	b.w	800c950 <_strtoul_l.constprop.0>

0800ca38 <__submore>:
 800ca38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca3c:	460c      	mov	r4, r1
 800ca3e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ca40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca44:	4299      	cmp	r1, r3
 800ca46:	d11d      	bne.n	800ca84 <__submore+0x4c>
 800ca48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ca4c:	f000 f8b6 	bl	800cbbc <_malloc_r>
 800ca50:	b918      	cbnz	r0, 800ca5a <__submore+0x22>
 800ca52:	f04f 30ff 	mov.w	r0, #4294967295
 800ca56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca5e:	63a3      	str	r3, [r4, #56]	; 0x38
 800ca60:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ca64:	6360      	str	r0, [r4, #52]	; 0x34
 800ca66:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800ca6a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ca6e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800ca72:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ca76:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800ca7a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800ca7e:	6020      	str	r0, [r4, #0]
 800ca80:	2000      	movs	r0, #0
 800ca82:	e7e8      	b.n	800ca56 <__submore+0x1e>
 800ca84:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800ca86:	0077      	lsls	r7, r6, #1
 800ca88:	463a      	mov	r2, r7
 800ca8a:	f000 f90b 	bl	800cca4 <_realloc_r>
 800ca8e:	4605      	mov	r5, r0
 800ca90:	2800      	cmp	r0, #0
 800ca92:	d0de      	beq.n	800ca52 <__submore+0x1a>
 800ca94:	eb00 0806 	add.w	r8, r0, r6
 800ca98:	4601      	mov	r1, r0
 800ca9a:	4632      	mov	r2, r6
 800ca9c:	4640      	mov	r0, r8
 800ca9e:	f7fe ffef 	bl	800ba80 <memcpy>
 800caa2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800caa6:	f8c4 8000 	str.w	r8, [r4]
 800caaa:	e7e9      	b.n	800ca80 <__submore+0x48>

0800caac <__retarget_lock_acquire_recursive>:
 800caac:	4770      	bx	lr

0800caae <__retarget_lock_release_recursive>:
 800caae:	4770      	bx	lr

0800cab0 <memmove>:
 800cab0:	4288      	cmp	r0, r1
 800cab2:	b510      	push	{r4, lr}
 800cab4:	eb01 0402 	add.w	r4, r1, r2
 800cab8:	d902      	bls.n	800cac0 <memmove+0x10>
 800caba:	4284      	cmp	r4, r0
 800cabc:	4623      	mov	r3, r4
 800cabe:	d807      	bhi.n	800cad0 <memmove+0x20>
 800cac0:	1e43      	subs	r3, r0, #1
 800cac2:	42a1      	cmp	r1, r4
 800cac4:	d008      	beq.n	800cad8 <memmove+0x28>
 800cac6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800caca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cace:	e7f8      	b.n	800cac2 <memmove+0x12>
 800cad0:	4402      	add	r2, r0
 800cad2:	4601      	mov	r1, r0
 800cad4:	428a      	cmp	r2, r1
 800cad6:	d100      	bne.n	800cada <memmove+0x2a>
 800cad8:	bd10      	pop	{r4, pc}
 800cada:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cade:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cae2:	e7f7      	b.n	800cad4 <memmove+0x24>

0800cae4 <_free_r>:
 800cae4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cae6:	2900      	cmp	r1, #0
 800cae8:	d044      	beq.n	800cb74 <_free_r+0x90>
 800caea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800caee:	9001      	str	r0, [sp, #4]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	f1a1 0404 	sub.w	r4, r1, #4
 800caf6:	bfb8      	it	lt
 800caf8:	18e4      	addlt	r4, r4, r3
 800cafa:	f000 f913 	bl	800cd24 <__malloc_lock>
 800cafe:	4a1e      	ldr	r2, [pc, #120]	; (800cb78 <_free_r+0x94>)
 800cb00:	9801      	ldr	r0, [sp, #4]
 800cb02:	6813      	ldr	r3, [r2, #0]
 800cb04:	b933      	cbnz	r3, 800cb14 <_free_r+0x30>
 800cb06:	6063      	str	r3, [r4, #4]
 800cb08:	6014      	str	r4, [r2, #0]
 800cb0a:	b003      	add	sp, #12
 800cb0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cb10:	f000 b90e 	b.w	800cd30 <__malloc_unlock>
 800cb14:	42a3      	cmp	r3, r4
 800cb16:	d908      	bls.n	800cb2a <_free_r+0x46>
 800cb18:	6825      	ldr	r5, [r4, #0]
 800cb1a:	1961      	adds	r1, r4, r5
 800cb1c:	428b      	cmp	r3, r1
 800cb1e:	bf01      	itttt	eq
 800cb20:	6819      	ldreq	r1, [r3, #0]
 800cb22:	685b      	ldreq	r3, [r3, #4]
 800cb24:	1949      	addeq	r1, r1, r5
 800cb26:	6021      	streq	r1, [r4, #0]
 800cb28:	e7ed      	b.n	800cb06 <_free_r+0x22>
 800cb2a:	461a      	mov	r2, r3
 800cb2c:	685b      	ldr	r3, [r3, #4]
 800cb2e:	b10b      	cbz	r3, 800cb34 <_free_r+0x50>
 800cb30:	42a3      	cmp	r3, r4
 800cb32:	d9fa      	bls.n	800cb2a <_free_r+0x46>
 800cb34:	6811      	ldr	r1, [r2, #0]
 800cb36:	1855      	adds	r5, r2, r1
 800cb38:	42a5      	cmp	r5, r4
 800cb3a:	d10b      	bne.n	800cb54 <_free_r+0x70>
 800cb3c:	6824      	ldr	r4, [r4, #0]
 800cb3e:	4421      	add	r1, r4
 800cb40:	1854      	adds	r4, r2, r1
 800cb42:	42a3      	cmp	r3, r4
 800cb44:	6011      	str	r1, [r2, #0]
 800cb46:	d1e0      	bne.n	800cb0a <_free_r+0x26>
 800cb48:	681c      	ldr	r4, [r3, #0]
 800cb4a:	685b      	ldr	r3, [r3, #4]
 800cb4c:	6053      	str	r3, [r2, #4]
 800cb4e:	4421      	add	r1, r4
 800cb50:	6011      	str	r1, [r2, #0]
 800cb52:	e7da      	b.n	800cb0a <_free_r+0x26>
 800cb54:	d902      	bls.n	800cb5c <_free_r+0x78>
 800cb56:	230c      	movs	r3, #12
 800cb58:	6003      	str	r3, [r0, #0]
 800cb5a:	e7d6      	b.n	800cb0a <_free_r+0x26>
 800cb5c:	6825      	ldr	r5, [r4, #0]
 800cb5e:	1961      	adds	r1, r4, r5
 800cb60:	428b      	cmp	r3, r1
 800cb62:	bf04      	itt	eq
 800cb64:	6819      	ldreq	r1, [r3, #0]
 800cb66:	685b      	ldreq	r3, [r3, #4]
 800cb68:	6063      	str	r3, [r4, #4]
 800cb6a:	bf04      	itt	eq
 800cb6c:	1949      	addeq	r1, r1, r5
 800cb6e:	6021      	streq	r1, [r4, #0]
 800cb70:	6054      	str	r4, [r2, #4]
 800cb72:	e7ca      	b.n	800cb0a <_free_r+0x26>
 800cb74:	b003      	add	sp, #12
 800cb76:	bd30      	pop	{r4, r5, pc}
 800cb78:	20005048 	.word	0x20005048

0800cb7c <sbrk_aligned>:
 800cb7c:	b570      	push	{r4, r5, r6, lr}
 800cb7e:	4e0e      	ldr	r6, [pc, #56]	; (800cbb8 <sbrk_aligned+0x3c>)
 800cb80:	460c      	mov	r4, r1
 800cb82:	6831      	ldr	r1, [r6, #0]
 800cb84:	4605      	mov	r5, r0
 800cb86:	b911      	cbnz	r1, 800cb8e <sbrk_aligned+0x12>
 800cb88:	f000 f8bc 	bl	800cd04 <_sbrk_r>
 800cb8c:	6030      	str	r0, [r6, #0]
 800cb8e:	4621      	mov	r1, r4
 800cb90:	4628      	mov	r0, r5
 800cb92:	f000 f8b7 	bl	800cd04 <_sbrk_r>
 800cb96:	1c43      	adds	r3, r0, #1
 800cb98:	d00a      	beq.n	800cbb0 <sbrk_aligned+0x34>
 800cb9a:	1cc4      	adds	r4, r0, #3
 800cb9c:	f024 0403 	bic.w	r4, r4, #3
 800cba0:	42a0      	cmp	r0, r4
 800cba2:	d007      	beq.n	800cbb4 <sbrk_aligned+0x38>
 800cba4:	1a21      	subs	r1, r4, r0
 800cba6:	4628      	mov	r0, r5
 800cba8:	f000 f8ac 	bl	800cd04 <_sbrk_r>
 800cbac:	3001      	adds	r0, #1
 800cbae:	d101      	bne.n	800cbb4 <sbrk_aligned+0x38>
 800cbb0:	f04f 34ff 	mov.w	r4, #4294967295
 800cbb4:	4620      	mov	r0, r4
 800cbb6:	bd70      	pop	{r4, r5, r6, pc}
 800cbb8:	2000504c 	.word	0x2000504c

0800cbbc <_malloc_r>:
 800cbbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbc0:	1ccd      	adds	r5, r1, #3
 800cbc2:	f025 0503 	bic.w	r5, r5, #3
 800cbc6:	3508      	adds	r5, #8
 800cbc8:	2d0c      	cmp	r5, #12
 800cbca:	bf38      	it	cc
 800cbcc:	250c      	movcc	r5, #12
 800cbce:	2d00      	cmp	r5, #0
 800cbd0:	4607      	mov	r7, r0
 800cbd2:	db01      	blt.n	800cbd8 <_malloc_r+0x1c>
 800cbd4:	42a9      	cmp	r1, r5
 800cbd6:	d905      	bls.n	800cbe4 <_malloc_r+0x28>
 800cbd8:	230c      	movs	r3, #12
 800cbda:	603b      	str	r3, [r7, #0]
 800cbdc:	2600      	movs	r6, #0
 800cbde:	4630      	mov	r0, r6
 800cbe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbe4:	4e2e      	ldr	r6, [pc, #184]	; (800cca0 <_malloc_r+0xe4>)
 800cbe6:	f000 f89d 	bl	800cd24 <__malloc_lock>
 800cbea:	6833      	ldr	r3, [r6, #0]
 800cbec:	461c      	mov	r4, r3
 800cbee:	bb34      	cbnz	r4, 800cc3e <_malloc_r+0x82>
 800cbf0:	4629      	mov	r1, r5
 800cbf2:	4638      	mov	r0, r7
 800cbf4:	f7ff ffc2 	bl	800cb7c <sbrk_aligned>
 800cbf8:	1c43      	adds	r3, r0, #1
 800cbfa:	4604      	mov	r4, r0
 800cbfc:	d14d      	bne.n	800cc9a <_malloc_r+0xde>
 800cbfe:	6834      	ldr	r4, [r6, #0]
 800cc00:	4626      	mov	r6, r4
 800cc02:	2e00      	cmp	r6, #0
 800cc04:	d140      	bne.n	800cc88 <_malloc_r+0xcc>
 800cc06:	6823      	ldr	r3, [r4, #0]
 800cc08:	4631      	mov	r1, r6
 800cc0a:	4638      	mov	r0, r7
 800cc0c:	eb04 0803 	add.w	r8, r4, r3
 800cc10:	f000 f878 	bl	800cd04 <_sbrk_r>
 800cc14:	4580      	cmp	r8, r0
 800cc16:	d13a      	bne.n	800cc8e <_malloc_r+0xd2>
 800cc18:	6821      	ldr	r1, [r4, #0]
 800cc1a:	3503      	adds	r5, #3
 800cc1c:	1a6d      	subs	r5, r5, r1
 800cc1e:	f025 0503 	bic.w	r5, r5, #3
 800cc22:	3508      	adds	r5, #8
 800cc24:	2d0c      	cmp	r5, #12
 800cc26:	bf38      	it	cc
 800cc28:	250c      	movcc	r5, #12
 800cc2a:	4629      	mov	r1, r5
 800cc2c:	4638      	mov	r0, r7
 800cc2e:	f7ff ffa5 	bl	800cb7c <sbrk_aligned>
 800cc32:	3001      	adds	r0, #1
 800cc34:	d02b      	beq.n	800cc8e <_malloc_r+0xd2>
 800cc36:	6823      	ldr	r3, [r4, #0]
 800cc38:	442b      	add	r3, r5
 800cc3a:	6023      	str	r3, [r4, #0]
 800cc3c:	e00e      	b.n	800cc5c <_malloc_r+0xa0>
 800cc3e:	6822      	ldr	r2, [r4, #0]
 800cc40:	1b52      	subs	r2, r2, r5
 800cc42:	d41e      	bmi.n	800cc82 <_malloc_r+0xc6>
 800cc44:	2a0b      	cmp	r2, #11
 800cc46:	d916      	bls.n	800cc76 <_malloc_r+0xba>
 800cc48:	1961      	adds	r1, r4, r5
 800cc4a:	42a3      	cmp	r3, r4
 800cc4c:	6025      	str	r5, [r4, #0]
 800cc4e:	bf18      	it	ne
 800cc50:	6059      	strne	r1, [r3, #4]
 800cc52:	6863      	ldr	r3, [r4, #4]
 800cc54:	bf08      	it	eq
 800cc56:	6031      	streq	r1, [r6, #0]
 800cc58:	5162      	str	r2, [r4, r5]
 800cc5a:	604b      	str	r3, [r1, #4]
 800cc5c:	4638      	mov	r0, r7
 800cc5e:	f104 060b 	add.w	r6, r4, #11
 800cc62:	f000 f865 	bl	800cd30 <__malloc_unlock>
 800cc66:	f026 0607 	bic.w	r6, r6, #7
 800cc6a:	1d23      	adds	r3, r4, #4
 800cc6c:	1af2      	subs	r2, r6, r3
 800cc6e:	d0b6      	beq.n	800cbde <_malloc_r+0x22>
 800cc70:	1b9b      	subs	r3, r3, r6
 800cc72:	50a3      	str	r3, [r4, r2]
 800cc74:	e7b3      	b.n	800cbde <_malloc_r+0x22>
 800cc76:	6862      	ldr	r2, [r4, #4]
 800cc78:	42a3      	cmp	r3, r4
 800cc7a:	bf0c      	ite	eq
 800cc7c:	6032      	streq	r2, [r6, #0]
 800cc7e:	605a      	strne	r2, [r3, #4]
 800cc80:	e7ec      	b.n	800cc5c <_malloc_r+0xa0>
 800cc82:	4623      	mov	r3, r4
 800cc84:	6864      	ldr	r4, [r4, #4]
 800cc86:	e7b2      	b.n	800cbee <_malloc_r+0x32>
 800cc88:	4634      	mov	r4, r6
 800cc8a:	6876      	ldr	r6, [r6, #4]
 800cc8c:	e7b9      	b.n	800cc02 <_malloc_r+0x46>
 800cc8e:	230c      	movs	r3, #12
 800cc90:	603b      	str	r3, [r7, #0]
 800cc92:	4638      	mov	r0, r7
 800cc94:	f000 f84c 	bl	800cd30 <__malloc_unlock>
 800cc98:	e7a1      	b.n	800cbde <_malloc_r+0x22>
 800cc9a:	6025      	str	r5, [r4, #0]
 800cc9c:	e7de      	b.n	800cc5c <_malloc_r+0xa0>
 800cc9e:	bf00      	nop
 800cca0:	20005048 	.word	0x20005048

0800cca4 <_realloc_r>:
 800cca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cca8:	4680      	mov	r8, r0
 800ccaa:	4614      	mov	r4, r2
 800ccac:	460e      	mov	r6, r1
 800ccae:	b921      	cbnz	r1, 800ccba <_realloc_r+0x16>
 800ccb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ccb4:	4611      	mov	r1, r2
 800ccb6:	f7ff bf81 	b.w	800cbbc <_malloc_r>
 800ccba:	b92a      	cbnz	r2, 800ccc8 <_realloc_r+0x24>
 800ccbc:	f7ff ff12 	bl	800cae4 <_free_r>
 800ccc0:	4625      	mov	r5, r4
 800ccc2:	4628      	mov	r0, r5
 800ccc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccc8:	f000 f838 	bl	800cd3c <_malloc_usable_size_r>
 800cccc:	4284      	cmp	r4, r0
 800ccce:	4607      	mov	r7, r0
 800ccd0:	d802      	bhi.n	800ccd8 <_realloc_r+0x34>
 800ccd2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ccd6:	d812      	bhi.n	800ccfe <_realloc_r+0x5a>
 800ccd8:	4621      	mov	r1, r4
 800ccda:	4640      	mov	r0, r8
 800ccdc:	f7ff ff6e 	bl	800cbbc <_malloc_r>
 800cce0:	4605      	mov	r5, r0
 800cce2:	2800      	cmp	r0, #0
 800cce4:	d0ed      	beq.n	800ccc2 <_realloc_r+0x1e>
 800cce6:	42bc      	cmp	r4, r7
 800cce8:	4622      	mov	r2, r4
 800ccea:	4631      	mov	r1, r6
 800ccec:	bf28      	it	cs
 800ccee:	463a      	movcs	r2, r7
 800ccf0:	f7fe fec6 	bl	800ba80 <memcpy>
 800ccf4:	4631      	mov	r1, r6
 800ccf6:	4640      	mov	r0, r8
 800ccf8:	f7ff fef4 	bl	800cae4 <_free_r>
 800ccfc:	e7e1      	b.n	800ccc2 <_realloc_r+0x1e>
 800ccfe:	4635      	mov	r5, r6
 800cd00:	e7df      	b.n	800ccc2 <_realloc_r+0x1e>
	...

0800cd04 <_sbrk_r>:
 800cd04:	b538      	push	{r3, r4, r5, lr}
 800cd06:	4d06      	ldr	r5, [pc, #24]	; (800cd20 <_sbrk_r+0x1c>)
 800cd08:	2300      	movs	r3, #0
 800cd0a:	4604      	mov	r4, r0
 800cd0c:	4608      	mov	r0, r1
 800cd0e:	602b      	str	r3, [r5, #0]
 800cd10:	f7f6 f946 	bl	8002fa0 <_sbrk>
 800cd14:	1c43      	adds	r3, r0, #1
 800cd16:	d102      	bne.n	800cd1e <_sbrk_r+0x1a>
 800cd18:	682b      	ldr	r3, [r5, #0]
 800cd1a:	b103      	cbz	r3, 800cd1e <_sbrk_r+0x1a>
 800cd1c:	6023      	str	r3, [r4, #0]
 800cd1e:	bd38      	pop	{r3, r4, r5, pc}
 800cd20:	20005040 	.word	0x20005040

0800cd24 <__malloc_lock>:
 800cd24:	4801      	ldr	r0, [pc, #4]	; (800cd2c <__malloc_lock+0x8>)
 800cd26:	f7ff bec1 	b.w	800caac <__retarget_lock_acquire_recursive>
 800cd2a:	bf00      	nop
 800cd2c:	20005044 	.word	0x20005044

0800cd30 <__malloc_unlock>:
 800cd30:	4801      	ldr	r0, [pc, #4]	; (800cd38 <__malloc_unlock+0x8>)
 800cd32:	f7ff bebc 	b.w	800caae <__retarget_lock_release_recursive>
 800cd36:	bf00      	nop
 800cd38:	20005044 	.word	0x20005044

0800cd3c <_malloc_usable_size_r>:
 800cd3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd40:	1f18      	subs	r0, r3, #4
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	bfbc      	itt	lt
 800cd46:	580b      	ldrlt	r3, [r1, r0]
 800cd48:	18c0      	addlt	r0, r0, r3
 800cd4a:	4770      	bx	lr

0800cd4c <_init>:
 800cd4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd4e:	bf00      	nop
 800cd50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd52:	bc08      	pop	{r3}
 800cd54:	469e      	mov	lr, r3
 800cd56:	4770      	bx	lr

0800cd58 <_fini>:
 800cd58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd5a:	bf00      	nop
 800cd5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd5e:	bc08      	pop	{r3}
 800cd60:	469e      	mov	lr, r3
 800cd62:	4770      	bx	lr
