
F446RC_MQTT_monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc04  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c00  0800cdd4  0800cdd4  0001cdd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d9d4  0800d9d4  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d9d4  0800d9d4  0001d9d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d9dc  0800d9dc  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d9dc  0800d9dc  0001d9dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d9e0  0800d9e0  0001d9e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0800d9e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004fb8  2000009c  0800da80  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005054  0800da80  00025054  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ff09  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d94  00000000  00000000  0003ffd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001af8  00000000  00000000  00043d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019b8  00000000  00000000  00045868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000047c4  00000000  00000000  00047220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ef05  00000000  00000000  0004b9e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0744  00000000  00000000  0006a8e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014b02d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c30  00000000  00000000  0014b080  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000009c 	.word	0x2000009c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800cdbc 	.word	0x0800cdbc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a0 	.word	0x200000a0
 800020c:	0800cdbc 	.word	0x0800cdbc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c8:	f003 f95e 	bl	8003888 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005cc:	f000 f8ca 	bl	8000764 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d0:	f000 fa34 	bl	8000a3c <MX_GPIO_Init>
  MX_DMA_Init();
 80005d4:	f000 f9ec 	bl	80009b0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80005d8:	f000 f996 	bl	8000908 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80005dc:	f000 f9be 	bl	800095c <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80005e0:	f000 f95c 	bl	800089c <MX_SPI2_Init>
  MX_I2C1_Init();
 80005e4:	f000 f92c 	bl	8000840 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005e8:	f007 fa40 	bl	8007a6c <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of UART1Mutex */
  UART1MutexHandle = osMutexNew(&UART1Mutex_attributes);
 80005ec:	4839      	ldr	r0, [pc, #228]	; (80006d4 <main+0x110>)
 80005ee:	f007 fc21 	bl	8007e34 <osMutexNew>
 80005f2:	4603      	mov	r3, r0
 80005f4:	4a38      	ldr	r2, [pc, #224]	; (80006d8 <main+0x114>)
 80005f6:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of PINGSem */
  PINGSemHandle = osSemaphoreNew(1, 0, &PINGSem_attributes);
 80005f8:	4a38      	ldr	r2, [pc, #224]	; (80006dc <main+0x118>)
 80005fa:	2100      	movs	r1, #0
 80005fc:	2001      	movs	r0, #1
 80005fe:	f007 fd27 	bl	8008050 <osSemaphoreNew>
 8000602:	4603      	mov	r3, r0
 8000604:	4a36      	ldr	r2, [pc, #216]	; (80006e0 <main+0x11c>)
 8000606:	6013      	str	r3, [r2, #0]

  /* creation of SemGetData */
  SemGetDataHandle = osSemaphoreNew(1, 0, &SemGetData_attributes);
 8000608:	4a36      	ldr	r2, [pc, #216]	; (80006e4 <main+0x120>)
 800060a:	2100      	movs	r1, #0
 800060c:	2001      	movs	r0, #1
 800060e:	f007 fd1f 	bl	8008050 <osSemaphoreNew>
 8000612:	4603      	mov	r3, r0
 8000614:	4a34      	ldr	r2, [pc, #208]	; (80006e8 <main+0x124>)
 8000616:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of PingTimer */
  PingTimerHandle = osTimerNew(CallbackPingTimer, osTimerPeriodic, NULL, &PingTimer_attributes);
 8000618:	4b34      	ldr	r3, [pc, #208]	; (80006ec <main+0x128>)
 800061a:	2200      	movs	r2, #0
 800061c:	2101      	movs	r1, #1
 800061e:	4834      	ldr	r0, [pc, #208]	; (80006f0 <main+0x12c>)
 8000620:	f007 fb5e 	bl	8007ce0 <osTimerNew>
 8000624:	4603      	mov	r3, r0
 8000626:	4a33      	ldr	r2, [pc, #204]	; (80006f4 <main+0x130>)
 8000628:	6013      	str	r3, [r2, #0]

  /* creation of DataTimer */
  DataTimerHandle = osTimerNew(CallbackDataTimer, osTimerPeriodic, NULL, &DataTimer_attributes);
 800062a:	4b33      	ldr	r3, [pc, #204]	; (80006f8 <main+0x134>)
 800062c:	2200      	movs	r2, #0
 800062e:	2101      	movs	r1, #1
 8000630:	4832      	ldr	r0, [pc, #200]	; (80006fc <main+0x138>)
 8000632:	f007 fb55 	bl	8007ce0 <osTimerNew>
 8000636:	4603      	mov	r3, r0
 8000638:	4a31      	ldr	r2, [pc, #196]	; (8000700 <main+0x13c>)
 800063a:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of debugQueue */
  debugQueueHandle = osMessageQueueNew (10, sizeof(message_type), &debugQueue_attributes);
 800063c:	4a31      	ldr	r2, [pc, #196]	; (8000704 <main+0x140>)
 800063e:	2146      	movs	r1, #70	; 0x46
 8000640:	200a      	movs	r0, #10
 8000642:	f007 fe25 	bl	8008290 <osMessageQueueNew>
 8000646:	4603      	mov	r3, r0
 8000648:	4a2f      	ldr	r2, [pc, #188]	; (8000708 <main+0x144>)
 800064a:	6013      	str	r3, [r2, #0]

  /* creation of SIM800SendQueue */
  SIM800SendQueueHandle = osMessageQueueNew (10, sizeof(message_type), &SIM800SendQueue_attributes);
 800064c:	4a2f      	ldr	r2, [pc, #188]	; (800070c <main+0x148>)
 800064e:	2146      	movs	r1, #70	; 0x46
 8000650:	200a      	movs	r0, #10
 8000652:	f007 fe1d 	bl	8008290 <osMessageQueueNew>
 8000656:	4603      	mov	r3, r0
 8000658:	4a2d      	ldr	r2, [pc, #180]	; (8000710 <main+0x14c>)
 800065a:	6013      	str	r3, [r2, #0]

  /* creation of RxSIM800Queue */
  RxSIM800QueueHandle = osMessageQueueNew (10, sizeof(message_type), &RxSIM800Queue_attributes);
 800065c:	4a2d      	ldr	r2, [pc, #180]	; (8000714 <main+0x150>)
 800065e:	2146      	movs	r1, #70	; 0x46
 8000660:	200a      	movs	r0, #10
 8000662:	f007 fe15 	bl	8008290 <osMessageQueueNew>
 8000666:	4603      	mov	r3, r0
 8000668:	4a2b      	ldr	r2, [pc, #172]	; (8000718 <main+0x154>)
 800066a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800066c:	4a2b      	ldr	r2, [pc, #172]	; (800071c <main+0x158>)
 800066e:	2100      	movs	r1, #0
 8000670:	482b      	ldr	r0, [pc, #172]	; (8000720 <main+0x15c>)
 8000672:	f007 fa45 	bl	8007b00 <osThreadNew>
 8000676:	4603      	mov	r3, r0
 8000678:	4a2a      	ldr	r2, [pc, #168]	; (8000724 <main+0x160>)
 800067a:	6013      	str	r3, [r2, #0]

  /* creation of GetDataTask */
  GetDataTaskHandle = osThreadNew(StartGetDataTask, NULL, &GetDataTask_attributes);
 800067c:	4a2a      	ldr	r2, [pc, #168]	; (8000728 <main+0x164>)
 800067e:	2100      	movs	r1, #0
 8000680:	482a      	ldr	r0, [pc, #168]	; (800072c <main+0x168>)
 8000682:	f007 fa3d 	bl	8007b00 <osThreadNew>
 8000686:	4603      	mov	r3, r0
 8000688:	4a29      	ldr	r2, [pc, #164]	; (8000730 <main+0x16c>)
 800068a:	6013      	str	r3, [r2, #0]

  /* creation of DebugTask */
  DebugTaskHandle = osThreadNew(StartDebugTask, NULL, &DebugTask_attributes);
 800068c:	4a29      	ldr	r2, [pc, #164]	; (8000734 <main+0x170>)
 800068e:	2100      	movs	r1, #0
 8000690:	4829      	ldr	r0, [pc, #164]	; (8000738 <main+0x174>)
 8000692:	f007 fa35 	bl	8007b00 <osThreadNew>
 8000696:	4603      	mov	r3, r0
 8000698:	4a28      	ldr	r2, [pc, #160]	; (800073c <main+0x178>)
 800069a:	6013      	str	r3, [r2, #0]

  /* creation of SIM800SendTask */
  SIM800SendTaskHandle = osThreadNew(StartSIM800SendTask, NULL, &SIM800SendTask_attributes);
 800069c:	4a28      	ldr	r2, [pc, #160]	; (8000740 <main+0x17c>)
 800069e:	2100      	movs	r1, #0
 80006a0:	4828      	ldr	r0, [pc, #160]	; (8000744 <main+0x180>)
 80006a2:	f007 fa2d 	bl	8007b00 <osThreadNew>
 80006a6:	4603      	mov	r3, r0
 80006a8:	4a27      	ldr	r2, [pc, #156]	; (8000748 <main+0x184>)
 80006aa:	6013      	str	r3, [r2, #0]

  /* creation of PINGTask */
  //PINGTaskHandle = osThreadNew(PINGStartTask, NULL, &PINGTask_attributes);

  /* creation of SIM800StartTask */
  SIM800StartTaskHandle = osThreadNew(StartSIM800Task, NULL, &SIM800StartTask_attributes);
 80006ac:	4a27      	ldr	r2, [pc, #156]	; (800074c <main+0x188>)
 80006ae:	2100      	movs	r1, #0
 80006b0:	4827      	ldr	r0, [pc, #156]	; (8000750 <main+0x18c>)
 80006b2:	f007 fa25 	bl	8007b00 <osThreadNew>
 80006b6:	4603      	mov	r3, r0
 80006b8:	4a26      	ldr	r2, [pc, #152]	; (8000754 <main+0x190>)
 80006ba:	6013      	str	r3, [r2, #0]

  /* creation of MQTTConnectTask */
  //MQTTConnectTaskHandle = osThreadNew(StartMQTTConnectTask, NULL, &MQTTConnectTask_attributes);

  /* creation of MessHandlerTask */
  MessHandlerTaskHandle = osThreadNew(StartMessHandlerTask, NULL, &MessHandlerTask_attributes);
 80006bc:	4a26      	ldr	r2, [pc, #152]	; (8000758 <main+0x194>)
 80006be:	2100      	movs	r1, #0
 80006c0:	4826      	ldr	r0, [pc, #152]	; (800075c <main+0x198>)
 80006c2:	f007 fa1d 	bl	8007b00 <osThreadNew>
 80006c6:	4603      	mov	r3, r0
 80006c8:	4a25      	ldr	r2, [pc, #148]	; (8000760 <main+0x19c>)
 80006ca:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006cc:	f007 f9f2 	bl	8007ab4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <main+0x10c>
 80006d2:	bf00      	nop
 80006d4:	0800d7d4 	.word	0x0800d7d4
 80006d8:	200003a4 	.word	0x200003a4
 80006dc:	0800d7e4 	.word	0x0800d7e4
 80006e0:	200003a8 	.word	0x200003a8
 80006e4:	0800d7f4 	.word	0x0800d7f4
 80006e8:	200003ac 	.word	0x200003ac
 80006ec:	0800d7b4 	.word	0x0800d7b4
 80006f0:	08002a05 	.word	0x08002a05
 80006f4:	2000039c 	.word	0x2000039c
 80006f8:	0800d7c4 	.word	0x0800d7c4
 80006fc:	08002a25 	.word	0x08002a25
 8000700:	200003a0 	.word	0x200003a0
 8000704:	0800d76c 	.word	0x0800d76c
 8000708:	20000390 	.word	0x20000390
 800070c:	0800d784 	.word	0x0800d784
 8000710:	20000394 	.word	0x20000394
 8000714:	0800d79c 	.word	0x0800d79c
 8000718:	20000398 	.word	0x20000398
 800071c:	0800d628 	.word	0x0800d628
 8000720:	08000f01 	.word	0x08000f01
 8000724:	2000036c 	.word	0x2000036c
 8000728:	0800d64c 	.word	0x0800d64c
 800072c:	08000f85 	.word	0x08000f85
 8000730:	20000370 	.word	0x20000370
 8000734:	0800d670 	.word	0x0800d670
 8000738:	08001005 	.word	0x08001005
 800073c:	20000374 	.word	0x20000374
 8000740:	0800d694 	.word	0x0800d694
 8000744:	08001025 	.word	0x08001025
 8000748:	20000378 	.word	0x20000378
 800074c:	0800d6dc 	.word	0x0800d6dc
 8000750:	08001441 	.word	0x08001441
 8000754:	20000380 	.word	0x20000380
 8000758:	0800d724 	.word	0x0800d724
 800075c:	08001f51 	.word	0x08001f51
 8000760:	20000388 	.word	0x20000388

08000764 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b094      	sub	sp, #80	; 0x50
 8000768:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076a:	f107 031c 	add.w	r3, r7, #28
 800076e:	2234      	movs	r2, #52	; 0x34
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f00b f9ca 	bl	800bb0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000778:	f107 0308 	add.w	r3, r7, #8
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]
 8000786:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000788:	2300      	movs	r3, #0
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	4b2a      	ldr	r3, [pc, #168]	; (8000838 <SystemClock_Config+0xd4>)
 800078e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000790:	4a29      	ldr	r2, [pc, #164]	; (8000838 <SystemClock_Config+0xd4>)
 8000792:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000796:	6413      	str	r3, [r2, #64]	; 0x40
 8000798:	4b27      	ldr	r3, [pc, #156]	; (8000838 <SystemClock_Config+0xd4>)
 800079a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007a4:	2300      	movs	r3, #0
 80007a6:	603b      	str	r3, [r7, #0]
 80007a8:	4b24      	ldr	r3, [pc, #144]	; (800083c <SystemClock_Config+0xd8>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007b0:	4a22      	ldr	r2, [pc, #136]	; (800083c <SystemClock_Config+0xd8>)
 80007b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007b6:	6013      	str	r3, [r2, #0]
 80007b8:	4b20      	ldr	r3, [pc, #128]	; (800083c <SystemClock_Config+0xd8>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007c0:	603b      	str	r3, [r7, #0]
 80007c2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007c4:	2302      	movs	r3, #2
 80007c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c8:	2301      	movs	r3, #1
 80007ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007cc:	2310      	movs	r3, #16
 80007ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d0:	2302      	movs	r3, #2
 80007d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007d4:	2300      	movs	r3, #0
 80007d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007d8:	2310      	movs	r3, #16
 80007da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 80007dc:	23c0      	movs	r3, #192	; 0xc0
 80007de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007e0:	2302      	movs	r3, #2
 80007e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007e4:	2302      	movs	r3, #2
 80007e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007e8:	2302      	movs	r3, #2
 80007ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ec:	f107 031c 	add.w	r3, r7, #28
 80007f0:	4618      	mov	r0, r3
 80007f2:	f004 fbc9 	bl	8004f88 <HAL_RCC_OscConfig>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80007fc:	f002 f934 	bl	8002a68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000800:	230f      	movs	r3, #15
 8000802:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000804:	2302      	movs	r3, #2
 8000806:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000808:	2300      	movs	r3, #0
 800080a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800080c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000810:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000812:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000816:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000818:	f107 0308 	add.w	r3, r7, #8
 800081c:	2103      	movs	r1, #3
 800081e:	4618      	mov	r0, r3
 8000820:	f004 f8bc 	bl	800499c <HAL_RCC_ClockConfig>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800082a:	f002 f91d 	bl	8002a68 <Error_Handler>
  }
}
 800082e:	bf00      	nop
 8000830:	3750      	adds	r7, #80	; 0x50
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40023800 	.word	0x40023800
 800083c:	40007000 	.word	0x40007000

08000840 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000844:	4b12      	ldr	r3, [pc, #72]	; (8000890 <MX_I2C1_Init+0x50>)
 8000846:	4a13      	ldr	r2, [pc, #76]	; (8000894 <MX_I2C1_Init+0x54>)
 8000848:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800084a:	4b11      	ldr	r3, [pc, #68]	; (8000890 <MX_I2C1_Init+0x50>)
 800084c:	4a12      	ldr	r2, [pc, #72]	; (8000898 <MX_I2C1_Init+0x58>)
 800084e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000850:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <MX_I2C1_Init+0x50>)
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000856:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <MX_I2C1_Init+0x50>)
 8000858:	2200      	movs	r2, #0
 800085a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800085c:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <MX_I2C1_Init+0x50>)
 800085e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000862:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000864:	4b0a      	ldr	r3, [pc, #40]	; (8000890 <MX_I2C1_Init+0x50>)
 8000866:	2200      	movs	r2, #0
 8000868:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <MX_I2C1_Init+0x50>)
 800086c:	2200      	movs	r2, #0
 800086e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000870:	4b07      	ldr	r3, [pc, #28]	; (8000890 <MX_I2C1_Init+0x50>)
 8000872:	2200      	movs	r2, #0
 8000874:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000876:	4b06      	ldr	r3, [pc, #24]	; (8000890 <MX_I2C1_Init+0x50>)
 8000878:	2200      	movs	r2, #0
 800087a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800087c:	4804      	ldr	r0, [pc, #16]	; (8000890 <MX_I2C1_Init+0x50>)
 800087e:	f003 ff49 	bl	8004714 <HAL_I2C_Init>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000888:	f002 f8ee 	bl	8002a68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800088c:	bf00      	nop
 800088e:	bd80      	pop	{r7, pc}
 8000890:	200000b8 	.word	0x200000b8
 8000894:	40005400 	.word	0x40005400
 8000898:	000186a0 	.word	0x000186a0

0800089c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008a0:	4b17      	ldr	r3, [pc, #92]	; (8000900 <MX_SPI2_Init+0x64>)
 80008a2:	4a18      	ldr	r2, [pc, #96]	; (8000904 <MX_SPI2_Init+0x68>)
 80008a4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008a6:	4b16      	ldr	r3, [pc, #88]	; (8000900 <MX_SPI2_Init+0x64>)
 80008a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008ac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008ae:	4b14      	ldr	r3, [pc, #80]	; (8000900 <MX_SPI2_Init+0x64>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008b4:	4b12      	ldr	r3, [pc, #72]	; (8000900 <MX_SPI2_Init+0x64>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ba:	4b11      	ldr	r3, [pc, #68]	; (8000900 <MX_SPI2_Init+0x64>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008c0:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <MX_SPI2_Init+0x64>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <MX_SPI2_Init+0x64>)
 80008c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008cc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008ce:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <MX_SPI2_Init+0x64>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008d4:	4b0a      	ldr	r3, [pc, #40]	; (8000900 <MX_SPI2_Init+0x64>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008da:	4b09      	ldr	r3, [pc, #36]	; (8000900 <MX_SPI2_Init+0x64>)
 80008dc:	2200      	movs	r2, #0
 80008de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008e0:	4b07      	ldr	r3, [pc, #28]	; (8000900 <MX_SPI2_Init+0x64>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80008e6:	4b06      	ldr	r3, [pc, #24]	; (8000900 <MX_SPI2_Init+0x64>)
 80008e8:	220a      	movs	r2, #10
 80008ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008ec:	4804      	ldr	r0, [pc, #16]	; (8000900 <MX_SPI2_Init+0x64>)
 80008ee:	f004 fde9 	bl	80054c4 <HAL_SPI_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80008f8:	f002 f8b6 	bl	8002a68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	2000010c 	.word	0x2000010c
 8000904:	40003800 	.word	0x40003800

08000908 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800090c:	4b11      	ldr	r3, [pc, #68]	; (8000954 <MX_USART1_UART_Init+0x4c>)
 800090e:	4a12      	ldr	r2, [pc, #72]	; (8000958 <MX_USART1_UART_Init+0x50>)
 8000910:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 8000912:	4b10      	ldr	r3, [pc, #64]	; (8000954 <MX_USART1_UART_Init+0x4c>)
 8000914:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000918:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <MX_USART1_UART_Init+0x4c>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000920:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <MX_USART1_UART_Init+0x4c>)
 8000922:	2200      	movs	r2, #0
 8000924:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000926:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <MX_USART1_UART_Init+0x4c>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800092c:	4b09      	ldr	r3, [pc, #36]	; (8000954 <MX_USART1_UART_Init+0x4c>)
 800092e:	220c      	movs	r2, #12
 8000930:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000932:	4b08      	ldr	r3, [pc, #32]	; (8000954 <MX_USART1_UART_Init+0x4c>)
 8000934:	2200      	movs	r2, #0
 8000936:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <MX_USART1_UART_Init+0x4c>)
 800093a:	2200      	movs	r2, #0
 800093c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800093e:	4805      	ldr	r0, [pc, #20]	; (8000954 <MX_USART1_UART_Init+0x4c>)
 8000940:	f005 fca0 	bl	8006284 <HAL_UART_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800094a:	f002 f88d 	bl	8002a68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20000164 	.word	0x20000164
 8000958:	40011000 	.word	0x40011000

0800095c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000960:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 8000962:	4a12      	ldr	r2, [pc, #72]	; (80009ac <MX_USART2_UART_Init+0x50>)
 8000964:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 8000968:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800096c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 8000976:	2200      	movs	r2, #0
 8000978:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000980:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 8000982:	220c      	movs	r2, #12
 8000984:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 800098e:	2200      	movs	r2, #0
 8000990:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000992:	4805      	ldr	r0, [pc, #20]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 8000994:	f005 fc76 	bl	8006284 <HAL_UART_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800099e:	f002 f863 	bl	8002a68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	200001a8 	.word	0x200001a8
 80009ac:	40004400 	.word	0x40004400

080009b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	4b1f      	ldr	r3, [pc, #124]	; (8000a38 <MX_DMA_Init+0x88>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a1e      	ldr	r2, [pc, #120]	; (8000a38 <MX_DMA_Init+0x88>)
 80009c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b1c      	ldr	r3, [pc, #112]	; (8000a38 <MX_DMA_Init+0x88>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	603b      	str	r3, [r7, #0]
 80009d6:	4b18      	ldr	r3, [pc, #96]	; (8000a38 <MX_DMA_Init+0x88>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a17      	ldr	r2, [pc, #92]	; (8000a38 <MX_DMA_Init+0x88>)
 80009dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <MX_DMA_Init+0x88>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009ea:	603b      	str	r3, [r7, #0]
 80009ec:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2105      	movs	r1, #5
 80009f2:	2010      	movs	r0, #16
 80009f4:	f003 f87d 	bl	8003af2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80009f8:	2010      	movs	r0, #16
 80009fa:	f003 f896 	bl	8003b2a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80009fe:	2200      	movs	r2, #0
 8000a00:	2105      	movs	r1, #5
 8000a02:	2011      	movs	r0, #17
 8000a04:	f003 f875 	bl	8003af2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000a08:	2011      	movs	r0, #17
 8000a0a:	f003 f88e 	bl	8003b2a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2105      	movs	r1, #5
 8000a12:	203a      	movs	r0, #58	; 0x3a
 8000a14:	f003 f86d 	bl	8003af2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000a18:	203a      	movs	r0, #58	; 0x3a
 8000a1a:	f003 f886 	bl	8003b2a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2105      	movs	r1, #5
 8000a22:	2046      	movs	r0, #70	; 0x46
 8000a24:	f003 f865 	bl	8003af2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000a28:	2046      	movs	r0, #70	; 0x46
 8000a2a:	f003 f87e 	bl	8003b2a <HAL_NVIC_EnableIRQ>

}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40023800 	.word	0x40023800

08000a3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b088      	sub	sp, #32
 8000a40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a42:	f107 030c 	add.w	r3, r7, #12
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
 8000a4e:	60da      	str	r2, [r3, #12]
 8000a50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	60bb      	str	r3, [r7, #8]
 8000a56:	4b44      	ldr	r3, [pc, #272]	; (8000b68 <MX_GPIO_Init+0x12c>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a43      	ldr	r2, [pc, #268]	; (8000b68 <MX_GPIO_Init+0x12c>)
 8000a5c:	f043 0304 	orr.w	r3, r3, #4
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
 8000a62:	4b41      	ldr	r3, [pc, #260]	; (8000b68 <MX_GPIO_Init+0x12c>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	f003 0304 	and.w	r3, r3, #4
 8000a6a:	60bb      	str	r3, [r7, #8]
 8000a6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	4b3d      	ldr	r3, [pc, #244]	; (8000b68 <MX_GPIO_Init+0x12c>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	4a3c      	ldr	r2, [pc, #240]	; (8000b68 <MX_GPIO_Init+0x12c>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7e:	4b3a      	ldr	r3, [pc, #232]	; (8000b68 <MX_GPIO_Init+0x12c>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	603b      	str	r3, [r7, #0]
 8000a8e:	4b36      	ldr	r3, [pc, #216]	; (8000b68 <MX_GPIO_Init+0x12c>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a35      	ldr	r2, [pc, #212]	; (8000b68 <MX_GPIO_Init+0x12c>)
 8000a94:	f043 0302 	orr.w	r3, r3, #2
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b33      	ldr	r3, [pc, #204]	; (8000b68 <MX_GPIO_Init+0x12c>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0302 	and.w	r3, r3, #2
 8000aa2:	603b      	str	r3, [r7, #0]
 8000aa4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_3, GPIO_PIN_SET);
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	210a      	movs	r1, #10
 8000aaa:	4830      	ldr	r0, [pc, #192]	; (8000b6c <MX_GPIO_Init+0x130>)
 8000aac:	f003 fdfe 	bl	80046ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	2140      	movs	r1, #64	; 0x40
 8000ab4:	482e      	ldr	r0, [pc, #184]	; (8000b70 <MX_GPIO_Init+0x134>)
 8000ab6:	f003 fdf9 	bl	80046ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(temp_GPIO_Port, temp_Pin, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2180      	movs	r1, #128	; 0x80
 8000abe:	482c      	ldr	r0, [pc, #176]	; (8000b70 <MX_GPIO_Init+0x134>)
 8000ac0:	f003 fdf4 	bl	80046ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SIM_START_Pin|SIM_RESET_Pin, GPIO_PIN_RESET);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2130      	movs	r1, #48	; 0x30
 8000ac8:	4828      	ldr	r0, [pc, #160]	; (8000b6c <MX_GPIO_Init+0x130>)
 8000aca:	f003 fdef 	bl	80046ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8000ace:	2201      	movs	r2, #1
 8000ad0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ad4:	4827      	ldr	r0, [pc, #156]	; (8000b74 <MX_GPIO_Init+0x138>)
 8000ad6:	f003 fde9 	bl	80046ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC3 SIM_START_Pin SIM_RESET_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|SIM_START_Pin|SIM_RESET_Pin;
 8000ada:	233a      	movs	r3, #58	; 0x3a
 8000adc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aea:	f107 030c 	add.w	r3, r7, #12
 8000aee:	4619      	mov	r1, r3
 8000af0:	481e      	ldr	r0, [pc, #120]	; (8000b6c <MX_GPIO_Init+0x130>)
 8000af2:	f003 fc2f 	bl	8004354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000af6:	2304      	movs	r3, #4
 8000af8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b02:	f107 030c 	add.w	r3, r7, #12
 8000b06:	4619      	mov	r1, r3
 8000b08:	4818      	ldr	r0, [pc, #96]	; (8000b6c <MX_GPIO_Init+0x130>)
 8000b0a:	f003 fc23 	bl	8004354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b0e:	2310      	movs	r3, #16
 8000b10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b12:	2300      	movs	r3, #0
 8000b14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b16:	2301      	movs	r3, #1
 8000b18:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1a:	f107 030c 	add.w	r3, r7, #12
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4813      	ldr	r0, [pc, #76]	; (8000b70 <MX_GPIO_Init+0x134>)
 8000b22:	f003 fc17 	bl	8004354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 temp_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_6|temp_Pin;
 8000b26:	23c0      	movs	r3, #192	; 0xc0
 8000b28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b36:	f107 030c 	add.w	r3, r7, #12
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	480c      	ldr	r0, [pc, #48]	; (8000b70 <MX_GPIO_Init+0x134>)
 8000b3e:	f003 fc09 	bl	8004354 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_CS_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 8000b42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b50:	2300      	movs	r3, #0
 8000b52:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 8000b54:	f107 030c 	add.w	r3, r7, #12
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4806      	ldr	r0, [pc, #24]	; (8000b74 <MX_GPIO_Init+0x138>)
 8000b5c:	f003 fbfa 	bl	8004354 <HAL_GPIO_Init>

}
 8000b60:	bf00      	nop
 8000b62:	3720      	adds	r7, #32
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40020800 	.word	0x40020800
 8000b70:	40020000 	.word	0x40020000
 8000b74:	40020400 	.word	0x40020400

08000b78 <SPI2_Init_Master>:

/* USER CODE BEGIN 4 */

void SPI2_Init_Master(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b92:	4810      	ldr	r0, [pc, #64]	; (8000bd4 <SPI2_Init_Master+0x5c>)
 8000b94:	f003 fd8a 	bl	80046ac <HAL_GPIO_WritePin>

	/*Configure GPIO pin : FLASH_CS_Pin */
	GPIO_InitStruct.Pin = FLASH_CS_Pin;
 8000b98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b9c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	4619      	mov	r1, r3
 8000bae:	4809      	ldr	r0, [pc, #36]	; (8000bd4 <SPI2_Init_Master+0x5c>)
 8000bb0:	f003 fbd0 	bl	8004354 <HAL_GPIO_Init>

	hspi2.Init.Mode = SPI_MODE_MASTER;
 8000bb4:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <SPI2_Init_Master+0x60>)
 8000bb6:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bba:	605a      	str	r2, [r3, #4]
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000bbc:	4806      	ldr	r0, [pc, #24]	; (8000bd8 <SPI2_Init_Master+0x60>)
 8000bbe:	f004 fc81 	bl	80054c4 <HAL_SPI_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <SPI2_Init_Master+0x54>
	{
		Error_Handler();
 8000bc8:	f001 ff4e 	bl	8002a68 <Error_Handler>
	}
}
 8000bcc:	bf00      	nop
 8000bce:	3718      	adds	r7, #24
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40020400 	.word	0x40020400
 8000bd8:	2000010c 	.word	0x2000010c

08000bdc <Make_MQTT_send_string>:
  * @param  send_MQTT_message[] String, where will be result.
  * @param  msg[] struct with message for sending with MQTT.
 */

void Make_MQTT_send_string(uint8_t send_MQTT_message[], message_type msg)
{
 8000bdc:	b084      	sub	sp, #16
 8000bde:	b590      	push	{r4, r7, lr}
 8000be0:	b083      	sub	sp, #12
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
 8000be6:	f107 001c 	add.w	r0, r7, #28
 8000bea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	send_MQTT_message[0] = 0x30;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2230      	movs	r2, #48	; 0x30
 8000bf2:	701a      	strb	r2, [r3, #0]
    send_MQTT_message[1] = strlen(msg.str) + strlen(TOPIC) + 2;
 8000bf4:	f107 031c 	add.w	r3, r7, #28
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff fb09 	bl	8000210 <strlen>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	b2dc      	uxtb	r4, r3
 8000c02:	4819      	ldr	r0, [pc, #100]	; (8000c68 <Make_MQTT_send_string+0x8c>)
 8000c04:	f7ff fb04 	bl	8000210 <strlen>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	4423      	add	r3, r4
 8000c0e:	b2da      	uxtb	r2, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	3301      	adds	r3, #1
 8000c14:	3202      	adds	r2, #2
 8000c16:	b2d2      	uxtb	r2, r2
 8000c18:	701a      	strb	r2, [r3, #0]
    send_MQTT_message[2] = 0;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	3302      	adds	r3, #2
 8000c1e:	2200      	movs	r2, #0
 8000c20:	701a      	strb	r2, [r3, #0]
    send_MQTT_message[3] = strlen(TOPIC);
 8000c22:	4811      	ldr	r0, [pc, #68]	; (8000c68 <Make_MQTT_send_string+0x8c>)
 8000c24:	f7ff faf4 	bl	8000210 <strlen>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	3303      	adds	r3, #3
 8000c2e:	b2d2      	uxtb	r2, r2
 8000c30:	701a      	strb	r2, [r3, #0]
    sprintf(send_MQTT_message + 4,"%s",TOPIC);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	3304      	adds	r3, #4
 8000c36:	4a0c      	ldr	r2, [pc, #48]	; (8000c68 <Make_MQTT_send_string+0x8c>)
 8000c38:	490c      	ldr	r1, [pc, #48]	; (8000c6c <Make_MQTT_send_string+0x90>)
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f00a ffa2 	bl	800bb84 <siprintf>
    sprintf(send_MQTT_message + 4 + strlen(TOPIC),"%s",msg.str);
 8000c40:	4809      	ldr	r0, [pc, #36]	; (8000c68 <Make_MQTT_send_string+0x8c>)
 8000c42:	f7ff fae5 	bl	8000210 <strlen>
 8000c46:	4603      	mov	r3, r0
 8000c48:	3304      	adds	r3, #4
 8000c4a:	687a      	ldr	r2, [r7, #4]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	f107 021c 	add.w	r2, r7, #28
 8000c52:	4906      	ldr	r1, [pc, #24]	; (8000c6c <Make_MQTT_send_string+0x90>)
 8000c54:	4618      	mov	r0, r3
 8000c56:	f00a ff95 	bl	800bb84 <siprintf>
}
 8000c5a:	bf00      	nop
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr
 8000c68:	20000010 	.word	0x20000010
 8000c6c:	0800ceb8 	.word	0x0800ceb8

08000c70 <String_in_SIM800BuffRx>:
  * @param  exm[] String, that we search in Receive buffer SIM800.
  * @retval Is string in Receive buffer SIM800.
 */

uint8_t String_in_SIM800BuffRx(uint8_t exm[])
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(exm);
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f7ff fac9 	bl	8000210 <strlen>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	733b      	strb	r3, [r7, #12]
	uint8_t ans = 0;
 8000c82:	2300      	movs	r3, #0
 8000c84:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < BUFF_SIM_SIZE - len; i++)
 8000c86:	2300      	movs	r3, #0
 8000c88:	73bb      	strb	r3, [r7, #14]
 8000c8a:	e025      	b.n	8000cd8 <String_in_SIM800BuffRx+0x68>
	{
		if (SIM800BuffRx[i] == exm[0])
 8000c8c:	7bbb      	ldrb	r3, [r7, #14]
 8000c8e:	4a19      	ldr	r2, [pc, #100]	; (8000cf4 <String_in_SIM800BuffRx+0x84>)
 8000c90:	5cd2      	ldrb	r2, [r2, r3]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d11b      	bne.n	8000cd2 <String_in_SIM800BuffRx+0x62>
		{
			ans = 1;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	73fb      	strb	r3, [r7, #15]
			for (uint8_t k = 0; k < len; k++)
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	737b      	strb	r3, [r7, #13]
 8000ca2:	e00f      	b.n	8000cc4 <String_in_SIM800BuffRx+0x54>
			{
				if (SIM800BuffRx[i+k] != exm[k])
 8000ca4:	7bba      	ldrb	r2, [r7, #14]
 8000ca6:	7b7b      	ldrb	r3, [r7, #13]
 8000ca8:	4413      	add	r3, r2
 8000caa:	4a12      	ldr	r2, [pc, #72]	; (8000cf4 <String_in_SIM800BuffRx+0x84>)
 8000cac:	5cd2      	ldrb	r2, [r2, r3]
 8000cae:	7b7b      	ldrb	r3, [r7, #13]
 8000cb0:	6879      	ldr	r1, [r7, #4]
 8000cb2:	440b      	add	r3, r1
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	d001      	beq.n	8000cbe <String_in_SIM800BuffRx+0x4e>
				{
					ans = 0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	73fb      	strb	r3, [r7, #15]
			for (uint8_t k = 0; k < len; k++)
 8000cbe:	7b7b      	ldrb	r3, [r7, #13]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	737b      	strb	r3, [r7, #13]
 8000cc4:	7b7a      	ldrb	r2, [r7, #13]
 8000cc6:	7b3b      	ldrb	r3, [r7, #12]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d3eb      	bcc.n	8000ca4 <String_in_SIM800BuffRx+0x34>
				}
			}
			if (ans)
 8000ccc:	7bfb      	ldrb	r3, [r7, #15]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d109      	bne.n	8000ce6 <String_in_SIM800BuffRx+0x76>
	for (uint8_t i = 0; i < BUFF_SIM_SIZE - len; i++)
 8000cd2:	7bbb      	ldrb	r3, [r7, #14]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	73bb      	strb	r3, [r7, #14]
 8000cd8:	7bba      	ldrb	r2, [r7, #14]
 8000cda:	7b3b      	ldrb	r3, [r7, #12]
 8000cdc:	f1c3 034c 	rsb	r3, r3, #76	; 0x4c
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	dbd3      	blt.n	8000c8c <String_in_SIM800BuffRx+0x1c>
 8000ce4:	e000      	b.n	8000ce8 <String_in_SIM800BuffRx+0x78>
				break;
 8000ce6:	bf00      	nop
		}
	}
	return ans;
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000404 	.word	0x20000404

08000cf8 <String_in_String>:

uint8_t String_in_String(uint8_t str[], uint8_t size, uint8_t exm[])
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	460b      	mov	r3, r1
 8000d02:	607a      	str	r2, [r7, #4]
 8000d04:	72fb      	strb	r3, [r7, #11]
	uint8_t len = strlen(exm);
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f7ff fa82 	bl	8000210 <strlen>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	753b      	strb	r3, [r7, #20]
	uint8_t ans = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	75fb      	strb	r3, [r7, #23]
	for (uint8_t i = 0; i < size - len; i++)
 8000d14:	2300      	movs	r3, #0
 8000d16:	75bb      	strb	r3, [r7, #22]
 8000d18:	e028      	b.n	8000d6c <String_in_String+0x74>
	{
		if (str[i] == exm[0])
 8000d1a:	7dbb      	ldrb	r3, [r7, #22]
 8000d1c:	68fa      	ldr	r2, [r7, #12]
 8000d1e:	4413      	add	r3, r2
 8000d20:	781a      	ldrb	r2, [r3, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	429a      	cmp	r2, r3
 8000d28:	d11d      	bne.n	8000d66 <String_in_String+0x6e>
		{
			ans = 1;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	75fb      	strb	r3, [r7, #23]
			for (uint8_t k = 0; k < len; k++)
 8000d2e:	2300      	movs	r3, #0
 8000d30:	757b      	strb	r3, [r7, #21]
 8000d32:	e011      	b.n	8000d58 <String_in_String+0x60>
			{
				if (str[i+k] != exm[k])
 8000d34:	7dba      	ldrb	r2, [r7, #22]
 8000d36:	7d7b      	ldrb	r3, [r7, #21]
 8000d38:	4413      	add	r3, r2
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	4413      	add	r3, r2
 8000d40:	781a      	ldrb	r2, [r3, #0]
 8000d42:	7d7b      	ldrb	r3, [r7, #21]
 8000d44:	6879      	ldr	r1, [r7, #4]
 8000d46:	440b      	add	r3, r1
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	d001      	beq.n	8000d52 <String_in_String+0x5a>
				{
					ans = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	75fb      	strb	r3, [r7, #23]
			for (uint8_t k = 0; k < len; k++)
 8000d52:	7d7b      	ldrb	r3, [r7, #21]
 8000d54:	3301      	adds	r3, #1
 8000d56:	757b      	strb	r3, [r7, #21]
 8000d58:	7d7a      	ldrb	r2, [r7, #21]
 8000d5a:	7d3b      	ldrb	r3, [r7, #20]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d3e9      	bcc.n	8000d34 <String_in_String+0x3c>
				}
			}
			if (ans)
 8000d60:	7dfb      	ldrb	r3, [r7, #23]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d109      	bne.n	8000d7a <String_in_String+0x82>
	for (uint8_t i = 0; i < size - len; i++)
 8000d66:	7dbb      	ldrb	r3, [r7, #22]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	75bb      	strb	r3, [r7, #22]
 8000d6c:	7dba      	ldrb	r2, [r7, #22]
 8000d6e:	7af9      	ldrb	r1, [r7, #11]
 8000d70:	7d3b      	ldrb	r3, [r7, #20]
 8000d72:	1acb      	subs	r3, r1, r3
 8000d74:	429a      	cmp	r2, r3
 8000d76:	dbd0      	blt.n	8000d1a <String_in_String+0x22>
 8000d78:	e000      	b.n	8000d7c <String_in_String+0x84>
				break;
 8000d7a:	bf00      	nop
		}
	}
	return ans;
 8000d7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3718      	adds	r7, #24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
	...

08000d88 <USER_UART_IRQHandler>:

void USER_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
	// file stm32f1xx_hal_uart.c
	// comment
	// Set the UART DMA Half transfer complete callback
	// huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt

	if(huart == &huart1) //Determine whether it is serial port 1
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4a28      	ldr	r2, [pc, #160]	; (8000e34 <USER_UART_IRQHandler+0xac>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d148      	bne.n	8000e2a <USER_UART_IRQHandler+0xa2>
	{
		if(RESET != __HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE))   //Judging whether it is idle interruption
 8000d98:	4b26      	ldr	r3, [pc, #152]	; (8000e34 <USER_UART_IRQHandler+0xac>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f003 0310 	and.w	r3, r3, #16
 8000da2:	2b10      	cmp	r3, #16
 8000da4:	d141      	bne.n	8000e2a <USER_UART_IRQHandler+0xa2>
		{
			HAL_UART_DMAStop(&huart1);
 8000da6:	4823      	ldr	r0, [pc, #140]	; (8000e34 <USER_UART_IRQHandler+0xac>)
 8000da8:	f005 fc3e 	bl	8006628 <HAL_UART_DMAStop>
			__HAL_UART_CLEAR_IDLEFLAG(&huart1); //Clear idle interrupt sign (otherwise it will continue to enter interrupt)
 8000dac:	2300      	movs	r3, #0
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	4b20      	ldr	r3, [pc, #128]	; (8000e34 <USER_UART_IRQHandler+0xac>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	4b1e      	ldr	r3, [pc, #120]	; (8000e34 <USER_UART_IRQHandler+0xac>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
			RX = 1;
 8000dc2:	4b1d      	ldr	r3, [pc, #116]	; (8000e38 <USER_UART_IRQHandler+0xb0>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	701a      	strb	r2, [r3, #0]
			if (Broker_connect)
 8000dc8:	4b1c      	ldr	r3, [pc, #112]	; (8000e3c <USER_UART_IRQHandler+0xb4>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d02c      	beq.n	8000e2a <USER_UART_IRQHandler+0xa2>
			{

				if (String_in_SIM800BuffRx(";;"))
 8000dd0:	481b      	ldr	r0, [pc, #108]	; (8000e40 <USER_UART_IRQHandler+0xb8>)
 8000dd2:	f7ff ff4d 	bl	8000c70 <String_in_SIM800BuffRx>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d018      	beq.n	8000e0e <USER_UART_IRQHandler+0x86>
				{
					memcpy(&(Data_Queue.str), SIM800BuffRx, MESSAGE_TYPE_BUFF_SIZE);
 8000ddc:	4a19      	ldr	r2, [pc, #100]	; (8000e44 <USER_UART_IRQHandler+0xbc>)
 8000dde:	4b1a      	ldr	r3, [pc, #104]	; (8000e48 <USER_UART_IRQHandler+0xc0>)
 8000de0:	4610      	mov	r0, r2
 8000de2:	4619      	mov	r1, r3
 8000de4:	2346      	movs	r3, #70	; 0x46
 8000de6:	461a      	mov	r2, r3
 8000de8:	f00a fe82 	bl	800baf0 <memcpy>
					memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8000dec:	224c      	movs	r2, #76	; 0x4c
 8000dee:	2100      	movs	r1, #0
 8000df0:	4815      	ldr	r0, [pc, #84]	; (8000e48 <USER_UART_IRQHandler+0xc0>)
 8000df2:	f00a fe8b 	bl	800bb0c <memset>
					osMessageQueuePut(RxSIM800QueueHandle, &Data_Queue, 0, NULL);
 8000df6:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <USER_UART_IRQHandler+0xc4>)
 8000df8:	6818      	ldr	r0, [r3, #0]
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	4911      	ldr	r1, [pc, #68]	; (8000e44 <USER_UART_IRQHandler+0xbc>)
 8000e00:	f007 faba 	bl	8008378 <osMessageQueuePut>
					HAL_UART_Receive_DMA(&huart1, SIM800BuffRx, BUFF_SIM_SIZE);
 8000e04:	224c      	movs	r2, #76	; 0x4c
 8000e06:	4910      	ldr	r1, [pc, #64]	; (8000e48 <USER_UART_IRQHandler+0xc0>)
 8000e08:	480a      	ldr	r0, [pc, #40]	; (8000e34 <USER_UART_IRQHandler+0xac>)
 8000e0a:	f005 fbdd 	bl	80065c8 <HAL_UART_Receive_DMA>
				}

				if (!Tech_ans_wait)
 8000e0e:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <USER_UART_IRQHandler+0xc8>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d109      	bne.n	8000e2a <USER_UART_IRQHandler+0xa2>
				{
					memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8000e16:	224c      	movs	r2, #76	; 0x4c
 8000e18:	2100      	movs	r1, #0
 8000e1a:	480b      	ldr	r0, [pc, #44]	; (8000e48 <USER_UART_IRQHandler+0xc0>)
 8000e1c:	f00a fe76 	bl	800bb0c <memset>
					HAL_UART_Receive_DMA(&huart1, SIM800BuffRx, BUFF_SIM_SIZE);
 8000e20:	224c      	movs	r2, #76	; 0x4c
 8000e22:	4909      	ldr	r1, [pc, #36]	; (8000e48 <USER_UART_IRQHandler+0xc0>)
 8000e24:	4803      	ldr	r0, [pc, #12]	; (8000e34 <USER_UART_IRQHandler+0xac>)
 8000e26:	f005 fbcf 	bl	80065c8 <HAL_UART_Receive_DMA>

			}
			//HAL_UART_DMAStop(&huart1);
		}
	}
}
 8000e2a:	bf00      	nop
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000164 	.word	0x20000164
 8000e38:	200003b3 	.word	0x200003b3
 8000e3c:	200003b4 	.word	0x200003b4
 8000e40:	0800cebc 	.word	0x0800cebc
 8000e44:	200005e0 	.word	0x200005e0
 8000e48:	20000404 	.word	0x20000404
 8000e4c:	20000398 	.word	0x20000398
 8000e50:	200003b5 	.word	0x200003b5

08000e54 <SIM800_Ans>:
  * @brief  Waiting special answer from SIM800.
  * @param  exm[] String, that we expect.
  * @retval Is special answer in Receive buffer SIM800.
  */
uint8_t SIM800_Ans(uint8_t exm[])
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
	RX = 0;
 8000e5c:	4b20      	ldr	r3, [pc, #128]	; (8000ee0 <SIM800_Ans+0x8c>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	701a      	strb	r2, [r3, #0]
	Tech_ans_wait = 1;
 8000e62:	4b20      	ldr	r3, [pc, #128]	; (8000ee4 <SIM800_Ans+0x90>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart1, SIM800BuffRx, BUFF_SIM_SIZE);
 8000e68:	224c      	movs	r2, #76	; 0x4c
 8000e6a:	491f      	ldr	r1, [pc, #124]	; (8000ee8 <SIM800_Ans+0x94>)
 8000e6c:	481f      	ldr	r0, [pc, #124]	; (8000eec <SIM800_Ans+0x98>)
 8000e6e:	f005 fbab 	bl	80065c8 <HAL_UART_Receive_DMA>

	SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // permission counter
 8000e72:	4b1f      	ldr	r3, [pc, #124]	; (8000ef0 <SIM800_Ans+0x9c>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a1e      	ldr	r2, [pc, #120]	; (8000ef0 <SIM800_Ans+0x9c>)
 8000e78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e7c:	6013      	str	r3, [r2, #0]
	DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;   // start counter
 8000e7e:	4b1d      	ldr	r3, [pc, #116]	; (8000ef4 <SIM800_Ans+0xa0>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a1c      	ldr	r2, [pc, #112]	; (8000ef4 <SIM800_Ans+0xa0>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	6013      	str	r3, [r2, #0]

	uint32_t tacts = HAL_RCC_GetSysClockFreq() / 1000000;
 8000e8a:	f003 fed3 	bl	8004c34 <HAL_RCC_GetSysClockFreq>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	4a19      	ldr	r2, [pc, #100]	; (8000ef8 <SIM800_Ans+0xa4>)
 8000e92:	fba2 2303 	umull	r2, r3, r2, r3
 8000e96:	0c9b      	lsrs	r3, r3, #18
 8000e98:	60fb      	str	r3, [r7, #12]
	tacts *= 6000000; //timeout - 6s
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	4a17      	ldr	r2, [pc, #92]	; (8000efc <SIM800_Ans+0xa8>)
 8000e9e:	fb02 f303 	mul.w	r3, r2, r3
 8000ea2:	60fb      	str	r3, [r7, #12]
	DWT->CYCCNT = 0; // clear counter
 8000ea4:	4b13      	ldr	r3, [pc, #76]	; (8000ef4 <SIM800_Ans+0xa0>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	605a      	str	r2, [r3, #4]
	while (RX != 1 && DWT->CYCCNT < tacts) {};
 8000eaa:	bf00      	nop
 8000eac:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <SIM800_Ans+0x8c>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d004      	beq.n	8000ebe <SIM800_Ans+0x6a>
 8000eb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <SIM800_Ans+0xa0>)
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	68fa      	ldr	r2, [r7, #12]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d8f6      	bhi.n	8000eac <SIM800_Ans+0x58>
	Tech_ans_wait = 0;
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <SIM800_Ans+0x90>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	701a      	strb	r2, [r3, #0]
	if (!String_in_SIM800BuffRx(exm))
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f7ff fed3 	bl	8000c70 <String_in_SIM800BuffRx>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d101      	bne.n	8000ed4 <SIM800_Ans+0x80>
	{
		return 0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	e000      	b.n	8000ed6 <SIM800_Ans+0x82>
	}
	else
	{
		return 1;
 8000ed4:	2301      	movs	r3, #1
	}
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	200003b3 	.word	0x200003b3
 8000ee4:	200003b5 	.word	0x200003b5
 8000ee8:	20000404 	.word	0x20000404
 8000eec:	20000164 	.word	0x20000164
 8000ef0:	e000edfc 	.word	0xe000edfc
 8000ef4:	e0001000 	.word	0xe0001000
 8000ef8:	431bde83 	.word	0x431bde83
 8000efc:	005b8d80 	.word	0x005b8d80

08000f00 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if (!Start_SIM800 && Error_init) //if we have problems with SIM800, restart it
 8000f08:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <StartDefaultTask+0x60>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d10e      	bne.n	8000f2e <StartDefaultTask+0x2e>
 8000f10:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <StartDefaultTask+0x64>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d00a      	beq.n	8000f2e <StartDefaultTask+0x2e>
	  {
		  Error_init = 0;
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <StartDefaultTask+0x64>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	701a      	strb	r2, [r3, #0]
		  SIM800StartTaskHandle = osThreadNew(StartSIM800Task, NULL, &SIM800StartTask_attributes);
 8000f1e:	4a12      	ldr	r2, [pc, #72]	; (8000f68 <StartDefaultTask+0x68>)
 8000f20:	2100      	movs	r1, #0
 8000f22:	4812      	ldr	r0, [pc, #72]	; (8000f6c <StartDefaultTask+0x6c>)
 8000f24:	f006 fdec 	bl	8007b00 <osThreadNew>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	4a11      	ldr	r2, [pc, #68]	; (8000f70 <StartDefaultTask+0x70>)
 8000f2c:	6013      	str	r3, [r2, #0]
	  }

	  //show that program works
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8000f2e:	2140      	movs	r1, #64	; 0x40
 8000f30:	4810      	ldr	r0, [pc, #64]	; (8000f74 <StartDefaultTask+0x74>)
 8000f32:	f003 fbd4 	bl	80046de <HAL_GPIO_TogglePin>
	  osDelay(500);
 8000f36:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f3a:	f006 fea0 	bl	8007c7e <osDelay>

	  //if we have flag, start getting data
	  if (Get_data && Broker_connect)
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <StartDefaultTask+0x78>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d0e0      	beq.n	8000f08 <StartDefaultTask+0x8>
 8000f46:	4b0d      	ldr	r3, [pc, #52]	; (8000f7c <StartDefaultTask+0x7c>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d0dc      	beq.n	8000f08 <StartDefaultTask+0x8>
	  {
		osSemaphoreRelease(SemGetDataHandle);
 8000f4e:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <StartDefaultTask+0x80>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f007 f958 	bl	8008208 <osSemaphoreRelease>
		Get_data = 0;
 8000f58:	4b07      	ldr	r3, [pc, #28]	; (8000f78 <StartDefaultTask+0x78>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	701a      	strb	r2, [r3, #0]
	  if (!Start_SIM800 && Error_init) //if we have problems with SIM800, restart it
 8000f5e:	e7d3      	b.n	8000f08 <StartDefaultTask+0x8>
 8000f60:	200003b2 	.word	0x200003b2
 8000f64:	200003b0 	.word	0x200003b0
 8000f68:	0800d6dc 	.word	0x0800d6dc
 8000f6c:	08001441 	.word	0x08001441
 8000f70:	20000380 	.word	0x20000380
 8000f74:	40020000 	.word	0x40020000
 8000f78:	200003b6 	.word	0x200003b6
 8000f7c:	200003b4 	.word	0x200003b4
 8000f80:	200003ac 	.word	0x200003ac

08000f84 <StartGetDataTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGetDataTask */
void StartGetDataTask(void *argument)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b098      	sub	sp, #96	; 0x60
 8000f88:	af02      	add	r7, sp, #8
 8000f8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGetDataTask */
	message_type msg; //string for queue
	uint8_t power;
	uint8_t temp = 23;
 8000f8c:	2317      	movs	r3, #23
 8000f8e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t humidity = 50;
 8000f92:	2332      	movs	r3, #50	; 0x32
 8000f94:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
  /* Infinite loop */
  for(;;)
  {
	  // wait semaphore for measuring temperature
	  if (osSemaphoreAcquire(SemGetDataHandle, osWaitForever) == osOK)
 8000f98:	4b16      	ldr	r3, [pc, #88]	; (8000ff4 <StartGetDataTask+0x70>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f007 f8df 	bl	8008164 <osSemaphoreAcquire>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d1f5      	bne.n	8000f98 <StartGetDataTask+0x14>

		  // get smoke and move


		  // get power
		  power = !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);
 8000fac:	2104      	movs	r1, #4
 8000fae:	4812      	ldr	r0, [pc, #72]	; (8000ff8 <StartGetDataTask+0x74>)
 8000fb0:	f003 fb64 	bl	800467c <HAL_GPIO_ReadPin>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	bf0c      	ite	eq
 8000fba:	2301      	moveq	r3, #1
 8000fbc:	2300      	movne	r3, #0
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

		  // put string with data to queue
		  sprintf(&(msg.str), "{\"temp\":%d,\"humidity\":%d,\"power\":%d}\r\n\0", temp, humidity, power);
 8000fc4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8000fc8:	f897 1056 	ldrb.w	r1, [r7, #86]	; 0x56
 8000fcc:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000fd0:	f107 000c 	add.w	r0, r7, #12
 8000fd4:	9300      	str	r3, [sp, #0]
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	4908      	ldr	r1, [pc, #32]	; (8000ffc <StartGetDataTask+0x78>)
 8000fda:	f00a fdd3 	bl	800bb84 <siprintf>
		  osMessageQueuePut(SIM800SendQueueHandle, &msg, 0, osWaitForever);
 8000fde:	4b08      	ldr	r3, [pc, #32]	; (8001000 <StartGetDataTask+0x7c>)
 8000fe0:	6818      	ldr	r0, [r3, #0]
 8000fe2:	f107 010c 	add.w	r1, r7, #12
 8000fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fea:	2200      	movs	r2, #0
 8000fec:	f007 f9c4 	bl	8008378 <osMessageQueuePut>
	  if (osSemaphoreAcquire(SemGetDataHandle, osWaitForever) == osOK)
 8000ff0:	e7d2      	b.n	8000f98 <StartGetDataTask+0x14>
 8000ff2:	bf00      	nop
 8000ff4:	200003ac 	.word	0x200003ac
 8000ff8:	40020800 	.word	0x40020800
 8000ffc:	0800cec0 	.word	0x0800cec0
 8001000:	20000394 	.word	0x20000394

08001004 <StartDebugTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDebugTask */
void StartDebugTask(void *argument)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b094      	sub	sp, #80	; 0x50
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDebugTask */
	message_type msg;
  /* Infinite loop */
  for(;;)
  {
	  if (osMessageQueueGet(debugQueueHandle, &msg, 0, osWaitForever) == osOK)
 800100c:	4b04      	ldr	r3, [pc, #16]	; (8001020 <StartDebugTask+0x1c>)
 800100e:	6818      	ldr	r0, [r3, #0]
 8001010:	f107 0108 	add.w	r1, r7, #8
 8001014:	f04f 33ff 	mov.w	r3, #4294967295
 8001018:	2200      	movs	r2, #0
 800101a:	f007 fa0d 	bl	8008438 <osMessageQueueGet>
 800101e:	e7f5      	b.n	800100c <StartDebugTask+0x8>
 8001020:	20000390 	.word	0x20000390

08001024 <StartSIM800SendTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSIM800SendTask */
void StartSIM800SendTask(void *argument)
{
 8001024:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001026:	b0b9      	sub	sp, #228	; 0xe4
 8001028:	af10      	add	r7, sp, #64	; 0x40
 800102a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSIM800SendTask */
	message_type msg;

	//+ message_len(1 byte) + topic_len(2 bytes) + topic + message
    uint8_t send_MQTT_message[BUFF_SIM_SIZE] = {};
 800102c:	2300      	movs	r3, #0
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	f107 0310 	add.w	r3, r7, #16
 8001034:	2248      	movs	r2, #72	; 0x48
 8001036:	2100      	movs	r1, #0
 8001038:	4618      	mov	r0, r3
 800103a:	f00a fd67 	bl	800bb0c <memset>
    uint8_t ans;
  /* Infinite loop */
  for(;;)
  {
	  if (osMessageQueueGet(SIM800SendQueueHandle, &msg, 0, osWaitForever) == osOK)
 800103e:	4b50      	ldr	r3, [pc, #320]	; (8001180 <StartSIM800SendTask+0x15c>)
 8001040:	6818      	ldr	r0, [r3, #0]
 8001042:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001046:	f04f 33ff 	mov.w	r3, #4294967295
 800104a:	2200      	movs	r2, #0
 800104c:	f007 f9f4 	bl	8008438 <osMessageQueueGet>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d1f3      	bne.n	800103e <StartSIM800SendTask+0x1a>
	  {
		  if (osMutexAcquire(UART1MutexHandle, osWaitForever) == osOK)
 8001056:	4b4b      	ldr	r3, [pc, #300]	; (8001184 <StartSIM800SendTask+0x160>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f04f 31ff 	mov.w	r1, #4294967295
 800105e:	4618      	mov	r0, r3
 8001060:	f006 ff6e 	bl	8007f40 <osMutexAcquire>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d1e9      	bne.n	800103e <StartSIM800SendTask+0x1a>
		  {
			  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 800106a:	4b47      	ldr	r3, [pc, #284]	; (8001188 <StartSIM800SendTask+0x164>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	68da      	ldr	r2, [r3, #12]
 8001070:	4b45      	ldr	r3, [pc, #276]	; (8001188 <StartSIM800SendTask+0x164>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f042 0210 	orr.w	r2, r2, #16
 8001078:	60da      	str	r2, [r3, #12]

			  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 800107a:	224c      	movs	r2, #76	; 0x4c
 800107c:	2100      	movs	r1, #0
 800107e:	4843      	ldr	r0, [pc, #268]	; (800118c <StartSIM800SendTask+0x168>)
 8001080:	f00a fd44 	bl	800bb0c <memset>
			  sprintf(send_MQTT_message,"AT+CIPSEND=%d\r\n\0",strlen(msg.str) + strlen(TOPIC) + 4);
 8001084:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff f8c1 	bl	8000210 <strlen>
 800108e:	4604      	mov	r4, r0
 8001090:	483f      	ldr	r0, [pc, #252]	; (8001190 <StartSIM800SendTask+0x16c>)
 8001092:	f7ff f8bd 	bl	8000210 <strlen>
 8001096:	4603      	mov	r3, r0
 8001098:	4423      	add	r3, r4
 800109a:	1d1a      	adds	r2, r3, #4
 800109c:	f107 030c 	add.w	r3, r7, #12
 80010a0:	493c      	ldr	r1, [pc, #240]	; (8001194 <StartSIM800SendTask+0x170>)
 80010a2:	4618      	mov	r0, r3
 80010a4:	f00a fd6e 	bl	800bb84 <siprintf>
			  HAL_UART_Transmit_DMA(&huart1, send_MQTT_message, strlen(send_MQTT_message));
 80010a8:	f107 030c 	add.w	r3, r7, #12
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff f8af 	bl	8000210 <strlen>
 80010b2:	4603      	mov	r3, r0
 80010b4:	b29a      	uxth	r2, r3
 80010b6:	f107 030c 	add.w	r3, r7, #12
 80010ba:	4619      	mov	r1, r3
 80010bc:	4832      	ldr	r0, [pc, #200]	; (8001188 <StartSIM800SendTask+0x164>)
 80010be:	f005 fa05 	bl	80064cc <HAL_UART_Transmit_DMA>
			  ans = SIM800_Ans(">");
 80010c2:	4835      	ldr	r0, [pc, #212]	; (8001198 <StartSIM800SendTask+0x174>)
 80010c4:	f7ff fec6 	bl	8000e54 <SIM800_Ans>
 80010c8:	4603      	mov	r3, r0
 80010ca:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			  if (!ans)
			  {

			  }
			  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80010ce:	224c      	movs	r2, #76	; 0x4c
 80010d0:	2100      	movs	r1, #0
 80010d2:	482e      	ldr	r0, [pc, #184]	; (800118c <StartSIM800SendTask+0x168>)
 80010d4:	f00a fd1a 	bl	800bb0c <memset>
			  osDelay(100);
 80010d8:	2064      	movs	r0, #100	; 0x64
 80010da:	f006 fdd0 	bl	8007c7e <osDelay>

			  //make string for transmit
			  Make_MQTT_send_string(send_MQTT_message, msg);
 80010de:	f107 060c 	add.w	r6, r7, #12
 80010e2:	466c      	mov	r4, sp
 80010e4:	f107 0564 	add.w	r5, r7, #100	; 0x64
 80010e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010f8:	c403      	stmia	r4!, {r0, r1}
 80010fa:	8022      	strh	r2, [r4, #0]
 80010fc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001100:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001102:	4630      	mov	r0, r6
 8001104:	f7ff fd6a 	bl	8000bdc <Make_MQTT_send_string>
			  HAL_UART_Transmit_DMA(&huart1, send_MQTT_message, strlen(msg.str) + strlen(TOPIC) + 4);
 8001108:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff f87f 	bl	8000210 <strlen>
 8001112:	4603      	mov	r3, r0
 8001114:	b29c      	uxth	r4, r3
 8001116:	481e      	ldr	r0, [pc, #120]	; (8001190 <StartSIM800SendTask+0x16c>)
 8001118:	f7ff f87a 	bl	8000210 <strlen>
 800111c:	4603      	mov	r3, r0
 800111e:	b29b      	uxth	r3, r3
 8001120:	4423      	add	r3, r4
 8001122:	b29b      	uxth	r3, r3
 8001124:	3304      	adds	r3, #4
 8001126:	b29a      	uxth	r2, r3
 8001128:	f107 030c 	add.w	r3, r7, #12
 800112c:	4619      	mov	r1, r3
 800112e:	4816      	ldr	r0, [pc, #88]	; (8001188 <StartSIM800SendTask+0x164>)
 8001130:	f005 f9cc 	bl	80064cc <HAL_UART_Transmit_DMA>

			  ans = SIM800_Ans("\x30"); //our transmited message
 8001134:	4819      	ldr	r0, [pc, #100]	; (800119c <StartSIM800SendTask+0x178>)
 8001136:	f7ff fe8d 	bl	8000e54 <SIM800_Ans>
 800113a:	4603      	mov	r3, r0
 800113c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			  if (!ans)
 8001140:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001144:	2b00      	cmp	r3, #0
 8001146:	d10a      	bne.n	800115e <StartSIM800SendTask+0x13a>
			  {
				  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001148:	224c      	movs	r2, #76	; 0x4c
 800114a:	2100      	movs	r1, #0
 800114c:	480f      	ldr	r0, [pc, #60]	; (800118c <StartSIM800SendTask+0x168>)
 800114e:	f00a fcdd 	bl	800bb0c <memset>
				  ans = SIM800_Ans("\x30"); //our transmited message
 8001152:	4812      	ldr	r0, [pc, #72]	; (800119c <StartSIM800SendTask+0x178>)
 8001154:	f7ff fe7e 	bl	8000e54 <SIM800_Ans>
 8001158:	4603      	mov	r3, r0
 800115a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				  {

				  }
			  }

			  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 800115e:	224c      	movs	r2, #76	; 0x4c
 8001160:	2100      	movs	r1, #0
 8001162:	480a      	ldr	r0, [pc, #40]	; (800118c <StartSIM800SendTask+0x168>)
 8001164:	f00a fcd2 	bl	800bb0c <memset>
			  HAL_UART_Receive_DMA(&huart1, SIM800BuffRx, BUFF_SIM_SIZE);
 8001168:	224c      	movs	r2, #76	; 0x4c
 800116a:	4908      	ldr	r1, [pc, #32]	; (800118c <StartSIM800SendTask+0x168>)
 800116c:	4806      	ldr	r0, [pc, #24]	; (8001188 <StartSIM800SendTask+0x164>)
 800116e:	f005 fa2b 	bl	80065c8 <HAL_UART_Receive_DMA>
			  osMutexRelease(UART1MutexHandle); //release UART for SIM800
 8001172:	4b04      	ldr	r3, [pc, #16]	; (8001184 <StartSIM800SendTask+0x160>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4618      	mov	r0, r3
 8001178:	f006 ff2d 	bl	8007fd6 <osMutexRelease>
	  if (osMessageQueueGet(SIM800SendQueueHandle, &msg, 0, osWaitForever) == osOK)
 800117c:	e75f      	b.n	800103e <StartSIM800SendTask+0x1a>
 800117e:	bf00      	nop
 8001180:	20000394 	.word	0x20000394
 8001184:	200003a4 	.word	0x200003a4
 8001188:	20000164 	.word	0x20000164
 800118c:	20000404 	.word	0x20000404
 8001190:	20000010 	.word	0x20000010
 8001194:	0800cee8 	.word	0x0800cee8
 8001198:	0800cefc 	.word	0x0800cefc
 800119c:	0800cf00 	.word	0x0800cf00

080011a0 <PINGStartTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_PINGStartTask */
void PINGStartTask(void *argument)
{
 80011a0:	b5b0      	push	{r4, r5, r7, lr}
 80011a2:	b0a8      	sub	sp, #160	; 0xa0
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PINGStartTask */
	message_type msg;
	uint8_t send_MQTT_message[BUFF_SIM_SIZE] = {};
 80011a8:	2300      	movs	r3, #0
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	f107 0310 	add.w	r3, r7, #16
 80011b0:	2248      	movs	r2, #72	; 0x48
 80011b2:	2100      	movs	r1, #0
 80011b4:	4618      	mov	r0, r3
 80011b6:	f00a fca9 	bl	800bb0c <memset>
	uint8_t ans = 0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
  /* Infinite loop */
  for(;;)
  {
	  if (osSemaphoreAcquire(PINGSemHandle, osWaitForever) == osOK)
 80011c0:	4b8c      	ldr	r3, [pc, #560]	; (80013f4 <PINGStartTask+0x254>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f04f 31ff 	mov.w	r1, #4294967295
 80011c8:	4618      	mov	r0, r3
 80011ca:	f006 ffcb 	bl	8008164 <osSemaphoreAcquire>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d1f5      	bne.n	80011c0 <PINGStartTask+0x20>
	  {
		  if (osMutexAcquire(UART1MutexHandle, osWaitForever) == osOK)
 80011d4:	4b88      	ldr	r3, [pc, #544]	; (80013f8 <PINGStartTask+0x258>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f04f 31ff 	mov.w	r1, #4294967295
 80011dc:	4618      	mov	r0, r3
 80011de:	f006 feaf 	bl	8007f40 <osMutexAcquire>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d1eb      	bne.n	80011c0 <PINGStartTask+0x20>
		  {

			  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80011e8:	224c      	movs	r2, #76	; 0x4c
 80011ea:	2100      	movs	r1, #0
 80011ec:	4883      	ldr	r0, [pc, #524]	; (80013fc <PINGStartTask+0x25c>)
 80011ee:	f00a fc8d 	bl	800bb0c <memset>
			  sprintf(send_MQTT_message,"AT+CIPSEND=2\r\n\0");
 80011f2:	f107 030c 	add.w	r3, r7, #12
 80011f6:	4982      	ldr	r1, [pc, #520]	; (8001400 <PINGStartTask+0x260>)
 80011f8:	4618      	mov	r0, r3
 80011fa:	f00a fcc3 	bl	800bb84 <siprintf>
			  HAL_UART_Transmit_DMA(&huart1, send_MQTT_message, strlen(send_MQTT_message));
 80011fe:	f107 030c 	add.w	r3, r7, #12
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff f804 	bl	8000210 <strlen>
 8001208:	4603      	mov	r3, r0
 800120a:	b29a      	uxth	r2, r3
 800120c:	f107 030c 	add.w	r3, r7, #12
 8001210:	4619      	mov	r1, r3
 8001212:	487c      	ldr	r0, [pc, #496]	; (8001404 <PINGStartTask+0x264>)
 8001214:	f005 f95a 	bl	80064cc <HAL_UART_Transmit_DMA>
			  ans = SIM800_Ans(">");
 8001218:	487b      	ldr	r0, [pc, #492]	; (8001408 <PINGStartTask+0x268>)
 800121a:	f7ff fe1b 	bl	8000e54 <SIM800_Ans>
 800121e:	4603      	mov	r3, r0
 8001220:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			  if (!ans)
 8001224:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001228:	2b00      	cmp	r3, #0
 800122a:	d12f      	bne.n	800128c <PINGStartTask+0xec>
			  {
				  strcpy(&(msg.str), "FAILE_send_PING1\r\n\0");
 800122c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001230:	4a76      	ldr	r2, [pc, #472]	; (800140c <PINGStartTask+0x26c>)
 8001232:	461c      	mov	r4, r3
 8001234:	4615      	mov	r5, r2
 8001236:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001238:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800123a:	682b      	ldr	r3, [r5, #0]
 800123c:	461a      	mov	r2, r3
 800123e:	8022      	strh	r2, [r4, #0]
 8001240:	3402      	adds	r4, #2
 8001242:	0c1b      	lsrs	r3, r3, #16
 8001244:	7023      	strb	r3, [r4, #0]
				  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001246:	4b72      	ldr	r3, [pc, #456]	; (8001410 <PINGStartTask+0x270>)
 8001248:	6818      	ldr	r0, [r3, #0]
 800124a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800124e:	f04f 33ff 	mov.w	r3, #4294967295
 8001252:	2200      	movs	r2, #0
 8001254:	f007 f890 	bl	8008378 <osMessageQueuePut>
				  Error_ping = 1;
 8001258:	4b6e      	ldr	r3, [pc, #440]	; (8001414 <PINGStartTask+0x274>)
 800125a:	2201      	movs	r2, #1
 800125c:	701a      	strb	r2, [r3, #0]
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1); //signal for error
 800125e:	2201      	movs	r2, #1
 8001260:	2108      	movs	r1, #8
 8001262:	486d      	ldr	r0, [pc, #436]	; (8001418 <PINGStartTask+0x278>)
 8001264:	f003 fa22 	bl	80046ac <HAL_GPIO_WritePin>
				  osMutexRelease(UART1MutexHandle); //release UART for SIM800
 8001268:	4b63      	ldr	r3, [pc, #396]	; (80013f8 <PINGStartTask+0x258>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4618      	mov	r0, r3
 800126e:	f006 feb2 	bl	8007fd6 <osMutexRelease>
				  //start task to try reconnect
				  MQTTConnectTaskHandle = osThreadNew(StartMQTTConnectTask, NULL, &MQTTConnectTask_attributes);
 8001272:	4a6a      	ldr	r2, [pc, #424]	; (800141c <PINGStartTask+0x27c>)
 8001274:	2100      	movs	r1, #0
 8001276:	486a      	ldr	r0, [pc, #424]	; (8001420 <PINGStartTask+0x280>)
 8001278:	f006 fc42 	bl	8007b00 <osThreadNew>
 800127c:	4603      	mov	r3, r0
 800127e:	4a69      	ldr	r2, [pc, #420]	; (8001424 <PINGStartTask+0x284>)
 8001280:	6013      	str	r3, [r2, #0]
				  //delete this thread
				  osThreadTerminate(PINGTaskHandle);
 8001282:	4b69      	ldr	r3, [pc, #420]	; (8001428 <PINGStartTask+0x288>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4618      	mov	r0, r3
 8001288:	f006 fccc 	bl	8007c24 <osThreadTerminate>
			  }
			  osDelay(200);
 800128c:	20c8      	movs	r0, #200	; 0xc8
 800128e:	f006 fcf6 	bl	8007c7e <osDelay>
			  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001292:	224c      	movs	r2, #76	; 0x4c
 8001294:	2100      	movs	r1, #0
 8001296:	4859      	ldr	r0, [pc, #356]	; (80013fc <PINGStartTask+0x25c>)
 8001298:	f00a fc38 	bl	800bb0c <memset>
			  HAL_UART_Transmit_DMA(&huart1, PING, 2);
 800129c:	2202      	movs	r2, #2
 800129e:	4963      	ldr	r1, [pc, #396]	; (800142c <PINGStartTask+0x28c>)
 80012a0:	4858      	ldr	r0, [pc, #352]	; (8001404 <PINGStartTask+0x264>)
 80012a2:	f005 f913 	bl	80064cc <HAL_UART_Transmit_DMA>
			  ans = SIM800_Ans(PING);
 80012a6:	4861      	ldr	r0, [pc, #388]	; (800142c <PINGStartTask+0x28c>)
 80012a8:	f7ff fdd4 	bl	8000e54 <SIM800_Ans>
 80012ac:	4603      	mov	r3, r0
 80012ae:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			  if (!ans)
 80012b2:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d12f      	bne.n	800131a <PINGStartTask+0x17a>
			  {
				  strcpy(&(msg.str), "FAILE_send_PING2\r\n\0");
 80012ba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80012be:	4a5c      	ldr	r2, [pc, #368]	; (8001430 <PINGStartTask+0x290>)
 80012c0:	461c      	mov	r4, r3
 80012c2:	4615      	mov	r5, r2
 80012c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012c8:	682b      	ldr	r3, [r5, #0]
 80012ca:	461a      	mov	r2, r3
 80012cc:	8022      	strh	r2, [r4, #0]
 80012ce:	3402      	adds	r4, #2
 80012d0:	0c1b      	lsrs	r3, r3, #16
 80012d2:	7023      	strb	r3, [r4, #0]
				  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 80012d4:	4b4e      	ldr	r3, [pc, #312]	; (8001410 <PINGStartTask+0x270>)
 80012d6:	6818      	ldr	r0, [r3, #0]
 80012d8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80012dc:	f04f 33ff 	mov.w	r3, #4294967295
 80012e0:	2200      	movs	r2, #0
 80012e2:	f007 f849 	bl	8008378 <osMessageQueuePut>
				  Error_ping = 1;
 80012e6:	4b4b      	ldr	r3, [pc, #300]	; (8001414 <PINGStartTask+0x274>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	701a      	strb	r2, [r3, #0]
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
 80012ec:	2201      	movs	r2, #1
 80012ee:	2108      	movs	r1, #8
 80012f0:	4849      	ldr	r0, [pc, #292]	; (8001418 <PINGStartTask+0x278>)
 80012f2:	f003 f9db 	bl	80046ac <HAL_GPIO_WritePin>
				  osMutexRelease(UART1MutexHandle);
 80012f6:	4b40      	ldr	r3, [pc, #256]	; (80013f8 <PINGStartTask+0x258>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f006 fe6b 	bl	8007fd6 <osMutexRelease>
				  MQTTConnectTaskHandle = osThreadNew(StartMQTTConnectTask, NULL, &MQTTConnectTask_attributes);
 8001300:	4a46      	ldr	r2, [pc, #280]	; (800141c <PINGStartTask+0x27c>)
 8001302:	2100      	movs	r1, #0
 8001304:	4846      	ldr	r0, [pc, #280]	; (8001420 <PINGStartTask+0x280>)
 8001306:	f006 fbfb 	bl	8007b00 <osThreadNew>
 800130a:	4603      	mov	r3, r0
 800130c:	4a45      	ldr	r2, [pc, #276]	; (8001424 <PINGStartTask+0x284>)
 800130e:	6013      	str	r3, [r2, #0]
				  osThreadTerminate(PINGTaskHandle);
 8001310:	4b45      	ldr	r3, [pc, #276]	; (8001428 <PINGStartTask+0x288>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4618      	mov	r0, r3
 8001316:	f006 fc85 	bl	8007c24 <osThreadTerminate>
			  }
			  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 800131a:	224c      	movs	r2, #76	; 0x4c
 800131c:	2100      	movs	r1, #0
 800131e:	4837      	ldr	r0, [pc, #220]	; (80013fc <PINGStartTask+0x25c>)
 8001320:	f00a fbf4 	bl	800bb0c <memset>
			  ans = SIM800_Ans(PING_ASK);
 8001324:	4843      	ldr	r0, [pc, #268]	; (8001434 <PINGStartTask+0x294>)
 8001326:	f7ff fd95 	bl	8000e54 <SIM800_Ans>
 800132a:	4603      	mov	r3, r0
 800132c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			  if (!ans)
 8001330:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001334:	2b00      	cmp	r3, #0
 8001336:	d13e      	bne.n	80013b6 <PINGStartTask+0x216>
			  {
				  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001338:	224c      	movs	r2, #76	; 0x4c
 800133a:	2100      	movs	r1, #0
 800133c:	482f      	ldr	r0, [pc, #188]	; (80013fc <PINGStartTask+0x25c>)
 800133e:	f00a fbe5 	bl	800bb0c <memset>
				  ans = SIM800_Ans(PING_ASK);
 8001342:	483c      	ldr	r0, [pc, #240]	; (8001434 <PINGStartTask+0x294>)
 8001344:	f7ff fd86 	bl	8000e54 <SIM800_Ans>
 8001348:	4603      	mov	r3, r0
 800134a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				  if (!ans)
 800134e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001352:	2b00      	cmp	r3, #0
 8001354:	d12f      	bne.n	80013b6 <PINGStartTask+0x216>
				  {
					  strcpy(&(msg.str), "FAILE_send_PING3\r\n\0");
 8001356:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800135a:	4a37      	ldr	r2, [pc, #220]	; (8001438 <PINGStartTask+0x298>)
 800135c:	461c      	mov	r4, r3
 800135e:	4615      	mov	r5, r2
 8001360:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001362:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001364:	682b      	ldr	r3, [r5, #0]
 8001366:	461a      	mov	r2, r3
 8001368:	8022      	strh	r2, [r4, #0]
 800136a:	3402      	adds	r4, #2
 800136c:	0c1b      	lsrs	r3, r3, #16
 800136e:	7023      	strb	r3, [r4, #0]
					  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001370:	4b27      	ldr	r3, [pc, #156]	; (8001410 <PINGStartTask+0x270>)
 8001372:	6818      	ldr	r0, [r3, #0]
 8001374:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001378:	f04f 33ff 	mov.w	r3, #4294967295
 800137c:	2200      	movs	r2, #0
 800137e:	f006 fffb 	bl	8008378 <osMessageQueuePut>
					  Error_ping = 1;
 8001382:	4b24      	ldr	r3, [pc, #144]	; (8001414 <PINGStartTask+0x274>)
 8001384:	2201      	movs	r2, #1
 8001386:	701a      	strb	r2, [r3, #0]
					  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
 8001388:	2201      	movs	r2, #1
 800138a:	2108      	movs	r1, #8
 800138c:	4822      	ldr	r0, [pc, #136]	; (8001418 <PINGStartTask+0x278>)
 800138e:	f003 f98d 	bl	80046ac <HAL_GPIO_WritePin>
					  osMutexRelease(UART1MutexHandle);
 8001392:	4b19      	ldr	r3, [pc, #100]	; (80013f8 <PINGStartTask+0x258>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f006 fe1d 	bl	8007fd6 <osMutexRelease>
					  MQTTConnectTaskHandle = osThreadNew(StartMQTTConnectTask, NULL, &MQTTConnectTask_attributes);
 800139c:	4a1f      	ldr	r2, [pc, #124]	; (800141c <PINGStartTask+0x27c>)
 800139e:	2100      	movs	r1, #0
 80013a0:	481f      	ldr	r0, [pc, #124]	; (8001420 <PINGStartTask+0x280>)
 80013a2:	f006 fbad 	bl	8007b00 <osThreadNew>
 80013a6:	4603      	mov	r3, r0
 80013a8:	4a1e      	ldr	r2, [pc, #120]	; (8001424 <PINGStartTask+0x284>)
 80013aa:	6013      	str	r3, [r2, #0]
					  osThreadTerminate(PINGTaskHandle);
 80013ac:	4b1e      	ldr	r3, [pc, #120]	; (8001428 <PINGStartTask+0x288>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f006 fc37 	bl	8007c24 <osThreadTerminate>
				  }
			  }

			  strcpy(&(msg.str), "PING_SEND_OK\r\n\0");
 80013b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013ba:	4a20      	ldr	r2, [pc, #128]	; (800143c <PINGStartTask+0x29c>)
 80013bc:	461c      	mov	r4, r3
 80013be:	4613      	mov	r3, r2
 80013c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013c2:	c407      	stmia	r4!, {r0, r1, r2}
 80013c4:	8023      	strh	r3, [r4, #0]
 80013c6:	3402      	adds	r4, #2
 80013c8:	0c1b      	lsrs	r3, r3, #16
 80013ca:	7023      	strb	r3, [r4, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 80013cc:	4b10      	ldr	r3, [pc, #64]	; (8001410 <PINGStartTask+0x270>)
 80013ce:	6818      	ldr	r0, [r3, #0]
 80013d0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80013d4:	f04f 33ff 	mov.w	r3, #4294967295
 80013d8:	2200      	movs	r2, #0
 80013da:	f006 ffcd 	bl	8008378 <osMessageQueuePut>

			  HAL_UART_Receive_DMA(&huart1, SIM800BuffRx, BUFF_SIM_SIZE);
 80013de:	224c      	movs	r2, #76	; 0x4c
 80013e0:	4906      	ldr	r1, [pc, #24]	; (80013fc <PINGStartTask+0x25c>)
 80013e2:	4808      	ldr	r0, [pc, #32]	; (8001404 <PINGStartTask+0x264>)
 80013e4:	f005 f8f0 	bl	80065c8 <HAL_UART_Receive_DMA>
			  osMutexRelease(UART1MutexHandle);
 80013e8:	4b03      	ldr	r3, [pc, #12]	; (80013f8 <PINGStartTask+0x258>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f006 fdf2 	bl	8007fd6 <osMutexRelease>
	  if (osSemaphoreAcquire(PINGSemHandle, osWaitForever) == osOK)
 80013f2:	e6e5      	b.n	80011c0 <PINGStartTask+0x20>
 80013f4:	200003a8 	.word	0x200003a8
 80013f8:	200003a4 	.word	0x200003a4
 80013fc:	20000404 	.word	0x20000404
 8001400:	0800cf04 	.word	0x0800cf04
 8001404:	20000164 	.word	0x20000164
 8001408:	0800cefc 	.word	0x0800cefc
 800140c:	0800cf14 	.word	0x0800cf14
 8001410:	20000390 	.word	0x20000390
 8001414:	200003b1 	.word	0x200003b1
 8001418:	40020800 	.word	0x40020800
 800141c:	0800d700 	.word	0x0800d700
 8001420:	080019a5 	.word	0x080019a5
 8001424:	20000384 	.word	0x20000384
 8001428:	2000037c 	.word	0x2000037c
 800142c:	20000000 	.word	0x20000000
 8001430:	0800cf28 	.word	0x0800cf28
 8001434:	20000004 	.word	0x20000004
 8001438:	0800cf3c 	.word	0x0800cf3c
 800143c:	0800cf50 	.word	0x0800cf50

08001440 <StartSIM800Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSIM800Task */
void StartSIM800Task(void *argument)
{
 8001440:	b5b0      	push	{r4, r5, r7, lr}
 8001442:	b094      	sub	sp, #80	; 0x50
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSIM800Task */

	message_type msg; // string for debug message
	uint8_t ans = 0; //is one string in another
 8001448:	2300      	movs	r3, #0
 800144a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  /* Infinite loop */
  for(;;)
  {
	  Error_init = 0;
 800144e:	4bb1      	ldr	r3, [pc, #708]	; (8001714 <StartSIM800Task+0x2d4>)
 8001450:	2200      	movs	r2, #0
 8001452:	701a      	strb	r2, [r3, #0]
	  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8001454:	4bb0      	ldr	r3, [pc, #704]	; (8001718 <StartSIM800Task+0x2d8>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	68da      	ldr	r2, [r3, #12]
 800145a:	4baf      	ldr	r3, [pc, #700]	; (8001718 <StartSIM800Task+0x2d8>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f042 0210 	orr.w	r2, r2, #16
 8001462:	60da      	str	r2, [r3, #12]

start:

		//Hardware reset of module

		HAL_GPIO_WritePin(SIM_START_GPIO_Port, SIM_START_Pin, RESET);
 8001464:	2200      	movs	r2, #0
 8001466:	2110      	movs	r1, #16
 8001468:	48ac      	ldr	r0, [pc, #688]	; (800171c <StartSIM800Task+0x2dc>)
 800146a:	f003 f91f 	bl	80046ac <HAL_GPIO_WritePin>
		osDelay(500);
 800146e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001472:	f006 fc04 	bl	8007c7e <osDelay>
		HAL_GPIO_WritePin(SIM_START_GPIO_Port, SIM_START_Pin, SET);
 8001476:	2201      	movs	r2, #1
 8001478:	2110      	movs	r1, #16
 800147a:	48a8      	ldr	r0, [pc, #672]	; (800171c <StartSIM800Task+0x2dc>)
 800147c:	f003 f916 	bl	80046ac <HAL_GPIO_WritePin>
		osDelay(8000);
 8001480:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8001484:	f006 fbfb 	bl	8007c7e <osDelay>

	  	//send initializing data

	  	sprintf(str_SIM800,"ATZ\r\n\0");
 8001488:	49a5      	ldr	r1, [pc, #660]	; (8001720 <StartSIM800Task+0x2e0>)
 800148a:	48a6      	ldr	r0, [pc, #664]	; (8001724 <StartSIM800Task+0x2e4>)
 800148c:	f00a fb7a 	bl	800bb84 <siprintf>
	  	HAL_UART_Transmit_IT(&huart1, str_SIM800, strlen(str_SIM800));
 8001490:	48a4      	ldr	r0, [pc, #656]	; (8001724 <StartSIM800Task+0x2e4>)
 8001492:	f7fe febd 	bl	8000210 <strlen>
 8001496:	4603      	mov	r3, r0
 8001498:	b29b      	uxth	r3, r3
 800149a:	461a      	mov	r2, r3
 800149c:	49a1      	ldr	r1, [pc, #644]	; (8001724 <StartSIM800Task+0x2e4>)
 800149e:	489e      	ldr	r0, [pc, #632]	; (8001718 <StartSIM800Task+0x2d8>)
 80014a0:	f004 ffcf 	bl	8006442 <HAL_UART_Transmit_IT>
	  	osDelay(6000);
 80014a4:	f241 7070 	movw	r0, #6000	; 0x1770
 80014a8:	f006 fbe9 	bl	8007c7e <osDelay>

	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE); //clear receive buffer
 80014ac:	224c      	movs	r2, #76	; 0x4c
 80014ae:	2100      	movs	r1, #0
 80014b0:	489d      	ldr	r0, [pc, #628]	; (8001728 <StartSIM800Task+0x2e8>)
 80014b2:	f00a fb2b 	bl	800bb0c <memset>
	  	sprintf(str_SIM800,"AT+CIPMODE=0\r\n\0"); //make string for send
 80014b6:	499d      	ldr	r1, [pc, #628]	; (800172c <StartSIM800Task+0x2ec>)
 80014b8:	489a      	ldr	r0, [pc, #616]	; (8001724 <StartSIM800Task+0x2e4>)
 80014ba:	f00a fb63 	bl	800bb84 <siprintf>
	  	HAL_UART_Transmit_IT(&huart1, str_SIM800, strlen(str_SIM800)); //send string
 80014be:	4899      	ldr	r0, [pc, #612]	; (8001724 <StartSIM800Task+0x2e4>)
 80014c0:	f7fe fea6 	bl	8000210 <strlen>
 80014c4:	4603      	mov	r3, r0
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	461a      	mov	r2, r3
 80014ca:	4996      	ldr	r1, [pc, #600]	; (8001724 <StartSIM800Task+0x2e4>)
 80014cc:	4892      	ldr	r0, [pc, #584]	; (8001718 <StartSIM800Task+0x2d8>)
 80014ce:	f004 ffb8 	bl	8006442 <HAL_UART_Transmit_IT>
	  	ans = SIM800_Ans("OK"); //waiting answer, that we transmit in function
 80014d2:	4897      	ldr	r0, [pc, #604]	; (8001730 <StartSIM800Task+0x2f0>)
 80014d4:	f7ff fcbe 	bl	8000e54 <SIM800_Ans>
 80014d8:	4603      	mov	r3, r0
 80014da:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  	if (!ans)
 80014de:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d111      	bne.n	800150a <StartSIM800Task+0xca>
	  	{
	  		strcpy(&(msg.str), "FAILE_CIPMODE\r\n\0");
 80014e6:	f107 0308 	add.w	r3, r7, #8
 80014ea:	4a92      	ldr	r2, [pc, #584]	; (8001734 <StartSIM800Task+0x2f4>)
 80014ec:	461c      	mov	r4, r3
 80014ee:	4613      	mov	r3, r2
 80014f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  		osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 80014f6:	4b90      	ldr	r3, [pc, #576]	; (8001738 <StartSIM800Task+0x2f8>)
 80014f8:	6818      	ldr	r0, [r3, #0]
 80014fa:	f107 0108 	add.w	r1, r7, #8
 80014fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001502:	2200      	movs	r2, #0
 8001504:	f006 ff38 	bl	8008378 <osMessageQueuePut>
	  		goto start;
 8001508:	e7ac      	b.n	8001464 <StartSIM800Task+0x24>
	  	}
	  	osDelay(300);
 800150a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800150e:	f006 fbb6 	bl	8007c7e <osDelay>

	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001512:	224c      	movs	r2, #76	; 0x4c
 8001514:	2100      	movs	r1, #0
 8001516:	4884      	ldr	r0, [pc, #528]	; (8001728 <StartSIM800Task+0x2e8>)
 8001518:	f00a faf8 	bl	800bb0c <memset>
	  	sprintf(str_SIM800,"AT+CIPMUX=0\r\n\0");
 800151c:	4987      	ldr	r1, [pc, #540]	; (800173c <StartSIM800Task+0x2fc>)
 800151e:	4881      	ldr	r0, [pc, #516]	; (8001724 <StartSIM800Task+0x2e4>)
 8001520:	f00a fb30 	bl	800bb84 <siprintf>
	  	HAL_UART_Transmit_IT(&huart1, str_SIM800, strlen(str_SIM800));
 8001524:	487f      	ldr	r0, [pc, #508]	; (8001724 <StartSIM800Task+0x2e4>)
 8001526:	f7fe fe73 	bl	8000210 <strlen>
 800152a:	4603      	mov	r3, r0
 800152c:	b29b      	uxth	r3, r3
 800152e:	461a      	mov	r2, r3
 8001530:	497c      	ldr	r1, [pc, #496]	; (8001724 <StartSIM800Task+0x2e4>)
 8001532:	4879      	ldr	r0, [pc, #484]	; (8001718 <StartSIM800Task+0x2d8>)
 8001534:	f004 ff85 	bl	8006442 <HAL_UART_Transmit_IT>
	  	ans = SIM800_Ans("OK");
 8001538:	487d      	ldr	r0, [pc, #500]	; (8001730 <StartSIM800Task+0x2f0>)
 800153a:	f7ff fc8b 	bl	8000e54 <SIM800_Ans>
 800153e:	4603      	mov	r3, r0
 8001540:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  	if (!ans)
 8001544:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001548:	2b00      	cmp	r3, #0
 800154a:	d114      	bne.n	8001576 <StartSIM800Task+0x136>
		{
			strcpy(&(msg.str), "FAILE_CIPMUX\r\n\0");
 800154c:	f107 0308 	add.w	r3, r7, #8
 8001550:	4a7b      	ldr	r2, [pc, #492]	; (8001740 <StartSIM800Task+0x300>)
 8001552:	461c      	mov	r4, r3
 8001554:	4613      	mov	r3, r2
 8001556:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001558:	c407      	stmia	r4!, {r0, r1, r2}
 800155a:	8023      	strh	r3, [r4, #0]
 800155c:	3402      	adds	r4, #2
 800155e:	0c1b      	lsrs	r3, r3, #16
 8001560:	7023      	strb	r3, [r4, #0]
			osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001562:	4b75      	ldr	r3, [pc, #468]	; (8001738 <StartSIM800Task+0x2f8>)
 8001564:	6818      	ldr	r0, [r3, #0]
 8001566:	f107 0108 	add.w	r1, r7, #8
 800156a:	f04f 33ff 	mov.w	r3, #4294967295
 800156e:	2200      	movs	r2, #0
 8001570:	f006 ff02 	bl	8008378 <osMessageQueuePut>
			goto start;
 8001574:	e776      	b.n	8001464 <StartSIM800Task+0x24>
		}
		osDelay(300);
 8001576:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800157a:	f006 fb80 	bl	8007c7e <osDelay>

	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 800157e:	224c      	movs	r2, #76	; 0x4c
 8001580:	2100      	movs	r1, #0
 8001582:	4869      	ldr	r0, [pc, #420]	; (8001728 <StartSIM800Task+0x2e8>)
 8001584:	f00a fac2 	bl	800bb0c <memset>
	  	sprintf(str_SIM800,"AT+CIPSTATUS\r\n\0");
 8001588:	496e      	ldr	r1, [pc, #440]	; (8001744 <StartSIM800Task+0x304>)
 800158a:	4866      	ldr	r0, [pc, #408]	; (8001724 <StartSIM800Task+0x2e4>)
 800158c:	f00a fafa 	bl	800bb84 <siprintf>
	  	HAL_UART_Transmit_IT(&huart1, str_SIM800, strlen(str_SIM800));
 8001590:	4864      	ldr	r0, [pc, #400]	; (8001724 <StartSIM800Task+0x2e4>)
 8001592:	f7fe fe3d 	bl	8000210 <strlen>
 8001596:	4603      	mov	r3, r0
 8001598:	b29b      	uxth	r3, r3
 800159a:	461a      	mov	r2, r3
 800159c:	4961      	ldr	r1, [pc, #388]	; (8001724 <StartSIM800Task+0x2e4>)
 800159e:	485e      	ldr	r0, [pc, #376]	; (8001718 <StartSIM800Task+0x2d8>)
 80015a0:	f004 ff4f 	bl	8006442 <HAL_UART_Transmit_IT>
	  	ans = SIM800_Ans("OK");
 80015a4:	4862      	ldr	r0, [pc, #392]	; (8001730 <StartSIM800Task+0x2f0>)
 80015a6:	f7ff fc55 	bl	8000e54 <SIM800_Ans>
 80015aa:	4603      	mov	r3, r0
 80015ac:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  	if (!ans)
 80015b0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d112      	bne.n	80015de <StartSIM800Task+0x19e>
		{
			strcpy(&(msg.str), "FAILE_CIPSTATUS\r\n\0");
 80015b8:	f107 0308 	add.w	r3, r7, #8
 80015bc:	4a62      	ldr	r2, [pc, #392]	; (8001748 <StartSIM800Task+0x308>)
 80015be:	461c      	mov	r4, r3
 80015c0:	4615      	mov	r5, r2
 80015c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015c6:	682b      	ldr	r3, [r5, #0]
 80015c8:	8023      	strh	r3, [r4, #0]
			osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 80015ca:	4b5b      	ldr	r3, [pc, #364]	; (8001738 <StartSIM800Task+0x2f8>)
 80015cc:	6818      	ldr	r0, [r3, #0]
 80015ce:	f107 0108 	add.w	r1, r7, #8
 80015d2:	f04f 33ff 	mov.w	r3, #4294967295
 80015d6:	2200      	movs	r2, #0
 80015d8:	f006 fece 	bl	8008378 <osMessageQueuePut>
			goto start;
 80015dc:	e742      	b.n	8001464 <StartSIM800Task+0x24>
		}
		osDelay(300);
 80015de:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80015e2:	f006 fb4c 	bl	8007c7e <osDelay>

	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80015e6:	224c      	movs	r2, #76	; 0x4c
 80015e8:	2100      	movs	r1, #0
 80015ea:	484f      	ldr	r0, [pc, #316]	; (8001728 <StartSIM800Task+0x2e8>)
 80015ec:	f00a fa8e 	bl	800bb0c <memset>
	  	sprintf(str_SIM800,"AT+CIPRXGET=0\r\n\0");
 80015f0:	4956      	ldr	r1, [pc, #344]	; (800174c <StartSIM800Task+0x30c>)
 80015f2:	484c      	ldr	r0, [pc, #304]	; (8001724 <StartSIM800Task+0x2e4>)
 80015f4:	f00a fac6 	bl	800bb84 <siprintf>
	  	HAL_UART_Transmit_IT(&huart1, str_SIM800, strlen(str_SIM800));
 80015f8:	484a      	ldr	r0, [pc, #296]	; (8001724 <StartSIM800Task+0x2e4>)
 80015fa:	f7fe fe09 	bl	8000210 <strlen>
 80015fe:	4603      	mov	r3, r0
 8001600:	b29b      	uxth	r3, r3
 8001602:	461a      	mov	r2, r3
 8001604:	4947      	ldr	r1, [pc, #284]	; (8001724 <StartSIM800Task+0x2e4>)
 8001606:	4844      	ldr	r0, [pc, #272]	; (8001718 <StartSIM800Task+0x2d8>)
 8001608:	f004 ff1b 	bl	8006442 <HAL_UART_Transmit_IT>
	  	ans = SIM800_Ans("OK");
 800160c:	4848      	ldr	r0, [pc, #288]	; (8001730 <StartSIM800Task+0x2f0>)
 800160e:	f7ff fc21 	bl	8000e54 <SIM800_Ans>
 8001612:	4603      	mov	r3, r0
 8001614:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  	if (!ans)
 8001618:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800161c:	2b00      	cmp	r3, #0
 800161e:	d112      	bne.n	8001646 <StartSIM800Task+0x206>
		{
			strcpy(&(msg.str), "FAILE_CIPRXGET\r\n\0");
 8001620:	f107 0308 	add.w	r3, r7, #8
 8001624:	4a4a      	ldr	r2, [pc, #296]	; (8001750 <StartSIM800Task+0x310>)
 8001626:	461c      	mov	r4, r3
 8001628:	4615      	mov	r5, r2
 800162a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800162c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800162e:	682b      	ldr	r3, [r5, #0]
 8001630:	7023      	strb	r3, [r4, #0]
			osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001632:	4b41      	ldr	r3, [pc, #260]	; (8001738 <StartSIM800Task+0x2f8>)
 8001634:	6818      	ldr	r0, [r3, #0]
 8001636:	f107 0108 	add.w	r1, r7, #8
 800163a:	f04f 33ff 	mov.w	r3, #4294967295
 800163e:	2200      	movs	r2, #0
 8001640:	f006 fe9a 	bl	8008378 <osMessageQueuePut>
			goto start;
 8001644:	e70e      	b.n	8001464 <StartSIM800Task+0x24>
		}
		osDelay(300);
 8001646:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800164a:	f006 fb18 	bl	8007c7e <osDelay>

	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 800164e:	224c      	movs	r2, #76	; 0x4c
 8001650:	2100      	movs	r1, #0
 8001652:	4835      	ldr	r0, [pc, #212]	; (8001728 <StartSIM800Task+0x2e8>)
 8001654:	f00a fa5a 	bl	800bb0c <memset>
	  	sprintf(str_SIM800,"AT+CSTT=\"internet.beeline.ru\",\"beeline\",\"beeline\"\r\n\0");
 8001658:	493e      	ldr	r1, [pc, #248]	; (8001754 <StartSIM800Task+0x314>)
 800165a:	4832      	ldr	r0, [pc, #200]	; (8001724 <StartSIM800Task+0x2e4>)
 800165c:	f00a fa92 	bl	800bb84 <siprintf>
	  	HAL_UART_Transmit_IT(&huart1, str_SIM800, strlen(str_SIM800));
 8001660:	4830      	ldr	r0, [pc, #192]	; (8001724 <StartSIM800Task+0x2e4>)
 8001662:	f7fe fdd5 	bl	8000210 <strlen>
 8001666:	4603      	mov	r3, r0
 8001668:	b29b      	uxth	r3, r3
 800166a:	461a      	mov	r2, r3
 800166c:	492d      	ldr	r1, [pc, #180]	; (8001724 <StartSIM800Task+0x2e4>)
 800166e:	482a      	ldr	r0, [pc, #168]	; (8001718 <StartSIM800Task+0x2d8>)
 8001670:	f004 fee7 	bl	8006442 <HAL_UART_Transmit_IT>
	  	ans = SIM800_Ans("OK");
 8001674:	482e      	ldr	r0, [pc, #184]	; (8001730 <StartSIM800Task+0x2f0>)
 8001676:	f7ff fbed 	bl	8000e54 <SIM800_Ans>
 800167a:	4603      	mov	r3, r0
 800167c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  	if (!ans)
 8001680:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001684:	2b00      	cmp	r3, #0
 8001686:	d111      	bne.n	80016ac <StartSIM800Task+0x26c>
		{
			strcpy(&(msg.str), "FAILE_CSTT\r\n\0");
 8001688:	f107 0308 	add.w	r3, r7, #8
 800168c:	4a32      	ldr	r2, [pc, #200]	; (8001758 <StartSIM800Task+0x318>)
 800168e:	461c      	mov	r4, r3
 8001690:	4613      	mov	r3, r2
 8001692:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001694:	c407      	stmia	r4!, {r0, r1, r2}
 8001696:	7023      	strb	r3, [r4, #0]
			osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001698:	4b27      	ldr	r3, [pc, #156]	; (8001738 <StartSIM800Task+0x2f8>)
 800169a:	6818      	ldr	r0, [r3, #0]
 800169c:	f107 0108 	add.w	r1, r7, #8
 80016a0:	f04f 33ff 	mov.w	r3, #4294967295
 80016a4:	2200      	movs	r2, #0
 80016a6:	f006 fe67 	bl	8008378 <osMessageQueuePut>
			goto start;
 80016aa:	e6db      	b.n	8001464 <StartSIM800Task+0x24>
		}
		osDelay(300);
 80016ac:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80016b0:	f006 fae5 	bl	8007c7e <osDelay>

	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80016b4:	224c      	movs	r2, #76	; 0x4c
 80016b6:	2100      	movs	r1, #0
 80016b8:	481b      	ldr	r0, [pc, #108]	; (8001728 <StartSIM800Task+0x2e8>)
 80016ba:	f00a fa27 	bl	800bb0c <memset>
	  	sprintf(str_SIM800,"AT+CIPSTATUS\r\n\0");
 80016be:	4921      	ldr	r1, [pc, #132]	; (8001744 <StartSIM800Task+0x304>)
 80016c0:	4818      	ldr	r0, [pc, #96]	; (8001724 <StartSIM800Task+0x2e4>)
 80016c2:	f00a fa5f 	bl	800bb84 <siprintf>
	  	HAL_UART_Transmit_IT(&huart1, str_SIM800, strlen(str_SIM800));
 80016c6:	4817      	ldr	r0, [pc, #92]	; (8001724 <StartSIM800Task+0x2e4>)
 80016c8:	f7fe fda2 	bl	8000210 <strlen>
 80016cc:	4603      	mov	r3, r0
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	461a      	mov	r2, r3
 80016d2:	4914      	ldr	r1, [pc, #80]	; (8001724 <StartSIM800Task+0x2e4>)
 80016d4:	4810      	ldr	r0, [pc, #64]	; (8001718 <StartSIM800Task+0x2d8>)
 80016d6:	f004 feb4 	bl	8006442 <HAL_UART_Transmit_IT>
	  	ans = SIM800_Ans("OK");
 80016da:	4815      	ldr	r0, [pc, #84]	; (8001730 <StartSIM800Task+0x2f0>)
 80016dc:	f7ff fbba 	bl	8000e54 <SIM800_Ans>
 80016e0:	4603      	mov	r3, r0
 80016e2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  	if (!ans)
 80016e6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d136      	bne.n	800175c <StartSIM800Task+0x31c>
		{
			strcpy(&(msg.str), "FAILE_CIPSTATUS\r\n\0");
 80016ee:	f107 0308 	add.w	r3, r7, #8
 80016f2:	4a15      	ldr	r2, [pc, #84]	; (8001748 <StartSIM800Task+0x308>)
 80016f4:	461c      	mov	r4, r3
 80016f6:	4615      	mov	r5, r2
 80016f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016fc:	682b      	ldr	r3, [r5, #0]
 80016fe:	8023      	strh	r3, [r4, #0]
			osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001700:	4b0d      	ldr	r3, [pc, #52]	; (8001738 <StartSIM800Task+0x2f8>)
 8001702:	6818      	ldr	r0, [r3, #0]
 8001704:	f107 0108 	add.w	r1, r7, #8
 8001708:	f04f 33ff 	mov.w	r3, #4294967295
 800170c:	2200      	movs	r2, #0
 800170e:	f006 fe33 	bl	8008378 <osMessageQueuePut>
			goto start;
 8001712:	e6a7      	b.n	8001464 <StartSIM800Task+0x24>
 8001714:	200003b0 	.word	0x200003b0
 8001718:	20000164 	.word	0x20000164
 800171c:	40020800 	.word	0x40020800
 8001720:	0800cf60 	.word	0x0800cf60
 8001724:	200003b8 	.word	0x200003b8
 8001728:	20000404 	.word	0x20000404
 800172c:	0800cf68 	.word	0x0800cf68
 8001730:	0800cf78 	.word	0x0800cf78
 8001734:	0800cf7c 	.word	0x0800cf7c
 8001738:	20000390 	.word	0x20000390
 800173c:	0800cf90 	.word	0x0800cf90
 8001740:	0800cfa0 	.word	0x0800cfa0
 8001744:	0800cfb0 	.word	0x0800cfb0
 8001748:	0800cfc0 	.word	0x0800cfc0
 800174c:	0800cfd4 	.word	0x0800cfd4
 8001750:	0800cfe8 	.word	0x0800cfe8
 8001754:	0800cffc 	.word	0x0800cffc
 8001758:	0800d034 	.word	0x0800d034
		}
		osDelay(300);
 800175c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001760:	f006 fa8d 	bl	8007c7e <osDelay>

	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001764:	224c      	movs	r2, #76	; 0x4c
 8001766:	2100      	movs	r1, #0
 8001768:	487a      	ldr	r0, [pc, #488]	; (8001954 <StartSIM800Task+0x514>)
 800176a:	f00a f9cf 	bl	800bb0c <memset>
	  	sprintf(str_SIM800,"AT+CIICR\r\n\0");
 800176e:	497a      	ldr	r1, [pc, #488]	; (8001958 <StartSIM800Task+0x518>)
 8001770:	487a      	ldr	r0, [pc, #488]	; (800195c <StartSIM800Task+0x51c>)
 8001772:	f00a fa07 	bl	800bb84 <siprintf>
	  	HAL_UART_Transmit_IT(&huart1, str_SIM800, strlen(str_SIM800));
 8001776:	4879      	ldr	r0, [pc, #484]	; (800195c <StartSIM800Task+0x51c>)
 8001778:	f7fe fd4a 	bl	8000210 <strlen>
 800177c:	4603      	mov	r3, r0
 800177e:	b29b      	uxth	r3, r3
 8001780:	461a      	mov	r2, r3
 8001782:	4976      	ldr	r1, [pc, #472]	; (800195c <StartSIM800Task+0x51c>)
 8001784:	4876      	ldr	r0, [pc, #472]	; (8001960 <StartSIM800Task+0x520>)
 8001786:	f004 fe5c 	bl	8006442 <HAL_UART_Transmit_IT>
	  	ans = SIM800_Ans("AT+CIICR");
 800178a:	4876      	ldr	r0, [pc, #472]	; (8001964 <StartSIM800Task+0x524>)
 800178c:	f7ff fb62 	bl	8000e54 <SIM800_Ans>
 8001790:	4603      	mov	r3, r0
 8001792:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001796:	224c      	movs	r2, #76	; 0x4c
 8001798:	2100      	movs	r1, #0
 800179a:	486e      	ldr	r0, [pc, #440]	; (8001954 <StartSIM800Task+0x514>)
 800179c:	f00a f9b6 	bl	800bb0c <memset>
	  	ans = SIM800_Ans("OK");
 80017a0:	4871      	ldr	r0, [pc, #452]	; (8001968 <StartSIM800Task+0x528>)
 80017a2:	f7ff fb57 	bl	8000e54 <SIM800_Ans>
 80017a6:	4603      	mov	r3, r0
 80017a8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  	if (!ans)
 80017ac:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d111      	bne.n	80017d8 <StartSIM800Task+0x398>
		{
			strcpy(&(msg.str), "FAILE_CIICR\r\n\0");
 80017b4:	f107 0308 	add.w	r3, r7, #8
 80017b8:	4a6c      	ldr	r2, [pc, #432]	; (800196c <StartSIM800Task+0x52c>)
 80017ba:	461c      	mov	r4, r3
 80017bc:	4613      	mov	r3, r2
 80017be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017c0:	c407      	stmia	r4!, {r0, r1, r2}
 80017c2:	8023      	strh	r3, [r4, #0]
			osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 80017c4:	4b6a      	ldr	r3, [pc, #424]	; (8001970 <StartSIM800Task+0x530>)
 80017c6:	6818      	ldr	r0, [r3, #0]
 80017c8:	f107 0108 	add.w	r1, r7, #8
 80017cc:	f04f 33ff 	mov.w	r3, #4294967295
 80017d0:	2200      	movs	r2, #0
 80017d2:	f006 fdd1 	bl	8008378 <osMessageQueuePut>
			goto start;
 80017d6:	e645      	b.n	8001464 <StartSIM800Task+0x24>
		}
		osDelay(500);
 80017d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017dc:	f006 fa4f 	bl	8007c7e <osDelay>

	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80017e0:	224c      	movs	r2, #76	; 0x4c
 80017e2:	2100      	movs	r1, #0
 80017e4:	485b      	ldr	r0, [pc, #364]	; (8001954 <StartSIM800Task+0x514>)
 80017e6:	f00a f991 	bl	800bb0c <memset>
	  	sprintf(str_SIM800,"AT+CIPSTATUS\r\n\0");
 80017ea:	4962      	ldr	r1, [pc, #392]	; (8001974 <StartSIM800Task+0x534>)
 80017ec:	485b      	ldr	r0, [pc, #364]	; (800195c <StartSIM800Task+0x51c>)
 80017ee:	f00a f9c9 	bl	800bb84 <siprintf>
	  	HAL_UART_Transmit_IT(&huart1, str_SIM800, strlen(str_SIM800));
 80017f2:	485a      	ldr	r0, [pc, #360]	; (800195c <StartSIM800Task+0x51c>)
 80017f4:	f7fe fd0c 	bl	8000210 <strlen>
 80017f8:	4603      	mov	r3, r0
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	461a      	mov	r2, r3
 80017fe:	4957      	ldr	r1, [pc, #348]	; (800195c <StartSIM800Task+0x51c>)
 8001800:	4857      	ldr	r0, [pc, #348]	; (8001960 <StartSIM800Task+0x520>)
 8001802:	f004 fe1e 	bl	8006442 <HAL_UART_Transmit_IT>
	  	ans = SIM800_Ans("OK");
 8001806:	4858      	ldr	r0, [pc, #352]	; (8001968 <StartSIM800Task+0x528>)
 8001808:	f7ff fb24 	bl	8000e54 <SIM800_Ans>
 800180c:	4603      	mov	r3, r0
 800180e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  	if (!ans)
 8001812:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001816:	2b00      	cmp	r3, #0
 8001818:	d112      	bne.n	8001840 <StartSIM800Task+0x400>
		{
			strcpy(&(msg.str), "FAILE_CIPSTATUS\r\n\0");
 800181a:	f107 0308 	add.w	r3, r7, #8
 800181e:	4a56      	ldr	r2, [pc, #344]	; (8001978 <StartSIM800Task+0x538>)
 8001820:	461c      	mov	r4, r3
 8001822:	4615      	mov	r5, r2
 8001824:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001826:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001828:	682b      	ldr	r3, [r5, #0]
 800182a:	8023      	strh	r3, [r4, #0]
			osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 800182c:	4b50      	ldr	r3, [pc, #320]	; (8001970 <StartSIM800Task+0x530>)
 800182e:	6818      	ldr	r0, [r3, #0]
 8001830:	f107 0108 	add.w	r1, r7, #8
 8001834:	f04f 33ff 	mov.w	r3, #4294967295
 8001838:	2200      	movs	r2, #0
 800183a:	f006 fd9d 	bl	8008378 <osMessageQueuePut>
			goto start;
 800183e:	e611      	b.n	8001464 <StartSIM800Task+0x24>
		}
		osDelay(300);
 8001840:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001844:	f006 fa1b 	bl	8007c7e <osDelay>

	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001848:	224c      	movs	r2, #76	; 0x4c
 800184a:	2100      	movs	r1, #0
 800184c:	4841      	ldr	r0, [pc, #260]	; (8001954 <StartSIM800Task+0x514>)
 800184e:	f00a f95d 	bl	800bb0c <memset>
	  	sprintf(str_SIM800,"AT+CIFSR\r\n\0");
 8001852:	494a      	ldr	r1, [pc, #296]	; (800197c <StartSIM800Task+0x53c>)
 8001854:	4841      	ldr	r0, [pc, #260]	; (800195c <StartSIM800Task+0x51c>)
 8001856:	f00a f995 	bl	800bb84 <siprintf>
	  	HAL_UART_Transmit_IT(&huart1, str_SIM800, strlen(str_SIM800));
 800185a:	4840      	ldr	r0, [pc, #256]	; (800195c <StartSIM800Task+0x51c>)
 800185c:	f7fe fcd8 	bl	8000210 <strlen>
 8001860:	4603      	mov	r3, r0
 8001862:	b29b      	uxth	r3, r3
 8001864:	461a      	mov	r2, r3
 8001866:	493d      	ldr	r1, [pc, #244]	; (800195c <StartSIM800Task+0x51c>)
 8001868:	483d      	ldr	r0, [pc, #244]	; (8001960 <StartSIM800Task+0x520>)
 800186a:	f004 fdea 	bl	8006442 <HAL_UART_Transmit_IT>
	  	RX = 0;
 800186e:	4b44      	ldr	r3, [pc, #272]	; (8001980 <StartSIM800Task+0x540>)
 8001870:	2200      	movs	r2, #0
 8001872:	701a      	strb	r2, [r3, #0]
	  	HAL_UART_Receive_DMA(&huart1, SIM800BuffRx, BUFF_SIM_SIZE);
 8001874:	224c      	movs	r2, #76	; 0x4c
 8001876:	4937      	ldr	r1, [pc, #220]	; (8001954 <StartSIM800Task+0x514>)
 8001878:	4839      	ldr	r0, [pc, #228]	; (8001960 <StartSIM800Task+0x520>)
 800187a:	f004 fea5 	bl	80065c8 <HAL_UART_Receive_DMA>
	  	while (RX < 1) {};
 800187e:	bf00      	nop
 8001880:	4b3f      	ldr	r3, [pc, #252]	; (8001980 <StartSIM800Task+0x540>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d0fb      	beq.n	8001880 <StartSIM800Task+0x440>
	  	osDelay(300);
 8001888:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800188c:	f006 f9f7 	bl	8007c7e <osDelay>

	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001890:	224c      	movs	r2, #76	; 0x4c
 8001892:	2100      	movs	r1, #0
 8001894:	482f      	ldr	r0, [pc, #188]	; (8001954 <StartSIM800Task+0x514>)
 8001896:	f00a f939 	bl	800bb0c <memset>
	  	sprintf(str_SIM800,"AT+CIPSTATUS\r\n\0");
 800189a:	4936      	ldr	r1, [pc, #216]	; (8001974 <StartSIM800Task+0x534>)
 800189c:	482f      	ldr	r0, [pc, #188]	; (800195c <StartSIM800Task+0x51c>)
 800189e:	f00a f971 	bl	800bb84 <siprintf>
	  	HAL_UART_Transmit_IT(&huart1, str_SIM800, strlen(str_SIM800));
 80018a2:	482e      	ldr	r0, [pc, #184]	; (800195c <StartSIM800Task+0x51c>)
 80018a4:	f7fe fcb4 	bl	8000210 <strlen>
 80018a8:	4603      	mov	r3, r0
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	461a      	mov	r2, r3
 80018ae:	492b      	ldr	r1, [pc, #172]	; (800195c <StartSIM800Task+0x51c>)
 80018b0:	482b      	ldr	r0, [pc, #172]	; (8001960 <StartSIM800Task+0x520>)
 80018b2:	f004 fdc6 	bl	8006442 <HAL_UART_Transmit_IT>
	  	ans = SIM800_Ans("OK");
 80018b6:	482c      	ldr	r0, [pc, #176]	; (8001968 <StartSIM800Task+0x528>)
 80018b8:	f7ff facc 	bl	8000e54 <SIM800_Ans>
 80018bc:	4603      	mov	r3, r0
 80018be:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  	if (!ans)
 80018c2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d112      	bne.n	80018f0 <StartSIM800Task+0x4b0>
		{
			strcpy(&(msg.str), "FAILE_CIPSTATUS\r\n\0");
 80018ca:	f107 0308 	add.w	r3, r7, #8
 80018ce:	4a2a      	ldr	r2, [pc, #168]	; (8001978 <StartSIM800Task+0x538>)
 80018d0:	461c      	mov	r4, r3
 80018d2:	4615      	mov	r5, r2
 80018d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018d8:	682b      	ldr	r3, [r5, #0]
 80018da:	8023      	strh	r3, [r4, #0]
			osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 80018dc:	4b24      	ldr	r3, [pc, #144]	; (8001970 <StartSIM800Task+0x530>)
 80018de:	6818      	ldr	r0, [r3, #0]
 80018e0:	f107 0108 	add.w	r1, r7, #8
 80018e4:	f04f 33ff 	mov.w	r3, #4294967295
 80018e8:	2200      	movs	r2, #0
 80018ea:	f006 fd45 	bl	8008378 <osMessageQueuePut>
			goto start;
 80018ee:	e5b9      	b.n	8001464 <StartSIM800Task+0x24>
		}
		osDelay(300);
 80018f0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80018f4:	f006 f9c3 	bl	8007c7e <osDelay>

		strcpy(&(msg.str), "START_SIM800_OK\r\n\0");
 80018f8:	f107 0308 	add.w	r3, r7, #8
 80018fc:	4a21      	ldr	r2, [pc, #132]	; (8001984 <StartSIM800Task+0x544>)
 80018fe:	461c      	mov	r4, r3
 8001900:	4615      	mov	r5, r2
 8001902:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001904:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001906:	682b      	ldr	r3, [r5, #0]
 8001908:	8023      	strh	r3, [r4, #0]
		osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 800190a:	4b19      	ldr	r3, [pc, #100]	; (8001970 <StartSIM800Task+0x530>)
 800190c:	6818      	ldr	r0, [r3, #0]
 800190e:	f107 0108 	add.w	r1, r7, #8
 8001912:	f04f 33ff 	mov.w	r3, #4294967295
 8001916:	2200      	movs	r2, #0
 8001918:	f006 fd2e 	bl	8008378 <osMessageQueuePut>

	  	Start_SIM800 = 1; //module starting good
 800191c:	4b1a      	ldr	r3, [pc, #104]	; (8001988 <StartSIM800Task+0x548>)
 800191e:	2201      	movs	r2, #1
 8001920:	701a      	strb	r2, [r3, #0]
	  	osMutexRelease(UART1MutexHandle); //release UART1
 8001922:	4b1a      	ldr	r3, [pc, #104]	; (800198c <StartSIM800Task+0x54c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f006 fb55 	bl	8007fd6 <osMutexRelease>
	  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 800192c:	2200      	movs	r2, #0
 800192e:	2104      	movs	r1, #4
 8001930:	4817      	ldr	r0, [pc, #92]	; (8001990 <StartSIM800Task+0x550>)
 8001932:	f002 febb 	bl	80046ac <HAL_GPIO_WritePin>
	  	//start thread to connect to broker
	  	MQTTConnectTaskHandle = osThreadNew(StartMQTTConnectTask, NULL, &MQTTConnectTask_attributes);
 8001936:	4a17      	ldr	r2, [pc, #92]	; (8001994 <StartSIM800Task+0x554>)
 8001938:	2100      	movs	r1, #0
 800193a:	4817      	ldr	r0, [pc, #92]	; (8001998 <StartSIM800Task+0x558>)
 800193c:	f006 f8e0 	bl	8007b00 <osThreadNew>
 8001940:	4603      	mov	r3, r0
 8001942:	4a16      	ldr	r2, [pc, #88]	; (800199c <StartSIM800Task+0x55c>)
 8001944:	6013      	str	r3, [r2, #0]
	  	osThreadTerminate(SIM800StartTaskHandle); //execute this thread
 8001946:	4b16      	ldr	r3, [pc, #88]	; (80019a0 <StartSIM800Task+0x560>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f006 f96a 	bl	8007c24 <osThreadTerminate>
  {
 8001950:	e57d      	b.n	800144e <StartSIM800Task+0xe>
 8001952:	bf00      	nop
 8001954:	20000404 	.word	0x20000404
 8001958:	0800d044 	.word	0x0800d044
 800195c:	200003b8 	.word	0x200003b8
 8001960:	20000164 	.word	0x20000164
 8001964:	0800d050 	.word	0x0800d050
 8001968:	0800cf78 	.word	0x0800cf78
 800196c:	0800d05c 	.word	0x0800d05c
 8001970:	20000390 	.word	0x20000390
 8001974:	0800cfb0 	.word	0x0800cfb0
 8001978:	0800cfc0 	.word	0x0800cfc0
 800197c:	0800d06c 	.word	0x0800d06c
 8001980:	200003b3 	.word	0x200003b3
 8001984:	0800d078 	.word	0x0800d078
 8001988:	200003b2 	.word	0x200003b2
 800198c:	200003a4 	.word	0x200003a4
 8001990:	40020800 	.word	0x40020800
 8001994:	0800d700 	.word	0x0800d700
 8001998:	080019a5 	.word	0x080019a5
 800199c:	20000384 	.word	0x20000384
 80019a0:	20000380 	.word	0x20000380

080019a4 <StartMQTTConnectTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMQTTConnectTask */
void StartMQTTConnectTask(void *argument)
{
 80019a4:	b5b0      	push	{r4, r5, r7, lr}
 80019a6:	b0b4      	sub	sp, #208	; 0xd0
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMQTTConnectTask */

	message_type msg; // string for debug message
	uint8_t ans; //is one string in another
	uint8_t send_MQTT_message[BUFF_SIM_SIZE] = {}; //message to SIM800
 80019ac:	2300      	movs	r3, #0
 80019ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019b4:	2248      	movs	r2, #72	; 0x48
 80019b6:	2100      	movs	r1, #0
 80019b8:	4618      	mov	r0, r3
 80019ba:	f00a f8a7 	bl	800bb0c <memset>
	uint8_t counter = 0; //counter of bad trying to connect to broker
 80019be:	2300      	movs	r3, #0
 80019c0:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
  /* Infinite loop */
  for(;;)
  {

	  // waiting mutex
	  if (osMutexAcquire(UART1MutexHandle, osWaitForever) == osOK)
 80019c4:	4bc3      	ldr	r3, [pc, #780]	; (8001cd4 <StartMQTTConnectTask+0x330>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f04f 31ff 	mov.w	r1, #4294967295
 80019cc:	4618      	mov	r0, r3
 80019ce:	f006 fab7 	bl	8007f40 <osMutexAcquire>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d1f5      	bne.n	80019c4 <StartMQTTConnectTask+0x20>
	  {
	  start:
 80019d8:	bf00      	nop
		  if (counter > 5)
 80019da:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80019de:	2b05      	cmp	r3, #5
 80019e0:	d914      	bls.n	8001a0c <StartMQTTConnectTask+0x68>
		  {
			  Error_init = 1;
 80019e2:	4bbd      	ldr	r3, [pc, #756]	; (8001cd8 <StartMQTTConnectTask+0x334>)
 80019e4:	2201      	movs	r2, #1
 80019e6:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 1);
 80019e8:	2201      	movs	r2, #1
 80019ea:	2104      	movs	r1, #4
 80019ec:	48bb      	ldr	r0, [pc, #748]	; (8001cdc <StartMQTTConnectTask+0x338>)
 80019ee:	f002 fe5d 	bl	80046ac <HAL_GPIO_WritePin>
			  Start_SIM800 = 0;
 80019f2:	4bbb      	ldr	r3, [pc, #748]	; (8001ce0 <StartMQTTConnectTask+0x33c>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	701a      	strb	r2, [r3, #0]
			  osMutexRelease(UART1MutexHandle);
 80019f8:	4bb6      	ldr	r3, [pc, #728]	; (8001cd4 <StartMQTTConnectTask+0x330>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f006 faea 	bl	8007fd6 <osMutexRelease>
			  osThreadTerminate(MQTTConnectTaskHandle);
 8001a02:	4bb8      	ldr	r3, [pc, #736]	; (8001ce4 <StartMQTTConnectTask+0x340>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f006 f90c 	bl	8007c24 <osThreadTerminate>
		  }

		  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8001a0c:	4bb6      	ldr	r3, [pc, #728]	; (8001ce8 <StartMQTTConnectTask+0x344>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	68da      	ldr	r2, [r3, #12]
 8001a12:	4bb5      	ldr	r3, [pc, #724]	; (8001ce8 <StartMQTTConnectTask+0x344>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f042 0210 	orr.w	r2, r2, #16
 8001a1a:	60da      	str	r2, [r3, #12]
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001a1c:	224c      	movs	r2, #76	; 0x4c
 8001a1e:	2100      	movs	r1, #0
 8001a20:	48b2      	ldr	r0, [pc, #712]	; (8001cec <StartMQTTConnectTask+0x348>)
 8001a22:	f00a f873 	bl	800bb0c <memset>
		  //sprintf(str_SIM800,"AT+CIPSTART=\"TCP\",\"broker.hivemq.com\",1883\r\0");
		  sprintf(str_SIM800,"AT+CIPSTART=\"TCP\",\"broker.emqx.io\",1883\r\n\0");
 8001a26:	49b2      	ldr	r1, [pc, #712]	; (8001cf0 <StartMQTTConnectTask+0x34c>)
 8001a28:	48b2      	ldr	r0, [pc, #712]	; (8001cf4 <StartMQTTConnectTask+0x350>)
 8001a2a:	f00a f8ab 	bl	800bb84 <siprintf>
		  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 8001a2e:	48b1      	ldr	r0, [pc, #708]	; (8001cf4 <StartMQTTConnectTask+0x350>)
 8001a30:	f7fe fbee 	bl	8000210 <strlen>
 8001a34:	4603      	mov	r3, r0
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	461a      	mov	r2, r3
 8001a3a:	49ae      	ldr	r1, [pc, #696]	; (8001cf4 <StartMQTTConnectTask+0x350>)
 8001a3c:	48aa      	ldr	r0, [pc, #680]	; (8001ce8 <StartMQTTConnectTask+0x344>)
 8001a3e:	f004 fd45 	bl	80064cc <HAL_UART_Transmit_DMA>
		  ans = SIM800_Ans("OK");
 8001a42:	48ad      	ldr	r0, [pc, #692]	; (8001cf8 <StartMQTTConnectTask+0x354>)
 8001a44:	f7ff fa06 	bl	8000e54 <SIM800_Ans>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
		  if (!ans)
 8001a4e:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d117      	bne.n	8001a86 <StartMQTTConnectTask+0xe2>
		  {
			  strcpy(&(msg.str), "FAILE_connect1\r\n\0");
 8001a56:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001a5a:	4aa8      	ldr	r2, [pc, #672]	; (8001cfc <StartMQTTConnectTask+0x358>)
 8001a5c:	461c      	mov	r4, r3
 8001a5e:	4615      	mov	r5, r2
 8001a60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a64:	682b      	ldr	r3, [r5, #0]
 8001a66:	7023      	strb	r3, [r4, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001a68:	4ba5      	ldr	r3, [pc, #660]	; (8001d00 <StartMQTTConnectTask+0x35c>)
 8001a6a:	6818      	ldr	r0, [r3, #0]
 8001a6c:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001a70:	f04f 33ff 	mov.w	r3, #4294967295
 8001a74:	2200      	movs	r2, #0
 8001a76:	f006 fc7f 	bl	8008378 <osMessageQueuePut>
			  counter++;
 8001a7a:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8001a7e:	3301      	adds	r3, #1
 8001a80:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			  goto start;
 8001a84:	e7a9      	b.n	80019da <StartMQTTConnectTask+0x36>
		  }
		  osDelay(300);
 8001a86:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001a8a:	f006 f8f8 	bl	8007c7e <osDelay>

		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001a8e:	224c      	movs	r2, #76	; 0x4c
 8001a90:	2100      	movs	r1, #0
 8001a92:	4896      	ldr	r0, [pc, #600]	; (8001cec <StartMQTTConnectTask+0x348>)
 8001a94:	f00a f83a 	bl	800bb0c <memset>
		  ans = SIM800_Ans("OK");
 8001a98:	4897      	ldr	r0, [pc, #604]	; (8001cf8 <StartMQTTConnectTask+0x354>)
 8001a9a:	f7ff f9db 	bl	8000e54 <SIM800_Ans>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
		  if (!ans)
 8001aa4:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d117      	bne.n	8001adc <StartMQTTConnectTask+0x138>
		  {
			  strcpy(&(msg.str), "FAILE_connect2\r\n\0");
 8001aac:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001ab0:	4a94      	ldr	r2, [pc, #592]	; (8001d04 <StartMQTTConnectTask+0x360>)
 8001ab2:	461c      	mov	r4, r3
 8001ab4:	4615      	mov	r5, r2
 8001ab6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ab8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001aba:	682b      	ldr	r3, [r5, #0]
 8001abc:	7023      	strb	r3, [r4, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001abe:	4b90      	ldr	r3, [pc, #576]	; (8001d00 <StartMQTTConnectTask+0x35c>)
 8001ac0:	6818      	ldr	r0, [r3, #0]
 8001ac2:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aca:	2200      	movs	r2, #0
 8001acc:	f006 fc54 	bl	8008378 <osMessageQueuePut>
			  counter++;
 8001ad0:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			  goto start;
 8001ada:	e77e      	b.n	80019da <StartMQTTConnectTask+0x36>
		  }
		  osDelay(300);
 8001adc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001ae0:	f006 f8cd 	bl	8007c7e <osDelay>

		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001ae4:	224c      	movs	r2, #76	; 0x4c
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	4880      	ldr	r0, [pc, #512]	; (8001cec <StartMQTTConnectTask+0x348>)
 8001aea:	f00a f80f 	bl	800bb0c <memset>
		  sprintf(str_SIM800,"AT+CIPSEND=14\r\n\0");
 8001aee:	4986      	ldr	r1, [pc, #536]	; (8001d08 <StartMQTTConnectTask+0x364>)
 8001af0:	4880      	ldr	r0, [pc, #512]	; (8001cf4 <StartMQTTConnectTask+0x350>)
 8001af2:	f00a f847 	bl	800bb84 <siprintf>
		  //sprintf(str_SIM800,"AT+CIPSEND=24\r\0");
		  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 8001af6:	487f      	ldr	r0, [pc, #508]	; (8001cf4 <StartMQTTConnectTask+0x350>)
 8001af8:	f7fe fb8a 	bl	8000210 <strlen>
 8001afc:	4603      	mov	r3, r0
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	461a      	mov	r2, r3
 8001b02:	497c      	ldr	r1, [pc, #496]	; (8001cf4 <StartMQTTConnectTask+0x350>)
 8001b04:	4878      	ldr	r0, [pc, #480]	; (8001ce8 <StartMQTTConnectTask+0x344>)
 8001b06:	f004 fce1 	bl	80064cc <HAL_UART_Transmit_DMA>
		  ans = SIM800_Ans(">");
 8001b0a:	4880      	ldr	r0, [pc, #512]	; (8001d0c <StartMQTTConnectTask+0x368>)
 8001b0c:	f7ff f9a2 	bl	8000e54 <SIM800_Ans>
 8001b10:	4603      	mov	r3, r0
 8001b12:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
		  if (!ans)
 8001b16:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d116      	bne.n	8001b4c <StartMQTTConnectTask+0x1a8>
		  {
			  strcpy(&(msg.str), "FAILE_send\r\n\0");
 8001b1e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001b22:	4a7b      	ldr	r2, [pc, #492]	; (8001d10 <StartMQTTConnectTask+0x36c>)
 8001b24:	461c      	mov	r4, r3
 8001b26:	4613      	mov	r3, r2
 8001b28:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b2a:	c407      	stmia	r4!, {r0, r1, r2}
 8001b2c:	7023      	strb	r3, [r4, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001b2e:	4b74      	ldr	r3, [pc, #464]	; (8001d00 <StartMQTTConnectTask+0x35c>)
 8001b30:	6818      	ldr	r0, [r3, #0]
 8001b32:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001b36:	f04f 33ff 	mov.w	r3, #4294967295
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f006 fc1c 	bl	8008378 <osMessageQueuePut>
			  counter++;
 8001b40:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8001b44:	3301      	adds	r3, #1
 8001b46:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			  goto start;
 8001b4a:	e746      	b.n	80019da <StartMQTTConnectTask+0x36>
		  }
		  osDelay(300);
 8001b4c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001b50:	f006 f895 	bl	8007c7e <osDelay>

		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001b54:	224c      	movs	r2, #76	; 0x4c
 8001b56:	2100      	movs	r1, #0
 8001b58:	4864      	ldr	r0, [pc, #400]	; (8001cec <StartMQTTConnectTask+0x348>)
 8001b5a:	f009 ffd7 	bl	800bb0c <memset>
		  uint8_t send_MQTT_init[50] = "\x10\x0C\0\x04MQTT\x04\x02\0\x3C\0\0\0";
 8001b5e:	4b6d      	ldr	r3, [pc, #436]	; (8001d14 <StartMQTTConnectTask+0x370>)
 8001b60:	f107 0408 	add.w	r4, r7, #8
 8001b64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001b6a:	f107 0318 	add.w	r3, r7, #24
 8001b6e:	2222      	movs	r2, #34	; 0x22
 8001b70:	2100      	movs	r1, #0
 8001b72:	4618      	mov	r0, r3
 8001b74:	f009 ffca 	bl	800bb0c <memset>
		  HAL_UART_Transmit_DMA(&huart1, send_MQTT_init, 14);
 8001b78:	f107 0308 	add.w	r3, r7, #8
 8001b7c:	220e      	movs	r2, #14
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4859      	ldr	r0, [pc, #356]	; (8001ce8 <StartMQTTConnectTask+0x344>)
 8001b82:	f004 fca3 	bl	80064cc <HAL_UART_Transmit_DMA>
		  //uint8_t send_MQTT_init[50] = "\x10\x16\0\x04MQTT\x04\x02\0\x3C\0\x0A\x34\x62\x58\x34\x56\x66\x47\x42\x51\x75\0";
		  //HAL_UART_Transmit_DMA(&huart1, send_MQTT_init, 24);
		  //osDelay(2000);

		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001b86:	224c      	movs	r2, #76	; 0x4c
 8001b88:	2100      	movs	r1, #0
 8001b8a:	4858      	ldr	r0, [pc, #352]	; (8001cec <StartMQTTConnectTask+0x348>)
 8001b8c:	f009 ffbe 	bl	800bb0c <memset>
		  ans = SIM800_Ans("\x10\x0C\0\x04MQTT\x04\x02\0\x3C\0\0\0");
 8001b90:	4861      	ldr	r0, [pc, #388]	; (8001d18 <StartMQTTConnectTask+0x374>)
 8001b92:	f7ff f95f 	bl	8000e54 <SIM800_Ans>
 8001b96:	4603      	mov	r3, r0
 8001b98:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
		  if (!ans)
 8001b9c:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d11b      	bne.n	8001bdc <StartMQTTConnectTask+0x238>
		  {
			  strcpy(&(msg.str), "FAILE_init_mqtt1\r\n\0");
 8001ba4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001ba8:	4a5c      	ldr	r2, [pc, #368]	; (8001d1c <StartMQTTConnectTask+0x378>)
 8001baa:	461c      	mov	r4, r3
 8001bac:	4615      	mov	r5, r2
 8001bae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bb2:	682b      	ldr	r3, [r5, #0]
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	8022      	strh	r2, [r4, #0]
 8001bb8:	3402      	adds	r4, #2
 8001bba:	0c1b      	lsrs	r3, r3, #16
 8001bbc:	7023      	strb	r3, [r4, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001bbe:	4b50      	ldr	r3, [pc, #320]	; (8001d00 <StartMQTTConnectTask+0x35c>)
 8001bc0:	6818      	ldr	r0, [r3, #0]
 8001bc2:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f006 fbd4 	bl	8008378 <osMessageQueuePut>
			  counter++;
 8001bd0:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			  goto start;
 8001bda:	e6fe      	b.n	80019da <StartMQTTConnectTask+0x36>
		  }

		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001bdc:	224c      	movs	r2, #76	; 0x4c
 8001bde:	2100      	movs	r1, #0
 8001be0:	4842      	ldr	r0, [pc, #264]	; (8001cec <StartMQTTConnectTask+0x348>)
 8001be2:	f009 ff93 	bl	800bb0c <memset>
		  ans = SIM800_Ans(MQTT_CONNECT_ASK);
 8001be6:	484e      	ldr	r0, [pc, #312]	; (8001d20 <StartMQTTConnectTask+0x37c>)
 8001be8:	f7ff f934 	bl	8000e54 <SIM800_Ans>
 8001bec:	4603      	mov	r3, r0
 8001bee:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
		  if (!ans)
 8001bf2:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d12a      	bne.n	8001c50 <StartMQTTConnectTask+0x2ac>
		  {
			  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001bfa:	224c      	movs	r2, #76	; 0x4c
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	483b      	ldr	r0, [pc, #236]	; (8001cec <StartMQTTConnectTask+0x348>)
 8001c00:	f009 ff84 	bl	800bb0c <memset>
			  ans = SIM800_Ans(MQTT_CONNECT_ASK);
 8001c04:	4846      	ldr	r0, [pc, #280]	; (8001d20 <StartMQTTConnectTask+0x37c>)
 8001c06:	f7ff f925 	bl	8000e54 <SIM800_Ans>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
			  if (!ans)
 8001c10:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d11b      	bne.n	8001c50 <StartMQTTConnectTask+0x2ac>
			  {
				  strcpy(&(msg.str), "FAILE_init_mqtt2\r\n\0");
 8001c18:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001c1c:	4a41      	ldr	r2, [pc, #260]	; (8001d24 <StartMQTTConnectTask+0x380>)
 8001c1e:	461c      	mov	r4, r3
 8001c20:	4615      	mov	r5, r2
 8001c22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c26:	682b      	ldr	r3, [r5, #0]
 8001c28:	461a      	mov	r2, r3
 8001c2a:	8022      	strh	r2, [r4, #0]
 8001c2c:	3402      	adds	r4, #2
 8001c2e:	0c1b      	lsrs	r3, r3, #16
 8001c30:	7023      	strb	r3, [r4, #0]
				  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001c32:	4b33      	ldr	r3, [pc, #204]	; (8001d00 <StartMQTTConnectTask+0x35c>)
 8001c34:	6818      	ldr	r0, [r3, #0]
 8001c36:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f006 fb9a 	bl	8008378 <osMessageQueuePut>
				  counter++;
 8001c44:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8001c48:	3301      	adds	r3, #1
 8001c4a:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
				  goto start;
 8001c4e:	e6c4      	b.n	80019da <StartMQTTConnectTask+0x36>
			  }
		  }
		  osDelay(100);
 8001c50:	2064      	movs	r0, #100	; 0x64
 8001c52:	f006 f814 	bl	8007c7e <osDelay>

		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001c56:	224c      	movs	r2, #76	; 0x4c
 8001c58:	2100      	movs	r1, #0
 8001c5a:	4824      	ldr	r0, [pc, #144]	; (8001cec <StartMQTTConnectTask+0x348>)
 8001c5c:	f009 ff56 	bl	800bb0c <memset>
		  sprintf(send_MQTT_message,"AT+CIPSEND=%d\r\n\0", strlen(TOPIC) + 7);
 8001c60:	4831      	ldr	r0, [pc, #196]	; (8001d28 <StartMQTTConnectTask+0x384>)
 8001c62:	f7fe fad5 	bl	8000210 <strlen>
 8001c66:	4603      	mov	r3, r0
 8001c68:	1dda      	adds	r2, r3, #7
 8001c6a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c6e:	492f      	ldr	r1, [pc, #188]	; (8001d2c <StartMQTTConnectTask+0x388>)
 8001c70:	4618      	mov	r0, r3
 8001c72:	f009 ff87 	bl	800bb84 <siprintf>
		  HAL_UART_Transmit_DMA(&huart1, send_MQTT_message, strlen(send_MQTT_message));
 8001c76:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7fe fac8 	bl	8000210 <strlen>
 8001c80:	4603      	mov	r3, r0
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4817      	ldr	r0, [pc, #92]	; (8001ce8 <StartMQTTConnectTask+0x344>)
 8001c8c:	f004 fc1e 	bl	80064cc <HAL_UART_Transmit_DMA>
		  ans = SIM800_Ans(">");
 8001c90:	481e      	ldr	r0, [pc, #120]	; (8001d0c <StartMQTTConnectTask+0x368>)
 8001c92:	f7ff f8df 	bl	8000e54 <SIM800_Ans>
 8001c96:	4603      	mov	r3, r0
 8001c98:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
		  if (!ans)
 8001c9c:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d147      	bne.n	8001d34 <StartMQTTConnectTask+0x390>
		  {
			  strcpy(&(msg.str), "FAILE_send1\r\n\0");
 8001ca4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001ca8:	4a21      	ldr	r2, [pc, #132]	; (8001d30 <StartMQTTConnectTask+0x38c>)
 8001caa:	461c      	mov	r4, r3
 8001cac:	4613      	mov	r3, r2
 8001cae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cb0:	c407      	stmia	r4!, {r0, r1, r2}
 8001cb2:	8023      	strh	r3, [r4, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001cb4:	4b12      	ldr	r3, [pc, #72]	; (8001d00 <StartMQTTConnectTask+0x35c>)
 8001cb6:	6818      	ldr	r0, [r3, #0]
 8001cb8:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f006 fb59 	bl	8008378 <osMessageQueuePut>
			  counter++;
 8001cc6:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8001cca:	3301      	adds	r3, #1
 8001ccc:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			  goto start;
 8001cd0:	e683      	b.n	80019da <StartMQTTConnectTask+0x36>
 8001cd2:	bf00      	nop
 8001cd4:	200003a4 	.word	0x200003a4
 8001cd8:	200003b0 	.word	0x200003b0
 8001cdc:	40020800 	.word	0x40020800
 8001ce0:	200003b2 	.word	0x200003b2
 8001ce4:	20000384 	.word	0x20000384
 8001ce8:	20000164 	.word	0x20000164
 8001cec:	20000404 	.word	0x20000404
 8001cf0:	0800d08c 	.word	0x0800d08c
 8001cf4:	200003b8 	.word	0x200003b8
 8001cf8:	0800cf78 	.word	0x0800cf78
 8001cfc:	0800d0b8 	.word	0x0800d0b8
 8001d00:	20000390 	.word	0x20000390
 8001d04:	0800d0cc 	.word	0x0800d0cc
 8001d08:	0800d0e0 	.word	0x0800d0e0
 8001d0c:	0800cefc 	.word	0x0800cefc
 8001d10:	0800d0f4 	.word	0x0800d0f4
 8001d14:	0800d1a4 	.word	0x0800d1a4
 8001d18:	0800d104 	.word	0x0800d104
 8001d1c:	0800d114 	.word	0x0800d114
 8001d20:	20000008 	.word	0x20000008
 8001d24:	0800d128 	.word	0x0800d128
 8001d28:	20000010 	.word	0x20000010
 8001d2c:	0800cee8 	.word	0x0800cee8
 8001d30:	0800d13c 	.word	0x0800d13c
		  }
		  osDelay(100);
 8001d34:	2064      	movs	r0, #100	; 0x64
 8001d36:	f005 ffa2 	bl	8007c7e <osDelay>
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001d3a:	224c      	movs	r2, #76	; 0x4c
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	486f      	ldr	r0, [pc, #444]	; (8001efc <StartMQTTConnectTask+0x558>)
 8001d40:	f009 fee4 	bl	800bb0c <memset>

		  //create packet to subscribe on topic
		  send_MQTT_message[0] = 0x82;
 8001d44:	2382      	movs	r3, #130	; 0x82
 8001d46:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
		  send_MQTT_message[1] = strlen(TOPIC) + 5;
 8001d4a:	486d      	ldr	r0, [pc, #436]	; (8001f00 <StartMQTTConnectTask+0x55c>)
 8001d4c:	f7fe fa60 	bl	8000210 <strlen>
 8001d50:	4603      	mov	r3, r0
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	3305      	adds	r3, #5
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
		  send_MQTT_message[2] = 0;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		  send_MQTT_message[3] = 1;
 8001d62:	2301      	movs	r3, #1
 8001d64:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		  send_MQTT_message[4] = 0;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
		  send_MQTT_message[5] = strlen(TOPIC);
 8001d6e:	4864      	ldr	r0, [pc, #400]	; (8001f00 <StartMQTTConnectTask+0x55c>)
 8001d70:	f7fe fa4e 	bl	8000210 <strlen>
 8001d74:	4603      	mov	r3, r0
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
		  sprintf(send_MQTT_message + 6,"%s\0",TOPIC);
 8001d7c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d80:	3306      	adds	r3, #6
 8001d82:	4a5f      	ldr	r2, [pc, #380]	; (8001f00 <StartMQTTConnectTask+0x55c>)
 8001d84:	495f      	ldr	r1, [pc, #380]	; (8001f04 <StartMQTTConnectTask+0x560>)
 8001d86:	4618      	mov	r0, r3
 8001d88:	f009 fefc 	bl	800bb84 <siprintf>
		  HAL_UART_Transmit_DMA(&huart1, send_MQTT_message, strlen(TOPIC) + 7);
 8001d8c:	485c      	ldr	r0, [pc, #368]	; (8001f00 <StartMQTTConnectTask+0x55c>)
 8001d8e:	f7fe fa3f 	bl	8000210 <strlen>
 8001d92:	4603      	mov	r3, r0
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	3307      	adds	r3, #7
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4859      	ldr	r0, [pc, #356]	; (8001f08 <StartMQTTConnectTask+0x564>)
 8001da2:	f004 fb93 	bl	80064cc <HAL_UART_Transmit_DMA>
		  ans = SIM800_Ans(send_MQTT_message);
 8001da6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7ff f852 	bl	8000e54 <SIM800_Ans>
 8001db0:	4603      	mov	r3, r0
 8001db2:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
		  if (!ans)
 8001db6:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d116      	bne.n	8001dec <StartMQTTConnectTask+0x448>
		  {
			  strcpy(&(msg.str), "FAILE_send2\r\n\0");
 8001dbe:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001dc2:	4a52      	ldr	r2, [pc, #328]	; (8001f0c <StartMQTTConnectTask+0x568>)
 8001dc4:	461c      	mov	r4, r3
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dca:	c407      	stmia	r4!, {r0, r1, r2}
 8001dcc:	8023      	strh	r3, [r4, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001dce:	4b50      	ldr	r3, [pc, #320]	; (8001f10 <StartMQTTConnectTask+0x56c>)
 8001dd0:	6818      	ldr	r0, [r3, #0]
 8001dd2:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f006 facc 	bl	8008378 <osMessageQueuePut>
			  counter++;
 8001de0:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8001de4:	3301      	adds	r3, #1
 8001de6:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			  goto start;
 8001dea:	e5f6      	b.n	80019da <StartMQTTConnectTask+0x36>
		  }
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001dec:	224c      	movs	r2, #76	; 0x4c
 8001dee:	2100      	movs	r1, #0
 8001df0:	4842      	ldr	r0, [pc, #264]	; (8001efc <StartMQTTConnectTask+0x558>)
 8001df2:	f009 fe8b 	bl	800bb0c <memset>
		  ans = SIM800_Ans(TOPIC_ASK);
 8001df6:	4847      	ldr	r0, [pc, #284]	; (8001f14 <StartMQTTConnectTask+0x570>)
 8001df8:	f7ff f82c 	bl	8000e54 <SIM800_Ans>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
		  if (!ans)
 8001e02:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d125      	bne.n	8001e56 <StartMQTTConnectTask+0x4b2>
		  {
			  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001e0a:	224c      	movs	r2, #76	; 0x4c
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	483b      	ldr	r0, [pc, #236]	; (8001efc <StartMQTTConnectTask+0x558>)
 8001e10:	f009 fe7c 	bl	800bb0c <memset>
			  ans = SIM800_Ans(TOPIC_ASK);
 8001e14:	483f      	ldr	r0, [pc, #252]	; (8001f14 <StartMQTTConnectTask+0x570>)
 8001e16:	f7ff f81d 	bl	8000e54 <SIM800_Ans>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
			  if (!ans)
 8001e20:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d116      	bne.n	8001e56 <StartMQTTConnectTask+0x4b2>
			  {
				  strcpy(&(msg.str), "FAILE_send3\r\n\0");
 8001e28:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001e2c:	4a3a      	ldr	r2, [pc, #232]	; (8001f18 <StartMQTTConnectTask+0x574>)
 8001e2e:	461c      	mov	r4, r3
 8001e30:	4613      	mov	r3, r2
 8001e32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e34:	c407      	stmia	r4!, {r0, r1, r2}
 8001e36:	8023      	strh	r3, [r4, #0]
				  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001e38:	4b35      	ldr	r3, [pc, #212]	; (8001f10 <StartMQTTConnectTask+0x56c>)
 8001e3a:	6818      	ldr	r0, [r3, #0]
 8001e3c:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001e40:	f04f 33ff 	mov.w	r3, #4294967295
 8001e44:	2200      	movs	r2, #0
 8001e46:	f006 fa97 	bl	8008378 <osMessageQueuePut>
				  counter++;
 8001e4a:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8001e4e:	3301      	adds	r3, #1
 8001e50:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
				  goto start;
 8001e54:	e5c1      	b.n	80019da <StartMQTTConnectTask+0x36>
			  }
		  }


		  strcpy(&(msg.str), "MQTT_connect_OK\r\n\0");
 8001e56:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001e5a:	4a30      	ldr	r2, [pc, #192]	; (8001f1c <StartMQTTConnectTask+0x578>)
 8001e5c:	461c      	mov	r4, r3
 8001e5e:	4615      	mov	r5, r2
 8001e60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e64:	682b      	ldr	r3, [r5, #0]
 8001e66:	8023      	strh	r3, [r4, #0]
		  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001e68:	4b29      	ldr	r3, [pc, #164]	; (8001f10 <StartMQTTConnectTask+0x56c>)
 8001e6a:	6818      	ldr	r0, [r3, #0]
 8001e6c:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001e70:	f04f 33ff 	mov.w	r3, #4294967295
 8001e74:	2200      	movs	r2, #0
 8001e76:	f006 fa7f 	bl	8008378 <osMessageQueuePut>

		  Broker_connect = 1;
 8001e7a:	4b29      	ldr	r3, [pc, #164]	; (8001f20 <StartMQTTConnectTask+0x57c>)
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	701a      	strb	r2, [r3, #0]
		  osTimerStart(PingTimerHandle, PING_TIME); //start ping timer
 8001e80:	4b28      	ldr	r3, [pc, #160]	; (8001f24 <StartMQTTConnectTask+0x580>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f24c 3150 	movw	r1, #50000	; 0xc350
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f005 ffa5 	bl	8007dd8 <osTimerStart>
		  osTimerStart(DataTimerHandle, GET_DATA_PERIOD); //start ping timer
 8001e8e:	4b26      	ldr	r3, [pc, #152]	; (8001f28 <StartMQTTConnectTask+0x584>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f247 5130 	movw	r1, #30000	; 0x7530
 8001e96:	4618      	mov	r0, r3
 8001e98:	f005 ff9e 	bl	8007dd8 <osTimerStart>
		  HAL_UART_Receive_DMA(&huart1, SIM800BuffRx, BUFF_SIM_SIZE); //start receive messages
 8001e9c:	224c      	movs	r2, #76	; 0x4c
 8001e9e:	4917      	ldr	r1, [pc, #92]	; (8001efc <StartMQTTConnectTask+0x558>)
 8001ea0:	4819      	ldr	r0, [pc, #100]	; (8001f08 <StartMQTTConnectTask+0x564>)
 8001ea2:	f004 fb91 	bl	80065c8 <HAL_UART_Receive_DMA>
		  Tech_ans_wait = 0;
 8001ea6:	4b21      	ldr	r3, [pc, #132]	; (8001f2c <StartMQTTConnectTask+0x588>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	701a      	strb	r2, [r3, #0]

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 8001eac:	2200      	movs	r2, #0
 8001eae:	2108      	movs	r1, #8
 8001eb0:	481f      	ldr	r0, [pc, #124]	; (8001f30 <StartMQTTConnectTask+0x58c>)
 8001eb2:	f002 fbfb 	bl	80046ac <HAL_GPIO_WritePin>
		  //start receiving data from broker
		  osMutexRelease(UART1MutexHandle);
 8001eb6:	4b1f      	ldr	r3, [pc, #124]	; (8001f34 <StartMQTTConnectTask+0x590>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f006 f88b 	bl	8007fd6 <osMutexRelease>
		  PINGTaskHandle = osThreadNew(PINGStartTask, NULL, &PINGTask_attributes);
 8001ec0:	4a1d      	ldr	r2, [pc, #116]	; (8001f38 <StartMQTTConnectTask+0x594>)
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	481d      	ldr	r0, [pc, #116]	; (8001f3c <StartMQTTConnectTask+0x598>)
 8001ec6:	f005 fe1b 	bl	8007b00 <osThreadNew>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	4a1c      	ldr	r2, [pc, #112]	; (8001f40 <StartMQTTConnectTask+0x59c>)
 8001ece:	6013      	str	r3, [r2, #0]
		  sprintf(&(msg.str), "On the line, Firmware V0.92\r\n\0");
 8001ed0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001ed4:	491b      	ldr	r1, [pc, #108]	; (8001f44 <StartMQTTConnectTask+0x5a0>)
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f009 fe54 	bl	800bb84 <siprintf>
		  osMessageQueuePut(SIM800SendQueueHandle, &msg, 0, osWaitForever);
 8001edc:	4b1a      	ldr	r3, [pc, #104]	; (8001f48 <StartMQTTConnectTask+0x5a4>)
 8001ede:	6818      	ldr	r0, [r3, #0]
 8001ee0:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f006 fa45 	bl	8008378 <osMessageQueuePut>
		  //HAL_UART_Receive_DMA(&huart1, SIM800BuffRx, BUFF_SIM_SIZE); //start receive messages
		  osThreadTerminate(MQTTConnectTaskHandle);
 8001eee:	4b17      	ldr	r3, [pc, #92]	; (8001f4c <StartMQTTConnectTask+0x5a8>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f005 fe96 	bl	8007c24 <osThreadTerminate>
	  if (osMutexAcquire(UART1MutexHandle, osWaitForever) == osOK)
 8001ef8:	e564      	b.n	80019c4 <StartMQTTConnectTask+0x20>
 8001efa:	bf00      	nop
 8001efc:	20000404 	.word	0x20000404
 8001f00:	20000010 	.word	0x20000010
 8001f04:	0800d14c 	.word	0x0800d14c
 8001f08:	20000164 	.word	0x20000164
 8001f0c:	0800d150 	.word	0x0800d150
 8001f10:	20000390 	.word	0x20000390
 8001f14:	20000024 	.word	0x20000024
 8001f18:	0800d160 	.word	0x0800d160
 8001f1c:	0800d170 	.word	0x0800d170
 8001f20:	200003b4 	.word	0x200003b4
 8001f24:	2000039c 	.word	0x2000039c
 8001f28:	200003a0 	.word	0x200003a0
 8001f2c:	200003b5 	.word	0x200003b5
 8001f30:	40020800 	.word	0x40020800
 8001f34:	200003a4 	.word	0x200003a4
 8001f38:	0800d6b8 	.word	0x0800d6b8
 8001f3c:	080011a1 	.word	0x080011a1
 8001f40:	2000037c 	.word	0x2000037c
 8001f44:	0800d184 	.word	0x0800d184
 8001f48:	20000394 	.word	0x20000394
 8001f4c:	20000384 	.word	0x20000384

08001f50 <StartMessHandlerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMessHandlerTask */
void StartMessHandlerTask(void *argument)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b0a6      	sub	sp, #152	; 0x98
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
	message_type msg;
	message_type msg2;
  /* Infinite loop */
  for(;;)
  {
	  if (osMessageQueueGet(RxSIM800QueueHandle, &msg, 0, osWaitForever) == osOK)
 8001f58:	4b48      	ldr	r3, [pc, #288]	; (800207c <StartMessHandlerTask+0x12c>)
 8001f5a:	6818      	ldr	r0, [r3, #0]
 8001f5c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001f60:	f04f 33ff 	mov.w	r3, #4294967295
 8001f64:	2200      	movs	r2, #0
 8001f66:	f006 fa67 	bl	8008438 <osMessageQueueGet>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d1f3      	bne.n	8001f58 <StartMessHandlerTask+0x8>
	  {

		sprintf(&(msg2.str), "RX\r\n\0");
 8001f70:	f107 0308 	add.w	r3, r7, #8
 8001f74:	4942      	ldr	r1, [pc, #264]	; (8002080 <StartMessHandlerTask+0x130>)
 8001f76:	4618      	mov	r0, r3
 8001f78:	f009 fe04 	bl	800bb84 <siprintf>
		osMessageQueuePut(SIM800SendQueueHandle, &msg2, 0, osWaitForever);
 8001f7c:	4b41      	ldr	r3, [pc, #260]	; (8002084 <StartMessHandlerTask+0x134>)
 8001f7e:	6818      	ldr	r0, [r3, #0]
 8001f80:	f107 0108 	add.w	r1, r7, #8
 8001f84:	f04f 33ff 	mov.w	r3, #4294967295
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f006 f9f5 	bl	8008378 <osMessageQueuePut>
		if (String_in_String(msg.str,MESSAGE_TYPE_BUFF_SIZE,";;on"))
 8001f8e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f92:	4a3d      	ldr	r2, [pc, #244]	; (8002088 <StartMessHandlerTask+0x138>)
 8001f94:	2146      	movs	r1, #70	; 0x46
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7fe feae 	bl	8000cf8 <String_in_String>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d005      	beq.n	8001fae <StartMessHandlerTask+0x5e>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	2102      	movs	r1, #2
 8001fa6:	4839      	ldr	r0, [pc, #228]	; (800208c <StartMessHandlerTask+0x13c>)
 8001fa8:	f002 fb80 	bl	80046ac <HAL_GPIO_WritePin>
 8001fac:	e7d4      	b.n	8001f58 <StartMessHandlerTask+0x8>
		}
		else if (String_in_String(msg.str,MESSAGE_TYPE_BUFF_SIZE,";;off"))
 8001fae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001fb2:	4a37      	ldr	r2, [pc, #220]	; (8002090 <StartMessHandlerTask+0x140>)
 8001fb4:	2146      	movs	r1, #70	; 0x46
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7fe fe9e 	bl	8000cf8 <String_in_String>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d005      	beq.n	8001fce <StartMessHandlerTask+0x7e>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1);
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	2102      	movs	r1, #2
 8001fc6:	4831      	ldr	r0, [pc, #196]	; (800208c <StartMessHandlerTask+0x13c>)
 8001fc8:	f002 fb70 	bl	80046ac <HAL_GPIO_WritePin>
 8001fcc:	e7c4      	b.n	8001f58 <StartMessHandlerTask+0x8>
		}
		else if (String_in_String(msg.str,MESSAGE_TYPE_BUFF_SIZE,";;data"))
 8001fce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001fd2:	4a30      	ldr	r2, [pc, #192]	; (8002094 <StartMessHandlerTask+0x144>)
 8001fd4:	2146      	movs	r1, #70	; 0x46
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7fe fe8e 	bl	8000cf8 <String_in_String>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d003      	beq.n	8001fea <StartMessHandlerTask+0x9a>
		{
			Get_data = 1;
 8001fe2:	4b2d      	ldr	r3, [pc, #180]	; (8002098 <StartMessHandlerTask+0x148>)
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	701a      	strb	r2, [r3, #0]
 8001fe8:	e7b6      	b.n	8001f58 <StartMessHandlerTask+0x8>
		}
		else if (String_in_String(msg.str,MESSAGE_TYPE_BUFF_SIZE,";;updt"))
 8001fea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001fee:	4a2b      	ldr	r2, [pc, #172]	; (800209c <StartMessHandlerTask+0x14c>)
 8001ff0:	2146      	movs	r1, #70	; 0x46
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7fe fe80 	bl	8000cf8 <String_in_String>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d0ac      	beq.n	8001f58 <StartMessHandlerTask+0x8>
		{
			if (osMutexAcquire(UART1MutexHandle, osWaitForever) == osOK)
 8001ffe:	4b28      	ldr	r3, [pc, #160]	; (80020a0 <StartMessHandlerTask+0x150>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f04f 31ff 	mov.w	r1, #4294967295
 8002006:	4618      	mov	r0, r3
 8002008:	f005 ff9a 	bl	8007f40 <osMutexAcquire>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1a2      	bne.n	8001f58 <StartMessHandlerTask+0x8>
		    {
				memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002012:	224c      	movs	r2, #76	; 0x4c
 8002014:	2100      	movs	r1, #0
 8002016:	4823      	ldr	r0, [pc, #140]	; (80020a4 <StartMessHandlerTask+0x154>)
 8002018:	f009 fd78 	bl	800bb0c <memset>
				sprintf(str_SIM800,"AT+CIPCLOSE\r\n\0");
 800201c:	4922      	ldr	r1, [pc, #136]	; (80020a8 <StartMessHandlerTask+0x158>)
 800201e:	4823      	ldr	r0, [pc, #140]	; (80020ac <StartMessHandlerTask+0x15c>)
 8002020:	f009 fdb0 	bl	800bb84 <siprintf>
				HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 8002024:	4821      	ldr	r0, [pc, #132]	; (80020ac <StartMessHandlerTask+0x15c>)
 8002026:	f7fe f8f3 	bl	8000210 <strlen>
 800202a:	4603      	mov	r3, r0
 800202c:	b29b      	uxth	r3, r3
 800202e:	461a      	mov	r2, r3
 8002030:	491e      	ldr	r1, [pc, #120]	; (80020ac <StartMessHandlerTask+0x15c>)
 8002032:	481f      	ldr	r0, [pc, #124]	; (80020b0 <StartMessHandlerTask+0x160>)
 8002034:	f004 fa4a 	bl	80064cc <HAL_UART_Transmit_DMA>
				osDelay(1000);
 8002038:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800203c:	f005 fe1f 	bl	8007c7e <osDelay>
				osThreadTerminate(PINGTaskHandle);
 8002040:	4b1c      	ldr	r3, [pc, #112]	; (80020b4 <StartMessHandlerTask+0x164>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4618      	mov	r0, r3
 8002046:	f005 fded 	bl	8007c24 <osThreadTerminate>
				osThreadTerminate(SIM800SendTaskHandle);
 800204a:	4b1b      	ldr	r3, [pc, #108]	; (80020b8 <StartMessHandlerTask+0x168>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f005 fde8 	bl	8007c24 <osThreadTerminate>
				osThreadTerminate(defaultTaskHandle);
 8002054:	4b19      	ldr	r3, [pc, #100]	; (80020bc <StartMessHandlerTask+0x16c>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4618      	mov	r0, r3
 800205a:	f005 fde3 	bl	8007c24 <osThreadTerminate>
				osMutexRelease(UART1MutexHandle); //release UART for SIM800
 800205e:	4b10      	ldr	r3, [pc, #64]	; (80020a0 <StartMessHandlerTask+0x150>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4618      	mov	r0, r3
 8002064:	f005 ffb7 	bl	8007fd6 <osMutexRelease>
				myTaskGetFirmHandle = osThreadNew(StartGetFirmware, NULL, &myTaskGetFirm_attributes);
 8002068:	4a15      	ldr	r2, [pc, #84]	; (80020c0 <StartMessHandlerTask+0x170>)
 800206a:	2100      	movs	r1, #0
 800206c:	4815      	ldr	r0, [pc, #84]	; (80020c4 <StartMessHandlerTask+0x174>)
 800206e:	f005 fd47 	bl	8007b00 <osThreadNew>
 8002072:	4603      	mov	r3, r0
 8002074:	4a14      	ldr	r2, [pc, #80]	; (80020c8 <StartMessHandlerTask+0x178>)
 8002076:	6013      	str	r3, [r2, #0]
	  if (osMessageQueueGet(RxSIM800QueueHandle, &msg, 0, osWaitForever) == osOK)
 8002078:	e76e      	b.n	8001f58 <StartMessHandlerTask+0x8>
 800207a:	bf00      	nop
 800207c:	20000398 	.word	0x20000398
 8002080:	0800d1d8 	.word	0x0800d1d8
 8002084:	20000394 	.word	0x20000394
 8002088:	0800d1e0 	.word	0x0800d1e0
 800208c:	40020800 	.word	0x40020800
 8002090:	0800d1e8 	.word	0x0800d1e8
 8002094:	0800d1f0 	.word	0x0800d1f0
 8002098:	200003b6 	.word	0x200003b6
 800209c:	0800d1f8 	.word	0x0800d1f8
 80020a0:	200003a4 	.word	0x200003a4
 80020a4:	20000404 	.word	0x20000404
 80020a8:	0800d200 	.word	0x0800d200
 80020ac:	200003b8 	.word	0x200003b8
 80020b0:	20000164 	.word	0x20000164
 80020b4:	2000037c 	.word	0x2000037c
 80020b8:	20000378 	.word	0x20000378
 80020bc:	2000036c 	.word	0x2000036c
 80020c0:	0800d748 	.word	0x0800d748
 80020c4:	080020cd 	.word	0x080020cd
 80020c8:	2000038c 	.word	0x2000038c

080020cc <StartGetFirmware>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGetFirmware */
void StartGetFirmware(void *argument)
{
 80020cc:	b590      	push	{r4, r7, lr}
 80020ce:	b0c5      	sub	sp, #276	; 0x114
 80020d0:	af02      	add	r7, sp, #8
 80020d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80020d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80020da:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartGetFirmware */
	message_type msg; // string for debug message
	uint8_t ans; //is one string in another
	uint8_t send_MQTT_message[BUFF_SIM_SIZE] = {}; //message to SIM800
 80020dc:	2300      	movs	r3, #0
 80020de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020e0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80020e4:	2248      	movs	r2, #72	; 0x48
 80020e6:	2100      	movs	r1, #0
 80020e8:	4618      	mov	r0, r3
 80020ea:	f009 fd0f 	bl	800bb0c <memset>
	uint32_t sector_of_firmware = 30;
 80020ee:	231e      	movs	r3, #30
 80020f0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	uint8_t tmp2[30];
	uint8_t tmp3[30];
  /* Infinite loop */
  for(;;)
  {
	  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 80020f4:	4bc0      	ldr	r3, [pc, #768]	; (80023f8 <StartGetFirmware+0x32c>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68da      	ldr	r2, [r3, #12]
 80020fa:	4bbf      	ldr	r3, [pc, #764]	; (80023f8 <StartGetFirmware+0x32c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f042 0210 	orr.w	r2, r2, #16
 8002102:	60da      	str	r2, [r3, #12]
	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002104:	224c      	movs	r2, #76	; 0x4c
 8002106:	2100      	movs	r1, #0
 8002108:	48bc      	ldr	r0, [pc, #752]	; (80023fc <StartGetFirmware+0x330>)
 800210a:	f009 fcff 	bl	800bb0c <memset>
	  sprintf(str_SIM800,"AT+FTPMODE=1\r\n\0");
 800210e:	49bc      	ldr	r1, [pc, #752]	; (8002400 <StartGetFirmware+0x334>)
 8002110:	48bc      	ldr	r0, [pc, #752]	; (8002404 <StartGetFirmware+0x338>)
 8002112:	f009 fd37 	bl	800bb84 <siprintf>
	  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 8002116:	48bb      	ldr	r0, [pc, #748]	; (8002404 <StartGetFirmware+0x338>)
 8002118:	f7fe f87a 	bl	8000210 <strlen>
 800211c:	4603      	mov	r3, r0
 800211e:	b29b      	uxth	r3, r3
 8002120:	461a      	mov	r2, r3
 8002122:	49b8      	ldr	r1, [pc, #736]	; (8002404 <StartGetFirmware+0x338>)
 8002124:	48b4      	ldr	r0, [pc, #720]	; (80023f8 <StartGetFirmware+0x32c>)
 8002126:	f004 f9d1 	bl	80064cc <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 800212a:	48b7      	ldr	r0, [pc, #732]	; (8002408 <StartGetFirmware+0x33c>)
 800212c:	f7fe fe92 	bl	8000e54 <SIM800_Ans>
 8002130:	4603      	mov	r3, r0
 8002132:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	  if (!ans)
 8002136:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 800213a:	2b00      	cmp	r3, #0
 800213c:	d11d      	bne.n	800217a <StartGetFirmware+0xae>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 800213e:	224c      	movs	r2, #76	; 0x4c
 8002140:	2100      	movs	r1, #0
 8002142:	48ae      	ldr	r0, [pc, #696]	; (80023fc <StartGetFirmware+0x330>)
 8002144:	f009 fce2 	bl	800bb0c <memset>
		  ans = SIM800_Ans("OK");
 8002148:	48af      	ldr	r0, [pc, #700]	; (8002408 <StartGetFirmware+0x33c>)
 800214a:	f7fe fe83 	bl	8000e54 <SIM800_Ans>
 800214e:	4603      	mov	r3, r0
 8002150:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
		  if (!ans)
 8002154:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8002158:	2b00      	cmp	r3, #0
 800215a:	d10e      	bne.n	800217a <StartGetFirmware+0xae>
		  {
			  strcpy(&(msg.str), "FTPMODE\r\n\0");
 800215c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002160:	4aaa      	ldr	r2, [pc, #680]	; (800240c <StartGetFirmware+0x340>)
 8002162:	ca07      	ldmia	r2, {r0, r1, r2}
 8002164:	c303      	stmia	r3!, {r0, r1}
 8002166:	801a      	strh	r2, [r3, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8002168:	4ba9      	ldr	r3, [pc, #676]	; (8002410 <StartGetFirmware+0x344>)
 800216a:	6818      	ldr	r0, [r3, #0]
 800216c:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002170:	f04f 33ff 	mov.w	r3, #4294967295
 8002174:	2200      	movs	r2, #0
 8002176:	f006 f8ff 	bl	8008378 <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 800217a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800217e:	f005 fd7e 	bl	8007c7e <osDelay>
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
		  }
	  }
	  osDelay(300);*/

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002182:	224c      	movs	r2, #76	; 0x4c
 8002184:	2100      	movs	r1, #0
 8002186:	489d      	ldr	r0, [pc, #628]	; (80023fc <StartGetFirmware+0x330>)
 8002188:	f009 fcc0 	bl	800bb0c <memset>
	  sprintf(str_SIM800,"AT+FTPTYPE=I\r\n\0");
 800218c:	49a1      	ldr	r1, [pc, #644]	; (8002414 <StartGetFirmware+0x348>)
 800218e:	489d      	ldr	r0, [pc, #628]	; (8002404 <StartGetFirmware+0x338>)
 8002190:	f009 fcf8 	bl	800bb84 <siprintf>
	  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 8002194:	489b      	ldr	r0, [pc, #620]	; (8002404 <StartGetFirmware+0x338>)
 8002196:	f7fe f83b 	bl	8000210 <strlen>
 800219a:	4603      	mov	r3, r0
 800219c:	b29b      	uxth	r3, r3
 800219e:	461a      	mov	r2, r3
 80021a0:	4998      	ldr	r1, [pc, #608]	; (8002404 <StartGetFirmware+0x338>)
 80021a2:	4895      	ldr	r0, [pc, #596]	; (80023f8 <StartGetFirmware+0x32c>)
 80021a4:	f004 f992 	bl	80064cc <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 80021a8:	4897      	ldr	r0, [pc, #604]	; (8002408 <StartGetFirmware+0x33c>)
 80021aa:	f7fe fe53 	bl	8000e54 <SIM800_Ans>
 80021ae:	4603      	mov	r3, r0
 80021b0:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	  if (!ans)
 80021b4:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d11d      	bne.n	80021f8 <StartGetFirmware+0x12c>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80021bc:	224c      	movs	r2, #76	; 0x4c
 80021be:	2100      	movs	r1, #0
 80021c0:	488e      	ldr	r0, [pc, #568]	; (80023fc <StartGetFirmware+0x330>)
 80021c2:	f009 fca3 	bl	800bb0c <memset>
		  ans = SIM800_Ans("OK");
 80021c6:	4890      	ldr	r0, [pc, #576]	; (8002408 <StartGetFirmware+0x33c>)
 80021c8:	f7fe fe44 	bl	8000e54 <SIM800_Ans>
 80021cc:	4603      	mov	r3, r0
 80021ce:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
		  if (!ans)
 80021d2:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d10e      	bne.n	80021f8 <StartGetFirmware+0x12c>
		  {
			  strcpy(&(msg.str), "FTPTYPE\r\n\0");
 80021da:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80021de:	4a8e      	ldr	r2, [pc, #568]	; (8002418 <StartGetFirmware+0x34c>)
 80021e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80021e2:	c303      	stmia	r3!, {r0, r1}
 80021e4:	801a      	strh	r2, [r3, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 80021e6:	4b8a      	ldr	r3, [pc, #552]	; (8002410 <StartGetFirmware+0x344>)
 80021e8:	6818      	ldr	r0, [r3, #0]
 80021ea:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80021ee:	f04f 33ff 	mov.w	r3, #4294967295
 80021f2:	2200      	movs	r2, #0
 80021f4:	f006 f8c0 	bl	8008378 <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 80021f8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80021fc:	f005 fd3f 	bl	8007c7e <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002200:	224c      	movs	r2, #76	; 0x4c
 8002202:	2100      	movs	r1, #0
 8002204:	487d      	ldr	r0, [pc, #500]	; (80023fc <StartGetFirmware+0x330>)
 8002206:	f009 fc81 	bl	800bb0c <memset>
	  sprintf(str_SIM800,"AT+SAPBR=3,1,CONTYPE,GPRS\r\n\0");
 800220a:	4984      	ldr	r1, [pc, #528]	; (800241c <StartGetFirmware+0x350>)
 800220c:	487d      	ldr	r0, [pc, #500]	; (8002404 <StartGetFirmware+0x338>)
 800220e:	f009 fcb9 	bl	800bb84 <siprintf>
	  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 8002212:	487c      	ldr	r0, [pc, #496]	; (8002404 <StartGetFirmware+0x338>)
 8002214:	f7fd fffc 	bl	8000210 <strlen>
 8002218:	4603      	mov	r3, r0
 800221a:	b29b      	uxth	r3, r3
 800221c:	461a      	mov	r2, r3
 800221e:	4979      	ldr	r1, [pc, #484]	; (8002404 <StartGetFirmware+0x338>)
 8002220:	4875      	ldr	r0, [pc, #468]	; (80023f8 <StartGetFirmware+0x32c>)
 8002222:	f004 f953 	bl	80064cc <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 8002226:	4878      	ldr	r0, [pc, #480]	; (8002408 <StartGetFirmware+0x33c>)
 8002228:	f7fe fe14 	bl	8000e54 <SIM800_Ans>
 800222c:	4603      	mov	r3, r0
 800222e:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	  if (!ans)
 8002232:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8002236:	2b00      	cmp	r3, #0
 8002238:	d11e      	bne.n	8002278 <StartGetFirmware+0x1ac>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 800223a:	224c      	movs	r2, #76	; 0x4c
 800223c:	2100      	movs	r1, #0
 800223e:	486f      	ldr	r0, [pc, #444]	; (80023fc <StartGetFirmware+0x330>)
 8002240:	f009 fc64 	bl	800bb0c <memset>
		  ans = SIM800_Ans("OK");
 8002244:	4870      	ldr	r0, [pc, #448]	; (8002408 <StartGetFirmware+0x33c>)
 8002246:	f7fe fe05 	bl	8000e54 <SIM800_Ans>
 800224a:	4603      	mov	r3, r0
 800224c:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
		  if (!ans)
 8002250:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8002254:	2b00      	cmp	r3, #0
 8002256:	d10f      	bne.n	8002278 <StartGetFirmware+0x1ac>
		  {
			  strcpy(&(msg.str), "SAPBR\r\n\0");
 8002258:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800225c:	4a70      	ldr	r2, [pc, #448]	; (8002420 <StartGetFirmware+0x354>)
 800225e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002262:	e883 0003 	stmia.w	r3, {r0, r1}
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8002266:	4b6a      	ldr	r3, [pc, #424]	; (8002410 <StartGetFirmware+0x344>)
 8002268:	6818      	ldr	r0, [r3, #0]
 800226a:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800226e:	f04f 33ff 	mov.w	r3, #4294967295
 8002272:	2200      	movs	r2, #0
 8002274:	f006 f880 	bl	8008378 <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 8002278:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800227c:	f005 fcff 	bl	8007c7e <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002280:	224c      	movs	r2, #76	; 0x4c
 8002282:	2100      	movs	r1, #0
 8002284:	485d      	ldr	r0, [pc, #372]	; (80023fc <StartGetFirmware+0x330>)
 8002286:	f009 fc41 	bl	800bb0c <memset>
	  sprintf(str_SIM800,"AT+SAPBR=3,1,APN,internet.beeline.ru\r\n\0");
 800228a:	4966      	ldr	r1, [pc, #408]	; (8002424 <StartGetFirmware+0x358>)
 800228c:	485d      	ldr	r0, [pc, #372]	; (8002404 <StartGetFirmware+0x338>)
 800228e:	f009 fc79 	bl	800bb84 <siprintf>
	  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 8002292:	485c      	ldr	r0, [pc, #368]	; (8002404 <StartGetFirmware+0x338>)
 8002294:	f7fd ffbc 	bl	8000210 <strlen>
 8002298:	4603      	mov	r3, r0
 800229a:	b29b      	uxth	r3, r3
 800229c:	461a      	mov	r2, r3
 800229e:	4959      	ldr	r1, [pc, #356]	; (8002404 <StartGetFirmware+0x338>)
 80022a0:	4855      	ldr	r0, [pc, #340]	; (80023f8 <StartGetFirmware+0x32c>)
 80022a2:	f004 f913 	bl	80064cc <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 80022a6:	4858      	ldr	r0, [pc, #352]	; (8002408 <StartGetFirmware+0x33c>)
 80022a8:	f7fe fdd4 	bl	8000e54 <SIM800_Ans>
 80022ac:	4603      	mov	r3, r0
 80022ae:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	  if (!ans)
 80022b2:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d11e      	bne.n	80022f8 <StartGetFirmware+0x22c>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80022ba:	224c      	movs	r2, #76	; 0x4c
 80022bc:	2100      	movs	r1, #0
 80022be:	484f      	ldr	r0, [pc, #316]	; (80023fc <StartGetFirmware+0x330>)
 80022c0:	f009 fc24 	bl	800bb0c <memset>
		  ans = SIM800_Ans("OK");
 80022c4:	4850      	ldr	r0, [pc, #320]	; (8002408 <StartGetFirmware+0x33c>)
 80022c6:	f7fe fdc5 	bl	8000e54 <SIM800_Ans>
 80022ca:	4603      	mov	r3, r0
 80022cc:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
		  if (!ans)
 80022d0:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d10f      	bne.n	80022f8 <StartGetFirmware+0x22c>
		  {
			  strcpy(&(msg.str), "SAPBR\r\n\0");
 80022d8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80022dc:	4a50      	ldr	r2, [pc, #320]	; (8002420 <StartGetFirmware+0x354>)
 80022de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80022e2:	e883 0003 	stmia.w	r3, {r0, r1}
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 80022e6:	4b4a      	ldr	r3, [pc, #296]	; (8002410 <StartGetFirmware+0x344>)
 80022e8:	6818      	ldr	r0, [r3, #0]
 80022ea:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80022ee:	f04f 33ff 	mov.w	r3, #4294967295
 80022f2:	2200      	movs	r2, #0
 80022f4:	f006 f840 	bl	8008378 <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 80022f8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80022fc:	f005 fcbf 	bl	8007c7e <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002300:	224c      	movs	r2, #76	; 0x4c
 8002302:	2100      	movs	r1, #0
 8002304:	483d      	ldr	r0, [pc, #244]	; (80023fc <StartGetFirmware+0x330>)
 8002306:	f009 fc01 	bl	800bb0c <memset>
	  sprintf(str_SIM800,"AT+SAPBR=1,1\r\n\0");
 800230a:	4947      	ldr	r1, [pc, #284]	; (8002428 <StartGetFirmware+0x35c>)
 800230c:	483d      	ldr	r0, [pc, #244]	; (8002404 <StartGetFirmware+0x338>)
 800230e:	f009 fc39 	bl	800bb84 <siprintf>
	  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 8002312:	483c      	ldr	r0, [pc, #240]	; (8002404 <StartGetFirmware+0x338>)
 8002314:	f7fd ff7c 	bl	8000210 <strlen>
 8002318:	4603      	mov	r3, r0
 800231a:	b29b      	uxth	r3, r3
 800231c:	461a      	mov	r2, r3
 800231e:	4939      	ldr	r1, [pc, #228]	; (8002404 <StartGetFirmware+0x338>)
 8002320:	4835      	ldr	r0, [pc, #212]	; (80023f8 <StartGetFirmware+0x32c>)
 8002322:	f004 f8d3 	bl	80064cc <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 8002326:	4838      	ldr	r0, [pc, #224]	; (8002408 <StartGetFirmware+0x33c>)
 8002328:	f7fe fd94 	bl	8000e54 <SIM800_Ans>
 800232c:	4603      	mov	r3, r0
 800232e:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	  if (!ans)
 8002332:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8002336:	2b00      	cmp	r3, #0
 8002338:	d11e      	bne.n	8002378 <StartGetFirmware+0x2ac>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 800233a:	224c      	movs	r2, #76	; 0x4c
 800233c:	2100      	movs	r1, #0
 800233e:	482f      	ldr	r0, [pc, #188]	; (80023fc <StartGetFirmware+0x330>)
 8002340:	f009 fbe4 	bl	800bb0c <memset>
		  ans = SIM800_Ans("OK");
 8002344:	4830      	ldr	r0, [pc, #192]	; (8002408 <StartGetFirmware+0x33c>)
 8002346:	f7fe fd85 	bl	8000e54 <SIM800_Ans>
 800234a:	4603      	mov	r3, r0
 800234c:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
		  if (!ans)
 8002350:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8002354:	2b00      	cmp	r3, #0
 8002356:	d10f      	bne.n	8002378 <StartGetFirmware+0x2ac>
		  {
			  strcpy(&(msg.str), "SAPBR\r\n\0");
 8002358:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800235c:	4a30      	ldr	r2, [pc, #192]	; (8002420 <StartGetFirmware+0x354>)
 800235e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002362:	e883 0003 	stmia.w	r3, {r0, r1}
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8002366:	4b2a      	ldr	r3, [pc, #168]	; (8002410 <StartGetFirmware+0x344>)
 8002368:	6818      	ldr	r0, [r3, #0]
 800236a:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800236e:	f04f 33ff 	mov.w	r3, #4294967295
 8002372:	2200      	movs	r2, #0
 8002374:	f006 f800 	bl	8008378 <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 8002378:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800237c:	f005 fc7f 	bl	8007c7e <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002380:	224c      	movs	r2, #76	; 0x4c
 8002382:	2100      	movs	r1, #0
 8002384:	481d      	ldr	r0, [pc, #116]	; (80023fc <StartGetFirmware+0x330>)
 8002386:	f009 fbc1 	bl	800bb0c <memset>
	  sprintf(str_SIM800,"AT+FTPCID=1\r\n\0");
 800238a:	4928      	ldr	r1, [pc, #160]	; (800242c <StartGetFirmware+0x360>)
 800238c:	481d      	ldr	r0, [pc, #116]	; (8002404 <StartGetFirmware+0x338>)
 800238e:	f009 fbf9 	bl	800bb84 <siprintf>
	  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 8002392:	481c      	ldr	r0, [pc, #112]	; (8002404 <StartGetFirmware+0x338>)
 8002394:	f7fd ff3c 	bl	8000210 <strlen>
 8002398:	4603      	mov	r3, r0
 800239a:	b29b      	uxth	r3, r3
 800239c:	461a      	mov	r2, r3
 800239e:	4919      	ldr	r1, [pc, #100]	; (8002404 <StartGetFirmware+0x338>)
 80023a0:	4815      	ldr	r0, [pc, #84]	; (80023f8 <StartGetFirmware+0x32c>)
 80023a2:	f004 f893 	bl	80064cc <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 80023a6:	4818      	ldr	r0, [pc, #96]	; (8002408 <StartGetFirmware+0x33c>)
 80023a8:	f7fe fd54 	bl	8000e54 <SIM800_Ans>
 80023ac:	4603      	mov	r3, r0
 80023ae:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	  if (!ans)
 80023b2:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d13c      	bne.n	8002434 <StartGetFirmware+0x368>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80023ba:	224c      	movs	r2, #76	; 0x4c
 80023bc:	2100      	movs	r1, #0
 80023be:	480f      	ldr	r0, [pc, #60]	; (80023fc <StartGetFirmware+0x330>)
 80023c0:	f009 fba4 	bl	800bb0c <memset>
		  ans = SIM800_Ans("OK");
 80023c4:	4810      	ldr	r0, [pc, #64]	; (8002408 <StartGetFirmware+0x33c>)
 80023c6:	f7fe fd45 	bl	8000e54 <SIM800_Ans>
 80023ca:	4603      	mov	r3, r0
 80023cc:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
		  if (!ans)
 80023d0:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d12d      	bne.n	8002434 <StartGetFirmware+0x368>
		  {
			  strcpy(&(msg.str), "FTPCID\r\n\0");
 80023d8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80023dc:	4a14      	ldr	r2, [pc, #80]	; (8002430 <StartGetFirmware+0x364>)
 80023de:	ca07      	ldmia	r2, {r0, r1, r2}
 80023e0:	c303      	stmia	r3!, {r0, r1}
 80023e2:	701a      	strb	r2, [r3, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 80023e4:	4b0a      	ldr	r3, [pc, #40]	; (8002410 <StartGetFirmware+0x344>)
 80023e6:	6818      	ldr	r0, [r3, #0]
 80023e8:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80023ec:	f04f 33ff 	mov.w	r3, #4294967295
 80023f0:	2200      	movs	r2, #0
 80023f2:	f005 ffc1 	bl	8008378 <osMessageQueuePut>
 80023f6:	e01d      	b.n	8002434 <StartGetFirmware+0x368>
 80023f8:	20000164 	.word	0x20000164
 80023fc:	20000404 	.word	0x20000404
 8002400:	0800d210 	.word	0x0800d210
 8002404:	200003b8 	.word	0x200003b8
 8002408:	0800cf78 	.word	0x0800cf78
 800240c:	0800d220 	.word	0x0800d220
 8002410:	20000390 	.word	0x20000390
 8002414:	0800d22c 	.word	0x0800d22c
 8002418:	0800d23c 	.word	0x0800d23c
 800241c:	0800d248 	.word	0x0800d248
 8002420:	0800d268 	.word	0x0800d268
 8002424:	0800d274 	.word	0x0800d274
 8002428:	0800d29c 	.word	0x0800d29c
 800242c:	0800d2ac 	.word	0x0800d2ac
 8002430:	0800d2bc 	.word	0x0800d2bc
		  }
	  }
	  osDelay(300);
 8002434:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002438:	f005 fc21 	bl	8007c7e <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 800243c:	224c      	movs	r2, #76	; 0x4c
 800243e:	2100      	movs	r1, #0
 8002440:	48c4      	ldr	r0, [pc, #784]	; (8002754 <StartGetFirmware+0x688>)
 8002442:	f009 fb63 	bl	800bb0c <memset>
	  sprintf(str_SIM800,"AT+FTPSERV=%s\r\n\0", DEF_IP_FTP);
 8002446:	4ac4      	ldr	r2, [pc, #784]	; (8002758 <StartGetFirmware+0x68c>)
 8002448:	49c4      	ldr	r1, [pc, #784]	; (800275c <StartGetFirmware+0x690>)
 800244a:	48c5      	ldr	r0, [pc, #788]	; (8002760 <StartGetFirmware+0x694>)
 800244c:	f009 fb9a 	bl	800bb84 <siprintf>
	  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 8002450:	48c3      	ldr	r0, [pc, #780]	; (8002760 <StartGetFirmware+0x694>)
 8002452:	f7fd fedd 	bl	8000210 <strlen>
 8002456:	4603      	mov	r3, r0
 8002458:	b29b      	uxth	r3, r3
 800245a:	461a      	mov	r2, r3
 800245c:	49c0      	ldr	r1, [pc, #768]	; (8002760 <StartGetFirmware+0x694>)
 800245e:	48c1      	ldr	r0, [pc, #772]	; (8002764 <StartGetFirmware+0x698>)
 8002460:	f004 f834 	bl	80064cc <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 8002464:	48c0      	ldr	r0, [pc, #768]	; (8002768 <StartGetFirmware+0x69c>)
 8002466:	f7fe fcf5 	bl	8000e54 <SIM800_Ans>
 800246a:	4603      	mov	r3, r0
 800246c:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	  if (!ans)
 8002470:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8002474:	2b00      	cmp	r3, #0
 8002476:	d11d      	bne.n	80024b4 <StartGetFirmware+0x3e8>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002478:	224c      	movs	r2, #76	; 0x4c
 800247a:	2100      	movs	r1, #0
 800247c:	48b5      	ldr	r0, [pc, #724]	; (8002754 <StartGetFirmware+0x688>)
 800247e:	f009 fb45 	bl	800bb0c <memset>
		  ans = SIM800_Ans("OK");
 8002482:	48b9      	ldr	r0, [pc, #740]	; (8002768 <StartGetFirmware+0x69c>)
 8002484:	f7fe fce6 	bl	8000e54 <SIM800_Ans>
 8002488:	4603      	mov	r3, r0
 800248a:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
		  if (!ans)
 800248e:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10e      	bne.n	80024b4 <StartGetFirmware+0x3e8>
		  {
			  strcpy(&(msg.str), "FTPSERV\r\n\0");
 8002496:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800249a:	4ab4      	ldr	r2, [pc, #720]	; (800276c <StartGetFirmware+0x6a0>)
 800249c:	ca07      	ldmia	r2, {r0, r1, r2}
 800249e:	c303      	stmia	r3!, {r0, r1}
 80024a0:	801a      	strh	r2, [r3, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 80024a2:	4bb3      	ldr	r3, [pc, #716]	; (8002770 <StartGetFirmware+0x6a4>)
 80024a4:	6818      	ldr	r0, [r3, #0]
 80024a6:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80024aa:	f04f 33ff 	mov.w	r3, #4294967295
 80024ae:	2200      	movs	r2, #0
 80024b0:	f005 ff62 	bl	8008378 <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 80024b4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80024b8:	f005 fbe1 	bl	8007c7e <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80024bc:	224c      	movs	r2, #76	; 0x4c
 80024be:	2100      	movs	r1, #0
 80024c0:	48a4      	ldr	r0, [pc, #656]	; (8002754 <StartGetFirmware+0x688>)
 80024c2:	f009 fb23 	bl	800bb0c <memset>
	  sprintf(str_SIM800,"AT+FTPUN=%s\r\n\0", DEF_USER_FTP);
 80024c6:	4aab      	ldr	r2, [pc, #684]	; (8002774 <StartGetFirmware+0x6a8>)
 80024c8:	49ab      	ldr	r1, [pc, #684]	; (8002778 <StartGetFirmware+0x6ac>)
 80024ca:	48a5      	ldr	r0, [pc, #660]	; (8002760 <StartGetFirmware+0x694>)
 80024cc:	f009 fb5a 	bl	800bb84 <siprintf>
	  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 80024d0:	48a3      	ldr	r0, [pc, #652]	; (8002760 <StartGetFirmware+0x694>)
 80024d2:	f7fd fe9d 	bl	8000210 <strlen>
 80024d6:	4603      	mov	r3, r0
 80024d8:	b29b      	uxth	r3, r3
 80024da:	461a      	mov	r2, r3
 80024dc:	49a0      	ldr	r1, [pc, #640]	; (8002760 <StartGetFirmware+0x694>)
 80024de:	48a1      	ldr	r0, [pc, #644]	; (8002764 <StartGetFirmware+0x698>)
 80024e0:	f003 fff4 	bl	80064cc <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 80024e4:	48a0      	ldr	r0, [pc, #640]	; (8002768 <StartGetFirmware+0x69c>)
 80024e6:	f7fe fcb5 	bl	8000e54 <SIM800_Ans>
 80024ea:	4603      	mov	r3, r0
 80024ec:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	  if (!ans)
 80024f0:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d11e      	bne.n	8002536 <StartGetFirmware+0x46a>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80024f8:	224c      	movs	r2, #76	; 0x4c
 80024fa:	2100      	movs	r1, #0
 80024fc:	4895      	ldr	r0, [pc, #596]	; (8002754 <StartGetFirmware+0x688>)
 80024fe:	f009 fb05 	bl	800bb0c <memset>
		  ans = SIM800_Ans("OK");
 8002502:	4899      	ldr	r0, [pc, #612]	; (8002768 <StartGetFirmware+0x69c>)
 8002504:	f7fe fca6 	bl	8000e54 <SIM800_Ans>
 8002508:	4603      	mov	r3, r0
 800250a:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
		  if (!ans)
 800250e:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10f      	bne.n	8002536 <StartGetFirmware+0x46a>
		  {
			  strcpy(&(msg.str), "FTPUN\r\n\0");
 8002516:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800251a:	4a98      	ldr	r2, [pc, #608]	; (800277c <StartGetFirmware+0x6b0>)
 800251c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002520:	e883 0003 	stmia.w	r3, {r0, r1}
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8002524:	4b92      	ldr	r3, [pc, #584]	; (8002770 <StartGetFirmware+0x6a4>)
 8002526:	6818      	ldr	r0, [r3, #0]
 8002528:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800252c:	f04f 33ff 	mov.w	r3, #4294967295
 8002530:	2200      	movs	r2, #0
 8002532:	f005 ff21 	bl	8008378 <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 8002536:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800253a:	f005 fba0 	bl	8007c7e <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 800253e:	224c      	movs	r2, #76	; 0x4c
 8002540:	2100      	movs	r1, #0
 8002542:	4884      	ldr	r0, [pc, #528]	; (8002754 <StartGetFirmware+0x688>)
 8002544:	f009 fae2 	bl	800bb0c <memset>
	  sprintf(str_SIM800,"AT+FTPPW=%s\r\n\0", DEF_PASSWORD_FTP);
 8002548:	4a8d      	ldr	r2, [pc, #564]	; (8002780 <StartGetFirmware+0x6b4>)
 800254a:	498e      	ldr	r1, [pc, #568]	; (8002784 <StartGetFirmware+0x6b8>)
 800254c:	4884      	ldr	r0, [pc, #528]	; (8002760 <StartGetFirmware+0x694>)
 800254e:	f009 fb19 	bl	800bb84 <siprintf>
	  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 8002552:	4883      	ldr	r0, [pc, #524]	; (8002760 <StartGetFirmware+0x694>)
 8002554:	f7fd fe5c 	bl	8000210 <strlen>
 8002558:	4603      	mov	r3, r0
 800255a:	b29b      	uxth	r3, r3
 800255c:	461a      	mov	r2, r3
 800255e:	4980      	ldr	r1, [pc, #512]	; (8002760 <StartGetFirmware+0x694>)
 8002560:	4880      	ldr	r0, [pc, #512]	; (8002764 <StartGetFirmware+0x698>)
 8002562:	f003 ffb3 	bl	80064cc <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 8002566:	4880      	ldr	r0, [pc, #512]	; (8002768 <StartGetFirmware+0x69c>)
 8002568:	f7fe fc74 	bl	8000e54 <SIM800_Ans>
 800256c:	4603      	mov	r3, r0
 800256e:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	  if (!ans)
 8002572:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8002576:	2b00      	cmp	r3, #0
 8002578:	d11e      	bne.n	80025b8 <StartGetFirmware+0x4ec>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 800257a:	224c      	movs	r2, #76	; 0x4c
 800257c:	2100      	movs	r1, #0
 800257e:	4875      	ldr	r0, [pc, #468]	; (8002754 <StartGetFirmware+0x688>)
 8002580:	f009 fac4 	bl	800bb0c <memset>
		  ans = SIM800_Ans("OK");
 8002584:	4878      	ldr	r0, [pc, #480]	; (8002768 <StartGetFirmware+0x69c>)
 8002586:	f7fe fc65 	bl	8000e54 <SIM800_Ans>
 800258a:	4603      	mov	r3, r0
 800258c:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
		  if (!ans)
 8002590:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8002594:	2b00      	cmp	r3, #0
 8002596:	d10f      	bne.n	80025b8 <StartGetFirmware+0x4ec>
		  {
			  strcpy(&(msg.str), "FTPPW\r\n\0");
 8002598:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800259c:	4a7a      	ldr	r2, [pc, #488]	; (8002788 <StartGetFirmware+0x6bc>)
 800259e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80025a2:	e883 0003 	stmia.w	r3, {r0, r1}
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 80025a6:	4b72      	ldr	r3, [pc, #456]	; (8002770 <StartGetFirmware+0x6a4>)
 80025a8:	6818      	ldr	r0, [r3, #0]
 80025aa:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80025ae:	f04f 33ff 	mov.w	r3, #4294967295
 80025b2:	2200      	movs	r2, #0
 80025b4:	f005 fee0 	bl	8008378 <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 80025b8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80025bc:	f005 fb5f 	bl	8007c7e <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80025c0:	224c      	movs	r2, #76	; 0x4c
 80025c2:	2100      	movs	r1, #0
 80025c4:	4863      	ldr	r0, [pc, #396]	; (8002754 <StartGetFirmware+0x688>)
 80025c6:	f009 faa1 	bl	800bb0c <memset>
	  sprintf(str_SIM800,"AT+FTPGETPATH=/firmware/\r\n\0");
 80025ca:	4970      	ldr	r1, [pc, #448]	; (800278c <StartGetFirmware+0x6c0>)
 80025cc:	4864      	ldr	r0, [pc, #400]	; (8002760 <StartGetFirmware+0x694>)
 80025ce:	f009 fad9 	bl	800bb84 <siprintf>
	  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 80025d2:	4863      	ldr	r0, [pc, #396]	; (8002760 <StartGetFirmware+0x694>)
 80025d4:	f7fd fe1c 	bl	8000210 <strlen>
 80025d8:	4603      	mov	r3, r0
 80025da:	b29b      	uxth	r3, r3
 80025dc:	461a      	mov	r2, r3
 80025de:	4960      	ldr	r1, [pc, #384]	; (8002760 <StartGetFirmware+0x694>)
 80025e0:	4860      	ldr	r0, [pc, #384]	; (8002764 <StartGetFirmware+0x698>)
 80025e2:	f003 ff73 	bl	80064cc <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 80025e6:	4860      	ldr	r0, [pc, #384]	; (8002768 <StartGetFirmware+0x69c>)
 80025e8:	f7fe fc34 	bl	8000e54 <SIM800_Ans>
 80025ec:	4603      	mov	r3, r0
 80025ee:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	  if (!ans)
 80025f2:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d11f      	bne.n	800263a <StartGetFirmware+0x56e>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80025fa:	224c      	movs	r2, #76	; 0x4c
 80025fc:	2100      	movs	r1, #0
 80025fe:	4855      	ldr	r0, [pc, #340]	; (8002754 <StartGetFirmware+0x688>)
 8002600:	f009 fa84 	bl	800bb0c <memset>
		  ans = SIM800_Ans("OK");
 8002604:	4858      	ldr	r0, [pc, #352]	; (8002768 <StartGetFirmware+0x69c>)
 8002606:	f7fe fc25 	bl	8000e54 <SIM800_Ans>
 800260a:	4603      	mov	r3, r0
 800260c:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
		  if (!ans)
 8002610:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8002614:	2b00      	cmp	r3, #0
 8002616:	d110      	bne.n	800263a <StartGetFirmware+0x56e>
		  {
			  strcpy(&(msg.str), "FTPGETPATH\r\n\0");
 8002618:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800261c:	4a5c      	ldr	r2, [pc, #368]	; (8002790 <StartGetFirmware+0x6c4>)
 800261e:	461c      	mov	r4, r3
 8002620:	4613      	mov	r3, r2
 8002622:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002624:	c407      	stmia	r4!, {r0, r1, r2}
 8002626:	7023      	strb	r3, [r4, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8002628:	4b51      	ldr	r3, [pc, #324]	; (8002770 <StartGetFirmware+0x6a4>)
 800262a:	6818      	ldr	r0, [r3, #0]
 800262c:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002630:	f04f 33ff 	mov.w	r3, #4294967295
 8002634:	2200      	movs	r2, #0
 8002636:	f005 fe9f 	bl	8008378 <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 800263a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800263e:	f005 fb1e 	bl	8007c7e <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002642:	224c      	movs	r2, #76	; 0x4c
 8002644:	2100      	movs	r1, #0
 8002646:	4843      	ldr	r0, [pc, #268]	; (8002754 <StartGetFirmware+0x688>)
 8002648:	f009 fa60 	bl	800bb0c <memset>
	  sprintf(str_SIM800,"AT+FTPGETNAME=Firmware.txt\r\n\0");
 800264c:	4951      	ldr	r1, [pc, #324]	; (8002794 <StartGetFirmware+0x6c8>)
 800264e:	4844      	ldr	r0, [pc, #272]	; (8002760 <StartGetFirmware+0x694>)
 8002650:	f009 fa98 	bl	800bb84 <siprintf>
	  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 8002654:	4842      	ldr	r0, [pc, #264]	; (8002760 <StartGetFirmware+0x694>)
 8002656:	f7fd fddb 	bl	8000210 <strlen>
 800265a:	4603      	mov	r3, r0
 800265c:	b29b      	uxth	r3, r3
 800265e:	461a      	mov	r2, r3
 8002660:	493f      	ldr	r1, [pc, #252]	; (8002760 <StartGetFirmware+0x694>)
 8002662:	4840      	ldr	r0, [pc, #256]	; (8002764 <StartGetFirmware+0x698>)
 8002664:	f003 ff32 	bl	80064cc <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 8002668:	483f      	ldr	r0, [pc, #252]	; (8002768 <StartGetFirmware+0x69c>)
 800266a:	f7fe fbf3 	bl	8000e54 <SIM800_Ans>
 800266e:	4603      	mov	r3, r0
 8002670:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	  if (!ans)
 8002674:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8002678:	2b00      	cmp	r3, #0
 800267a:	d11f      	bne.n	80026bc <StartGetFirmware+0x5f0>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 800267c:	224c      	movs	r2, #76	; 0x4c
 800267e:	2100      	movs	r1, #0
 8002680:	4834      	ldr	r0, [pc, #208]	; (8002754 <StartGetFirmware+0x688>)
 8002682:	f009 fa43 	bl	800bb0c <memset>
		  ans = SIM800_Ans("OK");
 8002686:	4838      	ldr	r0, [pc, #224]	; (8002768 <StartGetFirmware+0x69c>)
 8002688:	f7fe fbe4 	bl	8000e54 <SIM800_Ans>
 800268c:	4603      	mov	r3, r0
 800268e:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
		  if (!ans)
 8002692:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8002696:	2b00      	cmp	r3, #0
 8002698:	d110      	bne.n	80026bc <StartGetFirmware+0x5f0>
		  {
			  strcpy(&(msg.str), "FTPGETNAME\r\n\0");
 800269a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800269e:	4a3e      	ldr	r2, [pc, #248]	; (8002798 <StartGetFirmware+0x6cc>)
 80026a0:	461c      	mov	r4, r3
 80026a2:	4613      	mov	r3, r2
 80026a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026a6:	c407      	stmia	r4!, {r0, r1, r2}
 80026a8:	7023      	strb	r3, [r4, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 80026aa:	4b31      	ldr	r3, [pc, #196]	; (8002770 <StartGetFirmware+0x6a4>)
 80026ac:	6818      	ldr	r0, [r3, #0]
 80026ae:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80026b2:	f04f 33ff 	mov.w	r3, #4294967295
 80026b6:	2200      	movs	r2, #0
 80026b8:	f005 fe5e 	bl	8008378 <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 80026bc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80026c0:	f005 fadd 	bl	8007c7e <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80026c4:	224c      	movs	r2, #76	; 0x4c
 80026c6:	2100      	movs	r1, #0
 80026c8:	4822      	ldr	r0, [pc, #136]	; (8002754 <StartGetFirmware+0x688>)
 80026ca:	f009 fa1f 	bl	800bb0c <memset>
	  sprintf(str_SIM800,"AT+FTPGETTOFS=0,Firmware.txt\r\n\0");
 80026ce:	4933      	ldr	r1, [pc, #204]	; (800279c <StartGetFirmware+0x6d0>)
 80026d0:	4823      	ldr	r0, [pc, #140]	; (8002760 <StartGetFirmware+0x694>)
 80026d2:	f009 fa57 	bl	800bb84 <siprintf>
	  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 80026d6:	4822      	ldr	r0, [pc, #136]	; (8002760 <StartGetFirmware+0x694>)
 80026d8:	f7fd fd9a 	bl	8000210 <strlen>
 80026dc:	4603      	mov	r3, r0
 80026de:	b29b      	uxth	r3, r3
 80026e0:	461a      	mov	r2, r3
 80026e2:	491f      	ldr	r1, [pc, #124]	; (8002760 <StartGetFirmware+0x694>)
 80026e4:	481f      	ldr	r0, [pc, #124]	; (8002764 <StartGetFirmware+0x698>)
 80026e6:	f003 fef1 	bl	80064cc <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 80026ea:	481f      	ldr	r0, [pc, #124]	; (8002768 <StartGetFirmware+0x69c>)
 80026ec:	f7fe fbb2 	bl	8000e54 <SIM800_Ans>
 80026f0:	4603      	mov	r3, r0
 80026f2:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	  if (!ans)
 80026f6:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d11f      	bne.n	800273e <StartGetFirmware+0x672>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80026fe:	224c      	movs	r2, #76	; 0x4c
 8002700:	2100      	movs	r1, #0
 8002702:	4814      	ldr	r0, [pc, #80]	; (8002754 <StartGetFirmware+0x688>)
 8002704:	f009 fa02 	bl	800bb0c <memset>
		  ans = SIM800_Ans("OK");
 8002708:	4817      	ldr	r0, [pc, #92]	; (8002768 <StartGetFirmware+0x69c>)
 800270a:	f7fe fba3 	bl	8000e54 <SIM800_Ans>
 800270e:	4603      	mov	r3, r0
 8002710:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
		  if (!ans)
 8002714:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8002718:	2b00      	cmp	r3, #0
 800271a:	d110      	bne.n	800273e <StartGetFirmware+0x672>
		  {
			  strcpy(&(msg.str), "FTPGETTOFS\r\n\0");
 800271c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002720:	4a1f      	ldr	r2, [pc, #124]	; (80027a0 <StartGetFirmware+0x6d4>)
 8002722:	461c      	mov	r4, r3
 8002724:	4613      	mov	r3, r2
 8002726:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002728:	c407      	stmia	r4!, {r0, r1, r2}
 800272a:	7023      	strb	r3, [r4, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 800272c:	4b10      	ldr	r3, [pc, #64]	; (8002770 <StartGetFirmware+0x6a4>)
 800272e:	6818      	ldr	r0, [r3, #0]
 8002730:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002734:	f04f 33ff 	mov.w	r3, #4294967295
 8002738:	2200      	movs	r2, #0
 800273a:	f005 fe1d 	bl	8008378 <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 800273e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002742:	f005 fa9c 	bl	8007c7e <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002746:	224c      	movs	r2, #76	; 0x4c
 8002748:	2100      	movs	r1, #0
 800274a:	4802      	ldr	r0, [pc, #8]	; (8002754 <StartGetFirmware+0x688>)
 800274c:	f009 f9de 	bl	800bb0c <memset>
 8002750:	e028      	b.n	80027a4 <StartGetFirmware+0x6d8>
 8002752:	bf00      	nop
 8002754:	20000404 	.word	0x20000404
 8002758:	0800d2c8 	.word	0x0800d2c8
 800275c:	0800d2d8 	.word	0x0800d2d8
 8002760:	200003b8 	.word	0x200003b8
 8002764:	20000164 	.word	0x20000164
 8002768:	0800cf78 	.word	0x0800cf78
 800276c:	0800d2ec 	.word	0x0800d2ec
 8002770:	20000390 	.word	0x20000390
 8002774:	0800d2f8 	.word	0x0800d2f8
 8002778:	0800d304 	.word	0x0800d304
 800277c:	0800d314 	.word	0x0800d314
 8002780:	0800d320 	.word	0x0800d320
 8002784:	0800d32c 	.word	0x0800d32c
 8002788:	0800d33c 	.word	0x0800d33c
 800278c:	0800d348 	.word	0x0800d348
 8002790:	0800d364 	.word	0x0800d364
 8002794:	0800d374 	.word	0x0800d374
 8002798:	0800d394 	.word	0x0800d394
 800279c:	0800d3a4 	.word	0x0800d3a4
 80027a0:	0800d3c4 	.word	0x0800d3c4
	  RX = 0;
 80027a4:	4b88      	ldr	r3, [pc, #544]	; (80029c8 <StartGetFirmware+0x8fc>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	701a      	strb	r2, [r3, #0]
	  Tech_ans_wait = 1;
 80027aa:	4b88      	ldr	r3, [pc, #544]	; (80029cc <StartGetFirmware+0x900>)
 80027ac:	2201      	movs	r2, #1
 80027ae:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Receive_DMA(&huart1, SIM800BuffRx, BUFF_SIM_SIZE);
 80027b0:	224c      	movs	r2, #76	; 0x4c
 80027b2:	4987      	ldr	r1, [pc, #540]	; (80029d0 <StartGetFirmware+0x904>)
 80027b4:	4887      	ldr	r0, [pc, #540]	; (80029d4 <StartGetFirmware+0x908>)
 80027b6:	f003 ff07 	bl	80065c8 <HAL_UART_Receive_DMA>
	  while (RX != 1) {};
 80027ba:	bf00      	nop
 80027bc:	4b82      	ldr	r3, [pc, #520]	; (80029c8 <StartGetFirmware+0x8fc>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d1fb      	bne.n	80027bc <StartGetFirmware+0x6f0>
	  Tech_ans_wait = 0;
 80027c4:	4b81      	ldr	r3, [pc, #516]	; (80029cc <StartGetFirmware+0x900>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	701a      	strb	r2, [r3, #0]



	  //good download
	  if (String_in_SIM800BuffRx("+FTPGETTOFS: "))
 80027ca:	4883      	ldr	r0, [pc, #524]	; (80029d8 <StartGetFirmware+0x90c>)
 80027cc:	f7fe fa50 	bl	8000c70 <String_in_SIM800BuffRx>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f43f ac8e 	beq.w	80020f4 <StartGetFirmware+0x28>
	  {
		  sscanf(SIM800BuffRx, "%s%2s%d", tmp2, tmp3, &firmware_count_bytes);
 80027d8:	f107 0108 	add.w	r1, r7, #8
 80027dc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80027e0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80027e4:	9300      	str	r3, [sp, #0]
 80027e6:	460b      	mov	r3, r1
 80027e8:	497c      	ldr	r1, [pc, #496]	; (80029dc <StartGetFirmware+0x910>)
 80027ea:	4879      	ldr	r0, [pc, #484]	; (80029d0 <StartGetFirmware+0x904>)
 80027ec:	f009 f9ea 	bl	800bbc4 <siscanf>

		  SPI2_Init_Master();
 80027f0:	f7fe f9c2 	bl	8000b78 <SPI2_Init_Master>
		  HAL_Delay(200);
 80027f4:	20c8      	movs	r0, #200	; 0xc8
 80027f6:	f001 f889 	bl	800390c <HAL_Delay>

		  W25qxx_Init();
 80027fa:	f000 fcdf 	bl	80031bc <W25qxx_Init>

		  uint32_t count_of_pages = (firmware_count_bytes / 256) + ((firmware_count_bytes % 256) ? 1 : 0);
 80027fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002800:	0a1b      	lsrs	r3, r3, #8
 8002802:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002804:	b2d2      	uxtb	r2, r2
 8002806:	2a00      	cmp	r2, #0
 8002808:	d001      	beq.n	800280e <StartGetFirmware+0x742>
 800280a:	2201      	movs	r2, #1
 800280c:	e000      	b.n	8002810 <StartGetFirmware+0x744>
 800280e:	2200      	movs	r2, #0
 8002810:	4413      	add	r3, r2
 8002812:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		  uint32_t count_of_sectors = (firmware_count_bytes / 4096) + ((firmware_count_bytes % 4096) ? 1 : 0);
 8002816:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002818:	0b1b      	lsrs	r3, r3, #12
 800281a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800281c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002820:	2a00      	cmp	r2, #0
 8002822:	d001      	beq.n	8002828 <StartGetFirmware+0x75c>
 8002824:	2201      	movs	r2, #1
 8002826:	e000      	b.n	800282a <StartGetFirmware+0x75e>
 8002828:	2200      	movs	r2, #0
 800282a:	4413      	add	r3, r2
 800282c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
		  count_of_sectors++;
 8002830:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002834:	3301      	adds	r3, #1
 8002836:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

		  //start write from 30 sector
		  for (uint32_t i = 0; i <= count_of_sectors; i++)
 800283a:	2300      	movs	r3, #0
 800283c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002840:	e010      	b.n	8002864 <StartGetFirmware+0x798>
		  {
			  // sectors for clear
			  uint32_t tmp = i + sector_of_firmware - 1;
 8002842:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8002846:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800284a:	4413      	add	r3, r2
 800284c:	3b01      	subs	r3, #1
 800284e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
			  W25qxx_EraseSector(tmp);
 8002852:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8002856:	f000 ff15 	bl	8003684 <W25qxx_EraseSector>
		  for (uint32_t i = 0; i <= count_of_sectors; i++)
 800285a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800285e:	3301      	adds	r3, #1
 8002860:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002864:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8002868:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800286c:	429a      	cmp	r2, r3
 800286e:	d9e8      	bls.n	8002842 <StartGetFirmware+0x776>
		  }

		  //writes size of firmware
		  tmp4 = (firmware_count_bytes & 0xFF0000) >> 16;
 8002870:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002872:	0c1b      	lsrs	r3, r3, #16
 8002874:	b2db      	uxtb	r3, r3
 8002876:	4a5a      	ldr	r2, [pc, #360]	; (80029e0 <StartGetFirmware+0x914>)
 8002878:	6013      	str	r3, [r2, #0]
		  tmp5 = (firmware_count_bytes & 0xFF00) >> 8;
 800287a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800287c:	0a1b      	lsrs	r3, r3, #8
 800287e:	b2db      	uxtb	r3, r3
 8002880:	4a58      	ldr	r2, [pc, #352]	; (80029e4 <StartGetFirmware+0x918>)
 8002882:	6013      	str	r3, [r2, #0]
		  tmp6 = (firmware_count_bytes & 0xFF);
 8002884:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002886:	b2db      	uxtb	r3, r3
 8002888:	4a57      	ldr	r2, [pc, #348]	; (80029e8 <StartGetFirmware+0x91c>)
 800288a:	6013      	str	r3, [r2, #0]
		  Size_of_firmwware[0] = tmp4;
 800288c:	4b54      	ldr	r3, [pc, #336]	; (80029e0 <StartGetFirmware+0x914>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	b2da      	uxtb	r2, r3
 8002892:	4b56      	ldr	r3, [pc, #344]	; (80029ec <StartGetFirmware+0x920>)
 8002894:	701a      	strb	r2, [r3, #0]
		  Size_of_firmwware[1] = tmp5;
 8002896:	4b53      	ldr	r3, [pc, #332]	; (80029e4 <StartGetFirmware+0x918>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	b2da      	uxtb	r2, r3
 800289c:	4b53      	ldr	r3, [pc, #332]	; (80029ec <StartGetFirmware+0x920>)
 800289e:	705a      	strb	r2, [r3, #1]
		  Size_of_firmwware[2] = tmp6;
 80028a0:	4b51      	ldr	r3, [pc, #324]	; (80029e8 <StartGetFirmware+0x91c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	b2da      	uxtb	r2, r3
 80028a6:	4b51      	ldr	r3, [pc, #324]	; (80029ec <StartGetFirmware+0x920>)
 80028a8:	709a      	strb	r2, [r3, #2]

		  int32_t page_start1 = 16 * (sector_of_firmware - 1);
 80028aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028ae:	3b01      	subs	r3, #1
 80028b0:	011b      	lsls	r3, r3, #4
 80028b2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

		  W25qxx_WritePage(Size_of_firmwware, page_start1, 0, 3);
 80028b6:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 80028ba:	2303      	movs	r3, #3
 80028bc:	2200      	movs	r2, #0
 80028be:	484b      	ldr	r0, [pc, #300]	; (80029ec <StartGetFirmware+0x920>)
 80028c0:	f000 ff36 	bl	8003730 <W25qxx_WritePage>

		  for (uint32_t i = 0; i < count_of_pages; i++)
 80028c4:	2300      	movs	r3, #0
 80028c6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80028ca:	e054      	b.n	8002976 <StartGetFirmware+0x8aa>
		  {
			  int32_t start = i * 256;
 80028cc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80028d0:	021b      	lsls	r3, r3, #8
 80028d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
			  //start += (i > 0) ? 1 : 0;

			  memset(firmware_buf, 0, 399);
 80028d6:	f240 128f 	movw	r2, #399	; 0x18f
 80028da:	2100      	movs	r1, #0
 80028dc:	4844      	ldr	r0, [pc, #272]	; (80029f0 <StartGetFirmware+0x924>)
 80028de:	f009 f915 	bl	800bb0c <memset>
			  sprintf(str_SIM800,"AT+FSREAD=C:\\User\\FTP\\Firmware.txt,1,256,%d\r\n\0", start);
 80028e2:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80028e6:	4943      	ldr	r1, [pc, #268]	; (80029f4 <StartGetFirmware+0x928>)
 80028e8:	4843      	ldr	r0, [pc, #268]	; (80029f8 <StartGetFirmware+0x92c>)
 80028ea:	f009 f94b 	bl	800bb84 <siprintf>
			  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 80028ee:	4842      	ldr	r0, [pc, #264]	; (80029f8 <StartGetFirmware+0x92c>)
 80028f0:	f7fd fc8e 	bl	8000210 <strlen>
 80028f4:	4603      	mov	r3, r0
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	461a      	mov	r2, r3
 80028fa:	493f      	ldr	r1, [pc, #252]	; (80029f8 <StartGetFirmware+0x92c>)
 80028fc:	4835      	ldr	r0, [pc, #212]	; (80029d4 <StartGetFirmware+0x908>)
 80028fe:	f003 fde5 	bl	80064cc <HAL_UART_Transmit_DMA>
			  RX = 0;
 8002902:	4b31      	ldr	r3, [pc, #196]	; (80029c8 <StartGetFirmware+0x8fc>)
 8002904:	2200      	movs	r2, #0
 8002906:	701a      	strb	r2, [r3, #0]
			  Tech_ans_wait = 1;
 8002908:	4b30      	ldr	r3, [pc, #192]	; (80029cc <StartGetFirmware+0x900>)
 800290a:	2201      	movs	r2, #1
 800290c:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Receive_DMA(&huart1, firmware_buf, 390);
 800290e:	f44f 72c3 	mov.w	r2, #390	; 0x186
 8002912:	4937      	ldr	r1, [pc, #220]	; (80029f0 <StartGetFirmware+0x924>)
 8002914:	482f      	ldr	r0, [pc, #188]	; (80029d4 <StartGetFirmware+0x908>)
 8002916:	f003 fe57 	bl	80065c8 <HAL_UART_Receive_DMA>
			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 800291a:	2140      	movs	r1, #64	; 0x40
 800291c:	4837      	ldr	r0, [pc, #220]	; (80029fc <StartGetFirmware+0x930>)
 800291e:	f001 fede 	bl	80046de <HAL_GPIO_TogglePin>
			  while (RX != 1) {};
 8002922:	bf00      	nop
 8002924:	4b28      	ldr	r3, [pc, #160]	; (80029c8 <StartGetFirmware+0x8fc>)
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d1fb      	bne.n	8002924 <StartGetFirmware+0x858>
			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 800292c:	2140      	movs	r1, #64	; 0x40
 800292e:	4833      	ldr	r0, [pc, #204]	; (80029fc <StartGetFirmware+0x930>)
 8002930:	f001 fed5 	bl	80046de <HAL_GPIO_TogglePin>
			  Tech_ans_wait = 0;
 8002934:	4b25      	ldr	r3, [pc, #148]	; (80029cc <StartGetFirmware+0x900>)
 8002936:	2200      	movs	r2, #0
 8002938:	701a      	strb	r2, [r3, #0]

			  int32_t page_start =  i + 16 * sector_of_firmware; // number of start page
 800293a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800293e:	011a      	lsls	r2, r3, #4
 8002940:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002944:	4413      	add	r3, r2
 8002946:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
			  W25qxx_WritePage(firmware_buf + strlen(str_SIM800) + 1, page_start, 0, 256);
 800294a:	482b      	ldr	r0, [pc, #172]	; (80029f8 <StartGetFirmware+0x92c>)
 800294c:	f7fd fc60 	bl	8000210 <strlen>
 8002950:	4603      	mov	r3, r0
 8002952:	3301      	adds	r3, #1
 8002954:	4a26      	ldr	r2, [pc, #152]	; (80029f0 <StartGetFirmware+0x924>)
 8002956:	1898      	adds	r0, r3, r2
 8002958:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800295c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002960:	2200      	movs	r2, #0
 8002962:	f000 fee5 	bl	8003730 <W25qxx_WritePage>
			  osDelay(10); //importent!!!
 8002966:	200a      	movs	r0, #10
 8002968:	f005 f989 	bl	8007c7e <osDelay>
		  for (uint32_t i = 0; i < count_of_pages; i++)
 800296c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002970:	3301      	adds	r3, #1
 8002972:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002976:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800297a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800297e:	429a      	cmp	r2, r3
 8002980:	d3a4      	bcc.n	80028cc <StartGetFirmware+0x800>
		  }
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8002982:	2140      	movs	r1, #64	; 0x40
 8002984:	481d      	ldr	r0, [pc, #116]	; (80029fc <StartGetFirmware+0x930>)
 8002986:	f001 feaa 	bl	80046de <HAL_GPIO_TogglePin>
		  osDelay(2000);
 800298a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800298e:	f005 f976 	bl	8007c7e <osDelay>
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8002992:	2140      	movs	r1, #64	; 0x40
 8002994:	4819      	ldr	r0, [pc, #100]	; (80029fc <StartGetFirmware+0x930>)
 8002996:	f001 fea2 	bl	80046de <HAL_GPIO_TogglePin>

		  HAL_Delay(200);
 800299a:	20c8      	movs	r0, #200	; 0xc8
 800299c:	f000 ffb6 	bl	800390c <HAL_Delay>
		  //";start"
		  strcpy(&(msg.str), ";start");
 80029a0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80029a4:	4a16      	ldr	r2, [pc, #88]	; (8002a00 <StartGetFirmware+0x934>)
 80029a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80029aa:	6018      	str	r0, [r3, #0]
 80029ac:	3304      	adds	r3, #4
 80029ae:	8019      	strh	r1, [r3, #0]
 80029b0:	3302      	adds	r3, #2
 80029b2:	0c0a      	lsrs	r2, r1, #16
 80029b4:	701a      	strb	r2, [r3, #0]
		  //HAL_UART_Transmit_DMA(&huart2, msg.str, MESSAGE_TYPE_BUFF_SIZE);
		  HAL_Delay(1000);
 80029b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80029ba:	f000 ffa7 	bl	800390c <HAL_Delay>
		  HAL_NVIC_SystemReset();
 80029be:	f001 f8c2 	bl	8003b46 <HAL_NVIC_SystemReset>
  {
 80029c2:	f7ff bb97 	b.w	80020f4 <StartGetFirmware+0x28>
 80029c6:	bf00      	nop
 80029c8:	200003b3 	.word	0x200003b3
 80029cc:	200003b5 	.word	0x200003b5
 80029d0:	20000404 	.word	0x20000404
 80029d4:	20000164 	.word	0x20000164
 80029d8:	0800d3d4 	.word	0x0800d3d4
 80029dc:	0800d3e4 	.word	0x0800d3e4
 80029e0:	20000628 	.word	0x20000628
 80029e4:	2000062c 	.word	0x2000062c
 80029e8:	20000630 	.word	0x20000630
 80029ec:	20000634 	.word	0x20000634
 80029f0:	20000450 	.word	0x20000450
 80029f4:	0800d3ec 	.word	0x0800d3ec
 80029f8:	200003b8 	.word	0x200003b8
 80029fc:	40020000 	.word	0x40020000
 8002a00:	0800d41c 	.word	0x0800d41c

08002a04 <CallbackPingTimer>:
  /* USER CODE END StartGetFirmware */
}

/* CallbackPingTimer function */
void CallbackPingTimer(void *argument)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackPingTimer */
	osSemaphoreRelease(PINGSemHandle);
 8002a0c:	4b04      	ldr	r3, [pc, #16]	; (8002a20 <CallbackPingTimer+0x1c>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f005 fbf9 	bl	8008208 <osSemaphoreRelease>
  /* USER CODE END CallbackPingTimer */
}
 8002a16:	bf00      	nop
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	200003a8 	.word	0x200003a8

08002a24 <CallbackDataTimer>:

/* CallbackDataTimer function */
void CallbackDataTimer(void *argument)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackDataTimer */
	Get_data = 1;
 8002a2c:	4b04      	ldr	r3, [pc, #16]	; (8002a40 <CallbackDataTimer+0x1c>)
 8002a2e:	2201      	movs	r2, #1
 8002a30:	701a      	strb	r2, [r3, #0]
  /* USER CODE END CallbackDataTimer */
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	200003b6 	.word	0x200003b6

08002a44 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a04      	ldr	r2, [pc, #16]	; (8002a64 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d101      	bne.n	8002a5a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002a56:	f000 ff39 	bl	80038cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002a5a:	bf00      	nop
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	40010000 	.word	0x40010000

08002a68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a6c:	b672      	cpsid	i
}
 8002a6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a70:	e7fe      	b.n	8002a70 <Error_Handler+0x8>
	...

08002a74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	607b      	str	r3, [r7, #4]
 8002a7e:	4b12      	ldr	r3, [pc, #72]	; (8002ac8 <HAL_MspInit+0x54>)
 8002a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a82:	4a11      	ldr	r2, [pc, #68]	; (8002ac8 <HAL_MspInit+0x54>)
 8002a84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a88:	6453      	str	r3, [r2, #68]	; 0x44
 8002a8a:	4b0f      	ldr	r3, [pc, #60]	; (8002ac8 <HAL_MspInit+0x54>)
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a92:	607b      	str	r3, [r7, #4]
 8002a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a96:	2300      	movs	r3, #0
 8002a98:	603b      	str	r3, [r7, #0]
 8002a9a:	4b0b      	ldr	r3, [pc, #44]	; (8002ac8 <HAL_MspInit+0x54>)
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	4a0a      	ldr	r2, [pc, #40]	; (8002ac8 <HAL_MspInit+0x54>)
 8002aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8002aa6:	4b08      	ldr	r3, [pc, #32]	; (8002ac8 <HAL_MspInit+0x54>)
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aae:	603b      	str	r3, [r7, #0]
 8002ab0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	210f      	movs	r1, #15
 8002ab6:	f06f 0001 	mvn.w	r0, #1
 8002aba:	f001 f81a 	bl	8003af2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002abe:	bf00      	nop
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	40023800 	.word	0x40023800

08002acc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b08a      	sub	sp, #40	; 0x28
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ad4:	f107 0314 	add.w	r3, r7, #20
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	605a      	str	r2, [r3, #4]
 8002ade:	609a      	str	r2, [r3, #8]
 8002ae0:	60da      	str	r2, [r3, #12]
 8002ae2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a19      	ldr	r2, [pc, #100]	; (8002b50 <HAL_I2C_MspInit+0x84>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d12b      	bne.n	8002b46 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aee:	2300      	movs	r3, #0
 8002af0:	613b      	str	r3, [r7, #16]
 8002af2:	4b18      	ldr	r3, [pc, #96]	; (8002b54 <HAL_I2C_MspInit+0x88>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af6:	4a17      	ldr	r2, [pc, #92]	; (8002b54 <HAL_I2C_MspInit+0x88>)
 8002af8:	f043 0302 	orr.w	r3, r3, #2
 8002afc:	6313      	str	r3, [r2, #48]	; 0x30
 8002afe:	4b15      	ldr	r3, [pc, #84]	; (8002b54 <HAL_I2C_MspInit+0x88>)
 8002b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	613b      	str	r3, [r7, #16]
 8002b08:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b0a:	23c0      	movs	r3, #192	; 0xc0
 8002b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b0e:	2312      	movs	r3, #18
 8002b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b12:	2301      	movs	r3, #1
 8002b14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b16:	2303      	movs	r3, #3
 8002b18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b1a:	2304      	movs	r3, #4
 8002b1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b1e:	f107 0314 	add.w	r3, r7, #20
 8002b22:	4619      	mov	r1, r3
 8002b24:	480c      	ldr	r0, [pc, #48]	; (8002b58 <HAL_I2C_MspInit+0x8c>)
 8002b26:	f001 fc15 	bl	8004354 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	60fb      	str	r3, [r7, #12]
 8002b2e:	4b09      	ldr	r3, [pc, #36]	; (8002b54 <HAL_I2C_MspInit+0x88>)
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	4a08      	ldr	r2, [pc, #32]	; (8002b54 <HAL_I2C_MspInit+0x88>)
 8002b34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b38:	6413      	str	r3, [r2, #64]	; 0x40
 8002b3a:	4b06      	ldr	r3, [pc, #24]	; (8002b54 <HAL_I2C_MspInit+0x88>)
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b42:	60fb      	str	r3, [r7, #12]
 8002b44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002b46:	bf00      	nop
 8002b48:	3728      	adds	r7, #40	; 0x28
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40005400 	.word	0x40005400
 8002b54:	40023800 	.word	0x40023800
 8002b58:	40020400 	.word	0x40020400

08002b5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b08a      	sub	sp, #40	; 0x28
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b64:	f107 0314 	add.w	r3, r7, #20
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]
 8002b6c:	605a      	str	r2, [r3, #4]
 8002b6e:	609a      	str	r2, [r3, #8]
 8002b70:	60da      	str	r2, [r3, #12]
 8002b72:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a19      	ldr	r2, [pc, #100]	; (8002be0 <HAL_SPI_MspInit+0x84>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d12c      	bne.n	8002bd8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002b7e:	2300      	movs	r3, #0
 8002b80:	613b      	str	r3, [r7, #16]
 8002b82:	4b18      	ldr	r3, [pc, #96]	; (8002be4 <HAL_SPI_MspInit+0x88>)
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	4a17      	ldr	r2, [pc, #92]	; (8002be4 <HAL_SPI_MspInit+0x88>)
 8002b88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b8e:	4b15      	ldr	r3, [pc, #84]	; (8002be4 <HAL_SPI_MspInit+0x88>)
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b96:	613b      	str	r3, [r7, #16]
 8002b98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	60fb      	str	r3, [r7, #12]
 8002b9e:	4b11      	ldr	r3, [pc, #68]	; (8002be4 <HAL_SPI_MspInit+0x88>)
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba2:	4a10      	ldr	r2, [pc, #64]	; (8002be4 <HAL_SPI_MspInit+0x88>)
 8002ba4:	f043 0302 	orr.w	r3, r3, #2
 8002ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8002baa:	4b0e      	ldr	r3, [pc, #56]	; (8002be4 <HAL_SPI_MspInit+0x88>)
 8002bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	60fb      	str	r3, [r7, #12]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8002bb6:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8002bba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002bc8:	2305      	movs	r3, #5
 8002bca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bcc:	f107 0314 	add.w	r3, r7, #20
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	4805      	ldr	r0, [pc, #20]	; (8002be8 <HAL_SPI_MspInit+0x8c>)
 8002bd4:	f001 fbbe 	bl	8004354 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002bd8:	bf00      	nop
 8002bda:	3728      	adds	r7, #40	; 0x28
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	40003800 	.word	0x40003800
 8002be4:	40023800 	.word	0x40023800
 8002be8:	40020400 	.word	0x40020400

08002bec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b08c      	sub	sp, #48	; 0x30
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf4:	f107 031c 	add.w	r3, r7, #28
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	605a      	str	r2, [r3, #4]
 8002bfe:	609a      	str	r2, [r3, #8]
 8002c00:	60da      	str	r2, [r3, #12]
 8002c02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a97      	ldr	r2, [pc, #604]	; (8002e68 <HAL_UART_MspInit+0x27c>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	f040 8092 	bne.w	8002d34 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c10:	2300      	movs	r3, #0
 8002c12:	61bb      	str	r3, [r7, #24]
 8002c14:	4b95      	ldr	r3, [pc, #596]	; (8002e6c <HAL_UART_MspInit+0x280>)
 8002c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c18:	4a94      	ldr	r2, [pc, #592]	; (8002e6c <HAL_UART_MspInit+0x280>)
 8002c1a:	f043 0310 	orr.w	r3, r3, #16
 8002c1e:	6453      	str	r3, [r2, #68]	; 0x44
 8002c20:	4b92      	ldr	r3, [pc, #584]	; (8002e6c <HAL_UART_MspInit+0x280>)
 8002c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c24:	f003 0310 	and.w	r3, r3, #16
 8002c28:	61bb      	str	r3, [r7, #24]
 8002c2a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	617b      	str	r3, [r7, #20]
 8002c30:	4b8e      	ldr	r3, [pc, #568]	; (8002e6c <HAL_UART_MspInit+0x280>)
 8002c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c34:	4a8d      	ldr	r2, [pc, #564]	; (8002e6c <HAL_UART_MspInit+0x280>)
 8002c36:	f043 0301 	orr.w	r3, r3, #1
 8002c3a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c3c:	4b8b      	ldr	r3, [pc, #556]	; (8002e6c <HAL_UART_MspInit+0x280>)
 8002c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	617b      	str	r3, [r7, #20]
 8002c46:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002c48:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002c4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c4e:	2302      	movs	r3, #2
 8002c50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c52:	2300      	movs	r3, #0
 8002c54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c56:	2303      	movs	r3, #3
 8002c58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c5a:	2307      	movs	r3, #7
 8002c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c5e:	f107 031c 	add.w	r3, r7, #28
 8002c62:	4619      	mov	r1, r3
 8002c64:	4882      	ldr	r0, [pc, #520]	; (8002e70 <HAL_UART_MspInit+0x284>)
 8002c66:	f001 fb75 	bl	8004354 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002c6a:	4b82      	ldr	r3, [pc, #520]	; (8002e74 <HAL_UART_MspInit+0x288>)
 8002c6c:	4a82      	ldr	r2, [pc, #520]	; (8002e78 <HAL_UART_MspInit+0x28c>)
 8002c6e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002c70:	4b80      	ldr	r3, [pc, #512]	; (8002e74 <HAL_UART_MspInit+0x288>)
 8002c72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c76:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c78:	4b7e      	ldr	r3, [pc, #504]	; (8002e74 <HAL_UART_MspInit+0x288>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c7e:	4b7d      	ldr	r3, [pc, #500]	; (8002e74 <HAL_UART_MspInit+0x288>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c84:	4b7b      	ldr	r3, [pc, #492]	; (8002e74 <HAL_UART_MspInit+0x288>)
 8002c86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c8a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c8c:	4b79      	ldr	r3, [pc, #484]	; (8002e74 <HAL_UART_MspInit+0x288>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c92:	4b78      	ldr	r3, [pc, #480]	; (8002e74 <HAL_UART_MspInit+0x288>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002c98:	4b76      	ldr	r3, [pc, #472]	; (8002e74 <HAL_UART_MspInit+0x288>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002c9e:	4b75      	ldr	r3, [pc, #468]	; (8002e74 <HAL_UART_MspInit+0x288>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ca4:	4b73      	ldr	r3, [pc, #460]	; (8002e74 <HAL_UART_MspInit+0x288>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002caa:	4872      	ldr	r0, [pc, #456]	; (8002e74 <HAL_UART_MspInit+0x288>)
 8002cac:	f000 ff50 	bl	8003b50 <HAL_DMA_Init>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002cb6:	f7ff fed7 	bl	8002a68 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a6d      	ldr	r2, [pc, #436]	; (8002e74 <HAL_UART_MspInit+0x288>)
 8002cbe:	639a      	str	r2, [r3, #56]	; 0x38
 8002cc0:	4a6c      	ldr	r2, [pc, #432]	; (8002e74 <HAL_UART_MspInit+0x288>)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002cc6:	4b6d      	ldr	r3, [pc, #436]	; (8002e7c <HAL_UART_MspInit+0x290>)
 8002cc8:	4a6d      	ldr	r2, [pc, #436]	; (8002e80 <HAL_UART_MspInit+0x294>)
 8002cca:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002ccc:	4b6b      	ldr	r3, [pc, #428]	; (8002e7c <HAL_UART_MspInit+0x290>)
 8002cce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002cd2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002cd4:	4b69      	ldr	r3, [pc, #420]	; (8002e7c <HAL_UART_MspInit+0x290>)
 8002cd6:	2240      	movs	r2, #64	; 0x40
 8002cd8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cda:	4b68      	ldr	r3, [pc, #416]	; (8002e7c <HAL_UART_MspInit+0x290>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ce0:	4b66      	ldr	r3, [pc, #408]	; (8002e7c <HAL_UART_MspInit+0x290>)
 8002ce2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ce6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ce8:	4b64      	ldr	r3, [pc, #400]	; (8002e7c <HAL_UART_MspInit+0x290>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cee:	4b63      	ldr	r3, [pc, #396]	; (8002e7c <HAL_UART_MspInit+0x290>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002cf4:	4b61      	ldr	r3, [pc, #388]	; (8002e7c <HAL_UART_MspInit+0x290>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002cfa:	4b60      	ldr	r3, [pc, #384]	; (8002e7c <HAL_UART_MspInit+0x290>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d00:	4b5e      	ldr	r3, [pc, #376]	; (8002e7c <HAL_UART_MspInit+0x290>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002d06:	485d      	ldr	r0, [pc, #372]	; (8002e7c <HAL_UART_MspInit+0x290>)
 8002d08:	f000 ff22 	bl	8003b50 <HAL_DMA_Init>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8002d12:	f7ff fea9 	bl	8002a68 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a58      	ldr	r2, [pc, #352]	; (8002e7c <HAL_UART_MspInit+0x290>)
 8002d1a:	635a      	str	r2, [r3, #52]	; 0x34
 8002d1c:	4a57      	ldr	r2, [pc, #348]	; (8002e7c <HAL_UART_MspInit+0x290>)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002d22:	2200      	movs	r2, #0
 8002d24:	2105      	movs	r1, #5
 8002d26:	2025      	movs	r0, #37	; 0x25
 8002d28:	f000 fee3 	bl	8003af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d2c:	2025      	movs	r0, #37	; 0x25
 8002d2e:	f000 fefc 	bl	8003b2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002d32:	e095      	b.n	8002e60 <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART2)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a52      	ldr	r2, [pc, #328]	; (8002e84 <HAL_UART_MspInit+0x298>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	f040 8090 	bne.w	8002e60 <HAL_UART_MspInit+0x274>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d40:	2300      	movs	r3, #0
 8002d42:	613b      	str	r3, [r7, #16]
 8002d44:	4b49      	ldr	r3, [pc, #292]	; (8002e6c <HAL_UART_MspInit+0x280>)
 8002d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d48:	4a48      	ldr	r2, [pc, #288]	; (8002e6c <HAL_UART_MspInit+0x280>)
 8002d4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d4e:	6413      	str	r3, [r2, #64]	; 0x40
 8002d50:	4b46      	ldr	r3, [pc, #280]	; (8002e6c <HAL_UART_MspInit+0x280>)
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d58:	613b      	str	r3, [r7, #16]
 8002d5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	4b42      	ldr	r3, [pc, #264]	; (8002e6c <HAL_UART_MspInit+0x280>)
 8002d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d64:	4a41      	ldr	r2, [pc, #260]	; (8002e6c <HAL_UART_MspInit+0x280>)
 8002d66:	f043 0301 	orr.w	r3, r3, #1
 8002d6a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d6c:	4b3f      	ldr	r3, [pc, #252]	; (8002e6c <HAL_UART_MspInit+0x280>)
 8002d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d70:	f003 0301 	and.w	r3, r3, #1
 8002d74:	60fb      	str	r3, [r7, #12]
 8002d76:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002d78:	230c      	movs	r3, #12
 8002d7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d80:	2300      	movs	r3, #0
 8002d82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d84:	2303      	movs	r3, #3
 8002d86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d88:	2307      	movs	r3, #7
 8002d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d8c:	f107 031c 	add.w	r3, r7, #28
 8002d90:	4619      	mov	r1, r3
 8002d92:	4837      	ldr	r0, [pc, #220]	; (8002e70 <HAL_UART_MspInit+0x284>)
 8002d94:	f001 fade 	bl	8004354 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002d98:	4b3b      	ldr	r3, [pc, #236]	; (8002e88 <HAL_UART_MspInit+0x29c>)
 8002d9a:	4a3c      	ldr	r2, [pc, #240]	; (8002e8c <HAL_UART_MspInit+0x2a0>)
 8002d9c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002d9e:	4b3a      	ldr	r3, [pc, #232]	; (8002e88 <HAL_UART_MspInit+0x29c>)
 8002da0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002da4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002da6:	4b38      	ldr	r3, [pc, #224]	; (8002e88 <HAL_UART_MspInit+0x29c>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dac:	4b36      	ldr	r3, [pc, #216]	; (8002e88 <HAL_UART_MspInit+0x29c>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002db2:	4b35      	ldr	r3, [pc, #212]	; (8002e88 <HAL_UART_MspInit+0x29c>)
 8002db4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002db8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002dba:	4b33      	ldr	r3, [pc, #204]	; (8002e88 <HAL_UART_MspInit+0x29c>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002dc0:	4b31      	ldr	r3, [pc, #196]	; (8002e88 <HAL_UART_MspInit+0x29c>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002dc6:	4b30      	ldr	r3, [pc, #192]	; (8002e88 <HAL_UART_MspInit+0x29c>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002dcc:	4b2e      	ldr	r3, [pc, #184]	; (8002e88 <HAL_UART_MspInit+0x29c>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002dd2:	4b2d      	ldr	r3, [pc, #180]	; (8002e88 <HAL_UART_MspInit+0x29c>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002dd8:	482b      	ldr	r0, [pc, #172]	; (8002e88 <HAL_UART_MspInit+0x29c>)
 8002dda:	f000 feb9 	bl	8003b50 <HAL_DMA_Init>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 8002de4:	f7ff fe40 	bl	8002a68 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a27      	ldr	r2, [pc, #156]	; (8002e88 <HAL_UART_MspInit+0x29c>)
 8002dec:	639a      	str	r2, [r3, #56]	; 0x38
 8002dee:	4a26      	ldr	r2, [pc, #152]	; (8002e88 <HAL_UART_MspInit+0x29c>)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002df4:	4b26      	ldr	r3, [pc, #152]	; (8002e90 <HAL_UART_MspInit+0x2a4>)
 8002df6:	4a27      	ldr	r2, [pc, #156]	; (8002e94 <HAL_UART_MspInit+0x2a8>)
 8002df8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002dfa:	4b25      	ldr	r3, [pc, #148]	; (8002e90 <HAL_UART_MspInit+0x2a4>)
 8002dfc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e00:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e02:	4b23      	ldr	r3, [pc, #140]	; (8002e90 <HAL_UART_MspInit+0x2a4>)
 8002e04:	2240      	movs	r2, #64	; 0x40
 8002e06:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e08:	4b21      	ldr	r3, [pc, #132]	; (8002e90 <HAL_UART_MspInit+0x2a4>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e0e:	4b20      	ldr	r3, [pc, #128]	; (8002e90 <HAL_UART_MspInit+0x2a4>)
 8002e10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e14:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e16:	4b1e      	ldr	r3, [pc, #120]	; (8002e90 <HAL_UART_MspInit+0x2a4>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e1c:	4b1c      	ldr	r3, [pc, #112]	; (8002e90 <HAL_UART_MspInit+0x2a4>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002e22:	4b1b      	ldr	r3, [pc, #108]	; (8002e90 <HAL_UART_MspInit+0x2a4>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002e28:	4b19      	ldr	r3, [pc, #100]	; (8002e90 <HAL_UART_MspInit+0x2a4>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e2e:	4b18      	ldr	r3, [pc, #96]	; (8002e90 <HAL_UART_MspInit+0x2a4>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002e34:	4816      	ldr	r0, [pc, #88]	; (8002e90 <HAL_UART_MspInit+0x2a4>)
 8002e36:	f000 fe8b 	bl	8003b50 <HAL_DMA_Init>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <HAL_UART_MspInit+0x258>
      Error_Handler();
 8002e40:	f7ff fe12 	bl	8002a68 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a12      	ldr	r2, [pc, #72]	; (8002e90 <HAL_UART_MspInit+0x2a4>)
 8002e48:	635a      	str	r2, [r3, #52]	; 0x34
 8002e4a:	4a11      	ldr	r2, [pc, #68]	; (8002e90 <HAL_UART_MspInit+0x2a4>)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002e50:	2200      	movs	r2, #0
 8002e52:	2105      	movs	r1, #5
 8002e54:	2026      	movs	r0, #38	; 0x26
 8002e56:	f000 fe4c 	bl	8003af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002e5a:	2026      	movs	r0, #38	; 0x26
 8002e5c:	f000 fe65 	bl	8003b2a <HAL_NVIC_EnableIRQ>
}
 8002e60:	bf00      	nop
 8002e62:	3730      	adds	r7, #48	; 0x30
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40011000 	.word	0x40011000
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	40020000 	.word	0x40020000
 8002e74:	200001ec 	.word	0x200001ec
 8002e78:	40026440 	.word	0x40026440
 8002e7c:	2000024c 	.word	0x2000024c
 8002e80:	400264b8 	.word	0x400264b8
 8002e84:	40004400 	.word	0x40004400
 8002e88:	200002ac 	.word	0x200002ac
 8002e8c:	40026088 	.word	0x40026088
 8002e90:	2000030c 	.word	0x2000030c
 8002e94:	400260a0 	.word	0x400260a0

08002e98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b08c      	sub	sp, #48	; 0x30
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	2019      	movs	r0, #25
 8002eae:	f000 fe20 	bl	8003af2 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002eb2:	2019      	movs	r0, #25
 8002eb4:	f000 fe39 	bl	8003b2a <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002eb8:	2300      	movs	r3, #0
 8002eba:	60fb      	str	r3, [r7, #12]
 8002ebc:	4b1f      	ldr	r3, [pc, #124]	; (8002f3c <HAL_InitTick+0xa4>)
 8002ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec0:	4a1e      	ldr	r2, [pc, #120]	; (8002f3c <HAL_InitTick+0xa4>)
 8002ec2:	f043 0301 	orr.w	r3, r3, #1
 8002ec6:	6453      	str	r3, [r2, #68]	; 0x44
 8002ec8:	4b1c      	ldr	r3, [pc, #112]	; (8002f3c <HAL_InitTick+0xa4>)
 8002eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ecc:	f003 0301 	and.w	r3, r3, #1
 8002ed0:	60fb      	str	r3, [r7, #12]
 8002ed2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ed4:	f107 0210 	add.w	r2, r7, #16
 8002ed8:	f107 0314 	add.w	r3, r7, #20
 8002edc:	4611      	mov	r1, r2
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f001 fe76 	bl	8004bd0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002ee4:	f001 fe60 	bl	8004ba8 <HAL_RCC_GetPCLK2Freq>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef0:	4a13      	ldr	r2, [pc, #76]	; (8002f40 <HAL_InitTick+0xa8>)
 8002ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef6:	0c9b      	lsrs	r3, r3, #18
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002efc:	4b11      	ldr	r3, [pc, #68]	; (8002f44 <HAL_InitTick+0xac>)
 8002efe:	4a12      	ldr	r2, [pc, #72]	; (8002f48 <HAL_InitTick+0xb0>)
 8002f00:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002f02:	4b10      	ldr	r3, [pc, #64]	; (8002f44 <HAL_InitTick+0xac>)
 8002f04:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002f08:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002f0a:	4a0e      	ldr	r2, [pc, #56]	; (8002f44 <HAL_InitTick+0xac>)
 8002f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002f10:	4b0c      	ldr	r3, [pc, #48]	; (8002f44 <HAL_InitTick+0xac>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f16:	4b0b      	ldr	r3, [pc, #44]	; (8002f44 <HAL_InitTick+0xac>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002f1c:	4809      	ldr	r0, [pc, #36]	; (8002f44 <HAL_InitTick+0xac>)
 8002f1e:	f002 ff03 	bl	8005d28 <HAL_TIM_Base_Init>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d104      	bne.n	8002f32 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002f28:	4806      	ldr	r0, [pc, #24]	; (8002f44 <HAL_InitTick+0xac>)
 8002f2a:	f002 ff57 	bl	8005ddc <HAL_TIM_Base_Start_IT>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	e000      	b.n	8002f34 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3730      	adds	r7, #48	; 0x30
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	40023800 	.word	0x40023800
 8002f40:	431bde83 	.word	0x431bde83
 8002f44:	2000063c 	.word	0x2000063c
 8002f48:	40010000 	.word	0x40010000

08002f4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f50:	e7fe      	b.n	8002f50 <NMI_Handler+0x4>

08002f52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f52:	b480      	push	{r7}
 8002f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f56:	e7fe      	b.n	8002f56 <HardFault_Handler+0x4>

08002f58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f5c:	e7fe      	b.n	8002f5c <MemManage_Handler+0x4>

08002f5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f62:	e7fe      	b.n	8002f62 <BusFault_Handler+0x4>

08002f64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f68:	e7fe      	b.n	8002f68 <UsageFault_Handler+0x4>

08002f6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f6e:	bf00      	nop
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002f7c:	4802      	ldr	r0, [pc, #8]	; (8002f88 <DMA1_Stream5_IRQHandler+0x10>)
 8002f7e:	f000 ff7f 	bl	8003e80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002f82:	bf00      	nop
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	200002ac 	.word	0x200002ac

08002f8c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002f90:	4802      	ldr	r0, [pc, #8]	; (8002f9c <DMA1_Stream6_IRQHandler+0x10>)
 8002f92:	f000 ff75 	bl	8003e80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002f96:	bf00      	nop
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	2000030c 	.word	0x2000030c

08002fa0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002fa4:	4802      	ldr	r0, [pc, #8]	; (8002fb0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002fa6:	f002 ff89 	bl	8005ebc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002faa:	bf00      	nop
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	2000063c 	.word	0x2000063c

08002fb4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002fb8:	4803      	ldr	r0, [pc, #12]	; (8002fc8 <USART1_IRQHandler+0x14>)
 8002fba:	f003 fbb5 	bl	8006728 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  USER_UART_IRQHandler(&huart1);
 8002fbe:	4802      	ldr	r0, [pc, #8]	; (8002fc8 <USART1_IRQHandler+0x14>)
 8002fc0:	f7fd fee2 	bl	8000d88 <USER_UART_IRQHandler>
  /* USER CODE END USART1_IRQn 1 */
}
 8002fc4:	bf00      	nop
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	20000164 	.word	0x20000164

08002fcc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002fd0:	4802      	ldr	r0, [pc, #8]	; (8002fdc <USART2_IRQHandler+0x10>)
 8002fd2:	f003 fba9 	bl	8006728 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002fd6:	bf00      	nop
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	200001a8 	.word	0x200001a8

08002fe0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002fe4:	4802      	ldr	r0, [pc, #8]	; (8002ff0 <DMA2_Stream2_IRQHandler+0x10>)
 8002fe6:	f000 ff4b 	bl	8003e80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002fea:	bf00      	nop
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	200001ec 	.word	0x200001ec

08002ff4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002ff8:	4802      	ldr	r0, [pc, #8]	; (8003004 <DMA2_Stream7_IRQHandler+0x10>)
 8002ffa:	f000 ff41 	bl	8003e80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002ffe:	bf00      	nop
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	2000024c 	.word	0x2000024c

08003008 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b086      	sub	sp, #24
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003010:	4a14      	ldr	r2, [pc, #80]	; (8003064 <_sbrk+0x5c>)
 8003012:	4b15      	ldr	r3, [pc, #84]	; (8003068 <_sbrk+0x60>)
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800301c:	4b13      	ldr	r3, [pc, #76]	; (800306c <_sbrk+0x64>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d102      	bne.n	800302a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003024:	4b11      	ldr	r3, [pc, #68]	; (800306c <_sbrk+0x64>)
 8003026:	4a12      	ldr	r2, [pc, #72]	; (8003070 <_sbrk+0x68>)
 8003028:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800302a:	4b10      	ldr	r3, [pc, #64]	; (800306c <_sbrk+0x64>)
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4413      	add	r3, r2
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	429a      	cmp	r2, r3
 8003036:	d207      	bcs.n	8003048 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003038:	f008 fd30 	bl	800ba9c <__errno>
 800303c:	4603      	mov	r3, r0
 800303e:	220c      	movs	r2, #12
 8003040:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003042:	f04f 33ff 	mov.w	r3, #4294967295
 8003046:	e009      	b.n	800305c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003048:	4b08      	ldr	r3, [pc, #32]	; (800306c <_sbrk+0x64>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800304e:	4b07      	ldr	r3, [pc, #28]	; (800306c <_sbrk+0x64>)
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4413      	add	r3, r2
 8003056:	4a05      	ldr	r2, [pc, #20]	; (800306c <_sbrk+0x64>)
 8003058:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800305a:	68fb      	ldr	r3, [r7, #12]
}
 800305c:	4618      	mov	r0, r3
 800305e:	3718      	adds	r7, #24
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	20020000 	.word	0x20020000
 8003068:	00000400 	.word	0x00000400
 800306c:	20000684 	.word	0x20000684
 8003070:	20005058 	.word	0x20005058

08003074 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003078:	4b06      	ldr	r3, [pc, #24]	; (8003094 <SystemInit+0x20>)
 800307a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800307e:	4a05      	ldr	r2, [pc, #20]	; (8003094 <SystemInit+0x20>)
 8003080:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003084:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003088:	bf00      	nop
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	e000ed00 	.word	0xe000ed00

08003098 <W25qxx_Spi>:



//###################################################################################################################
uint8_t	W25qxx_Spi(uint8_t	Data)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af02      	add	r7, sp, #8
 800309e:	4603      	mov	r3, r0
 80030a0:	71fb      	strb	r3, [r7, #7]
	uint8_t	ret;

	HAL_SPI_TransmitReceive(W25QXX_SPI_PTR, &Data, &ret, 1, 100); // spi2
 80030a2:	f107 020f 	add.w	r2, r7, #15
 80030a6:	1df9      	adds	r1, r7, #7
 80030a8:	2364      	movs	r3, #100	; 0x64
 80030aa:	9300      	str	r3, [sp, #0]
 80030ac:	2301      	movs	r3, #1
 80030ae:	4804      	ldr	r0, [pc, #16]	; (80030c0 <W25qxx_Spi+0x28>)
 80030b0:	f002 fbcd 	bl	800584e <HAL_SPI_TransmitReceive>
	ret = W25QXX_SPI->DR;*/

	//while((W25QXX_SPI->SR & SPI_SR_BSY));
	//__HAL_SPI_CLEAR_OVRFLAG(&hspi2);

	return ret;
 80030b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3710      	adds	r7, #16
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	2000010c 	.word	0x2000010c

080030c4 <W25qxx_ReadID>:

//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 80030ca:	2300      	movs	r3, #0
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	2300      	movs	r3, #0
 80030d0:	60bb      	str	r3, [r7, #8]
 80030d2:	2300      	movs	r3, #0
 80030d4:	607b      	str	r3, [r7, #4]
 80030d6:	2300      	movs	r3, #0
 80030d8:	603b      	str	r3, [r7, #0]

	W25QFLASH_CS_SELECT;
 80030da:	2200      	movs	r2, #0
 80030dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030e0:	4813      	ldr	r0, [pc, #76]	; (8003130 <W25qxx_ReadID+0x6c>)
 80030e2:	f001 fae3 	bl	80046ac <HAL_GPIO_WritePin>

	W25qxx_Spi(W25_GET_JEDEC_ID);
 80030e6:	209f      	movs	r0, #159	; 0x9f
 80030e8:	f7ff ffd6 	bl	8003098 <W25qxx_Spi>

	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80030ec:	20a5      	movs	r0, #165	; 0xa5
 80030ee:	f7ff ffd3 	bl	8003098 <W25qxx_Spi>
 80030f2:	4603      	mov	r3, r0
 80030f4:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80030f6:	20a5      	movs	r0, #165	; 0xa5
 80030f8:	f7ff ffce 	bl	8003098 <W25qxx_Spi>
 80030fc:	4603      	mov	r3, r0
 80030fe:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003100:	20a5      	movs	r0, #165	; 0xa5
 8003102:	f7ff ffc9 	bl	8003098 <W25qxx_Spi>
 8003106:	4603      	mov	r3, r0
 8003108:	603b      	str	r3, [r7, #0]

	W25QFLASH_CS_UNSELECT;
 800310a:	2201      	movs	r2, #1
 800310c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003110:	4807      	ldr	r0, [pc, #28]	; (8003130 <W25qxx_ReadID+0x6c>)
 8003112:	f001 facb 	bl	80046ac <HAL_GPIO_WritePin>

	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	041a      	lsls	r2, r3, #16
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	021b      	lsls	r3, r3, #8
 800311e:	4313      	orrs	r3, r2
 8003120:	683a      	ldr	r2, [r7, #0]
 8003122:	4313      	orrs	r3, r2
 8003124:	60fb      	str	r3, [r7, #12]

	return Temp;
 8003126:	68fb      	ldr	r3, [r7, #12]
}
 8003128:	4618      	mov	r0, r3
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	40020400 	.word	0x40020400

08003134 <W25qxx_WriteEnable>:
	W25QFLASH_CS_UNSELECT;
}*/

//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
	W25QFLASH_CS_SELECT;
 8003138:	2200      	movs	r2, #0
 800313a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800313e:	4808      	ldr	r0, [pc, #32]	; (8003160 <W25qxx_WriteEnable+0x2c>)
 8003140:	f001 fab4 	bl	80046ac <HAL_GPIO_WritePin>
	W25qxx_Spi(W25_WRITE_ENABLE);
 8003144:	2006      	movs	r0, #6
 8003146:	f7ff ffa7 	bl	8003098 <W25qxx_Spi>
	W25QFLASH_CS_UNSELECT;
 800314a:	2201      	movs	r2, #1
 800314c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003150:	4803      	ldr	r0, [pc, #12]	; (8003160 <W25qxx_WriteEnable+0x2c>)
 8003152:	f001 faab 	bl	80046ac <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8003156:	2001      	movs	r0, #1
 8003158:	f000 fbd8 	bl	800390c <HAL_Delay>
}
 800315c:	bf00      	nop
 800315e:	bd80      	pop	{r7, pc}
 8003160:	40020400 	.word	0x40020400

08003164 <W25qxx_WaitForWriteEnd>:
	W25QFLASH_CS_UNSELECT;
}*/

//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8003168:	2001      	movs	r0, #1
 800316a:	f000 fbcf 	bl	800390c <HAL_Delay>
	W25QFLASH_CS_SELECT;
 800316e:	2200      	movs	r2, #0
 8003170:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003174:	480f      	ldr	r0, [pc, #60]	; (80031b4 <W25qxx_WaitForWriteEnd+0x50>)
 8003176:	f001 fa99 	bl	80046ac <HAL_GPIO_WritePin>
	W25qxx_Spi(W25_READ_STATUS_1);
 800317a:	2005      	movs	r0, #5
 800317c:	f7ff ff8c 	bl	8003098 <W25qxx_Spi>

	do{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003180:	20a5      	movs	r0, #165	; 0xa5
 8003182:	f7ff ff89 	bl	8003098 <W25qxx_Spi>
 8003186:	4603      	mov	r3, r0
 8003188:	461a      	mov	r2, r3
 800318a:	4b0b      	ldr	r3, [pc, #44]	; (80031b8 <W25qxx_WaitForWriteEnd+0x54>)
 800318c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8003190:	2001      	movs	r0, #1
 8003192:	f000 fbbb 	bl	800390c <HAL_Delay>
	}
	while((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8003196:	4b08      	ldr	r3, [pc, #32]	; (80031b8 <W25qxx_WaitForWriteEnd+0x54>)
 8003198:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1ed      	bne.n	8003180 <W25qxx_WaitForWriteEnd+0x1c>

	W25QFLASH_CS_UNSELECT;
 80031a4:	2201      	movs	r2, #1
 80031a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80031aa:	4802      	ldr	r0, [pc, #8]	; (80031b4 <W25qxx_WaitForWriteEnd+0x50>)
 80031ac:	f001 fa7e 	bl	80046ac <HAL_GPIO_WritePin>
}
 80031b0:	bf00      	nop
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	40020400 	.word	0x40020400
 80031b8:	200006c8 	.word	0x200006c8

080031bc <W25qxx_Init>:

//###################################################################################################################
uint8_t W25qxx_Init(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 80031c2:	4bb2      	ldr	r3, [pc, #712]	; (800348c <W25qxx_Init+0x2d0>)
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while(HAL_GetTick() < 100)
 80031ca:	e002      	b.n	80031d2 <W25qxx_Init+0x16>
	W25qxx_Delay(1);
 80031cc:	2001      	movs	r0, #1
 80031ce:	f000 fb9d 	bl	800390c <HAL_Delay>
	while(HAL_GetTick() < 100)
 80031d2:	f000 fb8f 	bl	80038f4 <HAL_GetTick>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b63      	cmp	r3, #99	; 0x63
 80031da:	d9f7      	bls.n	80031cc <W25qxx_Init+0x10>

	W25QFLASH_CS_UNSELECT;
 80031dc:	2201      	movs	r2, #1
 80031de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80031e2:	48ab      	ldr	r0, [pc, #684]	; (8003490 <W25qxx_Init+0x2d4>)
 80031e4:	f001 fa62 	bl	80046ac <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 80031e8:	2064      	movs	r0, #100	; 0x64
 80031ea:	f000 fb8f 	bl	800390c <HAL_Delay>

	uint32_t id;

	#if (INIT_DEBUG == 1)
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Init Begin...\n", 14, 1000);
 80031ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031f2:	220e      	movs	r2, #14
 80031f4:	49a7      	ldr	r1, [pc, #668]	; (8003494 <W25qxx_Init+0x2d8>)
 80031f6:	48a8      	ldr	r0, [pc, #672]	; (8003498 <W25qxx_Init+0x2dc>)
 80031f8:	f003 f891 	bl	800631e <HAL_UART_Transmit>
	#endif
	
	id = W25qxx_ReadID();
 80031fc:	f7ff ff62 	bl	80030c4 <W25qxx_ReadID>
 8003200:	6078      	str	r0, [r7, #4]

	#if (INIT_DEBUG == 1)
	snprintf(buf, 64, "ID:0x%lX\n", id);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4aa5      	ldr	r2, [pc, #660]	; (800349c <W25qxx_Init+0x2e0>)
 8003206:	2140      	movs	r1, #64	; 0x40
 8003208:	48a5      	ldr	r0, [pc, #660]	; (80034a0 <W25qxx_Init+0x2e4>)
 800320a:	f008 fc87 	bl	800bb1c <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 800320e:	48a4      	ldr	r0, [pc, #656]	; (80034a0 <W25qxx_Init+0x2e4>)
 8003210:	f7fc fffe 	bl	8000210 <strlen>
 8003214:	4603      	mov	r3, r0
 8003216:	b29a      	uxth	r2, r3
 8003218:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800321c:	49a0      	ldr	r1, [pc, #640]	; (80034a0 <W25qxx_Init+0x2e4>)
 800321e:	489e      	ldr	r0, [pc, #632]	; (8003498 <W25qxx_Init+0x2dc>)
 8003220:	f003 f87d 	bl	800631e <HAL_UART_Transmit>
	#endif

	switch(id & 0x0000FFFF)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	b29b      	uxth	r3, r3
 8003228:	f243 0217 	movw	r2, #12311	; 0x3017
 800322c:	4293      	cmp	r3, r2
 800322e:	d839      	bhi.n	80032a4 <W25qxx_Init+0xe8>
 8003230:	f243 0211 	movw	r2, #12305	; 0x3011
 8003234:	4293      	cmp	r3, r2
 8003236:	d21d      	bcs.n	8003274 <W25qxx_Init+0xb8>
 8003238:	e11a      	b.n	8003470 <W25qxx_Init+0x2b4>
 800323a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800323e:	3b11      	subs	r3, #17
 8003240:	2b09      	cmp	r3, #9
 8003242:	f200 8115 	bhi.w	8003470 <W25qxx_Init+0x2b4>
 8003246:	a201      	add	r2, pc, #4	; (adr r2, 800324c <W25qxx_Init+0x90>)
 8003248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800324c:	080033bb 	.word	0x080033bb
 8003250:	0800339f 	.word	0x0800339f
 8003254:	08003383 	.word	0x08003383
 8003258:	08003367 	.word	0x08003367
 800325c:	0800334b 	.word	0x0800334b
 8003260:	0800332f 	.word	0x0800332f
 8003264:	08003313 	.word	0x08003313
 8003268:	080032f5 	.word	0x080032f5
 800326c:	080032d7 	.word	0x080032d7
 8003270:	080032b9 	.word	0x080032b9
 8003274:	f5a3 5340 	sub.w	r3, r3, #12288	; 0x3000
 8003278:	3b11      	subs	r3, #17
 800327a:	2b06      	cmp	r3, #6
 800327c:	f200 80f8 	bhi.w	8003470 <W25qxx_Init+0x2b4>
 8003280:	a201      	add	r2, pc, #4	; (adr r2, 8003288 <W25qxx_Init+0xcc>)
 8003282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003286:	bf00      	nop
 8003288:	0800345b 	.word	0x0800345b
 800328c:	08003445 	.word	0x08003445
 8003290:	0800342f 	.word	0x0800342f
 8003294:	08003419 	.word	0x08003419
 8003298:	08003403 	.word	0x08003403
 800329c:	080033ed 	.word	0x080033ed
 80032a0:	080033d7 	.word	0x080033d7
 80032a4:	f244 021a 	movw	r2, #16410	; 0x401a
 80032a8:	4293      	cmp	r3, r2
 80032aa:	f200 80e1 	bhi.w	8003470 <W25qxx_Init+0x2b4>
 80032ae:	f244 0211 	movw	r2, #16401	; 0x4011
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d2c1      	bcs.n	800323a <W25qxx_Init+0x7e>
 80032b6:	e0db      	b.n	8003470 <W25qxx_Init+0x2b4>
	{
		case 0x401A:	// 	w25q512
			w25qxx.ID = W25Q512;
 80032b8:	4b74      	ldr	r3, [pc, #464]	; (800348c <W25qxx_Init+0x2d0>)
 80032ba:	220a      	movs	r2, #10
 80032bc:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 1024;
 80032be:	4b73      	ldr	r3, [pc, #460]	; (800348c <W25qxx_Init+0x2d0>)
 80032c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032c4:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q512\n", 14, 1000);
 80032c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032ca:	220e      	movs	r2, #14
 80032cc:	4975      	ldr	r1, [pc, #468]	; (80034a4 <W25qxx_Init+0x2e8>)
 80032ce:	4872      	ldr	r0, [pc, #456]	; (8003498 <W25qxx_Init+0x2dc>)
 80032d0:	f003 f825 	bl	800631e <HAL_UART_Transmit>
			#endif
		break;
 80032d4:	e10a      	b.n	80034ec <W25qxx_Init+0x330>

		case 0x4019:	// 	w25q256
			w25qxx.ID = W25Q256;
 80032d6:	4b6d      	ldr	r3, [pc, #436]	; (800348c <W25qxx_Init+0x2d0>)
 80032d8:	2209      	movs	r2, #9
 80032da:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 512;
 80032dc:	4b6b      	ldr	r3, [pc, #428]	; (800348c <W25qxx_Init+0x2d0>)
 80032de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032e2:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q256\n", 14, 1000);
 80032e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032e8:	220e      	movs	r2, #14
 80032ea:	496f      	ldr	r1, [pc, #444]	; (80034a8 <W25qxx_Init+0x2ec>)
 80032ec:	486a      	ldr	r0, [pc, #424]	; (8003498 <W25qxx_Init+0x2dc>)
 80032ee:	f003 f816 	bl	800631e <HAL_UART_Transmit>
			#endif
		break;
 80032f2:	e0fb      	b.n	80034ec <W25qxx_Init+0x330>

		case 0x4018:	// 	w25q128
			w25qxx.ID = W25Q128;
 80032f4:	4b65      	ldr	r3, [pc, #404]	; (800348c <W25qxx_Init+0x2d0>)
 80032f6:	2208      	movs	r2, #8
 80032f8:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 256;
 80032fa:	4b64      	ldr	r3, [pc, #400]	; (800348c <W25qxx_Init+0x2d0>)
 80032fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003300:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q128\n", 14, 1000);
 8003302:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003306:	220e      	movs	r2, #14
 8003308:	4968      	ldr	r1, [pc, #416]	; (80034ac <W25qxx_Init+0x2f0>)
 800330a:	4863      	ldr	r0, [pc, #396]	; (8003498 <W25qxx_Init+0x2dc>)
 800330c:	f003 f807 	bl	800631e <HAL_UART_Transmit>
			#endif
		break;
 8003310:	e0ec      	b.n	80034ec <W25qxx_Init+0x330>

		case 0x4017:	//	w25q64
			w25qxx.ID = W25Q64;
 8003312:	4b5e      	ldr	r3, [pc, #376]	; (800348c <W25qxx_Init+0x2d0>)
 8003314:	2207      	movs	r2, #7
 8003316:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 128;
 8003318:	4b5c      	ldr	r3, [pc, #368]	; (800348c <W25qxx_Init+0x2d0>)
 800331a:	2280      	movs	r2, #128	; 0x80
 800331c:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q64\n", 13, 1000);
 800331e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003322:	220d      	movs	r2, #13
 8003324:	4962      	ldr	r1, [pc, #392]	; (80034b0 <W25qxx_Init+0x2f4>)
 8003326:	485c      	ldr	r0, [pc, #368]	; (8003498 <W25qxx_Init+0x2dc>)
 8003328:	f002 fff9 	bl	800631e <HAL_UART_Transmit>
			#endif
		break;
 800332c:	e0de      	b.n	80034ec <W25qxx_Init+0x330>

		case 0x4016:	//	w25q32
			w25qxx.ID = W25Q32;
 800332e:	4b57      	ldr	r3, [pc, #348]	; (800348c <W25qxx_Init+0x2d0>)
 8003330:	2206      	movs	r2, #6
 8003332:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 64;
 8003334:	4b55      	ldr	r3, [pc, #340]	; (800348c <W25qxx_Init+0x2d0>)
 8003336:	2240      	movs	r2, #64	; 0x40
 8003338:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q32\n", 13, 1000);
 800333a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800333e:	220d      	movs	r2, #13
 8003340:	495c      	ldr	r1, [pc, #368]	; (80034b4 <W25qxx_Init+0x2f8>)
 8003342:	4855      	ldr	r0, [pc, #340]	; (8003498 <W25qxx_Init+0x2dc>)
 8003344:	f002 ffeb 	bl	800631e <HAL_UART_Transmit>
			#endif
		break;
 8003348:	e0d0      	b.n	80034ec <W25qxx_Init+0x330>

		case 0x4015:	//	w25q16
			w25qxx.ID = W25Q16;
 800334a:	4b50      	ldr	r3, [pc, #320]	; (800348c <W25qxx_Init+0x2d0>)
 800334c:	2205      	movs	r2, #5
 800334e:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 32;
 8003350:	4b4e      	ldr	r3, [pc, #312]	; (800348c <W25qxx_Init+0x2d0>)
 8003352:	2220      	movs	r2, #32
 8003354:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q16\n", 13, 1000);
 8003356:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800335a:	220d      	movs	r2, #13
 800335c:	4956      	ldr	r1, [pc, #344]	; (80034b8 <W25qxx_Init+0x2fc>)
 800335e:	484e      	ldr	r0, [pc, #312]	; (8003498 <W25qxx_Init+0x2dc>)
 8003360:	f002 ffdd 	bl	800631e <HAL_UART_Transmit>
			#endif
		break;
 8003364:	e0c2      	b.n	80034ec <W25qxx_Init+0x330>

		case 0x4014:	//	w25q80
			w25qxx.ID = W25Q80;
 8003366:	4b49      	ldr	r3, [pc, #292]	; (800348c <W25qxx_Init+0x2d0>)
 8003368:	2204      	movs	r2, #4
 800336a:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 16;
 800336c:	4b47      	ldr	r3, [pc, #284]	; (800348c <W25qxx_Init+0x2d0>)
 800336e:	2210      	movs	r2, #16
 8003370:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q80\n", 13, 1000);
 8003372:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003376:	220d      	movs	r2, #13
 8003378:	4950      	ldr	r1, [pc, #320]	; (80034bc <W25qxx_Init+0x300>)
 800337a:	4847      	ldr	r0, [pc, #284]	; (8003498 <W25qxx_Init+0x2dc>)
 800337c:	f002 ffcf 	bl	800631e <HAL_UART_Transmit>
			#endif
		break;
 8003380:	e0b4      	b.n	80034ec <W25qxx_Init+0x330>

		case 0x4013:	//	w25q40
			w25qxx.ID = W25Q40;
 8003382:	4b42      	ldr	r3, [pc, #264]	; (800348c <W25qxx_Init+0x2d0>)
 8003384:	2203      	movs	r2, #3
 8003386:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 8;
 8003388:	4b40      	ldr	r3, [pc, #256]	; (800348c <W25qxx_Init+0x2d0>)
 800338a:	2208      	movs	r2, #8
 800338c:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q40\n", 13, 1000);
 800338e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003392:	220d      	movs	r2, #13
 8003394:	494a      	ldr	r1, [pc, #296]	; (80034c0 <W25qxx_Init+0x304>)
 8003396:	4840      	ldr	r0, [pc, #256]	; (8003498 <W25qxx_Init+0x2dc>)
 8003398:	f002 ffc1 	bl	800631e <HAL_UART_Transmit>
			#endif
		break;
 800339c:	e0a6      	b.n	80034ec <W25qxx_Init+0x330>

		case 0x4012:	//	w25q20
			w25qxx.ID = W25Q20;
 800339e:	4b3b      	ldr	r3, [pc, #236]	; (800348c <W25qxx_Init+0x2d0>)
 80033a0:	2202      	movs	r2, #2
 80033a2:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 4;
 80033a4:	4b39      	ldr	r3, [pc, #228]	; (800348c <W25qxx_Init+0x2d0>)
 80033a6:	2204      	movs	r2, #4
 80033a8:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q20\n", 13, 1000);
 80033aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033ae:	220d      	movs	r2, #13
 80033b0:	4944      	ldr	r1, [pc, #272]	; (80034c4 <W25qxx_Init+0x308>)
 80033b2:	4839      	ldr	r0, [pc, #228]	; (8003498 <W25qxx_Init+0x2dc>)
 80033b4:	f002 ffb3 	bl	800631e <HAL_UART_Transmit>
			#endif
		break;
 80033b8:	e098      	b.n	80034ec <W25qxx_Init+0x330>

		case 0x4011:	//	w25q10
			w25qxx.ID = W25Q10;
 80033ba:	4b34      	ldr	r3, [pc, #208]	; (800348c <W25qxx_Init+0x2d0>)
 80033bc:	2201      	movs	r2, #1
 80033be:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 2;
 80033c0:	4b32      	ldr	r3, [pc, #200]	; (800348c <W25qxx_Init+0x2d0>)
 80033c2:	2202      	movs	r2, #2
 80033c4:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q10\n", 13, 1000);
 80033c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033ca:	220d      	movs	r2, #13
 80033cc:	493e      	ldr	r1, [pc, #248]	; (80034c8 <W25qxx_Init+0x30c>)
 80033ce:	4832      	ldr	r0, [pc, #200]	; (8003498 <W25qxx_Init+0x2dc>)
 80033d0:	f002 ffa5 	bl	800631e <HAL_UART_Transmit>
			#endif
		break;
 80033d4:	e08a      	b.n	80034ec <W25qxx_Init+0x330>

		////////////////////////////////////////////////////////////////////////////////

		case 0x3017:	//	w25x64
			//w25qxx.ID = W25Q64;
			w25qxx.BlockCount = 128;
 80033d6:	4b2d      	ldr	r3, [pc, #180]	; (800348c <W25qxx_Init+0x2d0>)
 80033d8:	2280      	movs	r2, #128	; 0x80
 80033da:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x64\n", 13, 1000);
 80033dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033e0:	220d      	movs	r2, #13
 80033e2:	493a      	ldr	r1, [pc, #232]	; (80034cc <W25qxx_Init+0x310>)
 80033e4:	482c      	ldr	r0, [pc, #176]	; (8003498 <W25qxx_Init+0x2dc>)
 80033e6:	f002 ff9a 	bl	800631e <HAL_UART_Transmit>
			#endif
		break;
 80033ea:	e07f      	b.n	80034ec <W25qxx_Init+0x330>

		case 0x3016:	//	w25x32
			//w25qxx.ID = W25Q32;
			w25qxx.BlockCount = 64;
 80033ec:	4b27      	ldr	r3, [pc, #156]	; (800348c <W25qxx_Init+0x2d0>)
 80033ee:	2240      	movs	r2, #64	; 0x40
 80033f0:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x32\n", 13, 1000);
 80033f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033f6:	220d      	movs	r2, #13
 80033f8:	4935      	ldr	r1, [pc, #212]	; (80034d0 <W25qxx_Init+0x314>)
 80033fa:	4827      	ldr	r0, [pc, #156]	; (8003498 <W25qxx_Init+0x2dc>)
 80033fc:	f002 ff8f 	bl	800631e <HAL_UART_Transmit>
			#endif
		break;
 8003400:	e074      	b.n	80034ec <W25qxx_Init+0x330>

		case 0x3015:	//	w25q16
			//w25qxx.ID = W25Q16;
			w25qxx.BlockCount = 32;
 8003402:	4b22      	ldr	r3, [pc, #136]	; (800348c <W25qxx_Init+0x2d0>)
 8003404:	2220      	movs	r2, #32
 8003406:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x16\n", 13, 1000);
 8003408:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800340c:	220d      	movs	r2, #13
 800340e:	4931      	ldr	r1, [pc, #196]	; (80034d4 <W25qxx_Init+0x318>)
 8003410:	4821      	ldr	r0, [pc, #132]	; (8003498 <W25qxx_Init+0x2dc>)
 8003412:	f002 ff84 	bl	800631e <HAL_UART_Transmit>
			#endif
		break;
 8003416:	e069      	b.n	80034ec <W25qxx_Init+0x330>

		////////////////////////////////////////////////////////////////////////////////
		case 0x3014:	//	w25x80
			//w25qxx.ID = W25Q80;
			w25qxx.BlockCount = 16;
 8003418:	4b1c      	ldr	r3, [pc, #112]	; (800348c <W25qxx_Init+0x2d0>)
 800341a:	2210      	movs	r2, #16
 800341c:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x80\n", 13, 1000);
 800341e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003422:	220d      	movs	r2, #13
 8003424:	492c      	ldr	r1, [pc, #176]	; (80034d8 <W25qxx_Init+0x31c>)
 8003426:	481c      	ldr	r0, [pc, #112]	; (8003498 <W25qxx_Init+0x2dc>)
 8003428:	f002 ff79 	bl	800631e <HAL_UART_Transmit>
			#endif
		break;
 800342c:	e05e      	b.n	80034ec <W25qxx_Init+0x330>

		case 0x3013:	//	w25x40
			//w25qxx.ID = W25Q40;
			w25qxx.BlockCount = 8;
 800342e:	4b17      	ldr	r3, [pc, #92]	; (800348c <W25qxx_Init+0x2d0>)
 8003430:	2208      	movs	r2, #8
 8003432:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x40\n", 13, 1000);
 8003434:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003438:	220d      	movs	r2, #13
 800343a:	4928      	ldr	r1, [pc, #160]	; (80034dc <W25qxx_Init+0x320>)
 800343c:	4816      	ldr	r0, [pc, #88]	; (8003498 <W25qxx_Init+0x2dc>)
 800343e:	f002 ff6e 	bl	800631e <HAL_UART_Transmit>
			#endif
		break;
 8003442:	e053      	b.n	80034ec <W25qxx_Init+0x330>

		case 0x3012:	//	w25x20
			//w25qxx.ID = W25Q20;
			w25qxx.BlockCount = 4;
 8003444:	4b11      	ldr	r3, [pc, #68]	; (800348c <W25qxx_Init+0x2d0>)
 8003446:	2204      	movs	r2, #4
 8003448:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x20\n", 13, 1000);
 800344a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800344e:	220d      	movs	r2, #13
 8003450:	4923      	ldr	r1, [pc, #140]	; (80034e0 <W25qxx_Init+0x324>)
 8003452:	4811      	ldr	r0, [pc, #68]	; (8003498 <W25qxx_Init+0x2dc>)
 8003454:	f002 ff63 	bl	800631e <HAL_UART_Transmit>
			#endif
		break;
 8003458:	e048      	b.n	80034ec <W25qxx_Init+0x330>

		case 0x3011:	//	w25x10
			//w25qxx.ID = W25Q10;
			w25qxx.BlockCount = 2;
 800345a:	4b0c      	ldr	r3, [pc, #48]	; (800348c <W25qxx_Init+0x2d0>)
 800345c:	2202      	movs	r2, #2
 800345e:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x10\n", 13, 1000);
 8003460:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003464:	220d      	movs	r2, #13
 8003466:	491f      	ldr	r1, [pc, #124]	; (80034e4 <W25qxx_Init+0x328>)
 8003468:	480b      	ldr	r0, [pc, #44]	; (8003498 <W25qxx_Init+0x2dc>)
 800346a:	f002 ff58 	bl	800631e <HAL_UART_Transmit>
			#endif
		break;
 800346e:	e03d      	b.n	80034ec <W25qxx_Init+0x330>



		default:
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Unknown ID\n", 11, 1000);
 8003470:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003474:	220b      	movs	r2, #11
 8003476:	491c      	ldr	r1, [pc, #112]	; (80034e8 <W25qxx_Init+0x32c>)
 8003478:	4807      	ldr	r0, [pc, #28]	; (8003498 <W25qxx_Init+0x2dc>)
 800347a:	f002 ff50 	bl	800631e <HAL_UART_Transmit>
			#endif

			w25qxx.Lock = 0;
 800347e:	4b03      	ldr	r3, [pc, #12]	; (800348c <W25qxx_Init+0x2d0>)
 8003480:	2200      	movs	r2, #0
 8003482:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			return 0;
 8003486:	2300      	movs	r3, #0
 8003488:	e0e1      	b.n	800364e <W25qxx_Init+0x492>
 800348a:	bf00      	nop
 800348c:	200006c8 	.word	0x200006c8
 8003490:	40020400 	.word	0x40020400
 8003494:	0800d424 	.word	0x0800d424
 8003498:	200001a8 	.word	0x200001a8
 800349c:	0800d434 	.word	0x0800d434
 80034a0:	20000688 	.word	0x20000688
 80034a4:	0800d440 	.word	0x0800d440
 80034a8:	0800d450 	.word	0x0800d450
 80034ac:	0800d460 	.word	0x0800d460
 80034b0:	0800d470 	.word	0x0800d470
 80034b4:	0800d480 	.word	0x0800d480
 80034b8:	0800d490 	.word	0x0800d490
 80034bc:	0800d4a0 	.word	0x0800d4a0
 80034c0:	0800d4b0 	.word	0x0800d4b0
 80034c4:	0800d4c0 	.word	0x0800d4c0
 80034c8:	0800d4d0 	.word	0x0800d4d0
 80034cc:	0800d4e0 	.word	0x0800d4e0
 80034d0:	0800d4f0 	.word	0x0800d4f0
 80034d4:	0800d500 	.word	0x0800d500
 80034d8:	0800d510 	.word	0x0800d510
 80034dc:	0800d520 	.word	0x0800d520
 80034e0:	0800d530 	.word	0x0800d530
 80034e4:	0800d540 	.word	0x0800d540
 80034e8:	0800d550 	.word	0x0800d550
	}


	w25qxx.PageSize = 256;
 80034ec:	4b5a      	ldr	r3, [pc, #360]	; (8003658 <W25qxx_Init+0x49c>)
 80034ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034f2:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 80034f4:	4b58      	ldr	r3, [pc, #352]	; (8003658 <W25qxx_Init+0x49c>)
 80034f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80034fa:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 80034fc:	4b56      	ldr	r3, [pc, #344]	; (8003658 <W25qxx_Init+0x49c>)
 80034fe:	69db      	ldr	r3, [r3, #28]
 8003500:	011b      	lsls	r3, r3, #4
 8003502:	4a55      	ldr	r2, [pc, #340]	; (8003658 <W25qxx_Init+0x49c>)
 8003504:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8003506:	4b54      	ldr	r3, [pc, #336]	; (8003658 <W25qxx_Init+0x49c>)
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	4a53      	ldr	r2, [pc, #332]	; (8003658 <W25qxx_Init+0x49c>)
 800350c:	6912      	ldr	r2, [r2, #16]
 800350e:	fb02 f303 	mul.w	r3, r2, r3
 8003512:	4a51      	ldr	r2, [pc, #324]	; (8003658 <W25qxx_Init+0x49c>)
 8003514:	8952      	ldrh	r2, [r2, #10]
 8003516:	fbb3 f3f2 	udiv	r3, r3, r2
 800351a:	4a4f      	ldr	r2, [pc, #316]	; (8003658 <W25qxx_Init+0x49c>)
 800351c:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 800351e:	4b4e      	ldr	r3, [pc, #312]	; (8003658 <W25qxx_Init+0x49c>)
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	011b      	lsls	r3, r3, #4
 8003524:	4a4c      	ldr	r2, [pc, #304]	; (8003658 <W25qxx_Init+0x49c>)
 8003526:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8003528:	4b4b      	ldr	r3, [pc, #300]	; (8003658 <W25qxx_Init+0x49c>)
 800352a:	695b      	ldr	r3, [r3, #20]
 800352c:	4a4a      	ldr	r2, [pc, #296]	; (8003658 <W25qxx_Init+0x49c>)
 800352e:	6912      	ldr	r2, [r2, #16]
 8003530:	fb02 f303 	mul.w	r3, r2, r3
 8003534:	0a9b      	lsrs	r3, r3, #10
 8003536:	4a48      	ldr	r2, [pc, #288]	; (8003658 <W25qxx_Init+0x49c>)
 8003538:	6213      	str	r3, [r2, #32]
	//W25qxx_ReadStatusRegister(1);
	//W25qxx_ReadStatusRegister(2);
	//W25qxx_ReadStatusRegister(3);

	#if (INIT_DEBUG == 1)
	snprintf(buf, 64, "Page Size: %d Bytes\n", w25qxx.PageSize);
 800353a:	4b47      	ldr	r3, [pc, #284]	; (8003658 <W25qxx_Init+0x49c>)
 800353c:	895b      	ldrh	r3, [r3, #10]
 800353e:	4a47      	ldr	r2, [pc, #284]	; (800365c <W25qxx_Init+0x4a0>)
 8003540:	2140      	movs	r1, #64	; 0x40
 8003542:	4847      	ldr	r0, [pc, #284]	; (8003660 <W25qxx_Init+0x4a4>)
 8003544:	f008 faea 	bl	800bb1c <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 8003548:	4845      	ldr	r0, [pc, #276]	; (8003660 <W25qxx_Init+0x4a4>)
 800354a:	f7fc fe61 	bl	8000210 <strlen>
 800354e:	4603      	mov	r3, r0
 8003550:	b29a      	uxth	r2, r3
 8003552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003556:	4942      	ldr	r1, [pc, #264]	; (8003660 <W25qxx_Init+0x4a4>)
 8003558:	4842      	ldr	r0, [pc, #264]	; (8003664 <W25qxx_Init+0x4a8>)
 800355a:	f002 fee0 	bl	800631e <HAL_UART_Transmit>

	snprintf(buf, 64, "Page Count: %lu\n", w25qxx.PageCount);
 800355e:	4b3e      	ldr	r3, [pc, #248]	; (8003658 <W25qxx_Init+0x49c>)
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	4a41      	ldr	r2, [pc, #260]	; (8003668 <W25qxx_Init+0x4ac>)
 8003564:	2140      	movs	r1, #64	; 0x40
 8003566:	483e      	ldr	r0, [pc, #248]	; (8003660 <W25qxx_Init+0x4a4>)
 8003568:	f008 fad8 	bl	800bb1c <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 800356c:	483c      	ldr	r0, [pc, #240]	; (8003660 <W25qxx_Init+0x4a4>)
 800356e:	f7fc fe4f 	bl	8000210 <strlen>
 8003572:	4603      	mov	r3, r0
 8003574:	b29a      	uxth	r2, r3
 8003576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800357a:	4939      	ldr	r1, [pc, #228]	; (8003660 <W25qxx_Init+0x4a4>)
 800357c:	4839      	ldr	r0, [pc, #228]	; (8003664 <W25qxx_Init+0x4a8>)
 800357e:	f002 fece 	bl	800631e <HAL_UART_Transmit>

	snprintf(buf, 64, "Sector Size: %lu Bytes\n", w25qxx.SectorSize);
 8003582:	4b35      	ldr	r3, [pc, #212]	; (8003658 <W25qxx_Init+0x49c>)
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	4a39      	ldr	r2, [pc, #228]	; (800366c <W25qxx_Init+0x4b0>)
 8003588:	2140      	movs	r1, #64	; 0x40
 800358a:	4835      	ldr	r0, [pc, #212]	; (8003660 <W25qxx_Init+0x4a4>)
 800358c:	f008 fac6 	bl	800bb1c <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 8003590:	4833      	ldr	r0, [pc, #204]	; (8003660 <W25qxx_Init+0x4a4>)
 8003592:	f7fc fe3d 	bl	8000210 <strlen>
 8003596:	4603      	mov	r3, r0
 8003598:	b29a      	uxth	r2, r3
 800359a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800359e:	4930      	ldr	r1, [pc, #192]	; (8003660 <W25qxx_Init+0x4a4>)
 80035a0:	4830      	ldr	r0, [pc, #192]	; (8003664 <W25qxx_Init+0x4a8>)
 80035a2:	f002 febc 	bl	800631e <HAL_UART_Transmit>

	snprintf(buf, 64, "Sector Count: %lu\n", w25qxx.SectorCount);
 80035a6:	4b2c      	ldr	r3, [pc, #176]	; (8003658 <W25qxx_Init+0x49c>)
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	4a31      	ldr	r2, [pc, #196]	; (8003670 <W25qxx_Init+0x4b4>)
 80035ac:	2140      	movs	r1, #64	; 0x40
 80035ae:	482c      	ldr	r0, [pc, #176]	; (8003660 <W25qxx_Init+0x4a4>)
 80035b0:	f008 fab4 	bl	800bb1c <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 80035b4:	482a      	ldr	r0, [pc, #168]	; (8003660 <W25qxx_Init+0x4a4>)
 80035b6:	f7fc fe2b 	bl	8000210 <strlen>
 80035ba:	4603      	mov	r3, r0
 80035bc:	b29a      	uxth	r2, r3
 80035be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035c2:	4927      	ldr	r1, [pc, #156]	; (8003660 <W25qxx_Init+0x4a4>)
 80035c4:	4827      	ldr	r0, [pc, #156]	; (8003664 <W25qxx_Init+0x4a8>)
 80035c6:	f002 feaa 	bl	800631e <HAL_UART_Transmit>

	snprintf(buf, 64, "Block Size: %lu Bytes\n", w25qxx.BlockSize);
 80035ca:	4b23      	ldr	r3, [pc, #140]	; (8003658 <W25qxx_Init+0x49c>)
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	4a29      	ldr	r2, [pc, #164]	; (8003674 <W25qxx_Init+0x4b8>)
 80035d0:	2140      	movs	r1, #64	; 0x40
 80035d2:	4823      	ldr	r0, [pc, #140]	; (8003660 <W25qxx_Init+0x4a4>)
 80035d4:	f008 faa2 	bl	800bb1c <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 80035d8:	4821      	ldr	r0, [pc, #132]	; (8003660 <W25qxx_Init+0x4a4>)
 80035da:	f7fc fe19 	bl	8000210 <strlen>
 80035de:	4603      	mov	r3, r0
 80035e0:	b29a      	uxth	r2, r3
 80035e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035e6:	491e      	ldr	r1, [pc, #120]	; (8003660 <W25qxx_Init+0x4a4>)
 80035e8:	481e      	ldr	r0, [pc, #120]	; (8003664 <W25qxx_Init+0x4a8>)
 80035ea:	f002 fe98 	bl	800631e <HAL_UART_Transmit>

	snprintf(buf, 64, "Block Count: %lu\n", w25qxx.BlockCount);
 80035ee:	4b1a      	ldr	r3, [pc, #104]	; (8003658 <W25qxx_Init+0x49c>)
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	4a21      	ldr	r2, [pc, #132]	; (8003678 <W25qxx_Init+0x4bc>)
 80035f4:	2140      	movs	r1, #64	; 0x40
 80035f6:	481a      	ldr	r0, [pc, #104]	; (8003660 <W25qxx_Init+0x4a4>)
 80035f8:	f008 fa90 	bl	800bb1c <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 80035fc:	4818      	ldr	r0, [pc, #96]	; (8003660 <W25qxx_Init+0x4a4>)
 80035fe:	f7fc fe07 	bl	8000210 <strlen>
 8003602:	4603      	mov	r3, r0
 8003604:	b29a      	uxth	r2, r3
 8003606:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800360a:	4915      	ldr	r1, [pc, #84]	; (8003660 <W25qxx_Init+0x4a4>)
 800360c:	4815      	ldr	r0, [pc, #84]	; (8003664 <W25qxx_Init+0x4a8>)
 800360e:	f002 fe86 	bl	800631e <HAL_UART_Transmit>

	snprintf(buf, 64, "Capacity: %lu KBytes\n", w25qxx.CapacityInKiloByte);
 8003612:	4b11      	ldr	r3, [pc, #68]	; (8003658 <W25qxx_Init+0x49c>)
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	4a19      	ldr	r2, [pc, #100]	; (800367c <W25qxx_Init+0x4c0>)
 8003618:	2140      	movs	r1, #64	; 0x40
 800361a:	4811      	ldr	r0, [pc, #68]	; (8003660 <W25qxx_Init+0x4a4>)
 800361c:	f008 fa7e 	bl	800bb1c <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 8003620:	480f      	ldr	r0, [pc, #60]	; (8003660 <W25qxx_Init+0x4a4>)
 8003622:	f7fc fdf5 	bl	8000210 <strlen>
 8003626:	4603      	mov	r3, r0
 8003628:	b29a      	uxth	r2, r3
 800362a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800362e:	490c      	ldr	r1, [pc, #48]	; (8003660 <W25qxx_Init+0x4a4>)
 8003630:	480c      	ldr	r0, [pc, #48]	; (8003664 <W25qxx_Init+0x4a8>)
 8003632:	f002 fe74 	bl	800631e <HAL_UART_Transmit>

	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Init Done\n", 10, 1000);
 8003636:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800363a:	220a      	movs	r2, #10
 800363c:	4910      	ldr	r1, [pc, #64]	; (8003680 <W25qxx_Init+0x4c4>)
 800363e:	4809      	ldr	r0, [pc, #36]	; (8003664 <W25qxx_Init+0x4a8>)
 8003640:	f002 fe6d 	bl	800631e <HAL_UART_Transmit>
	#endif

	w25qxx.Lock = 0;
 8003644:	4b04      	ldr	r3, [pc, #16]	; (8003658 <W25qxx_Init+0x49c>)
 8003646:	2200      	movs	r2, #0
 8003648:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return 1;
 800364c:	2301      	movs	r3, #1
}	
 800364e:	4618      	mov	r0, r3
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	200006c8 	.word	0x200006c8
 800365c:	0800d55c 	.word	0x0800d55c
 8003660:	20000688 	.word	0x20000688
 8003664:	200001a8 	.word	0x200001a8
 8003668:	0800d574 	.word	0x0800d574
 800366c:	0800d588 	.word	0x0800d588
 8003670:	0800d5a0 	.word	0x0800d5a0
 8003674:	0800d5b4 	.word	0x0800d5b4
 8003678:	0800d5cc 	.word	0x0800d5cc
 800367c:	0800d5e0 	.word	0x0800d5e0
 8003680:	0800d5f8 	.word	0x0800d5f8

08003684 <W25qxx_EraseSector>:
	w25qxx.Lock = 0;
}

//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
	while(w25qxx.Lock == 1)
 800368c:	e002      	b.n	8003694 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 800368e:	2001      	movs	r0, #1
 8003690:	f000 f93c 	bl	800390c <HAL_Delay>
	while(w25qxx.Lock == 1)
 8003694:	4b24      	ldr	r3, [pc, #144]	; (8003728 <W25qxx_EraseSector+0xa4>)
 8003696:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800369a:	2b01      	cmp	r3, #1
 800369c:	d0f7      	beq.n	800368e <W25qxx_EraseSector+0xa>

	w25qxx.Lock = 1;
 800369e:	4b22      	ldr	r3, [pc, #136]	; (8003728 <W25qxx_EraseSector+0xa4>)
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	W25qxx_WaitForWriteEnd();
 80036a6:	f7ff fd5d 	bl	8003164 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 80036aa:	4b1f      	ldr	r3, [pc, #124]	; (8003728 <W25qxx_EraseSector+0xa4>)
 80036ac:	691a      	ldr	r2, [r3, #16]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	fb02 f303 	mul.w	r3, r2, r3
 80036b4:	607b      	str	r3, [r7, #4]

	W25qxx_WriteEnable();
 80036b6:	f7ff fd3d 	bl	8003134 <W25qxx_WriteEnable>

	W25QFLASH_CS_SELECT;
 80036ba:	2200      	movs	r2, #0
 80036bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80036c0:	481a      	ldr	r0, [pc, #104]	; (800372c <W25qxx_EraseSector+0xa8>)
 80036c2:	f000 fff3 	bl	80046ac <HAL_GPIO_WritePin>

	W25qxx_Spi(W25_SECTOR_ERASE);
 80036c6:	2020      	movs	r0, #32
 80036c8:	f7ff fce6 	bl	8003098 <W25qxx_Spi>

	if(w25qxx.ID >= W25Q256)
 80036cc:	4b16      	ldr	r3, [pc, #88]	; (8003728 <W25qxx_EraseSector+0xa4>)
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	2b08      	cmp	r3, #8
 80036d2:	d905      	bls.n	80036e0 <W25qxx_EraseSector+0x5c>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	0e1b      	lsrs	r3, r3, #24
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	4618      	mov	r0, r3
 80036dc:	f7ff fcdc 	bl	8003098 <W25qxx_Spi>

	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	0c1b      	lsrs	r3, r3, #16
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7ff fcd6 	bl	8003098 <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	0a1b      	lsrs	r3, r3, #8
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7ff fcd0 	bl	8003098 <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7ff fccb 	bl	8003098 <W25qxx_Spi>

	W25QFLASH_CS_UNSELECT;
 8003702:	2201      	movs	r2, #1
 8003704:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003708:	4808      	ldr	r0, [pc, #32]	; (800372c <W25qxx_EraseSector+0xa8>)
 800370a:	f000 ffcf 	bl	80046ac <HAL_GPIO_WritePin>

	W25qxx_WaitForWriteEnd();
 800370e:	f7ff fd29 	bl	8003164 <W25qxx_WaitForWriteEnd>

	W25qxx_Delay(1);
 8003712:	2001      	movs	r0, #1
 8003714:	f000 f8fa 	bl	800390c <HAL_Delay>
	w25qxx.Lock = 0;
 8003718:	4b03      	ldr	r3, [pc, #12]	; (8003728 <W25qxx_EraseSector+0xa4>)
 800371a:	2200      	movs	r2, #0
 800371c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8003720:	bf00      	nop
 8003722:	3708      	adds	r7, #8
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	200006c8 	.word	0x200006c8
 800372c:	40020400 	.word	0x40020400

08003730 <W25qxx_WritePage>:
	w25qxx.Lock = 0;
}

//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]
 800373c:	603b      	str	r3, [r7, #0]
	while(w25qxx.Lock == 1)
 800373e:	e002      	b.n	8003746 <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8003740:	2001      	movs	r0, #1
 8003742:	f000 f8e3 	bl	800390c <HAL_Delay>
	while(w25qxx.Lock == 1)
 8003746:	4b38      	ldr	r3, [pc, #224]	; (8003828 <W25qxx_WritePage+0xf8>)
 8003748:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800374c:	2b01      	cmp	r3, #1
 800374e:	d0f7      	beq.n	8003740 <W25qxx_WritePage+0x10>

	w25qxx.Lock = 1;
 8003750:	4b35      	ldr	r3, [pc, #212]	; (8003828 <W25qxx_WritePage+0xf8>)
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	if(((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8003758:	683a      	ldr	r2, [r7, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4413      	add	r3, r2
 800375e:	4a32      	ldr	r2, [pc, #200]	; (8003828 <W25qxx_WritePage+0xf8>)
 8003760:	8952      	ldrh	r2, [r2, #10]
 8003762:	4293      	cmp	r3, r2
 8003764:	d802      	bhi.n	800376c <W25qxx_WritePage+0x3c>
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d105      	bne.n	8003778 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800376c:	4b2e      	ldr	r3, [pc, #184]	; (8003828 <W25qxx_WritePage+0xf8>)
 800376e:	895b      	ldrh	r3, [r3, #10]
 8003770:	461a      	mov	r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	603b      	str	r3, [r7, #0]

	if((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	4413      	add	r3, r2
 800377e:	4a2a      	ldr	r2, [pc, #168]	; (8003828 <W25qxx_WritePage+0xf8>)
 8003780:	8952      	ldrh	r2, [r2, #10]
 8003782:	4293      	cmp	r3, r2
 8003784:	d905      	bls.n	8003792 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8003786:	4b28      	ldr	r3, [pc, #160]	; (8003828 <W25qxx_WritePage+0xf8>)
 8003788:	895b      	ldrh	r3, [r3, #10]
 800378a:	461a      	mov	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	603b      	str	r3, [r7, #0]


	W25qxx_WaitForWriteEnd();
 8003792:	f7ff fce7 	bl	8003164 <W25qxx_WaitForWriteEnd>

	W25qxx_WriteEnable();
 8003796:	f7ff fccd 	bl	8003134 <W25qxx_WriteEnable>

	W25QFLASH_CS_SELECT;
 800379a:	2200      	movs	r2, #0
 800379c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80037a0:	4822      	ldr	r0, [pc, #136]	; (800382c <W25qxx_WritePage+0xfc>)
 80037a2:	f000 ff83 	bl	80046ac <HAL_GPIO_WritePin>

	W25qxx_Spi(W25_PAGE_PROGRAMM);
 80037a6:	2002      	movs	r0, #2
 80037a8:	f7ff fc76 	bl	8003098 <W25qxx_Spi>

	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 80037ac:	4b1e      	ldr	r3, [pc, #120]	; (8003828 <W25qxx_WritePage+0xf8>)
 80037ae:	895b      	ldrh	r3, [r3, #10]
 80037b0:	461a      	mov	r2, r3
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	fb02 f303 	mul.w	r3, r2, r3
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	4413      	add	r3, r2
 80037bc:	60bb      	str	r3, [r7, #8]

	if(w25qxx.ID >= W25Q256)
 80037be:	4b1a      	ldr	r3, [pc, #104]	; (8003828 <W25qxx_WritePage+0xf8>)
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	2b08      	cmp	r3, #8
 80037c4:	d905      	bls.n	80037d2 <W25qxx_WritePage+0xa2>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	0e1b      	lsrs	r3, r3, #24
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7ff fc63 	bl	8003098 <W25qxx_Spi>

	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	0c1b      	lsrs	r3, r3, #16
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	4618      	mov	r0, r3
 80037da:	f7ff fc5d 	bl	8003098 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	0a1b      	lsrs	r3, r3, #8
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7ff fc57 	bl	8003098 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7ff fc52 	bl	8003098 <W25qxx_Spi>

	HAL_SPI_Transmit(W25QXX_SPI_PTR, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	2364      	movs	r3, #100	; 0x64
 80037fa:	68f9      	ldr	r1, [r7, #12]
 80037fc:	480c      	ldr	r0, [pc, #48]	; (8003830 <W25qxx_WritePage+0x100>)
 80037fe:	f001 feea 	bl	80055d6 <HAL_SPI_Transmit>

	W25QFLASH_CS_UNSELECT;
 8003802:	2201      	movs	r2, #1
 8003804:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003808:	4808      	ldr	r0, [pc, #32]	; (800382c <W25qxx_WritePage+0xfc>)
 800380a:	f000 ff4f 	bl	80046ac <HAL_GPIO_WritePin>

	W25qxx_WaitForWriteEnd();
 800380e:	f7ff fca9 	bl	8003164 <W25qxx_WaitForWriteEnd>

	W25qxx_Delay(1);
 8003812:	2001      	movs	r0, #1
 8003814:	f000 f87a 	bl	800390c <HAL_Delay>
	w25qxx.Lock = 0;
 8003818:	4b03      	ldr	r3, [pc, #12]	; (8003828 <W25qxx_WritePage+0xf8>)
 800381a:	2200      	movs	r2, #0
 800381c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8003820:	bf00      	nop
 8003822:	3710      	adds	r7, #16
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	200006c8 	.word	0x200006c8
 800382c:	40020400 	.word	0x40020400
 8003830:	2000010c 	.word	0x2000010c

08003834 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003834:	f8df d034 	ldr.w	sp, [pc, #52]	; 800386c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003838:	480d      	ldr	r0, [pc, #52]	; (8003870 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800383a:	490e      	ldr	r1, [pc, #56]	; (8003874 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800383c:	4a0e      	ldr	r2, [pc, #56]	; (8003878 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800383e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003840:	e002      	b.n	8003848 <LoopCopyDataInit>

08003842 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003842:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003844:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003846:	3304      	adds	r3, #4

08003848 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003848:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800384a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800384c:	d3f9      	bcc.n	8003842 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800384e:	4a0b      	ldr	r2, [pc, #44]	; (800387c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003850:	4c0b      	ldr	r4, [pc, #44]	; (8003880 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003852:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003854:	e001      	b.n	800385a <LoopFillZerobss>

08003856 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003856:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003858:	3204      	adds	r2, #4

0800385a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800385a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800385c:	d3fb      	bcc.n	8003856 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800385e:	f7ff fc09 	bl	8003074 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003862:	f008 f921 	bl	800baa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003866:	f7fc fead 	bl	80005c4 <main>
  bx  lr    
 800386a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800386c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003874:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8003878:	0800d9e4 	.word	0x0800d9e4
  ldr r2, =_sbss
 800387c:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8003880:	20005054 	.word	0x20005054

08003884 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003884:	e7fe      	b.n	8003884 <ADC_IRQHandler>
	...

08003888 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800388c:	4b0e      	ldr	r3, [pc, #56]	; (80038c8 <HAL_Init+0x40>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a0d      	ldr	r2, [pc, #52]	; (80038c8 <HAL_Init+0x40>)
 8003892:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003896:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003898:	4b0b      	ldr	r3, [pc, #44]	; (80038c8 <HAL_Init+0x40>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a0a      	ldr	r2, [pc, #40]	; (80038c8 <HAL_Init+0x40>)
 800389e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038a4:	4b08      	ldr	r3, [pc, #32]	; (80038c8 <HAL_Init+0x40>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a07      	ldr	r2, [pc, #28]	; (80038c8 <HAL_Init+0x40>)
 80038aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038b0:	2003      	movs	r0, #3
 80038b2:	f000 f913 	bl	8003adc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038b6:	2000      	movs	r0, #0
 80038b8:	f7ff faee 	bl	8002e98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038bc:	f7ff f8da 	bl	8002a74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	40023c00 	.word	0x40023c00

080038cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80038d0:	4b06      	ldr	r3, [pc, #24]	; (80038ec <HAL_IncTick+0x20>)
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	461a      	mov	r2, r3
 80038d6:	4b06      	ldr	r3, [pc, #24]	; (80038f0 <HAL_IncTick+0x24>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4413      	add	r3, r2
 80038dc:	4a04      	ldr	r2, [pc, #16]	; (80038f0 <HAL_IncTick+0x24>)
 80038de:	6013      	str	r3, [r2, #0]
}
 80038e0:	bf00      	nop
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	20000030 	.word	0x20000030
 80038f0:	200006f0 	.word	0x200006f0

080038f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038f4:	b480      	push	{r7}
 80038f6:	af00      	add	r7, sp, #0
  return uwTick;
 80038f8:	4b03      	ldr	r3, [pc, #12]	; (8003908 <HAL_GetTick+0x14>)
 80038fa:	681b      	ldr	r3, [r3, #0]
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	200006f0 	.word	0x200006f0

0800390c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003914:	f7ff ffee 	bl	80038f4 <HAL_GetTick>
 8003918:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003924:	d005      	beq.n	8003932 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003926:	4b0a      	ldr	r3, [pc, #40]	; (8003950 <HAL_Delay+0x44>)
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	461a      	mov	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	4413      	add	r3, r2
 8003930:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003932:	bf00      	nop
 8003934:	f7ff ffde 	bl	80038f4 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	429a      	cmp	r2, r3
 8003942:	d8f7      	bhi.n	8003934 <HAL_Delay+0x28>
  {
  }
}
 8003944:	bf00      	nop
 8003946:	bf00      	nop
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	20000030 	.word	0x20000030

08003954 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003954:	b480      	push	{r7}
 8003956:	b085      	sub	sp, #20
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f003 0307 	and.w	r3, r3, #7
 8003962:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003964:	4b0c      	ldr	r3, [pc, #48]	; (8003998 <__NVIC_SetPriorityGrouping+0x44>)
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800396a:	68ba      	ldr	r2, [r7, #8]
 800396c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003970:	4013      	ands	r3, r2
 8003972:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800397c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003980:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003984:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003986:	4a04      	ldr	r2, [pc, #16]	; (8003998 <__NVIC_SetPriorityGrouping+0x44>)
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	60d3      	str	r3, [r2, #12]
}
 800398c:	bf00      	nop
 800398e:	3714      	adds	r7, #20
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr
 8003998:	e000ed00 	.word	0xe000ed00

0800399c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039a0:	4b04      	ldr	r3, [pc, #16]	; (80039b4 <__NVIC_GetPriorityGrouping+0x18>)
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	0a1b      	lsrs	r3, r3, #8
 80039a6:	f003 0307 	and.w	r3, r3, #7
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr
 80039b4:	e000ed00 	.word	0xe000ed00

080039b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	4603      	mov	r3, r0
 80039c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	db0b      	blt.n	80039e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039ca:	79fb      	ldrb	r3, [r7, #7]
 80039cc:	f003 021f 	and.w	r2, r3, #31
 80039d0:	4907      	ldr	r1, [pc, #28]	; (80039f0 <__NVIC_EnableIRQ+0x38>)
 80039d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d6:	095b      	lsrs	r3, r3, #5
 80039d8:	2001      	movs	r0, #1
 80039da:	fa00 f202 	lsl.w	r2, r0, r2
 80039de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80039e2:	bf00      	nop
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	e000e100 	.word	0xe000e100

080039f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	4603      	mov	r3, r0
 80039fc:	6039      	str	r1, [r7, #0]
 80039fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	db0a      	blt.n	8003a1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	b2da      	uxtb	r2, r3
 8003a0c:	490c      	ldr	r1, [pc, #48]	; (8003a40 <__NVIC_SetPriority+0x4c>)
 8003a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a12:	0112      	lsls	r2, r2, #4
 8003a14:	b2d2      	uxtb	r2, r2
 8003a16:	440b      	add	r3, r1
 8003a18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a1c:	e00a      	b.n	8003a34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	b2da      	uxtb	r2, r3
 8003a22:	4908      	ldr	r1, [pc, #32]	; (8003a44 <__NVIC_SetPriority+0x50>)
 8003a24:	79fb      	ldrb	r3, [r7, #7]
 8003a26:	f003 030f 	and.w	r3, r3, #15
 8003a2a:	3b04      	subs	r3, #4
 8003a2c:	0112      	lsls	r2, r2, #4
 8003a2e:	b2d2      	uxtb	r2, r2
 8003a30:	440b      	add	r3, r1
 8003a32:	761a      	strb	r2, [r3, #24]
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr
 8003a40:	e000e100 	.word	0xe000e100
 8003a44:	e000ed00 	.word	0xe000ed00

08003a48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b089      	sub	sp, #36	; 0x24
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f003 0307 	and.w	r3, r3, #7
 8003a5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	f1c3 0307 	rsb	r3, r3, #7
 8003a62:	2b04      	cmp	r3, #4
 8003a64:	bf28      	it	cs
 8003a66:	2304      	movcs	r3, #4
 8003a68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	3304      	adds	r3, #4
 8003a6e:	2b06      	cmp	r3, #6
 8003a70:	d902      	bls.n	8003a78 <NVIC_EncodePriority+0x30>
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	3b03      	subs	r3, #3
 8003a76:	e000      	b.n	8003a7a <NVIC_EncodePriority+0x32>
 8003a78:	2300      	movs	r3, #0
 8003a7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	fa02 f303 	lsl.w	r3, r2, r3
 8003a86:	43da      	mvns	r2, r3
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	401a      	ands	r2, r3
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a90:	f04f 31ff 	mov.w	r1, #4294967295
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	fa01 f303 	lsl.w	r3, r1, r3
 8003a9a:	43d9      	mvns	r1, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003aa0:	4313      	orrs	r3, r2
         );
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3724      	adds	r7, #36	; 0x24
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
	...

08003ab0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003ab4:	f3bf 8f4f 	dsb	sy
}
 8003ab8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003aba:	4b06      	ldr	r3, [pc, #24]	; (8003ad4 <__NVIC_SystemReset+0x24>)
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003ac2:	4904      	ldr	r1, [pc, #16]	; (8003ad4 <__NVIC_SystemReset+0x24>)
 8003ac4:	4b04      	ldr	r3, [pc, #16]	; (8003ad8 <__NVIC_SystemReset+0x28>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003aca:	f3bf 8f4f 	dsb	sy
}
 8003ace:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003ad0:	bf00      	nop
 8003ad2:	e7fd      	b.n	8003ad0 <__NVIC_SystemReset+0x20>
 8003ad4:	e000ed00 	.word	0xe000ed00
 8003ad8:	05fa0004 	.word	0x05fa0004

08003adc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f7ff ff35 	bl	8003954 <__NVIC_SetPriorityGrouping>
}
 8003aea:	bf00      	nop
 8003aec:	3708      	adds	r7, #8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b086      	sub	sp, #24
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	4603      	mov	r3, r0
 8003afa:	60b9      	str	r1, [r7, #8]
 8003afc:	607a      	str	r2, [r7, #4]
 8003afe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b00:	2300      	movs	r3, #0
 8003b02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b04:	f7ff ff4a 	bl	800399c <__NVIC_GetPriorityGrouping>
 8003b08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	68b9      	ldr	r1, [r7, #8]
 8003b0e:	6978      	ldr	r0, [r7, #20]
 8003b10:	f7ff ff9a 	bl	8003a48 <NVIC_EncodePriority>
 8003b14:	4602      	mov	r2, r0
 8003b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b1a:	4611      	mov	r1, r2
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7ff ff69 	bl	80039f4 <__NVIC_SetPriority>
}
 8003b22:	bf00      	nop
 8003b24:	3718      	adds	r7, #24
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b082      	sub	sp, #8
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	4603      	mov	r3, r0
 8003b32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7ff ff3d 	bl	80039b8 <__NVIC_EnableIRQ>
}
 8003b3e:	bf00      	nop
 8003b40:	3708      	adds	r7, #8
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8003b4a:	f7ff ffb1 	bl	8003ab0 <__NVIC_SystemReset>
	...

08003b50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b086      	sub	sp, #24
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003b5c:	f7ff feca 	bl	80038f4 <HAL_GetTick>
 8003b60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d101      	bne.n	8003b6c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e099      	b.n	8003ca0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2202      	movs	r2, #2
 8003b70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f022 0201 	bic.w	r2, r2, #1
 8003b8a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b8c:	e00f      	b.n	8003bae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b8e:	f7ff feb1 	bl	80038f4 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b05      	cmp	r3, #5
 8003b9a:	d908      	bls.n	8003bae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2220      	movs	r2, #32
 8003ba0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2203      	movs	r2, #3
 8003ba6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e078      	b.n	8003ca0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0301 	and.w	r3, r3, #1
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d1e8      	bne.n	8003b8e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	4b38      	ldr	r3, [pc, #224]	; (8003ca8 <HAL_DMA_Init+0x158>)
 8003bc8:	4013      	ands	r3, r2
 8003bca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685a      	ldr	r2, [r3, #4]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bda:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003be6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	699b      	ldr	r3, [r3, #24]
 8003bec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bf2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a1b      	ldr	r3, [r3, #32]
 8003bf8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bfa:	697a      	ldr	r2, [r7, #20]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c04:	2b04      	cmp	r3, #4
 8003c06:	d107      	bne.n	8003c18 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c10:	4313      	orrs	r3, r2
 8003c12:	697a      	ldr	r2, [r7, #20]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	f023 0307 	bic.w	r3, r3, #7
 8003c2e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3e:	2b04      	cmp	r3, #4
 8003c40:	d117      	bne.n	8003c72 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c46:	697a      	ldr	r2, [r7, #20]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00e      	beq.n	8003c72 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f000 fb01 	bl	800425c <DMA_CheckFifoParam>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d008      	beq.n	8003c72 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2240      	movs	r2, #64	; 0x40
 8003c64:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e016      	b.n	8003ca0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	697a      	ldr	r2, [r7, #20]
 8003c78:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 fab8 	bl	80041f0 <DMA_CalcBaseAndBitshift>
 8003c80:	4603      	mov	r3, r0
 8003c82:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c88:	223f      	movs	r2, #63	; 0x3f
 8003c8a:	409a      	lsls	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3718      	adds	r7, #24
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	f010803f 	.word	0xf010803f

08003cac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b086      	sub	sp, #24
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	607a      	str	r2, [r7, #4]
 8003cb8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d101      	bne.n	8003cd2 <HAL_DMA_Start_IT+0x26>
 8003cce:	2302      	movs	r3, #2
 8003cd0:	e040      	b.n	8003d54 <HAL_DMA_Start_IT+0xa8>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d12f      	bne.n	8003d46 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2202      	movs	r2, #2
 8003cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	68b9      	ldr	r1, [r7, #8]
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f000 fa4a 	bl	8004194 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d04:	223f      	movs	r2, #63	; 0x3f
 8003d06:	409a      	lsls	r2, r3
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f042 0216 	orr.w	r2, r2, #22
 8003d1a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d007      	beq.n	8003d34 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f042 0208 	orr.w	r2, r2, #8
 8003d32:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f042 0201 	orr.w	r2, r2, #1
 8003d42:	601a      	str	r2, [r3, #0]
 8003d44:	e005      	b.n	8003d52 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003d4e:	2302      	movs	r3, #2
 8003d50:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003d52:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3718      	adds	r7, #24
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d68:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003d6a:	f7ff fdc3 	bl	80038f4 <HAL_GetTick>
 8003d6e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d008      	beq.n	8003d8e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2280      	movs	r2, #128	; 0x80
 8003d80:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e052      	b.n	8003e34 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 0216 	bic.w	r2, r2, #22
 8003d9c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	695a      	ldr	r2, [r3, #20]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003dac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d103      	bne.n	8003dbe <HAL_DMA_Abort+0x62>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d007      	beq.n	8003dce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f022 0208 	bic.w	r2, r2, #8
 8003dcc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f022 0201 	bic.w	r2, r2, #1
 8003ddc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003dde:	e013      	b.n	8003e08 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003de0:	f7ff fd88 	bl	80038f4 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	2b05      	cmp	r3, #5
 8003dec:	d90c      	bls.n	8003e08 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2220      	movs	r2, #32
 8003df2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2203      	movs	r2, #3
 8003df8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e015      	b.n	8003e34 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0301 	and.w	r3, r3, #1
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1e4      	bne.n	8003de0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e1a:	223f      	movs	r2, #63	; 0x3f
 8003e1c:	409a      	lsls	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3710      	adds	r7, #16
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d004      	beq.n	8003e5a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2280      	movs	r2, #128	; 0x80
 8003e54:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e00c      	b.n	8003e74 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2205      	movs	r2, #5
 8003e5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f022 0201 	bic.w	r2, r2, #1
 8003e70:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b086      	sub	sp, #24
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e8c:	4b8e      	ldr	r3, [pc, #568]	; (80040c8 <HAL_DMA_IRQHandler+0x248>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a8e      	ldr	r2, [pc, #568]	; (80040cc <HAL_DMA_IRQHandler+0x24c>)
 8003e92:	fba2 2303 	umull	r2, r3, r2, r3
 8003e96:	0a9b      	lsrs	r3, r3, #10
 8003e98:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e9e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eaa:	2208      	movs	r2, #8
 8003eac:	409a      	lsls	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d01a      	beq.n	8003eec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0304 	and.w	r3, r3, #4
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d013      	beq.n	8003eec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f022 0204 	bic.w	r2, r2, #4
 8003ed2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed8:	2208      	movs	r2, #8
 8003eda:	409a      	lsls	r2, r3
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee4:	f043 0201 	orr.w	r2, r3, #1
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	409a      	lsls	r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d012      	beq.n	8003f22 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00b      	beq.n	8003f22 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f0e:	2201      	movs	r2, #1
 8003f10:	409a      	lsls	r2, r3
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f1a:	f043 0202 	orr.w	r2, r3, #2
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f26:	2204      	movs	r2, #4
 8003f28:	409a      	lsls	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d012      	beq.n	8003f58 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00b      	beq.n	8003f58 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f44:	2204      	movs	r2, #4
 8003f46:	409a      	lsls	r2, r3
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f50:	f043 0204 	orr.w	r2, r3, #4
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f5c:	2210      	movs	r2, #16
 8003f5e:	409a      	lsls	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	4013      	ands	r3, r2
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d043      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0308 	and.w	r3, r3, #8
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d03c      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f7a:	2210      	movs	r2, #16
 8003f7c:	409a      	lsls	r2, r3
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d018      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d108      	bne.n	8003fb0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d024      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	4798      	blx	r3
 8003fae:	e01f      	b.n	8003ff0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d01b      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	4798      	blx	r3
 8003fc0:	e016      	b.n	8003ff0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d107      	bne.n	8003fe0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f022 0208 	bic.w	r2, r2, #8
 8003fde:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d003      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff4:	2220      	movs	r2, #32
 8003ff6:	409a      	lsls	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f000 808f 	beq.w	8004120 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0310 	and.w	r3, r3, #16
 800400c:	2b00      	cmp	r3, #0
 800400e:	f000 8087 	beq.w	8004120 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004016:	2220      	movs	r2, #32
 8004018:	409a      	lsls	r2, r3
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b05      	cmp	r3, #5
 8004028:	d136      	bne.n	8004098 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f022 0216 	bic.w	r2, r2, #22
 8004038:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	695a      	ldr	r2, [r3, #20]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004048:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404e:	2b00      	cmp	r3, #0
 8004050:	d103      	bne.n	800405a <HAL_DMA_IRQHandler+0x1da>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004056:	2b00      	cmp	r3, #0
 8004058:	d007      	beq.n	800406a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f022 0208 	bic.w	r2, r2, #8
 8004068:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800406e:	223f      	movs	r2, #63	; 0x3f
 8004070:	409a      	lsls	r2, r3
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800408a:	2b00      	cmp	r3, #0
 800408c:	d07e      	beq.n	800418c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	4798      	blx	r3
        }
        return;
 8004096:	e079      	b.n	800418c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d01d      	beq.n	80040e2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d10d      	bne.n	80040d0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d031      	beq.n	8004120 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	4798      	blx	r3
 80040c4:	e02c      	b.n	8004120 <HAL_DMA_IRQHandler+0x2a0>
 80040c6:	bf00      	nop
 80040c8:	20000028 	.word	0x20000028
 80040cc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d023      	beq.n	8004120 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	4798      	blx	r3
 80040e0:	e01e      	b.n	8004120 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d10f      	bne.n	8004110 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f022 0210 	bic.w	r2, r2, #16
 80040fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004114:	2b00      	cmp	r3, #0
 8004116:	d003      	beq.n	8004120 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004124:	2b00      	cmp	r3, #0
 8004126:	d032      	beq.n	800418e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800412c:	f003 0301 	and.w	r3, r3, #1
 8004130:	2b00      	cmp	r3, #0
 8004132:	d022      	beq.n	800417a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2205      	movs	r2, #5
 8004138:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f022 0201 	bic.w	r2, r2, #1
 800414a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	3301      	adds	r3, #1
 8004150:	60bb      	str	r3, [r7, #8]
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	429a      	cmp	r2, r3
 8004156:	d307      	bcc.n	8004168 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1f2      	bne.n	800414c <HAL_DMA_IRQHandler+0x2cc>
 8004166:	e000      	b.n	800416a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004168:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800417e:	2b00      	cmp	r3, #0
 8004180:	d005      	beq.n	800418e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	4798      	blx	r3
 800418a:	e000      	b.n	800418e <HAL_DMA_IRQHandler+0x30e>
        return;
 800418c:	bf00      	nop
    }
  }
}
 800418e:	3718      	adds	r7, #24
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]
 80041a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80041b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	683a      	ldr	r2, [r7, #0]
 80041b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	2b40      	cmp	r3, #64	; 0x40
 80041c0:	d108      	bne.n	80041d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68ba      	ldr	r2, [r7, #8]
 80041d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80041d2:	e007      	b.n	80041e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	60da      	str	r2, [r3, #12]
}
 80041e4:	bf00      	nop
 80041e6:	3714      	adds	r7, #20
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	3b10      	subs	r3, #16
 8004200:	4a14      	ldr	r2, [pc, #80]	; (8004254 <DMA_CalcBaseAndBitshift+0x64>)
 8004202:	fba2 2303 	umull	r2, r3, r2, r3
 8004206:	091b      	lsrs	r3, r3, #4
 8004208:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800420a:	4a13      	ldr	r2, [pc, #76]	; (8004258 <DMA_CalcBaseAndBitshift+0x68>)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	4413      	add	r3, r2
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	461a      	mov	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2b03      	cmp	r3, #3
 800421c:	d909      	bls.n	8004232 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004226:	f023 0303 	bic.w	r3, r3, #3
 800422a:	1d1a      	adds	r2, r3, #4
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	659a      	str	r2, [r3, #88]	; 0x58
 8004230:	e007      	b.n	8004242 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800423a:	f023 0303 	bic.w	r3, r3, #3
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004246:	4618      	mov	r0, r3
 8004248:	3714      	adds	r7, #20
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	aaaaaaab 	.word	0xaaaaaaab
 8004258:	0800d81c 	.word	0x0800d81c

0800425c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800425c:	b480      	push	{r7}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004264:	2300      	movs	r3, #0
 8004266:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800426c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d11f      	bne.n	80042b6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	2b03      	cmp	r3, #3
 800427a:	d856      	bhi.n	800432a <DMA_CheckFifoParam+0xce>
 800427c:	a201      	add	r2, pc, #4	; (adr r2, 8004284 <DMA_CheckFifoParam+0x28>)
 800427e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004282:	bf00      	nop
 8004284:	08004295 	.word	0x08004295
 8004288:	080042a7 	.word	0x080042a7
 800428c:	08004295 	.word	0x08004295
 8004290:	0800432b 	.word	0x0800432b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004298:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d046      	beq.n	800432e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042a4:	e043      	b.n	800432e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042ae:	d140      	bne.n	8004332 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042b4:	e03d      	b.n	8004332 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	699b      	ldr	r3, [r3, #24]
 80042ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042be:	d121      	bne.n	8004304 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	2b03      	cmp	r3, #3
 80042c4:	d837      	bhi.n	8004336 <DMA_CheckFifoParam+0xda>
 80042c6:	a201      	add	r2, pc, #4	; (adr r2, 80042cc <DMA_CheckFifoParam+0x70>)
 80042c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042cc:	080042dd 	.word	0x080042dd
 80042d0:	080042e3 	.word	0x080042e3
 80042d4:	080042dd 	.word	0x080042dd
 80042d8:	080042f5 	.word	0x080042f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	73fb      	strb	r3, [r7, #15]
      break;
 80042e0:	e030      	b.n	8004344 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d025      	beq.n	800433a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042f2:	e022      	b.n	800433a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042fc:	d11f      	bne.n	800433e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004302:	e01c      	b.n	800433e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	2b02      	cmp	r3, #2
 8004308:	d903      	bls.n	8004312 <DMA_CheckFifoParam+0xb6>
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	2b03      	cmp	r3, #3
 800430e:	d003      	beq.n	8004318 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004310:	e018      	b.n	8004344 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	73fb      	strb	r3, [r7, #15]
      break;
 8004316:	e015      	b.n	8004344 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800431c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00e      	beq.n	8004342 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	73fb      	strb	r3, [r7, #15]
      break;
 8004328:	e00b      	b.n	8004342 <DMA_CheckFifoParam+0xe6>
      break;
 800432a:	bf00      	nop
 800432c:	e00a      	b.n	8004344 <DMA_CheckFifoParam+0xe8>
      break;
 800432e:	bf00      	nop
 8004330:	e008      	b.n	8004344 <DMA_CheckFifoParam+0xe8>
      break;
 8004332:	bf00      	nop
 8004334:	e006      	b.n	8004344 <DMA_CheckFifoParam+0xe8>
      break;
 8004336:	bf00      	nop
 8004338:	e004      	b.n	8004344 <DMA_CheckFifoParam+0xe8>
      break;
 800433a:	bf00      	nop
 800433c:	e002      	b.n	8004344 <DMA_CheckFifoParam+0xe8>
      break;   
 800433e:	bf00      	nop
 8004340:	e000      	b.n	8004344 <DMA_CheckFifoParam+0xe8>
      break;
 8004342:	bf00      	nop
    }
  } 
  
  return status; 
 8004344:	7bfb      	ldrb	r3, [r7, #15]
}
 8004346:	4618      	mov	r0, r3
 8004348:	3714      	adds	r7, #20
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop

08004354 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004354:	b480      	push	{r7}
 8004356:	b089      	sub	sp, #36	; 0x24
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800435e:	2300      	movs	r3, #0
 8004360:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004362:	2300      	movs	r3, #0
 8004364:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004366:	2300      	movs	r3, #0
 8004368:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800436a:	2300      	movs	r3, #0
 800436c:	61fb      	str	r3, [r7, #28]
 800436e:	e165      	b.n	800463c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004370:	2201      	movs	r2, #1
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	fa02 f303 	lsl.w	r3, r2, r3
 8004378:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	4013      	ands	r3, r2
 8004382:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	429a      	cmp	r2, r3
 800438a:	f040 8154 	bne.w	8004636 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f003 0303 	and.w	r3, r3, #3
 8004396:	2b01      	cmp	r3, #1
 8004398:	d005      	beq.n	80043a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d130      	bne.n	8004408 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	005b      	lsls	r3, r3, #1
 80043b0:	2203      	movs	r2, #3
 80043b2:	fa02 f303 	lsl.w	r3, r2, r3
 80043b6:	43db      	mvns	r3, r3
 80043b8:	69ba      	ldr	r2, [r7, #24]
 80043ba:	4013      	ands	r3, r2
 80043bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	68da      	ldr	r2, [r3, #12]
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	005b      	lsls	r3, r3, #1
 80043c6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ca:	69ba      	ldr	r2, [r7, #24]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	69ba      	ldr	r2, [r7, #24]
 80043d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043dc:	2201      	movs	r2, #1
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	fa02 f303 	lsl.w	r3, r2, r3
 80043e4:	43db      	mvns	r3, r3
 80043e6:	69ba      	ldr	r2, [r7, #24]
 80043e8:	4013      	ands	r3, r2
 80043ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	091b      	lsrs	r3, r3, #4
 80043f2:	f003 0201 	and.w	r2, r3, #1
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	fa02 f303 	lsl.w	r3, r2, r3
 80043fc:	69ba      	ldr	r2, [r7, #24]
 80043fe:	4313      	orrs	r3, r2
 8004400:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	69ba      	ldr	r2, [r7, #24]
 8004406:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f003 0303 	and.w	r3, r3, #3
 8004410:	2b03      	cmp	r3, #3
 8004412:	d017      	beq.n	8004444 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	005b      	lsls	r3, r3, #1
 800441e:	2203      	movs	r2, #3
 8004420:	fa02 f303 	lsl.w	r3, r2, r3
 8004424:	43db      	mvns	r3, r3
 8004426:	69ba      	ldr	r2, [r7, #24]
 8004428:	4013      	ands	r3, r2
 800442a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	689a      	ldr	r2, [r3, #8]
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	005b      	lsls	r3, r3, #1
 8004434:	fa02 f303 	lsl.w	r3, r2, r3
 8004438:	69ba      	ldr	r2, [r7, #24]
 800443a:	4313      	orrs	r3, r2
 800443c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	69ba      	ldr	r2, [r7, #24]
 8004442:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f003 0303 	and.w	r3, r3, #3
 800444c:	2b02      	cmp	r3, #2
 800444e:	d123      	bne.n	8004498 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	08da      	lsrs	r2, r3, #3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	3208      	adds	r2, #8
 8004458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800445c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	f003 0307 	and.w	r3, r3, #7
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	220f      	movs	r2, #15
 8004468:	fa02 f303 	lsl.w	r3, r2, r3
 800446c:	43db      	mvns	r3, r3
 800446e:	69ba      	ldr	r2, [r7, #24]
 8004470:	4013      	ands	r3, r2
 8004472:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	691a      	ldr	r2, [r3, #16]
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	f003 0307 	and.w	r3, r3, #7
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	fa02 f303 	lsl.w	r3, r2, r3
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	4313      	orrs	r3, r2
 8004488:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	08da      	lsrs	r2, r3, #3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	3208      	adds	r2, #8
 8004492:	69b9      	ldr	r1, [r7, #24]
 8004494:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	005b      	lsls	r3, r3, #1
 80044a2:	2203      	movs	r2, #3
 80044a4:	fa02 f303 	lsl.w	r3, r2, r3
 80044a8:	43db      	mvns	r3, r3
 80044aa:	69ba      	ldr	r2, [r7, #24]
 80044ac:	4013      	ands	r3, r2
 80044ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f003 0203 	and.w	r2, r3, #3
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	005b      	lsls	r3, r3, #1
 80044bc:	fa02 f303 	lsl.w	r3, r2, r3
 80044c0:	69ba      	ldr	r2, [r7, #24]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	69ba      	ldr	r2, [r7, #24]
 80044ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f000 80ae 	beq.w	8004636 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044da:	2300      	movs	r3, #0
 80044dc:	60fb      	str	r3, [r7, #12]
 80044de:	4b5d      	ldr	r3, [pc, #372]	; (8004654 <HAL_GPIO_Init+0x300>)
 80044e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e2:	4a5c      	ldr	r2, [pc, #368]	; (8004654 <HAL_GPIO_Init+0x300>)
 80044e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044e8:	6453      	str	r3, [r2, #68]	; 0x44
 80044ea:	4b5a      	ldr	r3, [pc, #360]	; (8004654 <HAL_GPIO_Init+0x300>)
 80044ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044f2:	60fb      	str	r3, [r7, #12]
 80044f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044f6:	4a58      	ldr	r2, [pc, #352]	; (8004658 <HAL_GPIO_Init+0x304>)
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	089b      	lsrs	r3, r3, #2
 80044fc:	3302      	adds	r3, #2
 80044fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004502:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	f003 0303 	and.w	r3, r3, #3
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	220f      	movs	r2, #15
 800450e:	fa02 f303 	lsl.w	r3, r2, r3
 8004512:	43db      	mvns	r3, r3
 8004514:	69ba      	ldr	r2, [r7, #24]
 8004516:	4013      	ands	r3, r2
 8004518:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a4f      	ldr	r2, [pc, #316]	; (800465c <HAL_GPIO_Init+0x308>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d025      	beq.n	800456e <HAL_GPIO_Init+0x21a>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a4e      	ldr	r2, [pc, #312]	; (8004660 <HAL_GPIO_Init+0x30c>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d01f      	beq.n	800456a <HAL_GPIO_Init+0x216>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a4d      	ldr	r2, [pc, #308]	; (8004664 <HAL_GPIO_Init+0x310>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d019      	beq.n	8004566 <HAL_GPIO_Init+0x212>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a4c      	ldr	r2, [pc, #304]	; (8004668 <HAL_GPIO_Init+0x314>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d013      	beq.n	8004562 <HAL_GPIO_Init+0x20e>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a4b      	ldr	r2, [pc, #300]	; (800466c <HAL_GPIO_Init+0x318>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d00d      	beq.n	800455e <HAL_GPIO_Init+0x20a>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a4a      	ldr	r2, [pc, #296]	; (8004670 <HAL_GPIO_Init+0x31c>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d007      	beq.n	800455a <HAL_GPIO_Init+0x206>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a49      	ldr	r2, [pc, #292]	; (8004674 <HAL_GPIO_Init+0x320>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d101      	bne.n	8004556 <HAL_GPIO_Init+0x202>
 8004552:	2306      	movs	r3, #6
 8004554:	e00c      	b.n	8004570 <HAL_GPIO_Init+0x21c>
 8004556:	2307      	movs	r3, #7
 8004558:	e00a      	b.n	8004570 <HAL_GPIO_Init+0x21c>
 800455a:	2305      	movs	r3, #5
 800455c:	e008      	b.n	8004570 <HAL_GPIO_Init+0x21c>
 800455e:	2304      	movs	r3, #4
 8004560:	e006      	b.n	8004570 <HAL_GPIO_Init+0x21c>
 8004562:	2303      	movs	r3, #3
 8004564:	e004      	b.n	8004570 <HAL_GPIO_Init+0x21c>
 8004566:	2302      	movs	r3, #2
 8004568:	e002      	b.n	8004570 <HAL_GPIO_Init+0x21c>
 800456a:	2301      	movs	r3, #1
 800456c:	e000      	b.n	8004570 <HAL_GPIO_Init+0x21c>
 800456e:	2300      	movs	r3, #0
 8004570:	69fa      	ldr	r2, [r7, #28]
 8004572:	f002 0203 	and.w	r2, r2, #3
 8004576:	0092      	lsls	r2, r2, #2
 8004578:	4093      	lsls	r3, r2
 800457a:	69ba      	ldr	r2, [r7, #24]
 800457c:	4313      	orrs	r3, r2
 800457e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004580:	4935      	ldr	r1, [pc, #212]	; (8004658 <HAL_GPIO_Init+0x304>)
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	089b      	lsrs	r3, r3, #2
 8004586:	3302      	adds	r3, #2
 8004588:	69ba      	ldr	r2, [r7, #24]
 800458a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800458e:	4b3a      	ldr	r3, [pc, #232]	; (8004678 <HAL_GPIO_Init+0x324>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	43db      	mvns	r3, r3
 8004598:	69ba      	ldr	r2, [r7, #24]
 800459a:	4013      	ands	r3, r2
 800459c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d003      	beq.n	80045b2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80045aa:	69ba      	ldr	r2, [r7, #24]
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80045b2:	4a31      	ldr	r2, [pc, #196]	; (8004678 <HAL_GPIO_Init+0x324>)
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80045b8:	4b2f      	ldr	r3, [pc, #188]	; (8004678 <HAL_GPIO_Init+0x324>)
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	43db      	mvns	r3, r3
 80045c2:	69ba      	ldr	r2, [r7, #24]
 80045c4:	4013      	ands	r3, r2
 80045c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d003      	beq.n	80045dc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	4313      	orrs	r3, r2
 80045da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80045dc:	4a26      	ldr	r2, [pc, #152]	; (8004678 <HAL_GPIO_Init+0x324>)
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80045e2:	4b25      	ldr	r3, [pc, #148]	; (8004678 <HAL_GPIO_Init+0x324>)
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	43db      	mvns	r3, r3
 80045ec:	69ba      	ldr	r2, [r7, #24]
 80045ee:	4013      	ands	r3, r2
 80045f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d003      	beq.n	8004606 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80045fe:	69ba      	ldr	r2, [r7, #24]
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	4313      	orrs	r3, r2
 8004604:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004606:	4a1c      	ldr	r2, [pc, #112]	; (8004678 <HAL_GPIO_Init+0x324>)
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800460c:	4b1a      	ldr	r3, [pc, #104]	; (8004678 <HAL_GPIO_Init+0x324>)
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	43db      	mvns	r3, r3
 8004616:	69ba      	ldr	r2, [r7, #24]
 8004618:	4013      	ands	r3, r2
 800461a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d003      	beq.n	8004630 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004628:	69ba      	ldr	r2, [r7, #24]
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	4313      	orrs	r3, r2
 800462e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004630:	4a11      	ldr	r2, [pc, #68]	; (8004678 <HAL_GPIO_Init+0x324>)
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	3301      	adds	r3, #1
 800463a:	61fb      	str	r3, [r7, #28]
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	2b0f      	cmp	r3, #15
 8004640:	f67f ae96 	bls.w	8004370 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004644:	bf00      	nop
 8004646:	bf00      	nop
 8004648:	3724      	adds	r7, #36	; 0x24
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	40023800 	.word	0x40023800
 8004658:	40013800 	.word	0x40013800
 800465c:	40020000 	.word	0x40020000
 8004660:	40020400 	.word	0x40020400
 8004664:	40020800 	.word	0x40020800
 8004668:	40020c00 	.word	0x40020c00
 800466c:	40021000 	.word	0x40021000
 8004670:	40021400 	.word	0x40021400
 8004674:	40021800 	.word	0x40021800
 8004678:	40013c00 	.word	0x40013c00

0800467c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800467c:	b480      	push	{r7}
 800467e:	b085      	sub	sp, #20
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	460b      	mov	r3, r1
 8004686:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	691a      	ldr	r2, [r3, #16]
 800468c:	887b      	ldrh	r3, [r7, #2]
 800468e:	4013      	ands	r3, r2
 8004690:	2b00      	cmp	r3, #0
 8004692:	d002      	beq.n	800469a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004694:	2301      	movs	r3, #1
 8004696:	73fb      	strb	r3, [r7, #15]
 8004698:	e001      	b.n	800469e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800469a:	2300      	movs	r3, #0
 800469c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800469e:	7bfb      	ldrb	r3, [r7, #15]
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3714      	adds	r7, #20
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	460b      	mov	r3, r1
 80046b6:	807b      	strh	r3, [r7, #2]
 80046b8:	4613      	mov	r3, r2
 80046ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80046bc:	787b      	ldrb	r3, [r7, #1]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d003      	beq.n	80046ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046c2:	887a      	ldrh	r2, [r7, #2]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80046c8:	e003      	b.n	80046d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80046ca:	887b      	ldrh	r3, [r7, #2]
 80046cc:	041a      	lsls	r2, r3, #16
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	619a      	str	r2, [r3, #24]
}
 80046d2:	bf00      	nop
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr

080046de <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80046de:	b480      	push	{r7}
 80046e0:	b085      	sub	sp, #20
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
 80046e6:	460b      	mov	r3, r1
 80046e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80046f0:	887a      	ldrh	r2, [r7, #2]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	4013      	ands	r3, r2
 80046f6:	041a      	lsls	r2, r3, #16
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	43d9      	mvns	r1, r3
 80046fc:	887b      	ldrh	r3, [r7, #2]
 80046fe:	400b      	ands	r3, r1
 8004700:	431a      	orrs	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	619a      	str	r2, [r3, #24]
}
 8004706:	bf00      	nop
 8004708:	3714      	adds	r7, #20
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
	...

08004714 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d101      	bne.n	8004726 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e12b      	b.n	800497e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800472c:	b2db      	uxtb	r3, r3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d106      	bne.n	8004740 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f7fe f9c6 	bl	8002acc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2224      	movs	r2, #36	; 0x24
 8004744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f022 0201 	bic.w	r2, r2, #1
 8004756:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004766:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004776:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004778:	f000 fa02 	bl	8004b80 <HAL_RCC_GetPCLK1Freq>
 800477c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	4a81      	ldr	r2, [pc, #516]	; (8004988 <HAL_I2C_Init+0x274>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d807      	bhi.n	8004798 <HAL_I2C_Init+0x84>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	4a80      	ldr	r2, [pc, #512]	; (800498c <HAL_I2C_Init+0x278>)
 800478c:	4293      	cmp	r3, r2
 800478e:	bf94      	ite	ls
 8004790:	2301      	movls	r3, #1
 8004792:	2300      	movhi	r3, #0
 8004794:	b2db      	uxtb	r3, r3
 8004796:	e006      	b.n	80047a6 <HAL_I2C_Init+0x92>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	4a7d      	ldr	r2, [pc, #500]	; (8004990 <HAL_I2C_Init+0x27c>)
 800479c:	4293      	cmp	r3, r2
 800479e:	bf94      	ite	ls
 80047a0:	2301      	movls	r3, #1
 80047a2:	2300      	movhi	r3, #0
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e0e7      	b.n	800497e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	4a78      	ldr	r2, [pc, #480]	; (8004994 <HAL_I2C_Init+0x280>)
 80047b2:	fba2 2303 	umull	r2, r3, r2, r3
 80047b6:	0c9b      	lsrs	r3, r3, #18
 80047b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68ba      	ldr	r2, [r7, #8]
 80047ca:	430a      	orrs	r2, r1
 80047cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	6a1b      	ldr	r3, [r3, #32]
 80047d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	4a6a      	ldr	r2, [pc, #424]	; (8004988 <HAL_I2C_Init+0x274>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d802      	bhi.n	80047e8 <HAL_I2C_Init+0xd4>
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	3301      	adds	r3, #1
 80047e6:	e009      	b.n	80047fc <HAL_I2C_Init+0xe8>
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80047ee:	fb02 f303 	mul.w	r3, r2, r3
 80047f2:	4a69      	ldr	r2, [pc, #420]	; (8004998 <HAL_I2C_Init+0x284>)
 80047f4:	fba2 2303 	umull	r2, r3, r2, r3
 80047f8:	099b      	lsrs	r3, r3, #6
 80047fa:	3301      	adds	r3, #1
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	6812      	ldr	r2, [r2, #0]
 8004800:	430b      	orrs	r3, r1
 8004802:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	69db      	ldr	r3, [r3, #28]
 800480a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800480e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	495c      	ldr	r1, [pc, #368]	; (8004988 <HAL_I2C_Init+0x274>)
 8004818:	428b      	cmp	r3, r1
 800481a:	d819      	bhi.n	8004850 <HAL_I2C_Init+0x13c>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	1e59      	subs	r1, r3, #1
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	005b      	lsls	r3, r3, #1
 8004826:	fbb1 f3f3 	udiv	r3, r1, r3
 800482a:	1c59      	adds	r1, r3, #1
 800482c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004830:	400b      	ands	r3, r1
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00a      	beq.n	800484c <HAL_I2C_Init+0x138>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	1e59      	subs	r1, r3, #1
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	005b      	lsls	r3, r3, #1
 8004840:	fbb1 f3f3 	udiv	r3, r1, r3
 8004844:	3301      	adds	r3, #1
 8004846:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800484a:	e051      	b.n	80048f0 <HAL_I2C_Init+0x1dc>
 800484c:	2304      	movs	r3, #4
 800484e:	e04f      	b.n	80048f0 <HAL_I2C_Init+0x1dc>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d111      	bne.n	800487c <HAL_I2C_Init+0x168>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	1e58      	subs	r0, r3, #1
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6859      	ldr	r1, [r3, #4]
 8004860:	460b      	mov	r3, r1
 8004862:	005b      	lsls	r3, r3, #1
 8004864:	440b      	add	r3, r1
 8004866:	fbb0 f3f3 	udiv	r3, r0, r3
 800486a:	3301      	adds	r3, #1
 800486c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004870:	2b00      	cmp	r3, #0
 8004872:	bf0c      	ite	eq
 8004874:	2301      	moveq	r3, #1
 8004876:	2300      	movne	r3, #0
 8004878:	b2db      	uxtb	r3, r3
 800487a:	e012      	b.n	80048a2 <HAL_I2C_Init+0x18e>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	1e58      	subs	r0, r3, #1
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6859      	ldr	r1, [r3, #4]
 8004884:	460b      	mov	r3, r1
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	440b      	add	r3, r1
 800488a:	0099      	lsls	r1, r3, #2
 800488c:	440b      	add	r3, r1
 800488e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004892:	3301      	adds	r3, #1
 8004894:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004898:	2b00      	cmp	r3, #0
 800489a:	bf0c      	ite	eq
 800489c:	2301      	moveq	r3, #1
 800489e:	2300      	movne	r3, #0
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d001      	beq.n	80048aa <HAL_I2C_Init+0x196>
 80048a6:	2301      	movs	r3, #1
 80048a8:	e022      	b.n	80048f0 <HAL_I2C_Init+0x1dc>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d10e      	bne.n	80048d0 <HAL_I2C_Init+0x1bc>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	1e58      	subs	r0, r3, #1
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6859      	ldr	r1, [r3, #4]
 80048ba:	460b      	mov	r3, r1
 80048bc:	005b      	lsls	r3, r3, #1
 80048be:	440b      	add	r3, r1
 80048c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80048c4:	3301      	adds	r3, #1
 80048c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048ce:	e00f      	b.n	80048f0 <HAL_I2C_Init+0x1dc>
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	1e58      	subs	r0, r3, #1
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6859      	ldr	r1, [r3, #4]
 80048d8:	460b      	mov	r3, r1
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	440b      	add	r3, r1
 80048de:	0099      	lsls	r1, r3, #2
 80048e0:	440b      	add	r3, r1
 80048e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80048e6:	3301      	adds	r3, #1
 80048e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048f0:	6879      	ldr	r1, [r7, #4]
 80048f2:	6809      	ldr	r1, [r1, #0]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	69da      	ldr	r2, [r3, #28]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	431a      	orrs	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	430a      	orrs	r2, r1
 8004912:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800491e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	6911      	ldr	r1, [r2, #16]
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	68d2      	ldr	r2, [r2, #12]
 800492a:	4311      	orrs	r1, r2
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	6812      	ldr	r2, [r2, #0]
 8004930:	430b      	orrs	r3, r1
 8004932:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	695a      	ldr	r2, [r3, #20]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	431a      	orrs	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	430a      	orrs	r2, r1
 800494e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f042 0201 	orr.w	r2, r2, #1
 800495e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2220      	movs	r2, #32
 800496a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3710      	adds	r7, #16
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	000186a0 	.word	0x000186a0
 800498c:	001e847f 	.word	0x001e847f
 8004990:	003d08ff 	.word	0x003d08ff
 8004994:	431bde83 	.word	0x431bde83
 8004998:	10624dd3 	.word	0x10624dd3

0800499c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d101      	bne.n	80049b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e0cc      	b.n	8004b4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049b0:	4b68      	ldr	r3, [pc, #416]	; (8004b54 <HAL_RCC_ClockConfig+0x1b8>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 030f 	and.w	r3, r3, #15
 80049b8:	683a      	ldr	r2, [r7, #0]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d90c      	bls.n	80049d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049be:	4b65      	ldr	r3, [pc, #404]	; (8004b54 <HAL_RCC_ClockConfig+0x1b8>)
 80049c0:	683a      	ldr	r2, [r7, #0]
 80049c2:	b2d2      	uxtb	r2, r2
 80049c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049c6:	4b63      	ldr	r3, [pc, #396]	; (8004b54 <HAL_RCC_ClockConfig+0x1b8>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 030f 	and.w	r3, r3, #15
 80049ce:	683a      	ldr	r2, [r7, #0]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d001      	beq.n	80049d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e0b8      	b.n	8004b4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0302 	and.w	r3, r3, #2
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d020      	beq.n	8004a26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0304 	and.w	r3, r3, #4
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d005      	beq.n	80049fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049f0:	4b59      	ldr	r3, [pc, #356]	; (8004b58 <HAL_RCC_ClockConfig+0x1bc>)
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	4a58      	ldr	r2, [pc, #352]	; (8004b58 <HAL_RCC_ClockConfig+0x1bc>)
 80049f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80049fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 0308 	and.w	r3, r3, #8
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d005      	beq.n	8004a14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a08:	4b53      	ldr	r3, [pc, #332]	; (8004b58 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	4a52      	ldr	r2, [pc, #328]	; (8004b58 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a14:	4b50      	ldr	r3, [pc, #320]	; (8004b58 <HAL_RCC_ClockConfig+0x1bc>)
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	494d      	ldr	r1, [pc, #308]	; (8004b58 <HAL_RCC_ClockConfig+0x1bc>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d044      	beq.n	8004abc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d107      	bne.n	8004a4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a3a:	4b47      	ldr	r3, [pc, #284]	; (8004b58 <HAL_RCC_ClockConfig+0x1bc>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d119      	bne.n	8004a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e07f      	b.n	8004b4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d003      	beq.n	8004a5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a56:	2b03      	cmp	r3, #3
 8004a58:	d107      	bne.n	8004a6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a5a:	4b3f      	ldr	r3, [pc, #252]	; (8004b58 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d109      	bne.n	8004a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e06f      	b.n	8004b4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a6a:	4b3b      	ldr	r3, [pc, #236]	; (8004b58 <HAL_RCC_ClockConfig+0x1bc>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d101      	bne.n	8004a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e067      	b.n	8004b4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a7a:	4b37      	ldr	r3, [pc, #220]	; (8004b58 <HAL_RCC_ClockConfig+0x1bc>)
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f023 0203 	bic.w	r2, r3, #3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	4934      	ldr	r1, [pc, #208]	; (8004b58 <HAL_RCC_ClockConfig+0x1bc>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a8c:	f7fe ff32 	bl	80038f4 <HAL_GetTick>
 8004a90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a92:	e00a      	b.n	8004aaa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a94:	f7fe ff2e 	bl	80038f4 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d901      	bls.n	8004aaa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e04f      	b.n	8004b4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aaa:	4b2b      	ldr	r3, [pc, #172]	; (8004b58 <HAL_RCC_ClockConfig+0x1bc>)
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f003 020c 	and.w	r2, r3, #12
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d1eb      	bne.n	8004a94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004abc:	4b25      	ldr	r3, [pc, #148]	; (8004b54 <HAL_RCC_ClockConfig+0x1b8>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 030f 	and.w	r3, r3, #15
 8004ac4:	683a      	ldr	r2, [r7, #0]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d20c      	bcs.n	8004ae4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aca:	4b22      	ldr	r3, [pc, #136]	; (8004b54 <HAL_RCC_ClockConfig+0x1b8>)
 8004acc:	683a      	ldr	r2, [r7, #0]
 8004ace:	b2d2      	uxtb	r2, r2
 8004ad0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ad2:	4b20      	ldr	r3, [pc, #128]	; (8004b54 <HAL_RCC_ClockConfig+0x1b8>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 030f 	and.w	r3, r3, #15
 8004ada:	683a      	ldr	r2, [r7, #0]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d001      	beq.n	8004ae4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e032      	b.n	8004b4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0304 	and.w	r3, r3, #4
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d008      	beq.n	8004b02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004af0:	4b19      	ldr	r3, [pc, #100]	; (8004b58 <HAL_RCC_ClockConfig+0x1bc>)
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	4916      	ldr	r1, [pc, #88]	; (8004b58 <HAL_RCC_ClockConfig+0x1bc>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0308 	and.w	r3, r3, #8
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d009      	beq.n	8004b22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b0e:	4b12      	ldr	r3, [pc, #72]	; (8004b58 <HAL_RCC_ClockConfig+0x1bc>)
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	00db      	lsls	r3, r3, #3
 8004b1c:	490e      	ldr	r1, [pc, #56]	; (8004b58 <HAL_RCC_ClockConfig+0x1bc>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b22:	f000 f887 	bl	8004c34 <HAL_RCC_GetSysClockFreq>
 8004b26:	4602      	mov	r2, r0
 8004b28:	4b0b      	ldr	r3, [pc, #44]	; (8004b58 <HAL_RCC_ClockConfig+0x1bc>)
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	091b      	lsrs	r3, r3, #4
 8004b2e:	f003 030f 	and.w	r3, r3, #15
 8004b32:	490a      	ldr	r1, [pc, #40]	; (8004b5c <HAL_RCC_ClockConfig+0x1c0>)
 8004b34:	5ccb      	ldrb	r3, [r1, r3]
 8004b36:	fa22 f303 	lsr.w	r3, r2, r3
 8004b3a:	4a09      	ldr	r2, [pc, #36]	; (8004b60 <HAL_RCC_ClockConfig+0x1c4>)
 8004b3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b3e:	4b09      	ldr	r3, [pc, #36]	; (8004b64 <HAL_RCC_ClockConfig+0x1c8>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7fe f9a8 	bl	8002e98 <HAL_InitTick>

  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3710      	adds	r7, #16
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	40023c00 	.word	0x40023c00
 8004b58:	40023800 	.word	0x40023800
 8004b5c:	0800d804 	.word	0x0800d804
 8004b60:	20000028 	.word	0x20000028
 8004b64:	2000002c 	.word	0x2000002c

08004b68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b6c:	4b03      	ldr	r3, [pc, #12]	; (8004b7c <HAL_RCC_GetHCLKFreq+0x14>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	20000028 	.word	0x20000028

08004b80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b84:	f7ff fff0 	bl	8004b68 <HAL_RCC_GetHCLKFreq>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	4b05      	ldr	r3, [pc, #20]	; (8004ba0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	0a9b      	lsrs	r3, r3, #10
 8004b90:	f003 0307 	and.w	r3, r3, #7
 8004b94:	4903      	ldr	r1, [pc, #12]	; (8004ba4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b96:	5ccb      	ldrb	r3, [r1, r3]
 8004b98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	40023800 	.word	0x40023800
 8004ba4:	0800d814 	.word	0x0800d814

08004ba8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004bac:	f7ff ffdc 	bl	8004b68 <HAL_RCC_GetHCLKFreq>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	4b05      	ldr	r3, [pc, #20]	; (8004bc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	0b5b      	lsrs	r3, r3, #13
 8004bb8:	f003 0307 	and.w	r3, r3, #7
 8004bbc:	4903      	ldr	r1, [pc, #12]	; (8004bcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bbe:	5ccb      	ldrb	r3, [r1, r3]
 8004bc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	40023800 	.word	0x40023800
 8004bcc:	0800d814 	.word	0x0800d814

08004bd0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	220f      	movs	r2, #15
 8004bde:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004be0:	4b12      	ldr	r3, [pc, #72]	; (8004c2c <HAL_RCC_GetClockConfig+0x5c>)
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f003 0203 	and.w	r2, r3, #3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004bec:	4b0f      	ldr	r3, [pc, #60]	; (8004c2c <HAL_RCC_GetClockConfig+0x5c>)
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004bf8:	4b0c      	ldr	r3, [pc, #48]	; (8004c2c <HAL_RCC_GetClockConfig+0x5c>)
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004c04:	4b09      	ldr	r3, [pc, #36]	; (8004c2c <HAL_RCC_GetClockConfig+0x5c>)
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	08db      	lsrs	r3, r3, #3
 8004c0a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004c12:	4b07      	ldr	r3, [pc, #28]	; (8004c30 <HAL_RCC_GetClockConfig+0x60>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 020f 	and.w	r2, r3, #15
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	601a      	str	r2, [r3, #0]
}
 8004c1e:	bf00      	nop
 8004c20:	370c      	adds	r7, #12
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	40023800 	.word	0x40023800
 8004c30:	40023c00 	.word	0x40023c00

08004c34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c38:	b0a6      	sub	sp, #152	; 0x98
 8004c3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8004c42:	2300      	movs	r3, #0
 8004c44:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8004c54:	2300      	movs	r3, #0
 8004c56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c5a:	4bc8      	ldr	r3, [pc, #800]	; (8004f7c <HAL_RCC_GetSysClockFreq+0x348>)
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f003 030c 	and.w	r3, r3, #12
 8004c62:	2b0c      	cmp	r3, #12
 8004c64:	f200 817e 	bhi.w	8004f64 <HAL_RCC_GetSysClockFreq+0x330>
 8004c68:	a201      	add	r2, pc, #4	; (adr r2, 8004c70 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c6e:	bf00      	nop
 8004c70:	08004ca5 	.word	0x08004ca5
 8004c74:	08004f65 	.word	0x08004f65
 8004c78:	08004f65 	.word	0x08004f65
 8004c7c:	08004f65 	.word	0x08004f65
 8004c80:	08004cad 	.word	0x08004cad
 8004c84:	08004f65 	.word	0x08004f65
 8004c88:	08004f65 	.word	0x08004f65
 8004c8c:	08004f65 	.word	0x08004f65
 8004c90:	08004cb5 	.word	0x08004cb5
 8004c94:	08004f65 	.word	0x08004f65
 8004c98:	08004f65 	.word	0x08004f65
 8004c9c:	08004f65 	.word	0x08004f65
 8004ca0:	08004e1f 	.word	0x08004e1f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ca4:	4bb6      	ldr	r3, [pc, #728]	; (8004f80 <HAL_RCC_GetSysClockFreq+0x34c>)
 8004ca6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8004caa:	e15f      	b.n	8004f6c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004cac:	4bb5      	ldr	r3, [pc, #724]	; (8004f84 <HAL_RCC_GetSysClockFreq+0x350>)
 8004cae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004cb2:	e15b      	b.n	8004f6c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cb4:	4bb1      	ldr	r3, [pc, #708]	; (8004f7c <HAL_RCC_GetSysClockFreq+0x348>)
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cbc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cc0:	4bae      	ldr	r3, [pc, #696]	; (8004f7c <HAL_RCC_GetSysClockFreq+0x348>)
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d031      	beq.n	8004d30 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ccc:	4bab      	ldr	r3, [pc, #684]	; (8004f7c <HAL_RCC_GetSysClockFreq+0x348>)
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	099b      	lsrs	r3, r3, #6
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004cd6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004cd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004cda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cde:	663b      	str	r3, [r7, #96]	; 0x60
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	667b      	str	r3, [r7, #100]	; 0x64
 8004ce4:	4ba7      	ldr	r3, [pc, #668]	; (8004f84 <HAL_RCC_GetSysClockFreq+0x350>)
 8004ce6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004cea:	462a      	mov	r2, r5
 8004cec:	fb03 f202 	mul.w	r2, r3, r2
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	4621      	mov	r1, r4
 8004cf4:	fb01 f303 	mul.w	r3, r1, r3
 8004cf8:	4413      	add	r3, r2
 8004cfa:	4aa2      	ldr	r2, [pc, #648]	; (8004f84 <HAL_RCC_GetSysClockFreq+0x350>)
 8004cfc:	4621      	mov	r1, r4
 8004cfe:	fba1 1202 	umull	r1, r2, r1, r2
 8004d02:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004d04:	460a      	mov	r2, r1
 8004d06:	67ba      	str	r2, [r7, #120]	; 0x78
 8004d08:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004d0a:	4413      	add	r3, r2
 8004d0c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004d0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d12:	2200      	movs	r2, #0
 8004d14:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d16:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004d18:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004d1c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8004d20:	f7fb face 	bl	80002c0 <__aeabi_uldivmod>
 8004d24:	4602      	mov	r2, r0
 8004d26:	460b      	mov	r3, r1
 8004d28:	4613      	mov	r3, r2
 8004d2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004d2e:	e064      	b.n	8004dfa <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d30:	4b92      	ldr	r3, [pc, #584]	; (8004f7c <HAL_RCC_GetSysClockFreq+0x348>)
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	099b      	lsrs	r3, r3, #6
 8004d36:	2200      	movs	r2, #0
 8004d38:	653b      	str	r3, [r7, #80]	; 0x50
 8004d3a:	657a      	str	r2, [r7, #84]	; 0x54
 8004d3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d42:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d44:	2300      	movs	r3, #0
 8004d46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d48:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8004d4c:	4622      	mov	r2, r4
 8004d4e:	462b      	mov	r3, r5
 8004d50:	f04f 0000 	mov.w	r0, #0
 8004d54:	f04f 0100 	mov.w	r1, #0
 8004d58:	0159      	lsls	r1, r3, #5
 8004d5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d5e:	0150      	lsls	r0, r2, #5
 8004d60:	4602      	mov	r2, r0
 8004d62:	460b      	mov	r3, r1
 8004d64:	4621      	mov	r1, r4
 8004d66:	1a51      	subs	r1, r2, r1
 8004d68:	6139      	str	r1, [r7, #16]
 8004d6a:	4629      	mov	r1, r5
 8004d6c:	eb63 0301 	sbc.w	r3, r3, r1
 8004d70:	617b      	str	r3, [r7, #20]
 8004d72:	f04f 0200 	mov.w	r2, #0
 8004d76:	f04f 0300 	mov.w	r3, #0
 8004d7a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d7e:	4659      	mov	r1, fp
 8004d80:	018b      	lsls	r3, r1, #6
 8004d82:	4651      	mov	r1, sl
 8004d84:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d88:	4651      	mov	r1, sl
 8004d8a:	018a      	lsls	r2, r1, #6
 8004d8c:	4651      	mov	r1, sl
 8004d8e:	ebb2 0801 	subs.w	r8, r2, r1
 8004d92:	4659      	mov	r1, fp
 8004d94:	eb63 0901 	sbc.w	r9, r3, r1
 8004d98:	f04f 0200 	mov.w	r2, #0
 8004d9c:	f04f 0300 	mov.w	r3, #0
 8004da0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004da4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004da8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dac:	4690      	mov	r8, r2
 8004dae:	4699      	mov	r9, r3
 8004db0:	4623      	mov	r3, r4
 8004db2:	eb18 0303 	adds.w	r3, r8, r3
 8004db6:	60bb      	str	r3, [r7, #8]
 8004db8:	462b      	mov	r3, r5
 8004dba:	eb49 0303 	adc.w	r3, r9, r3
 8004dbe:	60fb      	str	r3, [r7, #12]
 8004dc0:	f04f 0200 	mov.w	r2, #0
 8004dc4:	f04f 0300 	mov.w	r3, #0
 8004dc8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004dcc:	4629      	mov	r1, r5
 8004dce:	028b      	lsls	r3, r1, #10
 8004dd0:	4621      	mov	r1, r4
 8004dd2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004dd6:	4621      	mov	r1, r4
 8004dd8:	028a      	lsls	r2, r1, #10
 8004dda:	4610      	mov	r0, r2
 8004ddc:	4619      	mov	r1, r3
 8004dde:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004de2:	2200      	movs	r2, #0
 8004de4:	643b      	str	r3, [r7, #64]	; 0x40
 8004de6:	647a      	str	r2, [r7, #68]	; 0x44
 8004de8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004dec:	f7fb fa68 	bl	80002c0 <__aeabi_uldivmod>
 8004df0:	4602      	mov	r2, r0
 8004df2:	460b      	mov	r3, r1
 8004df4:	4613      	mov	r3, r2
 8004df6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004dfa:	4b60      	ldr	r3, [pc, #384]	; (8004f7c <HAL_RCC_GetSysClockFreq+0x348>)
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	0c1b      	lsrs	r3, r3, #16
 8004e00:	f003 0303 	and.w	r3, r3, #3
 8004e04:	3301      	adds	r3, #1
 8004e06:	005b      	lsls	r3, r3, #1
 8004e08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8004e0c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004e10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e18:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004e1c:	e0a6      	b.n	8004f6c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e1e:	4b57      	ldr	r3, [pc, #348]	; (8004f7c <HAL_RCC_GetSysClockFreq+0x348>)
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e2a:	4b54      	ldr	r3, [pc, #336]	; (8004f7c <HAL_RCC_GetSysClockFreq+0x348>)
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d02a      	beq.n	8004e8c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e36:	4b51      	ldr	r3, [pc, #324]	; (8004f7c <HAL_RCC_GetSysClockFreq+0x348>)
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	099b      	lsrs	r3, r3, #6
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e40:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e44:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004e48:	2100      	movs	r1, #0
 8004e4a:	4b4e      	ldr	r3, [pc, #312]	; (8004f84 <HAL_RCC_GetSysClockFreq+0x350>)
 8004e4c:	fb03 f201 	mul.w	r2, r3, r1
 8004e50:	2300      	movs	r3, #0
 8004e52:	fb00 f303 	mul.w	r3, r0, r3
 8004e56:	4413      	add	r3, r2
 8004e58:	4a4a      	ldr	r2, [pc, #296]	; (8004f84 <HAL_RCC_GetSysClockFreq+0x350>)
 8004e5a:	fba0 1202 	umull	r1, r2, r0, r2
 8004e5e:	677a      	str	r2, [r7, #116]	; 0x74
 8004e60:	460a      	mov	r2, r1
 8004e62:	673a      	str	r2, [r7, #112]	; 0x70
 8004e64:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004e66:	4413      	add	r3, r2
 8004e68:	677b      	str	r3, [r7, #116]	; 0x74
 8004e6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e6e:	2200      	movs	r2, #0
 8004e70:	633b      	str	r3, [r7, #48]	; 0x30
 8004e72:	637a      	str	r2, [r7, #52]	; 0x34
 8004e74:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004e78:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8004e7c:	f7fb fa20 	bl	80002c0 <__aeabi_uldivmod>
 8004e80:	4602      	mov	r2, r0
 8004e82:	460b      	mov	r3, r1
 8004e84:	4613      	mov	r3, r2
 8004e86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004e8a:	e05b      	b.n	8004f44 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e8c:	4b3b      	ldr	r3, [pc, #236]	; (8004f7c <HAL_RCC_GetSysClockFreq+0x348>)
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	099b      	lsrs	r3, r3, #6
 8004e92:	2200      	movs	r2, #0
 8004e94:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e9e:	623b      	str	r3, [r7, #32]
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ea4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ea8:	4642      	mov	r2, r8
 8004eaa:	464b      	mov	r3, r9
 8004eac:	f04f 0000 	mov.w	r0, #0
 8004eb0:	f04f 0100 	mov.w	r1, #0
 8004eb4:	0159      	lsls	r1, r3, #5
 8004eb6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004eba:	0150      	lsls	r0, r2, #5
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	4641      	mov	r1, r8
 8004ec2:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ec6:	4649      	mov	r1, r9
 8004ec8:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ecc:	f04f 0200 	mov.w	r2, #0
 8004ed0:	f04f 0300 	mov.w	r3, #0
 8004ed4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ed8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004edc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ee0:	ebb2 040a 	subs.w	r4, r2, sl
 8004ee4:	eb63 050b 	sbc.w	r5, r3, fp
 8004ee8:	f04f 0200 	mov.w	r2, #0
 8004eec:	f04f 0300 	mov.w	r3, #0
 8004ef0:	00eb      	lsls	r3, r5, #3
 8004ef2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ef6:	00e2      	lsls	r2, r4, #3
 8004ef8:	4614      	mov	r4, r2
 8004efa:	461d      	mov	r5, r3
 8004efc:	4643      	mov	r3, r8
 8004efe:	18e3      	adds	r3, r4, r3
 8004f00:	603b      	str	r3, [r7, #0]
 8004f02:	464b      	mov	r3, r9
 8004f04:	eb45 0303 	adc.w	r3, r5, r3
 8004f08:	607b      	str	r3, [r7, #4]
 8004f0a:	f04f 0200 	mov.w	r2, #0
 8004f0e:	f04f 0300 	mov.w	r3, #0
 8004f12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f16:	4629      	mov	r1, r5
 8004f18:	028b      	lsls	r3, r1, #10
 8004f1a:	4621      	mov	r1, r4
 8004f1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f20:	4621      	mov	r1, r4
 8004f22:	028a      	lsls	r2, r1, #10
 8004f24:	4610      	mov	r0, r2
 8004f26:	4619      	mov	r1, r3
 8004f28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	61bb      	str	r3, [r7, #24]
 8004f30:	61fa      	str	r2, [r7, #28]
 8004f32:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f36:	f7fb f9c3 	bl	80002c0 <__aeabi_uldivmod>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	460b      	mov	r3, r1
 8004f3e:	4613      	mov	r3, r2
 8004f40:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004f44:	4b0d      	ldr	r3, [pc, #52]	; (8004f7c <HAL_RCC_GetSysClockFreq+0x348>)
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	0f1b      	lsrs	r3, r3, #28
 8004f4a:	f003 0307 	and.w	r3, r3, #7
 8004f4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8004f52:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004f56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004f62:	e003      	b.n	8004f6c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f64:	4b06      	ldr	r3, [pc, #24]	; (8004f80 <HAL_RCC_GetSysClockFreq+0x34c>)
 8004f66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004f6a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3798      	adds	r7, #152	; 0x98
 8004f74:	46bd      	mov	sp, r7
 8004f76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f7a:	bf00      	nop
 8004f7c:	40023800 	.word	0x40023800
 8004f80:	00f42400 	.word	0x00f42400
 8004f84:	017d7840 	.word	0x017d7840

08004f88 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b086      	sub	sp, #24
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d101      	bne.n	8004f9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e28d      	b.n	80054b6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0301 	and.w	r3, r3, #1
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	f000 8083 	beq.w	80050ae <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004fa8:	4b94      	ldr	r3, [pc, #592]	; (80051fc <HAL_RCC_OscConfig+0x274>)
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	f003 030c 	and.w	r3, r3, #12
 8004fb0:	2b04      	cmp	r3, #4
 8004fb2:	d019      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004fb4:	4b91      	ldr	r3, [pc, #580]	; (80051fc <HAL_RCC_OscConfig+0x274>)
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004fbc:	2b08      	cmp	r3, #8
 8004fbe:	d106      	bne.n	8004fce <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004fc0:	4b8e      	ldr	r3, [pc, #568]	; (80051fc <HAL_RCC_OscConfig+0x274>)
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fcc:	d00c      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fce:	4b8b      	ldr	r3, [pc, #556]	; (80051fc <HAL_RCC_OscConfig+0x274>)
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004fd6:	2b0c      	cmp	r3, #12
 8004fd8:	d112      	bne.n	8005000 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fda:	4b88      	ldr	r3, [pc, #544]	; (80051fc <HAL_RCC_OscConfig+0x274>)
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fe2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fe6:	d10b      	bne.n	8005000 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fe8:	4b84      	ldr	r3, [pc, #528]	; (80051fc <HAL_RCC_OscConfig+0x274>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d05b      	beq.n	80050ac <HAL_RCC_OscConfig+0x124>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d157      	bne.n	80050ac <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e25a      	b.n	80054b6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005008:	d106      	bne.n	8005018 <HAL_RCC_OscConfig+0x90>
 800500a:	4b7c      	ldr	r3, [pc, #496]	; (80051fc <HAL_RCC_OscConfig+0x274>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a7b      	ldr	r2, [pc, #492]	; (80051fc <HAL_RCC_OscConfig+0x274>)
 8005010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005014:	6013      	str	r3, [r2, #0]
 8005016:	e01d      	b.n	8005054 <HAL_RCC_OscConfig+0xcc>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005020:	d10c      	bne.n	800503c <HAL_RCC_OscConfig+0xb4>
 8005022:	4b76      	ldr	r3, [pc, #472]	; (80051fc <HAL_RCC_OscConfig+0x274>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a75      	ldr	r2, [pc, #468]	; (80051fc <HAL_RCC_OscConfig+0x274>)
 8005028:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800502c:	6013      	str	r3, [r2, #0]
 800502e:	4b73      	ldr	r3, [pc, #460]	; (80051fc <HAL_RCC_OscConfig+0x274>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a72      	ldr	r2, [pc, #456]	; (80051fc <HAL_RCC_OscConfig+0x274>)
 8005034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005038:	6013      	str	r3, [r2, #0]
 800503a:	e00b      	b.n	8005054 <HAL_RCC_OscConfig+0xcc>
 800503c:	4b6f      	ldr	r3, [pc, #444]	; (80051fc <HAL_RCC_OscConfig+0x274>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a6e      	ldr	r2, [pc, #440]	; (80051fc <HAL_RCC_OscConfig+0x274>)
 8005042:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005046:	6013      	str	r3, [r2, #0]
 8005048:	4b6c      	ldr	r3, [pc, #432]	; (80051fc <HAL_RCC_OscConfig+0x274>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a6b      	ldr	r2, [pc, #428]	; (80051fc <HAL_RCC_OscConfig+0x274>)
 800504e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005052:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d013      	beq.n	8005084 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800505c:	f7fe fc4a 	bl	80038f4 <HAL_GetTick>
 8005060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005062:	e008      	b.n	8005076 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005064:	f7fe fc46 	bl	80038f4 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	2b64      	cmp	r3, #100	; 0x64
 8005070:	d901      	bls.n	8005076 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e21f      	b.n	80054b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005076:	4b61      	ldr	r3, [pc, #388]	; (80051fc <HAL_RCC_OscConfig+0x274>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d0f0      	beq.n	8005064 <HAL_RCC_OscConfig+0xdc>
 8005082:	e014      	b.n	80050ae <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005084:	f7fe fc36 	bl	80038f4 <HAL_GetTick>
 8005088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800508a:	e008      	b.n	800509e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800508c:	f7fe fc32 	bl	80038f4 <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	2b64      	cmp	r3, #100	; 0x64
 8005098:	d901      	bls.n	800509e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e20b      	b.n	80054b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800509e:	4b57      	ldr	r3, [pc, #348]	; (80051fc <HAL_RCC_OscConfig+0x274>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1f0      	bne.n	800508c <HAL_RCC_OscConfig+0x104>
 80050aa:	e000      	b.n	80050ae <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0302 	and.w	r3, r3, #2
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d06f      	beq.n	800519a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80050ba:	4b50      	ldr	r3, [pc, #320]	; (80051fc <HAL_RCC_OscConfig+0x274>)
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f003 030c 	and.w	r3, r3, #12
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d017      	beq.n	80050f6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80050c6:	4b4d      	ldr	r3, [pc, #308]	; (80051fc <HAL_RCC_OscConfig+0x274>)
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80050ce:	2b08      	cmp	r3, #8
 80050d0:	d105      	bne.n	80050de <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80050d2:	4b4a      	ldr	r3, [pc, #296]	; (80051fc <HAL_RCC_OscConfig+0x274>)
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00b      	beq.n	80050f6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050de:	4b47      	ldr	r3, [pc, #284]	; (80051fc <HAL_RCC_OscConfig+0x274>)
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80050e6:	2b0c      	cmp	r3, #12
 80050e8:	d11c      	bne.n	8005124 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050ea:	4b44      	ldr	r3, [pc, #272]	; (80051fc <HAL_RCC_OscConfig+0x274>)
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d116      	bne.n	8005124 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050f6:	4b41      	ldr	r3, [pc, #260]	; (80051fc <HAL_RCC_OscConfig+0x274>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 0302 	and.w	r3, r3, #2
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d005      	beq.n	800510e <HAL_RCC_OscConfig+0x186>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	2b01      	cmp	r3, #1
 8005108:	d001      	beq.n	800510e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e1d3      	b.n	80054b6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800510e:	4b3b      	ldr	r3, [pc, #236]	; (80051fc <HAL_RCC_OscConfig+0x274>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	00db      	lsls	r3, r3, #3
 800511c:	4937      	ldr	r1, [pc, #220]	; (80051fc <HAL_RCC_OscConfig+0x274>)
 800511e:	4313      	orrs	r3, r2
 8005120:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005122:	e03a      	b.n	800519a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d020      	beq.n	800516e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800512c:	4b34      	ldr	r3, [pc, #208]	; (8005200 <HAL_RCC_OscConfig+0x278>)
 800512e:	2201      	movs	r2, #1
 8005130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005132:	f7fe fbdf 	bl	80038f4 <HAL_GetTick>
 8005136:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005138:	e008      	b.n	800514c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800513a:	f7fe fbdb 	bl	80038f4 <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	2b02      	cmp	r3, #2
 8005146:	d901      	bls.n	800514c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e1b4      	b.n	80054b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800514c:	4b2b      	ldr	r3, [pc, #172]	; (80051fc <HAL_RCC_OscConfig+0x274>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0302 	and.w	r3, r3, #2
 8005154:	2b00      	cmp	r3, #0
 8005156:	d0f0      	beq.n	800513a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005158:	4b28      	ldr	r3, [pc, #160]	; (80051fc <HAL_RCC_OscConfig+0x274>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	00db      	lsls	r3, r3, #3
 8005166:	4925      	ldr	r1, [pc, #148]	; (80051fc <HAL_RCC_OscConfig+0x274>)
 8005168:	4313      	orrs	r3, r2
 800516a:	600b      	str	r3, [r1, #0]
 800516c:	e015      	b.n	800519a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800516e:	4b24      	ldr	r3, [pc, #144]	; (8005200 <HAL_RCC_OscConfig+0x278>)
 8005170:	2200      	movs	r2, #0
 8005172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005174:	f7fe fbbe 	bl	80038f4 <HAL_GetTick>
 8005178:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800517a:	e008      	b.n	800518e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800517c:	f7fe fbba 	bl	80038f4 <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	2b02      	cmp	r3, #2
 8005188:	d901      	bls.n	800518e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e193      	b.n	80054b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800518e:	4b1b      	ldr	r3, [pc, #108]	; (80051fc <HAL_RCC_OscConfig+0x274>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0302 	and.w	r3, r3, #2
 8005196:	2b00      	cmp	r3, #0
 8005198:	d1f0      	bne.n	800517c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0308 	and.w	r3, r3, #8
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d036      	beq.n	8005214 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d016      	beq.n	80051dc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051ae:	4b15      	ldr	r3, [pc, #84]	; (8005204 <HAL_RCC_OscConfig+0x27c>)
 80051b0:	2201      	movs	r2, #1
 80051b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051b4:	f7fe fb9e 	bl	80038f4 <HAL_GetTick>
 80051b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051ba:	e008      	b.n	80051ce <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051bc:	f7fe fb9a 	bl	80038f4 <HAL_GetTick>
 80051c0:	4602      	mov	r2, r0
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	d901      	bls.n	80051ce <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e173      	b.n	80054b6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051ce:	4b0b      	ldr	r3, [pc, #44]	; (80051fc <HAL_RCC_OscConfig+0x274>)
 80051d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051d2:	f003 0302 	and.w	r3, r3, #2
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d0f0      	beq.n	80051bc <HAL_RCC_OscConfig+0x234>
 80051da:	e01b      	b.n	8005214 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051dc:	4b09      	ldr	r3, [pc, #36]	; (8005204 <HAL_RCC_OscConfig+0x27c>)
 80051de:	2200      	movs	r2, #0
 80051e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051e2:	f7fe fb87 	bl	80038f4 <HAL_GetTick>
 80051e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051e8:	e00e      	b.n	8005208 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051ea:	f7fe fb83 	bl	80038f4 <HAL_GetTick>
 80051ee:	4602      	mov	r2, r0
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	1ad3      	subs	r3, r2, r3
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d907      	bls.n	8005208 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80051f8:	2303      	movs	r3, #3
 80051fa:	e15c      	b.n	80054b6 <HAL_RCC_OscConfig+0x52e>
 80051fc:	40023800 	.word	0x40023800
 8005200:	42470000 	.word	0x42470000
 8005204:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005208:	4b8a      	ldr	r3, [pc, #552]	; (8005434 <HAL_RCC_OscConfig+0x4ac>)
 800520a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800520c:	f003 0302 	and.w	r3, r3, #2
 8005210:	2b00      	cmp	r3, #0
 8005212:	d1ea      	bne.n	80051ea <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0304 	and.w	r3, r3, #4
 800521c:	2b00      	cmp	r3, #0
 800521e:	f000 8097 	beq.w	8005350 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005222:	2300      	movs	r3, #0
 8005224:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005226:	4b83      	ldr	r3, [pc, #524]	; (8005434 <HAL_RCC_OscConfig+0x4ac>)
 8005228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d10f      	bne.n	8005252 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005232:	2300      	movs	r3, #0
 8005234:	60bb      	str	r3, [r7, #8]
 8005236:	4b7f      	ldr	r3, [pc, #508]	; (8005434 <HAL_RCC_OscConfig+0x4ac>)
 8005238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523a:	4a7e      	ldr	r2, [pc, #504]	; (8005434 <HAL_RCC_OscConfig+0x4ac>)
 800523c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005240:	6413      	str	r3, [r2, #64]	; 0x40
 8005242:	4b7c      	ldr	r3, [pc, #496]	; (8005434 <HAL_RCC_OscConfig+0x4ac>)
 8005244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800524a:	60bb      	str	r3, [r7, #8]
 800524c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800524e:	2301      	movs	r3, #1
 8005250:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005252:	4b79      	ldr	r3, [pc, #484]	; (8005438 <HAL_RCC_OscConfig+0x4b0>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800525a:	2b00      	cmp	r3, #0
 800525c:	d118      	bne.n	8005290 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800525e:	4b76      	ldr	r3, [pc, #472]	; (8005438 <HAL_RCC_OscConfig+0x4b0>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a75      	ldr	r2, [pc, #468]	; (8005438 <HAL_RCC_OscConfig+0x4b0>)
 8005264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005268:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800526a:	f7fe fb43 	bl	80038f4 <HAL_GetTick>
 800526e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005270:	e008      	b.n	8005284 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005272:	f7fe fb3f 	bl	80038f4 <HAL_GetTick>
 8005276:	4602      	mov	r2, r0
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	2b02      	cmp	r3, #2
 800527e:	d901      	bls.n	8005284 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	e118      	b.n	80054b6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005284:	4b6c      	ldr	r3, [pc, #432]	; (8005438 <HAL_RCC_OscConfig+0x4b0>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800528c:	2b00      	cmp	r3, #0
 800528e:	d0f0      	beq.n	8005272 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	2b01      	cmp	r3, #1
 8005296:	d106      	bne.n	80052a6 <HAL_RCC_OscConfig+0x31e>
 8005298:	4b66      	ldr	r3, [pc, #408]	; (8005434 <HAL_RCC_OscConfig+0x4ac>)
 800529a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800529c:	4a65      	ldr	r2, [pc, #404]	; (8005434 <HAL_RCC_OscConfig+0x4ac>)
 800529e:	f043 0301 	orr.w	r3, r3, #1
 80052a2:	6713      	str	r3, [r2, #112]	; 0x70
 80052a4:	e01c      	b.n	80052e0 <HAL_RCC_OscConfig+0x358>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	2b05      	cmp	r3, #5
 80052ac:	d10c      	bne.n	80052c8 <HAL_RCC_OscConfig+0x340>
 80052ae:	4b61      	ldr	r3, [pc, #388]	; (8005434 <HAL_RCC_OscConfig+0x4ac>)
 80052b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052b2:	4a60      	ldr	r2, [pc, #384]	; (8005434 <HAL_RCC_OscConfig+0x4ac>)
 80052b4:	f043 0304 	orr.w	r3, r3, #4
 80052b8:	6713      	str	r3, [r2, #112]	; 0x70
 80052ba:	4b5e      	ldr	r3, [pc, #376]	; (8005434 <HAL_RCC_OscConfig+0x4ac>)
 80052bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052be:	4a5d      	ldr	r2, [pc, #372]	; (8005434 <HAL_RCC_OscConfig+0x4ac>)
 80052c0:	f043 0301 	orr.w	r3, r3, #1
 80052c4:	6713      	str	r3, [r2, #112]	; 0x70
 80052c6:	e00b      	b.n	80052e0 <HAL_RCC_OscConfig+0x358>
 80052c8:	4b5a      	ldr	r3, [pc, #360]	; (8005434 <HAL_RCC_OscConfig+0x4ac>)
 80052ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052cc:	4a59      	ldr	r2, [pc, #356]	; (8005434 <HAL_RCC_OscConfig+0x4ac>)
 80052ce:	f023 0301 	bic.w	r3, r3, #1
 80052d2:	6713      	str	r3, [r2, #112]	; 0x70
 80052d4:	4b57      	ldr	r3, [pc, #348]	; (8005434 <HAL_RCC_OscConfig+0x4ac>)
 80052d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052d8:	4a56      	ldr	r2, [pc, #344]	; (8005434 <HAL_RCC_OscConfig+0x4ac>)
 80052da:	f023 0304 	bic.w	r3, r3, #4
 80052de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d015      	beq.n	8005314 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052e8:	f7fe fb04 	bl	80038f4 <HAL_GetTick>
 80052ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052ee:	e00a      	b.n	8005306 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052f0:	f7fe fb00 	bl	80038f4 <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80052fe:	4293      	cmp	r3, r2
 8005300:	d901      	bls.n	8005306 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e0d7      	b.n	80054b6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005306:	4b4b      	ldr	r3, [pc, #300]	; (8005434 <HAL_RCC_OscConfig+0x4ac>)
 8005308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800530a:	f003 0302 	and.w	r3, r3, #2
 800530e:	2b00      	cmp	r3, #0
 8005310:	d0ee      	beq.n	80052f0 <HAL_RCC_OscConfig+0x368>
 8005312:	e014      	b.n	800533e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005314:	f7fe faee 	bl	80038f4 <HAL_GetTick>
 8005318:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800531a:	e00a      	b.n	8005332 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800531c:	f7fe faea 	bl	80038f4 <HAL_GetTick>
 8005320:	4602      	mov	r2, r0
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	f241 3288 	movw	r2, #5000	; 0x1388
 800532a:	4293      	cmp	r3, r2
 800532c:	d901      	bls.n	8005332 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e0c1      	b.n	80054b6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005332:	4b40      	ldr	r3, [pc, #256]	; (8005434 <HAL_RCC_OscConfig+0x4ac>)
 8005334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005336:	f003 0302 	and.w	r3, r3, #2
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1ee      	bne.n	800531c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800533e:	7dfb      	ldrb	r3, [r7, #23]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d105      	bne.n	8005350 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005344:	4b3b      	ldr	r3, [pc, #236]	; (8005434 <HAL_RCC_OscConfig+0x4ac>)
 8005346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005348:	4a3a      	ldr	r2, [pc, #232]	; (8005434 <HAL_RCC_OscConfig+0x4ac>)
 800534a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800534e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	699b      	ldr	r3, [r3, #24]
 8005354:	2b00      	cmp	r3, #0
 8005356:	f000 80ad 	beq.w	80054b4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800535a:	4b36      	ldr	r3, [pc, #216]	; (8005434 <HAL_RCC_OscConfig+0x4ac>)
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	f003 030c 	and.w	r3, r3, #12
 8005362:	2b08      	cmp	r3, #8
 8005364:	d060      	beq.n	8005428 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	2b02      	cmp	r3, #2
 800536c:	d145      	bne.n	80053fa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800536e:	4b33      	ldr	r3, [pc, #204]	; (800543c <HAL_RCC_OscConfig+0x4b4>)
 8005370:	2200      	movs	r2, #0
 8005372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005374:	f7fe fabe 	bl	80038f4 <HAL_GetTick>
 8005378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800537a:	e008      	b.n	800538e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800537c:	f7fe faba 	bl	80038f4 <HAL_GetTick>
 8005380:	4602      	mov	r2, r0
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	2b02      	cmp	r3, #2
 8005388:	d901      	bls.n	800538e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	e093      	b.n	80054b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800538e:	4b29      	ldr	r3, [pc, #164]	; (8005434 <HAL_RCC_OscConfig+0x4ac>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1f0      	bne.n	800537c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	69da      	ldr	r2, [r3, #28]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a1b      	ldr	r3, [r3, #32]
 80053a2:	431a      	orrs	r2, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a8:	019b      	lsls	r3, r3, #6
 80053aa:	431a      	orrs	r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b0:	085b      	lsrs	r3, r3, #1
 80053b2:	3b01      	subs	r3, #1
 80053b4:	041b      	lsls	r3, r3, #16
 80053b6:	431a      	orrs	r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053bc:	061b      	lsls	r3, r3, #24
 80053be:	431a      	orrs	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c4:	071b      	lsls	r3, r3, #28
 80053c6:	491b      	ldr	r1, [pc, #108]	; (8005434 <HAL_RCC_OscConfig+0x4ac>)
 80053c8:	4313      	orrs	r3, r2
 80053ca:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053cc:	4b1b      	ldr	r3, [pc, #108]	; (800543c <HAL_RCC_OscConfig+0x4b4>)
 80053ce:	2201      	movs	r2, #1
 80053d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d2:	f7fe fa8f 	bl	80038f4 <HAL_GetTick>
 80053d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053d8:	e008      	b.n	80053ec <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053da:	f7fe fa8b 	bl	80038f4 <HAL_GetTick>
 80053de:	4602      	mov	r2, r0
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d901      	bls.n	80053ec <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80053e8:	2303      	movs	r3, #3
 80053ea:	e064      	b.n	80054b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053ec:	4b11      	ldr	r3, [pc, #68]	; (8005434 <HAL_RCC_OscConfig+0x4ac>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d0f0      	beq.n	80053da <HAL_RCC_OscConfig+0x452>
 80053f8:	e05c      	b.n	80054b4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053fa:	4b10      	ldr	r3, [pc, #64]	; (800543c <HAL_RCC_OscConfig+0x4b4>)
 80053fc:	2200      	movs	r2, #0
 80053fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005400:	f7fe fa78 	bl	80038f4 <HAL_GetTick>
 8005404:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005406:	e008      	b.n	800541a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005408:	f7fe fa74 	bl	80038f4 <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	2b02      	cmp	r3, #2
 8005414:	d901      	bls.n	800541a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e04d      	b.n	80054b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800541a:	4b06      	ldr	r3, [pc, #24]	; (8005434 <HAL_RCC_OscConfig+0x4ac>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d1f0      	bne.n	8005408 <HAL_RCC_OscConfig+0x480>
 8005426:	e045      	b.n	80054b4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	699b      	ldr	r3, [r3, #24]
 800542c:	2b01      	cmp	r3, #1
 800542e:	d107      	bne.n	8005440 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e040      	b.n	80054b6 <HAL_RCC_OscConfig+0x52e>
 8005434:	40023800 	.word	0x40023800
 8005438:	40007000 	.word	0x40007000
 800543c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005440:	4b1f      	ldr	r3, [pc, #124]	; (80054c0 <HAL_RCC_OscConfig+0x538>)
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	699b      	ldr	r3, [r3, #24]
 800544a:	2b01      	cmp	r3, #1
 800544c:	d030      	beq.n	80054b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005458:	429a      	cmp	r2, r3
 800545a:	d129      	bne.n	80054b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005466:	429a      	cmp	r2, r3
 8005468:	d122      	bne.n	80054b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005470:	4013      	ands	r3, r2
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005476:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005478:	4293      	cmp	r3, r2
 800547a:	d119      	bne.n	80054b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005486:	085b      	lsrs	r3, r3, #1
 8005488:	3b01      	subs	r3, #1
 800548a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800548c:	429a      	cmp	r2, r3
 800548e:	d10f      	bne.n	80054b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800549a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800549c:	429a      	cmp	r2, r3
 800549e:	d107      	bne.n	80054b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054aa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d001      	beq.n	80054b4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e000      	b.n	80054b6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3718      	adds	r7, #24
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	40023800 	.word	0x40023800

080054c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d101      	bne.n	80054d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e07b      	b.n	80055ce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d108      	bne.n	80054f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054e6:	d009      	beq.n	80054fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	61da      	str	r2, [r3, #28]
 80054ee:	e005      	b.n	80054fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005508:	b2db      	uxtb	r3, r3
 800550a:	2b00      	cmp	r3, #0
 800550c:	d106      	bne.n	800551c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f7fd fb20 	bl	8002b5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2202      	movs	r2, #2
 8005520:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005532:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005544:	431a      	orrs	r2, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800554e:	431a      	orrs	r2, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	f003 0302 	and.w	r3, r3, #2
 8005558:	431a      	orrs	r2, r3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	f003 0301 	and.w	r3, r3, #1
 8005562:	431a      	orrs	r2, r3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800556c:	431a      	orrs	r2, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	69db      	ldr	r3, [r3, #28]
 8005572:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005576:	431a      	orrs	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a1b      	ldr	r3, [r3, #32]
 800557c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005580:	ea42 0103 	orr.w	r1, r2, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005588:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	430a      	orrs	r2, r1
 8005592:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	699b      	ldr	r3, [r3, #24]
 8005598:	0c1b      	lsrs	r3, r3, #16
 800559a:	f003 0104 	and.w	r1, r3, #4
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a2:	f003 0210 	and.w	r2, r3, #16
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	430a      	orrs	r2, r1
 80055ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	69da      	ldr	r2, [r3, #28]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3708      	adds	r7, #8
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055d6:	b580      	push	{r7, lr}
 80055d8:	b088      	sub	sp, #32
 80055da:	af00      	add	r7, sp, #0
 80055dc:	60f8      	str	r0, [r7, #12]
 80055de:	60b9      	str	r1, [r7, #8]
 80055e0:	603b      	str	r3, [r7, #0]
 80055e2:	4613      	mov	r3, r2
 80055e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80055e6:	2300      	movs	r3, #0
 80055e8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d101      	bne.n	80055f8 <HAL_SPI_Transmit+0x22>
 80055f4:	2302      	movs	r3, #2
 80055f6:	e126      	b.n	8005846 <HAL_SPI_Transmit+0x270>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005600:	f7fe f978 	bl	80038f4 <HAL_GetTick>
 8005604:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005606:	88fb      	ldrh	r3, [r7, #6]
 8005608:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005610:	b2db      	uxtb	r3, r3
 8005612:	2b01      	cmp	r3, #1
 8005614:	d002      	beq.n	800561c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005616:	2302      	movs	r3, #2
 8005618:	77fb      	strb	r3, [r7, #31]
    goto error;
 800561a:	e10b      	b.n	8005834 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d002      	beq.n	8005628 <HAL_SPI_Transmit+0x52>
 8005622:	88fb      	ldrh	r3, [r7, #6]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d102      	bne.n	800562e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800562c:	e102      	b.n	8005834 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2203      	movs	r2, #3
 8005632:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2200      	movs	r2, #0
 800563a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	68ba      	ldr	r2, [r7, #8]
 8005640:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	88fa      	ldrh	r2, [r7, #6]
 8005646:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	88fa      	ldrh	r2, [r7, #6]
 800564c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2200      	movs	r2, #0
 8005658:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2200      	movs	r2, #0
 800565e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005674:	d10f      	bne.n	8005696 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005684:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005694:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056a0:	2b40      	cmp	r3, #64	; 0x40
 80056a2:	d007      	beq.n	80056b4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056bc:	d14b      	bne.n	8005756 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d002      	beq.n	80056cc <HAL_SPI_Transmit+0xf6>
 80056c6:	8afb      	ldrh	r3, [r7, #22]
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d13e      	bne.n	800574a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d0:	881a      	ldrh	r2, [r3, #0]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056dc:	1c9a      	adds	r2, r3, #2
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	3b01      	subs	r3, #1
 80056ea:	b29a      	uxth	r2, r3
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80056f0:	e02b      	b.n	800574a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	f003 0302 	and.w	r3, r3, #2
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d112      	bne.n	8005726 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005704:	881a      	ldrh	r2, [r3, #0]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005710:	1c9a      	adds	r2, r3, #2
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800571a:	b29b      	uxth	r3, r3
 800571c:	3b01      	subs	r3, #1
 800571e:	b29a      	uxth	r2, r3
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	86da      	strh	r2, [r3, #54]	; 0x36
 8005724:	e011      	b.n	800574a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005726:	f7fe f8e5 	bl	80038f4 <HAL_GetTick>
 800572a:	4602      	mov	r2, r0
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	683a      	ldr	r2, [r7, #0]
 8005732:	429a      	cmp	r2, r3
 8005734:	d803      	bhi.n	800573e <HAL_SPI_Transmit+0x168>
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800573c:	d102      	bne.n	8005744 <HAL_SPI_Transmit+0x16e>
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d102      	bne.n	800574a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005748:	e074      	b.n	8005834 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800574e:	b29b      	uxth	r3, r3
 8005750:	2b00      	cmp	r3, #0
 8005752:	d1ce      	bne.n	80056f2 <HAL_SPI_Transmit+0x11c>
 8005754:	e04c      	b.n	80057f0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d002      	beq.n	8005764 <HAL_SPI_Transmit+0x18e>
 800575e:	8afb      	ldrh	r3, [r7, #22]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d140      	bne.n	80057e6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	330c      	adds	r3, #12
 800576e:	7812      	ldrb	r2, [r2, #0]
 8005770:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005776:	1c5a      	adds	r2, r3, #1
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005780:	b29b      	uxth	r3, r3
 8005782:	3b01      	subs	r3, #1
 8005784:	b29a      	uxth	r2, r3
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800578a:	e02c      	b.n	80057e6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	f003 0302 	and.w	r3, r3, #2
 8005796:	2b02      	cmp	r3, #2
 8005798:	d113      	bne.n	80057c2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	330c      	adds	r3, #12
 80057a4:	7812      	ldrb	r2, [r2, #0]
 80057a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ac:	1c5a      	adds	r2, r3, #1
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	3b01      	subs	r3, #1
 80057ba:	b29a      	uxth	r2, r3
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	86da      	strh	r2, [r3, #54]	; 0x36
 80057c0:	e011      	b.n	80057e6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057c2:	f7fe f897 	bl	80038f4 <HAL_GetTick>
 80057c6:	4602      	mov	r2, r0
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	683a      	ldr	r2, [r7, #0]
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d803      	bhi.n	80057da <HAL_SPI_Transmit+0x204>
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057d8:	d102      	bne.n	80057e0 <HAL_SPI_Transmit+0x20a>
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d102      	bne.n	80057e6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80057e0:	2303      	movs	r3, #3
 80057e2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80057e4:	e026      	b.n	8005834 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d1cd      	bne.n	800578c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057f0:	69ba      	ldr	r2, [r7, #24]
 80057f2:	6839      	ldr	r1, [r7, #0]
 80057f4:	68f8      	ldr	r0, [r7, #12]
 80057f6:	f000 fa55 	bl	8005ca4 <SPI_EndRxTxTransaction>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d002      	beq.n	8005806 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2220      	movs	r2, #32
 8005804:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d10a      	bne.n	8005824 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800580e:	2300      	movs	r3, #0
 8005810:	613b      	str	r3, [r7, #16]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	613b      	str	r3, [r7, #16]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	613b      	str	r3, [r7, #16]
 8005822:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005828:	2b00      	cmp	r3, #0
 800582a:	d002      	beq.n	8005832 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	77fb      	strb	r3, [r7, #31]
 8005830:	e000      	b.n	8005834 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005832:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2200      	movs	r2, #0
 8005840:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005844:	7ffb      	ldrb	r3, [r7, #31]
}
 8005846:	4618      	mov	r0, r3
 8005848:	3720      	adds	r7, #32
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}

0800584e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800584e:	b580      	push	{r7, lr}
 8005850:	b08c      	sub	sp, #48	; 0x30
 8005852:	af00      	add	r7, sp, #0
 8005854:	60f8      	str	r0, [r7, #12]
 8005856:	60b9      	str	r1, [r7, #8]
 8005858:	607a      	str	r2, [r7, #4]
 800585a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800585c:	2301      	movs	r3, #1
 800585e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005860:	2300      	movs	r3, #0
 8005862:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800586c:	2b01      	cmp	r3, #1
 800586e:	d101      	bne.n	8005874 <HAL_SPI_TransmitReceive+0x26>
 8005870:	2302      	movs	r3, #2
 8005872:	e18a      	b.n	8005b8a <HAL_SPI_TransmitReceive+0x33c>
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800587c:	f7fe f83a 	bl	80038f4 <HAL_GetTick>
 8005880:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005888:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005892:	887b      	ldrh	r3, [r7, #2]
 8005894:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005896:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800589a:	2b01      	cmp	r3, #1
 800589c:	d00f      	beq.n	80058be <HAL_SPI_TransmitReceive+0x70>
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058a4:	d107      	bne.n	80058b6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d103      	bne.n	80058b6 <HAL_SPI_TransmitReceive+0x68>
 80058ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058b2:	2b04      	cmp	r3, #4
 80058b4:	d003      	beq.n	80058be <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80058b6:	2302      	movs	r3, #2
 80058b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80058bc:	e15b      	b.n	8005b76 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d005      	beq.n	80058d0 <HAL_SPI_TransmitReceive+0x82>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d002      	beq.n	80058d0 <HAL_SPI_TransmitReceive+0x82>
 80058ca:	887b      	ldrh	r3, [r7, #2]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d103      	bne.n	80058d8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80058d6:	e14e      	b.n	8005b76 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	2b04      	cmp	r3, #4
 80058e2:	d003      	beq.n	80058ec <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2205      	movs	r2, #5
 80058e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2200      	movs	r2, #0
 80058f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	887a      	ldrh	r2, [r7, #2]
 80058fc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	887a      	ldrh	r2, [r7, #2]
 8005902:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	68ba      	ldr	r2, [r7, #8]
 8005908:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	887a      	ldrh	r2, [r7, #2]
 800590e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	887a      	ldrh	r2, [r7, #2]
 8005914:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2200      	movs	r2, #0
 800591a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2200      	movs	r2, #0
 8005920:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800592c:	2b40      	cmp	r3, #64	; 0x40
 800592e:	d007      	beq.n	8005940 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800593e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005948:	d178      	bne.n	8005a3c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d002      	beq.n	8005958 <HAL_SPI_TransmitReceive+0x10a>
 8005952:	8b7b      	ldrh	r3, [r7, #26]
 8005954:	2b01      	cmp	r3, #1
 8005956:	d166      	bne.n	8005a26 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595c:	881a      	ldrh	r2, [r3, #0]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005968:	1c9a      	adds	r2, r3, #2
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005972:	b29b      	uxth	r3, r3
 8005974:	3b01      	subs	r3, #1
 8005976:	b29a      	uxth	r2, r3
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800597c:	e053      	b.n	8005a26 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	f003 0302 	and.w	r3, r3, #2
 8005988:	2b02      	cmp	r3, #2
 800598a:	d11b      	bne.n	80059c4 <HAL_SPI_TransmitReceive+0x176>
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005990:	b29b      	uxth	r3, r3
 8005992:	2b00      	cmp	r3, #0
 8005994:	d016      	beq.n	80059c4 <HAL_SPI_TransmitReceive+0x176>
 8005996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005998:	2b01      	cmp	r3, #1
 800599a:	d113      	bne.n	80059c4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a0:	881a      	ldrh	r2, [r3, #0]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ac:	1c9a      	adds	r2, r3, #2
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	3b01      	subs	r3, #1
 80059ba:	b29a      	uxth	r2, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80059c0:	2300      	movs	r3, #0
 80059c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	f003 0301 	and.w	r3, r3, #1
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d119      	bne.n	8005a06 <HAL_SPI_TransmitReceive+0x1b8>
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d014      	beq.n	8005a06 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68da      	ldr	r2, [r3, #12]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e6:	b292      	uxth	r2, r2
 80059e8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ee:	1c9a      	adds	r2, r3, #2
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	3b01      	subs	r3, #1
 80059fc:	b29a      	uxth	r2, r3
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a02:	2301      	movs	r3, #1
 8005a04:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005a06:	f7fd ff75 	bl	80038f4 <HAL_GetTick>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0e:	1ad3      	subs	r3, r2, r3
 8005a10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d807      	bhi.n	8005a26 <HAL_SPI_TransmitReceive+0x1d8>
 8005a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a1c:	d003      	beq.n	8005a26 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005a24:	e0a7      	b.n	8005b76 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1a6      	bne.n	800597e <HAL_SPI_TransmitReceive+0x130>
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d1a1      	bne.n	800597e <HAL_SPI_TransmitReceive+0x130>
 8005a3a:	e07c      	b.n	8005b36 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d002      	beq.n	8005a4a <HAL_SPI_TransmitReceive+0x1fc>
 8005a44:	8b7b      	ldrh	r3, [r7, #26]
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d16b      	bne.n	8005b22 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	330c      	adds	r3, #12
 8005a54:	7812      	ldrb	r2, [r2, #0]
 8005a56:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a5c:	1c5a      	adds	r2, r3, #1
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	3b01      	subs	r3, #1
 8005a6a:	b29a      	uxth	r2, r3
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a70:	e057      	b.n	8005b22 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	f003 0302 	and.w	r3, r3, #2
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	d11c      	bne.n	8005aba <HAL_SPI_TransmitReceive+0x26c>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d017      	beq.n	8005aba <HAL_SPI_TransmitReceive+0x26c>
 8005a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d114      	bne.n	8005aba <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	330c      	adds	r3, #12
 8005a9a:	7812      	ldrb	r2, [r2, #0]
 8005a9c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa2:	1c5a      	adds	r2, r3, #1
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	b29a      	uxth	r2, r3
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	f003 0301 	and.w	r3, r3, #1
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d119      	bne.n	8005afc <HAL_SPI_TransmitReceive+0x2ae>
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d014      	beq.n	8005afc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68da      	ldr	r2, [r3, #12]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005adc:	b2d2      	uxtb	r2, r2
 8005ade:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae4:	1c5a      	adds	r2, r3, #1
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	3b01      	subs	r3, #1
 8005af2:	b29a      	uxth	r2, r3
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005af8:	2301      	movs	r3, #1
 8005afa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005afc:	f7fd fefa 	bl	80038f4 <HAL_GetTick>
 8005b00:	4602      	mov	r2, r0
 8005b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d803      	bhi.n	8005b14 <HAL_SPI_TransmitReceive+0x2c6>
 8005b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b12:	d102      	bne.n	8005b1a <HAL_SPI_TransmitReceive+0x2cc>
 8005b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d103      	bne.n	8005b22 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005b20:	e029      	b.n	8005b76 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d1a2      	bne.n	8005a72 <HAL_SPI_TransmitReceive+0x224>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d19d      	bne.n	8005a72 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b38:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005b3a:	68f8      	ldr	r0, [r7, #12]
 8005b3c:	f000 f8b2 	bl	8005ca4 <SPI_EndRxTxTransaction>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d006      	beq.n	8005b54 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2220      	movs	r2, #32
 8005b50:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005b52:	e010      	b.n	8005b76 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d10b      	bne.n	8005b74 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	617b      	str	r3, [r7, #20]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	617b      	str	r3, [r7, #20]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	617b      	str	r3, [r7, #20]
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	e000      	b.n	8005b76 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005b74:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005b86:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3730      	adds	r7, #48	; 0x30
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
	...

08005b94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b088      	sub	sp, #32
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	603b      	str	r3, [r7, #0]
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005ba4:	f7fd fea6 	bl	80038f4 <HAL_GetTick>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bac:	1a9b      	subs	r3, r3, r2
 8005bae:	683a      	ldr	r2, [r7, #0]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005bb4:	f7fd fe9e 	bl	80038f4 <HAL_GetTick>
 8005bb8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005bba:	4b39      	ldr	r3, [pc, #228]	; (8005ca0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	015b      	lsls	r3, r3, #5
 8005bc0:	0d1b      	lsrs	r3, r3, #20
 8005bc2:	69fa      	ldr	r2, [r7, #28]
 8005bc4:	fb02 f303 	mul.w	r3, r2, r3
 8005bc8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005bca:	e054      	b.n	8005c76 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd2:	d050      	beq.n	8005c76 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005bd4:	f7fd fe8e 	bl	80038f4 <HAL_GetTick>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	69fa      	ldr	r2, [r7, #28]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d902      	bls.n	8005bea <SPI_WaitFlagStateUntilTimeout+0x56>
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d13d      	bne.n	8005c66 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	685a      	ldr	r2, [r3, #4]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005bf8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c02:	d111      	bne.n	8005c28 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c0c:	d004      	beq.n	8005c18 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c16:	d107      	bne.n	8005c28 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c30:	d10f      	bne.n	8005c52 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c40:	601a      	str	r2, [r3, #0]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2201      	movs	r2, #1
 8005c56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	e017      	b.n	8005c96 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d101      	bne.n	8005c70 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	3b01      	subs	r3, #1
 8005c74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	689a      	ldr	r2, [r3, #8]
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	4013      	ands	r3, r2
 8005c80:	68ba      	ldr	r2, [r7, #8]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	bf0c      	ite	eq
 8005c86:	2301      	moveq	r3, #1
 8005c88:	2300      	movne	r3, #0
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	79fb      	ldrb	r3, [r7, #7]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d19b      	bne.n	8005bcc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3720      	adds	r7, #32
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	20000028 	.word	0x20000028

08005ca4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b088      	sub	sp, #32
 8005ca8:	af02      	add	r7, sp, #8
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005cb0:	4b1b      	ldr	r3, [pc, #108]	; (8005d20 <SPI_EndRxTxTransaction+0x7c>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a1b      	ldr	r2, [pc, #108]	; (8005d24 <SPI_EndRxTxTransaction+0x80>)
 8005cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8005cba:	0d5b      	lsrs	r3, r3, #21
 8005cbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005cc0:	fb02 f303 	mul.w	r3, r2, r3
 8005cc4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cce:	d112      	bne.n	8005cf6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	9300      	str	r3, [sp, #0]
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	2180      	movs	r1, #128	; 0x80
 8005cda:	68f8      	ldr	r0, [r7, #12]
 8005cdc:	f7ff ff5a 	bl	8005b94 <SPI_WaitFlagStateUntilTimeout>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d016      	beq.n	8005d14 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cea:	f043 0220 	orr.w	r2, r3, #32
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	e00f      	b.n	8005d16 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d00a      	beq.n	8005d12 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	3b01      	subs	r3, #1
 8005d00:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d0c:	2b80      	cmp	r3, #128	; 0x80
 8005d0e:	d0f2      	beq.n	8005cf6 <SPI_EndRxTxTransaction+0x52>
 8005d10:	e000      	b.n	8005d14 <SPI_EndRxTxTransaction+0x70>
        break;
 8005d12:	bf00      	nop
  }

  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3718      	adds	r7, #24
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	20000028 	.word	0x20000028
 8005d24:	165e9f81 	.word	0x165e9f81

08005d28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d101      	bne.n	8005d3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e041      	b.n	8005dbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d106      	bne.n	8005d54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 f839 	bl	8005dc6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2202      	movs	r2, #2
 8005d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	3304      	adds	r3, #4
 8005d64:	4619      	mov	r1, r3
 8005d66:	4610      	mov	r0, r2
 8005d68:	f000 f9d8 	bl	800611c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3708      	adds	r7, #8
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}

08005dc6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	b083      	sub	sp, #12
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005dce:	bf00      	nop
 8005dd0:	370c      	adds	r7, #12
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr
	...

08005ddc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b085      	sub	sp, #20
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d001      	beq.n	8005df4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e04e      	b.n	8005e92 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2202      	movs	r2, #2
 8005df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68da      	ldr	r2, [r3, #12]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f042 0201 	orr.w	r2, r2, #1
 8005e0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a23      	ldr	r2, [pc, #140]	; (8005ea0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d022      	beq.n	8005e5c <HAL_TIM_Base_Start_IT+0x80>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e1e:	d01d      	beq.n	8005e5c <HAL_TIM_Base_Start_IT+0x80>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a1f      	ldr	r2, [pc, #124]	; (8005ea4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d018      	beq.n	8005e5c <HAL_TIM_Base_Start_IT+0x80>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a1e      	ldr	r2, [pc, #120]	; (8005ea8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d013      	beq.n	8005e5c <HAL_TIM_Base_Start_IT+0x80>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a1c      	ldr	r2, [pc, #112]	; (8005eac <HAL_TIM_Base_Start_IT+0xd0>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d00e      	beq.n	8005e5c <HAL_TIM_Base_Start_IT+0x80>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a1b      	ldr	r2, [pc, #108]	; (8005eb0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d009      	beq.n	8005e5c <HAL_TIM_Base_Start_IT+0x80>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a19      	ldr	r2, [pc, #100]	; (8005eb4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d004      	beq.n	8005e5c <HAL_TIM_Base_Start_IT+0x80>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a18      	ldr	r2, [pc, #96]	; (8005eb8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d111      	bne.n	8005e80 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	f003 0307 	and.w	r3, r3, #7
 8005e66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2b06      	cmp	r3, #6
 8005e6c:	d010      	beq.n	8005e90 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f042 0201 	orr.w	r2, r2, #1
 8005e7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e7e:	e007      	b.n	8005e90 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f042 0201 	orr.w	r2, r2, #1
 8005e8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3714      	adds	r7, #20
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop
 8005ea0:	40010000 	.word	0x40010000
 8005ea4:	40000400 	.word	0x40000400
 8005ea8:	40000800 	.word	0x40000800
 8005eac:	40000c00 	.word	0x40000c00
 8005eb0:	40010400 	.word	0x40010400
 8005eb4:	40014000 	.word	0x40014000
 8005eb8:	40001800 	.word	0x40001800

08005ebc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b082      	sub	sp, #8
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	f003 0302 	and.w	r3, r3, #2
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	d122      	bne.n	8005f18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	f003 0302 	and.w	r3, r3, #2
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	d11b      	bne.n	8005f18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f06f 0202 	mvn.w	r2, #2
 8005ee8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2201      	movs	r2, #1
 8005eee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	699b      	ldr	r3, [r3, #24]
 8005ef6:	f003 0303 	and.w	r3, r3, #3
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d003      	beq.n	8005f06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 f8ee 	bl	80060e0 <HAL_TIM_IC_CaptureCallback>
 8005f04:	e005      	b.n	8005f12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 f8e0 	bl	80060cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 f8f1 	bl	80060f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	f003 0304 	and.w	r3, r3, #4
 8005f22:	2b04      	cmp	r3, #4
 8005f24:	d122      	bne.n	8005f6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	f003 0304 	and.w	r3, r3, #4
 8005f30:	2b04      	cmp	r3, #4
 8005f32:	d11b      	bne.n	8005f6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f06f 0204 	mvn.w	r2, #4
 8005f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2202      	movs	r2, #2
 8005f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	699b      	ldr	r3, [r3, #24]
 8005f4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d003      	beq.n	8005f5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 f8c4 	bl	80060e0 <HAL_TIM_IC_CaptureCallback>
 8005f58:	e005      	b.n	8005f66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 f8b6 	bl	80060cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 f8c7 	bl	80060f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	f003 0308 	and.w	r3, r3, #8
 8005f76:	2b08      	cmp	r3, #8
 8005f78:	d122      	bne.n	8005fc0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	f003 0308 	and.w	r3, r3, #8
 8005f84:	2b08      	cmp	r3, #8
 8005f86:	d11b      	bne.n	8005fc0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f06f 0208 	mvn.w	r2, #8
 8005f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2204      	movs	r2, #4
 8005f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	69db      	ldr	r3, [r3, #28]
 8005f9e:	f003 0303 	and.w	r3, r3, #3
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d003      	beq.n	8005fae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 f89a 	bl	80060e0 <HAL_TIM_IC_CaptureCallback>
 8005fac:	e005      	b.n	8005fba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 f88c 	bl	80060cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 f89d 	bl	80060f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	f003 0310 	and.w	r3, r3, #16
 8005fca:	2b10      	cmp	r3, #16
 8005fcc:	d122      	bne.n	8006014 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	f003 0310 	and.w	r3, r3, #16
 8005fd8:	2b10      	cmp	r3, #16
 8005fda:	d11b      	bne.n	8006014 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f06f 0210 	mvn.w	r2, #16
 8005fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2208      	movs	r2, #8
 8005fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	69db      	ldr	r3, [r3, #28]
 8005ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d003      	beq.n	8006002 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 f870 	bl	80060e0 <HAL_TIM_IC_CaptureCallback>
 8006000:	e005      	b.n	800600e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 f862 	bl	80060cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f000 f873 	bl	80060f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	f003 0301 	and.w	r3, r3, #1
 800601e:	2b01      	cmp	r3, #1
 8006020:	d10e      	bne.n	8006040 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	f003 0301 	and.w	r3, r3, #1
 800602c:	2b01      	cmp	r3, #1
 800602e:	d107      	bne.n	8006040 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f06f 0201 	mvn.w	r2, #1
 8006038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f7fc fd02 	bl	8002a44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800604a:	2b80      	cmp	r3, #128	; 0x80
 800604c:	d10e      	bne.n	800606c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006058:	2b80      	cmp	r3, #128	; 0x80
 800605a:	d107      	bne.n	800606c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 f902 	bl	8006270 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006076:	2b40      	cmp	r3, #64	; 0x40
 8006078:	d10e      	bne.n	8006098 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006084:	2b40      	cmp	r3, #64	; 0x40
 8006086:	d107      	bne.n	8006098 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 f838 	bl	8006108 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	f003 0320 	and.w	r3, r3, #32
 80060a2:	2b20      	cmp	r3, #32
 80060a4:	d10e      	bne.n	80060c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	f003 0320 	and.w	r3, r3, #32
 80060b0:	2b20      	cmp	r3, #32
 80060b2:	d107      	bne.n	80060c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f06f 0220 	mvn.w	r2, #32
 80060bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 f8cc 	bl	800625c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060c4:	bf00      	nop
 80060c6:	3708      	adds	r7, #8
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060d4:	bf00      	nop
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060e8:	bf00      	nop
 80060ea:	370c      	adds	r7, #12
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060fc:	bf00      	nop
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006110:	bf00      	nop
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800611c:	b480      	push	{r7}
 800611e:	b085      	sub	sp, #20
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4a40      	ldr	r2, [pc, #256]	; (8006230 <TIM_Base_SetConfig+0x114>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d013      	beq.n	800615c <TIM_Base_SetConfig+0x40>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800613a:	d00f      	beq.n	800615c <TIM_Base_SetConfig+0x40>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4a3d      	ldr	r2, [pc, #244]	; (8006234 <TIM_Base_SetConfig+0x118>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d00b      	beq.n	800615c <TIM_Base_SetConfig+0x40>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a3c      	ldr	r2, [pc, #240]	; (8006238 <TIM_Base_SetConfig+0x11c>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d007      	beq.n	800615c <TIM_Base_SetConfig+0x40>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a3b      	ldr	r2, [pc, #236]	; (800623c <TIM_Base_SetConfig+0x120>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d003      	beq.n	800615c <TIM_Base_SetConfig+0x40>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a3a      	ldr	r2, [pc, #232]	; (8006240 <TIM_Base_SetConfig+0x124>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d108      	bne.n	800616e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006162:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	4313      	orrs	r3, r2
 800616c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4a2f      	ldr	r2, [pc, #188]	; (8006230 <TIM_Base_SetConfig+0x114>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d02b      	beq.n	80061ce <TIM_Base_SetConfig+0xb2>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800617c:	d027      	beq.n	80061ce <TIM_Base_SetConfig+0xb2>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4a2c      	ldr	r2, [pc, #176]	; (8006234 <TIM_Base_SetConfig+0x118>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d023      	beq.n	80061ce <TIM_Base_SetConfig+0xb2>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a2b      	ldr	r2, [pc, #172]	; (8006238 <TIM_Base_SetConfig+0x11c>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d01f      	beq.n	80061ce <TIM_Base_SetConfig+0xb2>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a2a      	ldr	r2, [pc, #168]	; (800623c <TIM_Base_SetConfig+0x120>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d01b      	beq.n	80061ce <TIM_Base_SetConfig+0xb2>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a29      	ldr	r2, [pc, #164]	; (8006240 <TIM_Base_SetConfig+0x124>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d017      	beq.n	80061ce <TIM_Base_SetConfig+0xb2>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4a28      	ldr	r2, [pc, #160]	; (8006244 <TIM_Base_SetConfig+0x128>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d013      	beq.n	80061ce <TIM_Base_SetConfig+0xb2>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4a27      	ldr	r2, [pc, #156]	; (8006248 <TIM_Base_SetConfig+0x12c>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d00f      	beq.n	80061ce <TIM_Base_SetConfig+0xb2>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4a26      	ldr	r2, [pc, #152]	; (800624c <TIM_Base_SetConfig+0x130>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d00b      	beq.n	80061ce <TIM_Base_SetConfig+0xb2>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	4a25      	ldr	r2, [pc, #148]	; (8006250 <TIM_Base_SetConfig+0x134>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d007      	beq.n	80061ce <TIM_Base_SetConfig+0xb2>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a24      	ldr	r2, [pc, #144]	; (8006254 <TIM_Base_SetConfig+0x138>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d003      	beq.n	80061ce <TIM_Base_SetConfig+0xb2>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a23      	ldr	r2, [pc, #140]	; (8006258 <TIM_Base_SetConfig+0x13c>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d108      	bne.n	80061e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	4313      	orrs	r3, r2
 80061de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	695b      	ldr	r3, [r3, #20]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	689a      	ldr	r2, [r3, #8]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4a0a      	ldr	r2, [pc, #40]	; (8006230 <TIM_Base_SetConfig+0x114>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d003      	beq.n	8006214 <TIM_Base_SetConfig+0xf8>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4a0c      	ldr	r2, [pc, #48]	; (8006240 <TIM_Base_SetConfig+0x124>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d103      	bne.n	800621c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	691a      	ldr	r2, [r3, #16]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	615a      	str	r2, [r3, #20]
}
 8006222:	bf00      	nop
 8006224:	3714      	adds	r7, #20
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop
 8006230:	40010000 	.word	0x40010000
 8006234:	40000400 	.word	0x40000400
 8006238:	40000800 	.word	0x40000800
 800623c:	40000c00 	.word	0x40000c00
 8006240:	40010400 	.word	0x40010400
 8006244:	40014000 	.word	0x40014000
 8006248:	40014400 	.word	0x40014400
 800624c:	40014800 	.word	0x40014800
 8006250:	40001800 	.word	0x40001800
 8006254:	40001c00 	.word	0x40001c00
 8006258:	40002000 	.word	0x40002000

0800625c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006264:	bf00      	nop
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006278:	bf00      	nop
 800627a:	370c      	adds	r7, #12
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b082      	sub	sp, #8
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d101      	bne.n	8006296 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e03f      	b.n	8006316 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800629c:	b2db      	uxtb	r3, r3
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d106      	bne.n	80062b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f7fc fc9e 	bl	8002bec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2224      	movs	r2, #36	; 0x24
 80062b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68da      	ldr	r2, [r3, #12]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f001 f917 	bl	80074fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	691a      	ldr	r2, [r3, #16]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	695a      	ldr	r2, [r3, #20]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	68da      	ldr	r2, [r3, #12]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2220      	movs	r2, #32
 8006308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2220      	movs	r2, #32
 8006310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3708      	adds	r7, #8
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}

0800631e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800631e:	b580      	push	{r7, lr}
 8006320:	b08a      	sub	sp, #40	; 0x28
 8006322:	af02      	add	r7, sp, #8
 8006324:	60f8      	str	r0, [r7, #12]
 8006326:	60b9      	str	r1, [r7, #8]
 8006328:	603b      	str	r3, [r7, #0]
 800632a:	4613      	mov	r3, r2
 800632c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800632e:	2300      	movs	r3, #0
 8006330:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006338:	b2db      	uxtb	r3, r3
 800633a:	2b20      	cmp	r3, #32
 800633c:	d17c      	bne.n	8006438 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d002      	beq.n	800634a <HAL_UART_Transmit+0x2c>
 8006344:	88fb      	ldrh	r3, [r7, #6]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d101      	bne.n	800634e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e075      	b.n	800643a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006354:	2b01      	cmp	r3, #1
 8006356:	d101      	bne.n	800635c <HAL_UART_Transmit+0x3e>
 8006358:	2302      	movs	r3, #2
 800635a:	e06e      	b.n	800643a <HAL_UART_Transmit+0x11c>
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2200      	movs	r2, #0
 8006368:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2221      	movs	r2, #33	; 0x21
 800636e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006372:	f7fd fabf 	bl	80038f4 <HAL_GetTick>
 8006376:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	88fa      	ldrh	r2, [r7, #6]
 800637c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	88fa      	ldrh	r2, [r7, #6]
 8006382:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800638c:	d108      	bne.n	80063a0 <HAL_UART_Transmit+0x82>
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d104      	bne.n	80063a0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006396:	2300      	movs	r3, #0
 8006398:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	61bb      	str	r3, [r7, #24]
 800639e:	e003      	b.n	80063a8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063a4:	2300      	movs	r3, #0
 80063a6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80063b0:	e02a      	b.n	8006408 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	9300      	str	r3, [sp, #0]
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	2200      	movs	r2, #0
 80063ba:	2180      	movs	r1, #128	; 0x80
 80063bc:	68f8      	ldr	r0, [r7, #12]
 80063be:	f000 fdd2 	bl	8006f66 <UART_WaitOnFlagUntilTimeout>
 80063c2:	4603      	mov	r3, r0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d001      	beq.n	80063cc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80063c8:	2303      	movs	r3, #3
 80063ca:	e036      	b.n	800643a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d10b      	bne.n	80063ea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	881b      	ldrh	r3, [r3, #0]
 80063d6:	461a      	mov	r2, r3
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80063e2:	69bb      	ldr	r3, [r7, #24]
 80063e4:	3302      	adds	r3, #2
 80063e6:	61bb      	str	r3, [r7, #24]
 80063e8:	e007      	b.n	80063fa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	781a      	ldrb	r2, [r3, #0]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	3301      	adds	r3, #1
 80063f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80063fe:	b29b      	uxth	r3, r3
 8006400:	3b01      	subs	r3, #1
 8006402:	b29a      	uxth	r2, r3
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800640c:	b29b      	uxth	r3, r3
 800640e:	2b00      	cmp	r3, #0
 8006410:	d1cf      	bne.n	80063b2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	9300      	str	r3, [sp, #0]
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	2200      	movs	r2, #0
 800641a:	2140      	movs	r1, #64	; 0x40
 800641c:	68f8      	ldr	r0, [r7, #12]
 800641e:	f000 fda2 	bl	8006f66 <UART_WaitOnFlagUntilTimeout>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d001      	beq.n	800642c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006428:	2303      	movs	r3, #3
 800642a:	e006      	b.n	800643a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2220      	movs	r2, #32
 8006430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006434:	2300      	movs	r3, #0
 8006436:	e000      	b.n	800643a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006438:	2302      	movs	r3, #2
  }
}
 800643a:	4618      	mov	r0, r3
 800643c:	3720      	adds	r7, #32
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}

08006442 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006442:	b480      	push	{r7}
 8006444:	b085      	sub	sp, #20
 8006446:	af00      	add	r7, sp, #0
 8006448:	60f8      	str	r0, [r7, #12]
 800644a:	60b9      	str	r1, [r7, #8]
 800644c:	4613      	mov	r3, r2
 800644e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006456:	b2db      	uxtb	r3, r3
 8006458:	2b20      	cmp	r3, #32
 800645a:	d130      	bne.n	80064be <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d002      	beq.n	8006468 <HAL_UART_Transmit_IT+0x26>
 8006462:	88fb      	ldrh	r3, [r7, #6]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d101      	bne.n	800646c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	e029      	b.n	80064c0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006472:	2b01      	cmp	r3, #1
 8006474:	d101      	bne.n	800647a <HAL_UART_Transmit_IT+0x38>
 8006476:	2302      	movs	r3, #2
 8006478:	e022      	b.n	80064c0 <HAL_UART_Transmit_IT+0x7e>
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2201      	movs	r2, #1
 800647e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	68ba      	ldr	r2, [r7, #8]
 8006486:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	88fa      	ldrh	r2, [r7, #6]
 800648c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	88fa      	ldrh	r2, [r7, #6]
 8006492:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2200      	movs	r2, #0
 8006498:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2221      	movs	r2, #33	; 0x21
 800649e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68da      	ldr	r2, [r3, #12]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80064b8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80064ba:	2300      	movs	r3, #0
 80064bc:	e000      	b.n	80064c0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80064be:	2302      	movs	r3, #2
  }
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3714      	adds	r7, #20
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b08c      	sub	sp, #48	; 0x30
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	60b9      	str	r1, [r7, #8]
 80064d6:	4613      	mov	r3, r2
 80064d8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	2b20      	cmp	r3, #32
 80064e4:	d165      	bne.n	80065b2 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d002      	beq.n	80064f2 <HAL_UART_Transmit_DMA+0x26>
 80064ec:	88fb      	ldrh	r3, [r7, #6]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d101      	bne.n	80064f6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e05e      	b.n	80065b4 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d101      	bne.n	8006504 <HAL_UART_Transmit_DMA+0x38>
 8006500:	2302      	movs	r3, #2
 8006502:	e057      	b.n	80065b4 <HAL_UART_Transmit_DMA+0xe8>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800650c:	68ba      	ldr	r2, [r7, #8]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	88fa      	ldrh	r2, [r7, #6]
 8006516:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	88fa      	ldrh	r2, [r7, #6]
 800651c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2200      	movs	r2, #0
 8006522:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2221      	movs	r2, #33	; 0x21
 8006528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006530:	4a22      	ldr	r2, [pc, #136]	; (80065bc <HAL_UART_Transmit_DMA+0xf0>)
 8006532:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006538:	4a21      	ldr	r2, [pc, #132]	; (80065c0 <HAL_UART_Transmit_DMA+0xf4>)
 800653a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006540:	4a20      	ldr	r2, [pc, #128]	; (80065c4 <HAL_UART_Transmit_DMA+0xf8>)
 8006542:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006548:	2200      	movs	r2, #0
 800654a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800654c:	f107 0308 	add.w	r3, r7, #8
 8006550:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006558:	6819      	ldr	r1, [r3, #0]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	3304      	adds	r3, #4
 8006560:	461a      	mov	r2, r3
 8006562:	88fb      	ldrh	r3, [r7, #6]
 8006564:	f7fd fba2 	bl	8003cac <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006570:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	3314      	adds	r3, #20
 8006580:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	e853 3f00 	ldrex	r3, [r3]
 8006588:	617b      	str	r3, [r7, #20]
   return(result);
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006590:	62bb      	str	r3, [r7, #40]	; 0x28
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	3314      	adds	r3, #20
 8006598:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800659a:	627a      	str	r2, [r7, #36]	; 0x24
 800659c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800659e:	6a39      	ldr	r1, [r7, #32]
 80065a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065a2:	e841 2300 	strex	r3, r2, [r1]
 80065a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d1e5      	bne.n	800657a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80065ae:	2300      	movs	r3, #0
 80065b0:	e000      	b.n	80065b4 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80065b2:	2302      	movs	r3, #2
  }
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3730      	adds	r7, #48	; 0x30
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}
 80065bc:	08006cc1 	.word	0x08006cc1
 80065c0:	08006d5b 	.word	0x08006d5b
 80065c4:	08006ed3 	.word	0x08006ed3

080065c8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	4613      	mov	r3, r2
 80065d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	2b20      	cmp	r3, #32
 80065e0:	d11d      	bne.n	800661e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d002      	beq.n	80065ee <HAL_UART_Receive_DMA+0x26>
 80065e8:	88fb      	ldrh	r3, [r7, #6]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d101      	bne.n	80065f2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	e016      	b.n	8006620 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d101      	bne.n	8006600 <HAL_UART_Receive_DMA+0x38>
 80065fc:	2302      	movs	r3, #2
 80065fe:	e00f      	b.n	8006620 <HAL_UART_Receive_DMA+0x58>
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2200      	movs	r2, #0
 800660c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800660e:	88fb      	ldrh	r3, [r7, #6]
 8006610:	461a      	mov	r2, r3
 8006612:	68b9      	ldr	r1, [r7, #8]
 8006614:	68f8      	ldr	r0, [r7, #12]
 8006616:	f000 fd15 	bl	8007044 <UART_Start_Receive_DMA>
 800661a:	4603      	mov	r3, r0
 800661c:	e000      	b.n	8006620 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800661e:	2302      	movs	r3, #2
  }
}
 8006620:	4618      	mov	r0, r3
 8006622:	3710      	adds	r7, #16
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b090      	sub	sp, #64	; 0x40
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006630:	2300      	movs	r3, #0
 8006632:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	695b      	ldr	r3, [r3, #20]
 800663a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800663e:	2b80      	cmp	r3, #128	; 0x80
 8006640:	bf0c      	ite	eq
 8006642:	2301      	moveq	r3, #1
 8006644:	2300      	movne	r3, #0
 8006646:	b2db      	uxtb	r3, r3
 8006648:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006650:	b2db      	uxtb	r3, r3
 8006652:	2b21      	cmp	r3, #33	; 0x21
 8006654:	d128      	bne.n	80066a8 <HAL_UART_DMAStop+0x80>
 8006656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006658:	2b00      	cmp	r3, #0
 800665a:	d025      	beq.n	80066a8 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	3314      	adds	r3, #20
 8006662:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006666:	e853 3f00 	ldrex	r3, [r3]
 800666a:	623b      	str	r3, [r7, #32]
   return(result);
 800666c:	6a3b      	ldr	r3, [r7, #32]
 800666e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006672:	63bb      	str	r3, [r7, #56]	; 0x38
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	3314      	adds	r3, #20
 800667a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800667c:	633a      	str	r2, [r7, #48]	; 0x30
 800667e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006680:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006682:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006684:	e841 2300 	strex	r3, r2, [r1]
 8006688:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800668a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800668c:	2b00      	cmp	r3, #0
 800668e:	d1e5      	bne.n	800665c <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006694:	2b00      	cmp	r3, #0
 8006696:	d004      	beq.n	80066a2 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800669c:	4618      	mov	r0, r3
 800669e:	f7fd fb5d 	bl	8003d5c <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 fd68 	bl	8007178 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	695b      	ldr	r3, [r3, #20]
 80066ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b2:	2b40      	cmp	r3, #64	; 0x40
 80066b4:	bf0c      	ite	eq
 80066b6:	2301      	moveq	r3, #1
 80066b8:	2300      	movne	r3, #0
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	2b22      	cmp	r3, #34	; 0x22
 80066c8:	d128      	bne.n	800671c <HAL_UART_DMAStop+0xf4>
 80066ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d025      	beq.n	800671c <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	3314      	adds	r3, #20
 80066d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	e853 3f00 	ldrex	r3, [r3]
 80066de:	60fb      	str	r3, [r7, #12]
   return(result);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066e6:	637b      	str	r3, [r7, #52]	; 0x34
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	3314      	adds	r3, #20
 80066ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066f0:	61fa      	str	r2, [r7, #28]
 80066f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f4:	69b9      	ldr	r1, [r7, #24]
 80066f6:	69fa      	ldr	r2, [r7, #28]
 80066f8:	e841 2300 	strex	r3, r2, [r1]
 80066fc:	617b      	str	r3, [r7, #20]
   return(result);
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d1e5      	bne.n	80066d0 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006708:	2b00      	cmp	r3, #0
 800670a:	d004      	beq.n	8006716 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006710:	4618      	mov	r0, r3
 8006712:	f7fd fb23 	bl	8003d5c <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 fd56 	bl	80071c8 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800671c:	2300      	movs	r3, #0
}
 800671e:	4618      	mov	r0, r3
 8006720:	3740      	adds	r7, #64	; 0x40
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
	...

08006728 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b0ba      	sub	sp, #232	; 0xe8
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	695b      	ldr	r3, [r3, #20]
 800674a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800674e:	2300      	movs	r3, #0
 8006750:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006754:	2300      	movs	r3, #0
 8006756:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800675a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800675e:	f003 030f 	and.w	r3, r3, #15
 8006762:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006766:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800676a:	2b00      	cmp	r3, #0
 800676c:	d10f      	bne.n	800678e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800676e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006772:	f003 0320 	and.w	r3, r3, #32
 8006776:	2b00      	cmp	r3, #0
 8006778:	d009      	beq.n	800678e <HAL_UART_IRQHandler+0x66>
 800677a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800677e:	f003 0320 	and.w	r3, r3, #32
 8006782:	2b00      	cmp	r3, #0
 8006784:	d003      	beq.n	800678e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 fdfd 	bl	8007386 <UART_Receive_IT>
      return;
 800678c:	e256      	b.n	8006c3c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800678e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006792:	2b00      	cmp	r3, #0
 8006794:	f000 80de 	beq.w	8006954 <HAL_UART_IRQHandler+0x22c>
 8006798:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800679c:	f003 0301 	and.w	r3, r3, #1
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d106      	bne.n	80067b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80067a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	f000 80d1 	beq.w	8006954 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80067b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067b6:	f003 0301 	and.w	r3, r3, #1
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d00b      	beq.n	80067d6 <HAL_UART_IRQHandler+0xae>
 80067be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d005      	beq.n	80067d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ce:	f043 0201 	orr.w	r2, r3, #1
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067da:	f003 0304 	and.w	r3, r3, #4
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d00b      	beq.n	80067fa <HAL_UART_IRQHandler+0xd2>
 80067e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067e6:	f003 0301 	and.w	r3, r3, #1
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d005      	beq.n	80067fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f2:	f043 0202 	orr.w	r2, r3, #2
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067fe:	f003 0302 	and.w	r3, r3, #2
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00b      	beq.n	800681e <HAL_UART_IRQHandler+0xf6>
 8006806:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800680a:	f003 0301 	and.w	r3, r3, #1
 800680e:	2b00      	cmp	r3, #0
 8006810:	d005      	beq.n	800681e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006816:	f043 0204 	orr.w	r2, r3, #4
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800681e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006822:	f003 0308 	and.w	r3, r3, #8
 8006826:	2b00      	cmp	r3, #0
 8006828:	d011      	beq.n	800684e <HAL_UART_IRQHandler+0x126>
 800682a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800682e:	f003 0320 	and.w	r3, r3, #32
 8006832:	2b00      	cmp	r3, #0
 8006834:	d105      	bne.n	8006842 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006836:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800683a:	f003 0301 	and.w	r3, r3, #1
 800683e:	2b00      	cmp	r3, #0
 8006840:	d005      	beq.n	800684e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006846:	f043 0208 	orr.w	r2, r3, #8
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006852:	2b00      	cmp	r3, #0
 8006854:	f000 81ed 	beq.w	8006c32 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800685c:	f003 0320 	and.w	r3, r3, #32
 8006860:	2b00      	cmp	r3, #0
 8006862:	d008      	beq.n	8006876 <HAL_UART_IRQHandler+0x14e>
 8006864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006868:	f003 0320 	and.w	r3, r3, #32
 800686c:	2b00      	cmp	r3, #0
 800686e:	d002      	beq.n	8006876 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f000 fd88 	bl	8007386 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	695b      	ldr	r3, [r3, #20]
 800687c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006880:	2b40      	cmp	r3, #64	; 0x40
 8006882:	bf0c      	ite	eq
 8006884:	2301      	moveq	r3, #1
 8006886:	2300      	movne	r3, #0
 8006888:	b2db      	uxtb	r3, r3
 800688a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006892:	f003 0308 	and.w	r3, r3, #8
 8006896:	2b00      	cmp	r3, #0
 8006898:	d103      	bne.n	80068a2 <HAL_UART_IRQHandler+0x17a>
 800689a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d04f      	beq.n	8006942 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 fc90 	bl	80071c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	695b      	ldr	r3, [r3, #20]
 80068ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068b2:	2b40      	cmp	r3, #64	; 0x40
 80068b4:	d141      	bne.n	800693a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	3314      	adds	r3, #20
 80068bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80068c4:	e853 3f00 	ldrex	r3, [r3]
 80068c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80068cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80068d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	3314      	adds	r3, #20
 80068de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80068e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80068e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80068ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80068f2:	e841 2300 	strex	r3, r2, [r1]
 80068f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80068fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d1d9      	bne.n	80068b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006906:	2b00      	cmp	r3, #0
 8006908:	d013      	beq.n	8006932 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800690e:	4a7d      	ldr	r2, [pc, #500]	; (8006b04 <HAL_UART_IRQHandler+0x3dc>)
 8006910:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006916:	4618      	mov	r0, r3
 8006918:	f7fd fa90 	bl	8003e3c <HAL_DMA_Abort_IT>
 800691c:	4603      	mov	r3, r0
 800691e:	2b00      	cmp	r3, #0
 8006920:	d016      	beq.n	8006950 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800692c:	4610      	mov	r0, r2
 800692e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006930:	e00e      	b.n	8006950 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 f9ae 	bl	8006c94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006938:	e00a      	b.n	8006950 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 f9aa 	bl	8006c94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006940:	e006      	b.n	8006950 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 f9a6 	bl	8006c94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800694e:	e170      	b.n	8006c32 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006950:	bf00      	nop
    return;
 8006952:	e16e      	b.n	8006c32 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006958:	2b01      	cmp	r3, #1
 800695a:	f040 814a 	bne.w	8006bf2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800695e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006962:	f003 0310 	and.w	r3, r3, #16
 8006966:	2b00      	cmp	r3, #0
 8006968:	f000 8143 	beq.w	8006bf2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800696c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006970:	f003 0310 	and.w	r3, r3, #16
 8006974:	2b00      	cmp	r3, #0
 8006976:	f000 813c 	beq.w	8006bf2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800697a:	2300      	movs	r3, #0
 800697c:	60bb      	str	r3, [r7, #8]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	60bb      	str	r3, [r7, #8]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	60bb      	str	r3, [r7, #8]
 800698e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	695b      	ldr	r3, [r3, #20]
 8006996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800699a:	2b40      	cmp	r3, #64	; 0x40
 800699c:	f040 80b4 	bne.w	8006b08 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80069ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	f000 8140 	beq.w	8006c36 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80069ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80069be:	429a      	cmp	r2, r3
 80069c0:	f080 8139 	bcs.w	8006c36 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80069ca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d0:	69db      	ldr	r3, [r3, #28]
 80069d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069d6:	f000 8088 	beq.w	8006aea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	330c      	adds	r3, #12
 80069e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80069e8:	e853 3f00 	ldrex	r3, [r3]
 80069ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80069f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80069f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	330c      	adds	r3, #12
 8006a02:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006a06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006a0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a0e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006a12:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006a16:	e841 2300 	strex	r3, r2, [r1]
 8006a1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006a1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d1d9      	bne.n	80069da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	3314      	adds	r3, #20
 8006a2c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a30:	e853 3f00 	ldrex	r3, [r3]
 8006a34:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006a36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a38:	f023 0301 	bic.w	r3, r3, #1
 8006a3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	3314      	adds	r3, #20
 8006a46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006a4a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006a4e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a50:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006a52:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006a56:	e841 2300 	strex	r3, r2, [r1]
 8006a5a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006a5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d1e1      	bne.n	8006a26 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	3314      	adds	r3, #20
 8006a68:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a6c:	e853 3f00 	ldrex	r3, [r3]
 8006a70:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006a72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	3314      	adds	r3, #20
 8006a82:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006a86:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006a88:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006a8c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006a8e:	e841 2300 	strex	r3, r2, [r1]
 8006a92:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006a94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d1e3      	bne.n	8006a62 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2220      	movs	r2, #32
 8006a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	330c      	adds	r3, #12
 8006aae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ab2:	e853 3f00 	ldrex	r3, [r3]
 8006ab6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006ab8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006aba:	f023 0310 	bic.w	r3, r3, #16
 8006abe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	330c      	adds	r3, #12
 8006ac8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006acc:	65ba      	str	r2, [r7, #88]	; 0x58
 8006ace:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ad2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ad4:	e841 2300 	strex	r3, r2, [r1]
 8006ad8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006ada:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d1e3      	bne.n	8006aa8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f7fd f939 	bl	8003d5c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	1ad3      	subs	r3, r2, r3
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	4619      	mov	r1, r3
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 f8d4 	bl	8006ca8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006b00:	e099      	b.n	8006c36 <HAL_UART_IRQHandler+0x50e>
 8006b02:	bf00      	nop
 8006b04:	0800728f 	.word	0x0800728f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	1ad3      	subs	r3, r2, r3
 8006b14:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	f000 808b 	beq.w	8006c3a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006b24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	f000 8086 	beq.w	8006c3a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	330c      	adds	r3, #12
 8006b34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b38:	e853 3f00 	ldrex	r3, [r3]
 8006b3c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	330c      	adds	r3, #12
 8006b4e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006b52:	647a      	str	r2, [r7, #68]	; 0x44
 8006b54:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b5a:	e841 2300 	strex	r3, r2, [r1]
 8006b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d1e3      	bne.n	8006b2e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	3314      	adds	r3, #20
 8006b6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b70:	e853 3f00 	ldrex	r3, [r3]
 8006b74:	623b      	str	r3, [r7, #32]
   return(result);
 8006b76:	6a3b      	ldr	r3, [r7, #32]
 8006b78:	f023 0301 	bic.w	r3, r3, #1
 8006b7c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	3314      	adds	r3, #20
 8006b86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006b8a:	633a      	str	r2, [r7, #48]	; 0x30
 8006b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b92:	e841 2300 	strex	r3, r2, [r1]
 8006b96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d1e3      	bne.n	8006b66 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2220      	movs	r2, #32
 8006ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	330c      	adds	r3, #12
 8006bb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	e853 3f00 	ldrex	r3, [r3]
 8006bba:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f023 0310 	bic.w	r3, r3, #16
 8006bc2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	330c      	adds	r3, #12
 8006bcc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006bd0:	61fa      	str	r2, [r7, #28]
 8006bd2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd4:	69b9      	ldr	r1, [r7, #24]
 8006bd6:	69fa      	ldr	r2, [r7, #28]
 8006bd8:	e841 2300 	strex	r3, r2, [r1]
 8006bdc:	617b      	str	r3, [r7, #20]
   return(result);
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d1e3      	bne.n	8006bac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006be4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006be8:	4619      	mov	r1, r3
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 f85c 	bl	8006ca8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006bf0:	e023      	b.n	8006c3a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006bf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d009      	beq.n	8006c12 <HAL_UART_IRQHandler+0x4ea>
 8006bfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d003      	beq.n	8006c12 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 fb53 	bl	80072b6 <UART_Transmit_IT>
    return;
 8006c10:	e014      	b.n	8006c3c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00e      	beq.n	8006c3c <HAL_UART_IRQHandler+0x514>
 8006c1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d008      	beq.n	8006c3c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 fb93 	bl	8007356 <UART_EndTransmit_IT>
    return;
 8006c30:	e004      	b.n	8006c3c <HAL_UART_IRQHandler+0x514>
    return;
 8006c32:	bf00      	nop
 8006c34:	e002      	b.n	8006c3c <HAL_UART_IRQHandler+0x514>
      return;
 8006c36:	bf00      	nop
 8006c38:	e000      	b.n	8006c3c <HAL_UART_IRQHandler+0x514>
      return;
 8006c3a:	bf00      	nop
  }
}
 8006c3c:	37e8      	adds	r7, #232	; 0xe8
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop

08006c44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b083      	sub	sp, #12
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006c4c:	bf00      	nop
 8006c4e:	370c      	adds	r7, #12
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b083      	sub	sp, #12
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006c60:	bf00      	nop
 8006c62:	370c      	adds	r7, #12
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr

08006c6c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006c74:	bf00      	nop
 8006c76:	370c      	adds	r7, #12
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006c88:	bf00      	nop
 8006c8a:	370c      	adds	r7, #12
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006c9c:	bf00      	nop
 8006c9e:	370c      	adds	r7, #12
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr

08006ca8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	460b      	mov	r3, r1
 8006cb2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006cb4:	bf00      	nop
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b090      	sub	sp, #64	; 0x40
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d137      	bne.n	8006d4c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cde:	2200      	movs	r2, #0
 8006ce0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	3314      	adds	r3, #20
 8006ce8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cec:	e853 3f00 	ldrex	r3, [r3]
 8006cf0:	623b      	str	r3, [r7, #32]
   return(result);
 8006cf2:	6a3b      	ldr	r3, [r7, #32]
 8006cf4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cf8:	63bb      	str	r3, [r7, #56]	; 0x38
 8006cfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	3314      	adds	r3, #20
 8006d00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d02:	633a      	str	r2, [r7, #48]	; 0x30
 8006d04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d0a:	e841 2300 	strex	r3, r2, [r1]
 8006d0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d1e5      	bne.n	8006ce2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	330c      	adds	r3, #12
 8006d1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	e853 3f00 	ldrex	r3, [r3]
 8006d24:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d2c:	637b      	str	r3, [r7, #52]	; 0x34
 8006d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	330c      	adds	r3, #12
 8006d34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d36:	61fa      	str	r2, [r7, #28]
 8006d38:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d3a:	69b9      	ldr	r1, [r7, #24]
 8006d3c:	69fa      	ldr	r2, [r7, #28]
 8006d3e:	e841 2300 	strex	r3, r2, [r1]
 8006d42:	617b      	str	r3, [r7, #20]
   return(result);
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d1e5      	bne.n	8006d16 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d4a:	e002      	b.n	8006d52 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006d4c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006d4e:	f7ff ff79 	bl	8006c44 <HAL_UART_TxCpltCallback>
}
 8006d52:	bf00      	nop
 8006d54:	3740      	adds	r7, #64	; 0x40
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}

08006d5a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b084      	sub	sp, #16
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d66:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006d68:	68f8      	ldr	r0, [r7, #12]
 8006d6a:	f7ff ff75 	bl	8006c58 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d6e:	bf00      	nop
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006d76:	b580      	push	{r7, lr}
 8006d78:	b09c      	sub	sp, #112	; 0x70
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d82:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d172      	bne.n	8006e78 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006d92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d94:	2200      	movs	r2, #0
 8006d96:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	330c      	adds	r3, #12
 8006d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006da2:	e853 3f00 	ldrex	r3, [r3]
 8006da6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006da8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006daa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006dae:	66bb      	str	r3, [r7, #104]	; 0x68
 8006db0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	330c      	adds	r3, #12
 8006db6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006db8:	65ba      	str	r2, [r7, #88]	; 0x58
 8006dba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dbc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006dbe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006dc0:	e841 2300 	strex	r3, r2, [r1]
 8006dc4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006dc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d1e5      	bne.n	8006d98 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	3314      	adds	r3, #20
 8006dd2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd6:	e853 3f00 	ldrex	r3, [r3]
 8006dda:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dde:	f023 0301 	bic.w	r3, r3, #1
 8006de2:	667b      	str	r3, [r7, #100]	; 0x64
 8006de4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	3314      	adds	r3, #20
 8006dea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006dec:	647a      	str	r2, [r7, #68]	; 0x44
 8006dee:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006df2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006df4:	e841 2300 	strex	r3, r2, [r1]
 8006df8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d1e5      	bne.n	8006dcc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	3314      	adds	r3, #20
 8006e06:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0a:	e853 3f00 	ldrex	r3, [r3]
 8006e0e:	623b      	str	r3, [r7, #32]
   return(result);
 8006e10:	6a3b      	ldr	r3, [r7, #32]
 8006e12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e16:	663b      	str	r3, [r7, #96]	; 0x60
 8006e18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	3314      	adds	r3, #20
 8006e1e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006e20:	633a      	str	r2, [r7, #48]	; 0x30
 8006e22:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e24:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e28:	e841 2300 	strex	r3, r2, [r1]
 8006e2c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d1e5      	bne.n	8006e00 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006e34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e36:	2220      	movs	r2, #32
 8006e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d119      	bne.n	8006e78 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	330c      	adds	r3, #12
 8006e4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	e853 3f00 	ldrex	r3, [r3]
 8006e52:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f023 0310 	bic.w	r3, r3, #16
 8006e5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	330c      	adds	r3, #12
 8006e62:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006e64:	61fa      	str	r2, [r7, #28]
 8006e66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e68:	69b9      	ldr	r1, [r7, #24]
 8006e6a:	69fa      	ldr	r2, [r7, #28]
 8006e6c:	e841 2300 	strex	r3, r2, [r1]
 8006e70:	617b      	str	r3, [r7, #20]
   return(result);
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d1e5      	bne.n	8006e44 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d106      	bne.n	8006e8e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e82:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006e84:	4619      	mov	r1, r3
 8006e86:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006e88:	f7ff ff0e 	bl	8006ca8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006e8c:	e002      	b.n	8006e94 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006e8e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006e90:	f7ff feec 	bl	8006c6c <HAL_UART_RxCpltCallback>
}
 8006e94:	bf00      	nop
 8006e96:	3770      	adds	r7, #112	; 0x70
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d108      	bne.n	8006ec4 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006eb6:	085b      	lsrs	r3, r3, #1
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	4619      	mov	r1, r3
 8006ebc:	68f8      	ldr	r0, [r7, #12]
 8006ebe:	f7ff fef3 	bl	8006ca8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006ec2:	e002      	b.n	8006eca <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006ec4:	68f8      	ldr	r0, [r7, #12]
 8006ec6:	f7ff fedb 	bl	8006c80 <HAL_UART_RxHalfCpltCallback>
}
 8006eca:	bf00      	nop
 8006ecc:	3710      	adds	r7, #16
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}

08006ed2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006ed2:	b580      	push	{r7, lr}
 8006ed4:	b084      	sub	sp, #16
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006eda:	2300      	movs	r3, #0
 8006edc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	695b      	ldr	r3, [r3, #20]
 8006eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eee:	2b80      	cmp	r3, #128	; 0x80
 8006ef0:	bf0c      	ite	eq
 8006ef2:	2301      	moveq	r3, #1
 8006ef4:	2300      	movne	r3, #0
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	2b21      	cmp	r3, #33	; 0x21
 8006f04:	d108      	bne.n	8006f18 <UART_DMAError+0x46>
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d005      	beq.n	8006f18 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006f12:	68b8      	ldr	r0, [r7, #8]
 8006f14:	f000 f930 	bl	8007178 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	695b      	ldr	r3, [r3, #20]
 8006f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f22:	2b40      	cmp	r3, #64	; 0x40
 8006f24:	bf0c      	ite	eq
 8006f26:	2301      	moveq	r3, #1
 8006f28:	2300      	movne	r3, #0
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	2b22      	cmp	r3, #34	; 0x22
 8006f38:	d108      	bne.n	8006f4c <UART_DMAError+0x7a>
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d005      	beq.n	8006f4c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	2200      	movs	r2, #0
 8006f44:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006f46:	68b8      	ldr	r0, [r7, #8]
 8006f48:	f000 f93e 	bl	80071c8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f50:	f043 0210 	orr.w	r2, r3, #16
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f58:	68b8      	ldr	r0, [r7, #8]
 8006f5a:	f7ff fe9b 	bl	8006c94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f5e:	bf00      	nop
 8006f60:	3710      	adds	r7, #16
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}

08006f66 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006f66:	b580      	push	{r7, lr}
 8006f68:	b090      	sub	sp, #64	; 0x40
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	60f8      	str	r0, [r7, #12]
 8006f6e:	60b9      	str	r1, [r7, #8]
 8006f70:	603b      	str	r3, [r7, #0]
 8006f72:	4613      	mov	r3, r2
 8006f74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f76:	e050      	b.n	800701a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f7e:	d04c      	beq.n	800701a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006f80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d007      	beq.n	8006f96 <UART_WaitOnFlagUntilTimeout+0x30>
 8006f86:	f7fc fcb5 	bl	80038f4 <HAL_GetTick>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	1ad3      	subs	r3, r2, r3
 8006f90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d241      	bcs.n	800701a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	330c      	adds	r3, #12
 8006f9c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa0:	e853 3f00 	ldrex	r3, [r3]
 8006fa4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006fac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	330c      	adds	r3, #12
 8006fb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006fb6:	637a      	str	r2, [r7, #52]	; 0x34
 8006fb8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006fbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fbe:	e841 2300 	strex	r3, r2, [r1]
 8006fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d1e5      	bne.n	8006f96 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	3314      	adds	r3, #20
 8006fd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	e853 3f00 	ldrex	r3, [r3]
 8006fd8:	613b      	str	r3, [r7, #16]
   return(result);
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	f023 0301 	bic.w	r3, r3, #1
 8006fe0:	63bb      	str	r3, [r7, #56]	; 0x38
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	3314      	adds	r3, #20
 8006fe8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fea:	623a      	str	r2, [r7, #32]
 8006fec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fee:	69f9      	ldr	r1, [r7, #28]
 8006ff0:	6a3a      	ldr	r2, [r7, #32]
 8006ff2:	e841 2300 	strex	r3, r2, [r1]
 8006ff6:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d1e5      	bne.n	8006fca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2220      	movs	r2, #32
 8007002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2220      	movs	r2, #32
 800700a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2200      	movs	r2, #0
 8007012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007016:	2303      	movs	r3, #3
 8007018:	e00f      	b.n	800703a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	4013      	ands	r3, r2
 8007024:	68ba      	ldr	r2, [r7, #8]
 8007026:	429a      	cmp	r2, r3
 8007028:	bf0c      	ite	eq
 800702a:	2301      	moveq	r3, #1
 800702c:	2300      	movne	r3, #0
 800702e:	b2db      	uxtb	r3, r3
 8007030:	461a      	mov	r2, r3
 8007032:	79fb      	ldrb	r3, [r7, #7]
 8007034:	429a      	cmp	r2, r3
 8007036:	d09f      	beq.n	8006f78 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	3740      	adds	r7, #64	; 0x40
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
	...

08007044 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b098      	sub	sp, #96	; 0x60
 8007048:	af00      	add	r7, sp, #0
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	4613      	mov	r3, r2
 8007050:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007052:	68ba      	ldr	r2, [r7, #8]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	88fa      	ldrh	r2, [r7, #6]
 800705c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2200      	movs	r2, #0
 8007062:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2222      	movs	r2, #34	; 0x22
 8007068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007070:	4a3e      	ldr	r2, [pc, #248]	; (800716c <UART_Start_Receive_DMA+0x128>)
 8007072:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007078:	4a3d      	ldr	r2, [pc, #244]	; (8007170 <UART_Start_Receive_DMA+0x12c>)
 800707a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007080:	4a3c      	ldr	r2, [pc, #240]	; (8007174 <UART_Start_Receive_DMA+0x130>)
 8007082:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007088:	2200      	movs	r2, #0
 800708a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800708c:	f107 0308 	add.w	r3, r7, #8
 8007090:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	3304      	adds	r3, #4
 800709c:	4619      	mov	r1, r3
 800709e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	88fb      	ldrh	r3, [r7, #6]
 80070a4:	f7fc fe02 	bl	8003cac <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80070a8:	2300      	movs	r3, #0
 80070aa:	613b      	str	r3, [r7, #16]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	613b      	str	r3, [r7, #16]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	613b      	str	r3, [r7, #16]
 80070bc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2200      	movs	r2, #0
 80070c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	330c      	adds	r3, #12
 80070cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070d0:	e853 3f00 	ldrex	r3, [r3]
 80070d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80070d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	330c      	adds	r3, #12
 80070e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80070e6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80070e8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ea:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80070ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80070ee:	e841 2300 	strex	r3, r2, [r1]
 80070f2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80070f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d1e5      	bne.n	80070c6 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	3314      	adds	r3, #20
 8007100:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007104:	e853 3f00 	ldrex	r3, [r3]
 8007108:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800710a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800710c:	f043 0301 	orr.w	r3, r3, #1
 8007110:	657b      	str	r3, [r7, #84]	; 0x54
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	3314      	adds	r3, #20
 8007118:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800711a:	63ba      	str	r2, [r7, #56]	; 0x38
 800711c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800711e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007120:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007122:	e841 2300 	strex	r3, r2, [r1]
 8007126:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800712a:	2b00      	cmp	r3, #0
 800712c:	d1e5      	bne.n	80070fa <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	3314      	adds	r3, #20
 8007134:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	e853 3f00 	ldrex	r3, [r3]
 800713c:	617b      	str	r3, [r7, #20]
   return(result);
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007144:	653b      	str	r3, [r7, #80]	; 0x50
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	3314      	adds	r3, #20
 800714c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800714e:	627a      	str	r2, [r7, #36]	; 0x24
 8007150:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007152:	6a39      	ldr	r1, [r7, #32]
 8007154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007156:	e841 2300 	strex	r3, r2, [r1]
 800715a:	61fb      	str	r3, [r7, #28]
   return(result);
 800715c:	69fb      	ldr	r3, [r7, #28]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d1e5      	bne.n	800712e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007162:	2300      	movs	r3, #0
}
 8007164:	4618      	mov	r0, r3
 8007166:	3760      	adds	r7, #96	; 0x60
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}
 800716c:	08006d77 	.word	0x08006d77
 8007170:	08006e9d 	.word	0x08006e9d
 8007174:	08006ed3 	.word	0x08006ed3

08007178 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007178:	b480      	push	{r7}
 800717a:	b089      	sub	sp, #36	; 0x24
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	330c      	adds	r3, #12
 8007186:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	e853 3f00 	ldrex	r3, [r3]
 800718e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007196:	61fb      	str	r3, [r7, #28]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	330c      	adds	r3, #12
 800719e:	69fa      	ldr	r2, [r7, #28]
 80071a0:	61ba      	str	r2, [r7, #24]
 80071a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a4:	6979      	ldr	r1, [r7, #20]
 80071a6:	69ba      	ldr	r2, [r7, #24]
 80071a8:	e841 2300 	strex	r3, r2, [r1]
 80071ac:	613b      	str	r3, [r7, #16]
   return(result);
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d1e5      	bne.n	8007180 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2220      	movs	r2, #32
 80071b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80071bc:	bf00      	nop
 80071be:	3724      	adds	r7, #36	; 0x24
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr

080071c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b095      	sub	sp, #84	; 0x54
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	330c      	adds	r3, #12
 80071d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071da:	e853 3f00 	ldrex	r3, [r3]
 80071de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80071e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	330c      	adds	r3, #12
 80071ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80071f0:	643a      	str	r2, [r7, #64]	; 0x40
 80071f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80071f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80071f8:	e841 2300 	strex	r3, r2, [r1]
 80071fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80071fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007200:	2b00      	cmp	r3, #0
 8007202:	d1e5      	bne.n	80071d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	3314      	adds	r3, #20
 800720a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800720c:	6a3b      	ldr	r3, [r7, #32]
 800720e:	e853 3f00 	ldrex	r3, [r3]
 8007212:	61fb      	str	r3, [r7, #28]
   return(result);
 8007214:	69fb      	ldr	r3, [r7, #28]
 8007216:	f023 0301 	bic.w	r3, r3, #1
 800721a:	64bb      	str	r3, [r7, #72]	; 0x48
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	3314      	adds	r3, #20
 8007222:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007224:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007226:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007228:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800722a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800722c:	e841 2300 	strex	r3, r2, [r1]
 8007230:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007234:	2b00      	cmp	r3, #0
 8007236:	d1e5      	bne.n	8007204 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800723c:	2b01      	cmp	r3, #1
 800723e:	d119      	bne.n	8007274 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	330c      	adds	r3, #12
 8007246:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	e853 3f00 	ldrex	r3, [r3]
 800724e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	f023 0310 	bic.w	r3, r3, #16
 8007256:	647b      	str	r3, [r7, #68]	; 0x44
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	330c      	adds	r3, #12
 800725e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007260:	61ba      	str	r2, [r7, #24]
 8007262:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007264:	6979      	ldr	r1, [r7, #20]
 8007266:	69ba      	ldr	r2, [r7, #24]
 8007268:	e841 2300 	strex	r3, r2, [r1]
 800726c:	613b      	str	r3, [r7, #16]
   return(result);
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d1e5      	bne.n	8007240 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2220      	movs	r2, #32
 8007278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007282:	bf00      	nop
 8007284:	3754      	adds	r7, #84	; 0x54
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr

0800728e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800728e:	b580      	push	{r7, lr}
 8007290:	b084      	sub	sp, #16
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800729a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2200      	movs	r2, #0
 80072a0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2200      	movs	r2, #0
 80072a6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80072a8:	68f8      	ldr	r0, [r7, #12]
 80072aa:	f7ff fcf3 	bl	8006c94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072ae:	bf00      	nop
 80072b0:	3710      	adds	r7, #16
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}

080072b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80072b6:	b480      	push	{r7}
 80072b8:	b085      	sub	sp, #20
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	2b21      	cmp	r3, #33	; 0x21
 80072c8:	d13e      	bne.n	8007348 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072d2:	d114      	bne.n	80072fe <UART_Transmit_IT+0x48>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	691b      	ldr	r3, [r3, #16]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d110      	bne.n	80072fe <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6a1b      	ldr	r3, [r3, #32]
 80072e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	881b      	ldrh	r3, [r3, #0]
 80072e6:	461a      	mov	r2, r3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6a1b      	ldr	r3, [r3, #32]
 80072f6:	1c9a      	adds	r2, r3, #2
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	621a      	str	r2, [r3, #32]
 80072fc:	e008      	b.n	8007310 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6a1b      	ldr	r3, [r3, #32]
 8007302:	1c59      	adds	r1, r3, #1
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	6211      	str	r1, [r2, #32]
 8007308:	781a      	ldrb	r2, [r3, #0]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007314:	b29b      	uxth	r3, r3
 8007316:	3b01      	subs	r3, #1
 8007318:	b29b      	uxth	r3, r3
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	4619      	mov	r1, r3
 800731e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007320:	2b00      	cmp	r3, #0
 8007322:	d10f      	bne.n	8007344 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	68da      	ldr	r2, [r3, #12]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007332:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	68da      	ldr	r2, [r3, #12]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007342:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007344:	2300      	movs	r3, #0
 8007346:	e000      	b.n	800734a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007348:	2302      	movs	r3, #2
  }
}
 800734a:	4618      	mov	r0, r3
 800734c:	3714      	adds	r7, #20
 800734e:	46bd      	mov	sp, r7
 8007350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007354:	4770      	bx	lr

08007356 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007356:	b580      	push	{r7, lr}
 8007358:	b082      	sub	sp, #8
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	68da      	ldr	r2, [r3, #12]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800736c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2220      	movs	r2, #32
 8007372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f7ff fc64 	bl	8006c44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800737c:	2300      	movs	r3, #0
}
 800737e:	4618      	mov	r0, r3
 8007380:	3708      	adds	r7, #8
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}

08007386 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007386:	b580      	push	{r7, lr}
 8007388:	b08c      	sub	sp, #48	; 0x30
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007394:	b2db      	uxtb	r3, r3
 8007396:	2b22      	cmp	r3, #34	; 0x22
 8007398:	f040 80ab 	bne.w	80074f2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073a4:	d117      	bne.n	80073d6 <UART_Receive_IT+0x50>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	691b      	ldr	r3, [r3, #16]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d113      	bne.n	80073d6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80073ae:	2300      	movs	r3, #0
 80073b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	b29b      	uxth	r3, r3
 80073c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073c4:	b29a      	uxth	r2, r3
 80073c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ce:	1c9a      	adds	r2, r3, #2
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	629a      	str	r2, [r3, #40]	; 0x28
 80073d4:	e026      	b.n	8007424 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073da:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80073dc:	2300      	movs	r3, #0
 80073de:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073e8:	d007      	beq.n	80073fa <UART_Receive_IT+0x74>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d10a      	bne.n	8007408 <UART_Receive_IT+0x82>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	691b      	ldr	r3, [r3, #16]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d106      	bne.n	8007408 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	b2da      	uxtb	r2, r3
 8007402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007404:	701a      	strb	r2, [r3, #0]
 8007406:	e008      	b.n	800741a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	b2db      	uxtb	r3, r3
 8007410:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007414:	b2da      	uxtb	r2, r3
 8007416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007418:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800741e:	1c5a      	adds	r2, r3, #1
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007428:	b29b      	uxth	r3, r3
 800742a:	3b01      	subs	r3, #1
 800742c:	b29b      	uxth	r3, r3
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	4619      	mov	r1, r3
 8007432:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007434:	2b00      	cmp	r3, #0
 8007436:	d15a      	bne.n	80074ee <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	68da      	ldr	r2, [r3, #12]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f022 0220 	bic.w	r2, r2, #32
 8007446:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	68da      	ldr	r2, [r3, #12]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007456:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	695a      	ldr	r2, [r3, #20]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f022 0201 	bic.w	r2, r2, #1
 8007466:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2220      	movs	r2, #32
 800746c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007474:	2b01      	cmp	r3, #1
 8007476:	d135      	bne.n	80074e4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	330c      	adds	r3, #12
 8007484:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	e853 3f00 	ldrex	r3, [r3]
 800748c:	613b      	str	r3, [r7, #16]
   return(result);
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	f023 0310 	bic.w	r3, r3, #16
 8007494:	627b      	str	r3, [r7, #36]	; 0x24
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	330c      	adds	r3, #12
 800749c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800749e:	623a      	str	r2, [r7, #32]
 80074a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a2:	69f9      	ldr	r1, [r7, #28]
 80074a4:	6a3a      	ldr	r2, [r7, #32]
 80074a6:	e841 2300 	strex	r3, r2, [r1]
 80074aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80074ac:	69bb      	ldr	r3, [r7, #24]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d1e5      	bne.n	800747e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f003 0310 	and.w	r3, r3, #16
 80074bc:	2b10      	cmp	r3, #16
 80074be:	d10a      	bne.n	80074d6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80074c0:	2300      	movs	r3, #0
 80074c2:	60fb      	str	r3, [r7, #12]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	60fb      	str	r3, [r7, #12]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	60fb      	str	r3, [r7, #12]
 80074d4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80074da:	4619      	mov	r1, r3
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f7ff fbe3 	bl	8006ca8 <HAL_UARTEx_RxEventCallback>
 80074e2:	e002      	b.n	80074ea <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f7ff fbc1 	bl	8006c6c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80074ea:	2300      	movs	r3, #0
 80074ec:	e002      	b.n	80074f4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80074ee:	2300      	movs	r3, #0
 80074f0:	e000      	b.n	80074f4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80074f2:	2302      	movs	r3, #2
  }
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3730      	adds	r7, #48	; 0x30
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007500:	b0c0      	sub	sp, #256	; 0x100
 8007502:	af00      	add	r7, sp, #0
 8007504:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	691b      	ldr	r3, [r3, #16]
 8007510:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007518:	68d9      	ldr	r1, [r3, #12]
 800751a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	ea40 0301 	orr.w	r3, r0, r1
 8007524:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800752a:	689a      	ldr	r2, [r3, #8]
 800752c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007530:	691b      	ldr	r3, [r3, #16]
 8007532:	431a      	orrs	r2, r3
 8007534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007538:	695b      	ldr	r3, [r3, #20]
 800753a:	431a      	orrs	r2, r3
 800753c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007540:	69db      	ldr	r3, [r3, #28]
 8007542:	4313      	orrs	r3, r2
 8007544:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007554:	f021 010c 	bic.w	r1, r1, #12
 8007558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800755c:	681a      	ldr	r2, [r3, #0]
 800755e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007562:	430b      	orrs	r3, r1
 8007564:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	695b      	ldr	r3, [r3, #20]
 800756e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007576:	6999      	ldr	r1, [r3, #24]
 8007578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	ea40 0301 	orr.w	r3, r0, r1
 8007582:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	4b8f      	ldr	r3, [pc, #572]	; (80077c8 <UART_SetConfig+0x2cc>)
 800758c:	429a      	cmp	r2, r3
 800758e:	d005      	beq.n	800759c <UART_SetConfig+0xa0>
 8007590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	4b8d      	ldr	r3, [pc, #564]	; (80077cc <UART_SetConfig+0x2d0>)
 8007598:	429a      	cmp	r2, r3
 800759a:	d104      	bne.n	80075a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800759c:	f7fd fb04 	bl	8004ba8 <HAL_RCC_GetPCLK2Freq>
 80075a0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80075a4:	e003      	b.n	80075ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80075a6:	f7fd faeb 	bl	8004b80 <HAL_RCC_GetPCLK1Freq>
 80075aa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075b2:	69db      	ldr	r3, [r3, #28]
 80075b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075b8:	f040 810c 	bne.w	80077d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80075bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075c0:	2200      	movs	r2, #0
 80075c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80075c6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80075ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80075ce:	4622      	mov	r2, r4
 80075d0:	462b      	mov	r3, r5
 80075d2:	1891      	adds	r1, r2, r2
 80075d4:	65b9      	str	r1, [r7, #88]	; 0x58
 80075d6:	415b      	adcs	r3, r3
 80075d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80075de:	4621      	mov	r1, r4
 80075e0:	eb12 0801 	adds.w	r8, r2, r1
 80075e4:	4629      	mov	r1, r5
 80075e6:	eb43 0901 	adc.w	r9, r3, r1
 80075ea:	f04f 0200 	mov.w	r2, #0
 80075ee:	f04f 0300 	mov.w	r3, #0
 80075f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80075f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80075fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80075fe:	4690      	mov	r8, r2
 8007600:	4699      	mov	r9, r3
 8007602:	4623      	mov	r3, r4
 8007604:	eb18 0303 	adds.w	r3, r8, r3
 8007608:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800760c:	462b      	mov	r3, r5
 800760e:	eb49 0303 	adc.w	r3, r9, r3
 8007612:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	2200      	movs	r2, #0
 800761e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007622:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007626:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800762a:	460b      	mov	r3, r1
 800762c:	18db      	adds	r3, r3, r3
 800762e:	653b      	str	r3, [r7, #80]	; 0x50
 8007630:	4613      	mov	r3, r2
 8007632:	eb42 0303 	adc.w	r3, r2, r3
 8007636:	657b      	str	r3, [r7, #84]	; 0x54
 8007638:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800763c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007640:	f7f8 fe3e 	bl	80002c0 <__aeabi_uldivmod>
 8007644:	4602      	mov	r2, r0
 8007646:	460b      	mov	r3, r1
 8007648:	4b61      	ldr	r3, [pc, #388]	; (80077d0 <UART_SetConfig+0x2d4>)
 800764a:	fba3 2302 	umull	r2, r3, r3, r2
 800764e:	095b      	lsrs	r3, r3, #5
 8007650:	011c      	lsls	r4, r3, #4
 8007652:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007656:	2200      	movs	r2, #0
 8007658:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800765c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007660:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007664:	4642      	mov	r2, r8
 8007666:	464b      	mov	r3, r9
 8007668:	1891      	adds	r1, r2, r2
 800766a:	64b9      	str	r1, [r7, #72]	; 0x48
 800766c:	415b      	adcs	r3, r3
 800766e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007670:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007674:	4641      	mov	r1, r8
 8007676:	eb12 0a01 	adds.w	sl, r2, r1
 800767a:	4649      	mov	r1, r9
 800767c:	eb43 0b01 	adc.w	fp, r3, r1
 8007680:	f04f 0200 	mov.w	r2, #0
 8007684:	f04f 0300 	mov.w	r3, #0
 8007688:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800768c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007690:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007694:	4692      	mov	sl, r2
 8007696:	469b      	mov	fp, r3
 8007698:	4643      	mov	r3, r8
 800769a:	eb1a 0303 	adds.w	r3, sl, r3
 800769e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80076a2:	464b      	mov	r3, r9
 80076a4:	eb4b 0303 	adc.w	r3, fp, r3
 80076a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80076ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	2200      	movs	r2, #0
 80076b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80076b8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80076bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80076c0:	460b      	mov	r3, r1
 80076c2:	18db      	adds	r3, r3, r3
 80076c4:	643b      	str	r3, [r7, #64]	; 0x40
 80076c6:	4613      	mov	r3, r2
 80076c8:	eb42 0303 	adc.w	r3, r2, r3
 80076cc:	647b      	str	r3, [r7, #68]	; 0x44
 80076ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80076d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80076d6:	f7f8 fdf3 	bl	80002c0 <__aeabi_uldivmod>
 80076da:	4602      	mov	r2, r0
 80076dc:	460b      	mov	r3, r1
 80076de:	4611      	mov	r1, r2
 80076e0:	4b3b      	ldr	r3, [pc, #236]	; (80077d0 <UART_SetConfig+0x2d4>)
 80076e2:	fba3 2301 	umull	r2, r3, r3, r1
 80076e6:	095b      	lsrs	r3, r3, #5
 80076e8:	2264      	movs	r2, #100	; 0x64
 80076ea:	fb02 f303 	mul.w	r3, r2, r3
 80076ee:	1acb      	subs	r3, r1, r3
 80076f0:	00db      	lsls	r3, r3, #3
 80076f2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80076f6:	4b36      	ldr	r3, [pc, #216]	; (80077d0 <UART_SetConfig+0x2d4>)
 80076f8:	fba3 2302 	umull	r2, r3, r3, r2
 80076fc:	095b      	lsrs	r3, r3, #5
 80076fe:	005b      	lsls	r3, r3, #1
 8007700:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007704:	441c      	add	r4, r3
 8007706:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800770a:	2200      	movs	r2, #0
 800770c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007710:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007714:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007718:	4642      	mov	r2, r8
 800771a:	464b      	mov	r3, r9
 800771c:	1891      	adds	r1, r2, r2
 800771e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007720:	415b      	adcs	r3, r3
 8007722:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007724:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007728:	4641      	mov	r1, r8
 800772a:	1851      	adds	r1, r2, r1
 800772c:	6339      	str	r1, [r7, #48]	; 0x30
 800772e:	4649      	mov	r1, r9
 8007730:	414b      	adcs	r3, r1
 8007732:	637b      	str	r3, [r7, #52]	; 0x34
 8007734:	f04f 0200 	mov.w	r2, #0
 8007738:	f04f 0300 	mov.w	r3, #0
 800773c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007740:	4659      	mov	r1, fp
 8007742:	00cb      	lsls	r3, r1, #3
 8007744:	4651      	mov	r1, sl
 8007746:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800774a:	4651      	mov	r1, sl
 800774c:	00ca      	lsls	r2, r1, #3
 800774e:	4610      	mov	r0, r2
 8007750:	4619      	mov	r1, r3
 8007752:	4603      	mov	r3, r0
 8007754:	4642      	mov	r2, r8
 8007756:	189b      	adds	r3, r3, r2
 8007758:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800775c:	464b      	mov	r3, r9
 800775e:	460a      	mov	r2, r1
 8007760:	eb42 0303 	adc.w	r3, r2, r3
 8007764:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	2200      	movs	r2, #0
 8007770:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007774:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007778:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800777c:	460b      	mov	r3, r1
 800777e:	18db      	adds	r3, r3, r3
 8007780:	62bb      	str	r3, [r7, #40]	; 0x28
 8007782:	4613      	mov	r3, r2
 8007784:	eb42 0303 	adc.w	r3, r2, r3
 8007788:	62fb      	str	r3, [r7, #44]	; 0x2c
 800778a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800778e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007792:	f7f8 fd95 	bl	80002c0 <__aeabi_uldivmod>
 8007796:	4602      	mov	r2, r0
 8007798:	460b      	mov	r3, r1
 800779a:	4b0d      	ldr	r3, [pc, #52]	; (80077d0 <UART_SetConfig+0x2d4>)
 800779c:	fba3 1302 	umull	r1, r3, r3, r2
 80077a0:	095b      	lsrs	r3, r3, #5
 80077a2:	2164      	movs	r1, #100	; 0x64
 80077a4:	fb01 f303 	mul.w	r3, r1, r3
 80077a8:	1ad3      	subs	r3, r2, r3
 80077aa:	00db      	lsls	r3, r3, #3
 80077ac:	3332      	adds	r3, #50	; 0x32
 80077ae:	4a08      	ldr	r2, [pc, #32]	; (80077d0 <UART_SetConfig+0x2d4>)
 80077b0:	fba2 2303 	umull	r2, r3, r2, r3
 80077b4:	095b      	lsrs	r3, r3, #5
 80077b6:	f003 0207 	and.w	r2, r3, #7
 80077ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4422      	add	r2, r4
 80077c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80077c4:	e105      	b.n	80079d2 <UART_SetConfig+0x4d6>
 80077c6:	bf00      	nop
 80077c8:	40011000 	.word	0x40011000
 80077cc:	40011400 	.word	0x40011400
 80077d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80077d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077d8:	2200      	movs	r2, #0
 80077da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80077de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80077e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80077e6:	4642      	mov	r2, r8
 80077e8:	464b      	mov	r3, r9
 80077ea:	1891      	adds	r1, r2, r2
 80077ec:	6239      	str	r1, [r7, #32]
 80077ee:	415b      	adcs	r3, r3
 80077f0:	627b      	str	r3, [r7, #36]	; 0x24
 80077f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80077f6:	4641      	mov	r1, r8
 80077f8:	1854      	adds	r4, r2, r1
 80077fa:	4649      	mov	r1, r9
 80077fc:	eb43 0501 	adc.w	r5, r3, r1
 8007800:	f04f 0200 	mov.w	r2, #0
 8007804:	f04f 0300 	mov.w	r3, #0
 8007808:	00eb      	lsls	r3, r5, #3
 800780a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800780e:	00e2      	lsls	r2, r4, #3
 8007810:	4614      	mov	r4, r2
 8007812:	461d      	mov	r5, r3
 8007814:	4643      	mov	r3, r8
 8007816:	18e3      	adds	r3, r4, r3
 8007818:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800781c:	464b      	mov	r3, r9
 800781e:	eb45 0303 	adc.w	r3, r5, r3
 8007822:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	2200      	movs	r2, #0
 800782e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007832:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007836:	f04f 0200 	mov.w	r2, #0
 800783a:	f04f 0300 	mov.w	r3, #0
 800783e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007842:	4629      	mov	r1, r5
 8007844:	008b      	lsls	r3, r1, #2
 8007846:	4621      	mov	r1, r4
 8007848:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800784c:	4621      	mov	r1, r4
 800784e:	008a      	lsls	r2, r1, #2
 8007850:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007854:	f7f8 fd34 	bl	80002c0 <__aeabi_uldivmod>
 8007858:	4602      	mov	r2, r0
 800785a:	460b      	mov	r3, r1
 800785c:	4b60      	ldr	r3, [pc, #384]	; (80079e0 <UART_SetConfig+0x4e4>)
 800785e:	fba3 2302 	umull	r2, r3, r3, r2
 8007862:	095b      	lsrs	r3, r3, #5
 8007864:	011c      	lsls	r4, r3, #4
 8007866:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800786a:	2200      	movs	r2, #0
 800786c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007870:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007874:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007878:	4642      	mov	r2, r8
 800787a:	464b      	mov	r3, r9
 800787c:	1891      	adds	r1, r2, r2
 800787e:	61b9      	str	r1, [r7, #24]
 8007880:	415b      	adcs	r3, r3
 8007882:	61fb      	str	r3, [r7, #28]
 8007884:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007888:	4641      	mov	r1, r8
 800788a:	1851      	adds	r1, r2, r1
 800788c:	6139      	str	r1, [r7, #16]
 800788e:	4649      	mov	r1, r9
 8007890:	414b      	adcs	r3, r1
 8007892:	617b      	str	r3, [r7, #20]
 8007894:	f04f 0200 	mov.w	r2, #0
 8007898:	f04f 0300 	mov.w	r3, #0
 800789c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80078a0:	4659      	mov	r1, fp
 80078a2:	00cb      	lsls	r3, r1, #3
 80078a4:	4651      	mov	r1, sl
 80078a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80078aa:	4651      	mov	r1, sl
 80078ac:	00ca      	lsls	r2, r1, #3
 80078ae:	4610      	mov	r0, r2
 80078b0:	4619      	mov	r1, r3
 80078b2:	4603      	mov	r3, r0
 80078b4:	4642      	mov	r2, r8
 80078b6:	189b      	adds	r3, r3, r2
 80078b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80078bc:	464b      	mov	r3, r9
 80078be:	460a      	mov	r2, r1
 80078c0:	eb42 0303 	adc.w	r3, r2, r3
 80078c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80078c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	2200      	movs	r2, #0
 80078d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80078d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80078d4:	f04f 0200 	mov.w	r2, #0
 80078d8:	f04f 0300 	mov.w	r3, #0
 80078dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80078e0:	4649      	mov	r1, r9
 80078e2:	008b      	lsls	r3, r1, #2
 80078e4:	4641      	mov	r1, r8
 80078e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80078ea:	4641      	mov	r1, r8
 80078ec:	008a      	lsls	r2, r1, #2
 80078ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80078f2:	f7f8 fce5 	bl	80002c0 <__aeabi_uldivmod>
 80078f6:	4602      	mov	r2, r0
 80078f8:	460b      	mov	r3, r1
 80078fa:	4b39      	ldr	r3, [pc, #228]	; (80079e0 <UART_SetConfig+0x4e4>)
 80078fc:	fba3 1302 	umull	r1, r3, r3, r2
 8007900:	095b      	lsrs	r3, r3, #5
 8007902:	2164      	movs	r1, #100	; 0x64
 8007904:	fb01 f303 	mul.w	r3, r1, r3
 8007908:	1ad3      	subs	r3, r2, r3
 800790a:	011b      	lsls	r3, r3, #4
 800790c:	3332      	adds	r3, #50	; 0x32
 800790e:	4a34      	ldr	r2, [pc, #208]	; (80079e0 <UART_SetConfig+0x4e4>)
 8007910:	fba2 2303 	umull	r2, r3, r2, r3
 8007914:	095b      	lsrs	r3, r3, #5
 8007916:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800791a:	441c      	add	r4, r3
 800791c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007920:	2200      	movs	r2, #0
 8007922:	673b      	str	r3, [r7, #112]	; 0x70
 8007924:	677a      	str	r2, [r7, #116]	; 0x74
 8007926:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800792a:	4642      	mov	r2, r8
 800792c:	464b      	mov	r3, r9
 800792e:	1891      	adds	r1, r2, r2
 8007930:	60b9      	str	r1, [r7, #8]
 8007932:	415b      	adcs	r3, r3
 8007934:	60fb      	str	r3, [r7, #12]
 8007936:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800793a:	4641      	mov	r1, r8
 800793c:	1851      	adds	r1, r2, r1
 800793e:	6039      	str	r1, [r7, #0]
 8007940:	4649      	mov	r1, r9
 8007942:	414b      	adcs	r3, r1
 8007944:	607b      	str	r3, [r7, #4]
 8007946:	f04f 0200 	mov.w	r2, #0
 800794a:	f04f 0300 	mov.w	r3, #0
 800794e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007952:	4659      	mov	r1, fp
 8007954:	00cb      	lsls	r3, r1, #3
 8007956:	4651      	mov	r1, sl
 8007958:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800795c:	4651      	mov	r1, sl
 800795e:	00ca      	lsls	r2, r1, #3
 8007960:	4610      	mov	r0, r2
 8007962:	4619      	mov	r1, r3
 8007964:	4603      	mov	r3, r0
 8007966:	4642      	mov	r2, r8
 8007968:	189b      	adds	r3, r3, r2
 800796a:	66bb      	str	r3, [r7, #104]	; 0x68
 800796c:	464b      	mov	r3, r9
 800796e:	460a      	mov	r2, r1
 8007970:	eb42 0303 	adc.w	r3, r2, r3
 8007974:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	663b      	str	r3, [r7, #96]	; 0x60
 8007980:	667a      	str	r2, [r7, #100]	; 0x64
 8007982:	f04f 0200 	mov.w	r2, #0
 8007986:	f04f 0300 	mov.w	r3, #0
 800798a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800798e:	4649      	mov	r1, r9
 8007990:	008b      	lsls	r3, r1, #2
 8007992:	4641      	mov	r1, r8
 8007994:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007998:	4641      	mov	r1, r8
 800799a:	008a      	lsls	r2, r1, #2
 800799c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80079a0:	f7f8 fc8e 	bl	80002c0 <__aeabi_uldivmod>
 80079a4:	4602      	mov	r2, r0
 80079a6:	460b      	mov	r3, r1
 80079a8:	4b0d      	ldr	r3, [pc, #52]	; (80079e0 <UART_SetConfig+0x4e4>)
 80079aa:	fba3 1302 	umull	r1, r3, r3, r2
 80079ae:	095b      	lsrs	r3, r3, #5
 80079b0:	2164      	movs	r1, #100	; 0x64
 80079b2:	fb01 f303 	mul.w	r3, r1, r3
 80079b6:	1ad3      	subs	r3, r2, r3
 80079b8:	011b      	lsls	r3, r3, #4
 80079ba:	3332      	adds	r3, #50	; 0x32
 80079bc:	4a08      	ldr	r2, [pc, #32]	; (80079e0 <UART_SetConfig+0x4e4>)
 80079be:	fba2 2303 	umull	r2, r3, r2, r3
 80079c2:	095b      	lsrs	r3, r3, #5
 80079c4:	f003 020f 	and.w	r2, r3, #15
 80079c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4422      	add	r2, r4
 80079d0:	609a      	str	r2, [r3, #8]
}
 80079d2:	bf00      	nop
 80079d4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80079d8:	46bd      	mov	sp, r7
 80079da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80079de:	bf00      	nop
 80079e0:	51eb851f 	.word	0x51eb851f

080079e4 <__NVIC_SetPriority>:
{
 80079e4:	b480      	push	{r7}
 80079e6:	b083      	sub	sp, #12
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	4603      	mov	r3, r0
 80079ec:	6039      	str	r1, [r7, #0]
 80079ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80079f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	db0a      	blt.n	8007a0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	b2da      	uxtb	r2, r3
 80079fc:	490c      	ldr	r1, [pc, #48]	; (8007a30 <__NVIC_SetPriority+0x4c>)
 80079fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a02:	0112      	lsls	r2, r2, #4
 8007a04:	b2d2      	uxtb	r2, r2
 8007a06:	440b      	add	r3, r1
 8007a08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007a0c:	e00a      	b.n	8007a24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	b2da      	uxtb	r2, r3
 8007a12:	4908      	ldr	r1, [pc, #32]	; (8007a34 <__NVIC_SetPriority+0x50>)
 8007a14:	79fb      	ldrb	r3, [r7, #7]
 8007a16:	f003 030f 	and.w	r3, r3, #15
 8007a1a:	3b04      	subs	r3, #4
 8007a1c:	0112      	lsls	r2, r2, #4
 8007a1e:	b2d2      	uxtb	r2, r2
 8007a20:	440b      	add	r3, r1
 8007a22:	761a      	strb	r2, [r3, #24]
}
 8007a24:	bf00      	nop
 8007a26:	370c      	adds	r7, #12
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr
 8007a30:	e000e100 	.word	0xe000e100
 8007a34:	e000ed00 	.word	0xe000ed00

08007a38 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007a3c:	4b05      	ldr	r3, [pc, #20]	; (8007a54 <SysTick_Handler+0x1c>)
 8007a3e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007a40:	f002 fe0a 	bl	800a658 <xTaskGetSchedulerState>
 8007a44:	4603      	mov	r3, r0
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d001      	beq.n	8007a4e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007a4a:	f003 fdad 	bl	800b5a8 <xPortSysTickHandler>
  }
}
 8007a4e:	bf00      	nop
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	bf00      	nop
 8007a54:	e000e010 	.word	0xe000e010

08007a58 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007a5c:	2100      	movs	r1, #0
 8007a5e:	f06f 0004 	mvn.w	r0, #4
 8007a62:	f7ff ffbf 	bl	80079e4 <__NVIC_SetPriority>
#endif
}
 8007a66:	bf00      	nop
 8007a68:	bd80      	pop	{r7, pc}
	...

08007a6c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007a6c:	b480      	push	{r7}
 8007a6e:	b083      	sub	sp, #12
 8007a70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a72:	f3ef 8305 	mrs	r3, IPSR
 8007a76:	603b      	str	r3, [r7, #0]
  return(result);
 8007a78:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d003      	beq.n	8007a86 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007a7e:	f06f 0305 	mvn.w	r3, #5
 8007a82:	607b      	str	r3, [r7, #4]
 8007a84:	e00c      	b.n	8007aa0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007a86:	4b0a      	ldr	r3, [pc, #40]	; (8007ab0 <osKernelInitialize+0x44>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d105      	bne.n	8007a9a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007a8e:	4b08      	ldr	r3, [pc, #32]	; (8007ab0 <osKernelInitialize+0x44>)
 8007a90:	2201      	movs	r2, #1
 8007a92:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007a94:	2300      	movs	r3, #0
 8007a96:	607b      	str	r3, [r7, #4]
 8007a98:	e002      	b.n	8007aa0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a9e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007aa0:	687b      	ldr	r3, [r7, #4]
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	370c      	adds	r7, #12
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr
 8007aae:	bf00      	nop
 8007ab0:	200006f4 	.word	0x200006f4

08007ab4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b082      	sub	sp, #8
 8007ab8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007aba:	f3ef 8305 	mrs	r3, IPSR
 8007abe:	603b      	str	r3, [r7, #0]
  return(result);
 8007ac0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d003      	beq.n	8007ace <osKernelStart+0x1a>
    stat = osErrorISR;
 8007ac6:	f06f 0305 	mvn.w	r3, #5
 8007aca:	607b      	str	r3, [r7, #4]
 8007acc:	e010      	b.n	8007af0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007ace:	4b0b      	ldr	r3, [pc, #44]	; (8007afc <osKernelStart+0x48>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d109      	bne.n	8007aea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007ad6:	f7ff ffbf 	bl	8007a58 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007ada:	4b08      	ldr	r3, [pc, #32]	; (8007afc <osKernelStart+0x48>)
 8007adc:	2202      	movs	r2, #2
 8007ade:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007ae0:	f002 f962 	bl	8009da8 <vTaskStartScheduler>
      stat = osOK;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	607b      	str	r3, [r7, #4]
 8007ae8:	e002      	b.n	8007af0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007aea:	f04f 33ff 	mov.w	r3, #4294967295
 8007aee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007af0:	687b      	ldr	r3, [r7, #4]
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3708      	adds	r7, #8
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}
 8007afa:	bf00      	nop
 8007afc:	200006f4 	.word	0x200006f4

08007b00 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b08e      	sub	sp, #56	; 0x38
 8007b04:	af04      	add	r7, sp, #16
 8007b06:	60f8      	str	r0, [r7, #12]
 8007b08:	60b9      	str	r1, [r7, #8]
 8007b0a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b10:	f3ef 8305 	mrs	r3, IPSR
 8007b14:	617b      	str	r3, [r7, #20]
  return(result);
 8007b16:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d17e      	bne.n	8007c1a <osThreadNew+0x11a>
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d07b      	beq.n	8007c1a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007b22:	2380      	movs	r3, #128	; 0x80
 8007b24:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007b26:	2318      	movs	r3, #24
 8007b28:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8007b32:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d045      	beq.n	8007bc6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d002      	beq.n	8007b48 <osThreadNew+0x48>
        name = attr->name;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	699b      	ldr	r3, [r3, #24]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d002      	beq.n	8007b56 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	699b      	ldr	r3, [r3, #24]
 8007b54:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007b56:	69fb      	ldr	r3, [r7, #28]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d008      	beq.n	8007b6e <osThreadNew+0x6e>
 8007b5c:	69fb      	ldr	r3, [r7, #28]
 8007b5e:	2b38      	cmp	r3, #56	; 0x38
 8007b60:	d805      	bhi.n	8007b6e <osThreadNew+0x6e>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	f003 0301 	and.w	r3, r3, #1
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d001      	beq.n	8007b72 <osThreadNew+0x72>
        return (NULL);
 8007b6e:	2300      	movs	r3, #0
 8007b70:	e054      	b.n	8007c1c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	695b      	ldr	r3, [r3, #20]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d003      	beq.n	8007b82 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	695b      	ldr	r3, [r3, #20]
 8007b7e:	089b      	lsrs	r3, r3, #2
 8007b80:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d00e      	beq.n	8007ba8 <osThreadNew+0xa8>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	68db      	ldr	r3, [r3, #12]
 8007b8e:	2b5b      	cmp	r3, #91	; 0x5b
 8007b90:	d90a      	bls.n	8007ba8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d006      	beq.n	8007ba8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	695b      	ldr	r3, [r3, #20]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d002      	beq.n	8007ba8 <osThreadNew+0xa8>
        mem = 1;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	61bb      	str	r3, [r7, #24]
 8007ba6:	e010      	b.n	8007bca <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d10c      	bne.n	8007bca <osThreadNew+0xca>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	68db      	ldr	r3, [r3, #12]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d108      	bne.n	8007bca <osThreadNew+0xca>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	691b      	ldr	r3, [r3, #16]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d104      	bne.n	8007bca <osThreadNew+0xca>
          mem = 0;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	61bb      	str	r3, [r7, #24]
 8007bc4:	e001      	b.n	8007bca <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007bca:	69bb      	ldr	r3, [r7, #24]
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d110      	bne.n	8007bf2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007bd8:	9202      	str	r2, [sp, #8]
 8007bda:	9301      	str	r3, [sp, #4]
 8007bdc:	69fb      	ldr	r3, [r7, #28]
 8007bde:	9300      	str	r3, [sp, #0]
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	6a3a      	ldr	r2, [r7, #32]
 8007be4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007be6:	68f8      	ldr	r0, [r7, #12]
 8007be8:	f001 fe30 	bl	800984c <xTaskCreateStatic>
 8007bec:	4603      	mov	r3, r0
 8007bee:	613b      	str	r3, [r7, #16]
 8007bf0:	e013      	b.n	8007c1a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007bf2:	69bb      	ldr	r3, [r7, #24]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d110      	bne.n	8007c1a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007bf8:	6a3b      	ldr	r3, [r7, #32]
 8007bfa:	b29a      	uxth	r2, r3
 8007bfc:	f107 0310 	add.w	r3, r7, #16
 8007c00:	9301      	str	r3, [sp, #4]
 8007c02:	69fb      	ldr	r3, [r7, #28]
 8007c04:	9300      	str	r3, [sp, #0]
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007c0a:	68f8      	ldr	r0, [r7, #12]
 8007c0c:	f001 fe7b 	bl	8009906 <xTaskCreate>
 8007c10:	4603      	mov	r3, r0
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d001      	beq.n	8007c1a <osThreadNew+0x11a>
            hTask = NULL;
 8007c16:	2300      	movs	r3, #0
 8007c18:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007c1a:	693b      	ldr	r3, [r7, #16]
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3728      	adds	r7, #40	; 0x28
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}

08007c24 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b086      	sub	sp, #24
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c30:	f3ef 8305 	mrs	r3, IPSR
 8007c34:	60bb      	str	r3, [r7, #8]
  return(result);
 8007c36:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d003      	beq.n	8007c44 <osThreadTerminate+0x20>
    stat = osErrorISR;
 8007c3c:	f06f 0305 	mvn.w	r3, #5
 8007c40:	617b      	str	r3, [r7, #20]
 8007c42:	e017      	b.n	8007c74 <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d103      	bne.n	8007c52 <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 8007c4a:	f06f 0303 	mvn.w	r3, #3
 8007c4e:	617b      	str	r3, [r7, #20]
 8007c50:	e010      	b.n	8007c74 <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 8007c52:	6938      	ldr	r0, [r7, #16]
 8007c54:	f002 f842 	bl	8009cdc <eTaskGetState>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 8007c5c:	7bfb      	ldrb	r3, [r7, #15]
 8007c5e:	2b04      	cmp	r3, #4
 8007c60:	d005      	beq.n	8007c6e <osThreadTerminate+0x4a>
      stat = osOK;
 8007c62:	2300      	movs	r3, #0
 8007c64:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 8007c66:	6938      	ldr	r0, [r7, #16]
 8007c68:	f001 ff92 	bl	8009b90 <vTaskDelete>
 8007c6c:	e002      	b.n	8007c74 <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 8007c6e:	f06f 0302 	mvn.w	r3, #2
 8007c72:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 8007c74:	697b      	ldr	r3, [r7, #20]
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3718      	adds	r7, #24
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}

08007c7e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007c7e:	b580      	push	{r7, lr}
 8007c80:	b084      	sub	sp, #16
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c86:	f3ef 8305 	mrs	r3, IPSR
 8007c8a:	60bb      	str	r3, [r7, #8]
  return(result);
 8007c8c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d003      	beq.n	8007c9a <osDelay+0x1c>
    stat = osErrorISR;
 8007c92:	f06f 0305 	mvn.w	r3, #5
 8007c96:	60fb      	str	r3, [r7, #12]
 8007c98:	e007      	b.n	8007caa <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d002      	beq.n	8007caa <osDelay+0x2c>
      vTaskDelay(ticks);
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f001 ffe5 	bl	8009c74 <vTaskDelay>
    }
  }

  return (stat);
 8007caa:	68fb      	ldr	r3, [r7, #12]
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3710      	adds	r7, #16
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b084      	sub	sp, #16
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f003 fa91 	bl	800b1e4 <pvTimerGetTimerID>
 8007cc2:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d005      	beq.n	8007cd6 <TimerCallback+0x22>
    callb->func (callb->arg);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	68fa      	ldr	r2, [r7, #12]
 8007cd0:	6852      	ldr	r2, [r2, #4]
 8007cd2:	4610      	mov	r0, r2
 8007cd4:	4798      	blx	r3
  }
}
 8007cd6:	bf00      	nop
 8007cd8:	3710      	adds	r7, #16
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
	...

08007ce0 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b08c      	sub	sp, #48	; 0x30
 8007ce4:	af02      	add	r7, sp, #8
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	607a      	str	r2, [r7, #4]
 8007cea:	603b      	str	r3, [r7, #0]
 8007cec:	460b      	mov	r3, r1
 8007cee:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007cf4:	f3ef 8305 	mrs	r3, IPSR
 8007cf8:	613b      	str	r3, [r7, #16]
  return(result);
 8007cfa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d163      	bne.n	8007dc8 <osTimerNew+0xe8>
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d060      	beq.n	8007dc8 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8007d06:	2008      	movs	r0, #8
 8007d08:	f003 fcde 	bl	800b6c8 <pvPortMalloc>
 8007d0c:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d059      	beq.n	8007dc8 <osTimerNew+0xe8>
      callb->func = func;
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	68fa      	ldr	r2, [r7, #12]
 8007d18:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8007d20:	7afb      	ldrb	r3, [r7, #11]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d102      	bne.n	8007d2c <osTimerNew+0x4c>
        reload = pdFALSE;
 8007d26:	2300      	movs	r3, #0
 8007d28:	61fb      	str	r3, [r7, #28]
 8007d2a:	e001      	b.n	8007d30 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8007d30:	f04f 33ff 	mov.w	r3, #4294967295
 8007d34:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8007d36:	2300      	movs	r3, #0
 8007d38:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d01c      	beq.n	8007d7a <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d002      	beq.n	8007d4e <osTimerNew+0x6e>
          name = attr->name;
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d006      	beq.n	8007d64 <osTimerNew+0x84>
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	68db      	ldr	r3, [r3, #12]
 8007d5a:	2b2b      	cmp	r3, #43	; 0x2b
 8007d5c:	d902      	bls.n	8007d64 <osTimerNew+0x84>
          mem = 1;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	61bb      	str	r3, [r7, #24]
 8007d62:	e00c      	b.n	8007d7e <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d108      	bne.n	8007d7e <osTimerNew+0x9e>
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d104      	bne.n	8007d7e <osTimerNew+0x9e>
            mem = 0;
 8007d74:	2300      	movs	r3, #0
 8007d76:	61bb      	str	r3, [r7, #24]
 8007d78:	e001      	b.n	8007d7e <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8007d7e:	69bb      	ldr	r3, [r7, #24]
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d10c      	bne.n	8007d9e <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	9301      	str	r3, [sp, #4]
 8007d8a:	4b12      	ldr	r3, [pc, #72]	; (8007dd4 <osTimerNew+0xf4>)
 8007d8c:	9300      	str	r3, [sp, #0]
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	69fa      	ldr	r2, [r7, #28]
 8007d92:	2101      	movs	r1, #1
 8007d94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007d96:	f002 fea6 	bl	800aae6 <xTimerCreateStatic>
 8007d9a:	6238      	str	r0, [r7, #32]
 8007d9c:	e00b      	b.n	8007db6 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8007d9e:	69bb      	ldr	r3, [r7, #24]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d108      	bne.n	8007db6 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8007da4:	4b0b      	ldr	r3, [pc, #44]	; (8007dd4 <osTimerNew+0xf4>)
 8007da6:	9300      	str	r3, [sp, #0]
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	69fa      	ldr	r2, [r7, #28]
 8007dac:	2101      	movs	r1, #1
 8007dae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007db0:	f002 fe78 	bl	800aaa4 <xTimerCreate>
 8007db4:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8007db6:	6a3b      	ldr	r3, [r7, #32]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d105      	bne.n	8007dc8 <osTimerNew+0xe8>
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d002      	beq.n	8007dc8 <osTimerNew+0xe8>
        vPortFree (callb);
 8007dc2:	6978      	ldr	r0, [r7, #20]
 8007dc4:	f003 fd4c 	bl	800b860 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8007dc8:	6a3b      	ldr	r3, [r7, #32]
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3728      	adds	r7, #40	; 0x28
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
 8007dd2:	bf00      	nop
 8007dd4:	08007cb5 	.word	0x08007cb5

08007dd8 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b088      	sub	sp, #32
 8007ddc:	af02      	add	r7, sp, #8
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007de6:	f3ef 8305 	mrs	r3, IPSR
 8007dea:	60fb      	str	r3, [r7, #12]
  return(result);
 8007dec:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d003      	beq.n	8007dfa <osTimerStart+0x22>
    stat = osErrorISR;
 8007df2:	f06f 0305 	mvn.w	r3, #5
 8007df6:	617b      	str	r3, [r7, #20]
 8007df8:	e017      	b.n	8007e2a <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d103      	bne.n	8007e08 <osTimerStart+0x30>
    stat = osErrorParameter;
 8007e00:	f06f 0303 	mvn.w	r3, #3
 8007e04:	617b      	str	r3, [r7, #20]
 8007e06:	e010      	b.n	8007e2a <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8007e08:	2300      	movs	r3, #0
 8007e0a:	9300      	str	r3, [sp, #0]
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	683a      	ldr	r2, [r7, #0]
 8007e10:	2104      	movs	r1, #4
 8007e12:	6938      	ldr	r0, [r7, #16]
 8007e14:	f002 fee0 	bl	800abd8 <xTimerGenericCommand>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	d102      	bne.n	8007e24 <osTimerStart+0x4c>
      stat = osOK;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	617b      	str	r3, [r7, #20]
 8007e22:	e002      	b.n	8007e2a <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8007e24:	f06f 0302 	mvn.w	r3, #2
 8007e28:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8007e2a:	697b      	ldr	r3, [r7, #20]
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3718      	adds	r7, #24
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b088      	sub	sp, #32
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e40:	f3ef 8305 	mrs	r3, IPSR
 8007e44:	60bb      	str	r3, [r7, #8]
  return(result);
 8007e46:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d174      	bne.n	8007f36 <osMutexNew+0x102>
    if (attr != NULL) {
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d003      	beq.n	8007e5a <osMutexNew+0x26>
      type = attr->attr_bits;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	61bb      	str	r3, [r7, #24]
 8007e58:	e001      	b.n	8007e5e <osMutexNew+0x2a>
    } else {
      type = 0U;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8007e5e:	69bb      	ldr	r3, [r7, #24]
 8007e60:	f003 0301 	and.w	r3, r3, #1
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d002      	beq.n	8007e6e <osMutexNew+0x3a>
      rmtx = 1U;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	617b      	str	r3, [r7, #20]
 8007e6c:	e001      	b.n	8007e72 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8007e72:	69bb      	ldr	r3, [r7, #24]
 8007e74:	f003 0308 	and.w	r3, r3, #8
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d15c      	bne.n	8007f36 <osMutexNew+0x102>
      mem = -1;
 8007e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8007e80:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d015      	beq.n	8007eb4 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d006      	beq.n	8007e9e <osMutexNew+0x6a>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	68db      	ldr	r3, [r3, #12]
 8007e94:	2b4f      	cmp	r3, #79	; 0x4f
 8007e96:	d902      	bls.n	8007e9e <osMutexNew+0x6a>
          mem = 1;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	613b      	str	r3, [r7, #16]
 8007e9c:	e00c      	b.n	8007eb8 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d108      	bne.n	8007eb8 <osMutexNew+0x84>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	68db      	ldr	r3, [r3, #12]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d104      	bne.n	8007eb8 <osMutexNew+0x84>
            mem = 0;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	613b      	str	r3, [r7, #16]
 8007eb2:	e001      	b.n	8007eb8 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	d112      	bne.n	8007ee4 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d007      	beq.n	8007ed4 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	689b      	ldr	r3, [r3, #8]
 8007ec8:	4619      	mov	r1, r3
 8007eca:	2004      	movs	r0, #4
 8007ecc:	f000 fd69 	bl	80089a2 <xQueueCreateMutexStatic>
 8007ed0:	61f8      	str	r0, [r7, #28]
 8007ed2:	e016      	b.n	8007f02 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	4619      	mov	r1, r3
 8007eda:	2001      	movs	r0, #1
 8007edc:	f000 fd61 	bl	80089a2 <xQueueCreateMutexStatic>
 8007ee0:	61f8      	str	r0, [r7, #28]
 8007ee2:	e00e      	b.n	8007f02 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d10b      	bne.n	8007f02 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d004      	beq.n	8007efa <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8007ef0:	2004      	movs	r0, #4
 8007ef2:	f000 fd3e 	bl	8008972 <xQueueCreateMutex>
 8007ef6:	61f8      	str	r0, [r7, #28]
 8007ef8:	e003      	b.n	8007f02 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8007efa:	2001      	movs	r0, #1
 8007efc:	f000 fd39 	bl	8008972 <xQueueCreateMutex>
 8007f00:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8007f02:	69fb      	ldr	r3, [r7, #28]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d00c      	beq.n	8007f22 <osMutexNew+0xee>
        if (attr != NULL) {
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d003      	beq.n	8007f16 <osMutexNew+0xe2>
          name = attr->name;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	60fb      	str	r3, [r7, #12]
 8007f14:	e001      	b.n	8007f1a <osMutexNew+0xe6>
        } else {
          name = NULL;
 8007f16:	2300      	movs	r3, #0
 8007f18:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8007f1a:	68f9      	ldr	r1, [r7, #12]
 8007f1c:	69f8      	ldr	r0, [r7, #28]
 8007f1e:	f001 fc0d 	bl	800973c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8007f22:	69fb      	ldr	r3, [r7, #28]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d006      	beq.n	8007f36 <osMutexNew+0x102>
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d003      	beq.n	8007f36 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007f2e:	69fb      	ldr	r3, [r7, #28]
 8007f30:	f043 0301 	orr.w	r3, r3, #1
 8007f34:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8007f36:	69fb      	ldr	r3, [r7, #28]
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3720      	adds	r7, #32
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}

08007f40 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b086      	sub	sp, #24
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f023 0301 	bic.w	r3, r3, #1
 8007f50:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f003 0301 	and.w	r3, r3, #1
 8007f58:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f5e:	f3ef 8305 	mrs	r3, IPSR
 8007f62:	60bb      	str	r3, [r7, #8]
  return(result);
 8007f64:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d003      	beq.n	8007f72 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8007f6a:	f06f 0305 	mvn.w	r3, #5
 8007f6e:	617b      	str	r3, [r7, #20]
 8007f70:	e02c      	b.n	8007fcc <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d103      	bne.n	8007f80 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8007f78:	f06f 0303 	mvn.w	r3, #3
 8007f7c:	617b      	str	r3, [r7, #20]
 8007f7e:	e025      	b.n	8007fcc <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d011      	beq.n	8007faa <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8007f86:	6839      	ldr	r1, [r7, #0]
 8007f88:	6938      	ldr	r0, [r7, #16]
 8007f8a:	f000 fd59 	bl	8008a40 <xQueueTakeMutexRecursive>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	d01b      	beq.n	8007fcc <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d003      	beq.n	8007fa2 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8007f9a:	f06f 0301 	mvn.w	r3, #1
 8007f9e:	617b      	str	r3, [r7, #20]
 8007fa0:	e014      	b.n	8007fcc <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8007fa2:	f06f 0302 	mvn.w	r3, #2
 8007fa6:	617b      	str	r3, [r7, #20]
 8007fa8:	e010      	b.n	8007fcc <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8007faa:	6839      	ldr	r1, [r7, #0]
 8007fac:	6938      	ldr	r0, [r7, #16]
 8007fae:	f001 f8ed 	bl	800918c <xQueueSemaphoreTake>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d009      	beq.n	8007fcc <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d003      	beq.n	8007fc6 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8007fbe:	f06f 0301 	mvn.w	r3, #1
 8007fc2:	617b      	str	r3, [r7, #20]
 8007fc4:	e002      	b.n	8007fcc <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8007fc6:	f06f 0302 	mvn.w	r3, #2
 8007fca:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8007fcc:	697b      	ldr	r3, [r7, #20]
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3718      	adds	r7, #24
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}

08007fd6 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8007fd6:	b580      	push	{r7, lr}
 8007fd8:	b086      	sub	sp, #24
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f023 0301 	bic.w	r3, r3, #1
 8007fe4:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f003 0301 	and.w	r3, r3, #1
 8007fec:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ff2:	f3ef 8305 	mrs	r3, IPSR
 8007ff6:	60bb      	str	r3, [r7, #8]
  return(result);
 8007ff8:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d003      	beq.n	8008006 <osMutexRelease+0x30>
    stat = osErrorISR;
 8007ffe:	f06f 0305 	mvn.w	r3, #5
 8008002:	617b      	str	r3, [r7, #20]
 8008004:	e01f      	b.n	8008046 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d103      	bne.n	8008014 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800800c:	f06f 0303 	mvn.w	r3, #3
 8008010:	617b      	str	r3, [r7, #20]
 8008012:	e018      	b.n	8008046 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d009      	beq.n	800802e <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800801a:	6938      	ldr	r0, [r7, #16]
 800801c:	f000 fcdc 	bl	80089d8 <xQueueGiveMutexRecursive>
 8008020:	4603      	mov	r3, r0
 8008022:	2b01      	cmp	r3, #1
 8008024:	d00f      	beq.n	8008046 <osMutexRelease+0x70>
        stat = osErrorResource;
 8008026:	f06f 0302 	mvn.w	r3, #2
 800802a:	617b      	str	r3, [r7, #20]
 800802c:	e00b      	b.n	8008046 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800802e:	2300      	movs	r3, #0
 8008030:	2200      	movs	r2, #0
 8008032:	2100      	movs	r1, #0
 8008034:	6938      	ldr	r0, [r7, #16]
 8008036:	f000 fda3 	bl	8008b80 <xQueueGenericSend>
 800803a:	4603      	mov	r3, r0
 800803c:	2b01      	cmp	r3, #1
 800803e:	d002      	beq.n	8008046 <osMutexRelease+0x70>
        stat = osErrorResource;
 8008040:	f06f 0302 	mvn.w	r3, #2
 8008044:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008046:	697b      	ldr	r3, [r7, #20]
}
 8008048:	4618      	mov	r0, r3
 800804a:	3718      	adds	r7, #24
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}

08008050 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008050:	b580      	push	{r7, lr}
 8008052:	b08a      	sub	sp, #40	; 0x28
 8008054:	af02      	add	r7, sp, #8
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	60b9      	str	r1, [r7, #8]
 800805a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800805c:	2300      	movs	r3, #0
 800805e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008060:	f3ef 8305 	mrs	r3, IPSR
 8008064:	613b      	str	r3, [r7, #16]
  return(result);
 8008066:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008068:	2b00      	cmp	r3, #0
 800806a:	d175      	bne.n	8008158 <osSemaphoreNew+0x108>
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d072      	beq.n	8008158 <osSemaphoreNew+0x108>
 8008072:	68ba      	ldr	r2, [r7, #8]
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	429a      	cmp	r2, r3
 8008078:	d86e      	bhi.n	8008158 <osSemaphoreNew+0x108>
    mem = -1;
 800807a:	f04f 33ff 	mov.w	r3, #4294967295
 800807e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d015      	beq.n	80080b2 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	689b      	ldr	r3, [r3, #8]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d006      	beq.n	800809c <osSemaphoreNew+0x4c>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	68db      	ldr	r3, [r3, #12]
 8008092:	2b4f      	cmp	r3, #79	; 0x4f
 8008094:	d902      	bls.n	800809c <osSemaphoreNew+0x4c>
        mem = 1;
 8008096:	2301      	movs	r3, #1
 8008098:	61bb      	str	r3, [r7, #24]
 800809a:	e00c      	b.n	80080b6 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	689b      	ldr	r3, [r3, #8]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d108      	bne.n	80080b6 <osSemaphoreNew+0x66>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	68db      	ldr	r3, [r3, #12]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d104      	bne.n	80080b6 <osSemaphoreNew+0x66>
          mem = 0;
 80080ac:	2300      	movs	r3, #0
 80080ae:	61bb      	str	r3, [r7, #24]
 80080b0:	e001      	b.n	80080b6 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80080b2:	2300      	movs	r3, #0
 80080b4:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80080b6:	69bb      	ldr	r3, [r7, #24]
 80080b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080bc:	d04c      	beq.n	8008158 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d128      	bne.n	8008116 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80080c4:	69bb      	ldr	r3, [r7, #24]
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d10a      	bne.n	80080e0 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	689b      	ldr	r3, [r3, #8]
 80080ce:	2203      	movs	r2, #3
 80080d0:	9200      	str	r2, [sp, #0]
 80080d2:	2200      	movs	r2, #0
 80080d4:	2100      	movs	r1, #0
 80080d6:	2001      	movs	r0, #1
 80080d8:	f000 fb5c 	bl	8008794 <xQueueGenericCreateStatic>
 80080dc:	61f8      	str	r0, [r7, #28]
 80080de:	e005      	b.n	80080ec <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80080e0:	2203      	movs	r2, #3
 80080e2:	2100      	movs	r1, #0
 80080e4:	2001      	movs	r0, #1
 80080e6:	f000 fbcd 	bl	8008884 <xQueueGenericCreate>
 80080ea:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80080ec:	69fb      	ldr	r3, [r7, #28]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d022      	beq.n	8008138 <osSemaphoreNew+0xe8>
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d01f      	beq.n	8008138 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80080f8:	2300      	movs	r3, #0
 80080fa:	2200      	movs	r2, #0
 80080fc:	2100      	movs	r1, #0
 80080fe:	69f8      	ldr	r0, [r7, #28]
 8008100:	f000 fd3e 	bl	8008b80 <xQueueGenericSend>
 8008104:	4603      	mov	r3, r0
 8008106:	2b01      	cmp	r3, #1
 8008108:	d016      	beq.n	8008138 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800810a:	69f8      	ldr	r0, [r7, #28]
 800810c:	f001 f9ca 	bl	80094a4 <vQueueDelete>
            hSemaphore = NULL;
 8008110:	2300      	movs	r3, #0
 8008112:	61fb      	str	r3, [r7, #28]
 8008114:	e010      	b.n	8008138 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8008116:	69bb      	ldr	r3, [r7, #24]
 8008118:	2b01      	cmp	r3, #1
 800811a:	d108      	bne.n	800812e <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	689b      	ldr	r3, [r3, #8]
 8008120:	461a      	mov	r2, r3
 8008122:	68b9      	ldr	r1, [r7, #8]
 8008124:	68f8      	ldr	r0, [r7, #12]
 8008126:	f000 fcc1 	bl	8008aac <xQueueCreateCountingSemaphoreStatic>
 800812a:	61f8      	str	r0, [r7, #28]
 800812c:	e004      	b.n	8008138 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800812e:	68b9      	ldr	r1, [r7, #8]
 8008130:	68f8      	ldr	r0, [r7, #12]
 8008132:	f000 fcf2 	bl	8008b1a <xQueueCreateCountingSemaphore>
 8008136:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008138:	69fb      	ldr	r3, [r7, #28]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00c      	beq.n	8008158 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d003      	beq.n	800814c <osSemaphoreNew+0xfc>
          name = attr->name;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	617b      	str	r3, [r7, #20]
 800814a:	e001      	b.n	8008150 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800814c:	2300      	movs	r3, #0
 800814e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008150:	6979      	ldr	r1, [r7, #20]
 8008152:	69f8      	ldr	r0, [r7, #28]
 8008154:	f001 faf2 	bl	800973c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008158:	69fb      	ldr	r3, [r7, #28]
}
 800815a:	4618      	mov	r0, r3
 800815c:	3720      	adds	r7, #32
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
	...

08008164 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008164:	b580      	push	{r7, lr}
 8008166:	b086      	sub	sp, #24
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008172:	2300      	movs	r3, #0
 8008174:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d103      	bne.n	8008184 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800817c:	f06f 0303 	mvn.w	r3, #3
 8008180:	617b      	str	r3, [r7, #20]
 8008182:	e039      	b.n	80081f8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008184:	f3ef 8305 	mrs	r3, IPSR
 8008188:	60fb      	str	r3, [r7, #12]
  return(result);
 800818a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800818c:	2b00      	cmp	r3, #0
 800818e:	d022      	beq.n	80081d6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d003      	beq.n	800819e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8008196:	f06f 0303 	mvn.w	r3, #3
 800819a:	617b      	str	r3, [r7, #20]
 800819c:	e02c      	b.n	80081f8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800819e:	2300      	movs	r3, #0
 80081a0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80081a2:	f107 0308 	add.w	r3, r7, #8
 80081a6:	461a      	mov	r2, r3
 80081a8:	2100      	movs	r1, #0
 80081aa:	6938      	ldr	r0, [r7, #16]
 80081ac:	f001 f8fa 	bl	80093a4 <xQueueReceiveFromISR>
 80081b0:	4603      	mov	r3, r0
 80081b2:	2b01      	cmp	r3, #1
 80081b4:	d003      	beq.n	80081be <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80081b6:	f06f 0302 	mvn.w	r3, #2
 80081ba:	617b      	str	r3, [r7, #20]
 80081bc:	e01c      	b.n	80081f8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d019      	beq.n	80081f8 <osSemaphoreAcquire+0x94>
 80081c4:	4b0f      	ldr	r3, [pc, #60]	; (8008204 <osSemaphoreAcquire+0xa0>)
 80081c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081ca:	601a      	str	r2, [r3, #0]
 80081cc:	f3bf 8f4f 	dsb	sy
 80081d0:	f3bf 8f6f 	isb	sy
 80081d4:	e010      	b.n	80081f8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80081d6:	6839      	ldr	r1, [r7, #0]
 80081d8:	6938      	ldr	r0, [r7, #16]
 80081da:	f000 ffd7 	bl	800918c <xQueueSemaphoreTake>
 80081de:	4603      	mov	r3, r0
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	d009      	beq.n	80081f8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d003      	beq.n	80081f2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80081ea:	f06f 0301 	mvn.w	r3, #1
 80081ee:	617b      	str	r3, [r7, #20]
 80081f0:	e002      	b.n	80081f8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80081f2:	f06f 0302 	mvn.w	r3, #2
 80081f6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80081f8:	697b      	ldr	r3, [r7, #20]
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3718      	adds	r7, #24
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop
 8008204:	e000ed04 	.word	0xe000ed04

08008208 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008208:	b580      	push	{r7, lr}
 800820a:	b086      	sub	sp, #24
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008214:	2300      	movs	r3, #0
 8008216:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d103      	bne.n	8008226 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800821e:	f06f 0303 	mvn.w	r3, #3
 8008222:	617b      	str	r3, [r7, #20]
 8008224:	e02c      	b.n	8008280 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008226:	f3ef 8305 	mrs	r3, IPSR
 800822a:	60fb      	str	r3, [r7, #12]
  return(result);
 800822c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800822e:	2b00      	cmp	r3, #0
 8008230:	d01a      	beq.n	8008268 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8008232:	2300      	movs	r3, #0
 8008234:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008236:	f107 0308 	add.w	r3, r7, #8
 800823a:	4619      	mov	r1, r3
 800823c:	6938      	ldr	r0, [r7, #16]
 800823e:	f000 fe38 	bl	8008eb2 <xQueueGiveFromISR>
 8008242:	4603      	mov	r3, r0
 8008244:	2b01      	cmp	r3, #1
 8008246:	d003      	beq.n	8008250 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8008248:	f06f 0302 	mvn.w	r3, #2
 800824c:	617b      	str	r3, [r7, #20]
 800824e:	e017      	b.n	8008280 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d014      	beq.n	8008280 <osSemaphoreRelease+0x78>
 8008256:	4b0d      	ldr	r3, [pc, #52]	; (800828c <osSemaphoreRelease+0x84>)
 8008258:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800825c:	601a      	str	r2, [r3, #0]
 800825e:	f3bf 8f4f 	dsb	sy
 8008262:	f3bf 8f6f 	isb	sy
 8008266:	e00b      	b.n	8008280 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008268:	2300      	movs	r3, #0
 800826a:	2200      	movs	r2, #0
 800826c:	2100      	movs	r1, #0
 800826e:	6938      	ldr	r0, [r7, #16]
 8008270:	f000 fc86 	bl	8008b80 <xQueueGenericSend>
 8008274:	4603      	mov	r3, r0
 8008276:	2b01      	cmp	r3, #1
 8008278:	d002      	beq.n	8008280 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800827a:	f06f 0302 	mvn.w	r3, #2
 800827e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8008280:	697b      	ldr	r3, [r7, #20]
}
 8008282:	4618      	mov	r0, r3
 8008284:	3718      	adds	r7, #24
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	e000ed04 	.word	0xe000ed04

08008290 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008290:	b580      	push	{r7, lr}
 8008292:	b08a      	sub	sp, #40	; 0x28
 8008294:	af02      	add	r7, sp, #8
 8008296:	60f8      	str	r0, [r7, #12]
 8008298:	60b9      	str	r1, [r7, #8]
 800829a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800829c:	2300      	movs	r3, #0
 800829e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082a0:	f3ef 8305 	mrs	r3, IPSR
 80082a4:	613b      	str	r3, [r7, #16]
  return(result);
 80082a6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d15f      	bne.n	800836c <osMessageQueueNew+0xdc>
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d05c      	beq.n	800836c <osMessageQueueNew+0xdc>
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d059      	beq.n	800836c <osMessageQueueNew+0xdc>
    mem = -1;
 80082b8:	f04f 33ff 	mov.w	r3, #4294967295
 80082bc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d029      	beq.n	8008318 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d012      	beq.n	80082f2 <osMessageQueueNew+0x62>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	68db      	ldr	r3, [r3, #12]
 80082d0:	2b4f      	cmp	r3, #79	; 0x4f
 80082d2:	d90e      	bls.n	80082f2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d00a      	beq.n	80082f2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	695a      	ldr	r2, [r3, #20]
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	68b9      	ldr	r1, [r7, #8]
 80082e4:	fb01 f303 	mul.w	r3, r1, r3
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d302      	bcc.n	80082f2 <osMessageQueueNew+0x62>
        mem = 1;
 80082ec:	2301      	movs	r3, #1
 80082ee:	61bb      	str	r3, [r7, #24]
 80082f0:	e014      	b.n	800831c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d110      	bne.n	800831c <osMessageQueueNew+0x8c>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	68db      	ldr	r3, [r3, #12]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d10c      	bne.n	800831c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008306:	2b00      	cmp	r3, #0
 8008308:	d108      	bne.n	800831c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	695b      	ldr	r3, [r3, #20]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d104      	bne.n	800831c <osMessageQueueNew+0x8c>
          mem = 0;
 8008312:	2300      	movs	r3, #0
 8008314:	61bb      	str	r3, [r7, #24]
 8008316:	e001      	b.n	800831c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8008318:	2300      	movs	r3, #0
 800831a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800831c:	69bb      	ldr	r3, [r7, #24]
 800831e:	2b01      	cmp	r3, #1
 8008320:	d10b      	bne.n	800833a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	691a      	ldr	r2, [r3, #16]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	689b      	ldr	r3, [r3, #8]
 800832a:	2100      	movs	r1, #0
 800832c:	9100      	str	r1, [sp, #0]
 800832e:	68b9      	ldr	r1, [r7, #8]
 8008330:	68f8      	ldr	r0, [r7, #12]
 8008332:	f000 fa2f 	bl	8008794 <xQueueGenericCreateStatic>
 8008336:	61f8      	str	r0, [r7, #28]
 8008338:	e008      	b.n	800834c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800833a:	69bb      	ldr	r3, [r7, #24]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d105      	bne.n	800834c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8008340:	2200      	movs	r2, #0
 8008342:	68b9      	ldr	r1, [r7, #8]
 8008344:	68f8      	ldr	r0, [r7, #12]
 8008346:	f000 fa9d 	bl	8008884 <xQueueGenericCreate>
 800834a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800834c:	69fb      	ldr	r3, [r7, #28]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d00c      	beq.n	800836c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d003      	beq.n	8008360 <osMessageQueueNew+0xd0>
        name = attr->name;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	617b      	str	r3, [r7, #20]
 800835e:	e001      	b.n	8008364 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8008360:	2300      	movs	r3, #0
 8008362:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8008364:	6979      	ldr	r1, [r7, #20]
 8008366:	69f8      	ldr	r0, [r7, #28]
 8008368:	f001 f9e8 	bl	800973c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800836c:	69fb      	ldr	r3, [r7, #28]
}
 800836e:	4618      	mov	r0, r3
 8008370:	3720      	adds	r7, #32
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
	...

08008378 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008378:	b580      	push	{r7, lr}
 800837a:	b088      	sub	sp, #32
 800837c:	af00      	add	r7, sp, #0
 800837e:	60f8      	str	r0, [r7, #12]
 8008380:	60b9      	str	r1, [r7, #8]
 8008382:	603b      	str	r3, [r7, #0]
 8008384:	4613      	mov	r3, r2
 8008386:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800838c:	2300      	movs	r3, #0
 800838e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008390:	f3ef 8305 	mrs	r3, IPSR
 8008394:	617b      	str	r3, [r7, #20]
  return(result);
 8008396:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008398:	2b00      	cmp	r3, #0
 800839a:	d028      	beq.n	80083ee <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800839c:	69bb      	ldr	r3, [r7, #24]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d005      	beq.n	80083ae <osMessageQueuePut+0x36>
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d002      	beq.n	80083ae <osMessageQueuePut+0x36>
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d003      	beq.n	80083b6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80083ae:	f06f 0303 	mvn.w	r3, #3
 80083b2:	61fb      	str	r3, [r7, #28]
 80083b4:	e038      	b.n	8008428 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80083b6:	2300      	movs	r3, #0
 80083b8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80083ba:	f107 0210 	add.w	r2, r7, #16
 80083be:	2300      	movs	r3, #0
 80083c0:	68b9      	ldr	r1, [r7, #8]
 80083c2:	69b8      	ldr	r0, [r7, #24]
 80083c4:	f000 fcda 	bl	8008d7c <xQueueGenericSendFromISR>
 80083c8:	4603      	mov	r3, r0
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	d003      	beq.n	80083d6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80083ce:	f06f 0302 	mvn.w	r3, #2
 80083d2:	61fb      	str	r3, [r7, #28]
 80083d4:	e028      	b.n	8008428 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d025      	beq.n	8008428 <osMessageQueuePut+0xb0>
 80083dc:	4b15      	ldr	r3, [pc, #84]	; (8008434 <osMessageQueuePut+0xbc>)
 80083de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083e2:	601a      	str	r2, [r3, #0]
 80083e4:	f3bf 8f4f 	dsb	sy
 80083e8:	f3bf 8f6f 	isb	sy
 80083ec:	e01c      	b.n	8008428 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80083ee:	69bb      	ldr	r3, [r7, #24]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d002      	beq.n	80083fa <osMessageQueuePut+0x82>
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d103      	bne.n	8008402 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80083fa:	f06f 0303 	mvn.w	r3, #3
 80083fe:	61fb      	str	r3, [r7, #28]
 8008400:	e012      	b.n	8008428 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008402:	2300      	movs	r3, #0
 8008404:	683a      	ldr	r2, [r7, #0]
 8008406:	68b9      	ldr	r1, [r7, #8]
 8008408:	69b8      	ldr	r0, [r7, #24]
 800840a:	f000 fbb9 	bl	8008b80 <xQueueGenericSend>
 800840e:	4603      	mov	r3, r0
 8008410:	2b01      	cmp	r3, #1
 8008412:	d009      	beq.n	8008428 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d003      	beq.n	8008422 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800841a:	f06f 0301 	mvn.w	r3, #1
 800841e:	61fb      	str	r3, [r7, #28]
 8008420:	e002      	b.n	8008428 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8008422:	f06f 0302 	mvn.w	r3, #2
 8008426:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008428:	69fb      	ldr	r3, [r7, #28]
}
 800842a:	4618      	mov	r0, r3
 800842c:	3720      	adds	r7, #32
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
 8008432:	bf00      	nop
 8008434:	e000ed04 	.word	0xe000ed04

08008438 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008438:	b580      	push	{r7, lr}
 800843a:	b088      	sub	sp, #32
 800843c:	af00      	add	r7, sp, #0
 800843e:	60f8      	str	r0, [r7, #12]
 8008440:	60b9      	str	r1, [r7, #8]
 8008442:	607a      	str	r2, [r7, #4]
 8008444:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800844a:	2300      	movs	r3, #0
 800844c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800844e:	f3ef 8305 	mrs	r3, IPSR
 8008452:	617b      	str	r3, [r7, #20]
  return(result);
 8008454:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008456:	2b00      	cmp	r3, #0
 8008458:	d028      	beq.n	80084ac <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800845a:	69bb      	ldr	r3, [r7, #24]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d005      	beq.n	800846c <osMessageQueueGet+0x34>
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d002      	beq.n	800846c <osMessageQueueGet+0x34>
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d003      	beq.n	8008474 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800846c:	f06f 0303 	mvn.w	r3, #3
 8008470:	61fb      	str	r3, [r7, #28]
 8008472:	e037      	b.n	80084e4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8008474:	2300      	movs	r3, #0
 8008476:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008478:	f107 0310 	add.w	r3, r7, #16
 800847c:	461a      	mov	r2, r3
 800847e:	68b9      	ldr	r1, [r7, #8]
 8008480:	69b8      	ldr	r0, [r7, #24]
 8008482:	f000 ff8f 	bl	80093a4 <xQueueReceiveFromISR>
 8008486:	4603      	mov	r3, r0
 8008488:	2b01      	cmp	r3, #1
 800848a:	d003      	beq.n	8008494 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800848c:	f06f 0302 	mvn.w	r3, #2
 8008490:	61fb      	str	r3, [r7, #28]
 8008492:	e027      	b.n	80084e4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d024      	beq.n	80084e4 <osMessageQueueGet+0xac>
 800849a:	4b15      	ldr	r3, [pc, #84]	; (80084f0 <osMessageQueueGet+0xb8>)
 800849c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084a0:	601a      	str	r2, [r3, #0]
 80084a2:	f3bf 8f4f 	dsb	sy
 80084a6:	f3bf 8f6f 	isb	sy
 80084aa:	e01b      	b.n	80084e4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80084ac:	69bb      	ldr	r3, [r7, #24]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d002      	beq.n	80084b8 <osMessageQueueGet+0x80>
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d103      	bne.n	80084c0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80084b8:	f06f 0303 	mvn.w	r3, #3
 80084bc:	61fb      	str	r3, [r7, #28]
 80084be:	e011      	b.n	80084e4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80084c0:	683a      	ldr	r2, [r7, #0]
 80084c2:	68b9      	ldr	r1, [r7, #8]
 80084c4:	69b8      	ldr	r0, [r7, #24]
 80084c6:	f000 fd81 	bl	8008fcc <xQueueReceive>
 80084ca:	4603      	mov	r3, r0
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d009      	beq.n	80084e4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d003      	beq.n	80084de <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80084d6:	f06f 0301 	mvn.w	r3, #1
 80084da:	61fb      	str	r3, [r7, #28]
 80084dc:	e002      	b.n	80084e4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80084de:	f06f 0302 	mvn.w	r3, #2
 80084e2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80084e4:	69fb      	ldr	r3, [r7, #28]
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3720      	adds	r7, #32
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
 80084ee:	bf00      	nop
 80084f0:	e000ed04 	.word	0xe000ed04

080084f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80084f4:	b480      	push	{r7}
 80084f6:	b085      	sub	sp, #20
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	60f8      	str	r0, [r7, #12]
 80084fc:	60b9      	str	r1, [r7, #8]
 80084fe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	4a07      	ldr	r2, [pc, #28]	; (8008520 <vApplicationGetIdleTaskMemory+0x2c>)
 8008504:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	4a06      	ldr	r2, [pc, #24]	; (8008524 <vApplicationGetIdleTaskMemory+0x30>)
 800850a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2280      	movs	r2, #128	; 0x80
 8008510:	601a      	str	r2, [r3, #0]
}
 8008512:	bf00      	nop
 8008514:	3714      	adds	r7, #20
 8008516:	46bd      	mov	sp, r7
 8008518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851c:	4770      	bx	lr
 800851e:	bf00      	nop
 8008520:	200006f8 	.word	0x200006f8
 8008524:	20000754 	.word	0x20000754

08008528 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008528:	b480      	push	{r7}
 800852a:	b085      	sub	sp, #20
 800852c:	af00      	add	r7, sp, #0
 800852e:	60f8      	str	r0, [r7, #12]
 8008530:	60b9      	str	r1, [r7, #8]
 8008532:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	4a07      	ldr	r2, [pc, #28]	; (8008554 <vApplicationGetTimerTaskMemory+0x2c>)
 8008538:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	4a06      	ldr	r2, [pc, #24]	; (8008558 <vApplicationGetTimerTaskMemory+0x30>)
 800853e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008546:	601a      	str	r2, [r3, #0]
}
 8008548:	bf00      	nop
 800854a:	3714      	adds	r7, #20
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr
 8008554:	20000954 	.word	0x20000954
 8008558:	200009b0 	.word	0x200009b0

0800855c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800855c:	b480      	push	{r7}
 800855e:	b083      	sub	sp, #12
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f103 0208 	add.w	r2, r3, #8
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f04f 32ff 	mov.w	r2, #4294967295
 8008574:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f103 0208 	add.w	r2, r3, #8
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f103 0208 	add.w	r2, r3, #8
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2200      	movs	r2, #0
 800858e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008590:	bf00      	nop
 8008592:	370c      	adds	r7, #12
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr

0800859c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800859c:	b480      	push	{r7}
 800859e:	b083      	sub	sp, #12
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2200      	movs	r2, #0
 80085a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80085aa:	bf00      	nop
 80085ac:	370c      	adds	r7, #12
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr

080085b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80085b6:	b480      	push	{r7}
 80085b8:	b085      	sub	sp, #20
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
 80085be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	68fa      	ldr	r2, [r7, #12]
 80085ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	689a      	ldr	r2, [r3, #8]
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	689b      	ldr	r3, [r3, #8]
 80085d8:	683a      	ldr	r2, [r7, #0]
 80085da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	683a      	ldr	r2, [r7, #0]
 80085e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	687a      	ldr	r2, [r7, #4]
 80085e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	1c5a      	adds	r2, r3, #1
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	601a      	str	r2, [r3, #0]
}
 80085f2:	bf00      	nop
 80085f4:	3714      	adds	r7, #20
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr

080085fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80085fe:	b480      	push	{r7}
 8008600:	b085      	sub	sp, #20
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
 8008606:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008614:	d103      	bne.n	800861e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	691b      	ldr	r3, [r3, #16]
 800861a:	60fb      	str	r3, [r7, #12]
 800861c:	e00c      	b.n	8008638 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	3308      	adds	r3, #8
 8008622:	60fb      	str	r3, [r7, #12]
 8008624:	e002      	b.n	800862c <vListInsert+0x2e>
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	60fb      	str	r3, [r7, #12]
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	68ba      	ldr	r2, [r7, #8]
 8008634:	429a      	cmp	r2, r3
 8008636:	d2f6      	bcs.n	8008626 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	685a      	ldr	r2, [r3, #4]
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	683a      	ldr	r2, [r7, #0]
 8008646:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	68fa      	ldr	r2, [r7, #12]
 800864c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	683a      	ldr	r2, [r7, #0]
 8008652:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	687a      	ldr	r2, [r7, #4]
 8008658:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	1c5a      	adds	r2, r3, #1
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	601a      	str	r2, [r3, #0]
}
 8008664:	bf00      	nop
 8008666:	3714      	adds	r7, #20
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr

08008670 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008670:	b480      	push	{r7}
 8008672:	b085      	sub	sp, #20
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	691b      	ldr	r3, [r3, #16]
 800867c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	6892      	ldr	r2, [r2, #8]
 8008686:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	689b      	ldr	r3, [r3, #8]
 800868c:	687a      	ldr	r2, [r7, #4]
 800868e:	6852      	ldr	r2, [r2, #4]
 8008690:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	687a      	ldr	r2, [r7, #4]
 8008698:	429a      	cmp	r2, r3
 800869a:	d103      	bne.n	80086a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	689a      	ldr	r2, [r3, #8]
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2200      	movs	r2, #0
 80086a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	1e5a      	subs	r2, r3, #1
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3714      	adds	r7, #20
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr

080086c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b084      	sub	sp, #16
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d10a      	bne.n	80086ee <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80086d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086dc:	f383 8811 	msr	BASEPRI, r3
 80086e0:	f3bf 8f6f 	isb	sy
 80086e4:	f3bf 8f4f 	dsb	sy
 80086e8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80086ea:	bf00      	nop
 80086ec:	e7fe      	b.n	80086ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80086ee:	f002 fec9 	bl	800b484 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681a      	ldr	r2, [r3, #0]
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086fa:	68f9      	ldr	r1, [r7, #12]
 80086fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80086fe:	fb01 f303 	mul.w	r3, r1, r3
 8008702:	441a      	add	r2, r3
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2200      	movs	r2, #0
 800870c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681a      	ldr	r2, [r3, #0]
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681a      	ldr	r2, [r3, #0]
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800871e:	3b01      	subs	r3, #1
 8008720:	68f9      	ldr	r1, [r7, #12]
 8008722:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008724:	fb01 f303 	mul.w	r3, r1, r3
 8008728:	441a      	add	r2, r3
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	22ff      	movs	r2, #255	; 0xff
 8008732:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	22ff      	movs	r2, #255	; 0xff
 800873a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d114      	bne.n	800876e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	691b      	ldr	r3, [r3, #16]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d01a      	beq.n	8008782 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	3310      	adds	r3, #16
 8008750:	4618      	mov	r0, r3
 8008752:	f001 fdb3 	bl	800a2bc <xTaskRemoveFromEventList>
 8008756:	4603      	mov	r3, r0
 8008758:	2b00      	cmp	r3, #0
 800875a:	d012      	beq.n	8008782 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800875c:	4b0c      	ldr	r3, [pc, #48]	; (8008790 <xQueueGenericReset+0xcc>)
 800875e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008762:	601a      	str	r2, [r3, #0]
 8008764:	f3bf 8f4f 	dsb	sy
 8008768:	f3bf 8f6f 	isb	sy
 800876c:	e009      	b.n	8008782 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	3310      	adds	r3, #16
 8008772:	4618      	mov	r0, r3
 8008774:	f7ff fef2 	bl	800855c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	3324      	adds	r3, #36	; 0x24
 800877c:	4618      	mov	r0, r3
 800877e:	f7ff feed 	bl	800855c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008782:	f002 feaf 	bl	800b4e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008786:	2301      	movs	r3, #1
}
 8008788:	4618      	mov	r0, r3
 800878a:	3710      	adds	r7, #16
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}
 8008790:	e000ed04 	.word	0xe000ed04

08008794 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008794:	b580      	push	{r7, lr}
 8008796:	b08e      	sub	sp, #56	; 0x38
 8008798:	af02      	add	r7, sp, #8
 800879a:	60f8      	str	r0, [r7, #12]
 800879c:	60b9      	str	r1, [r7, #8]
 800879e:	607a      	str	r2, [r7, #4]
 80087a0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d10a      	bne.n	80087be <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80087a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ac:	f383 8811 	msr	BASEPRI, r3
 80087b0:	f3bf 8f6f 	isb	sy
 80087b4:	f3bf 8f4f 	dsb	sy
 80087b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80087ba:	bf00      	nop
 80087bc:	e7fe      	b.n	80087bc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d10a      	bne.n	80087da <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80087c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c8:	f383 8811 	msr	BASEPRI, r3
 80087cc:	f3bf 8f6f 	isb	sy
 80087d0:	f3bf 8f4f 	dsb	sy
 80087d4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80087d6:	bf00      	nop
 80087d8:	e7fe      	b.n	80087d8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d002      	beq.n	80087e6 <xQueueGenericCreateStatic+0x52>
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d001      	beq.n	80087ea <xQueueGenericCreateStatic+0x56>
 80087e6:	2301      	movs	r3, #1
 80087e8:	e000      	b.n	80087ec <xQueueGenericCreateStatic+0x58>
 80087ea:	2300      	movs	r3, #0
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d10a      	bne.n	8008806 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80087f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f4:	f383 8811 	msr	BASEPRI, r3
 80087f8:	f3bf 8f6f 	isb	sy
 80087fc:	f3bf 8f4f 	dsb	sy
 8008800:	623b      	str	r3, [r7, #32]
}
 8008802:	bf00      	nop
 8008804:	e7fe      	b.n	8008804 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d102      	bne.n	8008812 <xQueueGenericCreateStatic+0x7e>
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d101      	bne.n	8008816 <xQueueGenericCreateStatic+0x82>
 8008812:	2301      	movs	r3, #1
 8008814:	e000      	b.n	8008818 <xQueueGenericCreateStatic+0x84>
 8008816:	2300      	movs	r3, #0
 8008818:	2b00      	cmp	r3, #0
 800881a:	d10a      	bne.n	8008832 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800881c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008820:	f383 8811 	msr	BASEPRI, r3
 8008824:	f3bf 8f6f 	isb	sy
 8008828:	f3bf 8f4f 	dsb	sy
 800882c:	61fb      	str	r3, [r7, #28]
}
 800882e:	bf00      	nop
 8008830:	e7fe      	b.n	8008830 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008832:	2350      	movs	r3, #80	; 0x50
 8008834:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	2b50      	cmp	r3, #80	; 0x50
 800883a:	d00a      	beq.n	8008852 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800883c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008840:	f383 8811 	msr	BASEPRI, r3
 8008844:	f3bf 8f6f 	isb	sy
 8008848:	f3bf 8f4f 	dsb	sy
 800884c:	61bb      	str	r3, [r7, #24]
}
 800884e:	bf00      	nop
 8008850:	e7fe      	b.n	8008850 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008852:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800885a:	2b00      	cmp	r3, #0
 800885c:	d00d      	beq.n	800887a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800885e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008860:	2201      	movs	r2, #1
 8008862:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008866:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800886a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800886c:	9300      	str	r3, [sp, #0]
 800886e:	4613      	mov	r3, r2
 8008870:	687a      	ldr	r2, [r7, #4]
 8008872:	68b9      	ldr	r1, [r7, #8]
 8008874:	68f8      	ldr	r0, [r7, #12]
 8008876:	f000 f83f 	bl	80088f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800887a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800887c:	4618      	mov	r0, r3
 800887e:	3730      	adds	r7, #48	; 0x30
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008884:	b580      	push	{r7, lr}
 8008886:	b08a      	sub	sp, #40	; 0x28
 8008888:	af02      	add	r7, sp, #8
 800888a:	60f8      	str	r0, [r7, #12]
 800888c:	60b9      	str	r1, [r7, #8]
 800888e:	4613      	mov	r3, r2
 8008890:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d10a      	bne.n	80088ae <xQueueGenericCreate+0x2a>
	__asm volatile
 8008898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800889c:	f383 8811 	msr	BASEPRI, r3
 80088a0:	f3bf 8f6f 	isb	sy
 80088a4:	f3bf 8f4f 	dsb	sy
 80088a8:	613b      	str	r3, [r7, #16]
}
 80088aa:	bf00      	nop
 80088ac:	e7fe      	b.n	80088ac <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	68ba      	ldr	r2, [r7, #8]
 80088b2:	fb02 f303 	mul.w	r3, r2, r3
 80088b6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80088b8:	69fb      	ldr	r3, [r7, #28]
 80088ba:	3350      	adds	r3, #80	; 0x50
 80088bc:	4618      	mov	r0, r3
 80088be:	f002 ff03 	bl	800b6c8 <pvPortMalloc>
 80088c2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80088c4:	69bb      	ldr	r3, [r7, #24]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d011      	beq.n	80088ee <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80088ca:	69bb      	ldr	r3, [r7, #24]
 80088cc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	3350      	adds	r3, #80	; 0x50
 80088d2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80088d4:	69bb      	ldr	r3, [r7, #24]
 80088d6:	2200      	movs	r2, #0
 80088d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80088dc:	79fa      	ldrb	r2, [r7, #7]
 80088de:	69bb      	ldr	r3, [r7, #24]
 80088e0:	9300      	str	r3, [sp, #0]
 80088e2:	4613      	mov	r3, r2
 80088e4:	697a      	ldr	r2, [r7, #20]
 80088e6:	68b9      	ldr	r1, [r7, #8]
 80088e8:	68f8      	ldr	r0, [r7, #12]
 80088ea:	f000 f805 	bl	80088f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80088ee:	69bb      	ldr	r3, [r7, #24]
	}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3720      	adds	r7, #32
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	60f8      	str	r0, [r7, #12]
 8008900:	60b9      	str	r1, [r7, #8]
 8008902:	607a      	str	r2, [r7, #4]
 8008904:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d103      	bne.n	8008914 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800890c:	69bb      	ldr	r3, [r7, #24]
 800890e:	69ba      	ldr	r2, [r7, #24]
 8008910:	601a      	str	r2, [r3, #0]
 8008912:	e002      	b.n	800891a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008914:	69bb      	ldr	r3, [r7, #24]
 8008916:	687a      	ldr	r2, [r7, #4]
 8008918:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800891a:	69bb      	ldr	r3, [r7, #24]
 800891c:	68fa      	ldr	r2, [r7, #12]
 800891e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008920:	69bb      	ldr	r3, [r7, #24]
 8008922:	68ba      	ldr	r2, [r7, #8]
 8008924:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008926:	2101      	movs	r1, #1
 8008928:	69b8      	ldr	r0, [r7, #24]
 800892a:	f7ff fecb 	bl	80086c4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800892e:	69bb      	ldr	r3, [r7, #24]
 8008930:	78fa      	ldrb	r2, [r7, #3]
 8008932:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008936:	bf00      	nop
 8008938:	3710      	adds	r7, #16
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}

0800893e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800893e:	b580      	push	{r7, lr}
 8008940:	b082      	sub	sp, #8
 8008942:	af00      	add	r7, sp, #0
 8008944:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d00e      	beq.n	800896a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2200      	movs	r2, #0
 8008950:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2200      	movs	r2, #0
 8008956:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2200      	movs	r2, #0
 800895c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800895e:	2300      	movs	r3, #0
 8008960:	2200      	movs	r2, #0
 8008962:	2100      	movs	r1, #0
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 f90b 	bl	8008b80 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800896a:	bf00      	nop
 800896c:	3708      	adds	r7, #8
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}

08008972 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008972:	b580      	push	{r7, lr}
 8008974:	b086      	sub	sp, #24
 8008976:	af00      	add	r7, sp, #0
 8008978:	4603      	mov	r3, r0
 800897a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800897c:	2301      	movs	r3, #1
 800897e:	617b      	str	r3, [r7, #20]
 8008980:	2300      	movs	r3, #0
 8008982:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008984:	79fb      	ldrb	r3, [r7, #7]
 8008986:	461a      	mov	r2, r3
 8008988:	6939      	ldr	r1, [r7, #16]
 800898a:	6978      	ldr	r0, [r7, #20]
 800898c:	f7ff ff7a 	bl	8008884 <xQueueGenericCreate>
 8008990:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008992:	68f8      	ldr	r0, [r7, #12]
 8008994:	f7ff ffd3 	bl	800893e <prvInitialiseMutex>

		return xNewQueue;
 8008998:	68fb      	ldr	r3, [r7, #12]
	}
 800899a:	4618      	mov	r0, r3
 800899c:	3718      	adds	r7, #24
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}

080089a2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80089a2:	b580      	push	{r7, lr}
 80089a4:	b088      	sub	sp, #32
 80089a6:	af02      	add	r7, sp, #8
 80089a8:	4603      	mov	r3, r0
 80089aa:	6039      	str	r1, [r7, #0]
 80089ac:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80089ae:	2301      	movs	r3, #1
 80089b0:	617b      	str	r3, [r7, #20]
 80089b2:	2300      	movs	r3, #0
 80089b4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80089b6:	79fb      	ldrb	r3, [r7, #7]
 80089b8:	9300      	str	r3, [sp, #0]
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	2200      	movs	r2, #0
 80089be:	6939      	ldr	r1, [r7, #16]
 80089c0:	6978      	ldr	r0, [r7, #20]
 80089c2:	f7ff fee7 	bl	8008794 <xQueueGenericCreateStatic>
 80089c6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80089c8:	68f8      	ldr	r0, [r7, #12]
 80089ca:	f7ff ffb8 	bl	800893e <prvInitialiseMutex>

		return xNewQueue;
 80089ce:	68fb      	ldr	r3, [r7, #12]
	}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3718      	adds	r7, #24
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80089d8:	b590      	push	{r4, r7, lr}
 80089da:	b087      	sub	sp, #28
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d10a      	bne.n	8008a00 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 80089ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ee:	f383 8811 	msr	BASEPRI, r3
 80089f2:	f3bf 8f6f 	isb	sy
 80089f6:	f3bf 8f4f 	dsb	sy
 80089fa:	60fb      	str	r3, [r7, #12]
}
 80089fc:	bf00      	nop
 80089fe:	e7fe      	b.n	80089fe <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	689c      	ldr	r4, [r3, #8]
 8008a04:	f001 fe18 	bl	800a638 <xTaskGetCurrentTaskHandle>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	429c      	cmp	r4, r3
 8008a0c:	d111      	bne.n	8008a32 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	68db      	ldr	r3, [r3, #12]
 8008a12:	1e5a      	subs	r2, r3, #1
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	68db      	ldr	r3, [r3, #12]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d105      	bne.n	8008a2c <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8008a20:	2300      	movs	r3, #0
 8008a22:	2200      	movs	r2, #0
 8008a24:	2100      	movs	r1, #0
 8008a26:	6938      	ldr	r0, [r7, #16]
 8008a28:	f000 f8aa 	bl	8008b80 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	617b      	str	r3, [r7, #20]
 8008a30:	e001      	b.n	8008a36 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8008a32:	2300      	movs	r3, #0
 8008a34:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8008a36:	697b      	ldr	r3, [r7, #20]
	}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	371c      	adds	r7, #28
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd90      	pop	{r4, r7, pc}

08008a40 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8008a40:	b590      	push	{r4, r7, lr}
 8008a42:	b087      	sub	sp, #28
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d10a      	bne.n	8008a6a <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8008a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a58:	f383 8811 	msr	BASEPRI, r3
 8008a5c:	f3bf 8f6f 	isb	sy
 8008a60:	f3bf 8f4f 	dsb	sy
 8008a64:	60fb      	str	r3, [r7, #12]
}
 8008a66:	bf00      	nop
 8008a68:	e7fe      	b.n	8008a68 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	689c      	ldr	r4, [r3, #8]
 8008a6e:	f001 fde3 	bl	800a638 <xTaskGetCurrentTaskHandle>
 8008a72:	4603      	mov	r3, r0
 8008a74:	429c      	cmp	r4, r3
 8008a76:	d107      	bne.n	8008a88 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	68db      	ldr	r3, [r3, #12]
 8008a7c:	1c5a      	adds	r2, r3, #1
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8008a82:	2301      	movs	r3, #1
 8008a84:	617b      	str	r3, [r7, #20]
 8008a86:	e00c      	b.n	8008aa2 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8008a88:	6839      	ldr	r1, [r7, #0]
 8008a8a:	6938      	ldr	r0, [r7, #16]
 8008a8c:	f000 fb7e 	bl	800918c <xQueueSemaphoreTake>
 8008a90:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d004      	beq.n	8008aa2 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	68db      	ldr	r3, [r3, #12]
 8008a9c:	1c5a      	adds	r2, r3, #1
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8008aa2:	697b      	ldr	r3, [r7, #20]
	}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	371c      	adds	r7, #28
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd90      	pop	{r4, r7, pc}

08008aac <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b08a      	sub	sp, #40	; 0x28
 8008ab0:	af02      	add	r7, sp, #8
 8008ab2:	60f8      	str	r0, [r7, #12]
 8008ab4:	60b9      	str	r1, [r7, #8]
 8008ab6:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d10a      	bne.n	8008ad4 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8008abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac2:	f383 8811 	msr	BASEPRI, r3
 8008ac6:	f3bf 8f6f 	isb	sy
 8008aca:	f3bf 8f4f 	dsb	sy
 8008ace:	61bb      	str	r3, [r7, #24]
}
 8008ad0:	bf00      	nop
 8008ad2:	e7fe      	b.n	8008ad2 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008ad4:	68ba      	ldr	r2, [r7, #8]
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d90a      	bls.n	8008af2 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8008adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae0:	f383 8811 	msr	BASEPRI, r3
 8008ae4:	f3bf 8f6f 	isb	sy
 8008ae8:	f3bf 8f4f 	dsb	sy
 8008aec:	617b      	str	r3, [r7, #20]
}
 8008aee:	bf00      	nop
 8008af0:	e7fe      	b.n	8008af0 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008af2:	2302      	movs	r3, #2
 8008af4:	9300      	str	r3, [sp, #0]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2200      	movs	r2, #0
 8008afa:	2100      	movs	r1, #0
 8008afc:	68f8      	ldr	r0, [r7, #12]
 8008afe:	f7ff fe49 	bl	8008794 <xQueueGenericCreateStatic>
 8008b02:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008b04:	69fb      	ldr	r3, [r7, #28]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d002      	beq.n	8008b10 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008b0a:	69fb      	ldr	r3, [r7, #28]
 8008b0c:	68ba      	ldr	r2, [r7, #8]
 8008b0e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008b10:	69fb      	ldr	r3, [r7, #28]
	}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3720      	adds	r7, #32
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}

08008b1a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008b1a:	b580      	push	{r7, lr}
 8008b1c:	b086      	sub	sp, #24
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	6078      	str	r0, [r7, #4]
 8008b22:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d10a      	bne.n	8008b40 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8008b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b2e:	f383 8811 	msr	BASEPRI, r3
 8008b32:	f3bf 8f6f 	isb	sy
 8008b36:	f3bf 8f4f 	dsb	sy
 8008b3a:	613b      	str	r3, [r7, #16]
}
 8008b3c:	bf00      	nop
 8008b3e:	e7fe      	b.n	8008b3e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008b40:	683a      	ldr	r2, [r7, #0]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d90a      	bls.n	8008b5e <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8008b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b4c:	f383 8811 	msr	BASEPRI, r3
 8008b50:	f3bf 8f6f 	isb	sy
 8008b54:	f3bf 8f4f 	dsb	sy
 8008b58:	60fb      	str	r3, [r7, #12]
}
 8008b5a:	bf00      	nop
 8008b5c:	e7fe      	b.n	8008b5c <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008b5e:	2202      	movs	r2, #2
 8008b60:	2100      	movs	r1, #0
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f7ff fe8e 	bl	8008884 <xQueueGenericCreate>
 8008b68:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d002      	beq.n	8008b76 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	683a      	ldr	r2, [r7, #0]
 8008b74:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008b76:	697b      	ldr	r3, [r7, #20]
	}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3718      	adds	r7, #24
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}

08008b80 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b08e      	sub	sp, #56	; 0x38
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	60f8      	str	r0, [r7, #12]
 8008b88:	60b9      	str	r1, [r7, #8]
 8008b8a:	607a      	str	r2, [r7, #4]
 8008b8c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d10a      	bne.n	8008bb2 <xQueueGenericSend+0x32>
	__asm volatile
 8008b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ba0:	f383 8811 	msr	BASEPRI, r3
 8008ba4:	f3bf 8f6f 	isb	sy
 8008ba8:	f3bf 8f4f 	dsb	sy
 8008bac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008bae:	bf00      	nop
 8008bb0:	e7fe      	b.n	8008bb0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d103      	bne.n	8008bc0 <xQueueGenericSend+0x40>
 8008bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d101      	bne.n	8008bc4 <xQueueGenericSend+0x44>
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e000      	b.n	8008bc6 <xQueueGenericSend+0x46>
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d10a      	bne.n	8008be0 <xQueueGenericSend+0x60>
	__asm volatile
 8008bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bce:	f383 8811 	msr	BASEPRI, r3
 8008bd2:	f3bf 8f6f 	isb	sy
 8008bd6:	f3bf 8f4f 	dsb	sy
 8008bda:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008bdc:	bf00      	nop
 8008bde:	e7fe      	b.n	8008bde <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	2b02      	cmp	r3, #2
 8008be4:	d103      	bne.n	8008bee <xQueueGenericSend+0x6e>
 8008be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bea:	2b01      	cmp	r3, #1
 8008bec:	d101      	bne.n	8008bf2 <xQueueGenericSend+0x72>
 8008bee:	2301      	movs	r3, #1
 8008bf0:	e000      	b.n	8008bf4 <xQueueGenericSend+0x74>
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d10a      	bne.n	8008c0e <xQueueGenericSend+0x8e>
	__asm volatile
 8008bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bfc:	f383 8811 	msr	BASEPRI, r3
 8008c00:	f3bf 8f6f 	isb	sy
 8008c04:	f3bf 8f4f 	dsb	sy
 8008c08:	623b      	str	r3, [r7, #32]
}
 8008c0a:	bf00      	nop
 8008c0c:	e7fe      	b.n	8008c0c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c0e:	f001 fd23 	bl	800a658 <xTaskGetSchedulerState>
 8008c12:	4603      	mov	r3, r0
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d102      	bne.n	8008c1e <xQueueGenericSend+0x9e>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d101      	bne.n	8008c22 <xQueueGenericSend+0xa2>
 8008c1e:	2301      	movs	r3, #1
 8008c20:	e000      	b.n	8008c24 <xQueueGenericSend+0xa4>
 8008c22:	2300      	movs	r3, #0
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d10a      	bne.n	8008c3e <xQueueGenericSend+0xbe>
	__asm volatile
 8008c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c2c:	f383 8811 	msr	BASEPRI, r3
 8008c30:	f3bf 8f6f 	isb	sy
 8008c34:	f3bf 8f4f 	dsb	sy
 8008c38:	61fb      	str	r3, [r7, #28]
}
 8008c3a:	bf00      	nop
 8008c3c:	e7fe      	b.n	8008c3c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008c3e:	f002 fc21 	bl	800b484 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d302      	bcc.n	8008c54 <xQueueGenericSend+0xd4>
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	2b02      	cmp	r3, #2
 8008c52:	d129      	bne.n	8008ca8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008c54:	683a      	ldr	r2, [r7, #0]
 8008c56:	68b9      	ldr	r1, [r7, #8]
 8008c58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c5a:	f000 fc5e 	bl	800951a <prvCopyDataToQueue>
 8008c5e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d010      	beq.n	8008c8a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c6a:	3324      	adds	r3, #36	; 0x24
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f001 fb25 	bl	800a2bc <xTaskRemoveFromEventList>
 8008c72:	4603      	mov	r3, r0
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d013      	beq.n	8008ca0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008c78:	4b3f      	ldr	r3, [pc, #252]	; (8008d78 <xQueueGenericSend+0x1f8>)
 8008c7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c7e:	601a      	str	r2, [r3, #0]
 8008c80:	f3bf 8f4f 	dsb	sy
 8008c84:	f3bf 8f6f 	isb	sy
 8008c88:	e00a      	b.n	8008ca0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d007      	beq.n	8008ca0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008c90:	4b39      	ldr	r3, [pc, #228]	; (8008d78 <xQueueGenericSend+0x1f8>)
 8008c92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c96:	601a      	str	r2, [r3, #0]
 8008c98:	f3bf 8f4f 	dsb	sy
 8008c9c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008ca0:	f002 fc20 	bl	800b4e4 <vPortExitCritical>
				return pdPASS;
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	e063      	b.n	8008d70 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d103      	bne.n	8008cb6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008cae:	f002 fc19 	bl	800b4e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	e05c      	b.n	8008d70 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d106      	bne.n	8008cca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008cbc:	f107 0314 	add.w	r3, r7, #20
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f001 fb5f 	bl	800a384 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008cca:	f002 fc0b 	bl	800b4e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008cce:	f001 f8d1 	bl	8009e74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008cd2:	f002 fbd7 	bl	800b484 <vPortEnterCritical>
 8008cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008cdc:	b25b      	sxtb	r3, r3
 8008cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ce2:	d103      	bne.n	8008cec <xQueueGenericSend+0x16c>
 8008ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008cf2:	b25b      	sxtb	r3, r3
 8008cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cf8:	d103      	bne.n	8008d02 <xQueueGenericSend+0x182>
 8008cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d02:	f002 fbef 	bl	800b4e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008d06:	1d3a      	adds	r2, r7, #4
 8008d08:	f107 0314 	add.w	r3, r7, #20
 8008d0c:	4611      	mov	r1, r2
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f001 fb4e 	bl	800a3b0 <xTaskCheckForTimeOut>
 8008d14:	4603      	mov	r3, r0
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d124      	bne.n	8008d64 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008d1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d1c:	f000 fcf5 	bl	800970a <prvIsQueueFull>
 8008d20:	4603      	mov	r3, r0
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d018      	beq.n	8008d58 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d28:	3310      	adds	r3, #16
 8008d2a:	687a      	ldr	r2, [r7, #4]
 8008d2c:	4611      	mov	r1, r2
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f001 fa74 	bl	800a21c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008d34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d36:	f000 fc80 	bl	800963a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008d3a:	f001 f8a9 	bl	8009e90 <xTaskResumeAll>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	f47f af7c 	bne.w	8008c3e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008d46:	4b0c      	ldr	r3, [pc, #48]	; (8008d78 <xQueueGenericSend+0x1f8>)
 8008d48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d4c:	601a      	str	r2, [r3, #0]
 8008d4e:	f3bf 8f4f 	dsb	sy
 8008d52:	f3bf 8f6f 	isb	sy
 8008d56:	e772      	b.n	8008c3e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008d58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d5a:	f000 fc6e 	bl	800963a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d5e:	f001 f897 	bl	8009e90 <xTaskResumeAll>
 8008d62:	e76c      	b.n	8008c3e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008d64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d66:	f000 fc68 	bl	800963a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008d6a:	f001 f891 	bl	8009e90 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008d6e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3738      	adds	r7, #56	; 0x38
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}
 8008d78:	e000ed04 	.word	0xe000ed04

08008d7c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b090      	sub	sp, #64	; 0x40
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	60f8      	str	r0, [r7, #12]
 8008d84:	60b9      	str	r1, [r7, #8]
 8008d86:	607a      	str	r2, [r7, #4]
 8008d88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d10a      	bne.n	8008daa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d98:	f383 8811 	msr	BASEPRI, r3
 8008d9c:	f3bf 8f6f 	isb	sy
 8008da0:	f3bf 8f4f 	dsb	sy
 8008da4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008da6:	bf00      	nop
 8008da8:	e7fe      	b.n	8008da8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d103      	bne.n	8008db8 <xQueueGenericSendFromISR+0x3c>
 8008db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d101      	bne.n	8008dbc <xQueueGenericSendFromISR+0x40>
 8008db8:	2301      	movs	r3, #1
 8008dba:	e000      	b.n	8008dbe <xQueueGenericSendFromISR+0x42>
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d10a      	bne.n	8008dd8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc6:	f383 8811 	msr	BASEPRI, r3
 8008dca:	f3bf 8f6f 	isb	sy
 8008dce:	f3bf 8f4f 	dsb	sy
 8008dd2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008dd4:	bf00      	nop
 8008dd6:	e7fe      	b.n	8008dd6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	2b02      	cmp	r3, #2
 8008ddc:	d103      	bne.n	8008de6 <xQueueGenericSendFromISR+0x6a>
 8008dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008de2:	2b01      	cmp	r3, #1
 8008de4:	d101      	bne.n	8008dea <xQueueGenericSendFromISR+0x6e>
 8008de6:	2301      	movs	r3, #1
 8008de8:	e000      	b.n	8008dec <xQueueGenericSendFromISR+0x70>
 8008dea:	2300      	movs	r3, #0
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d10a      	bne.n	8008e06 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df4:	f383 8811 	msr	BASEPRI, r3
 8008df8:	f3bf 8f6f 	isb	sy
 8008dfc:	f3bf 8f4f 	dsb	sy
 8008e00:	623b      	str	r3, [r7, #32]
}
 8008e02:	bf00      	nop
 8008e04:	e7fe      	b.n	8008e04 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008e06:	f002 fc1f 	bl	800b648 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008e0a:	f3ef 8211 	mrs	r2, BASEPRI
 8008e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e12:	f383 8811 	msr	BASEPRI, r3
 8008e16:	f3bf 8f6f 	isb	sy
 8008e1a:	f3bf 8f4f 	dsb	sy
 8008e1e:	61fa      	str	r2, [r7, #28]
 8008e20:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008e22:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008e24:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	d302      	bcc.n	8008e38 <xQueueGenericSendFromISR+0xbc>
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	2b02      	cmp	r3, #2
 8008e36:	d12f      	bne.n	8008e98 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e46:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008e48:	683a      	ldr	r2, [r7, #0]
 8008e4a:	68b9      	ldr	r1, [r7, #8]
 8008e4c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008e4e:	f000 fb64 	bl	800951a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008e52:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e5a:	d112      	bne.n	8008e82 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d016      	beq.n	8008e92 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e66:	3324      	adds	r3, #36	; 0x24
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f001 fa27 	bl	800a2bc <xTaskRemoveFromEventList>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d00e      	beq.n	8008e92 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d00b      	beq.n	8008e92 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	601a      	str	r2, [r3, #0]
 8008e80:	e007      	b.n	8008e92 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008e82:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008e86:	3301      	adds	r3, #1
 8008e88:	b2db      	uxtb	r3, r3
 8008e8a:	b25a      	sxtb	r2, r3
 8008e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008e92:	2301      	movs	r3, #1
 8008e94:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008e96:	e001      	b.n	8008e9c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e9e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008ea6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3740      	adds	r7, #64	; 0x40
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}

08008eb2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008eb2:	b580      	push	{r7, lr}
 8008eb4:	b08e      	sub	sp, #56	; 0x38
 8008eb6:	af00      	add	r7, sp, #0
 8008eb8:	6078      	str	r0, [r7, #4]
 8008eba:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d10a      	bne.n	8008edc <xQueueGiveFromISR+0x2a>
	__asm volatile
 8008ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eca:	f383 8811 	msr	BASEPRI, r3
 8008ece:	f3bf 8f6f 	isb	sy
 8008ed2:	f3bf 8f4f 	dsb	sy
 8008ed6:	623b      	str	r3, [r7, #32]
}
 8008ed8:	bf00      	nop
 8008eda:	e7fe      	b.n	8008eda <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d00a      	beq.n	8008efa <xQueueGiveFromISR+0x48>
	__asm volatile
 8008ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee8:	f383 8811 	msr	BASEPRI, r3
 8008eec:	f3bf 8f6f 	isb	sy
 8008ef0:	f3bf 8f4f 	dsb	sy
 8008ef4:	61fb      	str	r3, [r7, #28]
}
 8008ef6:	bf00      	nop
 8008ef8:	e7fe      	b.n	8008ef8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d103      	bne.n	8008f0a <xQueueGiveFromISR+0x58>
 8008f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f04:	689b      	ldr	r3, [r3, #8]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d101      	bne.n	8008f0e <xQueueGiveFromISR+0x5c>
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	e000      	b.n	8008f10 <xQueueGiveFromISR+0x5e>
 8008f0e:	2300      	movs	r3, #0
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d10a      	bne.n	8008f2a <xQueueGiveFromISR+0x78>
	__asm volatile
 8008f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f18:	f383 8811 	msr	BASEPRI, r3
 8008f1c:	f3bf 8f6f 	isb	sy
 8008f20:	f3bf 8f4f 	dsb	sy
 8008f24:	61bb      	str	r3, [r7, #24]
}
 8008f26:	bf00      	nop
 8008f28:	e7fe      	b.n	8008f28 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008f2a:	f002 fb8d 	bl	800b648 <vPortValidateInterruptPriority>
	__asm volatile
 8008f2e:	f3ef 8211 	mrs	r2, BASEPRI
 8008f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f36:	f383 8811 	msr	BASEPRI, r3
 8008f3a:	f3bf 8f6f 	isb	sy
 8008f3e:	f3bf 8f4f 	dsb	sy
 8008f42:	617a      	str	r2, [r7, #20]
 8008f44:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008f46:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008f48:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f4e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f56:	429a      	cmp	r2, r3
 8008f58:	d22b      	bcs.n	8008fb2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f66:	1c5a      	adds	r2, r3, #1
 8008f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f6a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008f6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f74:	d112      	bne.n	8008f9c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d016      	beq.n	8008fac <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f80:	3324      	adds	r3, #36	; 0x24
 8008f82:	4618      	mov	r0, r3
 8008f84:	f001 f99a 	bl	800a2bc <xTaskRemoveFromEventList>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d00e      	beq.n	8008fac <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d00b      	beq.n	8008fac <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	2201      	movs	r2, #1
 8008f98:	601a      	str	r2, [r3, #0]
 8008f9a:	e007      	b.n	8008fac <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008f9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008fa0:	3301      	adds	r3, #1
 8008fa2:	b2db      	uxtb	r3, r3
 8008fa4:	b25a      	sxtb	r2, r3
 8008fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008fac:	2301      	movs	r3, #1
 8008fae:	637b      	str	r3, [r7, #52]	; 0x34
 8008fb0:	e001      	b.n	8008fb6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	637b      	str	r3, [r7, #52]	; 0x34
 8008fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fb8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	f383 8811 	msr	BASEPRI, r3
}
 8008fc0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3738      	adds	r7, #56	; 0x38
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}

08008fcc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b08c      	sub	sp, #48	; 0x30
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	60f8      	str	r0, [r7, #12]
 8008fd4:	60b9      	str	r1, [r7, #8]
 8008fd6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d10a      	bne.n	8008ffc <xQueueReceive+0x30>
	__asm volatile
 8008fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fea:	f383 8811 	msr	BASEPRI, r3
 8008fee:	f3bf 8f6f 	isb	sy
 8008ff2:	f3bf 8f4f 	dsb	sy
 8008ff6:	623b      	str	r3, [r7, #32]
}
 8008ff8:	bf00      	nop
 8008ffa:	e7fe      	b.n	8008ffa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d103      	bne.n	800900a <xQueueReceive+0x3e>
 8009002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009006:	2b00      	cmp	r3, #0
 8009008:	d101      	bne.n	800900e <xQueueReceive+0x42>
 800900a:	2301      	movs	r3, #1
 800900c:	e000      	b.n	8009010 <xQueueReceive+0x44>
 800900e:	2300      	movs	r3, #0
 8009010:	2b00      	cmp	r3, #0
 8009012:	d10a      	bne.n	800902a <xQueueReceive+0x5e>
	__asm volatile
 8009014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009018:	f383 8811 	msr	BASEPRI, r3
 800901c:	f3bf 8f6f 	isb	sy
 8009020:	f3bf 8f4f 	dsb	sy
 8009024:	61fb      	str	r3, [r7, #28]
}
 8009026:	bf00      	nop
 8009028:	e7fe      	b.n	8009028 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800902a:	f001 fb15 	bl	800a658 <xTaskGetSchedulerState>
 800902e:	4603      	mov	r3, r0
 8009030:	2b00      	cmp	r3, #0
 8009032:	d102      	bne.n	800903a <xQueueReceive+0x6e>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d101      	bne.n	800903e <xQueueReceive+0x72>
 800903a:	2301      	movs	r3, #1
 800903c:	e000      	b.n	8009040 <xQueueReceive+0x74>
 800903e:	2300      	movs	r3, #0
 8009040:	2b00      	cmp	r3, #0
 8009042:	d10a      	bne.n	800905a <xQueueReceive+0x8e>
	__asm volatile
 8009044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009048:	f383 8811 	msr	BASEPRI, r3
 800904c:	f3bf 8f6f 	isb	sy
 8009050:	f3bf 8f4f 	dsb	sy
 8009054:	61bb      	str	r3, [r7, #24]
}
 8009056:	bf00      	nop
 8009058:	e7fe      	b.n	8009058 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800905a:	f002 fa13 	bl	800b484 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800905e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009062:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009066:	2b00      	cmp	r3, #0
 8009068:	d01f      	beq.n	80090aa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800906a:	68b9      	ldr	r1, [r7, #8]
 800906c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800906e:	f000 fabe 	bl	80095ee <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009074:	1e5a      	subs	r2, r3, #1
 8009076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009078:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800907a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800907c:	691b      	ldr	r3, [r3, #16]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d00f      	beq.n	80090a2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009084:	3310      	adds	r3, #16
 8009086:	4618      	mov	r0, r3
 8009088:	f001 f918 	bl	800a2bc <xTaskRemoveFromEventList>
 800908c:	4603      	mov	r3, r0
 800908e:	2b00      	cmp	r3, #0
 8009090:	d007      	beq.n	80090a2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009092:	4b3d      	ldr	r3, [pc, #244]	; (8009188 <xQueueReceive+0x1bc>)
 8009094:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009098:	601a      	str	r2, [r3, #0]
 800909a:	f3bf 8f4f 	dsb	sy
 800909e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80090a2:	f002 fa1f 	bl	800b4e4 <vPortExitCritical>
				return pdPASS;
 80090a6:	2301      	movs	r3, #1
 80090a8:	e069      	b.n	800917e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d103      	bne.n	80090b8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80090b0:	f002 fa18 	bl	800b4e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80090b4:	2300      	movs	r3, #0
 80090b6:	e062      	b.n	800917e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80090b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d106      	bne.n	80090cc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80090be:	f107 0310 	add.w	r3, r7, #16
 80090c2:	4618      	mov	r0, r3
 80090c4:	f001 f95e 	bl	800a384 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80090c8:	2301      	movs	r3, #1
 80090ca:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80090cc:	f002 fa0a 	bl	800b4e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80090d0:	f000 fed0 	bl	8009e74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80090d4:	f002 f9d6 	bl	800b484 <vPortEnterCritical>
 80090d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80090de:	b25b      	sxtb	r3, r3
 80090e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090e4:	d103      	bne.n	80090ee <xQueueReceive+0x122>
 80090e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e8:	2200      	movs	r2, #0
 80090ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80090ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80090f4:	b25b      	sxtb	r3, r3
 80090f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090fa:	d103      	bne.n	8009104 <xQueueReceive+0x138>
 80090fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090fe:	2200      	movs	r2, #0
 8009100:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009104:	f002 f9ee 	bl	800b4e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009108:	1d3a      	adds	r2, r7, #4
 800910a:	f107 0310 	add.w	r3, r7, #16
 800910e:	4611      	mov	r1, r2
 8009110:	4618      	mov	r0, r3
 8009112:	f001 f94d 	bl	800a3b0 <xTaskCheckForTimeOut>
 8009116:	4603      	mov	r3, r0
 8009118:	2b00      	cmp	r3, #0
 800911a:	d123      	bne.n	8009164 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800911c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800911e:	f000 fade 	bl	80096de <prvIsQueueEmpty>
 8009122:	4603      	mov	r3, r0
 8009124:	2b00      	cmp	r3, #0
 8009126:	d017      	beq.n	8009158 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800912a:	3324      	adds	r3, #36	; 0x24
 800912c:	687a      	ldr	r2, [r7, #4]
 800912e:	4611      	mov	r1, r2
 8009130:	4618      	mov	r0, r3
 8009132:	f001 f873 	bl	800a21c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009136:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009138:	f000 fa7f 	bl	800963a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800913c:	f000 fea8 	bl	8009e90 <xTaskResumeAll>
 8009140:	4603      	mov	r3, r0
 8009142:	2b00      	cmp	r3, #0
 8009144:	d189      	bne.n	800905a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009146:	4b10      	ldr	r3, [pc, #64]	; (8009188 <xQueueReceive+0x1bc>)
 8009148:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800914c:	601a      	str	r2, [r3, #0]
 800914e:	f3bf 8f4f 	dsb	sy
 8009152:	f3bf 8f6f 	isb	sy
 8009156:	e780      	b.n	800905a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009158:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800915a:	f000 fa6e 	bl	800963a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800915e:	f000 fe97 	bl	8009e90 <xTaskResumeAll>
 8009162:	e77a      	b.n	800905a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009164:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009166:	f000 fa68 	bl	800963a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800916a:	f000 fe91 	bl	8009e90 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800916e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009170:	f000 fab5 	bl	80096de <prvIsQueueEmpty>
 8009174:	4603      	mov	r3, r0
 8009176:	2b00      	cmp	r3, #0
 8009178:	f43f af6f 	beq.w	800905a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800917c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800917e:	4618      	mov	r0, r3
 8009180:	3730      	adds	r7, #48	; 0x30
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
 8009186:	bf00      	nop
 8009188:	e000ed04 	.word	0xe000ed04

0800918c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b08e      	sub	sp, #56	; 0x38
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009196:	2300      	movs	r3, #0
 8009198:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800919e:	2300      	movs	r3, #0
 80091a0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80091a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d10a      	bne.n	80091be <xQueueSemaphoreTake+0x32>
	__asm volatile
 80091a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ac:	f383 8811 	msr	BASEPRI, r3
 80091b0:	f3bf 8f6f 	isb	sy
 80091b4:	f3bf 8f4f 	dsb	sy
 80091b8:	623b      	str	r3, [r7, #32]
}
 80091ba:	bf00      	nop
 80091bc:	e7fe      	b.n	80091bc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80091be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d00a      	beq.n	80091dc <xQueueSemaphoreTake+0x50>
	__asm volatile
 80091c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ca:	f383 8811 	msr	BASEPRI, r3
 80091ce:	f3bf 8f6f 	isb	sy
 80091d2:	f3bf 8f4f 	dsb	sy
 80091d6:	61fb      	str	r3, [r7, #28]
}
 80091d8:	bf00      	nop
 80091da:	e7fe      	b.n	80091da <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80091dc:	f001 fa3c 	bl	800a658 <xTaskGetSchedulerState>
 80091e0:	4603      	mov	r3, r0
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d102      	bne.n	80091ec <xQueueSemaphoreTake+0x60>
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d101      	bne.n	80091f0 <xQueueSemaphoreTake+0x64>
 80091ec:	2301      	movs	r3, #1
 80091ee:	e000      	b.n	80091f2 <xQueueSemaphoreTake+0x66>
 80091f0:	2300      	movs	r3, #0
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d10a      	bne.n	800920c <xQueueSemaphoreTake+0x80>
	__asm volatile
 80091f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091fa:	f383 8811 	msr	BASEPRI, r3
 80091fe:	f3bf 8f6f 	isb	sy
 8009202:	f3bf 8f4f 	dsb	sy
 8009206:	61bb      	str	r3, [r7, #24]
}
 8009208:	bf00      	nop
 800920a:	e7fe      	b.n	800920a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800920c:	f002 f93a 	bl	800b484 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009214:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009218:	2b00      	cmp	r3, #0
 800921a:	d024      	beq.n	8009266 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800921c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800921e:	1e5a      	subs	r2, r3, #1
 8009220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009222:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d104      	bne.n	8009236 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800922c:	f001 fb8a 	bl	800a944 <pvTaskIncrementMutexHeldCount>
 8009230:	4602      	mov	r2, r0
 8009232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009234:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009238:	691b      	ldr	r3, [r3, #16]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d00f      	beq.n	800925e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800923e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009240:	3310      	adds	r3, #16
 8009242:	4618      	mov	r0, r3
 8009244:	f001 f83a 	bl	800a2bc <xTaskRemoveFromEventList>
 8009248:	4603      	mov	r3, r0
 800924a:	2b00      	cmp	r3, #0
 800924c:	d007      	beq.n	800925e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800924e:	4b54      	ldr	r3, [pc, #336]	; (80093a0 <xQueueSemaphoreTake+0x214>)
 8009250:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009254:	601a      	str	r2, [r3, #0]
 8009256:	f3bf 8f4f 	dsb	sy
 800925a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800925e:	f002 f941 	bl	800b4e4 <vPortExitCritical>
				return pdPASS;
 8009262:	2301      	movs	r3, #1
 8009264:	e097      	b.n	8009396 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d111      	bne.n	8009290 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800926c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800926e:	2b00      	cmp	r3, #0
 8009270:	d00a      	beq.n	8009288 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8009272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009276:	f383 8811 	msr	BASEPRI, r3
 800927a:	f3bf 8f6f 	isb	sy
 800927e:	f3bf 8f4f 	dsb	sy
 8009282:	617b      	str	r3, [r7, #20]
}
 8009284:	bf00      	nop
 8009286:	e7fe      	b.n	8009286 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009288:	f002 f92c 	bl	800b4e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800928c:	2300      	movs	r3, #0
 800928e:	e082      	b.n	8009396 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009292:	2b00      	cmp	r3, #0
 8009294:	d106      	bne.n	80092a4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009296:	f107 030c 	add.w	r3, r7, #12
 800929a:	4618      	mov	r0, r3
 800929c:	f001 f872 	bl	800a384 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80092a0:	2301      	movs	r3, #1
 80092a2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80092a4:	f002 f91e 	bl	800b4e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80092a8:	f000 fde4 	bl	8009e74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80092ac:	f002 f8ea 	bl	800b484 <vPortEnterCritical>
 80092b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80092b6:	b25b      	sxtb	r3, r3
 80092b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092bc:	d103      	bne.n	80092c6 <xQueueSemaphoreTake+0x13a>
 80092be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c0:	2200      	movs	r2, #0
 80092c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092cc:	b25b      	sxtb	r3, r3
 80092ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092d2:	d103      	bne.n	80092dc <xQueueSemaphoreTake+0x150>
 80092d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d6:	2200      	movs	r2, #0
 80092d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80092dc:	f002 f902 	bl	800b4e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80092e0:	463a      	mov	r2, r7
 80092e2:	f107 030c 	add.w	r3, r7, #12
 80092e6:	4611      	mov	r1, r2
 80092e8:	4618      	mov	r0, r3
 80092ea:	f001 f861 	bl	800a3b0 <xTaskCheckForTimeOut>
 80092ee:	4603      	mov	r3, r0
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d132      	bne.n	800935a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80092f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80092f6:	f000 f9f2 	bl	80096de <prvIsQueueEmpty>
 80092fa:	4603      	mov	r3, r0
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d026      	beq.n	800934e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d109      	bne.n	800931c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009308:	f002 f8bc 	bl	800b484 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800930c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800930e:	689b      	ldr	r3, [r3, #8]
 8009310:	4618      	mov	r0, r3
 8009312:	f001 f9bf 	bl	800a694 <xTaskPriorityInherit>
 8009316:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009318:	f002 f8e4 	bl	800b4e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800931c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800931e:	3324      	adds	r3, #36	; 0x24
 8009320:	683a      	ldr	r2, [r7, #0]
 8009322:	4611      	mov	r1, r2
 8009324:	4618      	mov	r0, r3
 8009326:	f000 ff79 	bl	800a21c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800932a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800932c:	f000 f985 	bl	800963a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009330:	f000 fdae 	bl	8009e90 <xTaskResumeAll>
 8009334:	4603      	mov	r3, r0
 8009336:	2b00      	cmp	r3, #0
 8009338:	f47f af68 	bne.w	800920c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800933c:	4b18      	ldr	r3, [pc, #96]	; (80093a0 <xQueueSemaphoreTake+0x214>)
 800933e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009342:	601a      	str	r2, [r3, #0]
 8009344:	f3bf 8f4f 	dsb	sy
 8009348:	f3bf 8f6f 	isb	sy
 800934c:	e75e      	b.n	800920c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800934e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009350:	f000 f973 	bl	800963a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009354:	f000 fd9c 	bl	8009e90 <xTaskResumeAll>
 8009358:	e758      	b.n	800920c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800935a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800935c:	f000 f96d 	bl	800963a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009360:	f000 fd96 	bl	8009e90 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009364:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009366:	f000 f9ba 	bl	80096de <prvIsQueueEmpty>
 800936a:	4603      	mov	r3, r0
 800936c:	2b00      	cmp	r3, #0
 800936e:	f43f af4d 	beq.w	800920c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009374:	2b00      	cmp	r3, #0
 8009376:	d00d      	beq.n	8009394 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009378:	f002 f884 	bl	800b484 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800937c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800937e:	f000 f8b4 	bl	80094ea <prvGetDisinheritPriorityAfterTimeout>
 8009382:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009386:	689b      	ldr	r3, [r3, #8]
 8009388:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800938a:	4618      	mov	r0, r3
 800938c:	f001 fa58 	bl	800a840 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009390:	f002 f8a8 	bl	800b4e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009394:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009396:	4618      	mov	r0, r3
 8009398:	3738      	adds	r7, #56	; 0x38
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}
 800939e:	bf00      	nop
 80093a0:	e000ed04 	.word	0xe000ed04

080093a4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b08e      	sub	sp, #56	; 0x38
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	60f8      	str	r0, [r7, #12]
 80093ac:	60b9      	str	r1, [r7, #8]
 80093ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80093b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d10a      	bne.n	80093d0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80093ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093be:	f383 8811 	msr	BASEPRI, r3
 80093c2:	f3bf 8f6f 	isb	sy
 80093c6:	f3bf 8f4f 	dsb	sy
 80093ca:	623b      	str	r3, [r7, #32]
}
 80093cc:	bf00      	nop
 80093ce:	e7fe      	b.n	80093ce <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d103      	bne.n	80093de <xQueueReceiveFromISR+0x3a>
 80093d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d101      	bne.n	80093e2 <xQueueReceiveFromISR+0x3e>
 80093de:	2301      	movs	r3, #1
 80093e0:	e000      	b.n	80093e4 <xQueueReceiveFromISR+0x40>
 80093e2:	2300      	movs	r3, #0
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d10a      	bne.n	80093fe <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80093e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ec:	f383 8811 	msr	BASEPRI, r3
 80093f0:	f3bf 8f6f 	isb	sy
 80093f4:	f3bf 8f4f 	dsb	sy
 80093f8:	61fb      	str	r3, [r7, #28]
}
 80093fa:	bf00      	nop
 80093fc:	e7fe      	b.n	80093fc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80093fe:	f002 f923 	bl	800b648 <vPortValidateInterruptPriority>
	__asm volatile
 8009402:	f3ef 8211 	mrs	r2, BASEPRI
 8009406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800940a:	f383 8811 	msr	BASEPRI, r3
 800940e:	f3bf 8f6f 	isb	sy
 8009412:	f3bf 8f4f 	dsb	sy
 8009416:	61ba      	str	r2, [r7, #24]
 8009418:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800941a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800941c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800941e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009422:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009426:	2b00      	cmp	r3, #0
 8009428:	d02f      	beq.n	800948a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800942a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800942c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009430:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009434:	68b9      	ldr	r1, [r7, #8]
 8009436:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009438:	f000 f8d9 	bl	80095ee <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800943c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800943e:	1e5a      	subs	r2, r3, #1
 8009440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009442:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009444:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800944c:	d112      	bne.n	8009474 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800944e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009450:	691b      	ldr	r3, [r3, #16]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d016      	beq.n	8009484 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009458:	3310      	adds	r3, #16
 800945a:	4618      	mov	r0, r3
 800945c:	f000 ff2e 	bl	800a2bc <xTaskRemoveFromEventList>
 8009460:	4603      	mov	r3, r0
 8009462:	2b00      	cmp	r3, #0
 8009464:	d00e      	beq.n	8009484 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d00b      	beq.n	8009484 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2201      	movs	r2, #1
 8009470:	601a      	str	r2, [r3, #0]
 8009472:	e007      	b.n	8009484 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009474:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009478:	3301      	adds	r3, #1
 800947a:	b2db      	uxtb	r3, r3
 800947c:	b25a      	sxtb	r2, r3
 800947e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009480:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009484:	2301      	movs	r3, #1
 8009486:	637b      	str	r3, [r7, #52]	; 0x34
 8009488:	e001      	b.n	800948e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800948a:	2300      	movs	r3, #0
 800948c:	637b      	str	r3, [r7, #52]	; 0x34
 800948e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009490:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	f383 8811 	msr	BASEPRI, r3
}
 8009498:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800949a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800949c:	4618      	mov	r0, r3
 800949e:	3738      	adds	r7, #56	; 0x38
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b084      	sub	sp, #16
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d10a      	bne.n	80094cc <vQueueDelete+0x28>
	__asm volatile
 80094b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ba:	f383 8811 	msr	BASEPRI, r3
 80094be:	f3bf 8f6f 	isb	sy
 80094c2:	f3bf 8f4f 	dsb	sy
 80094c6:	60bb      	str	r3, [r7, #8]
}
 80094c8:	bf00      	nop
 80094ca:	e7fe      	b.n	80094ca <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80094cc:	68f8      	ldr	r0, [r7, #12]
 80094ce:	f000 f95f 	bl	8009790 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d102      	bne.n	80094e2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80094dc:	68f8      	ldr	r0, [r7, #12]
 80094de:	f002 f9bf 	bl	800b860 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80094e2:	bf00      	nop
 80094e4:	3710      	adds	r7, #16
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}

080094ea <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80094ea:	b480      	push	{r7}
 80094ec:	b085      	sub	sp, #20
 80094ee:	af00      	add	r7, sp, #0
 80094f0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d006      	beq.n	8009508 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8009504:	60fb      	str	r3, [r7, #12]
 8009506:	e001      	b.n	800950c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009508:	2300      	movs	r3, #0
 800950a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800950c:	68fb      	ldr	r3, [r7, #12]
	}
 800950e:	4618      	mov	r0, r3
 8009510:	3714      	adds	r7, #20
 8009512:	46bd      	mov	sp, r7
 8009514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009518:	4770      	bx	lr

0800951a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800951a:	b580      	push	{r7, lr}
 800951c:	b086      	sub	sp, #24
 800951e:	af00      	add	r7, sp, #0
 8009520:	60f8      	str	r0, [r7, #12]
 8009522:	60b9      	str	r1, [r7, #8]
 8009524:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009526:	2300      	movs	r3, #0
 8009528:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800952e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009534:	2b00      	cmp	r3, #0
 8009536:	d10d      	bne.n	8009554 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d14d      	bne.n	80095dc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	689b      	ldr	r3, [r3, #8]
 8009544:	4618      	mov	r0, r3
 8009546:	f001 f90d 	bl	800a764 <xTaskPriorityDisinherit>
 800954a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2200      	movs	r2, #0
 8009550:	609a      	str	r2, [r3, #8]
 8009552:	e043      	b.n	80095dc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d119      	bne.n	800958e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	6858      	ldr	r0, [r3, #4]
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009562:	461a      	mov	r2, r3
 8009564:	68b9      	ldr	r1, [r7, #8]
 8009566:	f002 fac3 	bl	800baf0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	685a      	ldr	r2, [r3, #4]
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009572:	441a      	add	r2, r3
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	685a      	ldr	r2, [r3, #4]
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	689b      	ldr	r3, [r3, #8]
 8009580:	429a      	cmp	r2, r3
 8009582:	d32b      	bcc.n	80095dc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681a      	ldr	r2, [r3, #0]
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	605a      	str	r2, [r3, #4]
 800958c:	e026      	b.n	80095dc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	68d8      	ldr	r0, [r3, #12]
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009596:	461a      	mov	r2, r3
 8009598:	68b9      	ldr	r1, [r7, #8]
 800959a:	f002 faa9 	bl	800baf0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	68da      	ldr	r2, [r3, #12]
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095a6:	425b      	negs	r3, r3
 80095a8:	441a      	add	r2, r3
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	68da      	ldr	r2, [r3, #12]
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d207      	bcs.n	80095ca <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	689a      	ldr	r2, [r3, #8]
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095c2:	425b      	negs	r3, r3
 80095c4:	441a      	add	r2, r3
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2b02      	cmp	r3, #2
 80095ce:	d105      	bne.n	80095dc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80095d0:	693b      	ldr	r3, [r7, #16]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d002      	beq.n	80095dc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	3b01      	subs	r3, #1
 80095da:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	1c5a      	adds	r2, r3, #1
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80095e4:	697b      	ldr	r3, [r7, #20]
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3718      	adds	r7, #24
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}

080095ee <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80095ee:	b580      	push	{r7, lr}
 80095f0:	b082      	sub	sp, #8
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	6078      	str	r0, [r7, #4]
 80095f6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d018      	beq.n	8009632 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	68da      	ldr	r2, [r3, #12]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009608:	441a      	add	r2, r3
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	68da      	ldr	r2, [r3, #12]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	689b      	ldr	r3, [r3, #8]
 8009616:	429a      	cmp	r2, r3
 8009618:	d303      	bcc.n	8009622 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681a      	ldr	r2, [r3, #0]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	68d9      	ldr	r1, [r3, #12]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800962a:	461a      	mov	r2, r3
 800962c:	6838      	ldr	r0, [r7, #0]
 800962e:	f002 fa5f 	bl	800baf0 <memcpy>
	}
}
 8009632:	bf00      	nop
 8009634:	3708      	adds	r7, #8
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}

0800963a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800963a:	b580      	push	{r7, lr}
 800963c:	b084      	sub	sp, #16
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009642:	f001 ff1f 	bl	800b484 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800964c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800964e:	e011      	b.n	8009674 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009654:	2b00      	cmp	r3, #0
 8009656:	d012      	beq.n	800967e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	3324      	adds	r3, #36	; 0x24
 800965c:	4618      	mov	r0, r3
 800965e:	f000 fe2d 	bl	800a2bc <xTaskRemoveFromEventList>
 8009662:	4603      	mov	r3, r0
 8009664:	2b00      	cmp	r3, #0
 8009666:	d001      	beq.n	800966c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009668:	f000 ff04 	bl	800a474 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800966c:	7bfb      	ldrb	r3, [r7, #15]
 800966e:	3b01      	subs	r3, #1
 8009670:	b2db      	uxtb	r3, r3
 8009672:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009674:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009678:	2b00      	cmp	r3, #0
 800967a:	dce9      	bgt.n	8009650 <prvUnlockQueue+0x16>
 800967c:	e000      	b.n	8009680 <prvUnlockQueue+0x46>
					break;
 800967e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	22ff      	movs	r2, #255	; 0xff
 8009684:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009688:	f001 ff2c 	bl	800b4e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800968c:	f001 fefa 	bl	800b484 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009696:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009698:	e011      	b.n	80096be <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	691b      	ldr	r3, [r3, #16]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d012      	beq.n	80096c8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	3310      	adds	r3, #16
 80096a6:	4618      	mov	r0, r3
 80096a8:	f000 fe08 	bl	800a2bc <xTaskRemoveFromEventList>
 80096ac:	4603      	mov	r3, r0
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d001      	beq.n	80096b6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80096b2:	f000 fedf 	bl	800a474 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80096b6:	7bbb      	ldrb	r3, [r7, #14]
 80096b8:	3b01      	subs	r3, #1
 80096ba:	b2db      	uxtb	r3, r3
 80096bc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80096be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	dce9      	bgt.n	800969a <prvUnlockQueue+0x60>
 80096c6:	e000      	b.n	80096ca <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80096c8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	22ff      	movs	r2, #255	; 0xff
 80096ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80096d2:	f001 ff07 	bl	800b4e4 <vPortExitCritical>
}
 80096d6:	bf00      	nop
 80096d8:	3710      	adds	r7, #16
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}

080096de <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80096de:	b580      	push	{r7, lr}
 80096e0:	b084      	sub	sp, #16
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80096e6:	f001 fecd 	bl	800b484 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d102      	bne.n	80096f8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80096f2:	2301      	movs	r3, #1
 80096f4:	60fb      	str	r3, [r7, #12]
 80096f6:	e001      	b.n	80096fc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80096f8:	2300      	movs	r3, #0
 80096fa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80096fc:	f001 fef2 	bl	800b4e4 <vPortExitCritical>

	return xReturn;
 8009700:	68fb      	ldr	r3, [r7, #12]
}
 8009702:	4618      	mov	r0, r3
 8009704:	3710      	adds	r7, #16
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}

0800970a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800970a:	b580      	push	{r7, lr}
 800970c:	b084      	sub	sp, #16
 800970e:	af00      	add	r7, sp, #0
 8009710:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009712:	f001 feb7 	bl	800b484 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800971e:	429a      	cmp	r2, r3
 8009720:	d102      	bne.n	8009728 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009722:	2301      	movs	r3, #1
 8009724:	60fb      	str	r3, [r7, #12]
 8009726:	e001      	b.n	800972c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009728:	2300      	movs	r3, #0
 800972a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800972c:	f001 feda 	bl	800b4e4 <vPortExitCritical>

	return xReturn;
 8009730:	68fb      	ldr	r3, [r7, #12]
}
 8009732:	4618      	mov	r0, r3
 8009734:	3710      	adds	r7, #16
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}
	...

0800973c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800973c:	b480      	push	{r7}
 800973e:	b085      	sub	sp, #20
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
 8009744:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009746:	2300      	movs	r3, #0
 8009748:	60fb      	str	r3, [r7, #12]
 800974a:	e014      	b.n	8009776 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800974c:	4a0f      	ldr	r2, [pc, #60]	; (800978c <vQueueAddToRegistry+0x50>)
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d10b      	bne.n	8009770 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009758:	490c      	ldr	r1, [pc, #48]	; (800978c <vQueueAddToRegistry+0x50>)
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	683a      	ldr	r2, [r7, #0]
 800975e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009762:	4a0a      	ldr	r2, [pc, #40]	; (800978c <vQueueAddToRegistry+0x50>)
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	00db      	lsls	r3, r3, #3
 8009768:	4413      	add	r3, r2
 800976a:	687a      	ldr	r2, [r7, #4]
 800976c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800976e:	e006      	b.n	800977e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	3301      	adds	r3, #1
 8009774:	60fb      	str	r3, [r7, #12]
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2b07      	cmp	r3, #7
 800977a:	d9e7      	bls.n	800974c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800977c:	bf00      	nop
 800977e:	bf00      	nop
 8009780:	3714      	adds	r7, #20
 8009782:	46bd      	mov	sp, r7
 8009784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009788:	4770      	bx	lr
 800978a:	bf00      	nop
 800978c:	20000db0 	.word	0x20000db0

08009790 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009790:	b480      	push	{r7}
 8009792:	b085      	sub	sp, #20
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009798:	2300      	movs	r3, #0
 800979a:	60fb      	str	r3, [r7, #12]
 800979c:	e016      	b.n	80097cc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800979e:	4a10      	ldr	r2, [pc, #64]	; (80097e0 <vQueueUnregisterQueue+0x50>)
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	00db      	lsls	r3, r3, #3
 80097a4:	4413      	add	r3, r2
 80097a6:	685b      	ldr	r3, [r3, #4]
 80097a8:	687a      	ldr	r2, [r7, #4]
 80097aa:	429a      	cmp	r2, r3
 80097ac:	d10b      	bne.n	80097c6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80097ae:	4a0c      	ldr	r2, [pc, #48]	; (80097e0 <vQueueUnregisterQueue+0x50>)
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2100      	movs	r1, #0
 80097b4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80097b8:	4a09      	ldr	r2, [pc, #36]	; (80097e0 <vQueueUnregisterQueue+0x50>)
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	00db      	lsls	r3, r3, #3
 80097be:	4413      	add	r3, r2
 80097c0:	2200      	movs	r2, #0
 80097c2:	605a      	str	r2, [r3, #4]
				break;
 80097c4:	e006      	b.n	80097d4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	3301      	adds	r3, #1
 80097ca:	60fb      	str	r3, [r7, #12]
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2b07      	cmp	r3, #7
 80097d0:	d9e5      	bls.n	800979e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80097d2:	bf00      	nop
 80097d4:	bf00      	nop
 80097d6:	3714      	adds	r7, #20
 80097d8:	46bd      	mov	sp, r7
 80097da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097de:	4770      	bx	lr
 80097e0:	20000db0 	.word	0x20000db0

080097e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b086      	sub	sp, #24
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	60f8      	str	r0, [r7, #12]
 80097ec:	60b9      	str	r1, [r7, #8]
 80097ee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80097f4:	f001 fe46 	bl	800b484 <vPortEnterCritical>
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80097fe:	b25b      	sxtb	r3, r3
 8009800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009804:	d103      	bne.n	800980e <vQueueWaitForMessageRestricted+0x2a>
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	2200      	movs	r2, #0
 800980a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009814:	b25b      	sxtb	r3, r3
 8009816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800981a:	d103      	bne.n	8009824 <vQueueWaitForMessageRestricted+0x40>
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	2200      	movs	r2, #0
 8009820:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009824:	f001 fe5e 	bl	800b4e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009828:	697b      	ldr	r3, [r7, #20]
 800982a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800982c:	2b00      	cmp	r3, #0
 800982e:	d106      	bne.n	800983e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	3324      	adds	r3, #36	; 0x24
 8009834:	687a      	ldr	r2, [r7, #4]
 8009836:	68b9      	ldr	r1, [r7, #8]
 8009838:	4618      	mov	r0, r3
 800983a:	f000 fd13 	bl	800a264 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800983e:	6978      	ldr	r0, [r7, #20]
 8009840:	f7ff fefb 	bl	800963a <prvUnlockQueue>
	}
 8009844:	bf00      	nop
 8009846:	3718      	adds	r7, #24
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}

0800984c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800984c:	b580      	push	{r7, lr}
 800984e:	b08e      	sub	sp, #56	; 0x38
 8009850:	af04      	add	r7, sp, #16
 8009852:	60f8      	str	r0, [r7, #12]
 8009854:	60b9      	str	r1, [r7, #8]
 8009856:	607a      	str	r2, [r7, #4]
 8009858:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800985a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800985c:	2b00      	cmp	r3, #0
 800985e:	d10a      	bne.n	8009876 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009864:	f383 8811 	msr	BASEPRI, r3
 8009868:	f3bf 8f6f 	isb	sy
 800986c:	f3bf 8f4f 	dsb	sy
 8009870:	623b      	str	r3, [r7, #32]
}
 8009872:	bf00      	nop
 8009874:	e7fe      	b.n	8009874 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009878:	2b00      	cmp	r3, #0
 800987a:	d10a      	bne.n	8009892 <xTaskCreateStatic+0x46>
	__asm volatile
 800987c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009880:	f383 8811 	msr	BASEPRI, r3
 8009884:	f3bf 8f6f 	isb	sy
 8009888:	f3bf 8f4f 	dsb	sy
 800988c:	61fb      	str	r3, [r7, #28]
}
 800988e:	bf00      	nop
 8009890:	e7fe      	b.n	8009890 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009892:	235c      	movs	r3, #92	; 0x5c
 8009894:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	2b5c      	cmp	r3, #92	; 0x5c
 800989a:	d00a      	beq.n	80098b2 <xTaskCreateStatic+0x66>
	__asm volatile
 800989c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a0:	f383 8811 	msr	BASEPRI, r3
 80098a4:	f3bf 8f6f 	isb	sy
 80098a8:	f3bf 8f4f 	dsb	sy
 80098ac:	61bb      	str	r3, [r7, #24]
}
 80098ae:	bf00      	nop
 80098b0:	e7fe      	b.n	80098b0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80098b2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80098b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d01e      	beq.n	80098f8 <xTaskCreateStatic+0xac>
 80098ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d01b      	beq.n	80098f8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80098c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098c2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80098c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80098c8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80098ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098cc:	2202      	movs	r2, #2
 80098ce:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80098d2:	2300      	movs	r3, #0
 80098d4:	9303      	str	r3, [sp, #12]
 80098d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d8:	9302      	str	r3, [sp, #8]
 80098da:	f107 0314 	add.w	r3, r7, #20
 80098de:	9301      	str	r3, [sp, #4]
 80098e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e2:	9300      	str	r3, [sp, #0]
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	687a      	ldr	r2, [r7, #4]
 80098e8:	68b9      	ldr	r1, [r7, #8]
 80098ea:	68f8      	ldr	r0, [r7, #12]
 80098ec:	f000 f850 	bl	8009990 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80098f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80098f2:	f000 f8dd 	bl	8009ab0 <prvAddNewTaskToReadyList>
 80098f6:	e001      	b.n	80098fc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80098f8:	2300      	movs	r3, #0
 80098fa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80098fc:	697b      	ldr	r3, [r7, #20]
	}
 80098fe:	4618      	mov	r0, r3
 8009900:	3728      	adds	r7, #40	; 0x28
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}

08009906 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009906:	b580      	push	{r7, lr}
 8009908:	b08c      	sub	sp, #48	; 0x30
 800990a:	af04      	add	r7, sp, #16
 800990c:	60f8      	str	r0, [r7, #12]
 800990e:	60b9      	str	r1, [r7, #8]
 8009910:	603b      	str	r3, [r7, #0]
 8009912:	4613      	mov	r3, r2
 8009914:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009916:	88fb      	ldrh	r3, [r7, #6]
 8009918:	009b      	lsls	r3, r3, #2
 800991a:	4618      	mov	r0, r3
 800991c:	f001 fed4 	bl	800b6c8 <pvPortMalloc>
 8009920:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d00e      	beq.n	8009946 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009928:	205c      	movs	r0, #92	; 0x5c
 800992a:	f001 fecd 	bl	800b6c8 <pvPortMalloc>
 800992e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009930:	69fb      	ldr	r3, [r7, #28]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d003      	beq.n	800993e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009936:	69fb      	ldr	r3, [r7, #28]
 8009938:	697a      	ldr	r2, [r7, #20]
 800993a:	631a      	str	r2, [r3, #48]	; 0x30
 800993c:	e005      	b.n	800994a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800993e:	6978      	ldr	r0, [r7, #20]
 8009940:	f001 ff8e 	bl	800b860 <vPortFree>
 8009944:	e001      	b.n	800994a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009946:	2300      	movs	r3, #0
 8009948:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800994a:	69fb      	ldr	r3, [r7, #28]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d017      	beq.n	8009980 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009950:	69fb      	ldr	r3, [r7, #28]
 8009952:	2200      	movs	r2, #0
 8009954:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009958:	88fa      	ldrh	r2, [r7, #6]
 800995a:	2300      	movs	r3, #0
 800995c:	9303      	str	r3, [sp, #12]
 800995e:	69fb      	ldr	r3, [r7, #28]
 8009960:	9302      	str	r3, [sp, #8]
 8009962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009964:	9301      	str	r3, [sp, #4]
 8009966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009968:	9300      	str	r3, [sp, #0]
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	68b9      	ldr	r1, [r7, #8]
 800996e:	68f8      	ldr	r0, [r7, #12]
 8009970:	f000 f80e 	bl	8009990 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009974:	69f8      	ldr	r0, [r7, #28]
 8009976:	f000 f89b 	bl	8009ab0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800997a:	2301      	movs	r3, #1
 800997c:	61bb      	str	r3, [r7, #24]
 800997e:	e002      	b.n	8009986 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009980:	f04f 33ff 	mov.w	r3, #4294967295
 8009984:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009986:	69bb      	ldr	r3, [r7, #24]
	}
 8009988:	4618      	mov	r0, r3
 800998a:	3720      	adds	r7, #32
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}

08009990 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b088      	sub	sp, #32
 8009994:	af00      	add	r7, sp, #0
 8009996:	60f8      	str	r0, [r7, #12]
 8009998:	60b9      	str	r1, [r7, #8]
 800999a:	607a      	str	r2, [r7, #4]
 800999c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800999e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	009b      	lsls	r3, r3, #2
 80099a6:	461a      	mov	r2, r3
 80099a8:	21a5      	movs	r1, #165	; 0xa5
 80099aa:	f002 f8af 	bl	800bb0c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80099ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80099b8:	3b01      	subs	r3, #1
 80099ba:	009b      	lsls	r3, r3, #2
 80099bc:	4413      	add	r3, r2
 80099be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80099c0:	69bb      	ldr	r3, [r7, #24]
 80099c2:	f023 0307 	bic.w	r3, r3, #7
 80099c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80099c8:	69bb      	ldr	r3, [r7, #24]
 80099ca:	f003 0307 	and.w	r3, r3, #7
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d00a      	beq.n	80099e8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80099d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d6:	f383 8811 	msr	BASEPRI, r3
 80099da:	f3bf 8f6f 	isb	sy
 80099de:	f3bf 8f4f 	dsb	sy
 80099e2:	617b      	str	r3, [r7, #20]
}
 80099e4:	bf00      	nop
 80099e6:	e7fe      	b.n	80099e6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d01f      	beq.n	8009a2e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80099ee:	2300      	movs	r3, #0
 80099f0:	61fb      	str	r3, [r7, #28]
 80099f2:	e012      	b.n	8009a1a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80099f4:	68ba      	ldr	r2, [r7, #8]
 80099f6:	69fb      	ldr	r3, [r7, #28]
 80099f8:	4413      	add	r3, r2
 80099fa:	7819      	ldrb	r1, [r3, #0]
 80099fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099fe:	69fb      	ldr	r3, [r7, #28]
 8009a00:	4413      	add	r3, r2
 8009a02:	3334      	adds	r3, #52	; 0x34
 8009a04:	460a      	mov	r2, r1
 8009a06:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009a08:	68ba      	ldr	r2, [r7, #8]
 8009a0a:	69fb      	ldr	r3, [r7, #28]
 8009a0c:	4413      	add	r3, r2
 8009a0e:	781b      	ldrb	r3, [r3, #0]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d006      	beq.n	8009a22 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009a14:	69fb      	ldr	r3, [r7, #28]
 8009a16:	3301      	adds	r3, #1
 8009a18:	61fb      	str	r3, [r7, #28]
 8009a1a:	69fb      	ldr	r3, [r7, #28]
 8009a1c:	2b0f      	cmp	r3, #15
 8009a1e:	d9e9      	bls.n	80099f4 <prvInitialiseNewTask+0x64>
 8009a20:	e000      	b.n	8009a24 <prvInitialiseNewTask+0x94>
			{
				break;
 8009a22:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a26:	2200      	movs	r2, #0
 8009a28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009a2c:	e003      	b.n	8009a36 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a30:	2200      	movs	r2, #0
 8009a32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a38:	2b37      	cmp	r3, #55	; 0x37
 8009a3a:	d901      	bls.n	8009a40 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009a3c:	2337      	movs	r3, #55	; 0x37
 8009a3e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a44:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a4a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a4e:	2200      	movs	r2, #0
 8009a50:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a54:	3304      	adds	r3, #4
 8009a56:	4618      	mov	r0, r3
 8009a58:	f7fe fda0 	bl	800859c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a5e:	3318      	adds	r3, #24
 8009a60:	4618      	mov	r0, r3
 8009a62:	f7fe fd9b 	bl	800859c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a6a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a6e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a74:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a7a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a7e:	2200      	movs	r2, #0
 8009a80:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a84:	2200      	movs	r2, #0
 8009a86:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009a8a:	683a      	ldr	r2, [r7, #0]
 8009a8c:	68f9      	ldr	r1, [r7, #12]
 8009a8e:	69b8      	ldr	r0, [r7, #24]
 8009a90:	f001 fbc8 	bl	800b224 <pxPortInitialiseStack>
 8009a94:	4602      	mov	r2, r0
 8009a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a98:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d002      	beq.n	8009aa6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009aa4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009aa6:	bf00      	nop
 8009aa8:	3720      	adds	r7, #32
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}
	...

08009ab0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b082      	sub	sp, #8
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009ab8:	f001 fce4 	bl	800b484 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009abc:	4b2d      	ldr	r3, [pc, #180]	; (8009b74 <prvAddNewTaskToReadyList+0xc4>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	3301      	adds	r3, #1
 8009ac2:	4a2c      	ldr	r2, [pc, #176]	; (8009b74 <prvAddNewTaskToReadyList+0xc4>)
 8009ac4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009ac6:	4b2c      	ldr	r3, [pc, #176]	; (8009b78 <prvAddNewTaskToReadyList+0xc8>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d109      	bne.n	8009ae2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009ace:	4a2a      	ldr	r2, [pc, #168]	; (8009b78 <prvAddNewTaskToReadyList+0xc8>)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009ad4:	4b27      	ldr	r3, [pc, #156]	; (8009b74 <prvAddNewTaskToReadyList+0xc4>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	2b01      	cmp	r3, #1
 8009ada:	d110      	bne.n	8009afe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009adc:	f000 fcee 	bl	800a4bc <prvInitialiseTaskLists>
 8009ae0:	e00d      	b.n	8009afe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009ae2:	4b26      	ldr	r3, [pc, #152]	; (8009b7c <prvAddNewTaskToReadyList+0xcc>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d109      	bne.n	8009afe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009aea:	4b23      	ldr	r3, [pc, #140]	; (8009b78 <prvAddNewTaskToReadyList+0xc8>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d802      	bhi.n	8009afe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009af8:	4a1f      	ldr	r2, [pc, #124]	; (8009b78 <prvAddNewTaskToReadyList+0xc8>)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009afe:	4b20      	ldr	r3, [pc, #128]	; (8009b80 <prvAddNewTaskToReadyList+0xd0>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	3301      	adds	r3, #1
 8009b04:	4a1e      	ldr	r2, [pc, #120]	; (8009b80 <prvAddNewTaskToReadyList+0xd0>)
 8009b06:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009b08:	4b1d      	ldr	r3, [pc, #116]	; (8009b80 <prvAddNewTaskToReadyList+0xd0>)
 8009b0a:	681a      	ldr	r2, [r3, #0]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b14:	4b1b      	ldr	r3, [pc, #108]	; (8009b84 <prvAddNewTaskToReadyList+0xd4>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	d903      	bls.n	8009b24 <prvAddNewTaskToReadyList+0x74>
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b20:	4a18      	ldr	r2, [pc, #96]	; (8009b84 <prvAddNewTaskToReadyList+0xd4>)
 8009b22:	6013      	str	r3, [r2, #0]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b28:	4613      	mov	r3, r2
 8009b2a:	009b      	lsls	r3, r3, #2
 8009b2c:	4413      	add	r3, r2
 8009b2e:	009b      	lsls	r3, r3, #2
 8009b30:	4a15      	ldr	r2, [pc, #84]	; (8009b88 <prvAddNewTaskToReadyList+0xd8>)
 8009b32:	441a      	add	r2, r3
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	3304      	adds	r3, #4
 8009b38:	4619      	mov	r1, r3
 8009b3a:	4610      	mov	r0, r2
 8009b3c:	f7fe fd3b 	bl	80085b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009b40:	f001 fcd0 	bl	800b4e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009b44:	4b0d      	ldr	r3, [pc, #52]	; (8009b7c <prvAddNewTaskToReadyList+0xcc>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d00e      	beq.n	8009b6a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009b4c:	4b0a      	ldr	r3, [pc, #40]	; (8009b78 <prvAddNewTaskToReadyList+0xc8>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b56:	429a      	cmp	r2, r3
 8009b58:	d207      	bcs.n	8009b6a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009b5a:	4b0c      	ldr	r3, [pc, #48]	; (8009b8c <prvAddNewTaskToReadyList+0xdc>)
 8009b5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b60:	601a      	str	r2, [r3, #0]
 8009b62:	f3bf 8f4f 	dsb	sy
 8009b66:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b6a:	bf00      	nop
 8009b6c:	3708      	adds	r7, #8
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}
 8009b72:	bf00      	nop
 8009b74:	200012c4 	.word	0x200012c4
 8009b78:	20000df0 	.word	0x20000df0
 8009b7c:	200012d0 	.word	0x200012d0
 8009b80:	200012e0 	.word	0x200012e0
 8009b84:	200012cc 	.word	0x200012cc
 8009b88:	20000df4 	.word	0x20000df4
 8009b8c:	e000ed04 	.word	0xe000ed04

08009b90 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b084      	sub	sp, #16
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8009b98:	f001 fc74 	bl	800b484 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d102      	bne.n	8009ba8 <vTaskDelete+0x18>
 8009ba2:	4b2c      	ldr	r3, [pc, #176]	; (8009c54 <vTaskDelete+0xc4>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	e000      	b.n	8009baa <vTaskDelete+0x1a>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	3304      	adds	r3, #4
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f7fe fd5d 	bl	8008670 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d004      	beq.n	8009bc8 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	3318      	adds	r3, #24
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f7fe fd54 	bl	8008670 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8009bc8:	4b23      	ldr	r3, [pc, #140]	; (8009c58 <vTaskDelete+0xc8>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	3301      	adds	r3, #1
 8009bce:	4a22      	ldr	r2, [pc, #136]	; (8009c58 <vTaskDelete+0xc8>)
 8009bd0:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8009bd2:	4b20      	ldr	r3, [pc, #128]	; (8009c54 <vTaskDelete+0xc4>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	68fa      	ldr	r2, [r7, #12]
 8009bd8:	429a      	cmp	r2, r3
 8009bda:	d10b      	bne.n	8009bf4 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	3304      	adds	r3, #4
 8009be0:	4619      	mov	r1, r3
 8009be2:	481e      	ldr	r0, [pc, #120]	; (8009c5c <vTaskDelete+0xcc>)
 8009be4:	f7fe fce7 	bl	80085b6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8009be8:	4b1d      	ldr	r3, [pc, #116]	; (8009c60 <vTaskDelete+0xd0>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	3301      	adds	r3, #1
 8009bee:	4a1c      	ldr	r2, [pc, #112]	; (8009c60 <vTaskDelete+0xd0>)
 8009bf0:	6013      	str	r3, [r2, #0]
 8009bf2:	e009      	b.n	8009c08 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8009bf4:	4b1b      	ldr	r3, [pc, #108]	; (8009c64 <vTaskDelete+0xd4>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	3b01      	subs	r3, #1
 8009bfa:	4a1a      	ldr	r2, [pc, #104]	; (8009c64 <vTaskDelete+0xd4>)
 8009bfc:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8009bfe:	68f8      	ldr	r0, [r7, #12]
 8009c00:	f000 fcca 	bl	800a598 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8009c04:	f000 fcf8 	bl	800a5f8 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8009c08:	f001 fc6c 	bl	800b4e4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8009c0c:	4b16      	ldr	r3, [pc, #88]	; (8009c68 <vTaskDelete+0xd8>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d01b      	beq.n	8009c4c <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8009c14:	4b0f      	ldr	r3, [pc, #60]	; (8009c54 <vTaskDelete+0xc4>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	68fa      	ldr	r2, [r7, #12]
 8009c1a:	429a      	cmp	r2, r3
 8009c1c:	d116      	bne.n	8009c4c <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8009c1e:	4b13      	ldr	r3, [pc, #76]	; (8009c6c <vTaskDelete+0xdc>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d00a      	beq.n	8009c3c <vTaskDelete+0xac>
	__asm volatile
 8009c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c2a:	f383 8811 	msr	BASEPRI, r3
 8009c2e:	f3bf 8f6f 	isb	sy
 8009c32:	f3bf 8f4f 	dsb	sy
 8009c36:	60bb      	str	r3, [r7, #8]
}
 8009c38:	bf00      	nop
 8009c3a:	e7fe      	b.n	8009c3a <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8009c3c:	4b0c      	ldr	r3, [pc, #48]	; (8009c70 <vTaskDelete+0xe0>)
 8009c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c42:	601a      	str	r2, [r3, #0]
 8009c44:	f3bf 8f4f 	dsb	sy
 8009c48:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009c4c:	bf00      	nop
 8009c4e:	3710      	adds	r7, #16
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}
 8009c54:	20000df0 	.word	0x20000df0
 8009c58:	200012e0 	.word	0x200012e0
 8009c5c:	20001298 	.word	0x20001298
 8009c60:	200012ac 	.word	0x200012ac
 8009c64:	200012c4 	.word	0x200012c4
 8009c68:	200012d0 	.word	0x200012d0
 8009c6c:	200012ec 	.word	0x200012ec
 8009c70:	e000ed04 	.word	0xe000ed04

08009c74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b084      	sub	sp, #16
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d017      	beq.n	8009cb6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009c86:	4b13      	ldr	r3, [pc, #76]	; (8009cd4 <vTaskDelay+0x60>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d00a      	beq.n	8009ca4 <vTaskDelay+0x30>
	__asm volatile
 8009c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c92:	f383 8811 	msr	BASEPRI, r3
 8009c96:	f3bf 8f6f 	isb	sy
 8009c9a:	f3bf 8f4f 	dsb	sy
 8009c9e:	60bb      	str	r3, [r7, #8]
}
 8009ca0:	bf00      	nop
 8009ca2:	e7fe      	b.n	8009ca2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009ca4:	f000 f8e6 	bl	8009e74 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009ca8:	2100      	movs	r1, #0
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f000 fe5e 	bl	800a96c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009cb0:	f000 f8ee 	bl	8009e90 <xTaskResumeAll>
 8009cb4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d107      	bne.n	8009ccc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009cbc:	4b06      	ldr	r3, [pc, #24]	; (8009cd8 <vTaskDelay+0x64>)
 8009cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cc2:	601a      	str	r2, [r3, #0]
 8009cc4:	f3bf 8f4f 	dsb	sy
 8009cc8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009ccc:	bf00      	nop
 8009cce:	3710      	adds	r7, #16
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}
 8009cd4:	200012ec 	.word	0x200012ec
 8009cd8:	e000ed04 	.word	0xe000ed04

08009cdc <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b088      	sub	sp, #32
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8009ce8:	69bb      	ldr	r3, [r7, #24]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d10a      	bne.n	8009d04 <eTaskGetState+0x28>
	__asm volatile
 8009cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf2:	f383 8811 	msr	BASEPRI, r3
 8009cf6:	f3bf 8f6f 	isb	sy
 8009cfa:	f3bf 8f4f 	dsb	sy
 8009cfe:	60bb      	str	r3, [r7, #8]
}
 8009d00:	bf00      	nop
 8009d02:	e7fe      	b.n	8009d02 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8009d04:	4b23      	ldr	r3, [pc, #140]	; (8009d94 <eTaskGetState+0xb8>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	69ba      	ldr	r2, [r7, #24]
 8009d0a:	429a      	cmp	r2, r3
 8009d0c:	d102      	bne.n	8009d14 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	77fb      	strb	r3, [r7, #31]
 8009d12:	e03a      	b.n	8009d8a <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 8009d14:	f001 fbb6 	bl	800b484 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8009d18:	69bb      	ldr	r3, [r7, #24]
 8009d1a:	695b      	ldr	r3, [r3, #20]
 8009d1c:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8009d1e:	4b1e      	ldr	r3, [pc, #120]	; (8009d98 <eTaskGetState+0xbc>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8009d24:	4b1d      	ldr	r3, [pc, #116]	; (8009d9c <eTaskGetState+0xc0>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8009d2a:	f001 fbdb 	bl	800b4e4 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8009d2e:	697a      	ldr	r2, [r7, #20]
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	429a      	cmp	r2, r3
 8009d34:	d003      	beq.n	8009d3e <eTaskGetState+0x62>
 8009d36:	697a      	ldr	r2, [r7, #20]
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	429a      	cmp	r2, r3
 8009d3c:	d102      	bne.n	8009d44 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8009d3e:	2302      	movs	r3, #2
 8009d40:	77fb      	strb	r3, [r7, #31]
 8009d42:	e022      	b.n	8009d8a <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	4a16      	ldr	r2, [pc, #88]	; (8009da0 <eTaskGetState+0xc4>)
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d112      	bne.n	8009d72 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8009d4c:	69bb      	ldr	r3, [r7, #24]
 8009d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d10b      	bne.n	8009d6c <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8009d54:	69bb      	ldr	r3, [r7, #24]
 8009d56:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009d5a:	b2db      	uxtb	r3, r3
 8009d5c:	2b01      	cmp	r3, #1
 8009d5e:	d102      	bne.n	8009d66 <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8009d60:	2302      	movs	r3, #2
 8009d62:	77fb      	strb	r3, [r7, #31]
 8009d64:	e011      	b.n	8009d8a <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 8009d66:	2303      	movs	r3, #3
 8009d68:	77fb      	strb	r3, [r7, #31]
 8009d6a:	e00e      	b.n	8009d8a <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8009d6c:	2302      	movs	r3, #2
 8009d6e:	77fb      	strb	r3, [r7, #31]
 8009d70:	e00b      	b.n	8009d8a <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	4a0b      	ldr	r2, [pc, #44]	; (8009da4 <eTaskGetState+0xc8>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d002      	beq.n	8009d80 <eTaskGetState+0xa4>
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d102      	bne.n	8009d86 <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8009d80:	2304      	movs	r3, #4
 8009d82:	77fb      	strb	r3, [r7, #31]
 8009d84:	e001      	b.n	8009d8a <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8009d86:	2301      	movs	r3, #1
 8009d88:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8009d8a:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3720      	adds	r7, #32
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}
 8009d94:	20000df0 	.word	0x20000df0
 8009d98:	2000127c 	.word	0x2000127c
 8009d9c:	20001280 	.word	0x20001280
 8009da0:	200012b0 	.word	0x200012b0
 8009da4:	20001298 	.word	0x20001298

08009da8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b08a      	sub	sp, #40	; 0x28
 8009dac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009dae:	2300      	movs	r3, #0
 8009db0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009db2:	2300      	movs	r3, #0
 8009db4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009db6:	463a      	mov	r2, r7
 8009db8:	1d39      	adds	r1, r7, #4
 8009dba:	f107 0308 	add.w	r3, r7, #8
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f7fe fb98 	bl	80084f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009dc4:	6839      	ldr	r1, [r7, #0]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	68ba      	ldr	r2, [r7, #8]
 8009dca:	9202      	str	r2, [sp, #8]
 8009dcc:	9301      	str	r3, [sp, #4]
 8009dce:	2300      	movs	r3, #0
 8009dd0:	9300      	str	r3, [sp, #0]
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	460a      	mov	r2, r1
 8009dd6:	4921      	ldr	r1, [pc, #132]	; (8009e5c <vTaskStartScheduler+0xb4>)
 8009dd8:	4821      	ldr	r0, [pc, #132]	; (8009e60 <vTaskStartScheduler+0xb8>)
 8009dda:	f7ff fd37 	bl	800984c <xTaskCreateStatic>
 8009dde:	4603      	mov	r3, r0
 8009de0:	4a20      	ldr	r2, [pc, #128]	; (8009e64 <vTaskStartScheduler+0xbc>)
 8009de2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009de4:	4b1f      	ldr	r3, [pc, #124]	; (8009e64 <vTaskStartScheduler+0xbc>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d002      	beq.n	8009df2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009dec:	2301      	movs	r3, #1
 8009dee:	617b      	str	r3, [r7, #20]
 8009df0:	e001      	b.n	8009df6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009df2:	2300      	movs	r3, #0
 8009df4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	2b01      	cmp	r3, #1
 8009dfa:	d102      	bne.n	8009e02 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009dfc:	f000 fe0a 	bl	800aa14 <xTimerCreateTimerTask>
 8009e00:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	2b01      	cmp	r3, #1
 8009e06:	d116      	bne.n	8009e36 <vTaskStartScheduler+0x8e>
	__asm volatile
 8009e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e0c:	f383 8811 	msr	BASEPRI, r3
 8009e10:	f3bf 8f6f 	isb	sy
 8009e14:	f3bf 8f4f 	dsb	sy
 8009e18:	613b      	str	r3, [r7, #16]
}
 8009e1a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009e1c:	4b12      	ldr	r3, [pc, #72]	; (8009e68 <vTaskStartScheduler+0xc0>)
 8009e1e:	f04f 32ff 	mov.w	r2, #4294967295
 8009e22:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009e24:	4b11      	ldr	r3, [pc, #68]	; (8009e6c <vTaskStartScheduler+0xc4>)
 8009e26:	2201      	movs	r2, #1
 8009e28:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009e2a:	4b11      	ldr	r3, [pc, #68]	; (8009e70 <vTaskStartScheduler+0xc8>)
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009e30:	f001 fa86 	bl	800b340 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009e34:	e00e      	b.n	8009e54 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009e36:	697b      	ldr	r3, [r7, #20]
 8009e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e3c:	d10a      	bne.n	8009e54 <vTaskStartScheduler+0xac>
	__asm volatile
 8009e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e42:	f383 8811 	msr	BASEPRI, r3
 8009e46:	f3bf 8f6f 	isb	sy
 8009e4a:	f3bf 8f4f 	dsb	sy
 8009e4e:	60fb      	str	r3, [r7, #12]
}
 8009e50:	bf00      	nop
 8009e52:	e7fe      	b.n	8009e52 <vTaskStartScheduler+0xaa>
}
 8009e54:	bf00      	nop
 8009e56:	3718      	adds	r7, #24
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}
 8009e5c:	0800d604 	.word	0x0800d604
 8009e60:	0800a48d 	.word	0x0800a48d
 8009e64:	200012e8 	.word	0x200012e8
 8009e68:	200012e4 	.word	0x200012e4
 8009e6c:	200012d0 	.word	0x200012d0
 8009e70:	200012c8 	.word	0x200012c8

08009e74 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009e74:	b480      	push	{r7}
 8009e76:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009e78:	4b04      	ldr	r3, [pc, #16]	; (8009e8c <vTaskSuspendAll+0x18>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	3301      	adds	r3, #1
 8009e7e:	4a03      	ldr	r2, [pc, #12]	; (8009e8c <vTaskSuspendAll+0x18>)
 8009e80:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009e82:	bf00      	nop
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr
 8009e8c:	200012ec 	.word	0x200012ec

08009e90 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b084      	sub	sp, #16
 8009e94:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009e96:	2300      	movs	r3, #0
 8009e98:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009e9e:	4b42      	ldr	r3, [pc, #264]	; (8009fa8 <xTaskResumeAll+0x118>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d10a      	bne.n	8009ebc <xTaskResumeAll+0x2c>
	__asm volatile
 8009ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eaa:	f383 8811 	msr	BASEPRI, r3
 8009eae:	f3bf 8f6f 	isb	sy
 8009eb2:	f3bf 8f4f 	dsb	sy
 8009eb6:	603b      	str	r3, [r7, #0]
}
 8009eb8:	bf00      	nop
 8009eba:	e7fe      	b.n	8009eba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009ebc:	f001 fae2 	bl	800b484 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009ec0:	4b39      	ldr	r3, [pc, #228]	; (8009fa8 <xTaskResumeAll+0x118>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	3b01      	subs	r3, #1
 8009ec6:	4a38      	ldr	r2, [pc, #224]	; (8009fa8 <xTaskResumeAll+0x118>)
 8009ec8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009eca:	4b37      	ldr	r3, [pc, #220]	; (8009fa8 <xTaskResumeAll+0x118>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d162      	bne.n	8009f98 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009ed2:	4b36      	ldr	r3, [pc, #216]	; (8009fac <xTaskResumeAll+0x11c>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d05e      	beq.n	8009f98 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009eda:	e02f      	b.n	8009f3c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009edc:	4b34      	ldr	r3, [pc, #208]	; (8009fb0 <xTaskResumeAll+0x120>)
 8009ede:	68db      	ldr	r3, [r3, #12]
 8009ee0:	68db      	ldr	r3, [r3, #12]
 8009ee2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	3318      	adds	r3, #24
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f7fe fbc1 	bl	8008670 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	3304      	adds	r3, #4
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f7fe fbbc 	bl	8008670 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009efc:	4b2d      	ldr	r3, [pc, #180]	; (8009fb4 <xTaskResumeAll+0x124>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	429a      	cmp	r2, r3
 8009f02:	d903      	bls.n	8009f0c <xTaskResumeAll+0x7c>
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f08:	4a2a      	ldr	r2, [pc, #168]	; (8009fb4 <xTaskResumeAll+0x124>)
 8009f0a:	6013      	str	r3, [r2, #0]
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f10:	4613      	mov	r3, r2
 8009f12:	009b      	lsls	r3, r3, #2
 8009f14:	4413      	add	r3, r2
 8009f16:	009b      	lsls	r3, r3, #2
 8009f18:	4a27      	ldr	r2, [pc, #156]	; (8009fb8 <xTaskResumeAll+0x128>)
 8009f1a:	441a      	add	r2, r3
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	3304      	adds	r3, #4
 8009f20:	4619      	mov	r1, r3
 8009f22:	4610      	mov	r0, r2
 8009f24:	f7fe fb47 	bl	80085b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f2c:	4b23      	ldr	r3, [pc, #140]	; (8009fbc <xTaskResumeAll+0x12c>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f32:	429a      	cmp	r2, r3
 8009f34:	d302      	bcc.n	8009f3c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009f36:	4b22      	ldr	r3, [pc, #136]	; (8009fc0 <xTaskResumeAll+0x130>)
 8009f38:	2201      	movs	r2, #1
 8009f3a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009f3c:	4b1c      	ldr	r3, [pc, #112]	; (8009fb0 <xTaskResumeAll+0x120>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d1cb      	bne.n	8009edc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d001      	beq.n	8009f4e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009f4a:	f000 fb55 	bl	800a5f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009f4e:	4b1d      	ldr	r3, [pc, #116]	; (8009fc4 <xTaskResumeAll+0x134>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d010      	beq.n	8009f7c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009f5a:	f000 f847 	bl	8009fec <xTaskIncrementTick>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d002      	beq.n	8009f6a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009f64:	4b16      	ldr	r3, [pc, #88]	; (8009fc0 <xTaskResumeAll+0x130>)
 8009f66:	2201      	movs	r2, #1
 8009f68:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	3b01      	subs	r3, #1
 8009f6e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d1f1      	bne.n	8009f5a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009f76:	4b13      	ldr	r3, [pc, #76]	; (8009fc4 <xTaskResumeAll+0x134>)
 8009f78:	2200      	movs	r2, #0
 8009f7a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009f7c:	4b10      	ldr	r3, [pc, #64]	; (8009fc0 <xTaskResumeAll+0x130>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d009      	beq.n	8009f98 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009f84:	2301      	movs	r3, #1
 8009f86:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009f88:	4b0f      	ldr	r3, [pc, #60]	; (8009fc8 <xTaskResumeAll+0x138>)
 8009f8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f8e:	601a      	str	r2, [r3, #0]
 8009f90:	f3bf 8f4f 	dsb	sy
 8009f94:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009f98:	f001 faa4 	bl	800b4e4 <vPortExitCritical>

	return xAlreadyYielded;
 8009f9c:	68bb      	ldr	r3, [r7, #8]
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	3710      	adds	r7, #16
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}
 8009fa6:	bf00      	nop
 8009fa8:	200012ec 	.word	0x200012ec
 8009fac:	200012c4 	.word	0x200012c4
 8009fb0:	20001284 	.word	0x20001284
 8009fb4:	200012cc 	.word	0x200012cc
 8009fb8:	20000df4 	.word	0x20000df4
 8009fbc:	20000df0 	.word	0x20000df0
 8009fc0:	200012d8 	.word	0x200012d8
 8009fc4:	200012d4 	.word	0x200012d4
 8009fc8:	e000ed04 	.word	0xe000ed04

08009fcc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b083      	sub	sp, #12
 8009fd0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009fd2:	4b05      	ldr	r3, [pc, #20]	; (8009fe8 <xTaskGetTickCount+0x1c>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009fd8:	687b      	ldr	r3, [r7, #4]
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	370c      	adds	r7, #12
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe4:	4770      	bx	lr
 8009fe6:	bf00      	nop
 8009fe8:	200012c8 	.word	0x200012c8

08009fec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b086      	sub	sp, #24
 8009ff0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ff6:	4b4f      	ldr	r3, [pc, #316]	; (800a134 <xTaskIncrementTick+0x148>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	f040 808f 	bne.w	800a11e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a000:	4b4d      	ldr	r3, [pc, #308]	; (800a138 <xTaskIncrementTick+0x14c>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	3301      	adds	r3, #1
 800a006:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a008:	4a4b      	ldr	r2, [pc, #300]	; (800a138 <xTaskIncrementTick+0x14c>)
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d120      	bne.n	800a056 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a014:	4b49      	ldr	r3, [pc, #292]	; (800a13c <xTaskIncrementTick+0x150>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d00a      	beq.n	800a034 <xTaskIncrementTick+0x48>
	__asm volatile
 800a01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a022:	f383 8811 	msr	BASEPRI, r3
 800a026:	f3bf 8f6f 	isb	sy
 800a02a:	f3bf 8f4f 	dsb	sy
 800a02e:	603b      	str	r3, [r7, #0]
}
 800a030:	bf00      	nop
 800a032:	e7fe      	b.n	800a032 <xTaskIncrementTick+0x46>
 800a034:	4b41      	ldr	r3, [pc, #260]	; (800a13c <xTaskIncrementTick+0x150>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	60fb      	str	r3, [r7, #12]
 800a03a:	4b41      	ldr	r3, [pc, #260]	; (800a140 <xTaskIncrementTick+0x154>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	4a3f      	ldr	r2, [pc, #252]	; (800a13c <xTaskIncrementTick+0x150>)
 800a040:	6013      	str	r3, [r2, #0]
 800a042:	4a3f      	ldr	r2, [pc, #252]	; (800a140 <xTaskIncrementTick+0x154>)
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	6013      	str	r3, [r2, #0]
 800a048:	4b3e      	ldr	r3, [pc, #248]	; (800a144 <xTaskIncrementTick+0x158>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	3301      	adds	r3, #1
 800a04e:	4a3d      	ldr	r2, [pc, #244]	; (800a144 <xTaskIncrementTick+0x158>)
 800a050:	6013      	str	r3, [r2, #0]
 800a052:	f000 fad1 	bl	800a5f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a056:	4b3c      	ldr	r3, [pc, #240]	; (800a148 <xTaskIncrementTick+0x15c>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	693a      	ldr	r2, [r7, #16]
 800a05c:	429a      	cmp	r2, r3
 800a05e:	d349      	bcc.n	800a0f4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a060:	4b36      	ldr	r3, [pc, #216]	; (800a13c <xTaskIncrementTick+0x150>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d104      	bne.n	800a074 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a06a:	4b37      	ldr	r3, [pc, #220]	; (800a148 <xTaskIncrementTick+0x15c>)
 800a06c:	f04f 32ff 	mov.w	r2, #4294967295
 800a070:	601a      	str	r2, [r3, #0]
					break;
 800a072:	e03f      	b.n	800a0f4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a074:	4b31      	ldr	r3, [pc, #196]	; (800a13c <xTaskIncrementTick+0x150>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	68db      	ldr	r3, [r3, #12]
 800a07a:	68db      	ldr	r3, [r3, #12]
 800a07c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	685b      	ldr	r3, [r3, #4]
 800a082:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a084:	693a      	ldr	r2, [r7, #16]
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	429a      	cmp	r2, r3
 800a08a:	d203      	bcs.n	800a094 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a08c:	4a2e      	ldr	r2, [pc, #184]	; (800a148 <xTaskIncrementTick+0x15c>)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a092:	e02f      	b.n	800a0f4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	3304      	adds	r3, #4
 800a098:	4618      	mov	r0, r3
 800a09a:	f7fe fae9 	bl	8008670 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d004      	beq.n	800a0b0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	3318      	adds	r3, #24
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f7fe fae0 	bl	8008670 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0b4:	4b25      	ldr	r3, [pc, #148]	; (800a14c <xTaskIncrementTick+0x160>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	429a      	cmp	r2, r3
 800a0ba:	d903      	bls.n	800a0c4 <xTaskIncrementTick+0xd8>
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0c0:	4a22      	ldr	r2, [pc, #136]	; (800a14c <xTaskIncrementTick+0x160>)
 800a0c2:	6013      	str	r3, [r2, #0]
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0c8:	4613      	mov	r3, r2
 800a0ca:	009b      	lsls	r3, r3, #2
 800a0cc:	4413      	add	r3, r2
 800a0ce:	009b      	lsls	r3, r3, #2
 800a0d0:	4a1f      	ldr	r2, [pc, #124]	; (800a150 <xTaskIncrementTick+0x164>)
 800a0d2:	441a      	add	r2, r3
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	3304      	adds	r3, #4
 800a0d8:	4619      	mov	r1, r3
 800a0da:	4610      	mov	r0, r2
 800a0dc:	f7fe fa6b 	bl	80085b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0e4:	4b1b      	ldr	r3, [pc, #108]	; (800a154 <xTaskIncrementTick+0x168>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ea:	429a      	cmp	r2, r3
 800a0ec:	d3b8      	bcc.n	800a060 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a0f2:	e7b5      	b.n	800a060 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a0f4:	4b17      	ldr	r3, [pc, #92]	; (800a154 <xTaskIncrementTick+0x168>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0fa:	4915      	ldr	r1, [pc, #84]	; (800a150 <xTaskIncrementTick+0x164>)
 800a0fc:	4613      	mov	r3, r2
 800a0fe:	009b      	lsls	r3, r3, #2
 800a100:	4413      	add	r3, r2
 800a102:	009b      	lsls	r3, r3, #2
 800a104:	440b      	add	r3, r1
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	2b01      	cmp	r3, #1
 800a10a:	d901      	bls.n	800a110 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a10c:	2301      	movs	r3, #1
 800a10e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a110:	4b11      	ldr	r3, [pc, #68]	; (800a158 <xTaskIncrementTick+0x16c>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d007      	beq.n	800a128 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a118:	2301      	movs	r3, #1
 800a11a:	617b      	str	r3, [r7, #20]
 800a11c:	e004      	b.n	800a128 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a11e:	4b0f      	ldr	r3, [pc, #60]	; (800a15c <xTaskIncrementTick+0x170>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	3301      	adds	r3, #1
 800a124:	4a0d      	ldr	r2, [pc, #52]	; (800a15c <xTaskIncrementTick+0x170>)
 800a126:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a128:	697b      	ldr	r3, [r7, #20]
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3718      	adds	r7, #24
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}
 800a132:	bf00      	nop
 800a134:	200012ec 	.word	0x200012ec
 800a138:	200012c8 	.word	0x200012c8
 800a13c:	2000127c 	.word	0x2000127c
 800a140:	20001280 	.word	0x20001280
 800a144:	200012dc 	.word	0x200012dc
 800a148:	200012e4 	.word	0x200012e4
 800a14c:	200012cc 	.word	0x200012cc
 800a150:	20000df4 	.word	0x20000df4
 800a154:	20000df0 	.word	0x20000df0
 800a158:	200012d8 	.word	0x200012d8
 800a15c:	200012d4 	.word	0x200012d4

0800a160 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a160:	b480      	push	{r7}
 800a162:	b085      	sub	sp, #20
 800a164:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a166:	4b28      	ldr	r3, [pc, #160]	; (800a208 <vTaskSwitchContext+0xa8>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d003      	beq.n	800a176 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a16e:	4b27      	ldr	r3, [pc, #156]	; (800a20c <vTaskSwitchContext+0xac>)
 800a170:	2201      	movs	r2, #1
 800a172:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a174:	e041      	b.n	800a1fa <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800a176:	4b25      	ldr	r3, [pc, #148]	; (800a20c <vTaskSwitchContext+0xac>)
 800a178:	2200      	movs	r2, #0
 800a17a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a17c:	4b24      	ldr	r3, [pc, #144]	; (800a210 <vTaskSwitchContext+0xb0>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	60fb      	str	r3, [r7, #12]
 800a182:	e010      	b.n	800a1a6 <vTaskSwitchContext+0x46>
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d10a      	bne.n	800a1a0 <vTaskSwitchContext+0x40>
	__asm volatile
 800a18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a18e:	f383 8811 	msr	BASEPRI, r3
 800a192:	f3bf 8f6f 	isb	sy
 800a196:	f3bf 8f4f 	dsb	sy
 800a19a:	607b      	str	r3, [r7, #4]
}
 800a19c:	bf00      	nop
 800a19e:	e7fe      	b.n	800a19e <vTaskSwitchContext+0x3e>
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	3b01      	subs	r3, #1
 800a1a4:	60fb      	str	r3, [r7, #12]
 800a1a6:	491b      	ldr	r1, [pc, #108]	; (800a214 <vTaskSwitchContext+0xb4>)
 800a1a8:	68fa      	ldr	r2, [r7, #12]
 800a1aa:	4613      	mov	r3, r2
 800a1ac:	009b      	lsls	r3, r3, #2
 800a1ae:	4413      	add	r3, r2
 800a1b0:	009b      	lsls	r3, r3, #2
 800a1b2:	440b      	add	r3, r1
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d0e4      	beq.n	800a184 <vTaskSwitchContext+0x24>
 800a1ba:	68fa      	ldr	r2, [r7, #12]
 800a1bc:	4613      	mov	r3, r2
 800a1be:	009b      	lsls	r3, r3, #2
 800a1c0:	4413      	add	r3, r2
 800a1c2:	009b      	lsls	r3, r3, #2
 800a1c4:	4a13      	ldr	r2, [pc, #76]	; (800a214 <vTaskSwitchContext+0xb4>)
 800a1c6:	4413      	add	r3, r2
 800a1c8:	60bb      	str	r3, [r7, #8]
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	685b      	ldr	r3, [r3, #4]
 800a1ce:	685a      	ldr	r2, [r3, #4]
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	605a      	str	r2, [r3, #4]
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	685a      	ldr	r2, [r3, #4]
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	3308      	adds	r3, #8
 800a1dc:	429a      	cmp	r2, r3
 800a1de:	d104      	bne.n	800a1ea <vTaskSwitchContext+0x8a>
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	685b      	ldr	r3, [r3, #4]
 800a1e4:	685a      	ldr	r2, [r3, #4]
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	605a      	str	r2, [r3, #4]
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	68db      	ldr	r3, [r3, #12]
 800a1f0:	4a09      	ldr	r2, [pc, #36]	; (800a218 <vTaskSwitchContext+0xb8>)
 800a1f2:	6013      	str	r3, [r2, #0]
 800a1f4:	4a06      	ldr	r2, [pc, #24]	; (800a210 <vTaskSwitchContext+0xb0>)
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	6013      	str	r3, [r2, #0]
}
 800a1fa:	bf00      	nop
 800a1fc:	3714      	adds	r7, #20
 800a1fe:	46bd      	mov	sp, r7
 800a200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a204:	4770      	bx	lr
 800a206:	bf00      	nop
 800a208:	200012ec 	.word	0x200012ec
 800a20c:	200012d8 	.word	0x200012d8
 800a210:	200012cc 	.word	0x200012cc
 800a214:	20000df4 	.word	0x20000df4
 800a218:	20000df0 	.word	0x20000df0

0800a21c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b084      	sub	sp, #16
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
 800a224:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d10a      	bne.n	800a242 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a22c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a230:	f383 8811 	msr	BASEPRI, r3
 800a234:	f3bf 8f6f 	isb	sy
 800a238:	f3bf 8f4f 	dsb	sy
 800a23c:	60fb      	str	r3, [r7, #12]
}
 800a23e:	bf00      	nop
 800a240:	e7fe      	b.n	800a240 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a242:	4b07      	ldr	r3, [pc, #28]	; (800a260 <vTaskPlaceOnEventList+0x44>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	3318      	adds	r3, #24
 800a248:	4619      	mov	r1, r3
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f7fe f9d7 	bl	80085fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a250:	2101      	movs	r1, #1
 800a252:	6838      	ldr	r0, [r7, #0]
 800a254:	f000 fb8a 	bl	800a96c <prvAddCurrentTaskToDelayedList>
}
 800a258:	bf00      	nop
 800a25a:	3710      	adds	r7, #16
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}
 800a260:	20000df0 	.word	0x20000df0

0800a264 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a264:	b580      	push	{r7, lr}
 800a266:	b086      	sub	sp, #24
 800a268:	af00      	add	r7, sp, #0
 800a26a:	60f8      	str	r0, [r7, #12]
 800a26c:	60b9      	str	r1, [r7, #8]
 800a26e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d10a      	bne.n	800a28c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a27a:	f383 8811 	msr	BASEPRI, r3
 800a27e:	f3bf 8f6f 	isb	sy
 800a282:	f3bf 8f4f 	dsb	sy
 800a286:	617b      	str	r3, [r7, #20]
}
 800a288:	bf00      	nop
 800a28a:	e7fe      	b.n	800a28a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a28c:	4b0a      	ldr	r3, [pc, #40]	; (800a2b8 <vTaskPlaceOnEventListRestricted+0x54>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	3318      	adds	r3, #24
 800a292:	4619      	mov	r1, r3
 800a294:	68f8      	ldr	r0, [r7, #12]
 800a296:	f7fe f98e 	bl	80085b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d002      	beq.n	800a2a6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a2a0:	f04f 33ff 	mov.w	r3, #4294967295
 800a2a4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a2a6:	6879      	ldr	r1, [r7, #4]
 800a2a8:	68b8      	ldr	r0, [r7, #8]
 800a2aa:	f000 fb5f 	bl	800a96c <prvAddCurrentTaskToDelayedList>
	}
 800a2ae:	bf00      	nop
 800a2b0:	3718      	adds	r7, #24
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}
 800a2b6:	bf00      	nop
 800a2b8:	20000df0 	.word	0x20000df0

0800a2bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b086      	sub	sp, #24
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	68db      	ldr	r3, [r3, #12]
 800a2c8:	68db      	ldr	r3, [r3, #12]
 800a2ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d10a      	bne.n	800a2e8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a2d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d6:	f383 8811 	msr	BASEPRI, r3
 800a2da:	f3bf 8f6f 	isb	sy
 800a2de:	f3bf 8f4f 	dsb	sy
 800a2e2:	60fb      	str	r3, [r7, #12]
}
 800a2e4:	bf00      	nop
 800a2e6:	e7fe      	b.n	800a2e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a2e8:	693b      	ldr	r3, [r7, #16]
 800a2ea:	3318      	adds	r3, #24
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f7fe f9bf 	bl	8008670 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a2f2:	4b1e      	ldr	r3, [pc, #120]	; (800a36c <xTaskRemoveFromEventList+0xb0>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d11d      	bne.n	800a336 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	3304      	adds	r3, #4
 800a2fe:	4618      	mov	r0, r3
 800a300:	f7fe f9b6 	bl	8008670 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a304:	693b      	ldr	r3, [r7, #16]
 800a306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a308:	4b19      	ldr	r3, [pc, #100]	; (800a370 <xTaskRemoveFromEventList+0xb4>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	429a      	cmp	r2, r3
 800a30e:	d903      	bls.n	800a318 <xTaskRemoveFromEventList+0x5c>
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a314:	4a16      	ldr	r2, [pc, #88]	; (800a370 <xTaskRemoveFromEventList+0xb4>)
 800a316:	6013      	str	r3, [r2, #0]
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a31c:	4613      	mov	r3, r2
 800a31e:	009b      	lsls	r3, r3, #2
 800a320:	4413      	add	r3, r2
 800a322:	009b      	lsls	r3, r3, #2
 800a324:	4a13      	ldr	r2, [pc, #76]	; (800a374 <xTaskRemoveFromEventList+0xb8>)
 800a326:	441a      	add	r2, r3
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	3304      	adds	r3, #4
 800a32c:	4619      	mov	r1, r3
 800a32e:	4610      	mov	r0, r2
 800a330:	f7fe f941 	bl	80085b6 <vListInsertEnd>
 800a334:	e005      	b.n	800a342 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	3318      	adds	r3, #24
 800a33a:	4619      	mov	r1, r3
 800a33c:	480e      	ldr	r0, [pc, #56]	; (800a378 <xTaskRemoveFromEventList+0xbc>)
 800a33e:	f7fe f93a 	bl	80085b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a346:	4b0d      	ldr	r3, [pc, #52]	; (800a37c <xTaskRemoveFromEventList+0xc0>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a34c:	429a      	cmp	r2, r3
 800a34e:	d905      	bls.n	800a35c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a350:	2301      	movs	r3, #1
 800a352:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a354:	4b0a      	ldr	r3, [pc, #40]	; (800a380 <xTaskRemoveFromEventList+0xc4>)
 800a356:	2201      	movs	r2, #1
 800a358:	601a      	str	r2, [r3, #0]
 800a35a:	e001      	b.n	800a360 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a35c:	2300      	movs	r3, #0
 800a35e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a360:	697b      	ldr	r3, [r7, #20]
}
 800a362:	4618      	mov	r0, r3
 800a364:	3718      	adds	r7, #24
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}
 800a36a:	bf00      	nop
 800a36c:	200012ec 	.word	0x200012ec
 800a370:	200012cc 	.word	0x200012cc
 800a374:	20000df4 	.word	0x20000df4
 800a378:	20001284 	.word	0x20001284
 800a37c:	20000df0 	.word	0x20000df0
 800a380:	200012d8 	.word	0x200012d8

0800a384 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a384:	b480      	push	{r7}
 800a386:	b083      	sub	sp, #12
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a38c:	4b06      	ldr	r3, [pc, #24]	; (800a3a8 <vTaskInternalSetTimeOutState+0x24>)
 800a38e:	681a      	ldr	r2, [r3, #0]
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a394:	4b05      	ldr	r3, [pc, #20]	; (800a3ac <vTaskInternalSetTimeOutState+0x28>)
 800a396:	681a      	ldr	r2, [r3, #0]
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	605a      	str	r2, [r3, #4]
}
 800a39c:	bf00      	nop
 800a39e:	370c      	adds	r7, #12
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a6:	4770      	bx	lr
 800a3a8:	200012dc 	.word	0x200012dc
 800a3ac:	200012c8 	.word	0x200012c8

0800a3b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b088      	sub	sp, #32
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
 800a3b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d10a      	bne.n	800a3d6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a3c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c4:	f383 8811 	msr	BASEPRI, r3
 800a3c8:	f3bf 8f6f 	isb	sy
 800a3cc:	f3bf 8f4f 	dsb	sy
 800a3d0:	613b      	str	r3, [r7, #16]
}
 800a3d2:	bf00      	nop
 800a3d4:	e7fe      	b.n	800a3d4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d10a      	bne.n	800a3f2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a3dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3e0:	f383 8811 	msr	BASEPRI, r3
 800a3e4:	f3bf 8f6f 	isb	sy
 800a3e8:	f3bf 8f4f 	dsb	sy
 800a3ec:	60fb      	str	r3, [r7, #12]
}
 800a3ee:	bf00      	nop
 800a3f0:	e7fe      	b.n	800a3f0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a3f2:	f001 f847 	bl	800b484 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a3f6:	4b1d      	ldr	r3, [pc, #116]	; (800a46c <xTaskCheckForTimeOut+0xbc>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	685b      	ldr	r3, [r3, #4]
 800a400:	69ba      	ldr	r2, [r7, #24]
 800a402:	1ad3      	subs	r3, r2, r3
 800a404:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a40e:	d102      	bne.n	800a416 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a410:	2300      	movs	r3, #0
 800a412:	61fb      	str	r3, [r7, #28]
 800a414:	e023      	b.n	800a45e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681a      	ldr	r2, [r3, #0]
 800a41a:	4b15      	ldr	r3, [pc, #84]	; (800a470 <xTaskCheckForTimeOut+0xc0>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	429a      	cmp	r2, r3
 800a420:	d007      	beq.n	800a432 <xTaskCheckForTimeOut+0x82>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	685b      	ldr	r3, [r3, #4]
 800a426:	69ba      	ldr	r2, [r7, #24]
 800a428:	429a      	cmp	r2, r3
 800a42a:	d302      	bcc.n	800a432 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a42c:	2301      	movs	r3, #1
 800a42e:	61fb      	str	r3, [r7, #28]
 800a430:	e015      	b.n	800a45e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	697a      	ldr	r2, [r7, #20]
 800a438:	429a      	cmp	r2, r3
 800a43a:	d20b      	bcs.n	800a454 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	681a      	ldr	r2, [r3, #0]
 800a440:	697b      	ldr	r3, [r7, #20]
 800a442:	1ad2      	subs	r2, r2, r3
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f7ff ff9b 	bl	800a384 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a44e:	2300      	movs	r3, #0
 800a450:	61fb      	str	r3, [r7, #28]
 800a452:	e004      	b.n	800a45e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	2200      	movs	r2, #0
 800a458:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a45a:	2301      	movs	r3, #1
 800a45c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a45e:	f001 f841 	bl	800b4e4 <vPortExitCritical>

	return xReturn;
 800a462:	69fb      	ldr	r3, [r7, #28]
}
 800a464:	4618      	mov	r0, r3
 800a466:	3720      	adds	r7, #32
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}
 800a46c:	200012c8 	.word	0x200012c8
 800a470:	200012dc 	.word	0x200012dc

0800a474 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a474:	b480      	push	{r7}
 800a476:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a478:	4b03      	ldr	r3, [pc, #12]	; (800a488 <vTaskMissedYield+0x14>)
 800a47a:	2201      	movs	r2, #1
 800a47c:	601a      	str	r2, [r3, #0]
}
 800a47e:	bf00      	nop
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr
 800a488:	200012d8 	.word	0x200012d8

0800a48c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b082      	sub	sp, #8
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a494:	f000 f852 	bl	800a53c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a498:	4b06      	ldr	r3, [pc, #24]	; (800a4b4 <prvIdleTask+0x28>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	2b01      	cmp	r3, #1
 800a49e:	d9f9      	bls.n	800a494 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a4a0:	4b05      	ldr	r3, [pc, #20]	; (800a4b8 <prvIdleTask+0x2c>)
 800a4a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4a6:	601a      	str	r2, [r3, #0]
 800a4a8:	f3bf 8f4f 	dsb	sy
 800a4ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a4b0:	e7f0      	b.n	800a494 <prvIdleTask+0x8>
 800a4b2:	bf00      	nop
 800a4b4:	20000df4 	.word	0x20000df4
 800a4b8:	e000ed04 	.word	0xe000ed04

0800a4bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b082      	sub	sp, #8
 800a4c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	607b      	str	r3, [r7, #4]
 800a4c6:	e00c      	b.n	800a4e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a4c8:	687a      	ldr	r2, [r7, #4]
 800a4ca:	4613      	mov	r3, r2
 800a4cc:	009b      	lsls	r3, r3, #2
 800a4ce:	4413      	add	r3, r2
 800a4d0:	009b      	lsls	r3, r3, #2
 800a4d2:	4a12      	ldr	r2, [pc, #72]	; (800a51c <prvInitialiseTaskLists+0x60>)
 800a4d4:	4413      	add	r3, r2
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	f7fe f840 	bl	800855c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	3301      	adds	r3, #1
 800a4e0:	607b      	str	r3, [r7, #4]
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2b37      	cmp	r3, #55	; 0x37
 800a4e6:	d9ef      	bls.n	800a4c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a4e8:	480d      	ldr	r0, [pc, #52]	; (800a520 <prvInitialiseTaskLists+0x64>)
 800a4ea:	f7fe f837 	bl	800855c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a4ee:	480d      	ldr	r0, [pc, #52]	; (800a524 <prvInitialiseTaskLists+0x68>)
 800a4f0:	f7fe f834 	bl	800855c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a4f4:	480c      	ldr	r0, [pc, #48]	; (800a528 <prvInitialiseTaskLists+0x6c>)
 800a4f6:	f7fe f831 	bl	800855c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a4fa:	480c      	ldr	r0, [pc, #48]	; (800a52c <prvInitialiseTaskLists+0x70>)
 800a4fc:	f7fe f82e 	bl	800855c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a500:	480b      	ldr	r0, [pc, #44]	; (800a530 <prvInitialiseTaskLists+0x74>)
 800a502:	f7fe f82b 	bl	800855c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a506:	4b0b      	ldr	r3, [pc, #44]	; (800a534 <prvInitialiseTaskLists+0x78>)
 800a508:	4a05      	ldr	r2, [pc, #20]	; (800a520 <prvInitialiseTaskLists+0x64>)
 800a50a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a50c:	4b0a      	ldr	r3, [pc, #40]	; (800a538 <prvInitialiseTaskLists+0x7c>)
 800a50e:	4a05      	ldr	r2, [pc, #20]	; (800a524 <prvInitialiseTaskLists+0x68>)
 800a510:	601a      	str	r2, [r3, #0]
}
 800a512:	bf00      	nop
 800a514:	3708      	adds	r7, #8
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}
 800a51a:	bf00      	nop
 800a51c:	20000df4 	.word	0x20000df4
 800a520:	20001254 	.word	0x20001254
 800a524:	20001268 	.word	0x20001268
 800a528:	20001284 	.word	0x20001284
 800a52c:	20001298 	.word	0x20001298
 800a530:	200012b0 	.word	0x200012b0
 800a534:	2000127c 	.word	0x2000127c
 800a538:	20001280 	.word	0x20001280

0800a53c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b082      	sub	sp, #8
 800a540:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a542:	e019      	b.n	800a578 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a544:	f000 ff9e 	bl	800b484 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a548:	4b10      	ldr	r3, [pc, #64]	; (800a58c <prvCheckTasksWaitingTermination+0x50>)
 800a54a:	68db      	ldr	r3, [r3, #12]
 800a54c:	68db      	ldr	r3, [r3, #12]
 800a54e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	3304      	adds	r3, #4
 800a554:	4618      	mov	r0, r3
 800a556:	f7fe f88b 	bl	8008670 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a55a:	4b0d      	ldr	r3, [pc, #52]	; (800a590 <prvCheckTasksWaitingTermination+0x54>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	3b01      	subs	r3, #1
 800a560:	4a0b      	ldr	r2, [pc, #44]	; (800a590 <prvCheckTasksWaitingTermination+0x54>)
 800a562:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a564:	4b0b      	ldr	r3, [pc, #44]	; (800a594 <prvCheckTasksWaitingTermination+0x58>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	3b01      	subs	r3, #1
 800a56a:	4a0a      	ldr	r2, [pc, #40]	; (800a594 <prvCheckTasksWaitingTermination+0x58>)
 800a56c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a56e:	f000 ffb9 	bl	800b4e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f000 f810 	bl	800a598 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a578:	4b06      	ldr	r3, [pc, #24]	; (800a594 <prvCheckTasksWaitingTermination+0x58>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d1e1      	bne.n	800a544 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a580:	bf00      	nop
 800a582:	bf00      	nop
 800a584:	3708      	adds	r7, #8
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}
 800a58a:	bf00      	nop
 800a58c:	20001298 	.word	0x20001298
 800a590:	200012c4 	.word	0x200012c4
 800a594:	200012ac 	.word	0x200012ac

0800a598 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b084      	sub	sp, #16
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d108      	bne.n	800a5bc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f001 f956 	bl	800b860 <vPortFree>
				vPortFree( pxTCB );
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	f001 f953 	bl	800b860 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a5ba:	e018      	b.n	800a5ee <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a5c2:	2b01      	cmp	r3, #1
 800a5c4:	d103      	bne.n	800a5ce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	f001 f94a 	bl	800b860 <vPortFree>
	}
 800a5cc:	e00f      	b.n	800a5ee <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a5d4:	2b02      	cmp	r3, #2
 800a5d6:	d00a      	beq.n	800a5ee <prvDeleteTCB+0x56>
	__asm volatile
 800a5d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5dc:	f383 8811 	msr	BASEPRI, r3
 800a5e0:	f3bf 8f6f 	isb	sy
 800a5e4:	f3bf 8f4f 	dsb	sy
 800a5e8:	60fb      	str	r3, [r7, #12]
}
 800a5ea:	bf00      	nop
 800a5ec:	e7fe      	b.n	800a5ec <prvDeleteTCB+0x54>
	}
 800a5ee:	bf00      	nop
 800a5f0:	3710      	adds	r7, #16
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}
	...

0800a5f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b083      	sub	sp, #12
 800a5fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a5fe:	4b0c      	ldr	r3, [pc, #48]	; (800a630 <prvResetNextTaskUnblockTime+0x38>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d104      	bne.n	800a612 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a608:	4b0a      	ldr	r3, [pc, #40]	; (800a634 <prvResetNextTaskUnblockTime+0x3c>)
 800a60a:	f04f 32ff 	mov.w	r2, #4294967295
 800a60e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a610:	e008      	b.n	800a624 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a612:	4b07      	ldr	r3, [pc, #28]	; (800a630 <prvResetNextTaskUnblockTime+0x38>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	68db      	ldr	r3, [r3, #12]
 800a618:	68db      	ldr	r3, [r3, #12]
 800a61a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	685b      	ldr	r3, [r3, #4]
 800a620:	4a04      	ldr	r2, [pc, #16]	; (800a634 <prvResetNextTaskUnblockTime+0x3c>)
 800a622:	6013      	str	r3, [r2, #0]
}
 800a624:	bf00      	nop
 800a626:	370c      	adds	r7, #12
 800a628:	46bd      	mov	sp, r7
 800a62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62e:	4770      	bx	lr
 800a630:	2000127c 	.word	0x2000127c
 800a634:	200012e4 	.word	0x200012e4

0800a638 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800a638:	b480      	push	{r7}
 800a63a:	b083      	sub	sp, #12
 800a63c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800a63e:	4b05      	ldr	r3, [pc, #20]	; (800a654 <xTaskGetCurrentTaskHandle+0x1c>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	607b      	str	r3, [r7, #4]

		return xReturn;
 800a644:	687b      	ldr	r3, [r7, #4]
	}
 800a646:	4618      	mov	r0, r3
 800a648:	370c      	adds	r7, #12
 800a64a:	46bd      	mov	sp, r7
 800a64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a650:	4770      	bx	lr
 800a652:	bf00      	nop
 800a654:	20000df0 	.word	0x20000df0

0800a658 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a658:	b480      	push	{r7}
 800a65a:	b083      	sub	sp, #12
 800a65c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a65e:	4b0b      	ldr	r3, [pc, #44]	; (800a68c <xTaskGetSchedulerState+0x34>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d102      	bne.n	800a66c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a666:	2301      	movs	r3, #1
 800a668:	607b      	str	r3, [r7, #4]
 800a66a:	e008      	b.n	800a67e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a66c:	4b08      	ldr	r3, [pc, #32]	; (800a690 <xTaskGetSchedulerState+0x38>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d102      	bne.n	800a67a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a674:	2302      	movs	r3, #2
 800a676:	607b      	str	r3, [r7, #4]
 800a678:	e001      	b.n	800a67e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a67a:	2300      	movs	r3, #0
 800a67c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a67e:	687b      	ldr	r3, [r7, #4]
	}
 800a680:	4618      	mov	r0, r3
 800a682:	370c      	adds	r7, #12
 800a684:	46bd      	mov	sp, r7
 800a686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68a:	4770      	bx	lr
 800a68c:	200012d0 	.word	0x200012d0
 800a690:	200012ec 	.word	0x200012ec

0800a694 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a694:	b580      	push	{r7, lr}
 800a696:	b084      	sub	sp, #16
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d051      	beq.n	800a74e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6ae:	4b2a      	ldr	r3, [pc, #168]	; (800a758 <xTaskPriorityInherit+0xc4>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	d241      	bcs.n	800a73c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a6b8:	68bb      	ldr	r3, [r7, #8]
 800a6ba:	699b      	ldr	r3, [r3, #24]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	db06      	blt.n	800a6ce <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6c0:	4b25      	ldr	r3, [pc, #148]	; (800a758 <xTaskPriorityInherit+0xc4>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6c6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	6959      	ldr	r1, [r3, #20]
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6d6:	4613      	mov	r3, r2
 800a6d8:	009b      	lsls	r3, r3, #2
 800a6da:	4413      	add	r3, r2
 800a6dc:	009b      	lsls	r3, r3, #2
 800a6de:	4a1f      	ldr	r2, [pc, #124]	; (800a75c <xTaskPriorityInherit+0xc8>)
 800a6e0:	4413      	add	r3, r2
 800a6e2:	4299      	cmp	r1, r3
 800a6e4:	d122      	bne.n	800a72c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	3304      	adds	r3, #4
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f7fd ffc0 	bl	8008670 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a6f0:	4b19      	ldr	r3, [pc, #100]	; (800a758 <xTaskPriorityInherit+0xc4>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a6fa:	68bb      	ldr	r3, [r7, #8]
 800a6fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6fe:	4b18      	ldr	r3, [pc, #96]	; (800a760 <xTaskPriorityInherit+0xcc>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	429a      	cmp	r2, r3
 800a704:	d903      	bls.n	800a70e <xTaskPriorityInherit+0x7a>
 800a706:	68bb      	ldr	r3, [r7, #8]
 800a708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a70a:	4a15      	ldr	r2, [pc, #84]	; (800a760 <xTaskPriorityInherit+0xcc>)
 800a70c:	6013      	str	r3, [r2, #0]
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a712:	4613      	mov	r3, r2
 800a714:	009b      	lsls	r3, r3, #2
 800a716:	4413      	add	r3, r2
 800a718:	009b      	lsls	r3, r3, #2
 800a71a:	4a10      	ldr	r2, [pc, #64]	; (800a75c <xTaskPriorityInherit+0xc8>)
 800a71c:	441a      	add	r2, r3
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	3304      	adds	r3, #4
 800a722:	4619      	mov	r1, r3
 800a724:	4610      	mov	r0, r2
 800a726:	f7fd ff46 	bl	80085b6 <vListInsertEnd>
 800a72a:	e004      	b.n	800a736 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a72c:	4b0a      	ldr	r3, [pc, #40]	; (800a758 <xTaskPriorityInherit+0xc4>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a736:	2301      	movs	r3, #1
 800a738:	60fb      	str	r3, [r7, #12]
 800a73a:	e008      	b.n	800a74e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a740:	4b05      	ldr	r3, [pc, #20]	; (800a758 <xTaskPriorityInherit+0xc4>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a746:	429a      	cmp	r2, r3
 800a748:	d201      	bcs.n	800a74e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a74a:	2301      	movs	r3, #1
 800a74c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a74e:	68fb      	ldr	r3, [r7, #12]
	}
 800a750:	4618      	mov	r0, r3
 800a752:	3710      	adds	r7, #16
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}
 800a758:	20000df0 	.word	0x20000df0
 800a75c:	20000df4 	.word	0x20000df4
 800a760:	200012cc 	.word	0x200012cc

0800a764 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a764:	b580      	push	{r7, lr}
 800a766:	b086      	sub	sp, #24
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a770:	2300      	movs	r3, #0
 800a772:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d056      	beq.n	800a828 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a77a:	4b2e      	ldr	r3, [pc, #184]	; (800a834 <xTaskPriorityDisinherit+0xd0>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	693a      	ldr	r2, [r7, #16]
 800a780:	429a      	cmp	r2, r3
 800a782:	d00a      	beq.n	800a79a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a784:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a788:	f383 8811 	msr	BASEPRI, r3
 800a78c:	f3bf 8f6f 	isb	sy
 800a790:	f3bf 8f4f 	dsb	sy
 800a794:	60fb      	str	r3, [r7, #12]
}
 800a796:	bf00      	nop
 800a798:	e7fe      	b.n	800a798 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d10a      	bne.n	800a7b8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a7a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7a6:	f383 8811 	msr	BASEPRI, r3
 800a7aa:	f3bf 8f6f 	isb	sy
 800a7ae:	f3bf 8f4f 	dsb	sy
 800a7b2:	60bb      	str	r3, [r7, #8]
}
 800a7b4:	bf00      	nop
 800a7b6:	e7fe      	b.n	800a7b6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7bc:	1e5a      	subs	r2, r3, #1
 800a7be:	693b      	ldr	r3, [r7, #16]
 800a7c0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7ca:	429a      	cmp	r2, r3
 800a7cc:	d02c      	beq.n	800a828 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a7ce:	693b      	ldr	r3, [r7, #16]
 800a7d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d128      	bne.n	800a828 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a7d6:	693b      	ldr	r3, [r7, #16]
 800a7d8:	3304      	adds	r3, #4
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f7fd ff48 	bl	8008670 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a7e0:	693b      	ldr	r3, [r7, #16]
 800a7e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a7f4:	693b      	ldr	r3, [r7, #16]
 800a7f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7f8:	4b0f      	ldr	r3, [pc, #60]	; (800a838 <xTaskPriorityDisinherit+0xd4>)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	429a      	cmp	r2, r3
 800a7fe:	d903      	bls.n	800a808 <xTaskPriorityDisinherit+0xa4>
 800a800:	693b      	ldr	r3, [r7, #16]
 800a802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a804:	4a0c      	ldr	r2, [pc, #48]	; (800a838 <xTaskPriorityDisinherit+0xd4>)
 800a806:	6013      	str	r3, [r2, #0]
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a80c:	4613      	mov	r3, r2
 800a80e:	009b      	lsls	r3, r3, #2
 800a810:	4413      	add	r3, r2
 800a812:	009b      	lsls	r3, r3, #2
 800a814:	4a09      	ldr	r2, [pc, #36]	; (800a83c <xTaskPriorityDisinherit+0xd8>)
 800a816:	441a      	add	r2, r3
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	3304      	adds	r3, #4
 800a81c:	4619      	mov	r1, r3
 800a81e:	4610      	mov	r0, r2
 800a820:	f7fd fec9 	bl	80085b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a824:	2301      	movs	r3, #1
 800a826:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a828:	697b      	ldr	r3, [r7, #20]
	}
 800a82a:	4618      	mov	r0, r3
 800a82c:	3718      	adds	r7, #24
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}
 800a832:	bf00      	nop
 800a834:	20000df0 	.word	0x20000df0
 800a838:	200012cc 	.word	0x200012cc
 800a83c:	20000df4 	.word	0x20000df4

0800a840 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a840:	b580      	push	{r7, lr}
 800a842:	b088      	sub	sp, #32
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
 800a848:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a84e:	2301      	movs	r3, #1
 800a850:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d06a      	beq.n	800a92e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a858:	69bb      	ldr	r3, [r7, #24]
 800a85a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d10a      	bne.n	800a876 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800a860:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a864:	f383 8811 	msr	BASEPRI, r3
 800a868:	f3bf 8f6f 	isb	sy
 800a86c:	f3bf 8f4f 	dsb	sy
 800a870:	60fb      	str	r3, [r7, #12]
}
 800a872:	bf00      	nop
 800a874:	e7fe      	b.n	800a874 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a876:	69bb      	ldr	r3, [r7, #24]
 800a878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a87a:	683a      	ldr	r2, [r7, #0]
 800a87c:	429a      	cmp	r2, r3
 800a87e:	d902      	bls.n	800a886 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	61fb      	str	r3, [r7, #28]
 800a884:	e002      	b.n	800a88c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a886:	69bb      	ldr	r3, [r7, #24]
 800a888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a88a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a88c:	69bb      	ldr	r3, [r7, #24]
 800a88e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a890:	69fa      	ldr	r2, [r7, #28]
 800a892:	429a      	cmp	r2, r3
 800a894:	d04b      	beq.n	800a92e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a896:	69bb      	ldr	r3, [r7, #24]
 800a898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a89a:	697a      	ldr	r2, [r7, #20]
 800a89c:	429a      	cmp	r2, r3
 800a89e:	d146      	bne.n	800a92e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a8a0:	4b25      	ldr	r3, [pc, #148]	; (800a938 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	69ba      	ldr	r2, [r7, #24]
 800a8a6:	429a      	cmp	r2, r3
 800a8a8:	d10a      	bne.n	800a8c0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800a8aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ae:	f383 8811 	msr	BASEPRI, r3
 800a8b2:	f3bf 8f6f 	isb	sy
 800a8b6:	f3bf 8f4f 	dsb	sy
 800a8ba:	60bb      	str	r3, [r7, #8]
}
 800a8bc:	bf00      	nop
 800a8be:	e7fe      	b.n	800a8be <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a8c0:	69bb      	ldr	r3, [r7, #24]
 800a8c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8c4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a8c6:	69bb      	ldr	r3, [r7, #24]
 800a8c8:	69fa      	ldr	r2, [r7, #28]
 800a8ca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a8cc:	69bb      	ldr	r3, [r7, #24]
 800a8ce:	699b      	ldr	r3, [r3, #24]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	db04      	blt.n	800a8de <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a8d4:	69fb      	ldr	r3, [r7, #28]
 800a8d6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a8da:	69bb      	ldr	r3, [r7, #24]
 800a8dc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a8de:	69bb      	ldr	r3, [r7, #24]
 800a8e0:	6959      	ldr	r1, [r3, #20]
 800a8e2:	693a      	ldr	r2, [r7, #16]
 800a8e4:	4613      	mov	r3, r2
 800a8e6:	009b      	lsls	r3, r3, #2
 800a8e8:	4413      	add	r3, r2
 800a8ea:	009b      	lsls	r3, r3, #2
 800a8ec:	4a13      	ldr	r2, [pc, #76]	; (800a93c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a8ee:	4413      	add	r3, r2
 800a8f0:	4299      	cmp	r1, r3
 800a8f2:	d11c      	bne.n	800a92e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a8f4:	69bb      	ldr	r3, [r7, #24]
 800a8f6:	3304      	adds	r3, #4
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f7fd feb9 	bl	8008670 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a8fe:	69bb      	ldr	r3, [r7, #24]
 800a900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a902:	4b0f      	ldr	r3, [pc, #60]	; (800a940 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	429a      	cmp	r2, r3
 800a908:	d903      	bls.n	800a912 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800a90a:	69bb      	ldr	r3, [r7, #24]
 800a90c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a90e:	4a0c      	ldr	r2, [pc, #48]	; (800a940 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a910:	6013      	str	r3, [r2, #0]
 800a912:	69bb      	ldr	r3, [r7, #24]
 800a914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a916:	4613      	mov	r3, r2
 800a918:	009b      	lsls	r3, r3, #2
 800a91a:	4413      	add	r3, r2
 800a91c:	009b      	lsls	r3, r3, #2
 800a91e:	4a07      	ldr	r2, [pc, #28]	; (800a93c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a920:	441a      	add	r2, r3
 800a922:	69bb      	ldr	r3, [r7, #24]
 800a924:	3304      	adds	r3, #4
 800a926:	4619      	mov	r1, r3
 800a928:	4610      	mov	r0, r2
 800a92a:	f7fd fe44 	bl	80085b6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a92e:	bf00      	nop
 800a930:	3720      	adds	r7, #32
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}
 800a936:	bf00      	nop
 800a938:	20000df0 	.word	0x20000df0
 800a93c:	20000df4 	.word	0x20000df4
 800a940:	200012cc 	.word	0x200012cc

0800a944 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a944:	b480      	push	{r7}
 800a946:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a948:	4b07      	ldr	r3, [pc, #28]	; (800a968 <pvTaskIncrementMutexHeldCount+0x24>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d004      	beq.n	800a95a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a950:	4b05      	ldr	r3, [pc, #20]	; (800a968 <pvTaskIncrementMutexHeldCount+0x24>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a956:	3201      	adds	r2, #1
 800a958:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800a95a:	4b03      	ldr	r3, [pc, #12]	; (800a968 <pvTaskIncrementMutexHeldCount+0x24>)
 800a95c:	681b      	ldr	r3, [r3, #0]
	}
 800a95e:	4618      	mov	r0, r3
 800a960:	46bd      	mov	sp, r7
 800a962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a966:	4770      	bx	lr
 800a968:	20000df0 	.word	0x20000df0

0800a96c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b084      	sub	sp, #16
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
 800a974:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a976:	4b21      	ldr	r3, [pc, #132]	; (800a9fc <prvAddCurrentTaskToDelayedList+0x90>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a97c:	4b20      	ldr	r3, [pc, #128]	; (800aa00 <prvAddCurrentTaskToDelayedList+0x94>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	3304      	adds	r3, #4
 800a982:	4618      	mov	r0, r3
 800a984:	f7fd fe74 	bl	8008670 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a98e:	d10a      	bne.n	800a9a6 <prvAddCurrentTaskToDelayedList+0x3a>
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d007      	beq.n	800a9a6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a996:	4b1a      	ldr	r3, [pc, #104]	; (800aa00 <prvAddCurrentTaskToDelayedList+0x94>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	3304      	adds	r3, #4
 800a99c:	4619      	mov	r1, r3
 800a99e:	4819      	ldr	r0, [pc, #100]	; (800aa04 <prvAddCurrentTaskToDelayedList+0x98>)
 800a9a0:	f7fd fe09 	bl	80085b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a9a4:	e026      	b.n	800a9f4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a9a6:	68fa      	ldr	r2, [r7, #12]
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	4413      	add	r3, r2
 800a9ac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a9ae:	4b14      	ldr	r3, [pc, #80]	; (800aa00 <prvAddCurrentTaskToDelayedList+0x94>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	68ba      	ldr	r2, [r7, #8]
 800a9b4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a9b6:	68ba      	ldr	r2, [r7, #8]
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	429a      	cmp	r2, r3
 800a9bc:	d209      	bcs.n	800a9d2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a9be:	4b12      	ldr	r3, [pc, #72]	; (800aa08 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a9c0:	681a      	ldr	r2, [r3, #0]
 800a9c2:	4b0f      	ldr	r3, [pc, #60]	; (800aa00 <prvAddCurrentTaskToDelayedList+0x94>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	3304      	adds	r3, #4
 800a9c8:	4619      	mov	r1, r3
 800a9ca:	4610      	mov	r0, r2
 800a9cc:	f7fd fe17 	bl	80085fe <vListInsert>
}
 800a9d0:	e010      	b.n	800a9f4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a9d2:	4b0e      	ldr	r3, [pc, #56]	; (800aa0c <prvAddCurrentTaskToDelayedList+0xa0>)
 800a9d4:	681a      	ldr	r2, [r3, #0]
 800a9d6:	4b0a      	ldr	r3, [pc, #40]	; (800aa00 <prvAddCurrentTaskToDelayedList+0x94>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	3304      	adds	r3, #4
 800a9dc:	4619      	mov	r1, r3
 800a9de:	4610      	mov	r0, r2
 800a9e0:	f7fd fe0d 	bl	80085fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a9e4:	4b0a      	ldr	r3, [pc, #40]	; (800aa10 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	68ba      	ldr	r2, [r7, #8]
 800a9ea:	429a      	cmp	r2, r3
 800a9ec:	d202      	bcs.n	800a9f4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a9ee:	4a08      	ldr	r2, [pc, #32]	; (800aa10 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	6013      	str	r3, [r2, #0]
}
 800a9f4:	bf00      	nop
 800a9f6:	3710      	adds	r7, #16
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bd80      	pop	{r7, pc}
 800a9fc:	200012c8 	.word	0x200012c8
 800aa00:	20000df0 	.word	0x20000df0
 800aa04:	200012b0 	.word	0x200012b0
 800aa08:	20001280 	.word	0x20001280
 800aa0c:	2000127c 	.word	0x2000127c
 800aa10:	200012e4 	.word	0x200012e4

0800aa14 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b08a      	sub	sp, #40	; 0x28
 800aa18:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800aa1e:	f000 fba1 	bl	800b164 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800aa22:	4b1c      	ldr	r3, [pc, #112]	; (800aa94 <xTimerCreateTimerTask+0x80>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d021      	beq.n	800aa6e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800aa32:	1d3a      	adds	r2, r7, #4
 800aa34:	f107 0108 	add.w	r1, r7, #8
 800aa38:	f107 030c 	add.w	r3, r7, #12
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f7fd fd73 	bl	8008528 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800aa42:	6879      	ldr	r1, [r7, #4]
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	68fa      	ldr	r2, [r7, #12]
 800aa48:	9202      	str	r2, [sp, #8]
 800aa4a:	9301      	str	r3, [sp, #4]
 800aa4c:	2302      	movs	r3, #2
 800aa4e:	9300      	str	r3, [sp, #0]
 800aa50:	2300      	movs	r3, #0
 800aa52:	460a      	mov	r2, r1
 800aa54:	4910      	ldr	r1, [pc, #64]	; (800aa98 <xTimerCreateTimerTask+0x84>)
 800aa56:	4811      	ldr	r0, [pc, #68]	; (800aa9c <xTimerCreateTimerTask+0x88>)
 800aa58:	f7fe fef8 	bl	800984c <xTaskCreateStatic>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	4a10      	ldr	r2, [pc, #64]	; (800aaa0 <xTimerCreateTimerTask+0x8c>)
 800aa60:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800aa62:	4b0f      	ldr	r3, [pc, #60]	; (800aaa0 <xTimerCreateTimerTask+0x8c>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d001      	beq.n	800aa6e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d10a      	bne.n	800aa8a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800aa74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa78:	f383 8811 	msr	BASEPRI, r3
 800aa7c:	f3bf 8f6f 	isb	sy
 800aa80:	f3bf 8f4f 	dsb	sy
 800aa84:	613b      	str	r3, [r7, #16]
}
 800aa86:	bf00      	nop
 800aa88:	e7fe      	b.n	800aa88 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800aa8a:	697b      	ldr	r3, [r7, #20]
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3718      	adds	r7, #24
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}
 800aa94:	20001320 	.word	0x20001320
 800aa98:	0800d60c 	.word	0x0800d60c
 800aa9c:	0800ad0d 	.word	0x0800ad0d
 800aaa0:	20001324 	.word	0x20001324

0800aaa4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b088      	sub	sp, #32
 800aaa8:	af02      	add	r7, sp, #8
 800aaaa:	60f8      	str	r0, [r7, #12]
 800aaac:	60b9      	str	r1, [r7, #8]
 800aaae:	607a      	str	r2, [r7, #4]
 800aab0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800aab2:	202c      	movs	r0, #44	; 0x2c
 800aab4:	f000 fe08 	bl	800b6c8 <pvPortMalloc>
 800aab8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800aaba:	697b      	ldr	r3, [r7, #20]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d00d      	beq.n	800aadc <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	2200      	movs	r2, #0
 800aac4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	9301      	str	r3, [sp, #4]
 800aacc:	6a3b      	ldr	r3, [r7, #32]
 800aace:	9300      	str	r3, [sp, #0]
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	687a      	ldr	r2, [r7, #4]
 800aad4:	68b9      	ldr	r1, [r7, #8]
 800aad6:	68f8      	ldr	r0, [r7, #12]
 800aad8:	f000 f843 	bl	800ab62 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800aadc:	697b      	ldr	r3, [r7, #20]
	}
 800aade:	4618      	mov	r0, r3
 800aae0:	3718      	adds	r7, #24
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}

0800aae6 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800aae6:	b580      	push	{r7, lr}
 800aae8:	b08a      	sub	sp, #40	; 0x28
 800aaea:	af02      	add	r7, sp, #8
 800aaec:	60f8      	str	r0, [r7, #12]
 800aaee:	60b9      	str	r1, [r7, #8]
 800aaf0:	607a      	str	r2, [r7, #4]
 800aaf2:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800aaf4:	232c      	movs	r3, #44	; 0x2c
 800aaf6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800aaf8:	693b      	ldr	r3, [r7, #16]
 800aafa:	2b2c      	cmp	r3, #44	; 0x2c
 800aafc:	d00a      	beq.n	800ab14 <xTimerCreateStatic+0x2e>
	__asm volatile
 800aafe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab02:	f383 8811 	msr	BASEPRI, r3
 800ab06:	f3bf 8f6f 	isb	sy
 800ab0a:	f3bf 8f4f 	dsb	sy
 800ab0e:	61bb      	str	r3, [r7, #24]
}
 800ab10:	bf00      	nop
 800ab12:	e7fe      	b.n	800ab12 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ab14:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800ab16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d10a      	bne.n	800ab32 <xTimerCreateStatic+0x4c>
	__asm volatile
 800ab1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab20:	f383 8811 	msr	BASEPRI, r3
 800ab24:	f3bf 8f6f 	isb	sy
 800ab28:	f3bf 8f4f 	dsb	sy
 800ab2c:	617b      	str	r3, [r7, #20]
}
 800ab2e:	bf00      	nop
 800ab30:	e7fe      	b.n	800ab30 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800ab32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab34:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800ab36:	69fb      	ldr	r3, [r7, #28]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d00d      	beq.n	800ab58 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800ab3c:	69fb      	ldr	r3, [r7, #28]
 800ab3e:	2202      	movs	r2, #2
 800ab40:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800ab44:	69fb      	ldr	r3, [r7, #28]
 800ab46:	9301      	str	r3, [sp, #4]
 800ab48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab4a:	9300      	str	r3, [sp, #0]
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	687a      	ldr	r2, [r7, #4]
 800ab50:	68b9      	ldr	r1, [r7, #8]
 800ab52:	68f8      	ldr	r0, [r7, #12]
 800ab54:	f000 f805 	bl	800ab62 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800ab58:	69fb      	ldr	r3, [r7, #28]
	}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3720      	adds	r7, #32
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}

0800ab62 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800ab62:	b580      	push	{r7, lr}
 800ab64:	b086      	sub	sp, #24
 800ab66:	af00      	add	r7, sp, #0
 800ab68:	60f8      	str	r0, [r7, #12]
 800ab6a:	60b9      	str	r1, [r7, #8]
 800ab6c:	607a      	str	r2, [r7, #4]
 800ab6e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d10a      	bne.n	800ab8c <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800ab76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab7a:	f383 8811 	msr	BASEPRI, r3
 800ab7e:	f3bf 8f6f 	isb	sy
 800ab82:	f3bf 8f4f 	dsb	sy
 800ab86:	617b      	str	r3, [r7, #20]
}
 800ab88:	bf00      	nop
 800ab8a:	e7fe      	b.n	800ab8a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800ab8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d01e      	beq.n	800abd0 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800ab92:	f000 fae7 	bl	800b164 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800ab96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab98:	68fa      	ldr	r2, [r7, #12]
 800ab9a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800ab9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab9e:	68ba      	ldr	r2, [r7, #8]
 800aba0:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800aba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aba4:	683a      	ldr	r2, [r7, #0]
 800aba6:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800aba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abaa:	6a3a      	ldr	r2, [r7, #32]
 800abac:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800abae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abb0:	3304      	adds	r3, #4
 800abb2:	4618      	mov	r0, r3
 800abb4:	f7fd fcf2 	bl	800859c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d008      	beq.n	800abd0 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800abbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800abc4:	f043 0304 	orr.w	r3, r3, #4
 800abc8:	b2da      	uxtb	r2, r3
 800abca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abcc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800abd0:	bf00      	nop
 800abd2:	3718      	adds	r7, #24
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}

0800abd8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b08a      	sub	sp, #40	; 0x28
 800abdc:	af00      	add	r7, sp, #0
 800abde:	60f8      	str	r0, [r7, #12]
 800abe0:	60b9      	str	r1, [r7, #8]
 800abe2:	607a      	str	r2, [r7, #4]
 800abe4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800abe6:	2300      	movs	r3, #0
 800abe8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d10a      	bne.n	800ac06 <xTimerGenericCommand+0x2e>
	__asm volatile
 800abf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf4:	f383 8811 	msr	BASEPRI, r3
 800abf8:	f3bf 8f6f 	isb	sy
 800abfc:	f3bf 8f4f 	dsb	sy
 800ac00:	623b      	str	r3, [r7, #32]
}
 800ac02:	bf00      	nop
 800ac04:	e7fe      	b.n	800ac04 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ac06:	4b1a      	ldr	r3, [pc, #104]	; (800ac70 <xTimerGenericCommand+0x98>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d02a      	beq.n	800ac64 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	2b05      	cmp	r3, #5
 800ac1e:	dc18      	bgt.n	800ac52 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ac20:	f7ff fd1a 	bl	800a658 <xTaskGetSchedulerState>
 800ac24:	4603      	mov	r3, r0
 800ac26:	2b02      	cmp	r3, #2
 800ac28:	d109      	bne.n	800ac3e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ac2a:	4b11      	ldr	r3, [pc, #68]	; (800ac70 <xTimerGenericCommand+0x98>)
 800ac2c:	6818      	ldr	r0, [r3, #0]
 800ac2e:	f107 0110 	add.w	r1, r7, #16
 800ac32:	2300      	movs	r3, #0
 800ac34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac36:	f7fd ffa3 	bl	8008b80 <xQueueGenericSend>
 800ac3a:	6278      	str	r0, [r7, #36]	; 0x24
 800ac3c:	e012      	b.n	800ac64 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ac3e:	4b0c      	ldr	r3, [pc, #48]	; (800ac70 <xTimerGenericCommand+0x98>)
 800ac40:	6818      	ldr	r0, [r3, #0]
 800ac42:	f107 0110 	add.w	r1, r7, #16
 800ac46:	2300      	movs	r3, #0
 800ac48:	2200      	movs	r2, #0
 800ac4a:	f7fd ff99 	bl	8008b80 <xQueueGenericSend>
 800ac4e:	6278      	str	r0, [r7, #36]	; 0x24
 800ac50:	e008      	b.n	800ac64 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ac52:	4b07      	ldr	r3, [pc, #28]	; (800ac70 <xTimerGenericCommand+0x98>)
 800ac54:	6818      	ldr	r0, [r3, #0]
 800ac56:	f107 0110 	add.w	r1, r7, #16
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	683a      	ldr	r2, [r7, #0]
 800ac5e:	f7fe f88d 	bl	8008d7c <xQueueGenericSendFromISR>
 800ac62:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ac64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	3728      	adds	r7, #40	; 0x28
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}
 800ac6e:	bf00      	nop
 800ac70:	20001320 	.word	0x20001320

0800ac74 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b088      	sub	sp, #32
 800ac78:	af02      	add	r7, sp, #8
 800ac7a:	6078      	str	r0, [r7, #4]
 800ac7c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac7e:	4b22      	ldr	r3, [pc, #136]	; (800ad08 <prvProcessExpiredTimer+0x94>)
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	68db      	ldr	r3, [r3, #12]
 800ac84:	68db      	ldr	r3, [r3, #12]
 800ac86:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	3304      	adds	r3, #4
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	f7fd fcef 	bl	8008670 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ac92:	697b      	ldr	r3, [r7, #20]
 800ac94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac98:	f003 0304 	and.w	r3, r3, #4
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d022      	beq.n	800ace6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800aca0:	697b      	ldr	r3, [r7, #20]
 800aca2:	699a      	ldr	r2, [r3, #24]
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	18d1      	adds	r1, r2, r3
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	683a      	ldr	r2, [r7, #0]
 800acac:	6978      	ldr	r0, [r7, #20]
 800acae:	f000 f8d1 	bl	800ae54 <prvInsertTimerInActiveList>
 800acb2:	4603      	mov	r3, r0
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d01f      	beq.n	800acf8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800acb8:	2300      	movs	r3, #0
 800acba:	9300      	str	r3, [sp, #0]
 800acbc:	2300      	movs	r3, #0
 800acbe:	687a      	ldr	r2, [r7, #4]
 800acc0:	2100      	movs	r1, #0
 800acc2:	6978      	ldr	r0, [r7, #20]
 800acc4:	f7ff ff88 	bl	800abd8 <xTimerGenericCommand>
 800acc8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800acca:	693b      	ldr	r3, [r7, #16]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d113      	bne.n	800acf8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800acd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd4:	f383 8811 	msr	BASEPRI, r3
 800acd8:	f3bf 8f6f 	isb	sy
 800acdc:	f3bf 8f4f 	dsb	sy
 800ace0:	60fb      	str	r3, [r7, #12]
}
 800ace2:	bf00      	nop
 800ace4:	e7fe      	b.n	800ace4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ace6:	697b      	ldr	r3, [r7, #20]
 800ace8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800acec:	f023 0301 	bic.w	r3, r3, #1
 800acf0:	b2da      	uxtb	r2, r3
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800acf8:	697b      	ldr	r3, [r7, #20]
 800acfa:	6a1b      	ldr	r3, [r3, #32]
 800acfc:	6978      	ldr	r0, [r7, #20]
 800acfe:	4798      	blx	r3
}
 800ad00:	bf00      	nop
 800ad02:	3718      	adds	r7, #24
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}
 800ad08:	20001318 	.word	0x20001318

0800ad0c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b084      	sub	sp, #16
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ad14:	f107 0308 	add.w	r3, r7, #8
 800ad18:	4618      	mov	r0, r3
 800ad1a:	f000 f857 	bl	800adcc <prvGetNextExpireTime>
 800ad1e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	4619      	mov	r1, r3
 800ad24:	68f8      	ldr	r0, [r7, #12]
 800ad26:	f000 f803 	bl	800ad30 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ad2a:	f000 f8d5 	bl	800aed8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ad2e:	e7f1      	b.n	800ad14 <prvTimerTask+0x8>

0800ad30 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b084      	sub	sp, #16
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
 800ad38:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ad3a:	f7ff f89b 	bl	8009e74 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ad3e:	f107 0308 	add.w	r3, r7, #8
 800ad42:	4618      	mov	r0, r3
 800ad44:	f000 f866 	bl	800ae14 <prvSampleTimeNow>
 800ad48:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d130      	bne.n	800adb2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d10a      	bne.n	800ad6c <prvProcessTimerOrBlockTask+0x3c>
 800ad56:	687a      	ldr	r2, [r7, #4]
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	429a      	cmp	r2, r3
 800ad5c:	d806      	bhi.n	800ad6c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ad5e:	f7ff f897 	bl	8009e90 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ad62:	68f9      	ldr	r1, [r7, #12]
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	f7ff ff85 	bl	800ac74 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ad6a:	e024      	b.n	800adb6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d008      	beq.n	800ad84 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ad72:	4b13      	ldr	r3, [pc, #76]	; (800adc0 <prvProcessTimerOrBlockTask+0x90>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d101      	bne.n	800ad80 <prvProcessTimerOrBlockTask+0x50>
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	e000      	b.n	800ad82 <prvProcessTimerOrBlockTask+0x52>
 800ad80:	2300      	movs	r3, #0
 800ad82:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ad84:	4b0f      	ldr	r3, [pc, #60]	; (800adc4 <prvProcessTimerOrBlockTask+0x94>)
 800ad86:	6818      	ldr	r0, [r3, #0]
 800ad88:	687a      	ldr	r2, [r7, #4]
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	1ad3      	subs	r3, r2, r3
 800ad8e:	683a      	ldr	r2, [r7, #0]
 800ad90:	4619      	mov	r1, r3
 800ad92:	f7fe fd27 	bl	80097e4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ad96:	f7ff f87b 	bl	8009e90 <xTaskResumeAll>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d10a      	bne.n	800adb6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ada0:	4b09      	ldr	r3, [pc, #36]	; (800adc8 <prvProcessTimerOrBlockTask+0x98>)
 800ada2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ada6:	601a      	str	r2, [r3, #0]
 800ada8:	f3bf 8f4f 	dsb	sy
 800adac:	f3bf 8f6f 	isb	sy
}
 800adb0:	e001      	b.n	800adb6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800adb2:	f7ff f86d 	bl	8009e90 <xTaskResumeAll>
}
 800adb6:	bf00      	nop
 800adb8:	3710      	adds	r7, #16
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}
 800adbe:	bf00      	nop
 800adc0:	2000131c 	.word	0x2000131c
 800adc4:	20001320 	.word	0x20001320
 800adc8:	e000ed04 	.word	0xe000ed04

0800adcc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800adcc:	b480      	push	{r7}
 800adce:	b085      	sub	sp, #20
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800add4:	4b0e      	ldr	r3, [pc, #56]	; (800ae10 <prvGetNextExpireTime+0x44>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d101      	bne.n	800ade2 <prvGetNextExpireTime+0x16>
 800adde:	2201      	movs	r2, #1
 800ade0:	e000      	b.n	800ade4 <prvGetNextExpireTime+0x18>
 800ade2:	2200      	movs	r2, #0
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d105      	bne.n	800adfc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800adf0:	4b07      	ldr	r3, [pc, #28]	; (800ae10 <prvGetNextExpireTime+0x44>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	68db      	ldr	r3, [r3, #12]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	60fb      	str	r3, [r7, #12]
 800adfa:	e001      	b.n	800ae00 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800adfc:	2300      	movs	r3, #0
 800adfe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ae00:	68fb      	ldr	r3, [r7, #12]
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	3714      	adds	r7, #20
 800ae06:	46bd      	mov	sp, r7
 800ae08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0c:	4770      	bx	lr
 800ae0e:	bf00      	nop
 800ae10:	20001318 	.word	0x20001318

0800ae14 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b084      	sub	sp, #16
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ae1c:	f7ff f8d6 	bl	8009fcc <xTaskGetTickCount>
 800ae20:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ae22:	4b0b      	ldr	r3, [pc, #44]	; (800ae50 <prvSampleTimeNow+0x3c>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	68fa      	ldr	r2, [r7, #12]
 800ae28:	429a      	cmp	r2, r3
 800ae2a:	d205      	bcs.n	800ae38 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ae2c:	f000 f936 	bl	800b09c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2201      	movs	r2, #1
 800ae34:	601a      	str	r2, [r3, #0]
 800ae36:	e002      	b.n	800ae3e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ae3e:	4a04      	ldr	r2, [pc, #16]	; (800ae50 <prvSampleTimeNow+0x3c>)
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ae44:	68fb      	ldr	r3, [r7, #12]
}
 800ae46:	4618      	mov	r0, r3
 800ae48:	3710      	adds	r7, #16
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}
 800ae4e:	bf00      	nop
 800ae50:	20001328 	.word	0x20001328

0800ae54 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b086      	sub	sp, #24
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	60f8      	str	r0, [r7, #12]
 800ae5c:	60b9      	str	r1, [r7, #8]
 800ae5e:	607a      	str	r2, [r7, #4]
 800ae60:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ae62:	2300      	movs	r3, #0
 800ae64:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	68ba      	ldr	r2, [r7, #8]
 800ae6a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	68fa      	ldr	r2, [r7, #12]
 800ae70:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ae72:	68ba      	ldr	r2, [r7, #8]
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	429a      	cmp	r2, r3
 800ae78:	d812      	bhi.n	800aea0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae7a:	687a      	ldr	r2, [r7, #4]
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	1ad2      	subs	r2, r2, r3
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	699b      	ldr	r3, [r3, #24]
 800ae84:	429a      	cmp	r2, r3
 800ae86:	d302      	bcc.n	800ae8e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ae88:	2301      	movs	r3, #1
 800ae8a:	617b      	str	r3, [r7, #20]
 800ae8c:	e01b      	b.n	800aec6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ae8e:	4b10      	ldr	r3, [pc, #64]	; (800aed0 <prvInsertTimerInActiveList+0x7c>)
 800ae90:	681a      	ldr	r2, [r3, #0]
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	3304      	adds	r3, #4
 800ae96:	4619      	mov	r1, r3
 800ae98:	4610      	mov	r0, r2
 800ae9a:	f7fd fbb0 	bl	80085fe <vListInsert>
 800ae9e:	e012      	b.n	800aec6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800aea0:	687a      	ldr	r2, [r7, #4]
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	429a      	cmp	r2, r3
 800aea6:	d206      	bcs.n	800aeb6 <prvInsertTimerInActiveList+0x62>
 800aea8:	68ba      	ldr	r2, [r7, #8]
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	429a      	cmp	r2, r3
 800aeae:	d302      	bcc.n	800aeb6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	617b      	str	r3, [r7, #20]
 800aeb4:	e007      	b.n	800aec6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aeb6:	4b07      	ldr	r3, [pc, #28]	; (800aed4 <prvInsertTimerInActiveList+0x80>)
 800aeb8:	681a      	ldr	r2, [r3, #0]
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	3304      	adds	r3, #4
 800aebe:	4619      	mov	r1, r3
 800aec0:	4610      	mov	r0, r2
 800aec2:	f7fd fb9c 	bl	80085fe <vListInsert>
		}
	}

	return xProcessTimerNow;
 800aec6:	697b      	ldr	r3, [r7, #20]
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	3718      	adds	r7, #24
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd80      	pop	{r7, pc}
 800aed0:	2000131c 	.word	0x2000131c
 800aed4:	20001318 	.word	0x20001318

0800aed8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b08e      	sub	sp, #56	; 0x38
 800aedc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aede:	e0ca      	b.n	800b076 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	da18      	bge.n	800af18 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800aee6:	1d3b      	adds	r3, r7, #4
 800aee8:	3304      	adds	r3, #4
 800aeea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800aeec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d10a      	bne.n	800af08 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800aef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aef6:	f383 8811 	msr	BASEPRI, r3
 800aefa:	f3bf 8f6f 	isb	sy
 800aefe:	f3bf 8f4f 	dsb	sy
 800af02:	61fb      	str	r3, [r7, #28]
}
 800af04:	bf00      	nop
 800af06:	e7fe      	b.n	800af06 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800af08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af0e:	6850      	ldr	r0, [r2, #4]
 800af10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af12:	6892      	ldr	r2, [r2, #8]
 800af14:	4611      	mov	r1, r2
 800af16:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	f2c0 80aa 	blt.w	800b074 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800af24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af26:	695b      	ldr	r3, [r3, #20]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d004      	beq.n	800af36 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800af2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af2e:	3304      	adds	r3, #4
 800af30:	4618      	mov	r0, r3
 800af32:	f7fd fb9d 	bl	8008670 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800af36:	463b      	mov	r3, r7
 800af38:	4618      	mov	r0, r3
 800af3a:	f7ff ff6b 	bl	800ae14 <prvSampleTimeNow>
 800af3e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2b09      	cmp	r3, #9
 800af44:	f200 8097 	bhi.w	800b076 <prvProcessReceivedCommands+0x19e>
 800af48:	a201      	add	r2, pc, #4	; (adr r2, 800af50 <prvProcessReceivedCommands+0x78>)
 800af4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af4e:	bf00      	nop
 800af50:	0800af79 	.word	0x0800af79
 800af54:	0800af79 	.word	0x0800af79
 800af58:	0800af79 	.word	0x0800af79
 800af5c:	0800afed 	.word	0x0800afed
 800af60:	0800b001 	.word	0x0800b001
 800af64:	0800b04b 	.word	0x0800b04b
 800af68:	0800af79 	.word	0x0800af79
 800af6c:	0800af79 	.word	0x0800af79
 800af70:	0800afed 	.word	0x0800afed
 800af74:	0800b001 	.word	0x0800b001
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800af78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af7e:	f043 0301 	orr.w	r3, r3, #1
 800af82:	b2da      	uxtb	r2, r3
 800af84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800af8a:	68ba      	ldr	r2, [r7, #8]
 800af8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af8e:	699b      	ldr	r3, [r3, #24]
 800af90:	18d1      	adds	r1, r2, r3
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af98:	f7ff ff5c 	bl	800ae54 <prvInsertTimerInActiveList>
 800af9c:	4603      	mov	r3, r0
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d069      	beq.n	800b076 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800afa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afa4:	6a1b      	ldr	r3, [r3, #32]
 800afa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800afa8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800afaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800afb0:	f003 0304 	and.w	r3, r3, #4
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d05e      	beq.n	800b076 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800afb8:	68ba      	ldr	r2, [r7, #8]
 800afba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afbc:	699b      	ldr	r3, [r3, #24]
 800afbe:	441a      	add	r2, r3
 800afc0:	2300      	movs	r3, #0
 800afc2:	9300      	str	r3, [sp, #0]
 800afc4:	2300      	movs	r3, #0
 800afc6:	2100      	movs	r1, #0
 800afc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800afca:	f7ff fe05 	bl	800abd8 <xTimerGenericCommand>
 800afce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800afd0:	6a3b      	ldr	r3, [r7, #32]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d14f      	bne.n	800b076 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800afd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afda:	f383 8811 	msr	BASEPRI, r3
 800afde:	f3bf 8f6f 	isb	sy
 800afe2:	f3bf 8f4f 	dsb	sy
 800afe6:	61bb      	str	r3, [r7, #24]
}
 800afe8:	bf00      	nop
 800afea:	e7fe      	b.n	800afea <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800afec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aff2:	f023 0301 	bic.w	r3, r3, #1
 800aff6:	b2da      	uxtb	r2, r3
 800aff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800affa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800affe:	e03a      	b.n	800b076 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b002:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b006:	f043 0301 	orr.w	r3, r3, #1
 800b00a:	b2da      	uxtb	r2, r3
 800b00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b00e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b012:	68ba      	ldr	r2, [r7, #8]
 800b014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b016:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b01a:	699b      	ldr	r3, [r3, #24]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d10a      	bne.n	800b036 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b024:	f383 8811 	msr	BASEPRI, r3
 800b028:	f3bf 8f6f 	isb	sy
 800b02c:	f3bf 8f4f 	dsb	sy
 800b030:	617b      	str	r3, [r7, #20]
}
 800b032:	bf00      	nop
 800b034:	e7fe      	b.n	800b034 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b038:	699a      	ldr	r2, [r3, #24]
 800b03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b03c:	18d1      	adds	r1, r2, r3
 800b03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b042:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b044:	f7ff ff06 	bl	800ae54 <prvInsertTimerInActiveList>
					break;
 800b048:	e015      	b.n	800b076 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b04a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b04c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b050:	f003 0302 	and.w	r3, r3, #2
 800b054:	2b00      	cmp	r3, #0
 800b056:	d103      	bne.n	800b060 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b058:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b05a:	f000 fc01 	bl	800b860 <vPortFree>
 800b05e:	e00a      	b.n	800b076 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b062:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b066:	f023 0301 	bic.w	r3, r3, #1
 800b06a:	b2da      	uxtb	r2, r3
 800b06c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b06e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b072:	e000      	b.n	800b076 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b074:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b076:	4b08      	ldr	r3, [pc, #32]	; (800b098 <prvProcessReceivedCommands+0x1c0>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	1d39      	adds	r1, r7, #4
 800b07c:	2200      	movs	r2, #0
 800b07e:	4618      	mov	r0, r3
 800b080:	f7fd ffa4 	bl	8008fcc <xQueueReceive>
 800b084:	4603      	mov	r3, r0
 800b086:	2b00      	cmp	r3, #0
 800b088:	f47f af2a 	bne.w	800aee0 <prvProcessReceivedCommands+0x8>
	}
}
 800b08c:	bf00      	nop
 800b08e:	bf00      	nop
 800b090:	3730      	adds	r7, #48	; 0x30
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}
 800b096:	bf00      	nop
 800b098:	20001320 	.word	0x20001320

0800b09c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b088      	sub	sp, #32
 800b0a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b0a2:	e048      	b.n	800b136 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b0a4:	4b2d      	ldr	r3, [pc, #180]	; (800b15c <prvSwitchTimerLists+0xc0>)
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	68db      	ldr	r3, [r3, #12]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0ae:	4b2b      	ldr	r3, [pc, #172]	; (800b15c <prvSwitchTimerLists+0xc0>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	68db      	ldr	r3, [r3, #12]
 800b0b4:	68db      	ldr	r3, [r3, #12]
 800b0b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	3304      	adds	r3, #4
 800b0bc:	4618      	mov	r0, r3
 800b0be:	f7fd fad7 	bl	8008670 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	6a1b      	ldr	r3, [r3, #32]
 800b0c6:	68f8      	ldr	r0, [r7, #12]
 800b0c8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b0d0:	f003 0304 	and.w	r3, r3, #4
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d02e      	beq.n	800b136 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	699b      	ldr	r3, [r3, #24]
 800b0dc:	693a      	ldr	r2, [r7, #16]
 800b0de:	4413      	add	r3, r2
 800b0e0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b0e2:	68ba      	ldr	r2, [r7, #8]
 800b0e4:	693b      	ldr	r3, [r7, #16]
 800b0e6:	429a      	cmp	r2, r3
 800b0e8:	d90e      	bls.n	800b108 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	68ba      	ldr	r2, [r7, #8]
 800b0ee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	68fa      	ldr	r2, [r7, #12]
 800b0f4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b0f6:	4b19      	ldr	r3, [pc, #100]	; (800b15c <prvSwitchTimerLists+0xc0>)
 800b0f8:	681a      	ldr	r2, [r3, #0]
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	3304      	adds	r3, #4
 800b0fe:	4619      	mov	r1, r3
 800b100:	4610      	mov	r0, r2
 800b102:	f7fd fa7c 	bl	80085fe <vListInsert>
 800b106:	e016      	b.n	800b136 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b108:	2300      	movs	r3, #0
 800b10a:	9300      	str	r3, [sp, #0]
 800b10c:	2300      	movs	r3, #0
 800b10e:	693a      	ldr	r2, [r7, #16]
 800b110:	2100      	movs	r1, #0
 800b112:	68f8      	ldr	r0, [r7, #12]
 800b114:	f7ff fd60 	bl	800abd8 <xTimerGenericCommand>
 800b118:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d10a      	bne.n	800b136 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b120:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b124:	f383 8811 	msr	BASEPRI, r3
 800b128:	f3bf 8f6f 	isb	sy
 800b12c:	f3bf 8f4f 	dsb	sy
 800b130:	603b      	str	r3, [r7, #0]
}
 800b132:	bf00      	nop
 800b134:	e7fe      	b.n	800b134 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b136:	4b09      	ldr	r3, [pc, #36]	; (800b15c <prvSwitchTimerLists+0xc0>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d1b1      	bne.n	800b0a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b140:	4b06      	ldr	r3, [pc, #24]	; (800b15c <prvSwitchTimerLists+0xc0>)
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b146:	4b06      	ldr	r3, [pc, #24]	; (800b160 <prvSwitchTimerLists+0xc4>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	4a04      	ldr	r2, [pc, #16]	; (800b15c <prvSwitchTimerLists+0xc0>)
 800b14c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b14e:	4a04      	ldr	r2, [pc, #16]	; (800b160 <prvSwitchTimerLists+0xc4>)
 800b150:	697b      	ldr	r3, [r7, #20]
 800b152:	6013      	str	r3, [r2, #0]
}
 800b154:	bf00      	nop
 800b156:	3718      	adds	r7, #24
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd80      	pop	{r7, pc}
 800b15c:	20001318 	.word	0x20001318
 800b160:	2000131c 	.word	0x2000131c

0800b164 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b082      	sub	sp, #8
 800b168:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b16a:	f000 f98b 	bl	800b484 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b16e:	4b15      	ldr	r3, [pc, #84]	; (800b1c4 <prvCheckForValidListAndQueue+0x60>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d120      	bne.n	800b1b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b176:	4814      	ldr	r0, [pc, #80]	; (800b1c8 <prvCheckForValidListAndQueue+0x64>)
 800b178:	f7fd f9f0 	bl	800855c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b17c:	4813      	ldr	r0, [pc, #76]	; (800b1cc <prvCheckForValidListAndQueue+0x68>)
 800b17e:	f7fd f9ed 	bl	800855c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b182:	4b13      	ldr	r3, [pc, #76]	; (800b1d0 <prvCheckForValidListAndQueue+0x6c>)
 800b184:	4a10      	ldr	r2, [pc, #64]	; (800b1c8 <prvCheckForValidListAndQueue+0x64>)
 800b186:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b188:	4b12      	ldr	r3, [pc, #72]	; (800b1d4 <prvCheckForValidListAndQueue+0x70>)
 800b18a:	4a10      	ldr	r2, [pc, #64]	; (800b1cc <prvCheckForValidListAndQueue+0x68>)
 800b18c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b18e:	2300      	movs	r3, #0
 800b190:	9300      	str	r3, [sp, #0]
 800b192:	4b11      	ldr	r3, [pc, #68]	; (800b1d8 <prvCheckForValidListAndQueue+0x74>)
 800b194:	4a11      	ldr	r2, [pc, #68]	; (800b1dc <prvCheckForValidListAndQueue+0x78>)
 800b196:	2110      	movs	r1, #16
 800b198:	200a      	movs	r0, #10
 800b19a:	f7fd fafb 	bl	8008794 <xQueueGenericCreateStatic>
 800b19e:	4603      	mov	r3, r0
 800b1a0:	4a08      	ldr	r2, [pc, #32]	; (800b1c4 <prvCheckForValidListAndQueue+0x60>)
 800b1a2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b1a4:	4b07      	ldr	r3, [pc, #28]	; (800b1c4 <prvCheckForValidListAndQueue+0x60>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d005      	beq.n	800b1b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b1ac:	4b05      	ldr	r3, [pc, #20]	; (800b1c4 <prvCheckForValidListAndQueue+0x60>)
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	490b      	ldr	r1, [pc, #44]	; (800b1e0 <prvCheckForValidListAndQueue+0x7c>)
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f7fe fac2 	bl	800973c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b1b8:	f000 f994 	bl	800b4e4 <vPortExitCritical>
}
 800b1bc:	bf00      	nop
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bd80      	pop	{r7, pc}
 800b1c2:	bf00      	nop
 800b1c4:	20001320 	.word	0x20001320
 800b1c8:	200012f0 	.word	0x200012f0
 800b1cc:	20001304 	.word	0x20001304
 800b1d0:	20001318 	.word	0x20001318
 800b1d4:	2000131c 	.word	0x2000131c
 800b1d8:	200013cc 	.word	0x200013cc
 800b1dc:	2000132c 	.word	0x2000132c
 800b1e0:	0800d614 	.word	0x0800d614

0800b1e4 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b086      	sub	sp, #24
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d10a      	bne.n	800b20c <pvTimerGetTimerID+0x28>
	__asm volatile
 800b1f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1fa:	f383 8811 	msr	BASEPRI, r3
 800b1fe:	f3bf 8f6f 	isb	sy
 800b202:	f3bf 8f4f 	dsb	sy
 800b206:	60fb      	str	r3, [r7, #12]
}
 800b208:	bf00      	nop
 800b20a:	e7fe      	b.n	800b20a <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800b20c:	f000 f93a 	bl	800b484 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800b210:	697b      	ldr	r3, [r7, #20]
 800b212:	69db      	ldr	r3, [r3, #28]
 800b214:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800b216:	f000 f965 	bl	800b4e4 <vPortExitCritical>

	return pvReturn;
 800b21a:	693b      	ldr	r3, [r7, #16]
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	3718      	adds	r7, #24
 800b220:	46bd      	mov	sp, r7
 800b222:	bd80      	pop	{r7, pc}

0800b224 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b224:	b480      	push	{r7}
 800b226:	b085      	sub	sp, #20
 800b228:	af00      	add	r7, sp, #0
 800b22a:	60f8      	str	r0, [r7, #12]
 800b22c:	60b9      	str	r1, [r7, #8]
 800b22e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	3b04      	subs	r3, #4
 800b234:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b23c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	3b04      	subs	r3, #4
 800b242:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	f023 0201 	bic.w	r2, r3, #1
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	3b04      	subs	r3, #4
 800b252:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b254:	4a0c      	ldr	r2, [pc, #48]	; (800b288 <pxPortInitialiseStack+0x64>)
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	3b14      	subs	r3, #20
 800b25e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b260:	687a      	ldr	r2, [r7, #4]
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	3b04      	subs	r3, #4
 800b26a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	f06f 0202 	mvn.w	r2, #2
 800b272:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	3b20      	subs	r3, #32
 800b278:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b27a:	68fb      	ldr	r3, [r7, #12]
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	3714      	adds	r7, #20
 800b280:	46bd      	mov	sp, r7
 800b282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b286:	4770      	bx	lr
 800b288:	0800b28d 	.word	0x0800b28d

0800b28c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b28c:	b480      	push	{r7}
 800b28e:	b085      	sub	sp, #20
 800b290:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b292:	2300      	movs	r3, #0
 800b294:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b296:	4b12      	ldr	r3, [pc, #72]	; (800b2e0 <prvTaskExitError+0x54>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b29e:	d00a      	beq.n	800b2b6 <prvTaskExitError+0x2a>
	__asm volatile
 800b2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2a4:	f383 8811 	msr	BASEPRI, r3
 800b2a8:	f3bf 8f6f 	isb	sy
 800b2ac:	f3bf 8f4f 	dsb	sy
 800b2b0:	60fb      	str	r3, [r7, #12]
}
 800b2b2:	bf00      	nop
 800b2b4:	e7fe      	b.n	800b2b4 <prvTaskExitError+0x28>
	__asm volatile
 800b2b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ba:	f383 8811 	msr	BASEPRI, r3
 800b2be:	f3bf 8f6f 	isb	sy
 800b2c2:	f3bf 8f4f 	dsb	sy
 800b2c6:	60bb      	str	r3, [r7, #8]
}
 800b2c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b2ca:	bf00      	nop
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d0fc      	beq.n	800b2cc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b2d2:	bf00      	nop
 800b2d4:	bf00      	nop
 800b2d6:	3714      	adds	r7, #20
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2de:	4770      	bx	lr
 800b2e0:	20000034 	.word	0x20000034
	...

0800b2f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b2f0:	4b07      	ldr	r3, [pc, #28]	; (800b310 <pxCurrentTCBConst2>)
 800b2f2:	6819      	ldr	r1, [r3, #0]
 800b2f4:	6808      	ldr	r0, [r1, #0]
 800b2f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2fa:	f380 8809 	msr	PSP, r0
 800b2fe:	f3bf 8f6f 	isb	sy
 800b302:	f04f 0000 	mov.w	r0, #0
 800b306:	f380 8811 	msr	BASEPRI, r0
 800b30a:	4770      	bx	lr
 800b30c:	f3af 8000 	nop.w

0800b310 <pxCurrentTCBConst2>:
 800b310:	20000df0 	.word	0x20000df0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b314:	bf00      	nop
 800b316:	bf00      	nop

0800b318 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b318:	4808      	ldr	r0, [pc, #32]	; (800b33c <prvPortStartFirstTask+0x24>)
 800b31a:	6800      	ldr	r0, [r0, #0]
 800b31c:	6800      	ldr	r0, [r0, #0]
 800b31e:	f380 8808 	msr	MSP, r0
 800b322:	f04f 0000 	mov.w	r0, #0
 800b326:	f380 8814 	msr	CONTROL, r0
 800b32a:	b662      	cpsie	i
 800b32c:	b661      	cpsie	f
 800b32e:	f3bf 8f4f 	dsb	sy
 800b332:	f3bf 8f6f 	isb	sy
 800b336:	df00      	svc	0
 800b338:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b33a:	bf00      	nop
 800b33c:	e000ed08 	.word	0xe000ed08

0800b340 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b086      	sub	sp, #24
 800b344:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b346:	4b46      	ldr	r3, [pc, #280]	; (800b460 <xPortStartScheduler+0x120>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	4a46      	ldr	r2, [pc, #280]	; (800b464 <xPortStartScheduler+0x124>)
 800b34c:	4293      	cmp	r3, r2
 800b34e:	d10a      	bne.n	800b366 <xPortStartScheduler+0x26>
	__asm volatile
 800b350:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b354:	f383 8811 	msr	BASEPRI, r3
 800b358:	f3bf 8f6f 	isb	sy
 800b35c:	f3bf 8f4f 	dsb	sy
 800b360:	613b      	str	r3, [r7, #16]
}
 800b362:	bf00      	nop
 800b364:	e7fe      	b.n	800b364 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b366:	4b3e      	ldr	r3, [pc, #248]	; (800b460 <xPortStartScheduler+0x120>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	4a3f      	ldr	r2, [pc, #252]	; (800b468 <xPortStartScheduler+0x128>)
 800b36c:	4293      	cmp	r3, r2
 800b36e:	d10a      	bne.n	800b386 <xPortStartScheduler+0x46>
	__asm volatile
 800b370:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b374:	f383 8811 	msr	BASEPRI, r3
 800b378:	f3bf 8f6f 	isb	sy
 800b37c:	f3bf 8f4f 	dsb	sy
 800b380:	60fb      	str	r3, [r7, #12]
}
 800b382:	bf00      	nop
 800b384:	e7fe      	b.n	800b384 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b386:	4b39      	ldr	r3, [pc, #228]	; (800b46c <xPortStartScheduler+0x12c>)
 800b388:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b38a:	697b      	ldr	r3, [r7, #20]
 800b38c:	781b      	ldrb	r3, [r3, #0]
 800b38e:	b2db      	uxtb	r3, r3
 800b390:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b392:	697b      	ldr	r3, [r7, #20]
 800b394:	22ff      	movs	r2, #255	; 0xff
 800b396:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b398:	697b      	ldr	r3, [r7, #20]
 800b39a:	781b      	ldrb	r3, [r3, #0]
 800b39c:	b2db      	uxtb	r3, r3
 800b39e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b3a0:	78fb      	ldrb	r3, [r7, #3]
 800b3a2:	b2db      	uxtb	r3, r3
 800b3a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b3a8:	b2da      	uxtb	r2, r3
 800b3aa:	4b31      	ldr	r3, [pc, #196]	; (800b470 <xPortStartScheduler+0x130>)
 800b3ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b3ae:	4b31      	ldr	r3, [pc, #196]	; (800b474 <xPortStartScheduler+0x134>)
 800b3b0:	2207      	movs	r2, #7
 800b3b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b3b4:	e009      	b.n	800b3ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b3b6:	4b2f      	ldr	r3, [pc, #188]	; (800b474 <xPortStartScheduler+0x134>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	3b01      	subs	r3, #1
 800b3bc:	4a2d      	ldr	r2, [pc, #180]	; (800b474 <xPortStartScheduler+0x134>)
 800b3be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b3c0:	78fb      	ldrb	r3, [r7, #3]
 800b3c2:	b2db      	uxtb	r3, r3
 800b3c4:	005b      	lsls	r3, r3, #1
 800b3c6:	b2db      	uxtb	r3, r3
 800b3c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b3ca:	78fb      	ldrb	r3, [r7, #3]
 800b3cc:	b2db      	uxtb	r3, r3
 800b3ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3d2:	2b80      	cmp	r3, #128	; 0x80
 800b3d4:	d0ef      	beq.n	800b3b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b3d6:	4b27      	ldr	r3, [pc, #156]	; (800b474 <xPortStartScheduler+0x134>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	f1c3 0307 	rsb	r3, r3, #7
 800b3de:	2b04      	cmp	r3, #4
 800b3e0:	d00a      	beq.n	800b3f8 <xPortStartScheduler+0xb8>
	__asm volatile
 800b3e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e6:	f383 8811 	msr	BASEPRI, r3
 800b3ea:	f3bf 8f6f 	isb	sy
 800b3ee:	f3bf 8f4f 	dsb	sy
 800b3f2:	60bb      	str	r3, [r7, #8]
}
 800b3f4:	bf00      	nop
 800b3f6:	e7fe      	b.n	800b3f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b3f8:	4b1e      	ldr	r3, [pc, #120]	; (800b474 <xPortStartScheduler+0x134>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	021b      	lsls	r3, r3, #8
 800b3fe:	4a1d      	ldr	r2, [pc, #116]	; (800b474 <xPortStartScheduler+0x134>)
 800b400:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b402:	4b1c      	ldr	r3, [pc, #112]	; (800b474 <xPortStartScheduler+0x134>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b40a:	4a1a      	ldr	r2, [pc, #104]	; (800b474 <xPortStartScheduler+0x134>)
 800b40c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	b2da      	uxtb	r2, r3
 800b412:	697b      	ldr	r3, [r7, #20]
 800b414:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b416:	4b18      	ldr	r3, [pc, #96]	; (800b478 <xPortStartScheduler+0x138>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	4a17      	ldr	r2, [pc, #92]	; (800b478 <xPortStartScheduler+0x138>)
 800b41c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b420:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b422:	4b15      	ldr	r3, [pc, #84]	; (800b478 <xPortStartScheduler+0x138>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	4a14      	ldr	r2, [pc, #80]	; (800b478 <xPortStartScheduler+0x138>)
 800b428:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b42c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b42e:	f000 f8dd 	bl	800b5ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b432:	4b12      	ldr	r3, [pc, #72]	; (800b47c <xPortStartScheduler+0x13c>)
 800b434:	2200      	movs	r2, #0
 800b436:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b438:	f000 f8fc 	bl	800b634 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b43c:	4b10      	ldr	r3, [pc, #64]	; (800b480 <xPortStartScheduler+0x140>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	4a0f      	ldr	r2, [pc, #60]	; (800b480 <xPortStartScheduler+0x140>)
 800b442:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b446:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b448:	f7ff ff66 	bl	800b318 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b44c:	f7fe fe88 	bl	800a160 <vTaskSwitchContext>
	prvTaskExitError();
 800b450:	f7ff ff1c 	bl	800b28c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b454:	2300      	movs	r3, #0
}
 800b456:	4618      	mov	r0, r3
 800b458:	3718      	adds	r7, #24
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}
 800b45e:	bf00      	nop
 800b460:	e000ed00 	.word	0xe000ed00
 800b464:	410fc271 	.word	0x410fc271
 800b468:	410fc270 	.word	0x410fc270
 800b46c:	e000e400 	.word	0xe000e400
 800b470:	2000141c 	.word	0x2000141c
 800b474:	20001420 	.word	0x20001420
 800b478:	e000ed20 	.word	0xe000ed20
 800b47c:	20000034 	.word	0x20000034
 800b480:	e000ef34 	.word	0xe000ef34

0800b484 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b484:	b480      	push	{r7}
 800b486:	b083      	sub	sp, #12
 800b488:	af00      	add	r7, sp, #0
	__asm volatile
 800b48a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b48e:	f383 8811 	msr	BASEPRI, r3
 800b492:	f3bf 8f6f 	isb	sy
 800b496:	f3bf 8f4f 	dsb	sy
 800b49a:	607b      	str	r3, [r7, #4]
}
 800b49c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b49e:	4b0f      	ldr	r3, [pc, #60]	; (800b4dc <vPortEnterCritical+0x58>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	3301      	adds	r3, #1
 800b4a4:	4a0d      	ldr	r2, [pc, #52]	; (800b4dc <vPortEnterCritical+0x58>)
 800b4a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b4a8:	4b0c      	ldr	r3, [pc, #48]	; (800b4dc <vPortEnterCritical+0x58>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	2b01      	cmp	r3, #1
 800b4ae:	d10f      	bne.n	800b4d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b4b0:	4b0b      	ldr	r3, [pc, #44]	; (800b4e0 <vPortEnterCritical+0x5c>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	b2db      	uxtb	r3, r3
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d00a      	beq.n	800b4d0 <vPortEnterCritical+0x4c>
	__asm volatile
 800b4ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4be:	f383 8811 	msr	BASEPRI, r3
 800b4c2:	f3bf 8f6f 	isb	sy
 800b4c6:	f3bf 8f4f 	dsb	sy
 800b4ca:	603b      	str	r3, [r7, #0]
}
 800b4cc:	bf00      	nop
 800b4ce:	e7fe      	b.n	800b4ce <vPortEnterCritical+0x4a>
	}
}
 800b4d0:	bf00      	nop
 800b4d2:	370c      	adds	r7, #12
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4da:	4770      	bx	lr
 800b4dc:	20000034 	.word	0x20000034
 800b4e0:	e000ed04 	.word	0xe000ed04

0800b4e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	b083      	sub	sp, #12
 800b4e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b4ea:	4b12      	ldr	r3, [pc, #72]	; (800b534 <vPortExitCritical+0x50>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d10a      	bne.n	800b508 <vPortExitCritical+0x24>
	__asm volatile
 800b4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4f6:	f383 8811 	msr	BASEPRI, r3
 800b4fa:	f3bf 8f6f 	isb	sy
 800b4fe:	f3bf 8f4f 	dsb	sy
 800b502:	607b      	str	r3, [r7, #4]
}
 800b504:	bf00      	nop
 800b506:	e7fe      	b.n	800b506 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b508:	4b0a      	ldr	r3, [pc, #40]	; (800b534 <vPortExitCritical+0x50>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	3b01      	subs	r3, #1
 800b50e:	4a09      	ldr	r2, [pc, #36]	; (800b534 <vPortExitCritical+0x50>)
 800b510:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b512:	4b08      	ldr	r3, [pc, #32]	; (800b534 <vPortExitCritical+0x50>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d105      	bne.n	800b526 <vPortExitCritical+0x42>
 800b51a:	2300      	movs	r3, #0
 800b51c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	f383 8811 	msr	BASEPRI, r3
}
 800b524:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b526:	bf00      	nop
 800b528:	370c      	adds	r7, #12
 800b52a:	46bd      	mov	sp, r7
 800b52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b530:	4770      	bx	lr
 800b532:	bf00      	nop
 800b534:	20000034 	.word	0x20000034
	...

0800b540 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b540:	f3ef 8009 	mrs	r0, PSP
 800b544:	f3bf 8f6f 	isb	sy
 800b548:	4b15      	ldr	r3, [pc, #84]	; (800b5a0 <pxCurrentTCBConst>)
 800b54a:	681a      	ldr	r2, [r3, #0]
 800b54c:	f01e 0f10 	tst.w	lr, #16
 800b550:	bf08      	it	eq
 800b552:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b556:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b55a:	6010      	str	r0, [r2, #0]
 800b55c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b560:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b564:	f380 8811 	msr	BASEPRI, r0
 800b568:	f3bf 8f4f 	dsb	sy
 800b56c:	f3bf 8f6f 	isb	sy
 800b570:	f7fe fdf6 	bl	800a160 <vTaskSwitchContext>
 800b574:	f04f 0000 	mov.w	r0, #0
 800b578:	f380 8811 	msr	BASEPRI, r0
 800b57c:	bc09      	pop	{r0, r3}
 800b57e:	6819      	ldr	r1, [r3, #0]
 800b580:	6808      	ldr	r0, [r1, #0]
 800b582:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b586:	f01e 0f10 	tst.w	lr, #16
 800b58a:	bf08      	it	eq
 800b58c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b590:	f380 8809 	msr	PSP, r0
 800b594:	f3bf 8f6f 	isb	sy
 800b598:	4770      	bx	lr
 800b59a:	bf00      	nop
 800b59c:	f3af 8000 	nop.w

0800b5a0 <pxCurrentTCBConst>:
 800b5a0:	20000df0 	.word	0x20000df0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b5a4:	bf00      	nop
 800b5a6:	bf00      	nop

0800b5a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b082      	sub	sp, #8
 800b5ac:	af00      	add	r7, sp, #0
	__asm volatile
 800b5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b2:	f383 8811 	msr	BASEPRI, r3
 800b5b6:	f3bf 8f6f 	isb	sy
 800b5ba:	f3bf 8f4f 	dsb	sy
 800b5be:	607b      	str	r3, [r7, #4]
}
 800b5c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b5c2:	f7fe fd13 	bl	8009fec <xTaskIncrementTick>
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d003      	beq.n	800b5d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b5cc:	4b06      	ldr	r3, [pc, #24]	; (800b5e8 <xPortSysTickHandler+0x40>)
 800b5ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5d2:	601a      	str	r2, [r3, #0]
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	f383 8811 	msr	BASEPRI, r3
}
 800b5de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b5e0:	bf00      	nop
 800b5e2:	3708      	adds	r7, #8
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}
 800b5e8:	e000ed04 	.word	0xe000ed04

0800b5ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b5f0:	4b0b      	ldr	r3, [pc, #44]	; (800b620 <vPortSetupTimerInterrupt+0x34>)
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b5f6:	4b0b      	ldr	r3, [pc, #44]	; (800b624 <vPortSetupTimerInterrupt+0x38>)
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b5fc:	4b0a      	ldr	r3, [pc, #40]	; (800b628 <vPortSetupTimerInterrupt+0x3c>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	4a0a      	ldr	r2, [pc, #40]	; (800b62c <vPortSetupTimerInterrupt+0x40>)
 800b602:	fba2 2303 	umull	r2, r3, r2, r3
 800b606:	099b      	lsrs	r3, r3, #6
 800b608:	4a09      	ldr	r2, [pc, #36]	; (800b630 <vPortSetupTimerInterrupt+0x44>)
 800b60a:	3b01      	subs	r3, #1
 800b60c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b60e:	4b04      	ldr	r3, [pc, #16]	; (800b620 <vPortSetupTimerInterrupt+0x34>)
 800b610:	2207      	movs	r2, #7
 800b612:	601a      	str	r2, [r3, #0]
}
 800b614:	bf00      	nop
 800b616:	46bd      	mov	sp, r7
 800b618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61c:	4770      	bx	lr
 800b61e:	bf00      	nop
 800b620:	e000e010 	.word	0xe000e010
 800b624:	e000e018 	.word	0xe000e018
 800b628:	20000028 	.word	0x20000028
 800b62c:	10624dd3 	.word	0x10624dd3
 800b630:	e000e014 	.word	0xe000e014

0800b634 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b634:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b644 <vPortEnableVFP+0x10>
 800b638:	6801      	ldr	r1, [r0, #0]
 800b63a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b63e:	6001      	str	r1, [r0, #0]
 800b640:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b642:	bf00      	nop
 800b644:	e000ed88 	.word	0xe000ed88

0800b648 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b648:	b480      	push	{r7}
 800b64a:	b085      	sub	sp, #20
 800b64c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b64e:	f3ef 8305 	mrs	r3, IPSR
 800b652:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	2b0f      	cmp	r3, #15
 800b658:	d914      	bls.n	800b684 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b65a:	4a17      	ldr	r2, [pc, #92]	; (800b6b8 <vPortValidateInterruptPriority+0x70>)
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	4413      	add	r3, r2
 800b660:	781b      	ldrb	r3, [r3, #0]
 800b662:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b664:	4b15      	ldr	r3, [pc, #84]	; (800b6bc <vPortValidateInterruptPriority+0x74>)
 800b666:	781b      	ldrb	r3, [r3, #0]
 800b668:	7afa      	ldrb	r2, [r7, #11]
 800b66a:	429a      	cmp	r2, r3
 800b66c:	d20a      	bcs.n	800b684 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b66e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b672:	f383 8811 	msr	BASEPRI, r3
 800b676:	f3bf 8f6f 	isb	sy
 800b67a:	f3bf 8f4f 	dsb	sy
 800b67e:	607b      	str	r3, [r7, #4]
}
 800b680:	bf00      	nop
 800b682:	e7fe      	b.n	800b682 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b684:	4b0e      	ldr	r3, [pc, #56]	; (800b6c0 <vPortValidateInterruptPriority+0x78>)
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b68c:	4b0d      	ldr	r3, [pc, #52]	; (800b6c4 <vPortValidateInterruptPriority+0x7c>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	429a      	cmp	r2, r3
 800b692:	d90a      	bls.n	800b6aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b694:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b698:	f383 8811 	msr	BASEPRI, r3
 800b69c:	f3bf 8f6f 	isb	sy
 800b6a0:	f3bf 8f4f 	dsb	sy
 800b6a4:	603b      	str	r3, [r7, #0]
}
 800b6a6:	bf00      	nop
 800b6a8:	e7fe      	b.n	800b6a8 <vPortValidateInterruptPriority+0x60>
	}
 800b6aa:	bf00      	nop
 800b6ac:	3714      	adds	r7, #20
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b4:	4770      	bx	lr
 800b6b6:	bf00      	nop
 800b6b8:	e000e3f0 	.word	0xe000e3f0
 800b6bc:	2000141c 	.word	0x2000141c
 800b6c0:	e000ed0c 	.word	0xe000ed0c
 800b6c4:	20001420 	.word	0x20001420

0800b6c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b08a      	sub	sp, #40	; 0x28
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b6d4:	f7fe fbce 	bl	8009e74 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b6d8:	4b5b      	ldr	r3, [pc, #364]	; (800b848 <pvPortMalloc+0x180>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d101      	bne.n	800b6e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b6e0:	f000 f920 	bl	800b924 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b6e4:	4b59      	ldr	r3, [pc, #356]	; (800b84c <pvPortMalloc+0x184>)
 800b6e6:	681a      	ldr	r2, [r3, #0]
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	4013      	ands	r3, r2
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	f040 8093 	bne.w	800b818 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d01d      	beq.n	800b734 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b6f8:	2208      	movs	r2, #8
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	4413      	add	r3, r2
 800b6fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f003 0307 	and.w	r3, r3, #7
 800b706:	2b00      	cmp	r3, #0
 800b708:	d014      	beq.n	800b734 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	f023 0307 	bic.w	r3, r3, #7
 800b710:	3308      	adds	r3, #8
 800b712:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f003 0307 	and.w	r3, r3, #7
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d00a      	beq.n	800b734 <pvPortMalloc+0x6c>
	__asm volatile
 800b71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b722:	f383 8811 	msr	BASEPRI, r3
 800b726:	f3bf 8f6f 	isb	sy
 800b72a:	f3bf 8f4f 	dsb	sy
 800b72e:	617b      	str	r3, [r7, #20]
}
 800b730:	bf00      	nop
 800b732:	e7fe      	b.n	800b732 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d06e      	beq.n	800b818 <pvPortMalloc+0x150>
 800b73a:	4b45      	ldr	r3, [pc, #276]	; (800b850 <pvPortMalloc+0x188>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	687a      	ldr	r2, [r7, #4]
 800b740:	429a      	cmp	r2, r3
 800b742:	d869      	bhi.n	800b818 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b744:	4b43      	ldr	r3, [pc, #268]	; (800b854 <pvPortMalloc+0x18c>)
 800b746:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b748:	4b42      	ldr	r3, [pc, #264]	; (800b854 <pvPortMalloc+0x18c>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b74e:	e004      	b.n	800b75a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b752:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b75a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b75c:	685b      	ldr	r3, [r3, #4]
 800b75e:	687a      	ldr	r2, [r7, #4]
 800b760:	429a      	cmp	r2, r3
 800b762:	d903      	bls.n	800b76c <pvPortMalloc+0xa4>
 800b764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d1f1      	bne.n	800b750 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b76c:	4b36      	ldr	r3, [pc, #216]	; (800b848 <pvPortMalloc+0x180>)
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b772:	429a      	cmp	r2, r3
 800b774:	d050      	beq.n	800b818 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b776:	6a3b      	ldr	r3, [r7, #32]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	2208      	movs	r2, #8
 800b77c:	4413      	add	r3, r2
 800b77e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b782:	681a      	ldr	r2, [r3, #0]
 800b784:	6a3b      	ldr	r3, [r7, #32]
 800b786:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b78a:	685a      	ldr	r2, [r3, #4]
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	1ad2      	subs	r2, r2, r3
 800b790:	2308      	movs	r3, #8
 800b792:	005b      	lsls	r3, r3, #1
 800b794:	429a      	cmp	r2, r3
 800b796:	d91f      	bls.n	800b7d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	4413      	add	r3, r2
 800b79e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b7a0:	69bb      	ldr	r3, [r7, #24]
 800b7a2:	f003 0307 	and.w	r3, r3, #7
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d00a      	beq.n	800b7c0 <pvPortMalloc+0xf8>
	__asm volatile
 800b7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ae:	f383 8811 	msr	BASEPRI, r3
 800b7b2:	f3bf 8f6f 	isb	sy
 800b7b6:	f3bf 8f4f 	dsb	sy
 800b7ba:	613b      	str	r3, [r7, #16]
}
 800b7bc:	bf00      	nop
 800b7be:	e7fe      	b.n	800b7be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7c2:	685a      	ldr	r2, [r3, #4]
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	1ad2      	subs	r2, r2, r3
 800b7c8:	69bb      	ldr	r3, [r7, #24]
 800b7ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ce:	687a      	ldr	r2, [r7, #4]
 800b7d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b7d2:	69b8      	ldr	r0, [r7, #24]
 800b7d4:	f000 f908 	bl	800b9e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b7d8:	4b1d      	ldr	r3, [pc, #116]	; (800b850 <pvPortMalloc+0x188>)
 800b7da:	681a      	ldr	r2, [r3, #0]
 800b7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7de:	685b      	ldr	r3, [r3, #4]
 800b7e0:	1ad3      	subs	r3, r2, r3
 800b7e2:	4a1b      	ldr	r2, [pc, #108]	; (800b850 <pvPortMalloc+0x188>)
 800b7e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b7e6:	4b1a      	ldr	r3, [pc, #104]	; (800b850 <pvPortMalloc+0x188>)
 800b7e8:	681a      	ldr	r2, [r3, #0]
 800b7ea:	4b1b      	ldr	r3, [pc, #108]	; (800b858 <pvPortMalloc+0x190>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	429a      	cmp	r2, r3
 800b7f0:	d203      	bcs.n	800b7fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b7f2:	4b17      	ldr	r3, [pc, #92]	; (800b850 <pvPortMalloc+0x188>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	4a18      	ldr	r2, [pc, #96]	; (800b858 <pvPortMalloc+0x190>)
 800b7f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7fc:	685a      	ldr	r2, [r3, #4]
 800b7fe:	4b13      	ldr	r3, [pc, #76]	; (800b84c <pvPortMalloc+0x184>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	431a      	orrs	r2, r3
 800b804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b806:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b80a:	2200      	movs	r2, #0
 800b80c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b80e:	4b13      	ldr	r3, [pc, #76]	; (800b85c <pvPortMalloc+0x194>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	3301      	adds	r3, #1
 800b814:	4a11      	ldr	r2, [pc, #68]	; (800b85c <pvPortMalloc+0x194>)
 800b816:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b818:	f7fe fb3a 	bl	8009e90 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b81c:	69fb      	ldr	r3, [r7, #28]
 800b81e:	f003 0307 	and.w	r3, r3, #7
 800b822:	2b00      	cmp	r3, #0
 800b824:	d00a      	beq.n	800b83c <pvPortMalloc+0x174>
	__asm volatile
 800b826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b82a:	f383 8811 	msr	BASEPRI, r3
 800b82e:	f3bf 8f6f 	isb	sy
 800b832:	f3bf 8f4f 	dsb	sy
 800b836:	60fb      	str	r3, [r7, #12]
}
 800b838:	bf00      	nop
 800b83a:	e7fe      	b.n	800b83a <pvPortMalloc+0x172>
	return pvReturn;
 800b83c:	69fb      	ldr	r3, [r7, #28]
}
 800b83e:	4618      	mov	r0, r3
 800b840:	3728      	adds	r7, #40	; 0x28
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}
 800b846:	bf00      	nop
 800b848:	2000502c 	.word	0x2000502c
 800b84c:	20005040 	.word	0x20005040
 800b850:	20005030 	.word	0x20005030
 800b854:	20005024 	.word	0x20005024
 800b858:	20005034 	.word	0x20005034
 800b85c:	20005038 	.word	0x20005038

0800b860 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b086      	sub	sp, #24
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d04d      	beq.n	800b90e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b872:	2308      	movs	r3, #8
 800b874:	425b      	negs	r3, r3
 800b876:	697a      	ldr	r2, [r7, #20]
 800b878:	4413      	add	r3, r2
 800b87a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b880:	693b      	ldr	r3, [r7, #16]
 800b882:	685a      	ldr	r2, [r3, #4]
 800b884:	4b24      	ldr	r3, [pc, #144]	; (800b918 <vPortFree+0xb8>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	4013      	ands	r3, r2
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d10a      	bne.n	800b8a4 <vPortFree+0x44>
	__asm volatile
 800b88e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b892:	f383 8811 	msr	BASEPRI, r3
 800b896:	f3bf 8f6f 	isb	sy
 800b89a:	f3bf 8f4f 	dsb	sy
 800b89e:	60fb      	str	r3, [r7, #12]
}
 800b8a0:	bf00      	nop
 800b8a2:	e7fe      	b.n	800b8a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b8a4:	693b      	ldr	r3, [r7, #16]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d00a      	beq.n	800b8c2 <vPortFree+0x62>
	__asm volatile
 800b8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8b0:	f383 8811 	msr	BASEPRI, r3
 800b8b4:	f3bf 8f6f 	isb	sy
 800b8b8:	f3bf 8f4f 	dsb	sy
 800b8bc:	60bb      	str	r3, [r7, #8]
}
 800b8be:	bf00      	nop
 800b8c0:	e7fe      	b.n	800b8c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b8c2:	693b      	ldr	r3, [r7, #16]
 800b8c4:	685a      	ldr	r2, [r3, #4]
 800b8c6:	4b14      	ldr	r3, [pc, #80]	; (800b918 <vPortFree+0xb8>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	4013      	ands	r3, r2
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d01e      	beq.n	800b90e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b8d0:	693b      	ldr	r3, [r7, #16]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d11a      	bne.n	800b90e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b8d8:	693b      	ldr	r3, [r7, #16]
 800b8da:	685a      	ldr	r2, [r3, #4]
 800b8dc:	4b0e      	ldr	r3, [pc, #56]	; (800b918 <vPortFree+0xb8>)
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	43db      	mvns	r3, r3
 800b8e2:	401a      	ands	r2, r3
 800b8e4:	693b      	ldr	r3, [r7, #16]
 800b8e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b8e8:	f7fe fac4 	bl	8009e74 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b8ec:	693b      	ldr	r3, [r7, #16]
 800b8ee:	685a      	ldr	r2, [r3, #4]
 800b8f0:	4b0a      	ldr	r3, [pc, #40]	; (800b91c <vPortFree+0xbc>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	4413      	add	r3, r2
 800b8f6:	4a09      	ldr	r2, [pc, #36]	; (800b91c <vPortFree+0xbc>)
 800b8f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b8fa:	6938      	ldr	r0, [r7, #16]
 800b8fc:	f000 f874 	bl	800b9e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b900:	4b07      	ldr	r3, [pc, #28]	; (800b920 <vPortFree+0xc0>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	3301      	adds	r3, #1
 800b906:	4a06      	ldr	r2, [pc, #24]	; (800b920 <vPortFree+0xc0>)
 800b908:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b90a:	f7fe fac1 	bl	8009e90 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b90e:	bf00      	nop
 800b910:	3718      	adds	r7, #24
 800b912:	46bd      	mov	sp, r7
 800b914:	bd80      	pop	{r7, pc}
 800b916:	bf00      	nop
 800b918:	20005040 	.word	0x20005040
 800b91c:	20005030 	.word	0x20005030
 800b920:	2000503c 	.word	0x2000503c

0800b924 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b924:	b480      	push	{r7}
 800b926:	b085      	sub	sp, #20
 800b928:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b92a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b92e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b930:	4b27      	ldr	r3, [pc, #156]	; (800b9d0 <prvHeapInit+0xac>)
 800b932:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	f003 0307 	and.w	r3, r3, #7
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d00c      	beq.n	800b958 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	3307      	adds	r3, #7
 800b942:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	f023 0307 	bic.w	r3, r3, #7
 800b94a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b94c:	68ba      	ldr	r2, [r7, #8]
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	1ad3      	subs	r3, r2, r3
 800b952:	4a1f      	ldr	r2, [pc, #124]	; (800b9d0 <prvHeapInit+0xac>)
 800b954:	4413      	add	r3, r2
 800b956:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b95c:	4a1d      	ldr	r2, [pc, #116]	; (800b9d4 <prvHeapInit+0xb0>)
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b962:	4b1c      	ldr	r3, [pc, #112]	; (800b9d4 <prvHeapInit+0xb0>)
 800b964:	2200      	movs	r2, #0
 800b966:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	68ba      	ldr	r2, [r7, #8]
 800b96c:	4413      	add	r3, r2
 800b96e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b970:	2208      	movs	r2, #8
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	1a9b      	subs	r3, r3, r2
 800b976:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	f023 0307 	bic.w	r3, r3, #7
 800b97e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	4a15      	ldr	r2, [pc, #84]	; (800b9d8 <prvHeapInit+0xb4>)
 800b984:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b986:	4b14      	ldr	r3, [pc, #80]	; (800b9d8 <prvHeapInit+0xb4>)
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	2200      	movs	r2, #0
 800b98c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b98e:	4b12      	ldr	r3, [pc, #72]	; (800b9d8 <prvHeapInit+0xb4>)
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	2200      	movs	r2, #0
 800b994:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	68fa      	ldr	r2, [r7, #12]
 800b99e:	1ad2      	subs	r2, r2, r3
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b9a4:	4b0c      	ldr	r3, [pc, #48]	; (800b9d8 <prvHeapInit+0xb4>)
 800b9a6:	681a      	ldr	r2, [r3, #0]
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	685b      	ldr	r3, [r3, #4]
 800b9b0:	4a0a      	ldr	r2, [pc, #40]	; (800b9dc <prvHeapInit+0xb8>)
 800b9b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	685b      	ldr	r3, [r3, #4]
 800b9b8:	4a09      	ldr	r2, [pc, #36]	; (800b9e0 <prvHeapInit+0xbc>)
 800b9ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b9bc:	4b09      	ldr	r3, [pc, #36]	; (800b9e4 <prvHeapInit+0xc0>)
 800b9be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b9c2:	601a      	str	r2, [r3, #0]
}
 800b9c4:	bf00      	nop
 800b9c6:	3714      	adds	r7, #20
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ce:	4770      	bx	lr
 800b9d0:	20001424 	.word	0x20001424
 800b9d4:	20005024 	.word	0x20005024
 800b9d8:	2000502c 	.word	0x2000502c
 800b9dc:	20005034 	.word	0x20005034
 800b9e0:	20005030 	.word	0x20005030
 800b9e4:	20005040 	.word	0x20005040

0800b9e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b9e8:	b480      	push	{r7}
 800b9ea:	b085      	sub	sp, #20
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b9f0:	4b28      	ldr	r3, [pc, #160]	; (800ba94 <prvInsertBlockIntoFreeList+0xac>)
 800b9f2:	60fb      	str	r3, [r7, #12]
 800b9f4:	e002      	b.n	800b9fc <prvInsertBlockIntoFreeList+0x14>
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	60fb      	str	r3, [r7, #12]
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	687a      	ldr	r2, [r7, #4]
 800ba02:	429a      	cmp	r2, r3
 800ba04:	d8f7      	bhi.n	800b9f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	685b      	ldr	r3, [r3, #4]
 800ba0e:	68ba      	ldr	r2, [r7, #8]
 800ba10:	4413      	add	r3, r2
 800ba12:	687a      	ldr	r2, [r7, #4]
 800ba14:	429a      	cmp	r2, r3
 800ba16:	d108      	bne.n	800ba2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	685a      	ldr	r2, [r3, #4]
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	685b      	ldr	r3, [r3, #4]
 800ba20:	441a      	add	r2, r3
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	685b      	ldr	r3, [r3, #4]
 800ba32:	68ba      	ldr	r2, [r7, #8]
 800ba34:	441a      	add	r2, r3
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	429a      	cmp	r2, r3
 800ba3c:	d118      	bne.n	800ba70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	681a      	ldr	r2, [r3, #0]
 800ba42:	4b15      	ldr	r3, [pc, #84]	; (800ba98 <prvInsertBlockIntoFreeList+0xb0>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	429a      	cmp	r2, r3
 800ba48:	d00d      	beq.n	800ba66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	685a      	ldr	r2, [r3, #4]
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	685b      	ldr	r3, [r3, #4]
 800ba54:	441a      	add	r2, r3
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	681a      	ldr	r2, [r3, #0]
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	601a      	str	r2, [r3, #0]
 800ba64:	e008      	b.n	800ba78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ba66:	4b0c      	ldr	r3, [pc, #48]	; (800ba98 <prvInsertBlockIntoFreeList+0xb0>)
 800ba68:	681a      	ldr	r2, [r3, #0]
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	601a      	str	r2, [r3, #0]
 800ba6e:	e003      	b.n	800ba78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	681a      	ldr	r2, [r3, #0]
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ba78:	68fa      	ldr	r2, [r7, #12]
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	d002      	beq.n	800ba86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	687a      	ldr	r2, [r7, #4]
 800ba84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ba86:	bf00      	nop
 800ba88:	3714      	adds	r7, #20
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba90:	4770      	bx	lr
 800ba92:	bf00      	nop
 800ba94:	20005024 	.word	0x20005024
 800ba98:	2000502c 	.word	0x2000502c

0800ba9c <__errno>:
 800ba9c:	4b01      	ldr	r3, [pc, #4]	; (800baa4 <__errno+0x8>)
 800ba9e:	6818      	ldr	r0, [r3, #0]
 800baa0:	4770      	bx	lr
 800baa2:	bf00      	nop
 800baa4:	20000038 	.word	0x20000038

0800baa8 <__libc_init_array>:
 800baa8:	b570      	push	{r4, r5, r6, lr}
 800baaa:	4d0d      	ldr	r5, [pc, #52]	; (800bae0 <__libc_init_array+0x38>)
 800baac:	4c0d      	ldr	r4, [pc, #52]	; (800bae4 <__libc_init_array+0x3c>)
 800baae:	1b64      	subs	r4, r4, r5
 800bab0:	10a4      	asrs	r4, r4, #2
 800bab2:	2600      	movs	r6, #0
 800bab4:	42a6      	cmp	r6, r4
 800bab6:	d109      	bne.n	800bacc <__libc_init_array+0x24>
 800bab8:	4d0b      	ldr	r5, [pc, #44]	; (800bae8 <__libc_init_array+0x40>)
 800baba:	4c0c      	ldr	r4, [pc, #48]	; (800baec <__libc_init_array+0x44>)
 800babc:	f001 f97e 	bl	800cdbc <_init>
 800bac0:	1b64      	subs	r4, r4, r5
 800bac2:	10a4      	asrs	r4, r4, #2
 800bac4:	2600      	movs	r6, #0
 800bac6:	42a6      	cmp	r6, r4
 800bac8:	d105      	bne.n	800bad6 <__libc_init_array+0x2e>
 800baca:	bd70      	pop	{r4, r5, r6, pc}
 800bacc:	f855 3b04 	ldr.w	r3, [r5], #4
 800bad0:	4798      	blx	r3
 800bad2:	3601      	adds	r6, #1
 800bad4:	e7ee      	b.n	800bab4 <__libc_init_array+0xc>
 800bad6:	f855 3b04 	ldr.w	r3, [r5], #4
 800bada:	4798      	blx	r3
 800badc:	3601      	adds	r6, #1
 800bade:	e7f2      	b.n	800bac6 <__libc_init_array+0x1e>
 800bae0:	0800d9dc 	.word	0x0800d9dc
 800bae4:	0800d9dc 	.word	0x0800d9dc
 800bae8:	0800d9dc 	.word	0x0800d9dc
 800baec:	0800d9e0 	.word	0x0800d9e0

0800baf0 <memcpy>:
 800baf0:	440a      	add	r2, r1
 800baf2:	4291      	cmp	r1, r2
 800baf4:	f100 33ff 	add.w	r3, r0, #4294967295
 800baf8:	d100      	bne.n	800bafc <memcpy+0xc>
 800bafa:	4770      	bx	lr
 800bafc:	b510      	push	{r4, lr}
 800bafe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb02:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb06:	4291      	cmp	r1, r2
 800bb08:	d1f9      	bne.n	800bafe <memcpy+0xe>
 800bb0a:	bd10      	pop	{r4, pc}

0800bb0c <memset>:
 800bb0c:	4402      	add	r2, r0
 800bb0e:	4603      	mov	r3, r0
 800bb10:	4293      	cmp	r3, r2
 800bb12:	d100      	bne.n	800bb16 <memset+0xa>
 800bb14:	4770      	bx	lr
 800bb16:	f803 1b01 	strb.w	r1, [r3], #1
 800bb1a:	e7f9      	b.n	800bb10 <memset+0x4>

0800bb1c <sniprintf>:
 800bb1c:	b40c      	push	{r2, r3}
 800bb1e:	b530      	push	{r4, r5, lr}
 800bb20:	4b17      	ldr	r3, [pc, #92]	; (800bb80 <sniprintf+0x64>)
 800bb22:	1e0c      	subs	r4, r1, #0
 800bb24:	681d      	ldr	r5, [r3, #0]
 800bb26:	b09d      	sub	sp, #116	; 0x74
 800bb28:	da08      	bge.n	800bb3c <sniprintf+0x20>
 800bb2a:	238b      	movs	r3, #139	; 0x8b
 800bb2c:	602b      	str	r3, [r5, #0]
 800bb2e:	f04f 30ff 	mov.w	r0, #4294967295
 800bb32:	b01d      	add	sp, #116	; 0x74
 800bb34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bb38:	b002      	add	sp, #8
 800bb3a:	4770      	bx	lr
 800bb3c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800bb40:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bb44:	bf14      	ite	ne
 800bb46:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bb4a:	4623      	moveq	r3, r4
 800bb4c:	9304      	str	r3, [sp, #16]
 800bb4e:	9307      	str	r3, [sp, #28]
 800bb50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bb54:	9002      	str	r0, [sp, #8]
 800bb56:	9006      	str	r0, [sp, #24]
 800bb58:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bb5c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bb5e:	ab21      	add	r3, sp, #132	; 0x84
 800bb60:	a902      	add	r1, sp, #8
 800bb62:	4628      	mov	r0, r5
 800bb64:	9301      	str	r3, [sp, #4]
 800bb66:	f000 f8b7 	bl	800bcd8 <_svfiprintf_r>
 800bb6a:	1c43      	adds	r3, r0, #1
 800bb6c:	bfbc      	itt	lt
 800bb6e:	238b      	movlt	r3, #139	; 0x8b
 800bb70:	602b      	strlt	r3, [r5, #0]
 800bb72:	2c00      	cmp	r4, #0
 800bb74:	d0dd      	beq.n	800bb32 <sniprintf+0x16>
 800bb76:	9b02      	ldr	r3, [sp, #8]
 800bb78:	2200      	movs	r2, #0
 800bb7a:	701a      	strb	r2, [r3, #0]
 800bb7c:	e7d9      	b.n	800bb32 <sniprintf+0x16>
 800bb7e:	bf00      	nop
 800bb80:	20000038 	.word	0x20000038

0800bb84 <siprintf>:
 800bb84:	b40e      	push	{r1, r2, r3}
 800bb86:	b500      	push	{lr}
 800bb88:	b09c      	sub	sp, #112	; 0x70
 800bb8a:	ab1d      	add	r3, sp, #116	; 0x74
 800bb8c:	9002      	str	r0, [sp, #8]
 800bb8e:	9006      	str	r0, [sp, #24]
 800bb90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bb94:	4809      	ldr	r0, [pc, #36]	; (800bbbc <siprintf+0x38>)
 800bb96:	9107      	str	r1, [sp, #28]
 800bb98:	9104      	str	r1, [sp, #16]
 800bb9a:	4909      	ldr	r1, [pc, #36]	; (800bbc0 <siprintf+0x3c>)
 800bb9c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bba0:	9105      	str	r1, [sp, #20]
 800bba2:	6800      	ldr	r0, [r0, #0]
 800bba4:	9301      	str	r3, [sp, #4]
 800bba6:	a902      	add	r1, sp, #8
 800bba8:	f000 f896 	bl	800bcd8 <_svfiprintf_r>
 800bbac:	9b02      	ldr	r3, [sp, #8]
 800bbae:	2200      	movs	r2, #0
 800bbb0:	701a      	strb	r2, [r3, #0]
 800bbb2:	b01c      	add	sp, #112	; 0x70
 800bbb4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bbb8:	b003      	add	sp, #12
 800bbba:	4770      	bx	lr
 800bbbc:	20000038 	.word	0x20000038
 800bbc0:	ffff0208 	.word	0xffff0208

0800bbc4 <siscanf>:
 800bbc4:	b40e      	push	{r1, r2, r3}
 800bbc6:	b510      	push	{r4, lr}
 800bbc8:	b09f      	sub	sp, #124	; 0x7c
 800bbca:	ac21      	add	r4, sp, #132	; 0x84
 800bbcc:	f44f 7101 	mov.w	r1, #516	; 0x204
 800bbd0:	f854 2b04 	ldr.w	r2, [r4], #4
 800bbd4:	9201      	str	r2, [sp, #4]
 800bbd6:	f8ad 101c 	strh.w	r1, [sp, #28]
 800bbda:	9004      	str	r0, [sp, #16]
 800bbdc:	9008      	str	r0, [sp, #32]
 800bbde:	f7f4 fb17 	bl	8000210 <strlen>
 800bbe2:	4b0c      	ldr	r3, [pc, #48]	; (800bc14 <siscanf+0x50>)
 800bbe4:	9005      	str	r0, [sp, #20]
 800bbe6:	9009      	str	r0, [sp, #36]	; 0x24
 800bbe8:	930d      	str	r3, [sp, #52]	; 0x34
 800bbea:	480b      	ldr	r0, [pc, #44]	; (800bc18 <siscanf+0x54>)
 800bbec:	9a01      	ldr	r2, [sp, #4]
 800bbee:	6800      	ldr	r0, [r0, #0]
 800bbf0:	9403      	str	r4, [sp, #12]
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	9311      	str	r3, [sp, #68]	; 0x44
 800bbf6:	9316      	str	r3, [sp, #88]	; 0x58
 800bbf8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bbfc:	f8ad 301e 	strh.w	r3, [sp, #30]
 800bc00:	a904      	add	r1, sp, #16
 800bc02:	4623      	mov	r3, r4
 800bc04:	f000 f9c2 	bl	800bf8c <__ssvfiscanf_r>
 800bc08:	b01f      	add	sp, #124	; 0x7c
 800bc0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc0e:	b003      	add	sp, #12
 800bc10:	4770      	bx	lr
 800bc12:	bf00      	nop
 800bc14:	0800bc1d 	.word	0x0800bc1d
 800bc18:	20000038 	.word	0x20000038

0800bc1c <__seofread>:
 800bc1c:	2000      	movs	r0, #0
 800bc1e:	4770      	bx	lr

0800bc20 <__ssputs_r>:
 800bc20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc24:	688e      	ldr	r6, [r1, #8]
 800bc26:	429e      	cmp	r6, r3
 800bc28:	4682      	mov	sl, r0
 800bc2a:	460c      	mov	r4, r1
 800bc2c:	4690      	mov	r8, r2
 800bc2e:	461f      	mov	r7, r3
 800bc30:	d838      	bhi.n	800bca4 <__ssputs_r+0x84>
 800bc32:	898a      	ldrh	r2, [r1, #12]
 800bc34:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bc38:	d032      	beq.n	800bca0 <__ssputs_r+0x80>
 800bc3a:	6825      	ldr	r5, [r4, #0]
 800bc3c:	6909      	ldr	r1, [r1, #16]
 800bc3e:	eba5 0901 	sub.w	r9, r5, r1
 800bc42:	6965      	ldr	r5, [r4, #20]
 800bc44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bc48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bc4c:	3301      	adds	r3, #1
 800bc4e:	444b      	add	r3, r9
 800bc50:	106d      	asrs	r5, r5, #1
 800bc52:	429d      	cmp	r5, r3
 800bc54:	bf38      	it	cc
 800bc56:	461d      	movcc	r5, r3
 800bc58:	0553      	lsls	r3, r2, #21
 800bc5a:	d531      	bpl.n	800bcc0 <__ssputs_r+0xa0>
 800bc5c:	4629      	mov	r1, r5
 800bc5e:	f000 ffe5 	bl	800cc2c <_malloc_r>
 800bc62:	4606      	mov	r6, r0
 800bc64:	b950      	cbnz	r0, 800bc7c <__ssputs_r+0x5c>
 800bc66:	230c      	movs	r3, #12
 800bc68:	f8ca 3000 	str.w	r3, [sl]
 800bc6c:	89a3      	ldrh	r3, [r4, #12]
 800bc6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc72:	81a3      	strh	r3, [r4, #12]
 800bc74:	f04f 30ff 	mov.w	r0, #4294967295
 800bc78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc7c:	6921      	ldr	r1, [r4, #16]
 800bc7e:	464a      	mov	r2, r9
 800bc80:	f7ff ff36 	bl	800baf0 <memcpy>
 800bc84:	89a3      	ldrh	r3, [r4, #12]
 800bc86:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bc8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc8e:	81a3      	strh	r3, [r4, #12]
 800bc90:	6126      	str	r6, [r4, #16]
 800bc92:	6165      	str	r5, [r4, #20]
 800bc94:	444e      	add	r6, r9
 800bc96:	eba5 0509 	sub.w	r5, r5, r9
 800bc9a:	6026      	str	r6, [r4, #0]
 800bc9c:	60a5      	str	r5, [r4, #8]
 800bc9e:	463e      	mov	r6, r7
 800bca0:	42be      	cmp	r6, r7
 800bca2:	d900      	bls.n	800bca6 <__ssputs_r+0x86>
 800bca4:	463e      	mov	r6, r7
 800bca6:	6820      	ldr	r0, [r4, #0]
 800bca8:	4632      	mov	r2, r6
 800bcaa:	4641      	mov	r1, r8
 800bcac:	f000 ff38 	bl	800cb20 <memmove>
 800bcb0:	68a3      	ldr	r3, [r4, #8]
 800bcb2:	1b9b      	subs	r3, r3, r6
 800bcb4:	60a3      	str	r3, [r4, #8]
 800bcb6:	6823      	ldr	r3, [r4, #0]
 800bcb8:	4433      	add	r3, r6
 800bcba:	6023      	str	r3, [r4, #0]
 800bcbc:	2000      	movs	r0, #0
 800bcbe:	e7db      	b.n	800bc78 <__ssputs_r+0x58>
 800bcc0:	462a      	mov	r2, r5
 800bcc2:	f001 f827 	bl	800cd14 <_realloc_r>
 800bcc6:	4606      	mov	r6, r0
 800bcc8:	2800      	cmp	r0, #0
 800bcca:	d1e1      	bne.n	800bc90 <__ssputs_r+0x70>
 800bccc:	6921      	ldr	r1, [r4, #16]
 800bcce:	4650      	mov	r0, sl
 800bcd0:	f000 ff40 	bl	800cb54 <_free_r>
 800bcd4:	e7c7      	b.n	800bc66 <__ssputs_r+0x46>
	...

0800bcd8 <_svfiprintf_r>:
 800bcd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcdc:	4698      	mov	r8, r3
 800bcde:	898b      	ldrh	r3, [r1, #12]
 800bce0:	061b      	lsls	r3, r3, #24
 800bce2:	b09d      	sub	sp, #116	; 0x74
 800bce4:	4607      	mov	r7, r0
 800bce6:	460d      	mov	r5, r1
 800bce8:	4614      	mov	r4, r2
 800bcea:	d50e      	bpl.n	800bd0a <_svfiprintf_r+0x32>
 800bcec:	690b      	ldr	r3, [r1, #16]
 800bcee:	b963      	cbnz	r3, 800bd0a <_svfiprintf_r+0x32>
 800bcf0:	2140      	movs	r1, #64	; 0x40
 800bcf2:	f000 ff9b 	bl	800cc2c <_malloc_r>
 800bcf6:	6028      	str	r0, [r5, #0]
 800bcf8:	6128      	str	r0, [r5, #16]
 800bcfa:	b920      	cbnz	r0, 800bd06 <_svfiprintf_r+0x2e>
 800bcfc:	230c      	movs	r3, #12
 800bcfe:	603b      	str	r3, [r7, #0]
 800bd00:	f04f 30ff 	mov.w	r0, #4294967295
 800bd04:	e0d1      	b.n	800beaa <_svfiprintf_r+0x1d2>
 800bd06:	2340      	movs	r3, #64	; 0x40
 800bd08:	616b      	str	r3, [r5, #20]
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	9309      	str	r3, [sp, #36]	; 0x24
 800bd0e:	2320      	movs	r3, #32
 800bd10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bd14:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd18:	2330      	movs	r3, #48	; 0x30
 800bd1a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bec4 <_svfiprintf_r+0x1ec>
 800bd1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd22:	f04f 0901 	mov.w	r9, #1
 800bd26:	4623      	mov	r3, r4
 800bd28:	469a      	mov	sl, r3
 800bd2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd2e:	b10a      	cbz	r2, 800bd34 <_svfiprintf_r+0x5c>
 800bd30:	2a25      	cmp	r2, #37	; 0x25
 800bd32:	d1f9      	bne.n	800bd28 <_svfiprintf_r+0x50>
 800bd34:	ebba 0b04 	subs.w	fp, sl, r4
 800bd38:	d00b      	beq.n	800bd52 <_svfiprintf_r+0x7a>
 800bd3a:	465b      	mov	r3, fp
 800bd3c:	4622      	mov	r2, r4
 800bd3e:	4629      	mov	r1, r5
 800bd40:	4638      	mov	r0, r7
 800bd42:	f7ff ff6d 	bl	800bc20 <__ssputs_r>
 800bd46:	3001      	adds	r0, #1
 800bd48:	f000 80aa 	beq.w	800bea0 <_svfiprintf_r+0x1c8>
 800bd4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd4e:	445a      	add	r2, fp
 800bd50:	9209      	str	r2, [sp, #36]	; 0x24
 800bd52:	f89a 3000 	ldrb.w	r3, [sl]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	f000 80a2 	beq.w	800bea0 <_svfiprintf_r+0x1c8>
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	f04f 32ff 	mov.w	r2, #4294967295
 800bd62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd66:	f10a 0a01 	add.w	sl, sl, #1
 800bd6a:	9304      	str	r3, [sp, #16]
 800bd6c:	9307      	str	r3, [sp, #28]
 800bd6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bd72:	931a      	str	r3, [sp, #104]	; 0x68
 800bd74:	4654      	mov	r4, sl
 800bd76:	2205      	movs	r2, #5
 800bd78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd7c:	4851      	ldr	r0, [pc, #324]	; (800bec4 <_svfiprintf_r+0x1ec>)
 800bd7e:	f7f4 fa4f 	bl	8000220 <memchr>
 800bd82:	9a04      	ldr	r2, [sp, #16]
 800bd84:	b9d8      	cbnz	r0, 800bdbe <_svfiprintf_r+0xe6>
 800bd86:	06d0      	lsls	r0, r2, #27
 800bd88:	bf44      	itt	mi
 800bd8a:	2320      	movmi	r3, #32
 800bd8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd90:	0711      	lsls	r1, r2, #28
 800bd92:	bf44      	itt	mi
 800bd94:	232b      	movmi	r3, #43	; 0x2b
 800bd96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd9a:	f89a 3000 	ldrb.w	r3, [sl]
 800bd9e:	2b2a      	cmp	r3, #42	; 0x2a
 800bda0:	d015      	beq.n	800bdce <_svfiprintf_r+0xf6>
 800bda2:	9a07      	ldr	r2, [sp, #28]
 800bda4:	4654      	mov	r4, sl
 800bda6:	2000      	movs	r0, #0
 800bda8:	f04f 0c0a 	mov.w	ip, #10
 800bdac:	4621      	mov	r1, r4
 800bdae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bdb2:	3b30      	subs	r3, #48	; 0x30
 800bdb4:	2b09      	cmp	r3, #9
 800bdb6:	d94e      	bls.n	800be56 <_svfiprintf_r+0x17e>
 800bdb8:	b1b0      	cbz	r0, 800bde8 <_svfiprintf_r+0x110>
 800bdba:	9207      	str	r2, [sp, #28]
 800bdbc:	e014      	b.n	800bde8 <_svfiprintf_r+0x110>
 800bdbe:	eba0 0308 	sub.w	r3, r0, r8
 800bdc2:	fa09 f303 	lsl.w	r3, r9, r3
 800bdc6:	4313      	orrs	r3, r2
 800bdc8:	9304      	str	r3, [sp, #16]
 800bdca:	46a2      	mov	sl, r4
 800bdcc:	e7d2      	b.n	800bd74 <_svfiprintf_r+0x9c>
 800bdce:	9b03      	ldr	r3, [sp, #12]
 800bdd0:	1d19      	adds	r1, r3, #4
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	9103      	str	r1, [sp, #12]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	bfbb      	ittet	lt
 800bdda:	425b      	neglt	r3, r3
 800bddc:	f042 0202 	orrlt.w	r2, r2, #2
 800bde0:	9307      	strge	r3, [sp, #28]
 800bde2:	9307      	strlt	r3, [sp, #28]
 800bde4:	bfb8      	it	lt
 800bde6:	9204      	strlt	r2, [sp, #16]
 800bde8:	7823      	ldrb	r3, [r4, #0]
 800bdea:	2b2e      	cmp	r3, #46	; 0x2e
 800bdec:	d10c      	bne.n	800be08 <_svfiprintf_r+0x130>
 800bdee:	7863      	ldrb	r3, [r4, #1]
 800bdf0:	2b2a      	cmp	r3, #42	; 0x2a
 800bdf2:	d135      	bne.n	800be60 <_svfiprintf_r+0x188>
 800bdf4:	9b03      	ldr	r3, [sp, #12]
 800bdf6:	1d1a      	adds	r2, r3, #4
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	9203      	str	r2, [sp, #12]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	bfb8      	it	lt
 800be00:	f04f 33ff 	movlt.w	r3, #4294967295
 800be04:	3402      	adds	r4, #2
 800be06:	9305      	str	r3, [sp, #20]
 800be08:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bed4 <_svfiprintf_r+0x1fc>
 800be0c:	7821      	ldrb	r1, [r4, #0]
 800be0e:	2203      	movs	r2, #3
 800be10:	4650      	mov	r0, sl
 800be12:	f7f4 fa05 	bl	8000220 <memchr>
 800be16:	b140      	cbz	r0, 800be2a <_svfiprintf_r+0x152>
 800be18:	2340      	movs	r3, #64	; 0x40
 800be1a:	eba0 000a 	sub.w	r0, r0, sl
 800be1e:	fa03 f000 	lsl.w	r0, r3, r0
 800be22:	9b04      	ldr	r3, [sp, #16]
 800be24:	4303      	orrs	r3, r0
 800be26:	3401      	adds	r4, #1
 800be28:	9304      	str	r3, [sp, #16]
 800be2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be2e:	4826      	ldr	r0, [pc, #152]	; (800bec8 <_svfiprintf_r+0x1f0>)
 800be30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be34:	2206      	movs	r2, #6
 800be36:	f7f4 f9f3 	bl	8000220 <memchr>
 800be3a:	2800      	cmp	r0, #0
 800be3c:	d038      	beq.n	800beb0 <_svfiprintf_r+0x1d8>
 800be3e:	4b23      	ldr	r3, [pc, #140]	; (800becc <_svfiprintf_r+0x1f4>)
 800be40:	bb1b      	cbnz	r3, 800be8a <_svfiprintf_r+0x1b2>
 800be42:	9b03      	ldr	r3, [sp, #12]
 800be44:	3307      	adds	r3, #7
 800be46:	f023 0307 	bic.w	r3, r3, #7
 800be4a:	3308      	adds	r3, #8
 800be4c:	9303      	str	r3, [sp, #12]
 800be4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be50:	4433      	add	r3, r6
 800be52:	9309      	str	r3, [sp, #36]	; 0x24
 800be54:	e767      	b.n	800bd26 <_svfiprintf_r+0x4e>
 800be56:	fb0c 3202 	mla	r2, ip, r2, r3
 800be5a:	460c      	mov	r4, r1
 800be5c:	2001      	movs	r0, #1
 800be5e:	e7a5      	b.n	800bdac <_svfiprintf_r+0xd4>
 800be60:	2300      	movs	r3, #0
 800be62:	3401      	adds	r4, #1
 800be64:	9305      	str	r3, [sp, #20]
 800be66:	4619      	mov	r1, r3
 800be68:	f04f 0c0a 	mov.w	ip, #10
 800be6c:	4620      	mov	r0, r4
 800be6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be72:	3a30      	subs	r2, #48	; 0x30
 800be74:	2a09      	cmp	r2, #9
 800be76:	d903      	bls.n	800be80 <_svfiprintf_r+0x1a8>
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d0c5      	beq.n	800be08 <_svfiprintf_r+0x130>
 800be7c:	9105      	str	r1, [sp, #20]
 800be7e:	e7c3      	b.n	800be08 <_svfiprintf_r+0x130>
 800be80:	fb0c 2101 	mla	r1, ip, r1, r2
 800be84:	4604      	mov	r4, r0
 800be86:	2301      	movs	r3, #1
 800be88:	e7f0      	b.n	800be6c <_svfiprintf_r+0x194>
 800be8a:	ab03      	add	r3, sp, #12
 800be8c:	9300      	str	r3, [sp, #0]
 800be8e:	462a      	mov	r2, r5
 800be90:	4b0f      	ldr	r3, [pc, #60]	; (800bed0 <_svfiprintf_r+0x1f8>)
 800be92:	a904      	add	r1, sp, #16
 800be94:	4638      	mov	r0, r7
 800be96:	f3af 8000 	nop.w
 800be9a:	1c42      	adds	r2, r0, #1
 800be9c:	4606      	mov	r6, r0
 800be9e:	d1d6      	bne.n	800be4e <_svfiprintf_r+0x176>
 800bea0:	89ab      	ldrh	r3, [r5, #12]
 800bea2:	065b      	lsls	r3, r3, #25
 800bea4:	f53f af2c 	bmi.w	800bd00 <_svfiprintf_r+0x28>
 800bea8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800beaa:	b01d      	add	sp, #116	; 0x74
 800beac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beb0:	ab03      	add	r3, sp, #12
 800beb2:	9300      	str	r3, [sp, #0]
 800beb4:	462a      	mov	r2, r5
 800beb6:	4b06      	ldr	r3, [pc, #24]	; (800bed0 <_svfiprintf_r+0x1f8>)
 800beb8:	a904      	add	r1, sp, #16
 800beba:	4638      	mov	r0, r7
 800bebc:	f000 fa4c 	bl	800c358 <_printf_i>
 800bec0:	e7eb      	b.n	800be9a <_svfiprintf_r+0x1c2>
 800bec2:	bf00      	nop
 800bec4:	0800d824 	.word	0x0800d824
 800bec8:	0800d82e 	.word	0x0800d82e
 800becc:	00000000 	.word	0x00000000
 800bed0:	0800bc21 	.word	0x0800bc21
 800bed4:	0800d82a 	.word	0x0800d82a

0800bed8 <_sungetc_r>:
 800bed8:	b538      	push	{r3, r4, r5, lr}
 800beda:	1c4b      	adds	r3, r1, #1
 800bedc:	4614      	mov	r4, r2
 800bede:	d103      	bne.n	800bee8 <_sungetc_r+0x10>
 800bee0:	f04f 35ff 	mov.w	r5, #4294967295
 800bee4:	4628      	mov	r0, r5
 800bee6:	bd38      	pop	{r3, r4, r5, pc}
 800bee8:	8993      	ldrh	r3, [r2, #12]
 800beea:	f023 0320 	bic.w	r3, r3, #32
 800beee:	8193      	strh	r3, [r2, #12]
 800bef0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bef2:	6852      	ldr	r2, [r2, #4]
 800bef4:	b2cd      	uxtb	r5, r1
 800bef6:	b18b      	cbz	r3, 800bf1c <_sungetc_r+0x44>
 800bef8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800befa:	4293      	cmp	r3, r2
 800befc:	dd08      	ble.n	800bf10 <_sungetc_r+0x38>
 800befe:	6823      	ldr	r3, [r4, #0]
 800bf00:	1e5a      	subs	r2, r3, #1
 800bf02:	6022      	str	r2, [r4, #0]
 800bf04:	f803 5c01 	strb.w	r5, [r3, #-1]
 800bf08:	6863      	ldr	r3, [r4, #4]
 800bf0a:	3301      	adds	r3, #1
 800bf0c:	6063      	str	r3, [r4, #4]
 800bf0e:	e7e9      	b.n	800bee4 <_sungetc_r+0xc>
 800bf10:	4621      	mov	r1, r4
 800bf12:	f000 fdc9 	bl	800caa8 <__submore>
 800bf16:	2800      	cmp	r0, #0
 800bf18:	d0f1      	beq.n	800befe <_sungetc_r+0x26>
 800bf1a:	e7e1      	b.n	800bee0 <_sungetc_r+0x8>
 800bf1c:	6921      	ldr	r1, [r4, #16]
 800bf1e:	6823      	ldr	r3, [r4, #0]
 800bf20:	b151      	cbz	r1, 800bf38 <_sungetc_r+0x60>
 800bf22:	4299      	cmp	r1, r3
 800bf24:	d208      	bcs.n	800bf38 <_sungetc_r+0x60>
 800bf26:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800bf2a:	42a9      	cmp	r1, r5
 800bf2c:	d104      	bne.n	800bf38 <_sungetc_r+0x60>
 800bf2e:	3b01      	subs	r3, #1
 800bf30:	3201      	adds	r2, #1
 800bf32:	6023      	str	r3, [r4, #0]
 800bf34:	6062      	str	r2, [r4, #4]
 800bf36:	e7d5      	b.n	800bee4 <_sungetc_r+0xc>
 800bf38:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800bf3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf40:	6363      	str	r3, [r4, #52]	; 0x34
 800bf42:	2303      	movs	r3, #3
 800bf44:	63a3      	str	r3, [r4, #56]	; 0x38
 800bf46:	4623      	mov	r3, r4
 800bf48:	f803 5f46 	strb.w	r5, [r3, #70]!
 800bf4c:	6023      	str	r3, [r4, #0]
 800bf4e:	2301      	movs	r3, #1
 800bf50:	e7dc      	b.n	800bf0c <_sungetc_r+0x34>

0800bf52 <__ssrefill_r>:
 800bf52:	b510      	push	{r4, lr}
 800bf54:	460c      	mov	r4, r1
 800bf56:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800bf58:	b169      	cbz	r1, 800bf76 <__ssrefill_r+0x24>
 800bf5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf5e:	4299      	cmp	r1, r3
 800bf60:	d001      	beq.n	800bf66 <__ssrefill_r+0x14>
 800bf62:	f000 fdf7 	bl	800cb54 <_free_r>
 800bf66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bf68:	6063      	str	r3, [r4, #4]
 800bf6a:	2000      	movs	r0, #0
 800bf6c:	6360      	str	r0, [r4, #52]	; 0x34
 800bf6e:	b113      	cbz	r3, 800bf76 <__ssrefill_r+0x24>
 800bf70:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bf72:	6023      	str	r3, [r4, #0]
 800bf74:	bd10      	pop	{r4, pc}
 800bf76:	6923      	ldr	r3, [r4, #16]
 800bf78:	6023      	str	r3, [r4, #0]
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	6063      	str	r3, [r4, #4]
 800bf7e:	89a3      	ldrh	r3, [r4, #12]
 800bf80:	f043 0320 	orr.w	r3, r3, #32
 800bf84:	81a3      	strh	r3, [r4, #12]
 800bf86:	f04f 30ff 	mov.w	r0, #4294967295
 800bf8a:	e7f3      	b.n	800bf74 <__ssrefill_r+0x22>

0800bf8c <__ssvfiscanf_r>:
 800bf8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf90:	460c      	mov	r4, r1
 800bf92:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800bf96:	2100      	movs	r1, #0
 800bf98:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800bf9c:	49a6      	ldr	r1, [pc, #664]	; (800c238 <__ssvfiscanf_r+0x2ac>)
 800bf9e:	91a0      	str	r1, [sp, #640]	; 0x280
 800bfa0:	f10d 0804 	add.w	r8, sp, #4
 800bfa4:	49a5      	ldr	r1, [pc, #660]	; (800c23c <__ssvfiscanf_r+0x2b0>)
 800bfa6:	4fa6      	ldr	r7, [pc, #664]	; (800c240 <__ssvfiscanf_r+0x2b4>)
 800bfa8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800c244 <__ssvfiscanf_r+0x2b8>
 800bfac:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800bfb0:	4606      	mov	r6, r0
 800bfb2:	91a1      	str	r1, [sp, #644]	; 0x284
 800bfb4:	9300      	str	r3, [sp, #0]
 800bfb6:	7813      	ldrb	r3, [r2, #0]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	f000 815a 	beq.w	800c272 <__ssvfiscanf_r+0x2e6>
 800bfbe:	5dd9      	ldrb	r1, [r3, r7]
 800bfc0:	f011 0108 	ands.w	r1, r1, #8
 800bfc4:	f102 0501 	add.w	r5, r2, #1
 800bfc8:	d019      	beq.n	800bffe <__ssvfiscanf_r+0x72>
 800bfca:	6863      	ldr	r3, [r4, #4]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	dd0f      	ble.n	800bff0 <__ssvfiscanf_r+0x64>
 800bfd0:	6823      	ldr	r3, [r4, #0]
 800bfd2:	781a      	ldrb	r2, [r3, #0]
 800bfd4:	5cba      	ldrb	r2, [r7, r2]
 800bfd6:	0712      	lsls	r2, r2, #28
 800bfd8:	d401      	bmi.n	800bfde <__ssvfiscanf_r+0x52>
 800bfda:	462a      	mov	r2, r5
 800bfdc:	e7eb      	b.n	800bfb6 <__ssvfiscanf_r+0x2a>
 800bfde:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bfe0:	3201      	adds	r2, #1
 800bfe2:	9245      	str	r2, [sp, #276]	; 0x114
 800bfe4:	6862      	ldr	r2, [r4, #4]
 800bfe6:	3301      	adds	r3, #1
 800bfe8:	3a01      	subs	r2, #1
 800bfea:	6062      	str	r2, [r4, #4]
 800bfec:	6023      	str	r3, [r4, #0]
 800bfee:	e7ec      	b.n	800bfca <__ssvfiscanf_r+0x3e>
 800bff0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bff2:	4621      	mov	r1, r4
 800bff4:	4630      	mov	r0, r6
 800bff6:	4798      	blx	r3
 800bff8:	2800      	cmp	r0, #0
 800bffa:	d0e9      	beq.n	800bfd0 <__ssvfiscanf_r+0x44>
 800bffc:	e7ed      	b.n	800bfda <__ssvfiscanf_r+0x4e>
 800bffe:	2b25      	cmp	r3, #37	; 0x25
 800c000:	d012      	beq.n	800c028 <__ssvfiscanf_r+0x9c>
 800c002:	469a      	mov	sl, r3
 800c004:	6863      	ldr	r3, [r4, #4]
 800c006:	2b00      	cmp	r3, #0
 800c008:	f340 8091 	ble.w	800c12e <__ssvfiscanf_r+0x1a2>
 800c00c:	6822      	ldr	r2, [r4, #0]
 800c00e:	7813      	ldrb	r3, [r2, #0]
 800c010:	4553      	cmp	r3, sl
 800c012:	f040 812e 	bne.w	800c272 <__ssvfiscanf_r+0x2e6>
 800c016:	6863      	ldr	r3, [r4, #4]
 800c018:	3b01      	subs	r3, #1
 800c01a:	6063      	str	r3, [r4, #4]
 800c01c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c01e:	3201      	adds	r2, #1
 800c020:	3301      	adds	r3, #1
 800c022:	6022      	str	r2, [r4, #0]
 800c024:	9345      	str	r3, [sp, #276]	; 0x114
 800c026:	e7d8      	b.n	800bfda <__ssvfiscanf_r+0x4e>
 800c028:	9141      	str	r1, [sp, #260]	; 0x104
 800c02a:	9143      	str	r1, [sp, #268]	; 0x10c
 800c02c:	7853      	ldrb	r3, [r2, #1]
 800c02e:	2b2a      	cmp	r3, #42	; 0x2a
 800c030:	bf02      	ittt	eq
 800c032:	2310      	moveq	r3, #16
 800c034:	1c95      	addeq	r5, r2, #2
 800c036:	9341      	streq	r3, [sp, #260]	; 0x104
 800c038:	220a      	movs	r2, #10
 800c03a:	46aa      	mov	sl, r5
 800c03c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800c040:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800c044:	2b09      	cmp	r3, #9
 800c046:	d91d      	bls.n	800c084 <__ssvfiscanf_r+0xf8>
 800c048:	487e      	ldr	r0, [pc, #504]	; (800c244 <__ssvfiscanf_r+0x2b8>)
 800c04a:	2203      	movs	r2, #3
 800c04c:	f7f4 f8e8 	bl	8000220 <memchr>
 800c050:	b140      	cbz	r0, 800c064 <__ssvfiscanf_r+0xd8>
 800c052:	2301      	movs	r3, #1
 800c054:	eba0 0009 	sub.w	r0, r0, r9
 800c058:	fa03 f000 	lsl.w	r0, r3, r0
 800c05c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c05e:	4318      	orrs	r0, r3
 800c060:	9041      	str	r0, [sp, #260]	; 0x104
 800c062:	4655      	mov	r5, sl
 800c064:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c068:	2b78      	cmp	r3, #120	; 0x78
 800c06a:	d806      	bhi.n	800c07a <__ssvfiscanf_r+0xee>
 800c06c:	2b57      	cmp	r3, #87	; 0x57
 800c06e:	d810      	bhi.n	800c092 <__ssvfiscanf_r+0x106>
 800c070:	2b25      	cmp	r3, #37	; 0x25
 800c072:	d0c6      	beq.n	800c002 <__ssvfiscanf_r+0x76>
 800c074:	d856      	bhi.n	800c124 <__ssvfiscanf_r+0x198>
 800c076:	2b00      	cmp	r3, #0
 800c078:	d064      	beq.n	800c144 <__ssvfiscanf_r+0x1b8>
 800c07a:	2303      	movs	r3, #3
 800c07c:	9347      	str	r3, [sp, #284]	; 0x11c
 800c07e:	230a      	movs	r3, #10
 800c080:	9342      	str	r3, [sp, #264]	; 0x108
 800c082:	e071      	b.n	800c168 <__ssvfiscanf_r+0x1dc>
 800c084:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c086:	fb02 1103 	mla	r1, r2, r3, r1
 800c08a:	3930      	subs	r1, #48	; 0x30
 800c08c:	9143      	str	r1, [sp, #268]	; 0x10c
 800c08e:	4655      	mov	r5, sl
 800c090:	e7d3      	b.n	800c03a <__ssvfiscanf_r+0xae>
 800c092:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800c096:	2a20      	cmp	r2, #32
 800c098:	d8ef      	bhi.n	800c07a <__ssvfiscanf_r+0xee>
 800c09a:	a101      	add	r1, pc, #4	; (adr r1, 800c0a0 <__ssvfiscanf_r+0x114>)
 800c09c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c0a0:	0800c153 	.word	0x0800c153
 800c0a4:	0800c07b 	.word	0x0800c07b
 800c0a8:	0800c07b 	.word	0x0800c07b
 800c0ac:	0800c1b1 	.word	0x0800c1b1
 800c0b0:	0800c07b 	.word	0x0800c07b
 800c0b4:	0800c07b 	.word	0x0800c07b
 800c0b8:	0800c07b 	.word	0x0800c07b
 800c0bc:	0800c07b 	.word	0x0800c07b
 800c0c0:	0800c07b 	.word	0x0800c07b
 800c0c4:	0800c07b 	.word	0x0800c07b
 800c0c8:	0800c07b 	.word	0x0800c07b
 800c0cc:	0800c1c7 	.word	0x0800c1c7
 800c0d0:	0800c19d 	.word	0x0800c19d
 800c0d4:	0800c12b 	.word	0x0800c12b
 800c0d8:	0800c12b 	.word	0x0800c12b
 800c0dc:	0800c12b 	.word	0x0800c12b
 800c0e0:	0800c07b 	.word	0x0800c07b
 800c0e4:	0800c1a1 	.word	0x0800c1a1
 800c0e8:	0800c07b 	.word	0x0800c07b
 800c0ec:	0800c07b 	.word	0x0800c07b
 800c0f0:	0800c07b 	.word	0x0800c07b
 800c0f4:	0800c07b 	.word	0x0800c07b
 800c0f8:	0800c1d7 	.word	0x0800c1d7
 800c0fc:	0800c1a9 	.word	0x0800c1a9
 800c100:	0800c14b 	.word	0x0800c14b
 800c104:	0800c07b 	.word	0x0800c07b
 800c108:	0800c07b 	.word	0x0800c07b
 800c10c:	0800c1d3 	.word	0x0800c1d3
 800c110:	0800c07b 	.word	0x0800c07b
 800c114:	0800c19d 	.word	0x0800c19d
 800c118:	0800c07b 	.word	0x0800c07b
 800c11c:	0800c07b 	.word	0x0800c07b
 800c120:	0800c153 	.word	0x0800c153
 800c124:	3b45      	subs	r3, #69	; 0x45
 800c126:	2b02      	cmp	r3, #2
 800c128:	d8a7      	bhi.n	800c07a <__ssvfiscanf_r+0xee>
 800c12a:	2305      	movs	r3, #5
 800c12c:	e01b      	b.n	800c166 <__ssvfiscanf_r+0x1da>
 800c12e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c130:	4621      	mov	r1, r4
 800c132:	4630      	mov	r0, r6
 800c134:	4798      	blx	r3
 800c136:	2800      	cmp	r0, #0
 800c138:	f43f af68 	beq.w	800c00c <__ssvfiscanf_r+0x80>
 800c13c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c13e:	2800      	cmp	r0, #0
 800c140:	f040 808d 	bne.w	800c25e <__ssvfiscanf_r+0x2d2>
 800c144:	f04f 30ff 	mov.w	r0, #4294967295
 800c148:	e08f      	b.n	800c26a <__ssvfiscanf_r+0x2de>
 800c14a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c14c:	f042 0220 	orr.w	r2, r2, #32
 800c150:	9241      	str	r2, [sp, #260]	; 0x104
 800c152:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c154:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c158:	9241      	str	r2, [sp, #260]	; 0x104
 800c15a:	2210      	movs	r2, #16
 800c15c:	2b6f      	cmp	r3, #111	; 0x6f
 800c15e:	9242      	str	r2, [sp, #264]	; 0x108
 800c160:	bf34      	ite	cc
 800c162:	2303      	movcc	r3, #3
 800c164:	2304      	movcs	r3, #4
 800c166:	9347      	str	r3, [sp, #284]	; 0x11c
 800c168:	6863      	ldr	r3, [r4, #4]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	dd42      	ble.n	800c1f4 <__ssvfiscanf_r+0x268>
 800c16e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c170:	0659      	lsls	r1, r3, #25
 800c172:	d404      	bmi.n	800c17e <__ssvfiscanf_r+0x1f2>
 800c174:	6823      	ldr	r3, [r4, #0]
 800c176:	781a      	ldrb	r2, [r3, #0]
 800c178:	5cba      	ldrb	r2, [r7, r2]
 800c17a:	0712      	lsls	r2, r2, #28
 800c17c:	d441      	bmi.n	800c202 <__ssvfiscanf_r+0x276>
 800c17e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800c180:	2b02      	cmp	r3, #2
 800c182:	dc50      	bgt.n	800c226 <__ssvfiscanf_r+0x29a>
 800c184:	466b      	mov	r3, sp
 800c186:	4622      	mov	r2, r4
 800c188:	a941      	add	r1, sp, #260	; 0x104
 800c18a:	4630      	mov	r0, r6
 800c18c:	f000 fa0a 	bl	800c5a4 <_scanf_chars>
 800c190:	2801      	cmp	r0, #1
 800c192:	d06e      	beq.n	800c272 <__ssvfiscanf_r+0x2e6>
 800c194:	2802      	cmp	r0, #2
 800c196:	f47f af20 	bne.w	800bfda <__ssvfiscanf_r+0x4e>
 800c19a:	e7cf      	b.n	800c13c <__ssvfiscanf_r+0x1b0>
 800c19c:	220a      	movs	r2, #10
 800c19e:	e7dd      	b.n	800c15c <__ssvfiscanf_r+0x1d0>
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	9342      	str	r3, [sp, #264]	; 0x108
 800c1a4:	2303      	movs	r3, #3
 800c1a6:	e7de      	b.n	800c166 <__ssvfiscanf_r+0x1da>
 800c1a8:	2308      	movs	r3, #8
 800c1aa:	9342      	str	r3, [sp, #264]	; 0x108
 800c1ac:	2304      	movs	r3, #4
 800c1ae:	e7da      	b.n	800c166 <__ssvfiscanf_r+0x1da>
 800c1b0:	4629      	mov	r1, r5
 800c1b2:	4640      	mov	r0, r8
 800c1b4:	f000 fb48 	bl	800c848 <__sccl>
 800c1b8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c1ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1be:	9341      	str	r3, [sp, #260]	; 0x104
 800c1c0:	4605      	mov	r5, r0
 800c1c2:	2301      	movs	r3, #1
 800c1c4:	e7cf      	b.n	800c166 <__ssvfiscanf_r+0x1da>
 800c1c6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c1c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1cc:	9341      	str	r3, [sp, #260]	; 0x104
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	e7c9      	b.n	800c166 <__ssvfiscanf_r+0x1da>
 800c1d2:	2302      	movs	r3, #2
 800c1d4:	e7c7      	b.n	800c166 <__ssvfiscanf_r+0x1da>
 800c1d6:	9841      	ldr	r0, [sp, #260]	; 0x104
 800c1d8:	06c3      	lsls	r3, r0, #27
 800c1da:	f53f aefe 	bmi.w	800bfda <__ssvfiscanf_r+0x4e>
 800c1de:	9b00      	ldr	r3, [sp, #0]
 800c1e0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c1e2:	1d19      	adds	r1, r3, #4
 800c1e4:	9100      	str	r1, [sp, #0]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	f010 0f01 	tst.w	r0, #1
 800c1ec:	bf14      	ite	ne
 800c1ee:	801a      	strhne	r2, [r3, #0]
 800c1f0:	601a      	streq	r2, [r3, #0]
 800c1f2:	e6f2      	b.n	800bfda <__ssvfiscanf_r+0x4e>
 800c1f4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c1f6:	4621      	mov	r1, r4
 800c1f8:	4630      	mov	r0, r6
 800c1fa:	4798      	blx	r3
 800c1fc:	2800      	cmp	r0, #0
 800c1fe:	d0b6      	beq.n	800c16e <__ssvfiscanf_r+0x1e2>
 800c200:	e79c      	b.n	800c13c <__ssvfiscanf_r+0x1b0>
 800c202:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c204:	3201      	adds	r2, #1
 800c206:	9245      	str	r2, [sp, #276]	; 0x114
 800c208:	6862      	ldr	r2, [r4, #4]
 800c20a:	3a01      	subs	r2, #1
 800c20c:	2a00      	cmp	r2, #0
 800c20e:	6062      	str	r2, [r4, #4]
 800c210:	dd02      	ble.n	800c218 <__ssvfiscanf_r+0x28c>
 800c212:	3301      	adds	r3, #1
 800c214:	6023      	str	r3, [r4, #0]
 800c216:	e7ad      	b.n	800c174 <__ssvfiscanf_r+0x1e8>
 800c218:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c21a:	4621      	mov	r1, r4
 800c21c:	4630      	mov	r0, r6
 800c21e:	4798      	blx	r3
 800c220:	2800      	cmp	r0, #0
 800c222:	d0a7      	beq.n	800c174 <__ssvfiscanf_r+0x1e8>
 800c224:	e78a      	b.n	800c13c <__ssvfiscanf_r+0x1b0>
 800c226:	2b04      	cmp	r3, #4
 800c228:	dc0e      	bgt.n	800c248 <__ssvfiscanf_r+0x2bc>
 800c22a:	466b      	mov	r3, sp
 800c22c:	4622      	mov	r2, r4
 800c22e:	a941      	add	r1, sp, #260	; 0x104
 800c230:	4630      	mov	r0, r6
 800c232:	f000 fa11 	bl	800c658 <_scanf_i>
 800c236:	e7ab      	b.n	800c190 <__ssvfiscanf_r+0x204>
 800c238:	0800bed9 	.word	0x0800bed9
 800c23c:	0800bf53 	.word	0x0800bf53
 800c240:	0800d873 	.word	0x0800d873
 800c244:	0800d82a 	.word	0x0800d82a
 800c248:	4b0b      	ldr	r3, [pc, #44]	; (800c278 <__ssvfiscanf_r+0x2ec>)
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	f43f aec5 	beq.w	800bfda <__ssvfiscanf_r+0x4e>
 800c250:	466b      	mov	r3, sp
 800c252:	4622      	mov	r2, r4
 800c254:	a941      	add	r1, sp, #260	; 0x104
 800c256:	4630      	mov	r0, r6
 800c258:	f3af 8000 	nop.w
 800c25c:	e798      	b.n	800c190 <__ssvfiscanf_r+0x204>
 800c25e:	89a3      	ldrh	r3, [r4, #12]
 800c260:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c264:	bf18      	it	ne
 800c266:	f04f 30ff 	movne.w	r0, #4294967295
 800c26a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800c26e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c272:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c274:	e7f9      	b.n	800c26a <__ssvfiscanf_r+0x2de>
 800c276:	bf00      	nop
 800c278:	00000000 	.word	0x00000000

0800c27c <_printf_common>:
 800c27c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c280:	4616      	mov	r6, r2
 800c282:	4699      	mov	r9, r3
 800c284:	688a      	ldr	r2, [r1, #8]
 800c286:	690b      	ldr	r3, [r1, #16]
 800c288:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c28c:	4293      	cmp	r3, r2
 800c28e:	bfb8      	it	lt
 800c290:	4613      	movlt	r3, r2
 800c292:	6033      	str	r3, [r6, #0]
 800c294:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c298:	4607      	mov	r7, r0
 800c29a:	460c      	mov	r4, r1
 800c29c:	b10a      	cbz	r2, 800c2a2 <_printf_common+0x26>
 800c29e:	3301      	adds	r3, #1
 800c2a0:	6033      	str	r3, [r6, #0]
 800c2a2:	6823      	ldr	r3, [r4, #0]
 800c2a4:	0699      	lsls	r1, r3, #26
 800c2a6:	bf42      	ittt	mi
 800c2a8:	6833      	ldrmi	r3, [r6, #0]
 800c2aa:	3302      	addmi	r3, #2
 800c2ac:	6033      	strmi	r3, [r6, #0]
 800c2ae:	6825      	ldr	r5, [r4, #0]
 800c2b0:	f015 0506 	ands.w	r5, r5, #6
 800c2b4:	d106      	bne.n	800c2c4 <_printf_common+0x48>
 800c2b6:	f104 0a19 	add.w	sl, r4, #25
 800c2ba:	68e3      	ldr	r3, [r4, #12]
 800c2bc:	6832      	ldr	r2, [r6, #0]
 800c2be:	1a9b      	subs	r3, r3, r2
 800c2c0:	42ab      	cmp	r3, r5
 800c2c2:	dc26      	bgt.n	800c312 <_printf_common+0x96>
 800c2c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c2c8:	1e13      	subs	r3, r2, #0
 800c2ca:	6822      	ldr	r2, [r4, #0]
 800c2cc:	bf18      	it	ne
 800c2ce:	2301      	movne	r3, #1
 800c2d0:	0692      	lsls	r2, r2, #26
 800c2d2:	d42b      	bmi.n	800c32c <_printf_common+0xb0>
 800c2d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c2d8:	4649      	mov	r1, r9
 800c2da:	4638      	mov	r0, r7
 800c2dc:	47c0      	blx	r8
 800c2de:	3001      	adds	r0, #1
 800c2e0:	d01e      	beq.n	800c320 <_printf_common+0xa4>
 800c2e2:	6823      	ldr	r3, [r4, #0]
 800c2e4:	68e5      	ldr	r5, [r4, #12]
 800c2e6:	6832      	ldr	r2, [r6, #0]
 800c2e8:	f003 0306 	and.w	r3, r3, #6
 800c2ec:	2b04      	cmp	r3, #4
 800c2ee:	bf08      	it	eq
 800c2f0:	1aad      	subeq	r5, r5, r2
 800c2f2:	68a3      	ldr	r3, [r4, #8]
 800c2f4:	6922      	ldr	r2, [r4, #16]
 800c2f6:	bf0c      	ite	eq
 800c2f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c2fc:	2500      	movne	r5, #0
 800c2fe:	4293      	cmp	r3, r2
 800c300:	bfc4      	itt	gt
 800c302:	1a9b      	subgt	r3, r3, r2
 800c304:	18ed      	addgt	r5, r5, r3
 800c306:	2600      	movs	r6, #0
 800c308:	341a      	adds	r4, #26
 800c30a:	42b5      	cmp	r5, r6
 800c30c:	d11a      	bne.n	800c344 <_printf_common+0xc8>
 800c30e:	2000      	movs	r0, #0
 800c310:	e008      	b.n	800c324 <_printf_common+0xa8>
 800c312:	2301      	movs	r3, #1
 800c314:	4652      	mov	r2, sl
 800c316:	4649      	mov	r1, r9
 800c318:	4638      	mov	r0, r7
 800c31a:	47c0      	blx	r8
 800c31c:	3001      	adds	r0, #1
 800c31e:	d103      	bne.n	800c328 <_printf_common+0xac>
 800c320:	f04f 30ff 	mov.w	r0, #4294967295
 800c324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c328:	3501      	adds	r5, #1
 800c32a:	e7c6      	b.n	800c2ba <_printf_common+0x3e>
 800c32c:	18e1      	adds	r1, r4, r3
 800c32e:	1c5a      	adds	r2, r3, #1
 800c330:	2030      	movs	r0, #48	; 0x30
 800c332:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c336:	4422      	add	r2, r4
 800c338:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c33c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c340:	3302      	adds	r3, #2
 800c342:	e7c7      	b.n	800c2d4 <_printf_common+0x58>
 800c344:	2301      	movs	r3, #1
 800c346:	4622      	mov	r2, r4
 800c348:	4649      	mov	r1, r9
 800c34a:	4638      	mov	r0, r7
 800c34c:	47c0      	blx	r8
 800c34e:	3001      	adds	r0, #1
 800c350:	d0e6      	beq.n	800c320 <_printf_common+0xa4>
 800c352:	3601      	adds	r6, #1
 800c354:	e7d9      	b.n	800c30a <_printf_common+0x8e>
	...

0800c358 <_printf_i>:
 800c358:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c35c:	7e0f      	ldrb	r7, [r1, #24]
 800c35e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c360:	2f78      	cmp	r7, #120	; 0x78
 800c362:	4691      	mov	r9, r2
 800c364:	4680      	mov	r8, r0
 800c366:	460c      	mov	r4, r1
 800c368:	469a      	mov	sl, r3
 800c36a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c36e:	d807      	bhi.n	800c380 <_printf_i+0x28>
 800c370:	2f62      	cmp	r7, #98	; 0x62
 800c372:	d80a      	bhi.n	800c38a <_printf_i+0x32>
 800c374:	2f00      	cmp	r7, #0
 800c376:	f000 80d8 	beq.w	800c52a <_printf_i+0x1d2>
 800c37a:	2f58      	cmp	r7, #88	; 0x58
 800c37c:	f000 80a3 	beq.w	800c4c6 <_printf_i+0x16e>
 800c380:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c384:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c388:	e03a      	b.n	800c400 <_printf_i+0xa8>
 800c38a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c38e:	2b15      	cmp	r3, #21
 800c390:	d8f6      	bhi.n	800c380 <_printf_i+0x28>
 800c392:	a101      	add	r1, pc, #4	; (adr r1, 800c398 <_printf_i+0x40>)
 800c394:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c398:	0800c3f1 	.word	0x0800c3f1
 800c39c:	0800c405 	.word	0x0800c405
 800c3a0:	0800c381 	.word	0x0800c381
 800c3a4:	0800c381 	.word	0x0800c381
 800c3a8:	0800c381 	.word	0x0800c381
 800c3ac:	0800c381 	.word	0x0800c381
 800c3b0:	0800c405 	.word	0x0800c405
 800c3b4:	0800c381 	.word	0x0800c381
 800c3b8:	0800c381 	.word	0x0800c381
 800c3bc:	0800c381 	.word	0x0800c381
 800c3c0:	0800c381 	.word	0x0800c381
 800c3c4:	0800c511 	.word	0x0800c511
 800c3c8:	0800c435 	.word	0x0800c435
 800c3cc:	0800c4f3 	.word	0x0800c4f3
 800c3d0:	0800c381 	.word	0x0800c381
 800c3d4:	0800c381 	.word	0x0800c381
 800c3d8:	0800c533 	.word	0x0800c533
 800c3dc:	0800c381 	.word	0x0800c381
 800c3e0:	0800c435 	.word	0x0800c435
 800c3e4:	0800c381 	.word	0x0800c381
 800c3e8:	0800c381 	.word	0x0800c381
 800c3ec:	0800c4fb 	.word	0x0800c4fb
 800c3f0:	682b      	ldr	r3, [r5, #0]
 800c3f2:	1d1a      	adds	r2, r3, #4
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	602a      	str	r2, [r5, #0]
 800c3f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c3fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c400:	2301      	movs	r3, #1
 800c402:	e0a3      	b.n	800c54c <_printf_i+0x1f4>
 800c404:	6820      	ldr	r0, [r4, #0]
 800c406:	6829      	ldr	r1, [r5, #0]
 800c408:	0606      	lsls	r6, r0, #24
 800c40a:	f101 0304 	add.w	r3, r1, #4
 800c40e:	d50a      	bpl.n	800c426 <_printf_i+0xce>
 800c410:	680e      	ldr	r6, [r1, #0]
 800c412:	602b      	str	r3, [r5, #0]
 800c414:	2e00      	cmp	r6, #0
 800c416:	da03      	bge.n	800c420 <_printf_i+0xc8>
 800c418:	232d      	movs	r3, #45	; 0x2d
 800c41a:	4276      	negs	r6, r6
 800c41c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c420:	485e      	ldr	r0, [pc, #376]	; (800c59c <_printf_i+0x244>)
 800c422:	230a      	movs	r3, #10
 800c424:	e019      	b.n	800c45a <_printf_i+0x102>
 800c426:	680e      	ldr	r6, [r1, #0]
 800c428:	602b      	str	r3, [r5, #0]
 800c42a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c42e:	bf18      	it	ne
 800c430:	b236      	sxthne	r6, r6
 800c432:	e7ef      	b.n	800c414 <_printf_i+0xbc>
 800c434:	682b      	ldr	r3, [r5, #0]
 800c436:	6820      	ldr	r0, [r4, #0]
 800c438:	1d19      	adds	r1, r3, #4
 800c43a:	6029      	str	r1, [r5, #0]
 800c43c:	0601      	lsls	r1, r0, #24
 800c43e:	d501      	bpl.n	800c444 <_printf_i+0xec>
 800c440:	681e      	ldr	r6, [r3, #0]
 800c442:	e002      	b.n	800c44a <_printf_i+0xf2>
 800c444:	0646      	lsls	r6, r0, #25
 800c446:	d5fb      	bpl.n	800c440 <_printf_i+0xe8>
 800c448:	881e      	ldrh	r6, [r3, #0]
 800c44a:	4854      	ldr	r0, [pc, #336]	; (800c59c <_printf_i+0x244>)
 800c44c:	2f6f      	cmp	r7, #111	; 0x6f
 800c44e:	bf0c      	ite	eq
 800c450:	2308      	moveq	r3, #8
 800c452:	230a      	movne	r3, #10
 800c454:	2100      	movs	r1, #0
 800c456:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c45a:	6865      	ldr	r5, [r4, #4]
 800c45c:	60a5      	str	r5, [r4, #8]
 800c45e:	2d00      	cmp	r5, #0
 800c460:	bfa2      	ittt	ge
 800c462:	6821      	ldrge	r1, [r4, #0]
 800c464:	f021 0104 	bicge.w	r1, r1, #4
 800c468:	6021      	strge	r1, [r4, #0]
 800c46a:	b90e      	cbnz	r6, 800c470 <_printf_i+0x118>
 800c46c:	2d00      	cmp	r5, #0
 800c46e:	d04d      	beq.n	800c50c <_printf_i+0x1b4>
 800c470:	4615      	mov	r5, r2
 800c472:	fbb6 f1f3 	udiv	r1, r6, r3
 800c476:	fb03 6711 	mls	r7, r3, r1, r6
 800c47a:	5dc7      	ldrb	r7, [r0, r7]
 800c47c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c480:	4637      	mov	r7, r6
 800c482:	42bb      	cmp	r3, r7
 800c484:	460e      	mov	r6, r1
 800c486:	d9f4      	bls.n	800c472 <_printf_i+0x11a>
 800c488:	2b08      	cmp	r3, #8
 800c48a:	d10b      	bne.n	800c4a4 <_printf_i+0x14c>
 800c48c:	6823      	ldr	r3, [r4, #0]
 800c48e:	07de      	lsls	r6, r3, #31
 800c490:	d508      	bpl.n	800c4a4 <_printf_i+0x14c>
 800c492:	6923      	ldr	r3, [r4, #16]
 800c494:	6861      	ldr	r1, [r4, #4]
 800c496:	4299      	cmp	r1, r3
 800c498:	bfde      	ittt	le
 800c49a:	2330      	movle	r3, #48	; 0x30
 800c49c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c4a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c4a4:	1b52      	subs	r2, r2, r5
 800c4a6:	6122      	str	r2, [r4, #16]
 800c4a8:	f8cd a000 	str.w	sl, [sp]
 800c4ac:	464b      	mov	r3, r9
 800c4ae:	aa03      	add	r2, sp, #12
 800c4b0:	4621      	mov	r1, r4
 800c4b2:	4640      	mov	r0, r8
 800c4b4:	f7ff fee2 	bl	800c27c <_printf_common>
 800c4b8:	3001      	adds	r0, #1
 800c4ba:	d14c      	bne.n	800c556 <_printf_i+0x1fe>
 800c4bc:	f04f 30ff 	mov.w	r0, #4294967295
 800c4c0:	b004      	add	sp, #16
 800c4c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4c6:	4835      	ldr	r0, [pc, #212]	; (800c59c <_printf_i+0x244>)
 800c4c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c4cc:	6829      	ldr	r1, [r5, #0]
 800c4ce:	6823      	ldr	r3, [r4, #0]
 800c4d0:	f851 6b04 	ldr.w	r6, [r1], #4
 800c4d4:	6029      	str	r1, [r5, #0]
 800c4d6:	061d      	lsls	r5, r3, #24
 800c4d8:	d514      	bpl.n	800c504 <_printf_i+0x1ac>
 800c4da:	07df      	lsls	r7, r3, #31
 800c4dc:	bf44      	itt	mi
 800c4de:	f043 0320 	orrmi.w	r3, r3, #32
 800c4e2:	6023      	strmi	r3, [r4, #0]
 800c4e4:	b91e      	cbnz	r6, 800c4ee <_printf_i+0x196>
 800c4e6:	6823      	ldr	r3, [r4, #0]
 800c4e8:	f023 0320 	bic.w	r3, r3, #32
 800c4ec:	6023      	str	r3, [r4, #0]
 800c4ee:	2310      	movs	r3, #16
 800c4f0:	e7b0      	b.n	800c454 <_printf_i+0xfc>
 800c4f2:	6823      	ldr	r3, [r4, #0]
 800c4f4:	f043 0320 	orr.w	r3, r3, #32
 800c4f8:	6023      	str	r3, [r4, #0]
 800c4fa:	2378      	movs	r3, #120	; 0x78
 800c4fc:	4828      	ldr	r0, [pc, #160]	; (800c5a0 <_printf_i+0x248>)
 800c4fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c502:	e7e3      	b.n	800c4cc <_printf_i+0x174>
 800c504:	0659      	lsls	r1, r3, #25
 800c506:	bf48      	it	mi
 800c508:	b2b6      	uxthmi	r6, r6
 800c50a:	e7e6      	b.n	800c4da <_printf_i+0x182>
 800c50c:	4615      	mov	r5, r2
 800c50e:	e7bb      	b.n	800c488 <_printf_i+0x130>
 800c510:	682b      	ldr	r3, [r5, #0]
 800c512:	6826      	ldr	r6, [r4, #0]
 800c514:	6961      	ldr	r1, [r4, #20]
 800c516:	1d18      	adds	r0, r3, #4
 800c518:	6028      	str	r0, [r5, #0]
 800c51a:	0635      	lsls	r5, r6, #24
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	d501      	bpl.n	800c524 <_printf_i+0x1cc>
 800c520:	6019      	str	r1, [r3, #0]
 800c522:	e002      	b.n	800c52a <_printf_i+0x1d2>
 800c524:	0670      	lsls	r0, r6, #25
 800c526:	d5fb      	bpl.n	800c520 <_printf_i+0x1c8>
 800c528:	8019      	strh	r1, [r3, #0]
 800c52a:	2300      	movs	r3, #0
 800c52c:	6123      	str	r3, [r4, #16]
 800c52e:	4615      	mov	r5, r2
 800c530:	e7ba      	b.n	800c4a8 <_printf_i+0x150>
 800c532:	682b      	ldr	r3, [r5, #0]
 800c534:	1d1a      	adds	r2, r3, #4
 800c536:	602a      	str	r2, [r5, #0]
 800c538:	681d      	ldr	r5, [r3, #0]
 800c53a:	6862      	ldr	r2, [r4, #4]
 800c53c:	2100      	movs	r1, #0
 800c53e:	4628      	mov	r0, r5
 800c540:	f7f3 fe6e 	bl	8000220 <memchr>
 800c544:	b108      	cbz	r0, 800c54a <_printf_i+0x1f2>
 800c546:	1b40      	subs	r0, r0, r5
 800c548:	6060      	str	r0, [r4, #4]
 800c54a:	6863      	ldr	r3, [r4, #4]
 800c54c:	6123      	str	r3, [r4, #16]
 800c54e:	2300      	movs	r3, #0
 800c550:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c554:	e7a8      	b.n	800c4a8 <_printf_i+0x150>
 800c556:	6923      	ldr	r3, [r4, #16]
 800c558:	462a      	mov	r2, r5
 800c55a:	4649      	mov	r1, r9
 800c55c:	4640      	mov	r0, r8
 800c55e:	47d0      	blx	sl
 800c560:	3001      	adds	r0, #1
 800c562:	d0ab      	beq.n	800c4bc <_printf_i+0x164>
 800c564:	6823      	ldr	r3, [r4, #0]
 800c566:	079b      	lsls	r3, r3, #30
 800c568:	d413      	bmi.n	800c592 <_printf_i+0x23a>
 800c56a:	68e0      	ldr	r0, [r4, #12]
 800c56c:	9b03      	ldr	r3, [sp, #12]
 800c56e:	4298      	cmp	r0, r3
 800c570:	bfb8      	it	lt
 800c572:	4618      	movlt	r0, r3
 800c574:	e7a4      	b.n	800c4c0 <_printf_i+0x168>
 800c576:	2301      	movs	r3, #1
 800c578:	4632      	mov	r2, r6
 800c57a:	4649      	mov	r1, r9
 800c57c:	4640      	mov	r0, r8
 800c57e:	47d0      	blx	sl
 800c580:	3001      	adds	r0, #1
 800c582:	d09b      	beq.n	800c4bc <_printf_i+0x164>
 800c584:	3501      	adds	r5, #1
 800c586:	68e3      	ldr	r3, [r4, #12]
 800c588:	9903      	ldr	r1, [sp, #12]
 800c58a:	1a5b      	subs	r3, r3, r1
 800c58c:	42ab      	cmp	r3, r5
 800c58e:	dcf2      	bgt.n	800c576 <_printf_i+0x21e>
 800c590:	e7eb      	b.n	800c56a <_printf_i+0x212>
 800c592:	2500      	movs	r5, #0
 800c594:	f104 0619 	add.w	r6, r4, #25
 800c598:	e7f5      	b.n	800c586 <_printf_i+0x22e>
 800c59a:	bf00      	nop
 800c59c:	0800d835 	.word	0x0800d835
 800c5a0:	0800d846 	.word	0x0800d846

0800c5a4 <_scanf_chars>:
 800c5a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5a8:	4615      	mov	r5, r2
 800c5aa:	688a      	ldr	r2, [r1, #8]
 800c5ac:	4680      	mov	r8, r0
 800c5ae:	460c      	mov	r4, r1
 800c5b0:	b932      	cbnz	r2, 800c5c0 <_scanf_chars+0x1c>
 800c5b2:	698a      	ldr	r2, [r1, #24]
 800c5b4:	2a00      	cmp	r2, #0
 800c5b6:	bf0c      	ite	eq
 800c5b8:	2201      	moveq	r2, #1
 800c5ba:	f04f 32ff 	movne.w	r2, #4294967295
 800c5be:	608a      	str	r2, [r1, #8]
 800c5c0:	6822      	ldr	r2, [r4, #0]
 800c5c2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800c654 <_scanf_chars+0xb0>
 800c5c6:	06d1      	lsls	r1, r2, #27
 800c5c8:	bf5f      	itttt	pl
 800c5ca:	681a      	ldrpl	r2, [r3, #0]
 800c5cc:	1d11      	addpl	r1, r2, #4
 800c5ce:	6019      	strpl	r1, [r3, #0]
 800c5d0:	6816      	ldrpl	r6, [r2, #0]
 800c5d2:	2700      	movs	r7, #0
 800c5d4:	69a0      	ldr	r0, [r4, #24]
 800c5d6:	b188      	cbz	r0, 800c5fc <_scanf_chars+0x58>
 800c5d8:	2801      	cmp	r0, #1
 800c5da:	d107      	bne.n	800c5ec <_scanf_chars+0x48>
 800c5dc:	682a      	ldr	r2, [r5, #0]
 800c5de:	7811      	ldrb	r1, [r2, #0]
 800c5e0:	6962      	ldr	r2, [r4, #20]
 800c5e2:	5c52      	ldrb	r2, [r2, r1]
 800c5e4:	b952      	cbnz	r2, 800c5fc <_scanf_chars+0x58>
 800c5e6:	2f00      	cmp	r7, #0
 800c5e8:	d031      	beq.n	800c64e <_scanf_chars+0xaa>
 800c5ea:	e022      	b.n	800c632 <_scanf_chars+0x8e>
 800c5ec:	2802      	cmp	r0, #2
 800c5ee:	d120      	bne.n	800c632 <_scanf_chars+0x8e>
 800c5f0:	682b      	ldr	r3, [r5, #0]
 800c5f2:	781b      	ldrb	r3, [r3, #0]
 800c5f4:	f813 3009 	ldrb.w	r3, [r3, r9]
 800c5f8:	071b      	lsls	r3, r3, #28
 800c5fa:	d41a      	bmi.n	800c632 <_scanf_chars+0x8e>
 800c5fc:	6823      	ldr	r3, [r4, #0]
 800c5fe:	06da      	lsls	r2, r3, #27
 800c600:	bf5e      	ittt	pl
 800c602:	682b      	ldrpl	r3, [r5, #0]
 800c604:	781b      	ldrbpl	r3, [r3, #0]
 800c606:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c60a:	682a      	ldr	r2, [r5, #0]
 800c60c:	686b      	ldr	r3, [r5, #4]
 800c60e:	3201      	adds	r2, #1
 800c610:	602a      	str	r2, [r5, #0]
 800c612:	68a2      	ldr	r2, [r4, #8]
 800c614:	3b01      	subs	r3, #1
 800c616:	3a01      	subs	r2, #1
 800c618:	606b      	str	r3, [r5, #4]
 800c61a:	3701      	adds	r7, #1
 800c61c:	60a2      	str	r2, [r4, #8]
 800c61e:	b142      	cbz	r2, 800c632 <_scanf_chars+0x8e>
 800c620:	2b00      	cmp	r3, #0
 800c622:	dcd7      	bgt.n	800c5d4 <_scanf_chars+0x30>
 800c624:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c628:	4629      	mov	r1, r5
 800c62a:	4640      	mov	r0, r8
 800c62c:	4798      	blx	r3
 800c62e:	2800      	cmp	r0, #0
 800c630:	d0d0      	beq.n	800c5d4 <_scanf_chars+0x30>
 800c632:	6823      	ldr	r3, [r4, #0]
 800c634:	f013 0310 	ands.w	r3, r3, #16
 800c638:	d105      	bne.n	800c646 <_scanf_chars+0xa2>
 800c63a:	68e2      	ldr	r2, [r4, #12]
 800c63c:	3201      	adds	r2, #1
 800c63e:	60e2      	str	r2, [r4, #12]
 800c640:	69a2      	ldr	r2, [r4, #24]
 800c642:	b102      	cbz	r2, 800c646 <_scanf_chars+0xa2>
 800c644:	7033      	strb	r3, [r6, #0]
 800c646:	6923      	ldr	r3, [r4, #16]
 800c648:	443b      	add	r3, r7
 800c64a:	6123      	str	r3, [r4, #16]
 800c64c:	2000      	movs	r0, #0
 800c64e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c652:	bf00      	nop
 800c654:	0800d873 	.word	0x0800d873

0800c658 <_scanf_i>:
 800c658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c65c:	4698      	mov	r8, r3
 800c65e:	4b76      	ldr	r3, [pc, #472]	; (800c838 <_scanf_i+0x1e0>)
 800c660:	460c      	mov	r4, r1
 800c662:	4682      	mov	sl, r0
 800c664:	4616      	mov	r6, r2
 800c666:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c66a:	b087      	sub	sp, #28
 800c66c:	ab03      	add	r3, sp, #12
 800c66e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c672:	4b72      	ldr	r3, [pc, #456]	; (800c83c <_scanf_i+0x1e4>)
 800c674:	69a1      	ldr	r1, [r4, #24]
 800c676:	4a72      	ldr	r2, [pc, #456]	; (800c840 <_scanf_i+0x1e8>)
 800c678:	2903      	cmp	r1, #3
 800c67a:	bf18      	it	ne
 800c67c:	461a      	movne	r2, r3
 800c67e:	68a3      	ldr	r3, [r4, #8]
 800c680:	9201      	str	r2, [sp, #4]
 800c682:	1e5a      	subs	r2, r3, #1
 800c684:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c688:	bf88      	it	hi
 800c68a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c68e:	4627      	mov	r7, r4
 800c690:	bf82      	ittt	hi
 800c692:	eb03 0905 	addhi.w	r9, r3, r5
 800c696:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c69a:	60a3      	strhi	r3, [r4, #8]
 800c69c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c6a0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c6a4:	bf98      	it	ls
 800c6a6:	f04f 0900 	movls.w	r9, #0
 800c6aa:	6023      	str	r3, [r4, #0]
 800c6ac:	463d      	mov	r5, r7
 800c6ae:	f04f 0b00 	mov.w	fp, #0
 800c6b2:	6831      	ldr	r1, [r6, #0]
 800c6b4:	ab03      	add	r3, sp, #12
 800c6b6:	7809      	ldrb	r1, [r1, #0]
 800c6b8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c6bc:	2202      	movs	r2, #2
 800c6be:	f7f3 fdaf 	bl	8000220 <memchr>
 800c6c2:	b328      	cbz	r0, 800c710 <_scanf_i+0xb8>
 800c6c4:	f1bb 0f01 	cmp.w	fp, #1
 800c6c8:	d159      	bne.n	800c77e <_scanf_i+0x126>
 800c6ca:	6862      	ldr	r2, [r4, #4]
 800c6cc:	b92a      	cbnz	r2, 800c6da <_scanf_i+0x82>
 800c6ce:	6822      	ldr	r2, [r4, #0]
 800c6d0:	2308      	movs	r3, #8
 800c6d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c6d6:	6063      	str	r3, [r4, #4]
 800c6d8:	6022      	str	r2, [r4, #0]
 800c6da:	6822      	ldr	r2, [r4, #0]
 800c6dc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c6e0:	6022      	str	r2, [r4, #0]
 800c6e2:	68a2      	ldr	r2, [r4, #8]
 800c6e4:	1e51      	subs	r1, r2, #1
 800c6e6:	60a1      	str	r1, [r4, #8]
 800c6e8:	b192      	cbz	r2, 800c710 <_scanf_i+0xb8>
 800c6ea:	6832      	ldr	r2, [r6, #0]
 800c6ec:	1c51      	adds	r1, r2, #1
 800c6ee:	6031      	str	r1, [r6, #0]
 800c6f0:	7812      	ldrb	r2, [r2, #0]
 800c6f2:	f805 2b01 	strb.w	r2, [r5], #1
 800c6f6:	6872      	ldr	r2, [r6, #4]
 800c6f8:	3a01      	subs	r2, #1
 800c6fa:	2a00      	cmp	r2, #0
 800c6fc:	6072      	str	r2, [r6, #4]
 800c6fe:	dc07      	bgt.n	800c710 <_scanf_i+0xb8>
 800c700:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800c704:	4631      	mov	r1, r6
 800c706:	4650      	mov	r0, sl
 800c708:	4790      	blx	r2
 800c70a:	2800      	cmp	r0, #0
 800c70c:	f040 8085 	bne.w	800c81a <_scanf_i+0x1c2>
 800c710:	f10b 0b01 	add.w	fp, fp, #1
 800c714:	f1bb 0f03 	cmp.w	fp, #3
 800c718:	d1cb      	bne.n	800c6b2 <_scanf_i+0x5a>
 800c71a:	6863      	ldr	r3, [r4, #4]
 800c71c:	b90b      	cbnz	r3, 800c722 <_scanf_i+0xca>
 800c71e:	230a      	movs	r3, #10
 800c720:	6063      	str	r3, [r4, #4]
 800c722:	6863      	ldr	r3, [r4, #4]
 800c724:	4947      	ldr	r1, [pc, #284]	; (800c844 <_scanf_i+0x1ec>)
 800c726:	6960      	ldr	r0, [r4, #20]
 800c728:	1ac9      	subs	r1, r1, r3
 800c72a:	f000 f88d 	bl	800c848 <__sccl>
 800c72e:	f04f 0b00 	mov.w	fp, #0
 800c732:	68a3      	ldr	r3, [r4, #8]
 800c734:	6822      	ldr	r2, [r4, #0]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d03d      	beq.n	800c7b6 <_scanf_i+0x15e>
 800c73a:	6831      	ldr	r1, [r6, #0]
 800c73c:	6960      	ldr	r0, [r4, #20]
 800c73e:	f891 c000 	ldrb.w	ip, [r1]
 800c742:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c746:	2800      	cmp	r0, #0
 800c748:	d035      	beq.n	800c7b6 <_scanf_i+0x15e>
 800c74a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800c74e:	d124      	bne.n	800c79a <_scanf_i+0x142>
 800c750:	0510      	lsls	r0, r2, #20
 800c752:	d522      	bpl.n	800c79a <_scanf_i+0x142>
 800c754:	f10b 0b01 	add.w	fp, fp, #1
 800c758:	f1b9 0f00 	cmp.w	r9, #0
 800c75c:	d003      	beq.n	800c766 <_scanf_i+0x10e>
 800c75e:	3301      	adds	r3, #1
 800c760:	f109 39ff 	add.w	r9, r9, #4294967295
 800c764:	60a3      	str	r3, [r4, #8]
 800c766:	6873      	ldr	r3, [r6, #4]
 800c768:	3b01      	subs	r3, #1
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	6073      	str	r3, [r6, #4]
 800c76e:	dd1b      	ble.n	800c7a8 <_scanf_i+0x150>
 800c770:	6833      	ldr	r3, [r6, #0]
 800c772:	3301      	adds	r3, #1
 800c774:	6033      	str	r3, [r6, #0]
 800c776:	68a3      	ldr	r3, [r4, #8]
 800c778:	3b01      	subs	r3, #1
 800c77a:	60a3      	str	r3, [r4, #8]
 800c77c:	e7d9      	b.n	800c732 <_scanf_i+0xda>
 800c77e:	f1bb 0f02 	cmp.w	fp, #2
 800c782:	d1ae      	bne.n	800c6e2 <_scanf_i+0x8a>
 800c784:	6822      	ldr	r2, [r4, #0]
 800c786:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c78a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c78e:	d1bf      	bne.n	800c710 <_scanf_i+0xb8>
 800c790:	2310      	movs	r3, #16
 800c792:	6063      	str	r3, [r4, #4]
 800c794:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c798:	e7a2      	b.n	800c6e0 <_scanf_i+0x88>
 800c79a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800c79e:	6022      	str	r2, [r4, #0]
 800c7a0:	780b      	ldrb	r3, [r1, #0]
 800c7a2:	f805 3b01 	strb.w	r3, [r5], #1
 800c7a6:	e7de      	b.n	800c766 <_scanf_i+0x10e>
 800c7a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c7ac:	4631      	mov	r1, r6
 800c7ae:	4650      	mov	r0, sl
 800c7b0:	4798      	blx	r3
 800c7b2:	2800      	cmp	r0, #0
 800c7b4:	d0df      	beq.n	800c776 <_scanf_i+0x11e>
 800c7b6:	6823      	ldr	r3, [r4, #0]
 800c7b8:	05db      	lsls	r3, r3, #23
 800c7ba:	d50d      	bpl.n	800c7d8 <_scanf_i+0x180>
 800c7bc:	42bd      	cmp	r5, r7
 800c7be:	d909      	bls.n	800c7d4 <_scanf_i+0x17c>
 800c7c0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c7c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c7c8:	4632      	mov	r2, r6
 800c7ca:	4650      	mov	r0, sl
 800c7cc:	4798      	blx	r3
 800c7ce:	f105 39ff 	add.w	r9, r5, #4294967295
 800c7d2:	464d      	mov	r5, r9
 800c7d4:	42bd      	cmp	r5, r7
 800c7d6:	d02d      	beq.n	800c834 <_scanf_i+0x1dc>
 800c7d8:	6822      	ldr	r2, [r4, #0]
 800c7da:	f012 0210 	ands.w	r2, r2, #16
 800c7de:	d113      	bne.n	800c808 <_scanf_i+0x1b0>
 800c7e0:	702a      	strb	r2, [r5, #0]
 800c7e2:	6863      	ldr	r3, [r4, #4]
 800c7e4:	9e01      	ldr	r6, [sp, #4]
 800c7e6:	4639      	mov	r1, r7
 800c7e8:	4650      	mov	r0, sl
 800c7ea:	47b0      	blx	r6
 800c7ec:	6821      	ldr	r1, [r4, #0]
 800c7ee:	f8d8 3000 	ldr.w	r3, [r8]
 800c7f2:	f011 0f20 	tst.w	r1, #32
 800c7f6:	d013      	beq.n	800c820 <_scanf_i+0x1c8>
 800c7f8:	1d1a      	adds	r2, r3, #4
 800c7fa:	f8c8 2000 	str.w	r2, [r8]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	6018      	str	r0, [r3, #0]
 800c802:	68e3      	ldr	r3, [r4, #12]
 800c804:	3301      	adds	r3, #1
 800c806:	60e3      	str	r3, [r4, #12]
 800c808:	1bed      	subs	r5, r5, r7
 800c80a:	44ab      	add	fp, r5
 800c80c:	6925      	ldr	r5, [r4, #16]
 800c80e:	445d      	add	r5, fp
 800c810:	6125      	str	r5, [r4, #16]
 800c812:	2000      	movs	r0, #0
 800c814:	b007      	add	sp, #28
 800c816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c81a:	f04f 0b00 	mov.w	fp, #0
 800c81e:	e7ca      	b.n	800c7b6 <_scanf_i+0x15e>
 800c820:	1d1a      	adds	r2, r3, #4
 800c822:	f8c8 2000 	str.w	r2, [r8]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	f011 0f01 	tst.w	r1, #1
 800c82c:	bf14      	ite	ne
 800c82e:	8018      	strhne	r0, [r3, #0]
 800c830:	6018      	streq	r0, [r3, #0]
 800c832:	e7e6      	b.n	800c802 <_scanf_i+0x1aa>
 800c834:	2001      	movs	r0, #1
 800c836:	e7ed      	b.n	800c814 <_scanf_i+0x1bc>
 800c838:	0800d61c 	.word	0x0800d61c
 800c83c:	0800caa5 	.word	0x0800caa5
 800c840:	0800c9bd 	.word	0x0800c9bd
 800c844:	0800d870 	.word	0x0800d870

0800c848 <__sccl>:
 800c848:	b570      	push	{r4, r5, r6, lr}
 800c84a:	780b      	ldrb	r3, [r1, #0]
 800c84c:	4604      	mov	r4, r0
 800c84e:	2b5e      	cmp	r3, #94	; 0x5e
 800c850:	bf0b      	itete	eq
 800c852:	784b      	ldrbeq	r3, [r1, #1]
 800c854:	1c48      	addne	r0, r1, #1
 800c856:	1c88      	addeq	r0, r1, #2
 800c858:	2200      	movne	r2, #0
 800c85a:	bf08      	it	eq
 800c85c:	2201      	moveq	r2, #1
 800c85e:	1e61      	subs	r1, r4, #1
 800c860:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800c864:	f801 2f01 	strb.w	r2, [r1, #1]!
 800c868:	42a9      	cmp	r1, r5
 800c86a:	d1fb      	bne.n	800c864 <__sccl+0x1c>
 800c86c:	b90b      	cbnz	r3, 800c872 <__sccl+0x2a>
 800c86e:	3801      	subs	r0, #1
 800c870:	bd70      	pop	{r4, r5, r6, pc}
 800c872:	f082 0201 	eor.w	r2, r2, #1
 800c876:	54e2      	strb	r2, [r4, r3]
 800c878:	4605      	mov	r5, r0
 800c87a:	4628      	mov	r0, r5
 800c87c:	f810 1b01 	ldrb.w	r1, [r0], #1
 800c880:	292d      	cmp	r1, #45	; 0x2d
 800c882:	d006      	beq.n	800c892 <__sccl+0x4a>
 800c884:	295d      	cmp	r1, #93	; 0x5d
 800c886:	d0f3      	beq.n	800c870 <__sccl+0x28>
 800c888:	b909      	cbnz	r1, 800c88e <__sccl+0x46>
 800c88a:	4628      	mov	r0, r5
 800c88c:	e7f0      	b.n	800c870 <__sccl+0x28>
 800c88e:	460b      	mov	r3, r1
 800c890:	e7f1      	b.n	800c876 <__sccl+0x2e>
 800c892:	786e      	ldrb	r6, [r5, #1]
 800c894:	2e5d      	cmp	r6, #93	; 0x5d
 800c896:	d0fa      	beq.n	800c88e <__sccl+0x46>
 800c898:	42b3      	cmp	r3, r6
 800c89a:	dcf8      	bgt.n	800c88e <__sccl+0x46>
 800c89c:	3502      	adds	r5, #2
 800c89e:	4619      	mov	r1, r3
 800c8a0:	3101      	adds	r1, #1
 800c8a2:	428e      	cmp	r6, r1
 800c8a4:	5462      	strb	r2, [r4, r1]
 800c8a6:	dcfb      	bgt.n	800c8a0 <__sccl+0x58>
 800c8a8:	1af1      	subs	r1, r6, r3
 800c8aa:	3901      	subs	r1, #1
 800c8ac:	1c58      	adds	r0, r3, #1
 800c8ae:	42b3      	cmp	r3, r6
 800c8b0:	bfa8      	it	ge
 800c8b2:	2100      	movge	r1, #0
 800c8b4:	1843      	adds	r3, r0, r1
 800c8b6:	e7e0      	b.n	800c87a <__sccl+0x32>

0800c8b8 <_strtol_l.constprop.0>:
 800c8b8:	2b01      	cmp	r3, #1
 800c8ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8be:	d001      	beq.n	800c8c4 <_strtol_l.constprop.0+0xc>
 800c8c0:	2b24      	cmp	r3, #36	; 0x24
 800c8c2:	d906      	bls.n	800c8d2 <_strtol_l.constprop.0+0x1a>
 800c8c4:	f7ff f8ea 	bl	800ba9c <__errno>
 800c8c8:	2316      	movs	r3, #22
 800c8ca:	6003      	str	r3, [r0, #0]
 800c8cc:	2000      	movs	r0, #0
 800c8ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8d2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c9b8 <_strtol_l.constprop.0+0x100>
 800c8d6:	460d      	mov	r5, r1
 800c8d8:	462e      	mov	r6, r5
 800c8da:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c8de:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c8e2:	f017 0708 	ands.w	r7, r7, #8
 800c8e6:	d1f7      	bne.n	800c8d8 <_strtol_l.constprop.0+0x20>
 800c8e8:	2c2d      	cmp	r4, #45	; 0x2d
 800c8ea:	d132      	bne.n	800c952 <_strtol_l.constprop.0+0x9a>
 800c8ec:	782c      	ldrb	r4, [r5, #0]
 800c8ee:	2701      	movs	r7, #1
 800c8f0:	1cb5      	adds	r5, r6, #2
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d05b      	beq.n	800c9ae <_strtol_l.constprop.0+0xf6>
 800c8f6:	2b10      	cmp	r3, #16
 800c8f8:	d109      	bne.n	800c90e <_strtol_l.constprop.0+0x56>
 800c8fa:	2c30      	cmp	r4, #48	; 0x30
 800c8fc:	d107      	bne.n	800c90e <_strtol_l.constprop.0+0x56>
 800c8fe:	782c      	ldrb	r4, [r5, #0]
 800c900:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c904:	2c58      	cmp	r4, #88	; 0x58
 800c906:	d14d      	bne.n	800c9a4 <_strtol_l.constprop.0+0xec>
 800c908:	786c      	ldrb	r4, [r5, #1]
 800c90a:	2310      	movs	r3, #16
 800c90c:	3502      	adds	r5, #2
 800c90e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c912:	f108 38ff 	add.w	r8, r8, #4294967295
 800c916:	f04f 0c00 	mov.w	ip, #0
 800c91a:	fbb8 f9f3 	udiv	r9, r8, r3
 800c91e:	4666      	mov	r6, ip
 800c920:	fb03 8a19 	mls	sl, r3, r9, r8
 800c924:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c928:	f1be 0f09 	cmp.w	lr, #9
 800c92c:	d816      	bhi.n	800c95c <_strtol_l.constprop.0+0xa4>
 800c92e:	4674      	mov	r4, lr
 800c930:	42a3      	cmp	r3, r4
 800c932:	dd24      	ble.n	800c97e <_strtol_l.constprop.0+0xc6>
 800c934:	f1bc 0f00 	cmp.w	ip, #0
 800c938:	db1e      	blt.n	800c978 <_strtol_l.constprop.0+0xc0>
 800c93a:	45b1      	cmp	r9, r6
 800c93c:	d31c      	bcc.n	800c978 <_strtol_l.constprop.0+0xc0>
 800c93e:	d101      	bne.n	800c944 <_strtol_l.constprop.0+0x8c>
 800c940:	45a2      	cmp	sl, r4
 800c942:	db19      	blt.n	800c978 <_strtol_l.constprop.0+0xc0>
 800c944:	fb06 4603 	mla	r6, r6, r3, r4
 800c948:	f04f 0c01 	mov.w	ip, #1
 800c94c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c950:	e7e8      	b.n	800c924 <_strtol_l.constprop.0+0x6c>
 800c952:	2c2b      	cmp	r4, #43	; 0x2b
 800c954:	bf04      	itt	eq
 800c956:	782c      	ldrbeq	r4, [r5, #0]
 800c958:	1cb5      	addeq	r5, r6, #2
 800c95a:	e7ca      	b.n	800c8f2 <_strtol_l.constprop.0+0x3a>
 800c95c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c960:	f1be 0f19 	cmp.w	lr, #25
 800c964:	d801      	bhi.n	800c96a <_strtol_l.constprop.0+0xb2>
 800c966:	3c37      	subs	r4, #55	; 0x37
 800c968:	e7e2      	b.n	800c930 <_strtol_l.constprop.0+0x78>
 800c96a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c96e:	f1be 0f19 	cmp.w	lr, #25
 800c972:	d804      	bhi.n	800c97e <_strtol_l.constprop.0+0xc6>
 800c974:	3c57      	subs	r4, #87	; 0x57
 800c976:	e7db      	b.n	800c930 <_strtol_l.constprop.0+0x78>
 800c978:	f04f 3cff 	mov.w	ip, #4294967295
 800c97c:	e7e6      	b.n	800c94c <_strtol_l.constprop.0+0x94>
 800c97e:	f1bc 0f00 	cmp.w	ip, #0
 800c982:	da05      	bge.n	800c990 <_strtol_l.constprop.0+0xd8>
 800c984:	2322      	movs	r3, #34	; 0x22
 800c986:	6003      	str	r3, [r0, #0]
 800c988:	4646      	mov	r6, r8
 800c98a:	b942      	cbnz	r2, 800c99e <_strtol_l.constprop.0+0xe6>
 800c98c:	4630      	mov	r0, r6
 800c98e:	e79e      	b.n	800c8ce <_strtol_l.constprop.0+0x16>
 800c990:	b107      	cbz	r7, 800c994 <_strtol_l.constprop.0+0xdc>
 800c992:	4276      	negs	r6, r6
 800c994:	2a00      	cmp	r2, #0
 800c996:	d0f9      	beq.n	800c98c <_strtol_l.constprop.0+0xd4>
 800c998:	f1bc 0f00 	cmp.w	ip, #0
 800c99c:	d000      	beq.n	800c9a0 <_strtol_l.constprop.0+0xe8>
 800c99e:	1e69      	subs	r1, r5, #1
 800c9a0:	6011      	str	r1, [r2, #0]
 800c9a2:	e7f3      	b.n	800c98c <_strtol_l.constprop.0+0xd4>
 800c9a4:	2430      	movs	r4, #48	; 0x30
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d1b1      	bne.n	800c90e <_strtol_l.constprop.0+0x56>
 800c9aa:	2308      	movs	r3, #8
 800c9ac:	e7af      	b.n	800c90e <_strtol_l.constprop.0+0x56>
 800c9ae:	2c30      	cmp	r4, #48	; 0x30
 800c9b0:	d0a5      	beq.n	800c8fe <_strtol_l.constprop.0+0x46>
 800c9b2:	230a      	movs	r3, #10
 800c9b4:	e7ab      	b.n	800c90e <_strtol_l.constprop.0+0x56>
 800c9b6:	bf00      	nop
 800c9b8:	0800d873 	.word	0x0800d873

0800c9bc <_strtol_r>:
 800c9bc:	f7ff bf7c 	b.w	800c8b8 <_strtol_l.constprop.0>

0800c9c0 <_strtoul_l.constprop.0>:
 800c9c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c9c4:	4f36      	ldr	r7, [pc, #216]	; (800caa0 <_strtoul_l.constprop.0+0xe0>)
 800c9c6:	4686      	mov	lr, r0
 800c9c8:	460d      	mov	r5, r1
 800c9ca:	4628      	mov	r0, r5
 800c9cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c9d0:	5de6      	ldrb	r6, [r4, r7]
 800c9d2:	f016 0608 	ands.w	r6, r6, #8
 800c9d6:	d1f8      	bne.n	800c9ca <_strtoul_l.constprop.0+0xa>
 800c9d8:	2c2d      	cmp	r4, #45	; 0x2d
 800c9da:	d12f      	bne.n	800ca3c <_strtoul_l.constprop.0+0x7c>
 800c9dc:	782c      	ldrb	r4, [r5, #0]
 800c9de:	2601      	movs	r6, #1
 800c9e0:	1c85      	adds	r5, r0, #2
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d057      	beq.n	800ca96 <_strtoul_l.constprop.0+0xd6>
 800c9e6:	2b10      	cmp	r3, #16
 800c9e8:	d109      	bne.n	800c9fe <_strtoul_l.constprop.0+0x3e>
 800c9ea:	2c30      	cmp	r4, #48	; 0x30
 800c9ec:	d107      	bne.n	800c9fe <_strtoul_l.constprop.0+0x3e>
 800c9ee:	7828      	ldrb	r0, [r5, #0]
 800c9f0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800c9f4:	2858      	cmp	r0, #88	; 0x58
 800c9f6:	d149      	bne.n	800ca8c <_strtoul_l.constprop.0+0xcc>
 800c9f8:	786c      	ldrb	r4, [r5, #1]
 800c9fa:	2310      	movs	r3, #16
 800c9fc:	3502      	adds	r5, #2
 800c9fe:	f04f 38ff 	mov.w	r8, #4294967295
 800ca02:	2700      	movs	r7, #0
 800ca04:	fbb8 f8f3 	udiv	r8, r8, r3
 800ca08:	fb03 f908 	mul.w	r9, r3, r8
 800ca0c:	ea6f 0909 	mvn.w	r9, r9
 800ca10:	4638      	mov	r0, r7
 800ca12:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ca16:	f1bc 0f09 	cmp.w	ip, #9
 800ca1a:	d814      	bhi.n	800ca46 <_strtoul_l.constprop.0+0x86>
 800ca1c:	4664      	mov	r4, ip
 800ca1e:	42a3      	cmp	r3, r4
 800ca20:	dd22      	ble.n	800ca68 <_strtoul_l.constprop.0+0xa8>
 800ca22:	2f00      	cmp	r7, #0
 800ca24:	db1d      	blt.n	800ca62 <_strtoul_l.constprop.0+0xa2>
 800ca26:	4580      	cmp	r8, r0
 800ca28:	d31b      	bcc.n	800ca62 <_strtoul_l.constprop.0+0xa2>
 800ca2a:	d101      	bne.n	800ca30 <_strtoul_l.constprop.0+0x70>
 800ca2c:	45a1      	cmp	r9, r4
 800ca2e:	db18      	blt.n	800ca62 <_strtoul_l.constprop.0+0xa2>
 800ca30:	fb00 4003 	mla	r0, r0, r3, r4
 800ca34:	2701      	movs	r7, #1
 800ca36:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ca3a:	e7ea      	b.n	800ca12 <_strtoul_l.constprop.0+0x52>
 800ca3c:	2c2b      	cmp	r4, #43	; 0x2b
 800ca3e:	bf04      	itt	eq
 800ca40:	782c      	ldrbeq	r4, [r5, #0]
 800ca42:	1c85      	addeq	r5, r0, #2
 800ca44:	e7cd      	b.n	800c9e2 <_strtoul_l.constprop.0+0x22>
 800ca46:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ca4a:	f1bc 0f19 	cmp.w	ip, #25
 800ca4e:	d801      	bhi.n	800ca54 <_strtoul_l.constprop.0+0x94>
 800ca50:	3c37      	subs	r4, #55	; 0x37
 800ca52:	e7e4      	b.n	800ca1e <_strtoul_l.constprop.0+0x5e>
 800ca54:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ca58:	f1bc 0f19 	cmp.w	ip, #25
 800ca5c:	d804      	bhi.n	800ca68 <_strtoul_l.constprop.0+0xa8>
 800ca5e:	3c57      	subs	r4, #87	; 0x57
 800ca60:	e7dd      	b.n	800ca1e <_strtoul_l.constprop.0+0x5e>
 800ca62:	f04f 37ff 	mov.w	r7, #4294967295
 800ca66:	e7e6      	b.n	800ca36 <_strtoul_l.constprop.0+0x76>
 800ca68:	2f00      	cmp	r7, #0
 800ca6a:	da07      	bge.n	800ca7c <_strtoul_l.constprop.0+0xbc>
 800ca6c:	2322      	movs	r3, #34	; 0x22
 800ca6e:	f8ce 3000 	str.w	r3, [lr]
 800ca72:	f04f 30ff 	mov.w	r0, #4294967295
 800ca76:	b932      	cbnz	r2, 800ca86 <_strtoul_l.constprop.0+0xc6>
 800ca78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca7c:	b106      	cbz	r6, 800ca80 <_strtoul_l.constprop.0+0xc0>
 800ca7e:	4240      	negs	r0, r0
 800ca80:	2a00      	cmp	r2, #0
 800ca82:	d0f9      	beq.n	800ca78 <_strtoul_l.constprop.0+0xb8>
 800ca84:	b107      	cbz	r7, 800ca88 <_strtoul_l.constprop.0+0xc8>
 800ca86:	1e69      	subs	r1, r5, #1
 800ca88:	6011      	str	r1, [r2, #0]
 800ca8a:	e7f5      	b.n	800ca78 <_strtoul_l.constprop.0+0xb8>
 800ca8c:	2430      	movs	r4, #48	; 0x30
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d1b5      	bne.n	800c9fe <_strtoul_l.constprop.0+0x3e>
 800ca92:	2308      	movs	r3, #8
 800ca94:	e7b3      	b.n	800c9fe <_strtoul_l.constprop.0+0x3e>
 800ca96:	2c30      	cmp	r4, #48	; 0x30
 800ca98:	d0a9      	beq.n	800c9ee <_strtoul_l.constprop.0+0x2e>
 800ca9a:	230a      	movs	r3, #10
 800ca9c:	e7af      	b.n	800c9fe <_strtoul_l.constprop.0+0x3e>
 800ca9e:	bf00      	nop
 800caa0:	0800d873 	.word	0x0800d873

0800caa4 <_strtoul_r>:
 800caa4:	f7ff bf8c 	b.w	800c9c0 <_strtoul_l.constprop.0>

0800caa8 <__submore>:
 800caa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800caac:	460c      	mov	r4, r1
 800caae:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800cab0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cab4:	4299      	cmp	r1, r3
 800cab6:	d11d      	bne.n	800caf4 <__submore+0x4c>
 800cab8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800cabc:	f000 f8b6 	bl	800cc2c <_malloc_r>
 800cac0:	b918      	cbnz	r0, 800caca <__submore+0x22>
 800cac2:	f04f 30ff 	mov.w	r0, #4294967295
 800cac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800caca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cace:	63a3      	str	r3, [r4, #56]	; 0x38
 800cad0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800cad4:	6360      	str	r0, [r4, #52]	; 0x34
 800cad6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800cada:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800cade:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800cae2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800cae6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800caea:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800caee:	6020      	str	r0, [r4, #0]
 800caf0:	2000      	movs	r0, #0
 800caf2:	e7e8      	b.n	800cac6 <__submore+0x1e>
 800caf4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800caf6:	0077      	lsls	r7, r6, #1
 800caf8:	463a      	mov	r2, r7
 800cafa:	f000 f90b 	bl	800cd14 <_realloc_r>
 800cafe:	4605      	mov	r5, r0
 800cb00:	2800      	cmp	r0, #0
 800cb02:	d0de      	beq.n	800cac2 <__submore+0x1a>
 800cb04:	eb00 0806 	add.w	r8, r0, r6
 800cb08:	4601      	mov	r1, r0
 800cb0a:	4632      	mov	r2, r6
 800cb0c:	4640      	mov	r0, r8
 800cb0e:	f7fe ffef 	bl	800baf0 <memcpy>
 800cb12:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800cb16:	f8c4 8000 	str.w	r8, [r4]
 800cb1a:	e7e9      	b.n	800caf0 <__submore+0x48>

0800cb1c <__retarget_lock_acquire_recursive>:
 800cb1c:	4770      	bx	lr

0800cb1e <__retarget_lock_release_recursive>:
 800cb1e:	4770      	bx	lr

0800cb20 <memmove>:
 800cb20:	4288      	cmp	r0, r1
 800cb22:	b510      	push	{r4, lr}
 800cb24:	eb01 0402 	add.w	r4, r1, r2
 800cb28:	d902      	bls.n	800cb30 <memmove+0x10>
 800cb2a:	4284      	cmp	r4, r0
 800cb2c:	4623      	mov	r3, r4
 800cb2e:	d807      	bhi.n	800cb40 <memmove+0x20>
 800cb30:	1e43      	subs	r3, r0, #1
 800cb32:	42a1      	cmp	r1, r4
 800cb34:	d008      	beq.n	800cb48 <memmove+0x28>
 800cb36:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cb3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cb3e:	e7f8      	b.n	800cb32 <memmove+0x12>
 800cb40:	4402      	add	r2, r0
 800cb42:	4601      	mov	r1, r0
 800cb44:	428a      	cmp	r2, r1
 800cb46:	d100      	bne.n	800cb4a <memmove+0x2a>
 800cb48:	bd10      	pop	{r4, pc}
 800cb4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cb4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cb52:	e7f7      	b.n	800cb44 <memmove+0x24>

0800cb54 <_free_r>:
 800cb54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cb56:	2900      	cmp	r1, #0
 800cb58:	d044      	beq.n	800cbe4 <_free_r+0x90>
 800cb5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb5e:	9001      	str	r0, [sp, #4]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	f1a1 0404 	sub.w	r4, r1, #4
 800cb66:	bfb8      	it	lt
 800cb68:	18e4      	addlt	r4, r4, r3
 800cb6a:	f000 f913 	bl	800cd94 <__malloc_lock>
 800cb6e:	4a1e      	ldr	r2, [pc, #120]	; (800cbe8 <_free_r+0x94>)
 800cb70:	9801      	ldr	r0, [sp, #4]
 800cb72:	6813      	ldr	r3, [r2, #0]
 800cb74:	b933      	cbnz	r3, 800cb84 <_free_r+0x30>
 800cb76:	6063      	str	r3, [r4, #4]
 800cb78:	6014      	str	r4, [r2, #0]
 800cb7a:	b003      	add	sp, #12
 800cb7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cb80:	f000 b90e 	b.w	800cda0 <__malloc_unlock>
 800cb84:	42a3      	cmp	r3, r4
 800cb86:	d908      	bls.n	800cb9a <_free_r+0x46>
 800cb88:	6825      	ldr	r5, [r4, #0]
 800cb8a:	1961      	adds	r1, r4, r5
 800cb8c:	428b      	cmp	r3, r1
 800cb8e:	bf01      	itttt	eq
 800cb90:	6819      	ldreq	r1, [r3, #0]
 800cb92:	685b      	ldreq	r3, [r3, #4]
 800cb94:	1949      	addeq	r1, r1, r5
 800cb96:	6021      	streq	r1, [r4, #0]
 800cb98:	e7ed      	b.n	800cb76 <_free_r+0x22>
 800cb9a:	461a      	mov	r2, r3
 800cb9c:	685b      	ldr	r3, [r3, #4]
 800cb9e:	b10b      	cbz	r3, 800cba4 <_free_r+0x50>
 800cba0:	42a3      	cmp	r3, r4
 800cba2:	d9fa      	bls.n	800cb9a <_free_r+0x46>
 800cba4:	6811      	ldr	r1, [r2, #0]
 800cba6:	1855      	adds	r5, r2, r1
 800cba8:	42a5      	cmp	r5, r4
 800cbaa:	d10b      	bne.n	800cbc4 <_free_r+0x70>
 800cbac:	6824      	ldr	r4, [r4, #0]
 800cbae:	4421      	add	r1, r4
 800cbb0:	1854      	adds	r4, r2, r1
 800cbb2:	42a3      	cmp	r3, r4
 800cbb4:	6011      	str	r1, [r2, #0]
 800cbb6:	d1e0      	bne.n	800cb7a <_free_r+0x26>
 800cbb8:	681c      	ldr	r4, [r3, #0]
 800cbba:	685b      	ldr	r3, [r3, #4]
 800cbbc:	6053      	str	r3, [r2, #4]
 800cbbe:	4421      	add	r1, r4
 800cbc0:	6011      	str	r1, [r2, #0]
 800cbc2:	e7da      	b.n	800cb7a <_free_r+0x26>
 800cbc4:	d902      	bls.n	800cbcc <_free_r+0x78>
 800cbc6:	230c      	movs	r3, #12
 800cbc8:	6003      	str	r3, [r0, #0]
 800cbca:	e7d6      	b.n	800cb7a <_free_r+0x26>
 800cbcc:	6825      	ldr	r5, [r4, #0]
 800cbce:	1961      	adds	r1, r4, r5
 800cbd0:	428b      	cmp	r3, r1
 800cbd2:	bf04      	itt	eq
 800cbd4:	6819      	ldreq	r1, [r3, #0]
 800cbd6:	685b      	ldreq	r3, [r3, #4]
 800cbd8:	6063      	str	r3, [r4, #4]
 800cbda:	bf04      	itt	eq
 800cbdc:	1949      	addeq	r1, r1, r5
 800cbde:	6021      	streq	r1, [r4, #0]
 800cbe0:	6054      	str	r4, [r2, #4]
 800cbe2:	e7ca      	b.n	800cb7a <_free_r+0x26>
 800cbe4:	b003      	add	sp, #12
 800cbe6:	bd30      	pop	{r4, r5, pc}
 800cbe8:	2000504c 	.word	0x2000504c

0800cbec <sbrk_aligned>:
 800cbec:	b570      	push	{r4, r5, r6, lr}
 800cbee:	4e0e      	ldr	r6, [pc, #56]	; (800cc28 <sbrk_aligned+0x3c>)
 800cbf0:	460c      	mov	r4, r1
 800cbf2:	6831      	ldr	r1, [r6, #0]
 800cbf4:	4605      	mov	r5, r0
 800cbf6:	b911      	cbnz	r1, 800cbfe <sbrk_aligned+0x12>
 800cbf8:	f000 f8bc 	bl	800cd74 <_sbrk_r>
 800cbfc:	6030      	str	r0, [r6, #0]
 800cbfe:	4621      	mov	r1, r4
 800cc00:	4628      	mov	r0, r5
 800cc02:	f000 f8b7 	bl	800cd74 <_sbrk_r>
 800cc06:	1c43      	adds	r3, r0, #1
 800cc08:	d00a      	beq.n	800cc20 <sbrk_aligned+0x34>
 800cc0a:	1cc4      	adds	r4, r0, #3
 800cc0c:	f024 0403 	bic.w	r4, r4, #3
 800cc10:	42a0      	cmp	r0, r4
 800cc12:	d007      	beq.n	800cc24 <sbrk_aligned+0x38>
 800cc14:	1a21      	subs	r1, r4, r0
 800cc16:	4628      	mov	r0, r5
 800cc18:	f000 f8ac 	bl	800cd74 <_sbrk_r>
 800cc1c:	3001      	adds	r0, #1
 800cc1e:	d101      	bne.n	800cc24 <sbrk_aligned+0x38>
 800cc20:	f04f 34ff 	mov.w	r4, #4294967295
 800cc24:	4620      	mov	r0, r4
 800cc26:	bd70      	pop	{r4, r5, r6, pc}
 800cc28:	20005050 	.word	0x20005050

0800cc2c <_malloc_r>:
 800cc2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc30:	1ccd      	adds	r5, r1, #3
 800cc32:	f025 0503 	bic.w	r5, r5, #3
 800cc36:	3508      	adds	r5, #8
 800cc38:	2d0c      	cmp	r5, #12
 800cc3a:	bf38      	it	cc
 800cc3c:	250c      	movcc	r5, #12
 800cc3e:	2d00      	cmp	r5, #0
 800cc40:	4607      	mov	r7, r0
 800cc42:	db01      	blt.n	800cc48 <_malloc_r+0x1c>
 800cc44:	42a9      	cmp	r1, r5
 800cc46:	d905      	bls.n	800cc54 <_malloc_r+0x28>
 800cc48:	230c      	movs	r3, #12
 800cc4a:	603b      	str	r3, [r7, #0]
 800cc4c:	2600      	movs	r6, #0
 800cc4e:	4630      	mov	r0, r6
 800cc50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc54:	4e2e      	ldr	r6, [pc, #184]	; (800cd10 <_malloc_r+0xe4>)
 800cc56:	f000 f89d 	bl	800cd94 <__malloc_lock>
 800cc5a:	6833      	ldr	r3, [r6, #0]
 800cc5c:	461c      	mov	r4, r3
 800cc5e:	bb34      	cbnz	r4, 800ccae <_malloc_r+0x82>
 800cc60:	4629      	mov	r1, r5
 800cc62:	4638      	mov	r0, r7
 800cc64:	f7ff ffc2 	bl	800cbec <sbrk_aligned>
 800cc68:	1c43      	adds	r3, r0, #1
 800cc6a:	4604      	mov	r4, r0
 800cc6c:	d14d      	bne.n	800cd0a <_malloc_r+0xde>
 800cc6e:	6834      	ldr	r4, [r6, #0]
 800cc70:	4626      	mov	r6, r4
 800cc72:	2e00      	cmp	r6, #0
 800cc74:	d140      	bne.n	800ccf8 <_malloc_r+0xcc>
 800cc76:	6823      	ldr	r3, [r4, #0]
 800cc78:	4631      	mov	r1, r6
 800cc7a:	4638      	mov	r0, r7
 800cc7c:	eb04 0803 	add.w	r8, r4, r3
 800cc80:	f000 f878 	bl	800cd74 <_sbrk_r>
 800cc84:	4580      	cmp	r8, r0
 800cc86:	d13a      	bne.n	800ccfe <_malloc_r+0xd2>
 800cc88:	6821      	ldr	r1, [r4, #0]
 800cc8a:	3503      	adds	r5, #3
 800cc8c:	1a6d      	subs	r5, r5, r1
 800cc8e:	f025 0503 	bic.w	r5, r5, #3
 800cc92:	3508      	adds	r5, #8
 800cc94:	2d0c      	cmp	r5, #12
 800cc96:	bf38      	it	cc
 800cc98:	250c      	movcc	r5, #12
 800cc9a:	4629      	mov	r1, r5
 800cc9c:	4638      	mov	r0, r7
 800cc9e:	f7ff ffa5 	bl	800cbec <sbrk_aligned>
 800cca2:	3001      	adds	r0, #1
 800cca4:	d02b      	beq.n	800ccfe <_malloc_r+0xd2>
 800cca6:	6823      	ldr	r3, [r4, #0]
 800cca8:	442b      	add	r3, r5
 800ccaa:	6023      	str	r3, [r4, #0]
 800ccac:	e00e      	b.n	800cccc <_malloc_r+0xa0>
 800ccae:	6822      	ldr	r2, [r4, #0]
 800ccb0:	1b52      	subs	r2, r2, r5
 800ccb2:	d41e      	bmi.n	800ccf2 <_malloc_r+0xc6>
 800ccb4:	2a0b      	cmp	r2, #11
 800ccb6:	d916      	bls.n	800cce6 <_malloc_r+0xba>
 800ccb8:	1961      	adds	r1, r4, r5
 800ccba:	42a3      	cmp	r3, r4
 800ccbc:	6025      	str	r5, [r4, #0]
 800ccbe:	bf18      	it	ne
 800ccc0:	6059      	strne	r1, [r3, #4]
 800ccc2:	6863      	ldr	r3, [r4, #4]
 800ccc4:	bf08      	it	eq
 800ccc6:	6031      	streq	r1, [r6, #0]
 800ccc8:	5162      	str	r2, [r4, r5]
 800ccca:	604b      	str	r3, [r1, #4]
 800cccc:	4638      	mov	r0, r7
 800ccce:	f104 060b 	add.w	r6, r4, #11
 800ccd2:	f000 f865 	bl	800cda0 <__malloc_unlock>
 800ccd6:	f026 0607 	bic.w	r6, r6, #7
 800ccda:	1d23      	adds	r3, r4, #4
 800ccdc:	1af2      	subs	r2, r6, r3
 800ccde:	d0b6      	beq.n	800cc4e <_malloc_r+0x22>
 800cce0:	1b9b      	subs	r3, r3, r6
 800cce2:	50a3      	str	r3, [r4, r2]
 800cce4:	e7b3      	b.n	800cc4e <_malloc_r+0x22>
 800cce6:	6862      	ldr	r2, [r4, #4]
 800cce8:	42a3      	cmp	r3, r4
 800ccea:	bf0c      	ite	eq
 800ccec:	6032      	streq	r2, [r6, #0]
 800ccee:	605a      	strne	r2, [r3, #4]
 800ccf0:	e7ec      	b.n	800cccc <_malloc_r+0xa0>
 800ccf2:	4623      	mov	r3, r4
 800ccf4:	6864      	ldr	r4, [r4, #4]
 800ccf6:	e7b2      	b.n	800cc5e <_malloc_r+0x32>
 800ccf8:	4634      	mov	r4, r6
 800ccfa:	6876      	ldr	r6, [r6, #4]
 800ccfc:	e7b9      	b.n	800cc72 <_malloc_r+0x46>
 800ccfe:	230c      	movs	r3, #12
 800cd00:	603b      	str	r3, [r7, #0]
 800cd02:	4638      	mov	r0, r7
 800cd04:	f000 f84c 	bl	800cda0 <__malloc_unlock>
 800cd08:	e7a1      	b.n	800cc4e <_malloc_r+0x22>
 800cd0a:	6025      	str	r5, [r4, #0]
 800cd0c:	e7de      	b.n	800cccc <_malloc_r+0xa0>
 800cd0e:	bf00      	nop
 800cd10:	2000504c 	.word	0x2000504c

0800cd14 <_realloc_r>:
 800cd14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd18:	4680      	mov	r8, r0
 800cd1a:	4614      	mov	r4, r2
 800cd1c:	460e      	mov	r6, r1
 800cd1e:	b921      	cbnz	r1, 800cd2a <_realloc_r+0x16>
 800cd20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd24:	4611      	mov	r1, r2
 800cd26:	f7ff bf81 	b.w	800cc2c <_malloc_r>
 800cd2a:	b92a      	cbnz	r2, 800cd38 <_realloc_r+0x24>
 800cd2c:	f7ff ff12 	bl	800cb54 <_free_r>
 800cd30:	4625      	mov	r5, r4
 800cd32:	4628      	mov	r0, r5
 800cd34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd38:	f000 f838 	bl	800cdac <_malloc_usable_size_r>
 800cd3c:	4284      	cmp	r4, r0
 800cd3e:	4607      	mov	r7, r0
 800cd40:	d802      	bhi.n	800cd48 <_realloc_r+0x34>
 800cd42:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cd46:	d812      	bhi.n	800cd6e <_realloc_r+0x5a>
 800cd48:	4621      	mov	r1, r4
 800cd4a:	4640      	mov	r0, r8
 800cd4c:	f7ff ff6e 	bl	800cc2c <_malloc_r>
 800cd50:	4605      	mov	r5, r0
 800cd52:	2800      	cmp	r0, #0
 800cd54:	d0ed      	beq.n	800cd32 <_realloc_r+0x1e>
 800cd56:	42bc      	cmp	r4, r7
 800cd58:	4622      	mov	r2, r4
 800cd5a:	4631      	mov	r1, r6
 800cd5c:	bf28      	it	cs
 800cd5e:	463a      	movcs	r2, r7
 800cd60:	f7fe fec6 	bl	800baf0 <memcpy>
 800cd64:	4631      	mov	r1, r6
 800cd66:	4640      	mov	r0, r8
 800cd68:	f7ff fef4 	bl	800cb54 <_free_r>
 800cd6c:	e7e1      	b.n	800cd32 <_realloc_r+0x1e>
 800cd6e:	4635      	mov	r5, r6
 800cd70:	e7df      	b.n	800cd32 <_realloc_r+0x1e>
	...

0800cd74 <_sbrk_r>:
 800cd74:	b538      	push	{r3, r4, r5, lr}
 800cd76:	4d06      	ldr	r5, [pc, #24]	; (800cd90 <_sbrk_r+0x1c>)
 800cd78:	2300      	movs	r3, #0
 800cd7a:	4604      	mov	r4, r0
 800cd7c:	4608      	mov	r0, r1
 800cd7e:	602b      	str	r3, [r5, #0]
 800cd80:	f7f6 f942 	bl	8003008 <_sbrk>
 800cd84:	1c43      	adds	r3, r0, #1
 800cd86:	d102      	bne.n	800cd8e <_sbrk_r+0x1a>
 800cd88:	682b      	ldr	r3, [r5, #0]
 800cd8a:	b103      	cbz	r3, 800cd8e <_sbrk_r+0x1a>
 800cd8c:	6023      	str	r3, [r4, #0]
 800cd8e:	bd38      	pop	{r3, r4, r5, pc}
 800cd90:	20005044 	.word	0x20005044

0800cd94 <__malloc_lock>:
 800cd94:	4801      	ldr	r0, [pc, #4]	; (800cd9c <__malloc_lock+0x8>)
 800cd96:	f7ff bec1 	b.w	800cb1c <__retarget_lock_acquire_recursive>
 800cd9a:	bf00      	nop
 800cd9c:	20005048 	.word	0x20005048

0800cda0 <__malloc_unlock>:
 800cda0:	4801      	ldr	r0, [pc, #4]	; (800cda8 <__malloc_unlock+0x8>)
 800cda2:	f7ff bebc 	b.w	800cb1e <__retarget_lock_release_recursive>
 800cda6:	bf00      	nop
 800cda8:	20005048 	.word	0x20005048

0800cdac <_malloc_usable_size_r>:
 800cdac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cdb0:	1f18      	subs	r0, r3, #4
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	bfbc      	itt	lt
 800cdb6:	580b      	ldrlt	r3, [r1, r0]
 800cdb8:	18c0      	addlt	r0, r0, r3
 800cdba:	4770      	bx	lr

0800cdbc <_init>:
 800cdbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdbe:	bf00      	nop
 800cdc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdc2:	bc08      	pop	{r3}
 800cdc4:	469e      	mov	lr, r3
 800cdc6:	4770      	bx	lr

0800cdc8 <_fini>:
 800cdc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdca:	bf00      	nop
 800cdcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdce:	bc08      	pop	{r3}
 800cdd0:	469e      	mov	lr, r3
 800cdd2:	4770      	bx	lr
