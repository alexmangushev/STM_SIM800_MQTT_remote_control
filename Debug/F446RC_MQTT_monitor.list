
F446RC_MQTT_monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010044  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e18  08010214  08010214  00020214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801102c  0801102c  0003009c  2**0
                  CONTENTS
  4 .ARM          00000008  0801102c  0801102c  0002102c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011034  08011034  0003009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011034  08011034  00021034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011038  08011038  00021038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0801103c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000050c0  2000009c  080110d8  0003009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000515c  080110d8  0003515c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021213  00000000  00000000  000300cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fb6  00000000  00000000  000512df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001be8  00000000  00000000  00055298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a88  00000000  00000000  00056e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004f2a  00000000  00000000  00058908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020212  00000000  00000000  0005d832  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1007  00000000  00000000  0007da44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015ea4b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000080c0  00000000  00000000  0015ea9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000009c 	.word	0x2000009c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080101fc 	.word	0x080101fc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a0 	.word	0x200000a0
 800020c:	080101fc 	.word	0x080101fc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b10:	f000 b974 	b.w	8000dfc <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9d08      	ldr	r5, [sp, #32]
 8000b32:	4604      	mov	r4, r0
 8000b34:	468e      	mov	lr, r1
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d14d      	bne.n	8000bd6 <__udivmoddi4+0xaa>
 8000b3a:	428a      	cmp	r2, r1
 8000b3c:	4694      	mov	ip, r2
 8000b3e:	d969      	bls.n	8000c14 <__udivmoddi4+0xe8>
 8000b40:	fab2 f282 	clz	r2, r2
 8000b44:	b152      	cbz	r2, 8000b5c <__udivmoddi4+0x30>
 8000b46:	fa01 f302 	lsl.w	r3, r1, r2
 8000b4a:	f1c2 0120 	rsb	r1, r2, #32
 8000b4e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b52:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b56:	ea41 0e03 	orr.w	lr, r1, r3
 8000b5a:	4094      	lsls	r4, r2
 8000b5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b60:	0c21      	lsrs	r1, r4, #16
 8000b62:	fbbe f6f8 	udiv	r6, lr, r8
 8000b66:	fa1f f78c 	uxth.w	r7, ip
 8000b6a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b6e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b72:	fb06 f107 	mul.w	r1, r6, r7
 8000b76:	4299      	cmp	r1, r3
 8000b78:	d90a      	bls.n	8000b90 <__udivmoddi4+0x64>
 8000b7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b7e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b82:	f080 811f 	bcs.w	8000dc4 <__udivmoddi4+0x298>
 8000b86:	4299      	cmp	r1, r3
 8000b88:	f240 811c 	bls.w	8000dc4 <__udivmoddi4+0x298>
 8000b8c:	3e02      	subs	r6, #2
 8000b8e:	4463      	add	r3, ip
 8000b90:	1a5b      	subs	r3, r3, r1
 8000b92:	b2a4      	uxth	r4, r4
 8000b94:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b98:	fb08 3310 	mls	r3, r8, r0, r3
 8000b9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba0:	fb00 f707 	mul.w	r7, r0, r7
 8000ba4:	42a7      	cmp	r7, r4
 8000ba6:	d90a      	bls.n	8000bbe <__udivmoddi4+0x92>
 8000ba8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bac:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bb0:	f080 810a 	bcs.w	8000dc8 <__udivmoddi4+0x29c>
 8000bb4:	42a7      	cmp	r7, r4
 8000bb6:	f240 8107 	bls.w	8000dc8 <__udivmoddi4+0x29c>
 8000bba:	4464      	add	r4, ip
 8000bbc:	3802      	subs	r0, #2
 8000bbe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bc2:	1be4      	subs	r4, r4, r7
 8000bc4:	2600      	movs	r6, #0
 8000bc6:	b11d      	cbz	r5, 8000bd0 <__udivmoddi4+0xa4>
 8000bc8:	40d4      	lsrs	r4, r2
 8000bca:	2300      	movs	r3, #0
 8000bcc:	e9c5 4300 	strd	r4, r3, [r5]
 8000bd0:	4631      	mov	r1, r6
 8000bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d909      	bls.n	8000bee <__udivmoddi4+0xc2>
 8000bda:	2d00      	cmp	r5, #0
 8000bdc:	f000 80ef 	beq.w	8000dbe <__udivmoddi4+0x292>
 8000be0:	2600      	movs	r6, #0
 8000be2:	e9c5 0100 	strd	r0, r1, [r5]
 8000be6:	4630      	mov	r0, r6
 8000be8:	4631      	mov	r1, r6
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	fab3 f683 	clz	r6, r3
 8000bf2:	2e00      	cmp	r6, #0
 8000bf4:	d14a      	bne.n	8000c8c <__udivmoddi4+0x160>
 8000bf6:	428b      	cmp	r3, r1
 8000bf8:	d302      	bcc.n	8000c00 <__udivmoddi4+0xd4>
 8000bfa:	4282      	cmp	r2, r0
 8000bfc:	f200 80f9 	bhi.w	8000df2 <__udivmoddi4+0x2c6>
 8000c00:	1a84      	subs	r4, r0, r2
 8000c02:	eb61 0303 	sbc.w	r3, r1, r3
 8000c06:	2001      	movs	r0, #1
 8000c08:	469e      	mov	lr, r3
 8000c0a:	2d00      	cmp	r5, #0
 8000c0c:	d0e0      	beq.n	8000bd0 <__udivmoddi4+0xa4>
 8000c0e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c12:	e7dd      	b.n	8000bd0 <__udivmoddi4+0xa4>
 8000c14:	b902      	cbnz	r2, 8000c18 <__udivmoddi4+0xec>
 8000c16:	deff      	udf	#255	; 0xff
 8000c18:	fab2 f282 	clz	r2, r2
 8000c1c:	2a00      	cmp	r2, #0
 8000c1e:	f040 8092 	bne.w	8000d46 <__udivmoddi4+0x21a>
 8000c22:	eba1 010c 	sub.w	r1, r1, ip
 8000c26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2a:	fa1f fe8c 	uxth.w	lr, ip
 8000c2e:	2601      	movs	r6, #1
 8000c30:	0c20      	lsrs	r0, r4, #16
 8000c32:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c36:	fb07 1113 	mls	r1, r7, r3, r1
 8000c3a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c3e:	fb0e f003 	mul.w	r0, lr, r3
 8000c42:	4288      	cmp	r0, r1
 8000c44:	d908      	bls.n	8000c58 <__udivmoddi4+0x12c>
 8000c46:	eb1c 0101 	adds.w	r1, ip, r1
 8000c4a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0x12a>
 8000c50:	4288      	cmp	r0, r1
 8000c52:	f200 80cb 	bhi.w	8000dec <__udivmoddi4+0x2c0>
 8000c56:	4643      	mov	r3, r8
 8000c58:	1a09      	subs	r1, r1, r0
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c60:	fb07 1110 	mls	r1, r7, r0, r1
 8000c64:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c68:	fb0e fe00 	mul.w	lr, lr, r0
 8000c6c:	45a6      	cmp	lr, r4
 8000c6e:	d908      	bls.n	8000c82 <__udivmoddi4+0x156>
 8000c70:	eb1c 0404 	adds.w	r4, ip, r4
 8000c74:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c78:	d202      	bcs.n	8000c80 <__udivmoddi4+0x154>
 8000c7a:	45a6      	cmp	lr, r4
 8000c7c:	f200 80bb 	bhi.w	8000df6 <__udivmoddi4+0x2ca>
 8000c80:	4608      	mov	r0, r1
 8000c82:	eba4 040e 	sub.w	r4, r4, lr
 8000c86:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c8a:	e79c      	b.n	8000bc6 <__udivmoddi4+0x9a>
 8000c8c:	f1c6 0720 	rsb	r7, r6, #32
 8000c90:	40b3      	lsls	r3, r6
 8000c92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c9a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c9e:	fa01 f306 	lsl.w	r3, r1, r6
 8000ca2:	431c      	orrs	r4, r3
 8000ca4:	40f9      	lsrs	r1, r7
 8000ca6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000caa:	fa00 f306 	lsl.w	r3, r0, r6
 8000cae:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cb2:	0c20      	lsrs	r0, r4, #16
 8000cb4:	fa1f fe8c 	uxth.w	lr, ip
 8000cb8:	fb09 1118 	mls	r1, r9, r8, r1
 8000cbc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cc0:	fb08 f00e 	mul.w	r0, r8, lr
 8000cc4:	4288      	cmp	r0, r1
 8000cc6:	fa02 f206 	lsl.w	r2, r2, r6
 8000cca:	d90b      	bls.n	8000ce4 <__udivmoddi4+0x1b8>
 8000ccc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cd4:	f080 8088 	bcs.w	8000de8 <__udivmoddi4+0x2bc>
 8000cd8:	4288      	cmp	r0, r1
 8000cda:	f240 8085 	bls.w	8000de8 <__udivmoddi4+0x2bc>
 8000cde:	f1a8 0802 	sub.w	r8, r8, #2
 8000ce2:	4461      	add	r1, ip
 8000ce4:	1a09      	subs	r1, r1, r0
 8000ce6:	b2a4      	uxth	r4, r4
 8000ce8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cec:	fb09 1110 	mls	r1, r9, r0, r1
 8000cf0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cf4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cf8:	458e      	cmp	lr, r1
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x1e2>
 8000cfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000d00:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d04:	d26c      	bcs.n	8000de0 <__udivmoddi4+0x2b4>
 8000d06:	458e      	cmp	lr, r1
 8000d08:	d96a      	bls.n	8000de0 <__udivmoddi4+0x2b4>
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	4461      	add	r1, ip
 8000d0e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d12:	fba0 9402 	umull	r9, r4, r0, r2
 8000d16:	eba1 010e 	sub.w	r1, r1, lr
 8000d1a:	42a1      	cmp	r1, r4
 8000d1c:	46c8      	mov	r8, r9
 8000d1e:	46a6      	mov	lr, r4
 8000d20:	d356      	bcc.n	8000dd0 <__udivmoddi4+0x2a4>
 8000d22:	d053      	beq.n	8000dcc <__udivmoddi4+0x2a0>
 8000d24:	b15d      	cbz	r5, 8000d3e <__udivmoddi4+0x212>
 8000d26:	ebb3 0208 	subs.w	r2, r3, r8
 8000d2a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d2e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d32:	fa22 f306 	lsr.w	r3, r2, r6
 8000d36:	40f1      	lsrs	r1, r6
 8000d38:	431f      	orrs	r7, r3
 8000d3a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d3e:	2600      	movs	r6, #0
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	f1c2 0320 	rsb	r3, r2, #32
 8000d4a:	40d8      	lsrs	r0, r3
 8000d4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d50:	fa21 f303 	lsr.w	r3, r1, r3
 8000d54:	4091      	lsls	r1, r2
 8000d56:	4301      	orrs	r1, r0
 8000d58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d5c:	fa1f fe8c 	uxth.w	lr, ip
 8000d60:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d64:	fb07 3610 	mls	r6, r7, r0, r3
 8000d68:	0c0b      	lsrs	r3, r1, #16
 8000d6a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d6e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d72:	429e      	cmp	r6, r3
 8000d74:	fa04 f402 	lsl.w	r4, r4, r2
 8000d78:	d908      	bls.n	8000d8c <__udivmoddi4+0x260>
 8000d7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d82:	d22f      	bcs.n	8000de4 <__udivmoddi4+0x2b8>
 8000d84:	429e      	cmp	r6, r3
 8000d86:	d92d      	bls.n	8000de4 <__udivmoddi4+0x2b8>
 8000d88:	3802      	subs	r0, #2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	1b9b      	subs	r3, r3, r6
 8000d8e:	b289      	uxth	r1, r1
 8000d90:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d94:	fb07 3316 	mls	r3, r7, r6, r3
 8000d98:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d9c:	fb06 f30e 	mul.w	r3, r6, lr
 8000da0:	428b      	cmp	r3, r1
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x28a>
 8000da4:	eb1c 0101 	adds.w	r1, ip, r1
 8000da8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000dac:	d216      	bcs.n	8000ddc <__udivmoddi4+0x2b0>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d914      	bls.n	8000ddc <__udivmoddi4+0x2b0>
 8000db2:	3e02      	subs	r6, #2
 8000db4:	4461      	add	r1, ip
 8000db6:	1ac9      	subs	r1, r1, r3
 8000db8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dbc:	e738      	b.n	8000c30 <__udivmoddi4+0x104>
 8000dbe:	462e      	mov	r6, r5
 8000dc0:	4628      	mov	r0, r5
 8000dc2:	e705      	b.n	8000bd0 <__udivmoddi4+0xa4>
 8000dc4:	4606      	mov	r6, r0
 8000dc6:	e6e3      	b.n	8000b90 <__udivmoddi4+0x64>
 8000dc8:	4618      	mov	r0, r3
 8000dca:	e6f8      	b.n	8000bbe <__udivmoddi4+0x92>
 8000dcc:	454b      	cmp	r3, r9
 8000dce:	d2a9      	bcs.n	8000d24 <__udivmoddi4+0x1f8>
 8000dd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000dd4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000dd8:	3801      	subs	r0, #1
 8000dda:	e7a3      	b.n	8000d24 <__udivmoddi4+0x1f8>
 8000ddc:	4646      	mov	r6, r8
 8000dde:	e7ea      	b.n	8000db6 <__udivmoddi4+0x28a>
 8000de0:	4620      	mov	r0, r4
 8000de2:	e794      	b.n	8000d0e <__udivmoddi4+0x1e2>
 8000de4:	4640      	mov	r0, r8
 8000de6:	e7d1      	b.n	8000d8c <__udivmoddi4+0x260>
 8000de8:	46d0      	mov	r8, sl
 8000dea:	e77b      	b.n	8000ce4 <__udivmoddi4+0x1b8>
 8000dec:	3b02      	subs	r3, #2
 8000dee:	4461      	add	r1, ip
 8000df0:	e732      	b.n	8000c58 <__udivmoddi4+0x12c>
 8000df2:	4630      	mov	r0, r6
 8000df4:	e709      	b.n	8000c0a <__udivmoddi4+0xde>
 8000df6:	4464      	add	r4, ip
 8000df8:	3802      	subs	r0, #2
 8000dfa:	e742      	b.n	8000c82 <__udivmoddi4+0x156>

08000dfc <__aeabi_idiv0>:
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop

08000e00 <INA226_getBusV>:
	*/
	
#include "INA226.h"
#include "main.h"
	
float INA226_getBusV(I2C_HandleTypeDef *I2CHandler, uint16_t DevAddress) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	460b      	mov	r3, r1
 8000e0a:	807b      	strh	r3, [r7, #2]
	return (INA226_getBusVReg(I2CHandler, DevAddress) * INA226_LSB);
 8000e0c:	887b      	ldrh	r3, [r7, #2]
 8000e0e:	4619      	mov	r1, r3
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f000 f865 	bl	8000ee0 <INA226_getBusVReg>
 8000e16:	4603      	mov	r3, r0
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff fba3 	bl	8000564 <__aeabi_i2d>
 8000e1e:	a30a      	add	r3, pc, #40	; (adr r3, 8000e48 <INA226_getBusV+0x48>)
 8000e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e24:	f7ff fc08 	bl	8000638 <__aeabi_dmul>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	460b      	mov	r3, r1
 8000e2c:	4610      	mov	r0, r2
 8000e2e:	4619      	mov	r1, r3
 8000e30:	f7ff fe14 	bl	8000a5c <__aeabi_d2f>
 8000e34:	4603      	mov	r3, r0
 8000e36:	ee07 3a90 	vmov	s15, r3
}
 8000e3a:	eeb0 0a67 	vmov.f32	s0, s15
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	f3af 8000 	nop.w
 8000e48:	47ae147b 	.word	0x47ae147b
 8000e4c:	3f547ae1 	.word	0x3f547ae1

08000e50 <INA226_getCurrent>:

float INA226_getCurrent(I2C_HandleTypeDef *I2CHandler, uint16_t DevAddress) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	460b      	mov	r3, r1
 8000e5a:	807b      	strh	r3, [r7, #2]
	return (INA226_getCurrentReg(I2CHandler, DevAddress) * INA226_CURRENTLSB);
 8000e5c:	887b      	ldrh	r3, [r7, #2]
 8000e5e:	4619      	mov	r1, r3
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f000 f888 	bl	8000f76 <INA226_getCurrentReg>
 8000e66:	4603      	mov	r3, r0
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff fb7b 	bl	8000564 <__aeabi_i2d>
 8000e6e:	a30a      	add	r3, pc, #40	; (adr r3, 8000e98 <INA226_getCurrent+0x48>)
 8000e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e74:	f7ff fbe0 	bl	8000638 <__aeabi_dmul>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	4619      	mov	r1, r3
 8000e80:	f7ff fdec 	bl	8000a5c <__aeabi_d2f>
 8000e84:	4603      	mov	r3, r0
 8000e86:	ee07 3a90 	vmov	s15, r3
}
 8000e8a:	eeb0 0a67 	vmov.f32	s0, s15
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	f3af 8000 	nop.w
 8000e98:	9999999a 	.word	0x9999999a
 8000e9c:	3fa99999 	.word	0x3fa99999

08000ea0 <INA226_setConfig>:

float INA226_getPower(I2C_HandleTypeDef *I2CHandler, uint16_t DevAddress) {
	return (INA226_getPowerReg(I2CHandler, DevAddress)*INA226_POWERLSB_INV);
}
	
uint8_t INA226_setConfig(I2C_HandleTypeDef *I2CHandler, uint16_t DevAddress, uint16_t ConfigWord) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af02      	add	r7, sp, #8
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	807b      	strh	r3, [r7, #2]
 8000eac:	4613      	mov	r3, r2
 8000eae:	803b      	strh	r3, [r7, #0]
	uint8_t SentTable[3];
	SentTable[0] = INA226_CONFIG;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	733b      	strb	r3, [r7, #12]
	SentTable[1] = (ConfigWord & 0xFF00) >> 8;
 8000eb4:	883b      	ldrh	r3, [r7, #0]
 8000eb6:	0a1b      	lsrs	r3, r3, #8
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	737b      	strb	r3, [r7, #13]
	SentTable[2] = (ConfigWord & 0x00FF);
 8000ebe:	883b      	ldrh	r3, [r7, #0]
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	73bb      	strb	r3, [r7, #14]
	return HAL_I2C_Master_Transmit(I2CHandler, DevAddress, SentTable, 3, INA226_I2CTIMEOUT);
 8000ec4:	f107 020c 	add.w	r2, r7, #12
 8000ec8:	8879      	ldrh	r1, [r7, #2]
 8000eca:	230a      	movs	r3, #10
 8000ecc:	9300      	str	r3, [sp, #0]
 8000ece:	2303      	movs	r3, #3
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f004 fc79 	bl	80057c8 <HAL_I2C_Master_Transmit>
 8000ed6:	4603      	mov	r3, r0
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <INA226_getBusVReg>:
	HAL_I2C_Master_Transmit(I2CHandler,DevAddress, SentTable, 1, INA226_I2CTIMEOUT);
	if (HAL_I2C_Master_Receive(I2CHandler,DevAddress, ReceivedTable, 2, INA226_I2CTIMEOUT) != HAL_OK) return 0xFF;
	else return ((uint16_t)ReceivedTable[0]<<8 | ReceivedTable[1]);
}

uint16_t INA226_getBusVReg(I2C_HandleTypeDef *I2CHandler, uint16_t DevAddress) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af02      	add	r7, sp, #8
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	460b      	mov	r3, r1
 8000eea:	807b      	strh	r3, [r7, #2]
	uint8_t SentTable[1] = {INA226_BUSV};
 8000eec:	2302      	movs	r3, #2
 8000eee:	733b      	strb	r3, [r7, #12]
	uint8_t ReceivedTable[2];
	HAL_I2C_Master_Transmit(I2CHandler,DevAddress, SentTable, 1, INA226_I2CTIMEOUT);
 8000ef0:	f107 020c 	add.w	r2, r7, #12
 8000ef4:	8879      	ldrh	r1, [r7, #2]
 8000ef6:	230a      	movs	r3, #10
 8000ef8:	9300      	str	r3, [sp, #0]
 8000efa:	2301      	movs	r3, #1
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f004 fc63 	bl	80057c8 <HAL_I2C_Master_Transmit>
	if (HAL_I2C_Master_Receive(I2CHandler,DevAddress, ReceivedTable, 2, INA226_I2CTIMEOUT) != HAL_OK) return 0xFF;
 8000f02:	f107 0208 	add.w	r2, r7, #8
 8000f06:	8879      	ldrh	r1, [r7, #2]
 8000f08:	230a      	movs	r3, #10
 8000f0a:	9300      	str	r3, [sp, #0]
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f004 fd58 	bl	80059c4 <HAL_I2C_Master_Receive>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <INA226_getBusVReg+0x3e>
 8000f1a:	23ff      	movs	r3, #255	; 0xff
 8000f1c:	e007      	b.n	8000f2e <INA226_getBusVReg+0x4e>
	else return ((uint16_t)ReceivedTable[0]<<8 | ReceivedTable[1]);
 8000f1e:	7a3b      	ldrb	r3, [r7, #8]
 8000f20:	021b      	lsls	r3, r3, #8
 8000f22:	b21a      	sxth	r2, r3
 8000f24:	7a7b      	ldrb	r3, [r7, #9]
 8000f26:	b21b      	sxth	r3, r3
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	b21b      	sxth	r3, r3
 8000f2c:	b29b      	uxth	r3, r3

}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <INA226_setCalibrationReg>:

uint8_t INA226_setCalibrationReg(I2C_HandleTypeDef *I2CHandler, uint16_t DevAddress, uint16_t ConfigWord) {
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b086      	sub	sp, #24
 8000f3a:	af02      	add	r7, sp, #8
 8000f3c:	6078      	str	r0, [r7, #4]
 8000f3e:	460b      	mov	r3, r1
 8000f40:	807b      	strh	r3, [r7, #2]
 8000f42:	4613      	mov	r3, r2
 8000f44:	803b      	strh	r3, [r7, #0]
	uint8_t SentTable[3];
	SentTable[0] = INA226_CALIB;
 8000f46:	2305      	movs	r3, #5
 8000f48:	733b      	strb	r3, [r7, #12]
	SentTable[1] = (ConfigWord & 0xFF00) >> 8;
 8000f4a:	883b      	ldrh	r3, [r7, #0]
 8000f4c:	0a1b      	lsrs	r3, r3, #8
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	737b      	strb	r3, [r7, #13]
	SentTable[2] = (ConfigWord & 0x00FF);
 8000f54:	883b      	ldrh	r3, [r7, #0]
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	73bb      	strb	r3, [r7, #14]
	return HAL_I2C_Master_Transmit(I2CHandler, DevAddress, SentTable, 3, INA226_I2CTIMEOUT);
 8000f5a:	f107 020c 	add.w	r2, r7, #12
 8000f5e:	8879      	ldrh	r1, [r7, #2]
 8000f60:	230a      	movs	r3, #10
 8000f62:	9300      	str	r3, [sp, #0]
 8000f64:	2303      	movs	r3, #3
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f004 fc2e 	bl	80057c8 <HAL_I2C_Master_Transmit>
 8000f6c:	4603      	mov	r3, r0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <INA226_getCurrentReg>:
	HAL_I2C_Master_Transmit(I2CHandler,DevAddress, SentTable, 1, INA226_I2CTIMEOUT);
	if (HAL_I2C_Master_Receive(I2CHandler,DevAddress, ReceivedTable, 2, INA226_I2CTIMEOUT) != HAL_OK) return 0xFF;
	else return ((uint16_t)ReceivedTable[0]<<8 | ReceivedTable[1]);
}

uint16_t INA226_getCurrentReg(I2C_HandleTypeDef *I2CHandler, uint16_t DevAddress) {
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b086      	sub	sp, #24
 8000f7a:	af02      	add	r7, sp, #8
 8000f7c:	6078      	str	r0, [r7, #4]
 8000f7e:	460b      	mov	r3, r1
 8000f80:	807b      	strh	r3, [r7, #2]
	uint8_t SentTable[1] = {INA226_CURRENT};
 8000f82:	2304      	movs	r3, #4
 8000f84:	733b      	strb	r3, [r7, #12]
	uint8_t ReceivedTable[2];
	HAL_I2C_Master_Transmit(I2CHandler,DevAddress, SentTable, 1, INA226_I2CTIMEOUT);
 8000f86:	f107 020c 	add.w	r2, r7, #12
 8000f8a:	8879      	ldrh	r1, [r7, #2]
 8000f8c:	230a      	movs	r3, #10
 8000f8e:	9300      	str	r3, [sp, #0]
 8000f90:	2301      	movs	r3, #1
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f004 fc18 	bl	80057c8 <HAL_I2C_Master_Transmit>
	if (HAL_I2C_Master_Receive(I2CHandler,DevAddress, ReceivedTable, 2, INA226_I2CTIMEOUT) != HAL_OK) return 0xFF;
 8000f98:	f107 0208 	add.w	r2, r7, #8
 8000f9c:	8879      	ldrh	r1, [r7, #2]
 8000f9e:	230a      	movs	r3, #10
 8000fa0:	9300      	str	r3, [sp, #0]
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f004 fd0d 	bl	80059c4 <HAL_I2C_Master_Receive>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <INA226_getCurrentReg+0x3e>
 8000fb0:	23ff      	movs	r3, #255	; 0xff
 8000fb2:	e007      	b.n	8000fc4 <INA226_getCurrentReg+0x4e>
	else return ((uint16_t)ReceivedTable[0]<<8 | ReceivedTable[1]);
 8000fb4:	7a3b      	ldrb	r3, [r7, #8]
 8000fb6:	021b      	lsls	r3, r3, #8
 8000fb8:	b21a      	sxth	r2, r3
 8000fba:	7a7b      	ldrb	r3, [r7, #9]
 8000fbc:	b21b      	sxth	r3, r3
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	b21b      	sxth	r3, r3
 8000fc2:	b29b      	uxth	r3, r3
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <usMBCRC16>:
 */

#include "ModBusCRC.h"

uint16_t usMBCRC16(uint8_t * pucFrame, uint16_t usLen)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	807b      	strh	r3, [r7, #2]
	uint8_t           ucCRCHi = 0xFF;
 8000fd8:	23ff      	movs	r3, #255	; 0xff
 8000fda:	73fb      	strb	r3, [r7, #15]
	uint8_t           ucCRCLo = 0xFF;
 8000fdc:	23ff      	movs	r3, #255	; 0xff
 8000fde:	73bb      	strb	r3, [r7, #14]
    int             iIndex;

    while( usLen-- )
 8000fe0:	e013      	b.n	800100a <usMBCRC16+0x3e>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	1c5a      	adds	r2, r3, #1
 8000fe6:	607a      	str	r2, [r7, #4]
 8000fe8:	781a      	ldrb	r2, [r3, #0]
 8000fea:	7bbb      	ldrb	r3, [r7, #14]
 8000fec:	4053      	eors	r3, r2
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	60bb      	str	r3, [r7, #8]
        ucCRCLo = ( uint8_t )( ucCRCHi ^ aucCRCHi[iIndex] );
 8000ff2:	4a0f      	ldr	r2, [pc, #60]	; (8001030 <usMBCRC16+0x64>)
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	781a      	ldrb	r2, [r3, #0]
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	4053      	eors	r3, r2
 8000ffe:	73bb      	strb	r3, [r7, #14]
        ucCRCHi = aucCRCLo[iIndex];
 8001000:	4a0c      	ldr	r2, [pc, #48]	; (8001034 <usMBCRC16+0x68>)
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	4413      	add	r3, r2
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	73fb      	strb	r3, [r7, #15]
    while( usLen-- )
 800100a:	887b      	ldrh	r3, [r7, #2]
 800100c:	1e5a      	subs	r2, r3, #1
 800100e:	807a      	strh	r2, [r7, #2]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d1e6      	bne.n	8000fe2 <usMBCRC16+0x16>
    }
    return ( uint16_t )( ucCRCHi << 8 | ucCRCLo );
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	021b      	lsls	r3, r3, #8
 8001018:	b21a      	sxth	r2, r3
 800101a:	7bbb      	ldrb	r3, [r7, #14]
 800101c:	b21b      	sxth	r3, r3
 800101e:	4313      	orrs	r3, r2
 8001020:	b21b      	sxth	r3, r3
 8001022:	b29b      	uxth	r3, r3
}
 8001024:	4618      	mov	r0, r3
 8001026:	3714      	adds	r7, #20
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	08010a80 	.word	0x08010a80
 8001034:	08010b80 	.word	0x08010b80

08001038 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800103c:	f003 fb2c 	bl	8004698 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001040:	f000 f8d8 	bl	80011f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001044:	f000 fa52 	bl	80014ec <MX_GPIO_Init>
  MX_DMA_Init();
 8001048:	f000 f9fa 	bl	8001440 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800104c:	f000 f9a4 	bl	8001398 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001050:	f000 f9cc 	bl	80013ec <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8001054:	f000 f96a 	bl	800132c <MX_SPI2_Init>
  MX_I2C2_Init();
 8001058:	f000 f93a 	bl	80012d0 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  INA226_setConfig(&hi2c2, INA226_ADDRESS, INA226_MODE_CONT_SHUNT_AND_BUS | INA226_AVG_1024);
 800105c:	f640 6207 	movw	r2, #3591	; 0xe07
 8001060:	2180      	movs	r1, #128	; 0x80
 8001062:	483f      	ldr	r0, [pc, #252]	; (8001160 <main+0x128>)
 8001064:	f7ff ff1c 	bl	8000ea0 <INA226_setConfig>
  INA226_setCalibrationReg(&hi2c2, INA226_ADDRESS, INA226_CALIB_VAL);
 8001068:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800106c:	2180      	movs	r1, #128	; 0x80
 800106e:	483c      	ldr	r0, [pc, #240]	; (8001160 <main+0x128>)
 8001070:	f7ff ff61 	bl	8000f36 <INA226_setCalibrationReg>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001074:	f009 ff1e 	bl	800aeb4 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of UART1Mutex */
  UART1MutexHandle = osMutexNew(&UART1Mutex_attributes);
 8001078:	483a      	ldr	r0, [pc, #232]	; (8001164 <main+0x12c>)
 800107a:	f00a f8ff 	bl	800b27c <osMutexNew>
 800107e:	4603      	mov	r3, r0
 8001080:	4a39      	ldr	r2, [pc, #228]	; (8001168 <main+0x130>)
 8001082:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of PINGSem */
  PINGSemHandle = osSemaphoreNew(1, 0, &PINGSem_attributes);
 8001084:	4a39      	ldr	r2, [pc, #228]	; (800116c <main+0x134>)
 8001086:	2100      	movs	r1, #0
 8001088:	2001      	movs	r0, #1
 800108a:	f00a fa05 	bl	800b498 <osSemaphoreNew>
 800108e:	4603      	mov	r3, r0
 8001090:	4a37      	ldr	r2, [pc, #220]	; (8001170 <main+0x138>)
 8001092:	6013      	str	r3, [r2, #0]

  /* creation of SemGetData */
  SemGetDataHandle = osSemaphoreNew(1, 0, &SemGetData_attributes);
 8001094:	4a37      	ldr	r2, [pc, #220]	; (8001174 <main+0x13c>)
 8001096:	2100      	movs	r1, #0
 8001098:	2001      	movs	r0, #1
 800109a:	f00a f9fd 	bl	800b498 <osSemaphoreNew>
 800109e:	4603      	mov	r3, r0
 80010a0:	4a35      	ldr	r2, [pc, #212]	; (8001178 <main+0x140>)
 80010a2:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of PingTimer */
  PingTimerHandle = osTimerNew(CallbackPingTimer, osTimerPeriodic, NULL, &PingTimer_attributes);
 80010a4:	4b35      	ldr	r3, [pc, #212]	; (800117c <main+0x144>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	2101      	movs	r1, #1
 80010aa:	4835      	ldr	r0, [pc, #212]	; (8001180 <main+0x148>)
 80010ac:	f00a f83c 	bl	800b128 <osTimerNew>
 80010b0:	4603      	mov	r3, r0
 80010b2:	4a34      	ldr	r2, [pc, #208]	; (8001184 <main+0x14c>)
 80010b4:	6013      	str	r3, [r2, #0]

  /* creation of DataTimer */
  DataTimerHandle = osTimerNew(CallbackDataTimer, osTimerPeriodic, NULL, &DataTimer_attributes);
 80010b6:	4b34      	ldr	r3, [pc, #208]	; (8001188 <main+0x150>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	2101      	movs	r1, #1
 80010bc:	4833      	ldr	r0, [pc, #204]	; (800118c <main+0x154>)
 80010be:	f00a f833 	bl	800b128 <osTimerNew>
 80010c2:	4603      	mov	r3, r0
 80010c4:	4a32      	ldr	r2, [pc, #200]	; (8001190 <main+0x158>)
 80010c6:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of debugQueue */
  debugQueueHandle = osMessageQueueNew (10, sizeof(message_type), &debugQueue_attributes);
 80010c8:	4a32      	ldr	r2, [pc, #200]	; (8001194 <main+0x15c>)
 80010ca:	2146      	movs	r1, #70	; 0x46
 80010cc:	200a      	movs	r0, #10
 80010ce:	f00a fb03 	bl	800b6d8 <osMessageQueueNew>
 80010d2:	4603      	mov	r3, r0
 80010d4:	4a30      	ldr	r2, [pc, #192]	; (8001198 <main+0x160>)
 80010d6:	6013      	str	r3, [r2, #0]

  /* creation of SIM800SendQueue */
  SIM800SendQueueHandle = osMessageQueueNew (10, sizeof(message_type), &SIM800SendQueue_attributes);
 80010d8:	4a30      	ldr	r2, [pc, #192]	; (800119c <main+0x164>)
 80010da:	2146      	movs	r1, #70	; 0x46
 80010dc:	200a      	movs	r0, #10
 80010de:	f00a fafb 	bl	800b6d8 <osMessageQueueNew>
 80010e2:	4603      	mov	r3, r0
 80010e4:	4a2e      	ldr	r2, [pc, #184]	; (80011a0 <main+0x168>)
 80010e6:	6013      	str	r3, [r2, #0]

  /* creation of RxSIM800Queue */
  RxSIM800QueueHandle = osMessageQueueNew (10, sizeof(message_type), &RxSIM800Queue_attributes);
 80010e8:	4a2e      	ldr	r2, [pc, #184]	; (80011a4 <main+0x16c>)
 80010ea:	2146      	movs	r1, #70	; 0x46
 80010ec:	200a      	movs	r0, #10
 80010ee:	f00a faf3 	bl	800b6d8 <osMessageQueueNew>
 80010f2:	4603      	mov	r3, r0
 80010f4:	4a2c      	ldr	r2, [pc, #176]	; (80011a8 <main+0x170>)
 80010f6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80010f8:	4a2c      	ldr	r2, [pc, #176]	; (80011ac <main+0x174>)
 80010fa:	2100      	movs	r1, #0
 80010fc:	482c      	ldr	r0, [pc, #176]	; (80011b0 <main+0x178>)
 80010fe:	f009 ff23 	bl	800af48 <osThreadNew>
 8001102:	4603      	mov	r3, r0
 8001104:	4a2b      	ldr	r2, [pc, #172]	; (80011b4 <main+0x17c>)
 8001106:	6013      	str	r3, [r2, #0]

  /* creation of GetDataTask */
  GetDataTaskHandle = osThreadNew(StartGetDataTask, NULL, &GetDataTask_attributes);
 8001108:	4a2b      	ldr	r2, [pc, #172]	; (80011b8 <main+0x180>)
 800110a:	2100      	movs	r1, #0
 800110c:	482b      	ldr	r0, [pc, #172]	; (80011bc <main+0x184>)
 800110e:	f009 ff1b 	bl	800af48 <osThreadNew>
 8001112:	4603      	mov	r3, r0
 8001114:	4a2a      	ldr	r2, [pc, #168]	; (80011c0 <main+0x188>)
 8001116:	6013      	str	r3, [r2, #0]

  /* creation of DebugTask */
  DebugTaskHandle = osThreadNew(StartDebugTask, NULL, &DebugTask_attributes);
 8001118:	4a2a      	ldr	r2, [pc, #168]	; (80011c4 <main+0x18c>)
 800111a:	2100      	movs	r1, #0
 800111c:	482a      	ldr	r0, [pc, #168]	; (80011c8 <main+0x190>)
 800111e:	f009 ff13 	bl	800af48 <osThreadNew>
 8001122:	4603      	mov	r3, r0
 8001124:	4a29      	ldr	r2, [pc, #164]	; (80011cc <main+0x194>)
 8001126:	6013      	str	r3, [r2, #0]

  /* creation of SIM800SendTask */
  SIM800SendTaskHandle = osThreadNew(StartSIM800SendTask, NULL, &SIM800SendTask_attributes);
 8001128:	4a29      	ldr	r2, [pc, #164]	; (80011d0 <main+0x198>)
 800112a:	2100      	movs	r1, #0
 800112c:	4829      	ldr	r0, [pc, #164]	; (80011d4 <main+0x19c>)
 800112e:	f009 ff0b 	bl	800af48 <osThreadNew>
 8001132:	4603      	mov	r3, r0
 8001134:	4a28      	ldr	r2, [pc, #160]	; (80011d8 <main+0x1a0>)
 8001136:	6013      	str	r3, [r2, #0]

  /* creation of PINGTask */
  //PINGTaskHandle = osThreadNew(PINGStartTask, NULL, &PINGTask_attributes);

  /* creation of SIM800StartTask */
  SIM800StartTaskHandle = osThreadNew(StartSIM800Task, NULL, &SIM800StartTask_attributes);
 8001138:	4a28      	ldr	r2, [pc, #160]	; (80011dc <main+0x1a4>)
 800113a:	2100      	movs	r1, #0
 800113c:	4828      	ldr	r0, [pc, #160]	; (80011e0 <main+0x1a8>)
 800113e:	f009 ff03 	bl	800af48 <osThreadNew>
 8001142:	4603      	mov	r3, r0
 8001144:	4a27      	ldr	r2, [pc, #156]	; (80011e4 <main+0x1ac>)
 8001146:	6013      	str	r3, [r2, #0]

  /* creation of MQTTConnectTask */
  //MQTTConnectTaskHandle = osThreadNew(StartMQTTConnectTask, NULL, &MQTTConnectTask_attributes);

  /* creation of MessHandlerTask */
  MessHandlerTaskHandle = osThreadNew(StartMessHandlerTask, NULL, &MessHandlerTask_attributes);
 8001148:	4a27      	ldr	r2, [pc, #156]	; (80011e8 <main+0x1b0>)
 800114a:	2100      	movs	r1, #0
 800114c:	4827      	ldr	r0, [pc, #156]	; (80011ec <main+0x1b4>)
 800114e:	f009 fefb 	bl	800af48 <osThreadNew>
 8001152:	4603      	mov	r3, r0
 8001154:	4a26      	ldr	r2, [pc, #152]	; (80011f0 <main+0x1b8>)
 8001156:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001158:	f009 fed0 	bl	800aefc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800115c:	e7fe      	b.n	800115c <main+0x124>
 800115e:	bf00      	nop
 8001160:	200000b8 	.word	0x200000b8
 8001164:	08010e2c 	.word	0x08010e2c
 8001168:	20000464 	.word	0x20000464
 800116c:	08010e3c 	.word	0x08010e3c
 8001170:	20000468 	.word	0x20000468
 8001174:	08010e4c 	.word	0x08010e4c
 8001178:	2000046c 	.word	0x2000046c
 800117c:	08010e0c 	.word	0x08010e0c
 8001180:	080036e9 	.word	0x080036e9
 8001184:	2000045c 	.word	0x2000045c
 8001188:	08010e1c 	.word	0x08010e1c
 800118c:	08003709 	.word	0x08003709
 8001190:	20000460 	.word	0x20000460
 8001194:	08010dc4 	.word	0x08010dc4
 8001198:	20000450 	.word	0x20000450
 800119c:	08010ddc 	.word	0x08010ddc
 80011a0:	20000454 	.word	0x20000454
 80011a4:	08010df4 	.word	0x08010df4
 80011a8:	20000458 	.word	0x20000458
 80011ac:	08010c80 	.word	0x08010c80
 80011b0:	080019c1 	.word	0x080019c1
 80011b4:	2000042c 	.word	0x2000042c
 80011b8:	08010ca4 	.word	0x08010ca4
 80011bc:	08001a45 	.word	0x08001a45
 80011c0:	20000430 	.word	0x20000430
 80011c4:	08010cc8 	.word	0x08010cc8
 80011c8:	08001ce9 	.word	0x08001ce9
 80011cc:	20000434 	.word	0x20000434
 80011d0:	08010cec 	.word	0x08010cec
 80011d4:	08001d09 	.word	0x08001d09
 80011d8:	20000438 	.word	0x20000438
 80011dc:	08010d34 	.word	0x08010d34
 80011e0:	08002125 	.word	0x08002125
 80011e4:	20000440 	.word	0x20000440
 80011e8:	08010d7c 	.word	0x08010d7c
 80011ec:	08002c35 	.word	0x08002c35
 80011f0:	20000448 	.word	0x20000448

080011f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b094      	sub	sp, #80	; 0x50
 80011f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011fa:	f107 031c 	add.w	r3, r7, #28
 80011fe:	2234      	movs	r2, #52	; 0x34
 8001200:	2100      	movs	r1, #0
 8001202:	4618      	mov	r0, r3
 8001204:	f00d fea2 	bl	800ef4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001208:	f107 0308 	add.w	r3, r7, #8
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001218:	2300      	movs	r3, #0
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	4b2a      	ldr	r3, [pc, #168]	; (80012c8 <SystemClock_Config+0xd4>)
 800121e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001220:	4a29      	ldr	r2, [pc, #164]	; (80012c8 <SystemClock_Config+0xd4>)
 8001222:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001226:	6413      	str	r3, [r2, #64]	; 0x40
 8001228:	4b27      	ldr	r3, [pc, #156]	; (80012c8 <SystemClock_Config+0xd4>)
 800122a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001230:	607b      	str	r3, [r7, #4]
 8001232:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001234:	2300      	movs	r3, #0
 8001236:	603b      	str	r3, [r7, #0]
 8001238:	4b24      	ldr	r3, [pc, #144]	; (80012cc <SystemClock_Config+0xd8>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001240:	4a22      	ldr	r2, [pc, #136]	; (80012cc <SystemClock_Config+0xd8>)
 8001242:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001246:	6013      	str	r3, [r2, #0]
 8001248:	4b20      	ldr	r3, [pc, #128]	; (80012cc <SystemClock_Config+0xd8>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001250:	603b      	str	r3, [r7, #0]
 8001252:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001254:	2302      	movs	r3, #2
 8001256:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001258:	2301      	movs	r3, #1
 800125a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800125c:	2310      	movs	r3, #16
 800125e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001260:	2302      	movs	r3, #2
 8001262:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001264:	2300      	movs	r3, #0
 8001266:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001268:	2310      	movs	r3, #16
 800126a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 800126c:	23c0      	movs	r3, #192	; 0xc0
 800126e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001270:	2302      	movs	r3, #2
 8001272:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001274:	2302      	movs	r3, #2
 8001276:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001278:	2302      	movs	r3, #2
 800127a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800127c:	f107 031c 	add.w	r3, r7, #28
 8001280:	4618      	mov	r0, r3
 8001282:	f007 f8b9 	bl	80083f8 <HAL_RCC_OscConfig>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800128c:	f002 fa5e 	bl	800374c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001290:	230f      	movs	r3, #15
 8001292:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001294:	2302      	movs	r3, #2
 8001296:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001298:	2300      	movs	r3, #0
 800129a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800129c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80012a8:	f107 0308 	add.w	r3, r7, #8
 80012ac:	2103      	movs	r1, #3
 80012ae:	4618      	mov	r0, r3
 80012b0:	f006 fdac 	bl	8007e0c <HAL_RCC_ClockConfig>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <SystemClock_Config+0xca>
  {
    Error_Handler();
 80012ba:	f002 fa47 	bl	800374c <Error_Handler>
  }
}
 80012be:	bf00      	nop
 80012c0:	3750      	adds	r7, #80	; 0x50
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40023800 	.word	0x40023800
 80012cc:	40007000 	.word	0x40007000

080012d0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80012d4:	4b12      	ldr	r3, [pc, #72]	; (8001320 <MX_I2C2_Init+0x50>)
 80012d6:	4a13      	ldr	r2, [pc, #76]	; (8001324 <MX_I2C2_Init+0x54>)
 80012d8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80012da:	4b11      	ldr	r3, [pc, #68]	; (8001320 <MX_I2C2_Init+0x50>)
 80012dc:	4a12      	ldr	r2, [pc, #72]	; (8001328 <MX_I2C2_Init+0x58>)
 80012de:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012e0:	4b0f      	ldr	r3, [pc, #60]	; (8001320 <MX_I2C2_Init+0x50>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80012e6:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <MX_I2C2_Init+0x50>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012ec:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <MX_I2C2_Init+0x50>)
 80012ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012f2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012f4:	4b0a      	ldr	r3, [pc, #40]	; (8001320 <MX_I2C2_Init+0x50>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80012fa:	4b09      	ldr	r3, [pc, #36]	; (8001320 <MX_I2C2_Init+0x50>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001300:	4b07      	ldr	r3, [pc, #28]	; (8001320 <MX_I2C2_Init+0x50>)
 8001302:	2200      	movs	r2, #0
 8001304:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001306:	4b06      	ldr	r3, [pc, #24]	; (8001320 <MX_I2C2_Init+0x50>)
 8001308:	2200      	movs	r2, #0
 800130a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800130c:	4804      	ldr	r0, [pc, #16]	; (8001320 <MX_I2C2_Init+0x50>)
 800130e:	f004 f917 	bl	8005540 <HAL_I2C_Init>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001318:	f002 fa18 	bl	800374c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800131c:	bf00      	nop
 800131e:	bd80      	pop	{r7, pc}
 8001320:	200000b8 	.word	0x200000b8
 8001324:	40005800 	.word	0x40005800
 8001328:	000186a0 	.word	0x000186a0

0800132c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001330:	4b17      	ldr	r3, [pc, #92]	; (8001390 <MX_SPI2_Init+0x64>)
 8001332:	4a18      	ldr	r2, [pc, #96]	; (8001394 <MX_SPI2_Init+0x68>)
 8001334:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001336:	4b16      	ldr	r3, [pc, #88]	; (8001390 <MX_SPI2_Init+0x64>)
 8001338:	f44f 7282 	mov.w	r2, #260	; 0x104
 800133c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800133e:	4b14      	ldr	r3, [pc, #80]	; (8001390 <MX_SPI2_Init+0x64>)
 8001340:	2200      	movs	r2, #0
 8001342:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001344:	4b12      	ldr	r3, [pc, #72]	; (8001390 <MX_SPI2_Init+0x64>)
 8001346:	2200      	movs	r2, #0
 8001348:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800134a:	4b11      	ldr	r3, [pc, #68]	; (8001390 <MX_SPI2_Init+0x64>)
 800134c:	2200      	movs	r2, #0
 800134e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001350:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <MX_SPI2_Init+0x64>)
 8001352:	2200      	movs	r2, #0
 8001354:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001356:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <MX_SPI2_Init+0x64>)
 8001358:	f44f 7200 	mov.w	r2, #512	; 0x200
 800135c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800135e:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <MX_SPI2_Init+0x64>)
 8001360:	2200      	movs	r2, #0
 8001362:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001364:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <MX_SPI2_Init+0x64>)
 8001366:	2200      	movs	r2, #0
 8001368:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800136a:	4b09      	ldr	r3, [pc, #36]	; (8001390 <MX_SPI2_Init+0x64>)
 800136c:	2200      	movs	r2, #0
 800136e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001370:	4b07      	ldr	r3, [pc, #28]	; (8001390 <MX_SPI2_Init+0x64>)
 8001372:	2200      	movs	r2, #0
 8001374:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001376:	4b06      	ldr	r3, [pc, #24]	; (8001390 <MX_SPI2_Init+0x64>)
 8001378:	220a      	movs	r2, #10
 800137a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800137c:	4804      	ldr	r0, [pc, #16]	; (8001390 <MX_SPI2_Init+0x64>)
 800137e:	f007 fad9 	bl	8008934 <HAL_SPI_Init>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001388:	f002 f9e0 	bl	800374c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800138c:	bf00      	nop
 800138e:	bd80      	pop	{r7, pc}
 8001390:	200001cc 	.word	0x200001cc
 8001394:	40003800 	.word	0x40003800

08001398 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800139c:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <MX_USART1_UART_Init+0x4c>)
 800139e:	4a12      	ldr	r2, [pc, #72]	; (80013e8 <MX_USART1_UART_Init+0x50>)
 80013a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 80013a2:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <MX_USART1_UART_Init+0x4c>)
 80013a4:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80013a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013aa:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <MX_USART1_UART_Init+0x4c>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013b0:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <MX_USART1_UART_Init+0x4c>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013b6:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <MX_USART1_UART_Init+0x4c>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013bc:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <MX_USART1_UART_Init+0x4c>)
 80013be:	220c      	movs	r2, #12
 80013c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013c2:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <MX_USART1_UART_Init+0x4c>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c8:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <MX_USART1_UART_Init+0x4c>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013ce:	4805      	ldr	r0, [pc, #20]	; (80013e4 <MX_USART1_UART_Init+0x4c>)
 80013d0:	f008 f990 	bl	80096f4 <HAL_UART_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013da:	f002 f9b7 	bl	800374c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000224 	.word	0x20000224
 80013e8:	40011000 	.word	0x40011000

080013ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013f0:	4b11      	ldr	r3, [pc, #68]	; (8001438 <MX_USART2_UART_Init+0x4c>)
 80013f2:	4a12      	ldr	r2, [pc, #72]	; (800143c <MX_USART2_UART_Init+0x50>)
 80013f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80013f6:	4b10      	ldr	r3, [pc, #64]	; (8001438 <MX_USART2_UART_Init+0x4c>)
 80013f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80013fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013fe:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <MX_USART2_UART_Init+0x4c>)
 8001400:	2200      	movs	r2, #0
 8001402:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001404:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <MX_USART2_UART_Init+0x4c>)
 8001406:	2200      	movs	r2, #0
 8001408:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800140a:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <MX_USART2_UART_Init+0x4c>)
 800140c:	2200      	movs	r2, #0
 800140e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001410:	4b09      	ldr	r3, [pc, #36]	; (8001438 <MX_USART2_UART_Init+0x4c>)
 8001412:	220c      	movs	r2, #12
 8001414:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001416:	4b08      	ldr	r3, [pc, #32]	; (8001438 <MX_USART2_UART_Init+0x4c>)
 8001418:	2200      	movs	r2, #0
 800141a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800141c:	4b06      	ldr	r3, [pc, #24]	; (8001438 <MX_USART2_UART_Init+0x4c>)
 800141e:	2200      	movs	r2, #0
 8001420:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001422:	4805      	ldr	r0, [pc, #20]	; (8001438 <MX_USART2_UART_Init+0x4c>)
 8001424:	f008 f966 	bl	80096f4 <HAL_UART_Init>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800142e:	f002 f98d 	bl	800374c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000268 	.word	0x20000268
 800143c:	40004400 	.word	0x40004400

08001440 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	607b      	str	r3, [r7, #4]
 800144a:	4b27      	ldr	r3, [pc, #156]	; (80014e8 <MX_DMA_Init+0xa8>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a26      	ldr	r2, [pc, #152]	; (80014e8 <MX_DMA_Init+0xa8>)
 8001450:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b24      	ldr	r3, [pc, #144]	; (80014e8 <MX_DMA_Init+0xa8>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	603b      	str	r3, [r7, #0]
 8001466:	4b20      	ldr	r3, [pc, #128]	; (80014e8 <MX_DMA_Init+0xa8>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	4a1f      	ldr	r2, [pc, #124]	; (80014e8 <MX_DMA_Init+0xa8>)
 800146c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
 8001472:	4b1d      	ldr	r3, [pc, #116]	; (80014e8 <MX_DMA_Init+0xa8>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800147a:	603b      	str	r3, [r7, #0]
 800147c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 800147e:	2200      	movs	r2, #0
 8001480:	2105      	movs	r1, #5
 8001482:	200d      	movs	r0, #13
 8001484:	f003 fa3d 	bl	8004902 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001488:	200d      	movs	r0, #13
 800148a:	f003 fa56 	bl	800493a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800148e:	2200      	movs	r2, #0
 8001490:	2105      	movs	r1, #5
 8001492:	2010      	movs	r0, #16
 8001494:	f003 fa35 	bl	8004902 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001498:	2010      	movs	r0, #16
 800149a:	f003 fa4e 	bl	800493a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800149e:	2200      	movs	r2, #0
 80014a0:	2105      	movs	r1, #5
 80014a2:	2011      	movs	r0, #17
 80014a4:	f003 fa2d 	bl	8004902 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80014a8:	2011      	movs	r0, #17
 80014aa:	f003 fa46 	bl	800493a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 80014ae:	2200      	movs	r2, #0
 80014b0:	2105      	movs	r1, #5
 80014b2:	202f      	movs	r0, #47	; 0x2f
 80014b4:	f003 fa25 	bl	8004902 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80014b8:	202f      	movs	r0, #47	; 0x2f
 80014ba:	f003 fa3e 	bl	800493a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80014be:	2200      	movs	r2, #0
 80014c0:	2105      	movs	r1, #5
 80014c2:	203a      	movs	r0, #58	; 0x3a
 80014c4:	f003 fa1d 	bl	8004902 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80014c8:	203a      	movs	r0, #58	; 0x3a
 80014ca:	f003 fa36 	bl	800493a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2105      	movs	r1, #5
 80014d2:	2046      	movs	r0, #70	; 0x46
 80014d4:	f003 fa15 	bl	8004902 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80014d8:	2046      	movs	r0, #70	; 0x46
 80014da:	f003 fa2e 	bl	800493a <HAL_NVIC_EnableIRQ>

}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40023800 	.word	0x40023800

080014ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b088      	sub	sp, #32
 80014f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f2:	f107 030c 	add.w	r3, r7, #12
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	60da      	str	r2, [r3, #12]
 8001500:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60bb      	str	r3, [r7, #8]
 8001506:	4b34      	ldr	r3, [pc, #208]	; (80015d8 <MX_GPIO_Init+0xec>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	4a33      	ldr	r2, [pc, #204]	; (80015d8 <MX_GPIO_Init+0xec>)
 800150c:	f043 0304 	orr.w	r3, r3, #4
 8001510:	6313      	str	r3, [r2, #48]	; 0x30
 8001512:	4b31      	ldr	r3, [pc, #196]	; (80015d8 <MX_GPIO_Init+0xec>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	f003 0304 	and.w	r3, r3, #4
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	607b      	str	r3, [r7, #4]
 8001522:	4b2d      	ldr	r3, [pc, #180]	; (80015d8 <MX_GPIO_Init+0xec>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	4a2c      	ldr	r2, [pc, #176]	; (80015d8 <MX_GPIO_Init+0xec>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	6313      	str	r3, [r2, #48]	; 0x30
 800152e:	4b2a      	ldr	r3, [pc, #168]	; (80015d8 <MX_GPIO_Init+0xec>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	603b      	str	r3, [r7, #0]
 800153e:	4b26      	ldr	r3, [pc, #152]	; (80015d8 <MX_GPIO_Init+0xec>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4a25      	ldr	r2, [pc, #148]	; (80015d8 <MX_GPIO_Init+0xec>)
 8001544:	f043 0302 	orr.w	r3, r3, #2
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
 800154a:	4b23      	ldr	r3, [pc, #140]	; (80015d8 <MX_GPIO_Init+0xec>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	603b      	str	r3, [r7, #0]
 8001554:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_3, GPIO_PIN_SET);
 8001556:	2201      	movs	r2, #1
 8001558:	210a      	movs	r1, #10
 800155a:	4820      	ldr	r0, [pc, #128]	; (80015dc <MX_GPIO_Init+0xf0>)
 800155c:	f003 ffbc 	bl	80054d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FLASH_CS_Pin|GPIO_PIN_6, GPIO_PIN_SET);
 8001560:	2201      	movs	r2, #1
 8001562:	2150      	movs	r1, #80	; 0x50
 8001564:	481e      	ldr	r0, [pc, #120]	; (80015e0 <MX_GPIO_Init+0xf4>)
 8001566:	f003 ffb7 	bl	80054d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(temp_GPIO_Port, temp_Pin, GPIO_PIN_RESET);
 800156a:	2200      	movs	r2, #0
 800156c:	2180      	movs	r1, #128	; 0x80
 800156e:	481c      	ldr	r0, [pc, #112]	; (80015e0 <MX_GPIO_Init+0xf4>)
 8001570:	f003 ffb2 	bl	80054d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SIM_START_Pin|SIM_RESET_Pin, GPIO_PIN_RESET);
 8001574:	2200      	movs	r2, #0
 8001576:	2130      	movs	r1, #48	; 0x30
 8001578:	4818      	ldr	r0, [pc, #96]	; (80015dc <MX_GPIO_Init+0xf0>)
 800157a:	f003 ffad 	bl	80054d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC3 SIM_START_Pin SIM_RESET_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|SIM_START_Pin|SIM_RESET_Pin;
 800157e:	233a      	movs	r3, #58	; 0x3a
 8001580:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001582:	2301      	movs	r3, #1
 8001584:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158a:	2300      	movs	r3, #0
 800158c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800158e:	f107 030c 	add.w	r3, r7, #12
 8001592:	4619      	mov	r1, r3
 8001594:	4811      	ldr	r0, [pc, #68]	; (80015dc <MX_GPIO_Init+0xf0>)
 8001596:	f003 fdf3 	bl	8005180 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800159a:	2304      	movs	r3, #4
 800159c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800159e:	2300      	movs	r3, #0
 80015a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a6:	f107 030c 	add.w	r3, r7, #12
 80015aa:	4619      	mov	r1, r3
 80015ac:	480b      	ldr	r0, [pc, #44]	; (80015dc <MX_GPIO_Init+0xf0>)
 80015ae:	f003 fde7 	bl	8005180 <HAL_GPIO_Init>

  /*Configure GPIO pins : FLASH_CS_Pin PA6 temp_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin|GPIO_PIN_6|temp_Pin;
 80015b2:	23d0      	movs	r3, #208	; 0xd0
 80015b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b6:	2301      	movs	r3, #1
 80015b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015be:	2300      	movs	r3, #0
 80015c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c2:	f107 030c 	add.w	r3, r7, #12
 80015c6:	4619      	mov	r1, r3
 80015c8:	4805      	ldr	r0, [pc, #20]	; (80015e0 <MX_GPIO_Init+0xf4>)
 80015ca:	f003 fdd9 	bl	8005180 <HAL_GPIO_Init>

}
 80015ce:	bf00      	nop
 80015d0:	3720      	adds	r7, #32
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40020800 	.word	0x40020800
 80015e0:	40020000 	.word	0x40020000

080015e4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4a06      	ldr	r2, [pc, #24]	; (8001608 <HAL_UART_RxCpltCallback+0x24>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d102      	bne.n	80015fa <HAL_UART_RxCpltCallback+0x16>
	{
		UART2_RX_finish = 1;
 80015f4:	4b05      	ldr	r3, [pc, #20]	; (800160c <HAL_UART_RxCpltCallback+0x28>)
 80015f6:	2201      	movs	r2, #1
 80015f8:	701a      	strb	r2, [r3, #0]
	}
}
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	20000268 	.word	0x20000268
 800160c:	20000478 	.word	0x20000478

08001610 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4a06      	ldr	r2, [pc, #24]	; (8001634 <HAL_UART_TxCpltCallback+0x24>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d102      	bne.n	8001626 <HAL_UART_TxCpltCallback+0x16>
	{
		UART2_TX_finish = 1;
 8001620:	4b05      	ldr	r3, [pc, #20]	; (8001638 <HAL_UART_TxCpltCallback+0x28>)
 8001622:	2201      	movs	r2, #1
 8001624:	701a      	strb	r2, [r3, #0]
	}
}
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	20000268 	.word	0x20000268
 8001638:	20000477 	.word	0x20000477

0800163c <SPI2_Init_Master>:

void SPI2_Init_Master(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001642:	1d3b      	adds	r3, r7, #4
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8001650:	2201      	movs	r2, #1
 8001652:	2110      	movs	r1, #16
 8001654:	480f      	ldr	r0, [pc, #60]	; (8001694 <SPI2_Init_Master+0x58>)
 8001656:	f003 ff3f 	bl	80054d8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : FLASH_CS_Pin */
	GPIO_InitStruct.Pin = FLASH_CS_Pin;
 800165a:	2310      	movs	r3, #16
 800165c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165e:	2301      	movs	r3, #1
 8001660:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001666:	2300      	movs	r3, #0
 8001668:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 800166a:	1d3b      	adds	r3, r7, #4
 800166c:	4619      	mov	r1, r3
 800166e:	4809      	ldr	r0, [pc, #36]	; (8001694 <SPI2_Init_Master+0x58>)
 8001670:	f003 fd86 	bl	8005180 <HAL_GPIO_Init>

	hspi2.Init.Mode = SPI_MODE_MASTER;
 8001674:	4b08      	ldr	r3, [pc, #32]	; (8001698 <SPI2_Init_Master+0x5c>)
 8001676:	f44f 7282 	mov.w	r2, #260	; 0x104
 800167a:	605a      	str	r2, [r3, #4]
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800167c:	4806      	ldr	r0, [pc, #24]	; (8001698 <SPI2_Init_Master+0x5c>)
 800167e:	f007 f959 	bl	8008934 <HAL_SPI_Init>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <SPI2_Init_Master+0x50>
	{
		Error_Handler();
 8001688:	f002 f860 	bl	800374c <Error_Handler>
	}
}
 800168c:	bf00      	nop
 800168e:	3718      	adds	r7, #24
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40020000 	.word	0x40020000
 8001698:	200001cc 	.word	0x200001cc

0800169c <Make_MQTT_send_string>:
  * @param  send_MQTT_message[] String, where will be result.
  * @param  msg[] struct with message for sending with MQTT.
 */

void Make_MQTT_send_string(uint8_t send_MQTT_message[], message_type msg)
{
 800169c:	b084      	sub	sp, #16
 800169e:	b590      	push	{r4, r7, lr}
 80016a0:	b083      	sub	sp, #12
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
 80016a6:	f107 001c 	add.w	r0, r7, #28
 80016aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	send_MQTT_message[0] = 0x30;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2230      	movs	r2, #48	; 0x30
 80016b2:	701a      	strb	r2, [r3, #0]
    send_MQTT_message[1] = strlen(msg.str) + strlen(TOPIC) + 2;
 80016b4:	f107 031c 	add.w	r3, r7, #28
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7fe fda9 	bl	8000210 <strlen>
 80016be:	4603      	mov	r3, r0
 80016c0:	b2dc      	uxtb	r4, r3
 80016c2:	4819      	ldr	r0, [pc, #100]	; (8001728 <Make_MQTT_send_string+0x8c>)
 80016c4:	f7fe fda4 	bl	8000210 <strlen>
 80016c8:	4603      	mov	r3, r0
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	4423      	add	r3, r4
 80016ce:	b2da      	uxtb	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3301      	adds	r3, #1
 80016d4:	3202      	adds	r2, #2
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	701a      	strb	r2, [r3, #0]
    send_MQTT_message[2] = 0;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	3302      	adds	r3, #2
 80016de:	2200      	movs	r2, #0
 80016e0:	701a      	strb	r2, [r3, #0]
    send_MQTT_message[3] = strlen(TOPIC);
 80016e2:	4811      	ldr	r0, [pc, #68]	; (8001728 <Make_MQTT_send_string+0x8c>)
 80016e4:	f7fe fd94 	bl	8000210 <strlen>
 80016e8:	4602      	mov	r2, r0
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	3303      	adds	r3, #3
 80016ee:	b2d2      	uxtb	r2, r2
 80016f0:	701a      	strb	r2, [r3, #0]
    sprintf(send_MQTT_message + 4,"%s",TOPIC);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	3304      	adds	r3, #4
 80016f6:	4a0c      	ldr	r2, [pc, #48]	; (8001728 <Make_MQTT_send_string+0x8c>)
 80016f8:	490c      	ldr	r1, [pc, #48]	; (800172c <Make_MQTT_send_string+0x90>)
 80016fa:	4618      	mov	r0, r3
 80016fc:	f00d fc62 	bl	800efc4 <siprintf>
    sprintf(send_MQTT_message + 4 + strlen(TOPIC),"%s",msg.str);
 8001700:	4809      	ldr	r0, [pc, #36]	; (8001728 <Make_MQTT_send_string+0x8c>)
 8001702:	f7fe fd85 	bl	8000210 <strlen>
 8001706:	4603      	mov	r3, r0
 8001708:	3304      	adds	r3, #4
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	4413      	add	r3, r2
 800170e:	f107 021c 	add.w	r2, r7, #28
 8001712:	4906      	ldr	r1, [pc, #24]	; (800172c <Make_MQTT_send_string+0x90>)
 8001714:	4618      	mov	r0, r3
 8001716:	f00d fc55 	bl	800efc4 <siprintf>
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001724:	b004      	add	sp, #16
 8001726:	4770      	bx	lr
 8001728:	20000010 	.word	0x20000010
 800172c:	080102f8 	.word	0x080102f8

08001730 <String_in_SIM800BuffRx>:
  * @param  exm[] String, that we search in Receive buffer SIM800.
  * @retval Is string in Receive buffer SIM800.
 */

uint8_t String_in_SIM800BuffRx(uint8_t exm[])
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(exm);
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7fe fd69 	bl	8000210 <strlen>
 800173e:	4603      	mov	r3, r0
 8001740:	733b      	strb	r3, [r7, #12]
	uint8_t ans = 0;
 8001742:	2300      	movs	r3, #0
 8001744:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < BUFF_SIM_SIZE - len; i++)
 8001746:	2300      	movs	r3, #0
 8001748:	73bb      	strb	r3, [r7, #14]
 800174a:	e025      	b.n	8001798 <String_in_SIM800BuffRx+0x68>
	{
		if (SIM800BuffRx[i] == exm[0])
 800174c:	7bbb      	ldrb	r3, [r7, #14]
 800174e:	4a19      	ldr	r2, [pc, #100]	; (80017b4 <String_in_SIM800BuffRx+0x84>)
 8001750:	5cd2      	ldrb	r2, [r2, r3]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	429a      	cmp	r2, r3
 8001758:	d11b      	bne.n	8001792 <String_in_SIM800BuffRx+0x62>
		{
			ans = 1;
 800175a:	2301      	movs	r3, #1
 800175c:	73fb      	strb	r3, [r7, #15]
			for (uint8_t k = 0; k < len; k++)
 800175e:	2300      	movs	r3, #0
 8001760:	737b      	strb	r3, [r7, #13]
 8001762:	e00f      	b.n	8001784 <String_in_SIM800BuffRx+0x54>
			{
				if (SIM800BuffRx[i+k] != exm[k])
 8001764:	7bba      	ldrb	r2, [r7, #14]
 8001766:	7b7b      	ldrb	r3, [r7, #13]
 8001768:	4413      	add	r3, r2
 800176a:	4a12      	ldr	r2, [pc, #72]	; (80017b4 <String_in_SIM800BuffRx+0x84>)
 800176c:	5cd2      	ldrb	r2, [r2, r3]
 800176e:	7b7b      	ldrb	r3, [r7, #13]
 8001770:	6879      	ldr	r1, [r7, #4]
 8001772:	440b      	add	r3, r1
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	429a      	cmp	r2, r3
 8001778:	d001      	beq.n	800177e <String_in_SIM800BuffRx+0x4e>
				{
					ans = 0;
 800177a:	2300      	movs	r3, #0
 800177c:	73fb      	strb	r3, [r7, #15]
			for (uint8_t k = 0; k < len; k++)
 800177e:	7b7b      	ldrb	r3, [r7, #13]
 8001780:	3301      	adds	r3, #1
 8001782:	737b      	strb	r3, [r7, #13]
 8001784:	7b7a      	ldrb	r2, [r7, #13]
 8001786:	7b3b      	ldrb	r3, [r7, #12]
 8001788:	429a      	cmp	r2, r3
 800178a:	d3eb      	bcc.n	8001764 <String_in_SIM800BuffRx+0x34>
				}
			}
			if (ans)
 800178c:	7bfb      	ldrb	r3, [r7, #15]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d109      	bne.n	80017a6 <String_in_SIM800BuffRx+0x76>
	for (uint8_t i = 0; i < BUFF_SIM_SIZE - len; i++)
 8001792:	7bbb      	ldrb	r3, [r7, #14]
 8001794:	3301      	adds	r3, #1
 8001796:	73bb      	strb	r3, [r7, #14]
 8001798:	7bba      	ldrb	r2, [r7, #14]
 800179a:	7b3b      	ldrb	r3, [r7, #12]
 800179c:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80017a0:	429a      	cmp	r2, r3
 80017a2:	dbd3      	blt.n	800174c <String_in_SIM800BuffRx+0x1c>
 80017a4:	e000      	b.n	80017a8 <String_in_SIM800BuffRx+0x78>
				break;
 80017a6:	bf00      	nop
		}
	}
	return ans;
 80017a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	200004f4 	.word	0x200004f4

080017b8 <String_in_String>:

uint8_t String_in_String(uint8_t str[], uint8_t size, uint8_t exm[])
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	460b      	mov	r3, r1
 80017c2:	607a      	str	r2, [r7, #4]
 80017c4:	72fb      	strb	r3, [r7, #11]
	uint8_t len = strlen(exm);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f7fe fd22 	bl	8000210 <strlen>
 80017cc:	4603      	mov	r3, r0
 80017ce:	753b      	strb	r3, [r7, #20]
	uint8_t ans = 0;
 80017d0:	2300      	movs	r3, #0
 80017d2:	75fb      	strb	r3, [r7, #23]
	for (uint8_t i = 0; i < size - len; i++)
 80017d4:	2300      	movs	r3, #0
 80017d6:	75bb      	strb	r3, [r7, #22]
 80017d8:	e028      	b.n	800182c <String_in_String+0x74>
	{
		if (str[i] == exm[0])
 80017da:	7dbb      	ldrb	r3, [r7, #22]
 80017dc:	68fa      	ldr	r2, [r7, #12]
 80017de:	4413      	add	r3, r2
 80017e0:	781a      	ldrb	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d11d      	bne.n	8001826 <String_in_String+0x6e>
		{
			ans = 1;
 80017ea:	2301      	movs	r3, #1
 80017ec:	75fb      	strb	r3, [r7, #23]
			for (uint8_t k = 0; k < len; k++)
 80017ee:	2300      	movs	r3, #0
 80017f0:	757b      	strb	r3, [r7, #21]
 80017f2:	e011      	b.n	8001818 <String_in_String+0x60>
			{
				if (str[i+k] != exm[k])
 80017f4:	7dba      	ldrb	r2, [r7, #22]
 80017f6:	7d7b      	ldrb	r3, [r7, #21]
 80017f8:	4413      	add	r3, r2
 80017fa:	461a      	mov	r2, r3
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	4413      	add	r3, r2
 8001800:	781a      	ldrb	r2, [r3, #0]
 8001802:	7d7b      	ldrb	r3, [r7, #21]
 8001804:	6879      	ldr	r1, [r7, #4]
 8001806:	440b      	add	r3, r1
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	429a      	cmp	r2, r3
 800180c:	d001      	beq.n	8001812 <String_in_String+0x5a>
				{
					ans = 0;
 800180e:	2300      	movs	r3, #0
 8001810:	75fb      	strb	r3, [r7, #23]
			for (uint8_t k = 0; k < len; k++)
 8001812:	7d7b      	ldrb	r3, [r7, #21]
 8001814:	3301      	adds	r3, #1
 8001816:	757b      	strb	r3, [r7, #21]
 8001818:	7d7a      	ldrb	r2, [r7, #21]
 800181a:	7d3b      	ldrb	r3, [r7, #20]
 800181c:	429a      	cmp	r2, r3
 800181e:	d3e9      	bcc.n	80017f4 <String_in_String+0x3c>
				}
			}
			if (ans)
 8001820:	7dfb      	ldrb	r3, [r7, #23]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d109      	bne.n	800183a <String_in_String+0x82>
	for (uint8_t i = 0; i < size - len; i++)
 8001826:	7dbb      	ldrb	r3, [r7, #22]
 8001828:	3301      	adds	r3, #1
 800182a:	75bb      	strb	r3, [r7, #22]
 800182c:	7dba      	ldrb	r2, [r7, #22]
 800182e:	7af9      	ldrb	r1, [r7, #11]
 8001830:	7d3b      	ldrb	r3, [r7, #20]
 8001832:	1acb      	subs	r3, r1, r3
 8001834:	429a      	cmp	r2, r3
 8001836:	dbd0      	blt.n	80017da <String_in_String+0x22>
 8001838:	e000      	b.n	800183c <String_in_String+0x84>
				break;
 800183a:	bf00      	nop
		}
	}
	return ans;
 800183c:	7dfb      	ldrb	r3, [r7, #23]
}
 800183e:	4618      	mov	r0, r3
 8001840:	3718      	adds	r7, #24
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
	...

08001848 <USER_UART_IRQHandler>:

void USER_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
	// file stm32f1xx_hal_uart.c
	// comment
	// Set the UART DMA Half transfer complete callback
	// huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt

	if(huart == &huart1) //Determine whether it is serial port 1
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4a28      	ldr	r2, [pc, #160]	; (80018f4 <USER_UART_IRQHandler+0xac>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d148      	bne.n	80018ea <USER_UART_IRQHandler+0xa2>
	{
		if(RESET != __HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE))   //Judging whether it is idle interruption
 8001858:	4b26      	ldr	r3, [pc, #152]	; (80018f4 <USER_UART_IRQHandler+0xac>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0310 	and.w	r3, r3, #16
 8001862:	2b10      	cmp	r3, #16
 8001864:	d141      	bne.n	80018ea <USER_UART_IRQHandler+0xa2>
		{
			HAL_UART_DMAStop(&huart1);
 8001866:	4823      	ldr	r0, [pc, #140]	; (80018f4 <USER_UART_IRQHandler+0xac>)
 8001868:	f008 f916 	bl	8009a98 <HAL_UART_DMAStop>
			__HAL_UART_CLEAR_IDLEFLAG(&huart1); //Clear idle interrupt sign (otherwise it will continue to enter interrupt)
 800186c:	2300      	movs	r3, #0
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	4b20      	ldr	r3, [pc, #128]	; (80018f4 <USER_UART_IRQHandler+0xac>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	4b1e      	ldr	r3, [pc, #120]	; (80018f4 <USER_UART_IRQHandler+0xac>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
			RX = 1;
 8001882:	4b1d      	ldr	r3, [pc, #116]	; (80018f8 <USER_UART_IRQHandler+0xb0>)
 8001884:	2201      	movs	r2, #1
 8001886:	701a      	strb	r2, [r3, #0]
			if (Broker_connect)
 8001888:	4b1c      	ldr	r3, [pc, #112]	; (80018fc <USER_UART_IRQHandler+0xb4>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d02c      	beq.n	80018ea <USER_UART_IRQHandler+0xa2>
			{

				if (String_in_SIM800BuffRx(";;"))
 8001890:	481b      	ldr	r0, [pc, #108]	; (8001900 <USER_UART_IRQHandler+0xb8>)
 8001892:	f7ff ff4d 	bl	8001730 <String_in_SIM800BuffRx>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d018      	beq.n	80018ce <USER_UART_IRQHandler+0x86>
				{
					memcpy(&(Data_Queue.str), SIM800BuffRx, MESSAGE_TYPE_BUFF_SIZE);
 800189c:	4a19      	ldr	r2, [pc, #100]	; (8001904 <USER_UART_IRQHandler+0xbc>)
 800189e:	4b1a      	ldr	r3, [pc, #104]	; (8001908 <USER_UART_IRQHandler+0xc0>)
 80018a0:	4610      	mov	r0, r2
 80018a2:	4619      	mov	r1, r3
 80018a4:	2346      	movs	r3, #70	; 0x46
 80018a6:	461a      	mov	r2, r3
 80018a8:	f00d fb42 	bl	800ef30 <memcpy>
					memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80018ac:	2264      	movs	r2, #100	; 0x64
 80018ae:	2100      	movs	r1, #0
 80018b0:	4815      	ldr	r0, [pc, #84]	; (8001908 <USER_UART_IRQHandler+0xc0>)
 80018b2:	f00d fb4b 	bl	800ef4c <memset>
					osMessageQueuePut(RxSIM800QueueHandle, &Data_Queue, 0, NULL);
 80018b6:	4b15      	ldr	r3, [pc, #84]	; (800190c <USER_UART_IRQHandler+0xc4>)
 80018b8:	6818      	ldr	r0, [r3, #0]
 80018ba:	2300      	movs	r3, #0
 80018bc:	2200      	movs	r2, #0
 80018be:	4911      	ldr	r1, [pc, #68]	; (8001904 <USER_UART_IRQHandler+0xbc>)
 80018c0:	f009 ff7e 	bl	800b7c0 <osMessageQueuePut>
					HAL_UART_Receive_DMA(&huart1, SIM800BuffRx, BUFF_SIM_SIZE);
 80018c4:	2264      	movs	r2, #100	; 0x64
 80018c6:	4910      	ldr	r1, [pc, #64]	; (8001908 <USER_UART_IRQHandler+0xc0>)
 80018c8:	480a      	ldr	r0, [pc, #40]	; (80018f4 <USER_UART_IRQHandler+0xac>)
 80018ca:	f008 f8b5 	bl	8009a38 <HAL_UART_Receive_DMA>
				}

				if (!Tech_ans_wait)
 80018ce:	4b10      	ldr	r3, [pc, #64]	; (8001910 <USER_UART_IRQHandler+0xc8>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d109      	bne.n	80018ea <USER_UART_IRQHandler+0xa2>
				{
					memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80018d6:	2264      	movs	r2, #100	; 0x64
 80018d8:	2100      	movs	r1, #0
 80018da:	480b      	ldr	r0, [pc, #44]	; (8001908 <USER_UART_IRQHandler+0xc0>)
 80018dc:	f00d fb36 	bl	800ef4c <memset>
					HAL_UART_Receive_DMA(&huart1, SIM800BuffRx, BUFF_SIM_SIZE);
 80018e0:	2264      	movs	r2, #100	; 0x64
 80018e2:	4909      	ldr	r1, [pc, #36]	; (8001908 <USER_UART_IRQHandler+0xc0>)
 80018e4:	4803      	ldr	r0, [pc, #12]	; (80018f4 <USER_UART_IRQHandler+0xac>)
 80018e6:	f008 f8a7 	bl	8009a38 <HAL_UART_Receive_DMA>

			}
			//HAL_UART_DMAStop(&huart1);
		}
	}
}
 80018ea:	bf00      	nop
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20000224 	.word	0x20000224
 80018f8:	20000473 	.word	0x20000473
 80018fc:	20000474 	.word	0x20000474
 8001900:	080102fc 	.word	0x080102fc
 8001904:	200006e8 	.word	0x200006e8
 8001908:	200004f4 	.word	0x200004f4
 800190c:	20000458 	.word	0x20000458
 8001910:	20000475 	.word	0x20000475

08001914 <SIM800_Ans>:
  * @brief  Waiting special answer from SIM800.
  * @param  exm[] String, that we expect.
  * @retval Is special answer in Receive buffer SIM800.
  */
uint8_t SIM800_Ans(uint8_t exm[])
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
	RX = 0;
 800191c:	4b20      	ldr	r3, [pc, #128]	; (80019a0 <SIM800_Ans+0x8c>)
 800191e:	2200      	movs	r2, #0
 8001920:	701a      	strb	r2, [r3, #0]
	Tech_ans_wait = 1;
 8001922:	4b20      	ldr	r3, [pc, #128]	; (80019a4 <SIM800_Ans+0x90>)
 8001924:	2201      	movs	r2, #1
 8001926:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart1, SIM800BuffRx, BUFF_SIM_SIZE);
 8001928:	2264      	movs	r2, #100	; 0x64
 800192a:	491f      	ldr	r1, [pc, #124]	; (80019a8 <SIM800_Ans+0x94>)
 800192c:	481f      	ldr	r0, [pc, #124]	; (80019ac <SIM800_Ans+0x98>)
 800192e:	f008 f883 	bl	8009a38 <HAL_UART_Receive_DMA>

	SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // permission counter
 8001932:	4b1f      	ldr	r3, [pc, #124]	; (80019b0 <SIM800_Ans+0x9c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a1e      	ldr	r2, [pc, #120]	; (80019b0 <SIM800_Ans+0x9c>)
 8001938:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800193c:	6013      	str	r3, [r2, #0]
	DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;   // start counter
 800193e:	4b1d      	ldr	r3, [pc, #116]	; (80019b4 <SIM800_Ans+0xa0>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a1c      	ldr	r2, [pc, #112]	; (80019b4 <SIM800_Ans+0xa0>)
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	6013      	str	r3, [r2, #0]

	uint32_t tacts = HAL_RCC_GetSysClockFreq() / 1000000;
 800194a:	f006 fbab 	bl	80080a4 <HAL_RCC_GetSysClockFreq>
 800194e:	4603      	mov	r3, r0
 8001950:	4a19      	ldr	r2, [pc, #100]	; (80019b8 <SIM800_Ans+0xa4>)
 8001952:	fba2 2303 	umull	r2, r3, r2, r3
 8001956:	0c9b      	lsrs	r3, r3, #18
 8001958:	60fb      	str	r3, [r7, #12]
	tacts *= 6000000; //timeout - 6s
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	4a17      	ldr	r2, [pc, #92]	; (80019bc <SIM800_Ans+0xa8>)
 800195e:	fb02 f303 	mul.w	r3, r2, r3
 8001962:	60fb      	str	r3, [r7, #12]
	DWT->CYCCNT = 0; // clear counter
 8001964:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <SIM800_Ans+0xa0>)
 8001966:	2200      	movs	r2, #0
 8001968:	605a      	str	r2, [r3, #4]
	while (RX != 1 && DWT->CYCCNT < tacts) {};
 800196a:	bf00      	nop
 800196c:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <SIM800_Ans+0x8c>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d004      	beq.n	800197e <SIM800_Ans+0x6a>
 8001974:	4b0f      	ldr	r3, [pc, #60]	; (80019b4 <SIM800_Ans+0xa0>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	68fa      	ldr	r2, [r7, #12]
 800197a:	429a      	cmp	r2, r3
 800197c:	d8f6      	bhi.n	800196c <SIM800_Ans+0x58>
	Tech_ans_wait = 0;
 800197e:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <SIM800_Ans+0x90>)
 8001980:	2200      	movs	r2, #0
 8001982:	701a      	strb	r2, [r3, #0]
	if (!String_in_SIM800BuffRx(exm))
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f7ff fed3 	bl	8001730 <String_in_SIM800BuffRx>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d101      	bne.n	8001994 <SIM800_Ans+0x80>
	{
		return 0;
 8001990:	2300      	movs	r3, #0
 8001992:	e000      	b.n	8001996 <SIM800_Ans+0x82>
	}
	else
	{
		return 1;
 8001994:	2301      	movs	r3, #1
	}
}
 8001996:	4618      	mov	r0, r3
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000473 	.word	0x20000473
 80019a4:	20000475 	.word	0x20000475
 80019a8:	200004f4 	.word	0x200004f4
 80019ac:	20000224 	.word	0x20000224
 80019b0:	e000edfc 	.word	0xe000edfc
 80019b4:	e0001000 	.word	0xe0001000
 80019b8:	431bde83 	.word	0x431bde83
 80019bc:	005b8d80 	.word	0x005b8d80

080019c0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if (!Start_SIM800 && Error_init) //if we have problems with SIM800, restart it
 80019c8:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <StartDefaultTask+0x60>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d10e      	bne.n	80019ee <StartDefaultTask+0x2e>
 80019d0:	4b14      	ldr	r3, [pc, #80]	; (8001a24 <StartDefaultTask+0x64>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d00a      	beq.n	80019ee <StartDefaultTask+0x2e>
	  {
		  Error_init = 0;
 80019d8:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <StartDefaultTask+0x64>)
 80019da:	2200      	movs	r2, #0
 80019dc:	701a      	strb	r2, [r3, #0]
		  SIM800StartTaskHandle = osThreadNew(StartSIM800Task, NULL, &SIM800StartTask_attributes);
 80019de:	4a12      	ldr	r2, [pc, #72]	; (8001a28 <StartDefaultTask+0x68>)
 80019e0:	2100      	movs	r1, #0
 80019e2:	4812      	ldr	r0, [pc, #72]	; (8001a2c <StartDefaultTask+0x6c>)
 80019e4:	f009 fab0 	bl	800af48 <osThreadNew>
 80019e8:	4603      	mov	r3, r0
 80019ea:	4a11      	ldr	r2, [pc, #68]	; (8001a30 <StartDefaultTask+0x70>)
 80019ec:	6013      	str	r3, [r2, #0]
	  }

	  //show that program works
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 80019ee:	2140      	movs	r1, #64	; 0x40
 80019f0:	4810      	ldr	r0, [pc, #64]	; (8001a34 <StartDefaultTask+0x74>)
 80019f2:	f003 fd8a 	bl	800550a <HAL_GPIO_TogglePin>
	  osDelay(500);
 80019f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019fa:	f009 fb64 	bl	800b0c6 <osDelay>

	  //if we have flag, start getting data
	  if (Get_data && Broker_connect)
 80019fe:	4b0e      	ldr	r3, [pc, #56]	; (8001a38 <StartDefaultTask+0x78>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d0e0      	beq.n	80019c8 <StartDefaultTask+0x8>
 8001a06:	4b0d      	ldr	r3, [pc, #52]	; (8001a3c <StartDefaultTask+0x7c>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d0dc      	beq.n	80019c8 <StartDefaultTask+0x8>
	  {
		osSemaphoreRelease(SemGetDataHandle);
 8001a0e:	4b0c      	ldr	r3, [pc, #48]	; (8001a40 <StartDefaultTask+0x80>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f009 fe1c 	bl	800b650 <osSemaphoreRelease>
		Get_data = 0;
 8001a18:	4b07      	ldr	r3, [pc, #28]	; (8001a38 <StartDefaultTask+0x78>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	701a      	strb	r2, [r3, #0]
	  if (!Start_SIM800 && Error_init) //if we have problems with SIM800, restart it
 8001a1e:	e7d3      	b.n	80019c8 <StartDefaultTask+0x8>
 8001a20:	20000472 	.word	0x20000472
 8001a24:	20000470 	.word	0x20000470
 8001a28:	08010d34 	.word	0x08010d34
 8001a2c:	08002125 	.word	0x08002125
 8001a30:	20000440 	.word	0x20000440
 8001a34:	40020000 	.word	0x40020000
 8001a38:	20000476 	.word	0x20000476
 8001a3c:	20000474 	.word	0x20000474
 8001a40:	2000046c 	.word	0x2000046c

08001a44 <StartGetDataTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGetDataTask */
void StartGetDataTask(void *argument)
{
 8001a44:	b5b0      	push	{r4, r5, r7, lr}
 8001a46:	b0a0      	sub	sp, #128	; 0x80
 8001a48:	af04      	add	r7, sp, #16
 8001a4a:	6078      	str	r0, [r7, #4]
	uint16_t RS485CRC;
  /* Infinite loop */
  for(;;)
  {
	  // wait semaphore for measuring temperature
	  if (osSemaphoreAcquire(SemGetDataHandle, osWaitForever) == osOK)
 8001a4c:	4b98      	ldr	r3, [pc, #608]	; (8001cb0 <StartGetDataTask+0x26c>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f04f 31ff 	mov.w	r1, #4294967295
 8001a54:	4618      	mov	r0, r3
 8001a56:	f009 fda9 	bl	800b5ac <osSemaphoreAcquire>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d1f5      	bne.n	8001a4c <StartGetDataTask+0x8>
	  {


		  SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // permission counter
 8001a60:	4b94      	ldr	r3, [pc, #592]	; (8001cb4 <StartGetDataTask+0x270>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a93      	ldr	r2, [pc, #588]	; (8001cb4 <StartGetDataTask+0x270>)
 8001a66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a6a:	6013      	str	r3, [r2, #0]
		  DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;   // start counter
 8001a6c:	4b92      	ldr	r3, [pc, #584]	; (8001cb8 <StartGetDataTask+0x274>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a91      	ldr	r2, [pc, #580]	; (8001cb8 <StartGetDataTask+0x274>)
 8001a72:	f043 0301 	orr.w	r3, r3, #1
 8001a76:	6013      	str	r3, [r2, #0]

		  // get temp and humidity
		  // make string
		  RS485_buf[0] = 0x01; //slave address
 8001a78:	4b90      	ldr	r3, [pc, #576]	; (8001cbc <StartGetDataTask+0x278>)
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	701a      	strb	r2, [r3, #0]
		  RS485_buf[1] = 0x04; //function code
 8001a7e:	4b8f      	ldr	r3, [pc, #572]	; (8001cbc <StartGetDataTask+0x278>)
 8001a80:	2204      	movs	r2, #4
 8001a82:	705a      	strb	r2, [r3, #1]
		  RS485_buf[2] = 0x00; //
 8001a84:	4b8d      	ldr	r3, [pc, #564]	; (8001cbc <StartGetDataTask+0x278>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	709a      	strb	r2, [r3, #2]
		  RS485_buf[3] = 0x01; // starting address
 8001a8a:	4b8c      	ldr	r3, [pc, #560]	; (8001cbc <StartGetDataTask+0x278>)
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	70da      	strb	r2, [r3, #3]
		  RS485_buf[4] = 0x00; //
 8001a90:	4b8a      	ldr	r3, [pc, #552]	; (8001cbc <StartGetDataTask+0x278>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	711a      	strb	r2, [r3, #4]
		  RS485_buf[5] = 0x02; // count of register
 8001a96:	4b89      	ldr	r3, [pc, #548]	; (8001cbc <StartGetDataTask+0x278>)
 8001a98:	2202      	movs	r2, #2
 8001a9a:	715a      	strb	r2, [r3, #5]

		  // calculate CRC
		  RS485CRC = usMBCRC16(RS485_buf, 6);
 8001a9c:	2106      	movs	r1, #6
 8001a9e:	4887      	ldr	r0, [pc, #540]	; (8001cbc <StartGetDataTask+0x278>)
 8001aa0:	f7ff fa94 	bl	8000fcc <usMBCRC16>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
		  RS485_buf[6] = RS485CRC;
 8001aaa:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001aae:	b2da      	uxtb	r2, r3
 8001ab0:	4b82      	ldr	r3, [pc, #520]	; (8001cbc <StartGetDataTask+0x278>)
 8001ab2:	719a      	strb	r2, [r3, #6]
		  RS485CRC >>= 8;
 8001ab4:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001ab8:	0a1b      	lsrs	r3, r3, #8
 8001aba:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
		  RS485_buf[7] = RS485CRC;
 8001abe:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001ac2:	b2da      	uxtb	r2, r3
 8001ac4:	4b7d      	ldr	r3, [pc, #500]	; (8001cbc <StartGetDataTask+0x278>)
 8001ac6:	71da      	strb	r2, [r3, #7]

		  // send request
		  UART2_TX_finish = 0;
 8001ac8:	4b7d      	ldr	r3, [pc, #500]	; (8001cc0 <StartGetDataTask+0x27c>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
 8001ace:	2201      	movs	r2, #1
 8001ad0:	2108      	movs	r1, #8
 8001ad2:	487c      	ldr	r0, [pc, #496]	; (8001cc4 <StartGetDataTask+0x280>)
 8001ad4:	f003 fd00 	bl	80054d8 <HAL_GPIO_WritePin>
		  HAL_UART_Transmit_DMA(&huart2, RS485_buf, 8);
 8001ad8:	2208      	movs	r2, #8
 8001ada:	4978      	ldr	r1, [pc, #480]	; (8001cbc <StartGetDataTask+0x278>)
 8001adc:	487a      	ldr	r0, [pc, #488]	; (8001cc8 <StartGetDataTask+0x284>)
 8001ade:	f007 ff2d 	bl	800993c <HAL_UART_Transmit_DMA>

		  uint32_t tacts = HAL_RCC_GetSysClockFreq() / 1000000;
 8001ae2:	f006 fadf 	bl	80080a4 <HAL_RCC_GetSysClockFreq>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	4a78      	ldr	r2, [pc, #480]	; (8001ccc <StartGetDataTask+0x288>)
 8001aea:	fba2 2303 	umull	r2, r3, r2, r3
 8001aee:	0c9b      	lsrs	r3, r3, #18
 8001af0:	667b      	str	r3, [r7, #100]	; 0x64
		  tacts *= 3000000; //timeout - 3s
 8001af2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001af4:	4a76      	ldr	r2, [pc, #472]	; (8001cd0 <StartGetDataTask+0x28c>)
 8001af6:	fb02 f303 	mul.w	r3, r2, r3
 8001afa:	667b      	str	r3, [r7, #100]	; 0x64
		  DWT->CYCCNT = 0; // clear counter
 8001afc:	4b6e      	ldr	r3, [pc, #440]	; (8001cb8 <StartGetDataTask+0x274>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	605a      	str	r2, [r3, #4]
		  while (!UART2_TX_finish && DWT->CYCCNT < tacts) {}
 8001b02:	bf00      	nop
 8001b04:	4b6e      	ldr	r3, [pc, #440]	; (8001cc0 <StartGetDataTask+0x27c>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d104      	bne.n	8001b16 <StartGetDataTask+0xd2>
 8001b0c:	4b6a      	ldr	r3, [pc, #424]	; (8001cb8 <StartGetDataTask+0x274>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d8f6      	bhi.n	8001b04 <StartGetDataTask+0xc0>

		  // get ans
		  UART2_RX_finish = 0;
 8001b16:	4b6f      	ldr	r3, [pc, #444]	; (8001cd4 <StartGetDataTask+0x290>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	2108      	movs	r1, #8
 8001b20:	4868      	ldr	r0, [pc, #416]	; (8001cc4 <StartGetDataTask+0x280>)
 8001b22:	f003 fcd9 	bl	80054d8 <HAL_GPIO_WritePin>
		  HAL_UART_Receive_DMA(&huart2, RS485_buf, 9);
 8001b26:	2209      	movs	r2, #9
 8001b28:	4964      	ldr	r1, [pc, #400]	; (8001cbc <StartGetDataTask+0x278>)
 8001b2a:	4867      	ldr	r0, [pc, #412]	; (8001cc8 <StartGetDataTask+0x284>)
 8001b2c:	f007 ff84 	bl	8009a38 <HAL_UART_Receive_DMA>
		  tacts = HAL_RCC_GetSysClockFreq() / 1000000;
 8001b30:	f006 fab8 	bl	80080a4 <HAL_RCC_GetSysClockFreq>
 8001b34:	4603      	mov	r3, r0
 8001b36:	4a65      	ldr	r2, [pc, #404]	; (8001ccc <StartGetDataTask+0x288>)
 8001b38:	fba2 2303 	umull	r2, r3, r2, r3
 8001b3c:	0c9b      	lsrs	r3, r3, #18
 8001b3e:	667b      	str	r3, [r7, #100]	; 0x64
		  tacts *= 3000000; //timeout - 3s
 8001b40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b42:	4a63      	ldr	r2, [pc, #396]	; (8001cd0 <StartGetDataTask+0x28c>)
 8001b44:	fb02 f303 	mul.w	r3, r2, r3
 8001b48:	667b      	str	r3, [r7, #100]	; 0x64
		  DWT->CYCCNT = 0; // clear counter
 8001b4a:	4b5b      	ldr	r3, [pc, #364]	; (8001cb8 <StartGetDataTask+0x274>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	605a      	str	r2, [r3, #4]
		  while (!UART2_RX_finish && DWT->CYCCNT < tacts) {}
 8001b50:	bf00      	nop
 8001b52:	4b60      	ldr	r3, [pc, #384]	; (8001cd4 <StartGetDataTask+0x290>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d104      	bne.n	8001b64 <StartGetDataTask+0x120>
 8001b5a:	4b57      	ldr	r3, [pc, #348]	; (8001cb8 <StartGetDataTask+0x274>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d8f6      	bhi.n	8001b52 <StartGetDataTask+0x10e>

		  // calculate CRC
		  RS485CRC = usMBCRC16(RS485_buf, 7);
 8001b64:	2107      	movs	r1, #7
 8001b66:	4855      	ldr	r0, [pc, #340]	; (8001cbc <StartGetDataTask+0x278>)
 8001b68:	f7ff fa30 	bl	8000fcc <usMBCRC16>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
		  uint16_t RS485CRC1 = (uint16_t)( RS485_buf[8] << 8 | RS485_buf[7] );
 8001b72:	4b52      	ldr	r3, [pc, #328]	; (8001cbc <StartGetDataTask+0x278>)
 8001b74:	7a1b      	ldrb	r3, [r3, #8]
 8001b76:	021b      	lsls	r3, r3, #8
 8001b78:	b21a      	sxth	r2, r3
 8001b7a:	4b50      	ldr	r3, [pc, #320]	; (8001cbc <StartGetDataTask+0x278>)
 8001b7c:	79db      	ldrb	r3, [r3, #7]
 8001b7e:	b21b      	sxth	r3, r3
 8001b80:	4313      	orrs	r3, r2
 8001b82:	b21b      	sxth	r3, r3
 8001b84:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
		  uint8_t ok = (RS485CRC1 == RS485CRC) ? 1 : 0;
 8001b88:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8001b8c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001b90:	429a      	cmp	r2, r3
 8001b92:	bf0c      	ite	eq
 8001b94:	2301      	moveq	r3, #1
 8001b96:	2300      	movne	r3, #0
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61

		  if (ok)
 8001b9e:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d026      	beq.n	8001bf4 <StartGetDataTask+0x1b0>
		  {
			  temp = (uint16_t)( RS485_buf[3] << 8 | RS485_buf[4] );
 8001ba6:	4b45      	ldr	r3, [pc, #276]	; (8001cbc <StartGetDataTask+0x278>)
 8001ba8:	78db      	ldrb	r3, [r3, #3]
 8001baa:	021b      	lsls	r3, r3, #8
 8001bac:	b21a      	sxth	r2, r3
 8001bae:	4b43      	ldr	r3, [pc, #268]	; (8001cbc <StartGetDataTask+0x278>)
 8001bb0:	791b      	ldrb	r3, [r3, #4]
 8001bb2:	b21b      	sxth	r3, r3
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	b21b      	sxth	r3, r3
 8001bb8:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
			  humidity = (uint16_t)( RS485_buf[5] << 8 | RS485_buf[6] );
 8001bbc:	4b3f      	ldr	r3, [pc, #252]	; (8001cbc <StartGetDataTask+0x278>)
 8001bbe:	795b      	ldrb	r3, [r3, #5]
 8001bc0:	021b      	lsls	r3, r3, #8
 8001bc2:	b21a      	sxth	r2, r3
 8001bc4:	4b3d      	ldr	r3, [pc, #244]	; (8001cbc <StartGetDataTask+0x278>)
 8001bc6:	799b      	ldrb	r3, [r3, #6]
 8001bc8:	b21b      	sxth	r3, r3
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	b21b      	sxth	r3, r3
 8001bce:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

			  temp /= 10;
 8001bd2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8001bd6:	4a40      	ldr	r2, [pc, #256]	; (8001cd8 <StartGetDataTask+0x294>)
 8001bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bdc:	08db      	lsrs	r3, r3, #3
 8001bde:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
			  humidity /= 10;
 8001be2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8001be6:	4a3c      	ldr	r2, [pc, #240]	; (8001cd8 <StartGetDataTask+0x294>)
 8001be8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bec:	08db      	lsrs	r3, r3, #3
 8001bee:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8001bf2:	e005      	b.n	8001c00 <StartGetDataTask+0x1bc>
		  }
		  else
		  {
			  temp = 146;
 8001bf4:	2392      	movs	r3, #146	; 0x92
 8001bf6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
			  humidity = 146;
 8001bfa:	2392      	movs	r3, #146	; 0x92
 8001bfc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
		  }


		  // get smoke and move
		  V = INA226_getBusV(&hi2c2, INA226_ADDRESS);
 8001c00:	2180      	movs	r1, #128	; 0x80
 8001c02:	4836      	ldr	r0, [pc, #216]	; (8001cdc <StartGetDataTask+0x298>)
 8001c04:	f7ff f8fc 	bl	8000e00 <INA226_getBusV>
 8001c08:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		  osDelay(100);
 8001c0c:	2064      	movs	r0, #100	; 0x64
 8001c0e:	f009 fa5a 	bl	800b0c6 <osDelay>
		  I = INA226_getCurrent(&hi2c2, INA226_ADDRESS);
 8001c12:	2180      	movs	r1, #128	; 0x80
 8001c14:	4831      	ldr	r0, [pc, #196]	; (8001cdc <StartGetDataTask+0x298>)
 8001c16:	f7ff f91b 	bl	8000e50 <INA226_getCurrent>
 8001c1a:	ed87 0a16 	vstr	s0, [r7, #88]	; 0x58
		  osDelay(100);
 8001c1e:	2064      	movs	r0, #100	; 0x64
 8001c20:	f009 fa51 	bl	800b0c6 <osDelay>

		  people = (V > (float)6.0) ? 1 : 0;
 8001c24:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001c28:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8001c2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c34:	bfcc      	ite	gt
 8001c36:	2301      	movgt	r3, #1
 8001c38:	2300      	movle	r3, #0
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		  smoke = (I > (float)0.5) ? 1 : 0;
 8001c40:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001c44:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001c48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c50:	bfcc      	ite	gt
 8001c52:	2301      	movgt	r3, #1
 8001c54:	2300      	movle	r3, #0
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

		  // get power
		  power = !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);
 8001c5c:	2104      	movs	r1, #4
 8001c5e:	4819      	ldr	r0, [pc, #100]	; (8001cc4 <StartGetDataTask+0x280>)
 8001c60:	f003 fc22 	bl	80054a8 <HAL_GPIO_ReadPin>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	bf0c      	ite	eq
 8001c6a:	2301      	moveq	r3, #1
 8001c6c:	2300      	movne	r3, #0
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

		  // put string with data to queue
		  sprintf(&(msg.str), "{\"temp\":%d,\"humidity\":%d,\"power\":%d,\"people\":%d,\"smoke\":%d}\r\n\0",temp, humidity, power, people, smoke);
 8001c74:	f8b7 406e 	ldrh.w	r4, [r7, #110]	; 0x6e
 8001c78:	f8b7 506c 	ldrh.w	r5, [r7, #108]	; 0x6c
 8001c7c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001c80:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8001c84:	f897 1056 	ldrb.w	r1, [r7, #86]	; 0x56
 8001c88:	f107 000c 	add.w	r0, r7, #12
 8001c8c:	9102      	str	r1, [sp, #8]
 8001c8e:	9201      	str	r2, [sp, #4]
 8001c90:	9300      	str	r3, [sp, #0]
 8001c92:	462b      	mov	r3, r5
 8001c94:	4622      	mov	r2, r4
 8001c96:	4912      	ldr	r1, [pc, #72]	; (8001ce0 <StartGetDataTask+0x29c>)
 8001c98:	f00d f994 	bl	800efc4 <siprintf>
		  osMessageQueuePut(SIM800SendQueueHandle, &msg, 0, osWaitForever);
 8001c9c:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <StartGetDataTask+0x2a0>)
 8001c9e:	6818      	ldr	r0, [r3, #0]
 8001ca0:	f107 010c 	add.w	r1, r7, #12
 8001ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f009 fd89 	bl	800b7c0 <osMessageQueuePut>
	  if (osSemaphoreAcquire(SemGetDataHandle, osWaitForever) == osOK)
 8001cae:	e6cd      	b.n	8001a4c <StartGetDataTask+0x8>
 8001cb0:	2000046c 	.word	0x2000046c
 8001cb4:	e000edfc 	.word	0xe000edfc
 8001cb8:	e0001000 	.word	0xe0001000
 8001cbc:	2000047c 	.word	0x2000047c
 8001cc0:	20000477 	.word	0x20000477
 8001cc4:	40020800 	.word	0x40020800
 8001cc8:	20000268 	.word	0x20000268
 8001ccc:	431bde83 	.word	0x431bde83
 8001cd0:	002dc6c0 	.word	0x002dc6c0
 8001cd4:	20000478 	.word	0x20000478
 8001cd8:	cccccccd 	.word	0xcccccccd
 8001cdc:	200000b8 	.word	0x200000b8
 8001ce0:	08010300 	.word	0x08010300
 8001ce4:	20000454 	.word	0x20000454

08001ce8 <StartDebugTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDebugTask */
void StartDebugTask(void *argument)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b094      	sub	sp, #80	; 0x50
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDebugTask */
	message_type msg;
  /* Infinite loop */
  for(;;)
  {
	  if (osMessageQueueGet(debugQueueHandle, &msg, 0, osWaitForever) == osOK)
 8001cf0:	4b04      	ldr	r3, [pc, #16]	; (8001d04 <StartDebugTask+0x1c>)
 8001cf2:	6818      	ldr	r0, [r3, #0]
 8001cf4:	f107 0108 	add.w	r1, r7, #8
 8001cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f009 fdbf 	bl	800b880 <osMessageQueueGet>
 8001d02:	e7f5      	b.n	8001cf0 <StartDebugTask+0x8>
 8001d04:	20000450 	.word	0x20000450

08001d08 <StartSIM800SendTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSIM800SendTask */
void StartSIM800SendTask(void *argument)
{
 8001d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d0a:	b0bf      	sub	sp, #252	; 0xfc
 8001d0c:	af10      	add	r7, sp, #64	; 0x40
 8001d0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSIM800SendTask */
	message_type msg;

	//+ message_len(1 byte) + topic_len(2 bytes) + topic + message
    uint8_t send_MQTT_message[BUFF_SIM_SIZE] = {};
 8001d10:	2300      	movs	r3, #0
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	f107 0310 	add.w	r3, r7, #16
 8001d18:	2260      	movs	r2, #96	; 0x60
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f00d f915 	bl	800ef4c <memset>
    uint8_t ans;
  /* Infinite loop */
  for(;;)
  {
	  if (osMessageQueueGet(SIM800SendQueueHandle, &msg, 0, osWaitForever) == osOK)
 8001d22:	4b50      	ldr	r3, [pc, #320]	; (8001e64 <StartSIM800SendTask+0x15c>)
 8001d24:	6818      	ldr	r0, [r3, #0]
 8001d26:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8001d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f009 fda6 	bl	800b880 <osMessageQueueGet>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1f3      	bne.n	8001d22 <StartSIM800SendTask+0x1a>
	  {
		  if (osMutexAcquire(UART1MutexHandle, osWaitForever) == osOK)
 8001d3a:	4b4b      	ldr	r3, [pc, #300]	; (8001e68 <StartSIM800SendTask+0x160>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f04f 31ff 	mov.w	r1, #4294967295
 8001d42:	4618      	mov	r0, r3
 8001d44:	f009 fb20 	bl	800b388 <osMutexAcquire>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1e9      	bne.n	8001d22 <StartSIM800SendTask+0x1a>
		  {
			  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8001d4e:	4b47      	ldr	r3, [pc, #284]	; (8001e6c <StartSIM800SendTask+0x164>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68da      	ldr	r2, [r3, #12]
 8001d54:	4b45      	ldr	r3, [pc, #276]	; (8001e6c <StartSIM800SendTask+0x164>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f042 0210 	orr.w	r2, r2, #16
 8001d5c:	60da      	str	r2, [r3, #12]

			  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001d5e:	2264      	movs	r2, #100	; 0x64
 8001d60:	2100      	movs	r1, #0
 8001d62:	4843      	ldr	r0, [pc, #268]	; (8001e70 <StartSIM800SendTask+0x168>)
 8001d64:	f00d f8f2 	bl	800ef4c <memset>
			  sprintf(send_MQTT_message,"AT+CIPSEND=%d\r\n\0",strlen(msg.str) + strlen(TOPIC) + 4);
 8001d68:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7fe fa4f 	bl	8000210 <strlen>
 8001d72:	4604      	mov	r4, r0
 8001d74:	483f      	ldr	r0, [pc, #252]	; (8001e74 <StartSIM800SendTask+0x16c>)
 8001d76:	f7fe fa4b 	bl	8000210 <strlen>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	4423      	add	r3, r4
 8001d7e:	1d1a      	adds	r2, r3, #4
 8001d80:	f107 030c 	add.w	r3, r7, #12
 8001d84:	493c      	ldr	r1, [pc, #240]	; (8001e78 <StartSIM800SendTask+0x170>)
 8001d86:	4618      	mov	r0, r3
 8001d88:	f00d f91c 	bl	800efc4 <siprintf>
			  HAL_UART_Transmit_DMA(&huart1, send_MQTT_message, strlen(send_MQTT_message));
 8001d8c:	f107 030c 	add.w	r3, r7, #12
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7fe fa3d 	bl	8000210 <strlen>
 8001d96:	4603      	mov	r3, r0
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	f107 030c 	add.w	r3, r7, #12
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4832      	ldr	r0, [pc, #200]	; (8001e6c <StartSIM800SendTask+0x164>)
 8001da2:	f007 fdcb 	bl	800993c <HAL_UART_Transmit_DMA>
			  ans = SIM800_Ans(">");
 8001da6:	4835      	ldr	r0, [pc, #212]	; (8001e7c <StartSIM800SendTask+0x174>)
 8001da8:	f7ff fdb4 	bl	8001914 <SIM800_Ans>
 8001dac:	4603      	mov	r3, r0
 8001dae:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
			  if (!ans)
			  {

			  }
			  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001db2:	2264      	movs	r2, #100	; 0x64
 8001db4:	2100      	movs	r1, #0
 8001db6:	482e      	ldr	r0, [pc, #184]	; (8001e70 <StartSIM800SendTask+0x168>)
 8001db8:	f00d f8c8 	bl	800ef4c <memset>
			  osDelay(100);
 8001dbc:	2064      	movs	r0, #100	; 0x64
 8001dbe:	f009 f982 	bl	800b0c6 <osDelay>

			  //make string for transmit
			  Make_MQTT_send_string(send_MQTT_message, msg);
 8001dc2:	f107 060c 	add.w	r6, r7, #12
 8001dc6:	466c      	mov	r4, sp
 8001dc8:	f107 057c 	add.w	r5, r7, #124	; 0x7c
 8001dcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dd8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ddc:	c403      	stmia	r4!, {r0, r1}
 8001dde:	8022      	strh	r2, [r4, #0]
 8001de0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001de4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001de6:	4630      	mov	r0, r6
 8001de8:	f7ff fc58 	bl	800169c <Make_MQTT_send_string>
			  HAL_UART_Transmit_DMA(&huart1, send_MQTT_message, strlen(msg.str) + strlen(TOPIC) + 4);
 8001dec:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7fe fa0d 	bl	8000210 <strlen>
 8001df6:	4603      	mov	r3, r0
 8001df8:	b29c      	uxth	r4, r3
 8001dfa:	481e      	ldr	r0, [pc, #120]	; (8001e74 <StartSIM800SendTask+0x16c>)
 8001dfc:	f7fe fa08 	bl	8000210 <strlen>
 8001e00:	4603      	mov	r3, r0
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	4423      	add	r3, r4
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	3304      	adds	r3, #4
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	f107 030c 	add.w	r3, r7, #12
 8001e10:	4619      	mov	r1, r3
 8001e12:	4816      	ldr	r0, [pc, #88]	; (8001e6c <StartSIM800SendTask+0x164>)
 8001e14:	f007 fd92 	bl	800993c <HAL_UART_Transmit_DMA>

			  ans = SIM800_Ans("\x30"); //our transmited message
 8001e18:	4819      	ldr	r0, [pc, #100]	; (8001e80 <StartSIM800SendTask+0x178>)
 8001e1a:	f7ff fd7b 	bl	8001914 <SIM800_Ans>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
			  if (!ans)
 8001e24:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d10a      	bne.n	8001e42 <StartSIM800SendTask+0x13a>
			  {
				  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001e2c:	2264      	movs	r2, #100	; 0x64
 8001e2e:	2100      	movs	r1, #0
 8001e30:	480f      	ldr	r0, [pc, #60]	; (8001e70 <StartSIM800SendTask+0x168>)
 8001e32:	f00d f88b 	bl	800ef4c <memset>
				  ans = SIM800_Ans("\x30"); //our transmited message
 8001e36:	4812      	ldr	r0, [pc, #72]	; (8001e80 <StartSIM800SendTask+0x178>)
 8001e38:	f7ff fd6c 	bl	8001914 <SIM800_Ans>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
				  {

				  }
			  }

			  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001e42:	2264      	movs	r2, #100	; 0x64
 8001e44:	2100      	movs	r1, #0
 8001e46:	480a      	ldr	r0, [pc, #40]	; (8001e70 <StartSIM800SendTask+0x168>)
 8001e48:	f00d f880 	bl	800ef4c <memset>
			  HAL_UART_Receive_DMA(&huart1, SIM800BuffRx, BUFF_SIM_SIZE);
 8001e4c:	2264      	movs	r2, #100	; 0x64
 8001e4e:	4908      	ldr	r1, [pc, #32]	; (8001e70 <StartSIM800SendTask+0x168>)
 8001e50:	4806      	ldr	r0, [pc, #24]	; (8001e6c <StartSIM800SendTask+0x164>)
 8001e52:	f007 fdf1 	bl	8009a38 <HAL_UART_Receive_DMA>
			  osMutexRelease(UART1MutexHandle); //release UART for SIM800
 8001e56:	4b04      	ldr	r3, [pc, #16]	; (8001e68 <StartSIM800SendTask+0x160>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f009 fadf 	bl	800b41e <osMutexRelease>
	  if (osMessageQueueGet(SIM800SendQueueHandle, &msg, 0, osWaitForever) == osOK)
 8001e60:	e75f      	b.n	8001d22 <StartSIM800SendTask+0x1a>
 8001e62:	bf00      	nop
 8001e64:	20000454 	.word	0x20000454
 8001e68:	20000464 	.word	0x20000464
 8001e6c:	20000224 	.word	0x20000224
 8001e70:	200004f4 	.word	0x200004f4
 8001e74:	20000010 	.word	0x20000010
 8001e78:	08010340 	.word	0x08010340
 8001e7c:	08010354 	.word	0x08010354
 8001e80:	08010358 	.word	0x08010358

08001e84 <PINGStartTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_PINGStartTask */
void PINGStartTask(void *argument)
{
 8001e84:	b5b0      	push	{r4, r5, r7, lr}
 8001e86:	b0ae      	sub	sp, #184	; 0xb8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PINGStartTask */
	message_type msg;
	uint8_t send_MQTT_message[BUFF_SIM_SIZE] = {};
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	f107 0310 	add.w	r3, r7, #16
 8001e94:	2260      	movs	r2, #96	; 0x60
 8001e96:	2100      	movs	r1, #0
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f00d f857 	bl	800ef4c <memset>
	uint8_t ans = 0;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
  /* Infinite loop */
  for(;;)
  {
	  if (osSemaphoreAcquire(PINGSemHandle, osWaitForever) == osOK)
 8001ea4:	4b8c      	ldr	r3, [pc, #560]	; (80020d8 <PINGStartTask+0x254>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8001eac:	4618      	mov	r0, r3
 8001eae:	f009 fb7d 	bl	800b5ac <osSemaphoreAcquire>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d1f5      	bne.n	8001ea4 <PINGStartTask+0x20>
	  {
		  if (osMutexAcquire(UART1MutexHandle, osWaitForever) == osOK)
 8001eb8:	4b88      	ldr	r3, [pc, #544]	; (80020dc <PINGStartTask+0x258>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f009 fa61 	bl	800b388 <osMutexAcquire>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d1eb      	bne.n	8001ea4 <PINGStartTask+0x20>
		  {

			  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001ecc:	2264      	movs	r2, #100	; 0x64
 8001ece:	2100      	movs	r1, #0
 8001ed0:	4883      	ldr	r0, [pc, #524]	; (80020e0 <PINGStartTask+0x25c>)
 8001ed2:	f00d f83b 	bl	800ef4c <memset>
			  sprintf(send_MQTT_message,"AT+CIPSEND=2\r\n\0");
 8001ed6:	f107 030c 	add.w	r3, r7, #12
 8001eda:	4982      	ldr	r1, [pc, #520]	; (80020e4 <PINGStartTask+0x260>)
 8001edc:	4618      	mov	r0, r3
 8001ede:	f00d f871 	bl	800efc4 <siprintf>
			  HAL_UART_Transmit_DMA(&huart1, send_MQTT_message, strlen(send_MQTT_message));
 8001ee2:	f107 030c 	add.w	r3, r7, #12
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7fe f992 	bl	8000210 <strlen>
 8001eec:	4603      	mov	r3, r0
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	f107 030c 	add.w	r3, r7, #12
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	487c      	ldr	r0, [pc, #496]	; (80020e8 <PINGStartTask+0x264>)
 8001ef8:	f007 fd20 	bl	800993c <HAL_UART_Transmit_DMA>
			  ans = SIM800_Ans(">");
 8001efc:	487b      	ldr	r0, [pc, #492]	; (80020ec <PINGStartTask+0x268>)
 8001efe:	f7ff fd09 	bl	8001914 <SIM800_Ans>
 8001f02:	4603      	mov	r3, r0
 8001f04:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
			  if (!ans)
 8001f08:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d12f      	bne.n	8001f70 <PINGStartTask+0xec>
			  {
				  strcpy(&(msg.str), "FAILE_send_PING1\r\n\0");
 8001f10:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001f14:	4a76      	ldr	r2, [pc, #472]	; (80020f0 <PINGStartTask+0x26c>)
 8001f16:	461c      	mov	r4, r3
 8001f18:	4615      	mov	r5, r2
 8001f1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f1e:	682b      	ldr	r3, [r5, #0]
 8001f20:	461a      	mov	r2, r3
 8001f22:	8022      	strh	r2, [r4, #0]
 8001f24:	3402      	adds	r4, #2
 8001f26:	0c1b      	lsrs	r3, r3, #16
 8001f28:	7023      	strb	r3, [r4, #0]
				  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001f2a:	4b72      	ldr	r3, [pc, #456]	; (80020f4 <PINGStartTask+0x270>)
 8001f2c:	6818      	ldr	r0, [r3, #0]
 8001f2e:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8001f32:	f04f 33ff 	mov.w	r3, #4294967295
 8001f36:	2200      	movs	r2, #0
 8001f38:	f009 fc42 	bl	800b7c0 <osMessageQueuePut>
				  Error_ping = 1;
 8001f3c:	4b6e      	ldr	r3, [pc, #440]	; (80020f8 <PINGStartTask+0x274>)
 8001f3e:	2201      	movs	r2, #1
 8001f40:	701a      	strb	r2, [r3, #0]
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1); //signal for error
 8001f42:	2201      	movs	r2, #1
 8001f44:	2108      	movs	r1, #8
 8001f46:	486d      	ldr	r0, [pc, #436]	; (80020fc <PINGStartTask+0x278>)
 8001f48:	f003 fac6 	bl	80054d8 <HAL_GPIO_WritePin>
				  osMutexRelease(UART1MutexHandle); //release UART for SIM800
 8001f4c:	4b63      	ldr	r3, [pc, #396]	; (80020dc <PINGStartTask+0x258>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f009 fa64 	bl	800b41e <osMutexRelease>
				  //start task to try reconnect
				  MQTTConnectTaskHandle = osThreadNew(StartMQTTConnectTask, NULL, &MQTTConnectTask_attributes);
 8001f56:	4a6a      	ldr	r2, [pc, #424]	; (8002100 <PINGStartTask+0x27c>)
 8001f58:	2100      	movs	r1, #0
 8001f5a:	486a      	ldr	r0, [pc, #424]	; (8002104 <PINGStartTask+0x280>)
 8001f5c:	f008 fff4 	bl	800af48 <osThreadNew>
 8001f60:	4603      	mov	r3, r0
 8001f62:	4a69      	ldr	r2, [pc, #420]	; (8002108 <PINGStartTask+0x284>)
 8001f64:	6013      	str	r3, [r2, #0]
				  //delete this thread
				  osThreadTerminate(PINGTaskHandle);
 8001f66:	4b69      	ldr	r3, [pc, #420]	; (800210c <PINGStartTask+0x288>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f009 f87e 	bl	800b06c <osThreadTerminate>
			  }
			  osDelay(200);
 8001f70:	20c8      	movs	r0, #200	; 0xc8
 8001f72:	f009 f8a8 	bl	800b0c6 <osDelay>
			  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001f76:	2264      	movs	r2, #100	; 0x64
 8001f78:	2100      	movs	r1, #0
 8001f7a:	4859      	ldr	r0, [pc, #356]	; (80020e0 <PINGStartTask+0x25c>)
 8001f7c:	f00c ffe6 	bl	800ef4c <memset>
			  HAL_UART_Transmit_DMA(&huart1, PING, 2);
 8001f80:	2202      	movs	r2, #2
 8001f82:	4963      	ldr	r1, [pc, #396]	; (8002110 <PINGStartTask+0x28c>)
 8001f84:	4858      	ldr	r0, [pc, #352]	; (80020e8 <PINGStartTask+0x264>)
 8001f86:	f007 fcd9 	bl	800993c <HAL_UART_Transmit_DMA>
			  ans = SIM800_Ans(PING);
 8001f8a:	4861      	ldr	r0, [pc, #388]	; (8002110 <PINGStartTask+0x28c>)
 8001f8c:	f7ff fcc2 	bl	8001914 <SIM800_Ans>
 8001f90:	4603      	mov	r3, r0
 8001f92:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
			  if (!ans)
 8001f96:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d12f      	bne.n	8001ffe <PINGStartTask+0x17a>
			  {
				  strcpy(&(msg.str), "FAILE_send_PING2\r\n\0");
 8001f9e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001fa2:	4a5c      	ldr	r2, [pc, #368]	; (8002114 <PINGStartTask+0x290>)
 8001fa4:	461c      	mov	r4, r3
 8001fa6:	4615      	mov	r5, r2
 8001fa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001faa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fac:	682b      	ldr	r3, [r5, #0]
 8001fae:	461a      	mov	r2, r3
 8001fb0:	8022      	strh	r2, [r4, #0]
 8001fb2:	3402      	adds	r4, #2
 8001fb4:	0c1b      	lsrs	r3, r3, #16
 8001fb6:	7023      	strb	r3, [r4, #0]
				  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001fb8:	4b4e      	ldr	r3, [pc, #312]	; (80020f4 <PINGStartTask+0x270>)
 8001fba:	6818      	ldr	r0, [r3, #0]
 8001fbc:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8001fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f009 fbfb 	bl	800b7c0 <osMessageQueuePut>
				  Error_ping = 1;
 8001fca:	4b4b      	ldr	r3, [pc, #300]	; (80020f8 <PINGStartTask+0x274>)
 8001fcc:	2201      	movs	r2, #1
 8001fce:	701a      	strb	r2, [r3, #0]
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	2108      	movs	r1, #8
 8001fd4:	4849      	ldr	r0, [pc, #292]	; (80020fc <PINGStartTask+0x278>)
 8001fd6:	f003 fa7f 	bl	80054d8 <HAL_GPIO_WritePin>
				  osMutexRelease(UART1MutexHandle);
 8001fda:	4b40      	ldr	r3, [pc, #256]	; (80020dc <PINGStartTask+0x258>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f009 fa1d 	bl	800b41e <osMutexRelease>
				  MQTTConnectTaskHandle = osThreadNew(StartMQTTConnectTask, NULL, &MQTTConnectTask_attributes);
 8001fe4:	4a46      	ldr	r2, [pc, #280]	; (8002100 <PINGStartTask+0x27c>)
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	4846      	ldr	r0, [pc, #280]	; (8002104 <PINGStartTask+0x280>)
 8001fea:	f008 ffad 	bl	800af48 <osThreadNew>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	4a45      	ldr	r2, [pc, #276]	; (8002108 <PINGStartTask+0x284>)
 8001ff2:	6013      	str	r3, [r2, #0]
				  osThreadTerminate(PINGTaskHandle);
 8001ff4:	4b45      	ldr	r3, [pc, #276]	; (800210c <PINGStartTask+0x288>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f009 f837 	bl	800b06c <osThreadTerminate>
			  }
			  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001ffe:	2264      	movs	r2, #100	; 0x64
 8002000:	2100      	movs	r1, #0
 8002002:	4837      	ldr	r0, [pc, #220]	; (80020e0 <PINGStartTask+0x25c>)
 8002004:	f00c ffa2 	bl	800ef4c <memset>
			  ans = SIM800_Ans(PING_ASK);
 8002008:	4843      	ldr	r0, [pc, #268]	; (8002118 <PINGStartTask+0x294>)
 800200a:	f7ff fc83 	bl	8001914 <SIM800_Ans>
 800200e:	4603      	mov	r3, r0
 8002010:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
			  if (!ans)
 8002014:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8002018:	2b00      	cmp	r3, #0
 800201a:	d13e      	bne.n	800209a <PINGStartTask+0x216>
			  {
				  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 800201c:	2264      	movs	r2, #100	; 0x64
 800201e:	2100      	movs	r1, #0
 8002020:	482f      	ldr	r0, [pc, #188]	; (80020e0 <PINGStartTask+0x25c>)
 8002022:	f00c ff93 	bl	800ef4c <memset>
				  ans = SIM800_Ans(PING_ASK);
 8002026:	483c      	ldr	r0, [pc, #240]	; (8002118 <PINGStartTask+0x294>)
 8002028:	f7ff fc74 	bl	8001914 <SIM800_Ans>
 800202c:	4603      	mov	r3, r0
 800202e:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
				  if (!ans)
 8002032:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8002036:	2b00      	cmp	r3, #0
 8002038:	d12f      	bne.n	800209a <PINGStartTask+0x216>
				  {
					  strcpy(&(msg.str), "FAILE_send_PING3\r\n\0");
 800203a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800203e:	4a37      	ldr	r2, [pc, #220]	; (800211c <PINGStartTask+0x298>)
 8002040:	461c      	mov	r4, r3
 8002042:	4615      	mov	r5, r2
 8002044:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002046:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002048:	682b      	ldr	r3, [r5, #0]
 800204a:	461a      	mov	r2, r3
 800204c:	8022      	strh	r2, [r4, #0]
 800204e:	3402      	adds	r4, #2
 8002050:	0c1b      	lsrs	r3, r3, #16
 8002052:	7023      	strb	r3, [r4, #0]
					  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8002054:	4b27      	ldr	r3, [pc, #156]	; (80020f4 <PINGStartTask+0x270>)
 8002056:	6818      	ldr	r0, [r3, #0]
 8002058:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800205c:	f04f 33ff 	mov.w	r3, #4294967295
 8002060:	2200      	movs	r2, #0
 8002062:	f009 fbad 	bl	800b7c0 <osMessageQueuePut>
					  Error_ping = 1;
 8002066:	4b24      	ldr	r3, [pc, #144]	; (80020f8 <PINGStartTask+0x274>)
 8002068:	2201      	movs	r2, #1
 800206a:	701a      	strb	r2, [r3, #0]
					  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
 800206c:	2201      	movs	r2, #1
 800206e:	2108      	movs	r1, #8
 8002070:	4822      	ldr	r0, [pc, #136]	; (80020fc <PINGStartTask+0x278>)
 8002072:	f003 fa31 	bl	80054d8 <HAL_GPIO_WritePin>
					  osMutexRelease(UART1MutexHandle);
 8002076:	4b19      	ldr	r3, [pc, #100]	; (80020dc <PINGStartTask+0x258>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f009 f9cf 	bl	800b41e <osMutexRelease>
					  MQTTConnectTaskHandle = osThreadNew(StartMQTTConnectTask, NULL, &MQTTConnectTask_attributes);
 8002080:	4a1f      	ldr	r2, [pc, #124]	; (8002100 <PINGStartTask+0x27c>)
 8002082:	2100      	movs	r1, #0
 8002084:	481f      	ldr	r0, [pc, #124]	; (8002104 <PINGStartTask+0x280>)
 8002086:	f008 ff5f 	bl	800af48 <osThreadNew>
 800208a:	4603      	mov	r3, r0
 800208c:	4a1e      	ldr	r2, [pc, #120]	; (8002108 <PINGStartTask+0x284>)
 800208e:	6013      	str	r3, [r2, #0]
					  osThreadTerminate(PINGTaskHandle);
 8002090:	4b1e      	ldr	r3, [pc, #120]	; (800210c <PINGStartTask+0x288>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4618      	mov	r0, r3
 8002096:	f008 ffe9 	bl	800b06c <osThreadTerminate>
				  }
			  }

			  strcpy(&(msg.str), "PING_SEND_OK\r\n\0");
 800209a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800209e:	4a20      	ldr	r2, [pc, #128]	; (8002120 <PINGStartTask+0x29c>)
 80020a0:	461c      	mov	r4, r3
 80020a2:	4613      	mov	r3, r2
 80020a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020a6:	c407      	stmia	r4!, {r0, r1, r2}
 80020a8:	8023      	strh	r3, [r4, #0]
 80020aa:	3402      	adds	r4, #2
 80020ac:	0c1b      	lsrs	r3, r3, #16
 80020ae:	7023      	strb	r3, [r4, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 80020b0:	4b10      	ldr	r3, [pc, #64]	; (80020f4 <PINGStartTask+0x270>)
 80020b2:	6818      	ldr	r0, [r3, #0]
 80020b4:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80020b8:	f04f 33ff 	mov.w	r3, #4294967295
 80020bc:	2200      	movs	r2, #0
 80020be:	f009 fb7f 	bl	800b7c0 <osMessageQueuePut>

			  HAL_UART_Receive_DMA(&huart1, SIM800BuffRx, BUFF_SIM_SIZE);
 80020c2:	2264      	movs	r2, #100	; 0x64
 80020c4:	4906      	ldr	r1, [pc, #24]	; (80020e0 <PINGStartTask+0x25c>)
 80020c6:	4808      	ldr	r0, [pc, #32]	; (80020e8 <PINGStartTask+0x264>)
 80020c8:	f007 fcb6 	bl	8009a38 <HAL_UART_Receive_DMA>
			  osMutexRelease(UART1MutexHandle);
 80020cc:	4b03      	ldr	r3, [pc, #12]	; (80020dc <PINGStartTask+0x258>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f009 f9a4 	bl	800b41e <osMutexRelease>
	  if (osSemaphoreAcquire(PINGSemHandle, osWaitForever) == osOK)
 80020d6:	e6e5      	b.n	8001ea4 <PINGStartTask+0x20>
 80020d8:	20000468 	.word	0x20000468
 80020dc:	20000464 	.word	0x20000464
 80020e0:	200004f4 	.word	0x200004f4
 80020e4:	0801035c 	.word	0x0801035c
 80020e8:	20000224 	.word	0x20000224
 80020ec:	08010354 	.word	0x08010354
 80020f0:	0801036c 	.word	0x0801036c
 80020f4:	20000450 	.word	0x20000450
 80020f8:	20000471 	.word	0x20000471
 80020fc:	40020800 	.word	0x40020800
 8002100:	08010d58 	.word	0x08010d58
 8002104:	08002689 	.word	0x08002689
 8002108:	20000444 	.word	0x20000444
 800210c:	2000043c 	.word	0x2000043c
 8002110:	20000000 	.word	0x20000000
 8002114:	08010380 	.word	0x08010380
 8002118:	20000004 	.word	0x20000004
 800211c:	08010394 	.word	0x08010394
 8002120:	080103a8 	.word	0x080103a8

08002124 <StartSIM800Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSIM800Task */
void StartSIM800Task(void *argument)
{
 8002124:	b5b0      	push	{r4, r5, r7, lr}
 8002126:	b094      	sub	sp, #80	; 0x50
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSIM800Task */

	message_type msg; // string for debug message
	uint8_t ans = 0; //is one string in another
 800212c:	2300      	movs	r3, #0
 800212e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  /* Infinite loop */
  for(;;)
  {
	  Error_init = 0;
 8002132:	4bb1      	ldr	r3, [pc, #708]	; (80023f8 <StartSIM800Task+0x2d4>)
 8002134:	2200      	movs	r2, #0
 8002136:	701a      	strb	r2, [r3, #0]
	  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8002138:	4bb0      	ldr	r3, [pc, #704]	; (80023fc <StartSIM800Task+0x2d8>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68da      	ldr	r2, [r3, #12]
 800213e:	4baf      	ldr	r3, [pc, #700]	; (80023fc <StartSIM800Task+0x2d8>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f042 0210 	orr.w	r2, r2, #16
 8002146:	60da      	str	r2, [r3, #12]

start:

		//Hardware reset of module

		HAL_GPIO_WritePin(SIM_START_GPIO_Port, SIM_START_Pin, RESET);
 8002148:	2200      	movs	r2, #0
 800214a:	2110      	movs	r1, #16
 800214c:	48ac      	ldr	r0, [pc, #688]	; (8002400 <StartSIM800Task+0x2dc>)
 800214e:	f003 f9c3 	bl	80054d8 <HAL_GPIO_WritePin>
		osDelay(500);
 8002152:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002156:	f008 ffb6 	bl	800b0c6 <osDelay>
		HAL_GPIO_WritePin(SIM_START_GPIO_Port, SIM_START_Pin, SET);
 800215a:	2201      	movs	r2, #1
 800215c:	2110      	movs	r1, #16
 800215e:	48a8      	ldr	r0, [pc, #672]	; (8002400 <StartSIM800Task+0x2dc>)
 8002160:	f003 f9ba 	bl	80054d8 <HAL_GPIO_WritePin>
		osDelay(8000);
 8002164:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8002168:	f008 ffad 	bl	800b0c6 <osDelay>

	  	//send initializing data

	  	sprintf(str_SIM800,"ATZ\r\n\0");
 800216c:	49a5      	ldr	r1, [pc, #660]	; (8002404 <StartSIM800Task+0x2e0>)
 800216e:	48a6      	ldr	r0, [pc, #664]	; (8002408 <StartSIM800Task+0x2e4>)
 8002170:	f00c ff28 	bl	800efc4 <siprintf>
	  	HAL_UART_Transmit_IT(&huart1, str_SIM800, strlen(str_SIM800));
 8002174:	48a4      	ldr	r0, [pc, #656]	; (8002408 <StartSIM800Task+0x2e4>)
 8002176:	f7fe f84b 	bl	8000210 <strlen>
 800217a:	4603      	mov	r3, r0
 800217c:	b29b      	uxth	r3, r3
 800217e:	461a      	mov	r2, r3
 8002180:	49a1      	ldr	r1, [pc, #644]	; (8002408 <StartSIM800Task+0x2e4>)
 8002182:	489e      	ldr	r0, [pc, #632]	; (80023fc <StartSIM800Task+0x2d8>)
 8002184:	f007 fb95 	bl	80098b2 <HAL_UART_Transmit_IT>
	  	osDelay(6000);
 8002188:	f241 7070 	movw	r0, #6000	; 0x1770
 800218c:	f008 ff9b 	bl	800b0c6 <osDelay>

	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE); //clear receive buffer
 8002190:	2264      	movs	r2, #100	; 0x64
 8002192:	2100      	movs	r1, #0
 8002194:	489d      	ldr	r0, [pc, #628]	; (800240c <StartSIM800Task+0x2e8>)
 8002196:	f00c fed9 	bl	800ef4c <memset>
	  	sprintf(str_SIM800,"AT+CIPMODE=0\r\n\0"); //make string for send
 800219a:	499d      	ldr	r1, [pc, #628]	; (8002410 <StartSIM800Task+0x2ec>)
 800219c:	489a      	ldr	r0, [pc, #616]	; (8002408 <StartSIM800Task+0x2e4>)
 800219e:	f00c ff11 	bl	800efc4 <siprintf>
	  	HAL_UART_Transmit_IT(&huart1, str_SIM800, strlen(str_SIM800)); //send string
 80021a2:	4899      	ldr	r0, [pc, #612]	; (8002408 <StartSIM800Task+0x2e4>)
 80021a4:	f7fe f834 	bl	8000210 <strlen>
 80021a8:	4603      	mov	r3, r0
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	461a      	mov	r2, r3
 80021ae:	4996      	ldr	r1, [pc, #600]	; (8002408 <StartSIM800Task+0x2e4>)
 80021b0:	4892      	ldr	r0, [pc, #584]	; (80023fc <StartSIM800Task+0x2d8>)
 80021b2:	f007 fb7e 	bl	80098b2 <HAL_UART_Transmit_IT>
	  	ans = SIM800_Ans("OK"); //waiting answer, that we transmit in function
 80021b6:	4897      	ldr	r0, [pc, #604]	; (8002414 <StartSIM800Task+0x2f0>)
 80021b8:	f7ff fbac 	bl	8001914 <SIM800_Ans>
 80021bc:	4603      	mov	r3, r0
 80021be:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  	if (!ans)
 80021c2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d111      	bne.n	80021ee <StartSIM800Task+0xca>
	  	{
	  		strcpy(&(msg.str), "FAILE_CIPMODE\r\n\0");
 80021ca:	f107 0308 	add.w	r3, r7, #8
 80021ce:	4a92      	ldr	r2, [pc, #584]	; (8002418 <StartSIM800Task+0x2f4>)
 80021d0:	461c      	mov	r4, r3
 80021d2:	4613      	mov	r3, r2
 80021d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  		osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 80021da:	4b90      	ldr	r3, [pc, #576]	; (800241c <StartSIM800Task+0x2f8>)
 80021dc:	6818      	ldr	r0, [r3, #0]
 80021de:	f107 0108 	add.w	r1, r7, #8
 80021e2:	f04f 33ff 	mov.w	r3, #4294967295
 80021e6:	2200      	movs	r2, #0
 80021e8:	f009 faea 	bl	800b7c0 <osMessageQueuePut>
	  		goto start;
 80021ec:	e7ac      	b.n	8002148 <StartSIM800Task+0x24>
	  	}
	  	osDelay(300);
 80021ee:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80021f2:	f008 ff68 	bl	800b0c6 <osDelay>

	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80021f6:	2264      	movs	r2, #100	; 0x64
 80021f8:	2100      	movs	r1, #0
 80021fa:	4884      	ldr	r0, [pc, #528]	; (800240c <StartSIM800Task+0x2e8>)
 80021fc:	f00c fea6 	bl	800ef4c <memset>
	  	sprintf(str_SIM800,"AT+CIPMUX=0\r\n\0");
 8002200:	4987      	ldr	r1, [pc, #540]	; (8002420 <StartSIM800Task+0x2fc>)
 8002202:	4881      	ldr	r0, [pc, #516]	; (8002408 <StartSIM800Task+0x2e4>)
 8002204:	f00c fede 	bl	800efc4 <siprintf>
	  	HAL_UART_Transmit_IT(&huart1, str_SIM800, strlen(str_SIM800));
 8002208:	487f      	ldr	r0, [pc, #508]	; (8002408 <StartSIM800Task+0x2e4>)
 800220a:	f7fe f801 	bl	8000210 <strlen>
 800220e:	4603      	mov	r3, r0
 8002210:	b29b      	uxth	r3, r3
 8002212:	461a      	mov	r2, r3
 8002214:	497c      	ldr	r1, [pc, #496]	; (8002408 <StartSIM800Task+0x2e4>)
 8002216:	4879      	ldr	r0, [pc, #484]	; (80023fc <StartSIM800Task+0x2d8>)
 8002218:	f007 fb4b 	bl	80098b2 <HAL_UART_Transmit_IT>
	  	ans = SIM800_Ans("OK");
 800221c:	487d      	ldr	r0, [pc, #500]	; (8002414 <StartSIM800Task+0x2f0>)
 800221e:	f7ff fb79 	bl	8001914 <SIM800_Ans>
 8002222:	4603      	mov	r3, r0
 8002224:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  	if (!ans)
 8002228:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800222c:	2b00      	cmp	r3, #0
 800222e:	d114      	bne.n	800225a <StartSIM800Task+0x136>
		{
			strcpy(&(msg.str), "FAILE_CIPMUX\r\n\0");
 8002230:	f107 0308 	add.w	r3, r7, #8
 8002234:	4a7b      	ldr	r2, [pc, #492]	; (8002424 <StartSIM800Task+0x300>)
 8002236:	461c      	mov	r4, r3
 8002238:	4613      	mov	r3, r2
 800223a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800223c:	c407      	stmia	r4!, {r0, r1, r2}
 800223e:	8023      	strh	r3, [r4, #0]
 8002240:	3402      	adds	r4, #2
 8002242:	0c1b      	lsrs	r3, r3, #16
 8002244:	7023      	strb	r3, [r4, #0]
			osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8002246:	4b75      	ldr	r3, [pc, #468]	; (800241c <StartSIM800Task+0x2f8>)
 8002248:	6818      	ldr	r0, [r3, #0]
 800224a:	f107 0108 	add.w	r1, r7, #8
 800224e:	f04f 33ff 	mov.w	r3, #4294967295
 8002252:	2200      	movs	r2, #0
 8002254:	f009 fab4 	bl	800b7c0 <osMessageQueuePut>
			goto start;
 8002258:	e776      	b.n	8002148 <StartSIM800Task+0x24>
		}
		osDelay(300);
 800225a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800225e:	f008 ff32 	bl	800b0c6 <osDelay>

	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002262:	2264      	movs	r2, #100	; 0x64
 8002264:	2100      	movs	r1, #0
 8002266:	4869      	ldr	r0, [pc, #420]	; (800240c <StartSIM800Task+0x2e8>)
 8002268:	f00c fe70 	bl	800ef4c <memset>
	  	sprintf(str_SIM800,"AT+CIPSTATUS\r\n\0");
 800226c:	496e      	ldr	r1, [pc, #440]	; (8002428 <StartSIM800Task+0x304>)
 800226e:	4866      	ldr	r0, [pc, #408]	; (8002408 <StartSIM800Task+0x2e4>)
 8002270:	f00c fea8 	bl	800efc4 <siprintf>
	  	HAL_UART_Transmit_IT(&huart1, str_SIM800, strlen(str_SIM800));
 8002274:	4864      	ldr	r0, [pc, #400]	; (8002408 <StartSIM800Task+0x2e4>)
 8002276:	f7fd ffcb 	bl	8000210 <strlen>
 800227a:	4603      	mov	r3, r0
 800227c:	b29b      	uxth	r3, r3
 800227e:	461a      	mov	r2, r3
 8002280:	4961      	ldr	r1, [pc, #388]	; (8002408 <StartSIM800Task+0x2e4>)
 8002282:	485e      	ldr	r0, [pc, #376]	; (80023fc <StartSIM800Task+0x2d8>)
 8002284:	f007 fb15 	bl	80098b2 <HAL_UART_Transmit_IT>
	  	ans = SIM800_Ans("OK");
 8002288:	4862      	ldr	r0, [pc, #392]	; (8002414 <StartSIM800Task+0x2f0>)
 800228a:	f7ff fb43 	bl	8001914 <SIM800_Ans>
 800228e:	4603      	mov	r3, r0
 8002290:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  	if (!ans)
 8002294:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002298:	2b00      	cmp	r3, #0
 800229a:	d112      	bne.n	80022c2 <StartSIM800Task+0x19e>
		{
			strcpy(&(msg.str), "FAILE_CIPSTATUS\r\n\0");
 800229c:	f107 0308 	add.w	r3, r7, #8
 80022a0:	4a62      	ldr	r2, [pc, #392]	; (800242c <StartSIM800Task+0x308>)
 80022a2:	461c      	mov	r4, r3
 80022a4:	4615      	mov	r5, r2
 80022a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022aa:	682b      	ldr	r3, [r5, #0]
 80022ac:	8023      	strh	r3, [r4, #0]
			osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 80022ae:	4b5b      	ldr	r3, [pc, #364]	; (800241c <StartSIM800Task+0x2f8>)
 80022b0:	6818      	ldr	r0, [r3, #0]
 80022b2:	f107 0108 	add.w	r1, r7, #8
 80022b6:	f04f 33ff 	mov.w	r3, #4294967295
 80022ba:	2200      	movs	r2, #0
 80022bc:	f009 fa80 	bl	800b7c0 <osMessageQueuePut>
			goto start;
 80022c0:	e742      	b.n	8002148 <StartSIM800Task+0x24>
		}
		osDelay(300);
 80022c2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80022c6:	f008 fefe 	bl	800b0c6 <osDelay>

	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80022ca:	2264      	movs	r2, #100	; 0x64
 80022cc:	2100      	movs	r1, #0
 80022ce:	484f      	ldr	r0, [pc, #316]	; (800240c <StartSIM800Task+0x2e8>)
 80022d0:	f00c fe3c 	bl	800ef4c <memset>
	  	sprintf(str_SIM800,"AT+CIPRXGET=0\r\n\0");
 80022d4:	4956      	ldr	r1, [pc, #344]	; (8002430 <StartSIM800Task+0x30c>)
 80022d6:	484c      	ldr	r0, [pc, #304]	; (8002408 <StartSIM800Task+0x2e4>)
 80022d8:	f00c fe74 	bl	800efc4 <siprintf>
	  	HAL_UART_Transmit_IT(&huart1, str_SIM800, strlen(str_SIM800));
 80022dc:	484a      	ldr	r0, [pc, #296]	; (8002408 <StartSIM800Task+0x2e4>)
 80022de:	f7fd ff97 	bl	8000210 <strlen>
 80022e2:	4603      	mov	r3, r0
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	461a      	mov	r2, r3
 80022e8:	4947      	ldr	r1, [pc, #284]	; (8002408 <StartSIM800Task+0x2e4>)
 80022ea:	4844      	ldr	r0, [pc, #272]	; (80023fc <StartSIM800Task+0x2d8>)
 80022ec:	f007 fae1 	bl	80098b2 <HAL_UART_Transmit_IT>
	  	ans = SIM800_Ans("OK");
 80022f0:	4848      	ldr	r0, [pc, #288]	; (8002414 <StartSIM800Task+0x2f0>)
 80022f2:	f7ff fb0f 	bl	8001914 <SIM800_Ans>
 80022f6:	4603      	mov	r3, r0
 80022f8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  	if (!ans)
 80022fc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002300:	2b00      	cmp	r3, #0
 8002302:	d112      	bne.n	800232a <StartSIM800Task+0x206>
		{
			strcpy(&(msg.str), "FAILE_CIPRXGET\r\n\0");
 8002304:	f107 0308 	add.w	r3, r7, #8
 8002308:	4a4a      	ldr	r2, [pc, #296]	; (8002434 <StartSIM800Task+0x310>)
 800230a:	461c      	mov	r4, r3
 800230c:	4615      	mov	r5, r2
 800230e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002310:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002312:	682b      	ldr	r3, [r5, #0]
 8002314:	7023      	strb	r3, [r4, #0]
			osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8002316:	4b41      	ldr	r3, [pc, #260]	; (800241c <StartSIM800Task+0x2f8>)
 8002318:	6818      	ldr	r0, [r3, #0]
 800231a:	f107 0108 	add.w	r1, r7, #8
 800231e:	f04f 33ff 	mov.w	r3, #4294967295
 8002322:	2200      	movs	r2, #0
 8002324:	f009 fa4c 	bl	800b7c0 <osMessageQueuePut>
			goto start;
 8002328:	e70e      	b.n	8002148 <StartSIM800Task+0x24>
		}
		osDelay(300);
 800232a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800232e:	f008 feca 	bl	800b0c6 <osDelay>

	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002332:	2264      	movs	r2, #100	; 0x64
 8002334:	2100      	movs	r1, #0
 8002336:	4835      	ldr	r0, [pc, #212]	; (800240c <StartSIM800Task+0x2e8>)
 8002338:	f00c fe08 	bl	800ef4c <memset>
	  	sprintf(str_SIM800,"AT+CSTT=\"internet.beeline.ru\",\"beeline\",\"beeline\"\r\n\0");
 800233c:	493e      	ldr	r1, [pc, #248]	; (8002438 <StartSIM800Task+0x314>)
 800233e:	4832      	ldr	r0, [pc, #200]	; (8002408 <StartSIM800Task+0x2e4>)
 8002340:	f00c fe40 	bl	800efc4 <siprintf>
	  	HAL_UART_Transmit_IT(&huart1, str_SIM800, strlen(str_SIM800));
 8002344:	4830      	ldr	r0, [pc, #192]	; (8002408 <StartSIM800Task+0x2e4>)
 8002346:	f7fd ff63 	bl	8000210 <strlen>
 800234a:	4603      	mov	r3, r0
 800234c:	b29b      	uxth	r3, r3
 800234e:	461a      	mov	r2, r3
 8002350:	492d      	ldr	r1, [pc, #180]	; (8002408 <StartSIM800Task+0x2e4>)
 8002352:	482a      	ldr	r0, [pc, #168]	; (80023fc <StartSIM800Task+0x2d8>)
 8002354:	f007 faad 	bl	80098b2 <HAL_UART_Transmit_IT>
	  	ans = SIM800_Ans("OK");
 8002358:	482e      	ldr	r0, [pc, #184]	; (8002414 <StartSIM800Task+0x2f0>)
 800235a:	f7ff fadb 	bl	8001914 <SIM800_Ans>
 800235e:	4603      	mov	r3, r0
 8002360:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  	if (!ans)
 8002364:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002368:	2b00      	cmp	r3, #0
 800236a:	d111      	bne.n	8002390 <StartSIM800Task+0x26c>
		{
			strcpy(&(msg.str), "FAILE_CSTT\r\n\0");
 800236c:	f107 0308 	add.w	r3, r7, #8
 8002370:	4a32      	ldr	r2, [pc, #200]	; (800243c <StartSIM800Task+0x318>)
 8002372:	461c      	mov	r4, r3
 8002374:	4613      	mov	r3, r2
 8002376:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002378:	c407      	stmia	r4!, {r0, r1, r2}
 800237a:	7023      	strb	r3, [r4, #0]
			osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 800237c:	4b27      	ldr	r3, [pc, #156]	; (800241c <StartSIM800Task+0x2f8>)
 800237e:	6818      	ldr	r0, [r3, #0]
 8002380:	f107 0108 	add.w	r1, r7, #8
 8002384:	f04f 33ff 	mov.w	r3, #4294967295
 8002388:	2200      	movs	r2, #0
 800238a:	f009 fa19 	bl	800b7c0 <osMessageQueuePut>
			goto start;
 800238e:	e6db      	b.n	8002148 <StartSIM800Task+0x24>
		}
		osDelay(300);
 8002390:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002394:	f008 fe97 	bl	800b0c6 <osDelay>

	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002398:	2264      	movs	r2, #100	; 0x64
 800239a:	2100      	movs	r1, #0
 800239c:	481b      	ldr	r0, [pc, #108]	; (800240c <StartSIM800Task+0x2e8>)
 800239e:	f00c fdd5 	bl	800ef4c <memset>
	  	sprintf(str_SIM800,"AT+CIPSTATUS\r\n\0");
 80023a2:	4921      	ldr	r1, [pc, #132]	; (8002428 <StartSIM800Task+0x304>)
 80023a4:	4818      	ldr	r0, [pc, #96]	; (8002408 <StartSIM800Task+0x2e4>)
 80023a6:	f00c fe0d 	bl	800efc4 <siprintf>
	  	HAL_UART_Transmit_IT(&huart1, str_SIM800, strlen(str_SIM800));
 80023aa:	4817      	ldr	r0, [pc, #92]	; (8002408 <StartSIM800Task+0x2e4>)
 80023ac:	f7fd ff30 	bl	8000210 <strlen>
 80023b0:	4603      	mov	r3, r0
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	461a      	mov	r2, r3
 80023b6:	4914      	ldr	r1, [pc, #80]	; (8002408 <StartSIM800Task+0x2e4>)
 80023b8:	4810      	ldr	r0, [pc, #64]	; (80023fc <StartSIM800Task+0x2d8>)
 80023ba:	f007 fa7a 	bl	80098b2 <HAL_UART_Transmit_IT>
	  	ans = SIM800_Ans("OK");
 80023be:	4815      	ldr	r0, [pc, #84]	; (8002414 <StartSIM800Task+0x2f0>)
 80023c0:	f7ff faa8 	bl	8001914 <SIM800_Ans>
 80023c4:	4603      	mov	r3, r0
 80023c6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  	if (!ans)
 80023ca:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d136      	bne.n	8002440 <StartSIM800Task+0x31c>
		{
			strcpy(&(msg.str), "FAILE_CIPSTATUS\r\n\0");
 80023d2:	f107 0308 	add.w	r3, r7, #8
 80023d6:	4a15      	ldr	r2, [pc, #84]	; (800242c <StartSIM800Task+0x308>)
 80023d8:	461c      	mov	r4, r3
 80023da:	4615      	mov	r5, r2
 80023dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023e0:	682b      	ldr	r3, [r5, #0]
 80023e2:	8023      	strh	r3, [r4, #0]
			osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 80023e4:	4b0d      	ldr	r3, [pc, #52]	; (800241c <StartSIM800Task+0x2f8>)
 80023e6:	6818      	ldr	r0, [r3, #0]
 80023e8:	f107 0108 	add.w	r1, r7, #8
 80023ec:	f04f 33ff 	mov.w	r3, #4294967295
 80023f0:	2200      	movs	r2, #0
 80023f2:	f009 f9e5 	bl	800b7c0 <osMessageQueuePut>
			goto start;
 80023f6:	e6a7      	b.n	8002148 <StartSIM800Task+0x24>
 80023f8:	20000470 	.word	0x20000470
 80023fc:	20000224 	.word	0x20000224
 8002400:	40020800 	.word	0x40020800
 8002404:	080103b8 	.word	0x080103b8
 8002408:	20000490 	.word	0x20000490
 800240c:	200004f4 	.word	0x200004f4
 8002410:	080103c0 	.word	0x080103c0
 8002414:	080103d0 	.word	0x080103d0
 8002418:	080103d4 	.word	0x080103d4
 800241c:	20000450 	.word	0x20000450
 8002420:	080103e8 	.word	0x080103e8
 8002424:	080103f8 	.word	0x080103f8
 8002428:	08010408 	.word	0x08010408
 800242c:	08010418 	.word	0x08010418
 8002430:	0801042c 	.word	0x0801042c
 8002434:	08010440 	.word	0x08010440
 8002438:	08010454 	.word	0x08010454
 800243c:	0801048c 	.word	0x0801048c
		}
		osDelay(300);
 8002440:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002444:	f008 fe3f 	bl	800b0c6 <osDelay>

	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002448:	2264      	movs	r2, #100	; 0x64
 800244a:	2100      	movs	r1, #0
 800244c:	487a      	ldr	r0, [pc, #488]	; (8002638 <StartSIM800Task+0x514>)
 800244e:	f00c fd7d 	bl	800ef4c <memset>
	  	sprintf(str_SIM800,"AT+CIICR\r\n\0");
 8002452:	497a      	ldr	r1, [pc, #488]	; (800263c <StartSIM800Task+0x518>)
 8002454:	487a      	ldr	r0, [pc, #488]	; (8002640 <StartSIM800Task+0x51c>)
 8002456:	f00c fdb5 	bl	800efc4 <siprintf>
	  	HAL_UART_Transmit_IT(&huart1, str_SIM800, strlen(str_SIM800));
 800245a:	4879      	ldr	r0, [pc, #484]	; (8002640 <StartSIM800Task+0x51c>)
 800245c:	f7fd fed8 	bl	8000210 <strlen>
 8002460:	4603      	mov	r3, r0
 8002462:	b29b      	uxth	r3, r3
 8002464:	461a      	mov	r2, r3
 8002466:	4976      	ldr	r1, [pc, #472]	; (8002640 <StartSIM800Task+0x51c>)
 8002468:	4876      	ldr	r0, [pc, #472]	; (8002644 <StartSIM800Task+0x520>)
 800246a:	f007 fa22 	bl	80098b2 <HAL_UART_Transmit_IT>
	  	ans = SIM800_Ans("AT+CIICR");
 800246e:	4876      	ldr	r0, [pc, #472]	; (8002648 <StartSIM800Task+0x524>)
 8002470:	f7ff fa50 	bl	8001914 <SIM800_Ans>
 8002474:	4603      	mov	r3, r0
 8002476:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 800247a:	2264      	movs	r2, #100	; 0x64
 800247c:	2100      	movs	r1, #0
 800247e:	486e      	ldr	r0, [pc, #440]	; (8002638 <StartSIM800Task+0x514>)
 8002480:	f00c fd64 	bl	800ef4c <memset>
	  	ans = SIM800_Ans("OK");
 8002484:	4871      	ldr	r0, [pc, #452]	; (800264c <StartSIM800Task+0x528>)
 8002486:	f7ff fa45 	bl	8001914 <SIM800_Ans>
 800248a:	4603      	mov	r3, r0
 800248c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  	if (!ans)
 8002490:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002494:	2b00      	cmp	r3, #0
 8002496:	d111      	bne.n	80024bc <StartSIM800Task+0x398>
		{
			strcpy(&(msg.str), "FAILE_CIICR\r\n\0");
 8002498:	f107 0308 	add.w	r3, r7, #8
 800249c:	4a6c      	ldr	r2, [pc, #432]	; (8002650 <StartSIM800Task+0x52c>)
 800249e:	461c      	mov	r4, r3
 80024a0:	4613      	mov	r3, r2
 80024a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024a4:	c407      	stmia	r4!, {r0, r1, r2}
 80024a6:	8023      	strh	r3, [r4, #0]
			osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 80024a8:	4b6a      	ldr	r3, [pc, #424]	; (8002654 <StartSIM800Task+0x530>)
 80024aa:	6818      	ldr	r0, [r3, #0]
 80024ac:	f107 0108 	add.w	r1, r7, #8
 80024b0:	f04f 33ff 	mov.w	r3, #4294967295
 80024b4:	2200      	movs	r2, #0
 80024b6:	f009 f983 	bl	800b7c0 <osMessageQueuePut>
			goto start;
 80024ba:	e645      	b.n	8002148 <StartSIM800Task+0x24>
		}
		osDelay(500);
 80024bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80024c0:	f008 fe01 	bl	800b0c6 <osDelay>

	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80024c4:	2264      	movs	r2, #100	; 0x64
 80024c6:	2100      	movs	r1, #0
 80024c8:	485b      	ldr	r0, [pc, #364]	; (8002638 <StartSIM800Task+0x514>)
 80024ca:	f00c fd3f 	bl	800ef4c <memset>
	  	sprintf(str_SIM800,"AT+CIPSTATUS\r\n\0");
 80024ce:	4962      	ldr	r1, [pc, #392]	; (8002658 <StartSIM800Task+0x534>)
 80024d0:	485b      	ldr	r0, [pc, #364]	; (8002640 <StartSIM800Task+0x51c>)
 80024d2:	f00c fd77 	bl	800efc4 <siprintf>
	  	HAL_UART_Transmit_IT(&huart1, str_SIM800, strlen(str_SIM800));
 80024d6:	485a      	ldr	r0, [pc, #360]	; (8002640 <StartSIM800Task+0x51c>)
 80024d8:	f7fd fe9a 	bl	8000210 <strlen>
 80024dc:	4603      	mov	r3, r0
 80024de:	b29b      	uxth	r3, r3
 80024e0:	461a      	mov	r2, r3
 80024e2:	4957      	ldr	r1, [pc, #348]	; (8002640 <StartSIM800Task+0x51c>)
 80024e4:	4857      	ldr	r0, [pc, #348]	; (8002644 <StartSIM800Task+0x520>)
 80024e6:	f007 f9e4 	bl	80098b2 <HAL_UART_Transmit_IT>
	  	ans = SIM800_Ans("OK");
 80024ea:	4858      	ldr	r0, [pc, #352]	; (800264c <StartSIM800Task+0x528>)
 80024ec:	f7ff fa12 	bl	8001914 <SIM800_Ans>
 80024f0:	4603      	mov	r3, r0
 80024f2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  	if (!ans)
 80024f6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d112      	bne.n	8002524 <StartSIM800Task+0x400>
		{
			strcpy(&(msg.str), "FAILE_CIPSTATUS\r\n\0");
 80024fe:	f107 0308 	add.w	r3, r7, #8
 8002502:	4a56      	ldr	r2, [pc, #344]	; (800265c <StartSIM800Task+0x538>)
 8002504:	461c      	mov	r4, r3
 8002506:	4615      	mov	r5, r2
 8002508:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800250a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800250c:	682b      	ldr	r3, [r5, #0]
 800250e:	8023      	strh	r3, [r4, #0]
			osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8002510:	4b50      	ldr	r3, [pc, #320]	; (8002654 <StartSIM800Task+0x530>)
 8002512:	6818      	ldr	r0, [r3, #0]
 8002514:	f107 0108 	add.w	r1, r7, #8
 8002518:	f04f 33ff 	mov.w	r3, #4294967295
 800251c:	2200      	movs	r2, #0
 800251e:	f009 f94f 	bl	800b7c0 <osMessageQueuePut>
			goto start;
 8002522:	e611      	b.n	8002148 <StartSIM800Task+0x24>
		}
		osDelay(300);
 8002524:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002528:	f008 fdcd 	bl	800b0c6 <osDelay>

	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 800252c:	2264      	movs	r2, #100	; 0x64
 800252e:	2100      	movs	r1, #0
 8002530:	4841      	ldr	r0, [pc, #260]	; (8002638 <StartSIM800Task+0x514>)
 8002532:	f00c fd0b 	bl	800ef4c <memset>
	  	sprintf(str_SIM800,"AT+CIFSR\r\n\0");
 8002536:	494a      	ldr	r1, [pc, #296]	; (8002660 <StartSIM800Task+0x53c>)
 8002538:	4841      	ldr	r0, [pc, #260]	; (8002640 <StartSIM800Task+0x51c>)
 800253a:	f00c fd43 	bl	800efc4 <siprintf>
	  	HAL_UART_Transmit_IT(&huart1, str_SIM800, strlen(str_SIM800));
 800253e:	4840      	ldr	r0, [pc, #256]	; (8002640 <StartSIM800Task+0x51c>)
 8002540:	f7fd fe66 	bl	8000210 <strlen>
 8002544:	4603      	mov	r3, r0
 8002546:	b29b      	uxth	r3, r3
 8002548:	461a      	mov	r2, r3
 800254a:	493d      	ldr	r1, [pc, #244]	; (8002640 <StartSIM800Task+0x51c>)
 800254c:	483d      	ldr	r0, [pc, #244]	; (8002644 <StartSIM800Task+0x520>)
 800254e:	f007 f9b0 	bl	80098b2 <HAL_UART_Transmit_IT>
	  	RX = 0;
 8002552:	4b44      	ldr	r3, [pc, #272]	; (8002664 <StartSIM800Task+0x540>)
 8002554:	2200      	movs	r2, #0
 8002556:	701a      	strb	r2, [r3, #0]
	  	HAL_UART_Receive_DMA(&huart1, SIM800BuffRx, BUFF_SIM_SIZE);
 8002558:	2264      	movs	r2, #100	; 0x64
 800255a:	4937      	ldr	r1, [pc, #220]	; (8002638 <StartSIM800Task+0x514>)
 800255c:	4839      	ldr	r0, [pc, #228]	; (8002644 <StartSIM800Task+0x520>)
 800255e:	f007 fa6b 	bl	8009a38 <HAL_UART_Receive_DMA>
	  	while (RX < 1) {};
 8002562:	bf00      	nop
 8002564:	4b3f      	ldr	r3, [pc, #252]	; (8002664 <StartSIM800Task+0x540>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0fb      	beq.n	8002564 <StartSIM800Task+0x440>
	  	osDelay(300);
 800256c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002570:	f008 fda9 	bl	800b0c6 <osDelay>

	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002574:	2264      	movs	r2, #100	; 0x64
 8002576:	2100      	movs	r1, #0
 8002578:	482f      	ldr	r0, [pc, #188]	; (8002638 <StartSIM800Task+0x514>)
 800257a:	f00c fce7 	bl	800ef4c <memset>
	  	sprintf(str_SIM800,"AT+CIPSTATUS\r\n\0");
 800257e:	4936      	ldr	r1, [pc, #216]	; (8002658 <StartSIM800Task+0x534>)
 8002580:	482f      	ldr	r0, [pc, #188]	; (8002640 <StartSIM800Task+0x51c>)
 8002582:	f00c fd1f 	bl	800efc4 <siprintf>
	  	HAL_UART_Transmit_IT(&huart1, str_SIM800, strlen(str_SIM800));
 8002586:	482e      	ldr	r0, [pc, #184]	; (8002640 <StartSIM800Task+0x51c>)
 8002588:	f7fd fe42 	bl	8000210 <strlen>
 800258c:	4603      	mov	r3, r0
 800258e:	b29b      	uxth	r3, r3
 8002590:	461a      	mov	r2, r3
 8002592:	492b      	ldr	r1, [pc, #172]	; (8002640 <StartSIM800Task+0x51c>)
 8002594:	482b      	ldr	r0, [pc, #172]	; (8002644 <StartSIM800Task+0x520>)
 8002596:	f007 f98c 	bl	80098b2 <HAL_UART_Transmit_IT>
	  	ans = SIM800_Ans("OK");
 800259a:	482c      	ldr	r0, [pc, #176]	; (800264c <StartSIM800Task+0x528>)
 800259c:	f7ff f9ba 	bl	8001914 <SIM800_Ans>
 80025a0:	4603      	mov	r3, r0
 80025a2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  	if (!ans)
 80025a6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d112      	bne.n	80025d4 <StartSIM800Task+0x4b0>
		{
			strcpy(&(msg.str), "FAILE_CIPSTATUS\r\n\0");
 80025ae:	f107 0308 	add.w	r3, r7, #8
 80025b2:	4a2a      	ldr	r2, [pc, #168]	; (800265c <StartSIM800Task+0x538>)
 80025b4:	461c      	mov	r4, r3
 80025b6:	4615      	mov	r5, r2
 80025b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025bc:	682b      	ldr	r3, [r5, #0]
 80025be:	8023      	strh	r3, [r4, #0]
			osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 80025c0:	4b24      	ldr	r3, [pc, #144]	; (8002654 <StartSIM800Task+0x530>)
 80025c2:	6818      	ldr	r0, [r3, #0]
 80025c4:	f107 0108 	add.w	r1, r7, #8
 80025c8:	f04f 33ff 	mov.w	r3, #4294967295
 80025cc:	2200      	movs	r2, #0
 80025ce:	f009 f8f7 	bl	800b7c0 <osMessageQueuePut>
			goto start;
 80025d2:	e5b9      	b.n	8002148 <StartSIM800Task+0x24>
		}
		osDelay(300);
 80025d4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80025d8:	f008 fd75 	bl	800b0c6 <osDelay>

		strcpy(&(msg.str), "START_SIM800_OK\r\n\0");
 80025dc:	f107 0308 	add.w	r3, r7, #8
 80025e0:	4a21      	ldr	r2, [pc, #132]	; (8002668 <StartSIM800Task+0x544>)
 80025e2:	461c      	mov	r4, r3
 80025e4:	4615      	mov	r5, r2
 80025e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025ea:	682b      	ldr	r3, [r5, #0]
 80025ec:	8023      	strh	r3, [r4, #0]
		osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 80025ee:	4b19      	ldr	r3, [pc, #100]	; (8002654 <StartSIM800Task+0x530>)
 80025f0:	6818      	ldr	r0, [r3, #0]
 80025f2:	f107 0108 	add.w	r1, r7, #8
 80025f6:	f04f 33ff 	mov.w	r3, #4294967295
 80025fa:	2200      	movs	r2, #0
 80025fc:	f009 f8e0 	bl	800b7c0 <osMessageQueuePut>

	  	Start_SIM800 = 1; //module starting good
 8002600:	4b1a      	ldr	r3, [pc, #104]	; (800266c <StartSIM800Task+0x548>)
 8002602:	2201      	movs	r2, #1
 8002604:	701a      	strb	r2, [r3, #0]
	  	osMutexRelease(UART1MutexHandle); //release UART1
 8002606:	4b1a      	ldr	r3, [pc, #104]	; (8002670 <StartSIM800Task+0x54c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f008 ff07 	bl	800b41e <osMutexRelease>
	  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 8002610:	2200      	movs	r2, #0
 8002612:	2104      	movs	r1, #4
 8002614:	4817      	ldr	r0, [pc, #92]	; (8002674 <StartSIM800Task+0x550>)
 8002616:	f002 ff5f 	bl	80054d8 <HAL_GPIO_WritePin>
	  	//start thread to connect to broker
	  	MQTTConnectTaskHandle = osThreadNew(StartMQTTConnectTask, NULL, &MQTTConnectTask_attributes);
 800261a:	4a17      	ldr	r2, [pc, #92]	; (8002678 <StartSIM800Task+0x554>)
 800261c:	2100      	movs	r1, #0
 800261e:	4817      	ldr	r0, [pc, #92]	; (800267c <StartSIM800Task+0x558>)
 8002620:	f008 fc92 	bl	800af48 <osThreadNew>
 8002624:	4603      	mov	r3, r0
 8002626:	4a16      	ldr	r2, [pc, #88]	; (8002680 <StartSIM800Task+0x55c>)
 8002628:	6013      	str	r3, [r2, #0]
	  	osThreadTerminate(SIM800StartTaskHandle); //execute this thread
 800262a:	4b16      	ldr	r3, [pc, #88]	; (8002684 <StartSIM800Task+0x560>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4618      	mov	r0, r3
 8002630:	f008 fd1c 	bl	800b06c <osThreadTerminate>
  {
 8002634:	e57d      	b.n	8002132 <StartSIM800Task+0xe>
 8002636:	bf00      	nop
 8002638:	200004f4 	.word	0x200004f4
 800263c:	0801049c 	.word	0x0801049c
 8002640:	20000490 	.word	0x20000490
 8002644:	20000224 	.word	0x20000224
 8002648:	080104a8 	.word	0x080104a8
 800264c:	080103d0 	.word	0x080103d0
 8002650:	080104b4 	.word	0x080104b4
 8002654:	20000450 	.word	0x20000450
 8002658:	08010408 	.word	0x08010408
 800265c:	08010418 	.word	0x08010418
 8002660:	080104c4 	.word	0x080104c4
 8002664:	20000473 	.word	0x20000473
 8002668:	080104d0 	.word	0x080104d0
 800266c:	20000472 	.word	0x20000472
 8002670:	20000464 	.word	0x20000464
 8002674:	40020800 	.word	0x40020800
 8002678:	08010d58 	.word	0x08010d58
 800267c:	08002689 	.word	0x08002689
 8002680:	20000444 	.word	0x20000444
 8002684:	20000440 	.word	0x20000440

08002688 <StartMQTTConnectTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMQTTConnectTask */
void StartMQTTConnectTask(void *argument)
{
 8002688:	b5b0      	push	{r4, r5, r7, lr}
 800268a:	b0ba      	sub	sp, #232	; 0xe8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMQTTConnectTask */

	message_type msg; // string for debug message
	uint8_t ans; //is one string in another
	uint8_t send_MQTT_message[BUFF_SIM_SIZE] = {}; //message to SIM800
 8002690:	2300      	movs	r3, #0
 8002692:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002694:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002698:	2260      	movs	r2, #96	; 0x60
 800269a:	2100      	movs	r1, #0
 800269c:	4618      	mov	r0, r3
 800269e:	f00c fc55 	bl	800ef4c <memset>
	uint8_t counter = 0; //counter of bad trying to connect to broker
 80026a2:	2300      	movs	r3, #0
 80026a4:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
  /* Infinite loop */
  for(;;)
  {

	  // waiting mutex
	  if (osMutexAcquire(UART1MutexHandle, osWaitForever) == osOK)
 80026a8:	4bc3      	ldr	r3, [pc, #780]	; (80029b8 <StartMQTTConnectTask+0x330>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f04f 31ff 	mov.w	r1, #4294967295
 80026b0:	4618      	mov	r0, r3
 80026b2:	f008 fe69 	bl	800b388 <osMutexAcquire>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1f5      	bne.n	80026a8 <StartMQTTConnectTask+0x20>
	  {
	  start:
 80026bc:	bf00      	nop
		  if (counter > 5)
 80026be:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 80026c2:	2b05      	cmp	r3, #5
 80026c4:	d914      	bls.n	80026f0 <StartMQTTConnectTask+0x68>
		  {
			  Error_init = 1;
 80026c6:	4bbd      	ldr	r3, [pc, #756]	; (80029bc <StartMQTTConnectTask+0x334>)
 80026c8:	2201      	movs	r2, #1
 80026ca:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 1);
 80026cc:	2201      	movs	r2, #1
 80026ce:	2104      	movs	r1, #4
 80026d0:	48bb      	ldr	r0, [pc, #748]	; (80029c0 <StartMQTTConnectTask+0x338>)
 80026d2:	f002 ff01 	bl	80054d8 <HAL_GPIO_WritePin>
			  Start_SIM800 = 0;
 80026d6:	4bbb      	ldr	r3, [pc, #748]	; (80029c4 <StartMQTTConnectTask+0x33c>)
 80026d8:	2200      	movs	r2, #0
 80026da:	701a      	strb	r2, [r3, #0]
			  osMutexRelease(UART1MutexHandle);
 80026dc:	4bb6      	ldr	r3, [pc, #728]	; (80029b8 <StartMQTTConnectTask+0x330>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f008 fe9c 	bl	800b41e <osMutexRelease>
			  osThreadTerminate(MQTTConnectTaskHandle);
 80026e6:	4bb8      	ldr	r3, [pc, #736]	; (80029c8 <StartMQTTConnectTask+0x340>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f008 fcbe 	bl	800b06c <osThreadTerminate>
		  }

		  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 80026f0:	4bb6      	ldr	r3, [pc, #728]	; (80029cc <StartMQTTConnectTask+0x344>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68da      	ldr	r2, [r3, #12]
 80026f6:	4bb5      	ldr	r3, [pc, #724]	; (80029cc <StartMQTTConnectTask+0x344>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f042 0210 	orr.w	r2, r2, #16
 80026fe:	60da      	str	r2, [r3, #12]
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002700:	2264      	movs	r2, #100	; 0x64
 8002702:	2100      	movs	r1, #0
 8002704:	48b2      	ldr	r0, [pc, #712]	; (80029d0 <StartMQTTConnectTask+0x348>)
 8002706:	f00c fc21 	bl	800ef4c <memset>
		  //sprintf(str_SIM800,"AT+CIPSTART=\"TCP\",\"broker.hivemq.com\",1883\r\0");
		  sprintf(str_SIM800,"AT+CIPSTART=\"TCP\",\"broker.emqx.io\",1883\r\n\0");
 800270a:	49b2      	ldr	r1, [pc, #712]	; (80029d4 <StartMQTTConnectTask+0x34c>)
 800270c:	48b2      	ldr	r0, [pc, #712]	; (80029d8 <StartMQTTConnectTask+0x350>)
 800270e:	f00c fc59 	bl	800efc4 <siprintf>
		  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 8002712:	48b1      	ldr	r0, [pc, #708]	; (80029d8 <StartMQTTConnectTask+0x350>)
 8002714:	f7fd fd7c 	bl	8000210 <strlen>
 8002718:	4603      	mov	r3, r0
 800271a:	b29b      	uxth	r3, r3
 800271c:	461a      	mov	r2, r3
 800271e:	49ae      	ldr	r1, [pc, #696]	; (80029d8 <StartMQTTConnectTask+0x350>)
 8002720:	48aa      	ldr	r0, [pc, #680]	; (80029cc <StartMQTTConnectTask+0x344>)
 8002722:	f007 f90b 	bl	800993c <HAL_UART_Transmit_DMA>
		  ans = SIM800_Ans("OK");
 8002726:	48ad      	ldr	r0, [pc, #692]	; (80029dc <StartMQTTConnectTask+0x354>)
 8002728:	f7ff f8f4 	bl	8001914 <SIM800_Ans>
 800272c:	4603      	mov	r3, r0
 800272e:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
		  if (!ans)
 8002732:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8002736:	2b00      	cmp	r3, #0
 8002738:	d117      	bne.n	800276a <StartMQTTConnectTask+0xe2>
		  {
			  strcpy(&(msg.str), "FAILE_connect1\r\n\0");
 800273a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800273e:	4aa8      	ldr	r2, [pc, #672]	; (80029e0 <StartMQTTConnectTask+0x358>)
 8002740:	461c      	mov	r4, r3
 8002742:	4615      	mov	r5, r2
 8002744:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002746:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002748:	682b      	ldr	r3, [r5, #0]
 800274a:	7023      	strb	r3, [r4, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 800274c:	4ba5      	ldr	r3, [pc, #660]	; (80029e4 <StartMQTTConnectTask+0x35c>)
 800274e:	6818      	ldr	r0, [r3, #0]
 8002750:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002754:	f04f 33ff 	mov.w	r3, #4294967295
 8002758:	2200      	movs	r2, #0
 800275a:	f009 f831 	bl	800b7c0 <osMessageQueuePut>
			  counter++;
 800275e:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8002762:	3301      	adds	r3, #1
 8002764:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
			  goto start;
 8002768:	e7a9      	b.n	80026be <StartMQTTConnectTask+0x36>
		  }
		  osDelay(300);
 800276a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800276e:	f008 fcaa 	bl	800b0c6 <osDelay>

		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002772:	2264      	movs	r2, #100	; 0x64
 8002774:	2100      	movs	r1, #0
 8002776:	4896      	ldr	r0, [pc, #600]	; (80029d0 <StartMQTTConnectTask+0x348>)
 8002778:	f00c fbe8 	bl	800ef4c <memset>
		  ans = SIM800_Ans("OK");
 800277c:	4897      	ldr	r0, [pc, #604]	; (80029dc <StartMQTTConnectTask+0x354>)
 800277e:	f7ff f8c9 	bl	8001914 <SIM800_Ans>
 8002782:	4603      	mov	r3, r0
 8002784:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
		  if (!ans)
 8002788:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 800278c:	2b00      	cmp	r3, #0
 800278e:	d117      	bne.n	80027c0 <StartMQTTConnectTask+0x138>
		  {
			  strcpy(&(msg.str), "FAILE_connect2\r\n\0");
 8002790:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002794:	4a94      	ldr	r2, [pc, #592]	; (80029e8 <StartMQTTConnectTask+0x360>)
 8002796:	461c      	mov	r4, r3
 8002798:	4615      	mov	r5, r2
 800279a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800279c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800279e:	682b      	ldr	r3, [r5, #0]
 80027a0:	7023      	strb	r3, [r4, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 80027a2:	4b90      	ldr	r3, [pc, #576]	; (80029e4 <StartMQTTConnectTask+0x35c>)
 80027a4:	6818      	ldr	r0, [r3, #0]
 80027a6:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80027aa:	f04f 33ff 	mov.w	r3, #4294967295
 80027ae:	2200      	movs	r2, #0
 80027b0:	f009 f806 	bl	800b7c0 <osMessageQueuePut>
			  counter++;
 80027b4:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 80027b8:	3301      	adds	r3, #1
 80027ba:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
			  goto start;
 80027be:	e77e      	b.n	80026be <StartMQTTConnectTask+0x36>
		  }
		  osDelay(300);
 80027c0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80027c4:	f008 fc7f 	bl	800b0c6 <osDelay>

		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80027c8:	2264      	movs	r2, #100	; 0x64
 80027ca:	2100      	movs	r1, #0
 80027cc:	4880      	ldr	r0, [pc, #512]	; (80029d0 <StartMQTTConnectTask+0x348>)
 80027ce:	f00c fbbd 	bl	800ef4c <memset>
		  sprintf(str_SIM800,"AT+CIPSEND=14\r\n\0");
 80027d2:	4986      	ldr	r1, [pc, #536]	; (80029ec <StartMQTTConnectTask+0x364>)
 80027d4:	4880      	ldr	r0, [pc, #512]	; (80029d8 <StartMQTTConnectTask+0x350>)
 80027d6:	f00c fbf5 	bl	800efc4 <siprintf>
		  //sprintf(str_SIM800,"AT+CIPSEND=24\r\0");
		  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 80027da:	487f      	ldr	r0, [pc, #508]	; (80029d8 <StartMQTTConnectTask+0x350>)
 80027dc:	f7fd fd18 	bl	8000210 <strlen>
 80027e0:	4603      	mov	r3, r0
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	461a      	mov	r2, r3
 80027e6:	497c      	ldr	r1, [pc, #496]	; (80029d8 <StartMQTTConnectTask+0x350>)
 80027e8:	4878      	ldr	r0, [pc, #480]	; (80029cc <StartMQTTConnectTask+0x344>)
 80027ea:	f007 f8a7 	bl	800993c <HAL_UART_Transmit_DMA>
		  ans = SIM800_Ans(">");
 80027ee:	4880      	ldr	r0, [pc, #512]	; (80029f0 <StartMQTTConnectTask+0x368>)
 80027f0:	f7ff f890 	bl	8001914 <SIM800_Ans>
 80027f4:	4603      	mov	r3, r0
 80027f6:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
		  if (!ans)
 80027fa:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d116      	bne.n	8002830 <StartMQTTConnectTask+0x1a8>
		  {
			  strcpy(&(msg.str), "FAILE_send\r\n\0");
 8002802:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002806:	4a7b      	ldr	r2, [pc, #492]	; (80029f4 <StartMQTTConnectTask+0x36c>)
 8002808:	461c      	mov	r4, r3
 800280a:	4613      	mov	r3, r2
 800280c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800280e:	c407      	stmia	r4!, {r0, r1, r2}
 8002810:	7023      	strb	r3, [r4, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8002812:	4b74      	ldr	r3, [pc, #464]	; (80029e4 <StartMQTTConnectTask+0x35c>)
 8002814:	6818      	ldr	r0, [r3, #0]
 8002816:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800281a:	f04f 33ff 	mov.w	r3, #4294967295
 800281e:	2200      	movs	r2, #0
 8002820:	f008 ffce 	bl	800b7c0 <osMessageQueuePut>
			  counter++;
 8002824:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8002828:	3301      	adds	r3, #1
 800282a:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
			  goto start;
 800282e:	e746      	b.n	80026be <StartMQTTConnectTask+0x36>
		  }
		  osDelay(300);
 8002830:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002834:	f008 fc47 	bl	800b0c6 <osDelay>

		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002838:	2264      	movs	r2, #100	; 0x64
 800283a:	2100      	movs	r1, #0
 800283c:	4864      	ldr	r0, [pc, #400]	; (80029d0 <StartMQTTConnectTask+0x348>)
 800283e:	f00c fb85 	bl	800ef4c <memset>
		  uint8_t send_MQTT_init[50] = "\x10\x0C\0\x04MQTT\x04\x02\0\x3C\0\0\0";
 8002842:	4b6d      	ldr	r3, [pc, #436]	; (80029f8 <StartMQTTConnectTask+0x370>)
 8002844:	f107 0408 	add.w	r4, r7, #8
 8002848:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800284a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800284e:	f107 0318 	add.w	r3, r7, #24
 8002852:	2222      	movs	r2, #34	; 0x22
 8002854:	2100      	movs	r1, #0
 8002856:	4618      	mov	r0, r3
 8002858:	f00c fb78 	bl	800ef4c <memset>
		  HAL_UART_Transmit_DMA(&huart1, send_MQTT_init, 14);
 800285c:	f107 0308 	add.w	r3, r7, #8
 8002860:	220e      	movs	r2, #14
 8002862:	4619      	mov	r1, r3
 8002864:	4859      	ldr	r0, [pc, #356]	; (80029cc <StartMQTTConnectTask+0x344>)
 8002866:	f007 f869 	bl	800993c <HAL_UART_Transmit_DMA>
		  //uint8_t send_MQTT_init[50] = "\x10\x16\0\x04MQTT\x04\x02\0\x3C\0\x0A\x34\x62\x58\x34\x56\x66\x47\x42\x51\x75\0";
		  //HAL_UART_Transmit_DMA(&huart1, send_MQTT_init, 24);
		  //osDelay(2000);

		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 800286a:	2264      	movs	r2, #100	; 0x64
 800286c:	2100      	movs	r1, #0
 800286e:	4858      	ldr	r0, [pc, #352]	; (80029d0 <StartMQTTConnectTask+0x348>)
 8002870:	f00c fb6c 	bl	800ef4c <memset>
		  ans = SIM800_Ans("\x10\x0C\0\x04MQTT\x04\x02\0\x3C\0\0\0");
 8002874:	4861      	ldr	r0, [pc, #388]	; (80029fc <StartMQTTConnectTask+0x374>)
 8002876:	f7ff f84d 	bl	8001914 <SIM800_Ans>
 800287a:	4603      	mov	r3, r0
 800287c:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
		  if (!ans)
 8002880:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8002884:	2b00      	cmp	r3, #0
 8002886:	d11b      	bne.n	80028c0 <StartMQTTConnectTask+0x238>
		  {
			  strcpy(&(msg.str), "FAILE_init_mqtt1\r\n\0");
 8002888:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800288c:	4a5c      	ldr	r2, [pc, #368]	; (8002a00 <StartMQTTConnectTask+0x378>)
 800288e:	461c      	mov	r4, r3
 8002890:	4615      	mov	r5, r2
 8002892:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002894:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002896:	682b      	ldr	r3, [r5, #0]
 8002898:	461a      	mov	r2, r3
 800289a:	8022      	strh	r2, [r4, #0]
 800289c:	3402      	adds	r4, #2
 800289e:	0c1b      	lsrs	r3, r3, #16
 80028a0:	7023      	strb	r3, [r4, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 80028a2:	4b50      	ldr	r3, [pc, #320]	; (80029e4 <StartMQTTConnectTask+0x35c>)
 80028a4:	6818      	ldr	r0, [r3, #0]
 80028a6:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80028aa:	f04f 33ff 	mov.w	r3, #4294967295
 80028ae:	2200      	movs	r2, #0
 80028b0:	f008 ff86 	bl	800b7c0 <osMessageQueuePut>
			  counter++;
 80028b4:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 80028b8:	3301      	adds	r3, #1
 80028ba:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
			  goto start;
 80028be:	e6fe      	b.n	80026be <StartMQTTConnectTask+0x36>
		  }

		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80028c0:	2264      	movs	r2, #100	; 0x64
 80028c2:	2100      	movs	r1, #0
 80028c4:	4842      	ldr	r0, [pc, #264]	; (80029d0 <StartMQTTConnectTask+0x348>)
 80028c6:	f00c fb41 	bl	800ef4c <memset>
		  ans = SIM800_Ans(MQTT_CONNECT_ASK);
 80028ca:	484e      	ldr	r0, [pc, #312]	; (8002a04 <StartMQTTConnectTask+0x37c>)
 80028cc:	f7ff f822 	bl	8001914 <SIM800_Ans>
 80028d0:	4603      	mov	r3, r0
 80028d2:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
		  if (!ans)
 80028d6:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d12a      	bne.n	8002934 <StartMQTTConnectTask+0x2ac>
		  {
			  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80028de:	2264      	movs	r2, #100	; 0x64
 80028e0:	2100      	movs	r1, #0
 80028e2:	483b      	ldr	r0, [pc, #236]	; (80029d0 <StartMQTTConnectTask+0x348>)
 80028e4:	f00c fb32 	bl	800ef4c <memset>
			  ans = SIM800_Ans(MQTT_CONNECT_ASK);
 80028e8:	4846      	ldr	r0, [pc, #280]	; (8002a04 <StartMQTTConnectTask+0x37c>)
 80028ea:	f7ff f813 	bl	8001914 <SIM800_Ans>
 80028ee:	4603      	mov	r3, r0
 80028f0:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
			  if (!ans)
 80028f4:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d11b      	bne.n	8002934 <StartMQTTConnectTask+0x2ac>
			  {
				  strcpy(&(msg.str), "FAILE_init_mqtt2\r\n\0");
 80028fc:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002900:	4a41      	ldr	r2, [pc, #260]	; (8002a08 <StartMQTTConnectTask+0x380>)
 8002902:	461c      	mov	r4, r3
 8002904:	4615      	mov	r5, r2
 8002906:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002908:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800290a:	682b      	ldr	r3, [r5, #0]
 800290c:	461a      	mov	r2, r3
 800290e:	8022      	strh	r2, [r4, #0]
 8002910:	3402      	adds	r4, #2
 8002912:	0c1b      	lsrs	r3, r3, #16
 8002914:	7023      	strb	r3, [r4, #0]
				  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8002916:	4b33      	ldr	r3, [pc, #204]	; (80029e4 <StartMQTTConnectTask+0x35c>)
 8002918:	6818      	ldr	r0, [r3, #0]
 800291a:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800291e:	f04f 33ff 	mov.w	r3, #4294967295
 8002922:	2200      	movs	r2, #0
 8002924:	f008 ff4c 	bl	800b7c0 <osMessageQueuePut>
				  counter++;
 8002928:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 800292c:	3301      	adds	r3, #1
 800292e:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
				  goto start;
 8002932:	e6c4      	b.n	80026be <StartMQTTConnectTask+0x36>
			  }
		  }
		  osDelay(100);
 8002934:	2064      	movs	r0, #100	; 0x64
 8002936:	f008 fbc6 	bl	800b0c6 <osDelay>

		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 800293a:	2264      	movs	r2, #100	; 0x64
 800293c:	2100      	movs	r1, #0
 800293e:	4824      	ldr	r0, [pc, #144]	; (80029d0 <StartMQTTConnectTask+0x348>)
 8002940:	f00c fb04 	bl	800ef4c <memset>
		  sprintf(send_MQTT_message,"AT+CIPSEND=%d\r\n\0", strlen(TOPIC) + 7);
 8002944:	4831      	ldr	r0, [pc, #196]	; (8002a0c <StartMQTTConnectTask+0x384>)
 8002946:	f7fd fc63 	bl	8000210 <strlen>
 800294a:	4603      	mov	r3, r0
 800294c:	1dda      	adds	r2, r3, #7
 800294e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002952:	492f      	ldr	r1, [pc, #188]	; (8002a10 <StartMQTTConnectTask+0x388>)
 8002954:	4618      	mov	r0, r3
 8002956:	f00c fb35 	bl	800efc4 <siprintf>
		  HAL_UART_Transmit_DMA(&huart1, send_MQTT_message, strlen(send_MQTT_message));
 800295a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800295e:	4618      	mov	r0, r3
 8002960:	f7fd fc56 	bl	8000210 <strlen>
 8002964:	4603      	mov	r3, r0
 8002966:	b29a      	uxth	r2, r3
 8002968:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800296c:	4619      	mov	r1, r3
 800296e:	4817      	ldr	r0, [pc, #92]	; (80029cc <StartMQTTConnectTask+0x344>)
 8002970:	f006 ffe4 	bl	800993c <HAL_UART_Transmit_DMA>
		  ans = SIM800_Ans(">");
 8002974:	481e      	ldr	r0, [pc, #120]	; (80029f0 <StartMQTTConnectTask+0x368>)
 8002976:	f7fe ffcd 	bl	8001914 <SIM800_Ans>
 800297a:	4603      	mov	r3, r0
 800297c:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
		  if (!ans)
 8002980:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8002984:	2b00      	cmp	r3, #0
 8002986:	d147      	bne.n	8002a18 <StartMQTTConnectTask+0x390>
		  {
			  strcpy(&(msg.str), "FAILE_send1\r\n\0");
 8002988:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800298c:	4a21      	ldr	r2, [pc, #132]	; (8002a14 <StartMQTTConnectTask+0x38c>)
 800298e:	461c      	mov	r4, r3
 8002990:	4613      	mov	r3, r2
 8002992:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002994:	c407      	stmia	r4!, {r0, r1, r2}
 8002996:	8023      	strh	r3, [r4, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8002998:	4b12      	ldr	r3, [pc, #72]	; (80029e4 <StartMQTTConnectTask+0x35c>)
 800299a:	6818      	ldr	r0, [r3, #0]
 800299c:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80029a0:	f04f 33ff 	mov.w	r3, #4294967295
 80029a4:	2200      	movs	r2, #0
 80029a6:	f008 ff0b 	bl	800b7c0 <osMessageQueuePut>
			  counter++;
 80029aa:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 80029ae:	3301      	adds	r3, #1
 80029b0:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
			  goto start;
 80029b4:	e683      	b.n	80026be <StartMQTTConnectTask+0x36>
 80029b6:	bf00      	nop
 80029b8:	20000464 	.word	0x20000464
 80029bc:	20000470 	.word	0x20000470
 80029c0:	40020800 	.word	0x40020800
 80029c4:	20000472 	.word	0x20000472
 80029c8:	20000444 	.word	0x20000444
 80029cc:	20000224 	.word	0x20000224
 80029d0:	200004f4 	.word	0x200004f4
 80029d4:	080104e4 	.word	0x080104e4
 80029d8:	20000490 	.word	0x20000490
 80029dc:	080103d0 	.word	0x080103d0
 80029e0:	08010510 	.word	0x08010510
 80029e4:	20000450 	.word	0x20000450
 80029e8:	08010524 	.word	0x08010524
 80029ec:	08010538 	.word	0x08010538
 80029f0:	08010354 	.word	0x08010354
 80029f4:	0801054c 	.word	0x0801054c
 80029f8:	080105fc 	.word	0x080105fc
 80029fc:	0801055c 	.word	0x0801055c
 8002a00:	0801056c 	.word	0x0801056c
 8002a04:	20000008 	.word	0x20000008
 8002a08:	08010580 	.word	0x08010580
 8002a0c:	20000010 	.word	0x20000010
 8002a10:	08010340 	.word	0x08010340
 8002a14:	08010594 	.word	0x08010594
		  }
		  osDelay(100);
 8002a18:	2064      	movs	r0, #100	; 0x64
 8002a1a:	f008 fb54 	bl	800b0c6 <osDelay>
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002a1e:	2264      	movs	r2, #100	; 0x64
 8002a20:	2100      	movs	r1, #0
 8002a22:	486f      	ldr	r0, [pc, #444]	; (8002be0 <StartMQTTConnectTask+0x558>)
 8002a24:	f00c fa92 	bl	800ef4c <memset>

		  //create packet to subscribe on topic
		  send_MQTT_message[0] = 0x82;
 8002a28:	2382      	movs	r3, #130	; 0x82
 8002a2a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
		  send_MQTT_message[1] = strlen(TOPIC) + 5;
 8002a2e:	486d      	ldr	r0, [pc, #436]	; (8002be4 <StartMQTTConnectTask+0x55c>)
 8002a30:	f7fd fbee 	bl	8000210 <strlen>
 8002a34:	4603      	mov	r3, r0
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	3305      	adds	r3, #5
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
		  send_MQTT_message[2] = 0;
 8002a40:	2300      	movs	r3, #0
 8002a42:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		  send_MQTT_message[3] = 1;
 8002a46:	2301      	movs	r3, #1
 8002a48:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		  send_MQTT_message[4] = 0;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
		  send_MQTT_message[5] = strlen(TOPIC);
 8002a52:	4864      	ldr	r0, [pc, #400]	; (8002be4 <StartMQTTConnectTask+0x55c>)
 8002a54:	f7fd fbdc 	bl	8000210 <strlen>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
		  sprintf(send_MQTT_message + 6,"%s\0",TOPIC);
 8002a60:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a64:	3306      	adds	r3, #6
 8002a66:	4a5f      	ldr	r2, [pc, #380]	; (8002be4 <StartMQTTConnectTask+0x55c>)
 8002a68:	495f      	ldr	r1, [pc, #380]	; (8002be8 <StartMQTTConnectTask+0x560>)
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f00c faaa 	bl	800efc4 <siprintf>
		  HAL_UART_Transmit_DMA(&huart1, send_MQTT_message, strlen(TOPIC) + 7);
 8002a70:	485c      	ldr	r0, [pc, #368]	; (8002be4 <StartMQTTConnectTask+0x55c>)
 8002a72:	f7fd fbcd 	bl	8000210 <strlen>
 8002a76:	4603      	mov	r3, r0
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	3307      	adds	r3, #7
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a82:	4619      	mov	r1, r3
 8002a84:	4859      	ldr	r0, [pc, #356]	; (8002bec <StartMQTTConnectTask+0x564>)
 8002a86:	f006 ff59 	bl	800993c <HAL_UART_Transmit_DMA>
		  ans = SIM800_Ans(send_MQTT_message);
 8002a8a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7fe ff40 	bl	8001914 <SIM800_Ans>
 8002a94:	4603      	mov	r3, r0
 8002a96:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
		  if (!ans)
 8002a9a:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d116      	bne.n	8002ad0 <StartMQTTConnectTask+0x448>
		  {
			  strcpy(&(msg.str), "FAILE_send2\r\n\0");
 8002aa2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002aa6:	4a52      	ldr	r2, [pc, #328]	; (8002bf0 <StartMQTTConnectTask+0x568>)
 8002aa8:	461c      	mov	r4, r3
 8002aaa:	4613      	mov	r3, r2
 8002aac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002aae:	c407      	stmia	r4!, {r0, r1, r2}
 8002ab0:	8023      	strh	r3, [r4, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8002ab2:	4b50      	ldr	r3, [pc, #320]	; (8002bf4 <StartMQTTConnectTask+0x56c>)
 8002ab4:	6818      	ldr	r0, [r3, #0]
 8002ab6:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002aba:	f04f 33ff 	mov.w	r3, #4294967295
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f008 fe7e 	bl	800b7c0 <osMessageQueuePut>
			  counter++;
 8002ac4:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8002ac8:	3301      	adds	r3, #1
 8002aca:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
			  goto start;
 8002ace:	e5f6      	b.n	80026be <StartMQTTConnectTask+0x36>
		  }
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002ad0:	2264      	movs	r2, #100	; 0x64
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	4842      	ldr	r0, [pc, #264]	; (8002be0 <StartMQTTConnectTask+0x558>)
 8002ad6:	f00c fa39 	bl	800ef4c <memset>
		  ans = SIM800_Ans(TOPIC_ASK);
 8002ada:	4847      	ldr	r0, [pc, #284]	; (8002bf8 <StartMQTTConnectTask+0x570>)
 8002adc:	f7fe ff1a 	bl	8001914 <SIM800_Ans>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
		  if (!ans)
 8002ae6:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d125      	bne.n	8002b3a <StartMQTTConnectTask+0x4b2>
		  {
			  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002aee:	2264      	movs	r2, #100	; 0x64
 8002af0:	2100      	movs	r1, #0
 8002af2:	483b      	ldr	r0, [pc, #236]	; (8002be0 <StartMQTTConnectTask+0x558>)
 8002af4:	f00c fa2a 	bl	800ef4c <memset>
			  ans = SIM800_Ans(TOPIC_ASK);
 8002af8:	483f      	ldr	r0, [pc, #252]	; (8002bf8 <StartMQTTConnectTask+0x570>)
 8002afa:	f7fe ff0b 	bl	8001914 <SIM800_Ans>
 8002afe:	4603      	mov	r3, r0
 8002b00:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
			  if (!ans)
 8002b04:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d116      	bne.n	8002b3a <StartMQTTConnectTask+0x4b2>
			  {
				  strcpy(&(msg.str), "FAILE_send3\r\n\0");
 8002b0c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002b10:	4a3a      	ldr	r2, [pc, #232]	; (8002bfc <StartMQTTConnectTask+0x574>)
 8002b12:	461c      	mov	r4, r3
 8002b14:	4613      	mov	r3, r2
 8002b16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b18:	c407      	stmia	r4!, {r0, r1, r2}
 8002b1a:	8023      	strh	r3, [r4, #0]
				  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8002b1c:	4b35      	ldr	r3, [pc, #212]	; (8002bf4 <StartMQTTConnectTask+0x56c>)
 8002b1e:	6818      	ldr	r0, [r3, #0]
 8002b20:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002b24:	f04f 33ff 	mov.w	r3, #4294967295
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f008 fe49 	bl	800b7c0 <osMessageQueuePut>
				  counter++;
 8002b2e:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8002b32:	3301      	adds	r3, #1
 8002b34:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
				  goto start;
 8002b38:	e5c1      	b.n	80026be <StartMQTTConnectTask+0x36>
			  }
		  }


		  strcpy(&(msg.str), "MQTT_connect_OK\r\n\0");
 8002b3a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002b3e:	4a30      	ldr	r2, [pc, #192]	; (8002c00 <StartMQTTConnectTask+0x578>)
 8002b40:	461c      	mov	r4, r3
 8002b42:	4615      	mov	r5, r2
 8002b44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b48:	682b      	ldr	r3, [r5, #0]
 8002b4a:	8023      	strh	r3, [r4, #0]
		  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8002b4c:	4b29      	ldr	r3, [pc, #164]	; (8002bf4 <StartMQTTConnectTask+0x56c>)
 8002b4e:	6818      	ldr	r0, [r3, #0]
 8002b50:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002b54:	f04f 33ff 	mov.w	r3, #4294967295
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f008 fe31 	bl	800b7c0 <osMessageQueuePut>

		  Broker_connect = 1;
 8002b5e:	4b29      	ldr	r3, [pc, #164]	; (8002c04 <StartMQTTConnectTask+0x57c>)
 8002b60:	2201      	movs	r2, #1
 8002b62:	701a      	strb	r2, [r3, #0]
		  osTimerStart(PingTimerHandle, PING_TIME); //start ping timer
 8002b64:	4b28      	ldr	r3, [pc, #160]	; (8002c08 <StartMQTTConnectTask+0x580>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f24c 3150 	movw	r1, #50000	; 0xc350
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f008 fb57 	bl	800b220 <osTimerStart>
		  osTimerStart(DataTimerHandle, GET_DATA_PERIOD); //start ping timer
 8002b72:	4b26      	ldr	r3, [pc, #152]	; (8002c0c <StartMQTTConnectTask+0x584>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f643 2198 	movw	r1, #15000	; 0x3a98
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f008 fb50 	bl	800b220 <osTimerStart>
		  HAL_UART_Receive_DMA(&huart1, SIM800BuffRx, BUFF_SIM_SIZE); //start receive messages
 8002b80:	2264      	movs	r2, #100	; 0x64
 8002b82:	4917      	ldr	r1, [pc, #92]	; (8002be0 <StartMQTTConnectTask+0x558>)
 8002b84:	4819      	ldr	r0, [pc, #100]	; (8002bec <StartMQTTConnectTask+0x564>)
 8002b86:	f006 ff57 	bl	8009a38 <HAL_UART_Receive_DMA>
		  Tech_ans_wait = 0;
 8002b8a:	4b21      	ldr	r3, [pc, #132]	; (8002c10 <StartMQTTConnectTask+0x588>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	701a      	strb	r2, [r3, #0]

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 8002b90:	2200      	movs	r2, #0
 8002b92:	2108      	movs	r1, #8
 8002b94:	481f      	ldr	r0, [pc, #124]	; (8002c14 <StartMQTTConnectTask+0x58c>)
 8002b96:	f002 fc9f 	bl	80054d8 <HAL_GPIO_WritePin>
		  //start receiving data from broker
		  osMutexRelease(UART1MutexHandle);
 8002b9a:	4b1f      	ldr	r3, [pc, #124]	; (8002c18 <StartMQTTConnectTask+0x590>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f008 fc3d 	bl	800b41e <osMutexRelease>
		  PINGTaskHandle = osThreadNew(PINGStartTask, NULL, &PINGTask_attributes);
 8002ba4:	4a1d      	ldr	r2, [pc, #116]	; (8002c1c <StartMQTTConnectTask+0x594>)
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	481d      	ldr	r0, [pc, #116]	; (8002c20 <StartMQTTConnectTask+0x598>)
 8002baa:	f008 f9cd 	bl	800af48 <osThreadNew>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	4a1c      	ldr	r2, [pc, #112]	; (8002c24 <StartMQTTConnectTask+0x59c>)
 8002bb2:	6013      	str	r3, [r2, #0]
		  sprintf(&(msg.str), "On the line, Firmware V0.93\r\n\0");
 8002bb4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002bb8:	491b      	ldr	r1, [pc, #108]	; (8002c28 <StartMQTTConnectTask+0x5a0>)
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f00c fa02 	bl	800efc4 <siprintf>
		  osMessageQueuePut(SIM800SendQueueHandle, &msg, 0, osWaitForever);
 8002bc0:	4b1a      	ldr	r3, [pc, #104]	; (8002c2c <StartMQTTConnectTask+0x5a4>)
 8002bc2:	6818      	ldr	r0, [r3, #0]
 8002bc4:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f008 fdf7 	bl	800b7c0 <osMessageQueuePut>
		  //HAL_UART_Receive_DMA(&huart1, SIM800BuffRx, BUFF_SIM_SIZE); //start receive messages
		  osThreadTerminate(MQTTConnectTaskHandle);
 8002bd2:	4b17      	ldr	r3, [pc, #92]	; (8002c30 <StartMQTTConnectTask+0x5a8>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f008 fa48 	bl	800b06c <osThreadTerminate>
	  if (osMutexAcquire(UART1MutexHandle, osWaitForever) == osOK)
 8002bdc:	e564      	b.n	80026a8 <StartMQTTConnectTask+0x20>
 8002bde:	bf00      	nop
 8002be0:	200004f4 	.word	0x200004f4
 8002be4:	20000010 	.word	0x20000010
 8002be8:	080105a4 	.word	0x080105a4
 8002bec:	20000224 	.word	0x20000224
 8002bf0:	080105a8 	.word	0x080105a8
 8002bf4:	20000450 	.word	0x20000450
 8002bf8:	20000024 	.word	0x20000024
 8002bfc:	080105b8 	.word	0x080105b8
 8002c00:	080105c8 	.word	0x080105c8
 8002c04:	20000474 	.word	0x20000474
 8002c08:	2000045c 	.word	0x2000045c
 8002c0c:	20000460 	.word	0x20000460
 8002c10:	20000475 	.word	0x20000475
 8002c14:	40020800 	.word	0x40020800
 8002c18:	20000464 	.word	0x20000464
 8002c1c:	08010d10 	.word	0x08010d10
 8002c20:	08001e85 	.word	0x08001e85
 8002c24:	2000043c 	.word	0x2000043c
 8002c28:	080105dc 	.word	0x080105dc
 8002c2c:	20000454 	.word	0x20000454
 8002c30:	20000444 	.word	0x20000444

08002c34 <StartMessHandlerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMessHandlerTask */
void StartMessHandlerTask(void *argument)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b0a6      	sub	sp, #152	; 0x98
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
	message_type msg;
	message_type msg2;
  /* Infinite loop */
  for(;;)
  {
	  if (osMessageQueueGet(RxSIM800QueueHandle, &msg, 0, osWaitForever) == osOK)
 8002c3c:	4b48      	ldr	r3, [pc, #288]	; (8002d60 <StartMessHandlerTask+0x12c>)
 8002c3e:	6818      	ldr	r0, [r3, #0]
 8002c40:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002c44:	f04f 33ff 	mov.w	r3, #4294967295
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f008 fe19 	bl	800b880 <osMessageQueueGet>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d1f3      	bne.n	8002c3c <StartMessHandlerTask+0x8>
	  {

		sprintf(&(msg2.str), "RX\r\n\0");
 8002c54:	f107 0308 	add.w	r3, r7, #8
 8002c58:	4942      	ldr	r1, [pc, #264]	; (8002d64 <StartMessHandlerTask+0x130>)
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f00c f9b2 	bl	800efc4 <siprintf>
		osMessageQueuePut(SIM800SendQueueHandle, &msg2, 0, osWaitForever);
 8002c60:	4b41      	ldr	r3, [pc, #260]	; (8002d68 <StartMessHandlerTask+0x134>)
 8002c62:	6818      	ldr	r0, [r3, #0]
 8002c64:	f107 0108 	add.w	r1, r7, #8
 8002c68:	f04f 33ff 	mov.w	r3, #4294967295
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f008 fda7 	bl	800b7c0 <osMessageQueuePut>
		if (String_in_String(msg.str,MESSAGE_TYPE_BUFF_SIZE,";;on"))
 8002c72:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002c76:	4a3d      	ldr	r2, [pc, #244]	; (8002d6c <StartMessHandlerTask+0x138>)
 8002c78:	2146      	movs	r1, #70	; 0x46
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7fe fd9c 	bl	80017b8 <String_in_String>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d005      	beq.n	8002c92 <StartMessHandlerTask+0x5e>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 8002c86:	2200      	movs	r2, #0
 8002c88:	2102      	movs	r1, #2
 8002c8a:	4839      	ldr	r0, [pc, #228]	; (8002d70 <StartMessHandlerTask+0x13c>)
 8002c8c:	f002 fc24 	bl	80054d8 <HAL_GPIO_WritePin>
 8002c90:	e7d4      	b.n	8002c3c <StartMessHandlerTask+0x8>
		}
		else if (String_in_String(msg.str,MESSAGE_TYPE_BUFF_SIZE,";;off"))
 8002c92:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002c96:	4a37      	ldr	r2, [pc, #220]	; (8002d74 <StartMessHandlerTask+0x140>)
 8002c98:	2146      	movs	r1, #70	; 0x46
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7fe fd8c 	bl	80017b8 <String_in_String>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d005      	beq.n	8002cb2 <StartMessHandlerTask+0x7e>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1);
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	2102      	movs	r1, #2
 8002caa:	4831      	ldr	r0, [pc, #196]	; (8002d70 <StartMessHandlerTask+0x13c>)
 8002cac:	f002 fc14 	bl	80054d8 <HAL_GPIO_WritePin>
 8002cb0:	e7c4      	b.n	8002c3c <StartMessHandlerTask+0x8>
		}
		else if (String_in_String(msg.str,MESSAGE_TYPE_BUFF_SIZE,";;data"))
 8002cb2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002cb6:	4a30      	ldr	r2, [pc, #192]	; (8002d78 <StartMessHandlerTask+0x144>)
 8002cb8:	2146      	movs	r1, #70	; 0x46
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7fe fd7c 	bl	80017b8 <String_in_String>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d003      	beq.n	8002cce <StartMessHandlerTask+0x9a>
		{
			Get_data = 1;
 8002cc6:	4b2d      	ldr	r3, [pc, #180]	; (8002d7c <StartMessHandlerTask+0x148>)
 8002cc8:	2201      	movs	r2, #1
 8002cca:	701a      	strb	r2, [r3, #0]
 8002ccc:	e7b6      	b.n	8002c3c <StartMessHandlerTask+0x8>
		}
		else if (String_in_String(msg.str,MESSAGE_TYPE_BUFF_SIZE,";;updt"))
 8002cce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002cd2:	4a2b      	ldr	r2, [pc, #172]	; (8002d80 <StartMessHandlerTask+0x14c>)
 8002cd4:	2146      	movs	r1, #70	; 0x46
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7fe fd6e 	bl	80017b8 <String_in_String>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d0ac      	beq.n	8002c3c <StartMessHandlerTask+0x8>
		{
			if (osMutexAcquire(UART1MutexHandle, osWaitForever) == osOK)
 8002ce2:	4b28      	ldr	r3, [pc, #160]	; (8002d84 <StartMessHandlerTask+0x150>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f04f 31ff 	mov.w	r1, #4294967295
 8002cea:	4618      	mov	r0, r3
 8002cec:	f008 fb4c 	bl	800b388 <osMutexAcquire>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1a2      	bne.n	8002c3c <StartMessHandlerTask+0x8>
		    {
				memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002cf6:	2264      	movs	r2, #100	; 0x64
 8002cf8:	2100      	movs	r1, #0
 8002cfa:	4823      	ldr	r0, [pc, #140]	; (8002d88 <StartMessHandlerTask+0x154>)
 8002cfc:	f00c f926 	bl	800ef4c <memset>
				sprintf(str_SIM800,"AT+CIPCLOSE\r\n\0");
 8002d00:	4922      	ldr	r1, [pc, #136]	; (8002d8c <StartMessHandlerTask+0x158>)
 8002d02:	4823      	ldr	r0, [pc, #140]	; (8002d90 <StartMessHandlerTask+0x15c>)
 8002d04:	f00c f95e 	bl	800efc4 <siprintf>
				HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 8002d08:	4821      	ldr	r0, [pc, #132]	; (8002d90 <StartMessHandlerTask+0x15c>)
 8002d0a:	f7fd fa81 	bl	8000210 <strlen>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	461a      	mov	r2, r3
 8002d14:	491e      	ldr	r1, [pc, #120]	; (8002d90 <StartMessHandlerTask+0x15c>)
 8002d16:	481f      	ldr	r0, [pc, #124]	; (8002d94 <StartMessHandlerTask+0x160>)
 8002d18:	f006 fe10 	bl	800993c <HAL_UART_Transmit_DMA>
				osDelay(1000);
 8002d1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d20:	f008 f9d1 	bl	800b0c6 <osDelay>
				osThreadTerminate(PINGTaskHandle);
 8002d24:	4b1c      	ldr	r3, [pc, #112]	; (8002d98 <StartMessHandlerTask+0x164>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f008 f99f 	bl	800b06c <osThreadTerminate>
				osThreadTerminate(SIM800SendTaskHandle);
 8002d2e:	4b1b      	ldr	r3, [pc, #108]	; (8002d9c <StartMessHandlerTask+0x168>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f008 f99a 	bl	800b06c <osThreadTerminate>
				osThreadTerminate(defaultTaskHandle);
 8002d38:	4b19      	ldr	r3, [pc, #100]	; (8002da0 <StartMessHandlerTask+0x16c>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f008 f995 	bl	800b06c <osThreadTerminate>
				osMutexRelease(UART1MutexHandle); //release UART for SIM800
 8002d42:	4b10      	ldr	r3, [pc, #64]	; (8002d84 <StartMessHandlerTask+0x150>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f008 fb69 	bl	800b41e <osMutexRelease>
				myTaskGetFirmHandle = osThreadNew(StartGetFirmware, NULL, &myTaskGetFirm_attributes);
 8002d4c:	4a15      	ldr	r2, [pc, #84]	; (8002da4 <StartMessHandlerTask+0x170>)
 8002d4e:	2100      	movs	r1, #0
 8002d50:	4815      	ldr	r0, [pc, #84]	; (8002da8 <StartMessHandlerTask+0x174>)
 8002d52:	f008 f8f9 	bl	800af48 <osThreadNew>
 8002d56:	4603      	mov	r3, r0
 8002d58:	4a14      	ldr	r2, [pc, #80]	; (8002dac <StartMessHandlerTask+0x178>)
 8002d5a:	6013      	str	r3, [r2, #0]
	  if (osMessageQueueGet(RxSIM800QueueHandle, &msg, 0, osWaitForever) == osOK)
 8002d5c:	e76e      	b.n	8002c3c <StartMessHandlerTask+0x8>
 8002d5e:	bf00      	nop
 8002d60:	20000458 	.word	0x20000458
 8002d64:	08010630 	.word	0x08010630
 8002d68:	20000454 	.word	0x20000454
 8002d6c:	08010638 	.word	0x08010638
 8002d70:	40020800 	.word	0x40020800
 8002d74:	08010640 	.word	0x08010640
 8002d78:	08010648 	.word	0x08010648
 8002d7c:	20000476 	.word	0x20000476
 8002d80:	08010650 	.word	0x08010650
 8002d84:	20000464 	.word	0x20000464
 8002d88:	200004f4 	.word	0x200004f4
 8002d8c:	08010658 	.word	0x08010658
 8002d90:	20000490 	.word	0x20000490
 8002d94:	20000224 	.word	0x20000224
 8002d98:	2000043c 	.word	0x2000043c
 8002d9c:	20000438 	.word	0x20000438
 8002da0:	2000042c 	.word	0x2000042c
 8002da4:	08010da0 	.word	0x08010da0
 8002da8:	08002db1 	.word	0x08002db1
 8002dac:	2000044c 	.word	0x2000044c

08002db0 <StartGetFirmware>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGetFirmware */
void StartGetFirmware(void *argument)
{
 8002db0:	b590      	push	{r4, r7, lr}
 8002db2:	b0cb      	sub	sp, #300	; 0x12c
 8002db4:	af02      	add	r7, sp, #8
 8002db6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002dba:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002dbe:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartGetFirmware */
	message_type msg; // string for debug message
	uint8_t ans; //is one string in another
	uint8_t send_MQTT_message[BUFF_SIM_SIZE] = {}; //message to SIM800
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002dc4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002dc8:	2260      	movs	r2, #96	; 0x60
 8002dca:	2100      	movs	r1, #0
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f00c f8bd 	bl	800ef4c <memset>
	uint32_t sector_of_firmware = 30;
 8002dd2:	231e      	movs	r3, #30
 8002dd4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	uint8_t tmp2[30];
	uint8_t tmp3[30];
  /* Infinite loop */
  for(;;)
  {
	  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8002dd8:	4bc0      	ldr	r3, [pc, #768]	; (80030dc <StartGetFirmware+0x32c>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68da      	ldr	r2, [r3, #12]
 8002dde:	4bbf      	ldr	r3, [pc, #764]	; (80030dc <StartGetFirmware+0x32c>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f042 0210 	orr.w	r2, r2, #16
 8002de6:	60da      	str	r2, [r3, #12]
	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002de8:	2264      	movs	r2, #100	; 0x64
 8002dea:	2100      	movs	r1, #0
 8002dec:	48bc      	ldr	r0, [pc, #752]	; (80030e0 <StartGetFirmware+0x330>)
 8002dee:	f00c f8ad 	bl	800ef4c <memset>
	  sprintf(str_SIM800,"AT+FTPMODE=1\r\n\0");
 8002df2:	49bc      	ldr	r1, [pc, #752]	; (80030e4 <StartGetFirmware+0x334>)
 8002df4:	48bc      	ldr	r0, [pc, #752]	; (80030e8 <StartGetFirmware+0x338>)
 8002df6:	f00c f8e5 	bl	800efc4 <siprintf>
	  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 8002dfa:	48bb      	ldr	r0, [pc, #748]	; (80030e8 <StartGetFirmware+0x338>)
 8002dfc:	f7fd fa08 	bl	8000210 <strlen>
 8002e00:	4603      	mov	r3, r0
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	461a      	mov	r2, r3
 8002e06:	49b8      	ldr	r1, [pc, #736]	; (80030e8 <StartGetFirmware+0x338>)
 8002e08:	48b4      	ldr	r0, [pc, #720]	; (80030dc <StartGetFirmware+0x32c>)
 8002e0a:	f006 fd97 	bl	800993c <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 8002e0e:	48b7      	ldr	r0, [pc, #732]	; (80030ec <StartGetFirmware+0x33c>)
 8002e10:	f7fe fd80 	bl	8001914 <SIM800_Ans>
 8002e14:	4603      	mov	r3, r0
 8002e16:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
	  if (!ans)
 8002e1a:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d11d      	bne.n	8002e5e <StartGetFirmware+0xae>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002e22:	2264      	movs	r2, #100	; 0x64
 8002e24:	2100      	movs	r1, #0
 8002e26:	48ae      	ldr	r0, [pc, #696]	; (80030e0 <StartGetFirmware+0x330>)
 8002e28:	f00c f890 	bl	800ef4c <memset>
		  ans = SIM800_Ans("OK");
 8002e2c:	48af      	ldr	r0, [pc, #700]	; (80030ec <StartGetFirmware+0x33c>)
 8002e2e:	f7fe fd71 	bl	8001914 <SIM800_Ans>
 8002e32:	4603      	mov	r3, r0
 8002e34:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
		  if (!ans)
 8002e38:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d10e      	bne.n	8002e5e <StartGetFirmware+0xae>
		  {
			  strcpy(&(msg.str), "FTPMODE\r\n\0");
 8002e40:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002e44:	4aaa      	ldr	r2, [pc, #680]	; (80030f0 <StartGetFirmware+0x340>)
 8002e46:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e48:	c303      	stmia	r3!, {r0, r1}
 8002e4a:	801a      	strh	r2, [r3, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8002e4c:	4ba9      	ldr	r3, [pc, #676]	; (80030f4 <StartGetFirmware+0x344>)
 8002e4e:	6818      	ldr	r0, [r3, #0]
 8002e50:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8002e54:	f04f 33ff 	mov.w	r3, #4294967295
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f008 fcb1 	bl	800b7c0 <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 8002e5e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002e62:	f008 f930 	bl	800b0c6 <osDelay>
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
		  }
	  }
	  osDelay(300);*/

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002e66:	2264      	movs	r2, #100	; 0x64
 8002e68:	2100      	movs	r1, #0
 8002e6a:	489d      	ldr	r0, [pc, #628]	; (80030e0 <StartGetFirmware+0x330>)
 8002e6c:	f00c f86e 	bl	800ef4c <memset>
	  sprintf(str_SIM800,"AT+FTPTYPE=I\r\n\0");
 8002e70:	49a1      	ldr	r1, [pc, #644]	; (80030f8 <StartGetFirmware+0x348>)
 8002e72:	489d      	ldr	r0, [pc, #628]	; (80030e8 <StartGetFirmware+0x338>)
 8002e74:	f00c f8a6 	bl	800efc4 <siprintf>
	  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 8002e78:	489b      	ldr	r0, [pc, #620]	; (80030e8 <StartGetFirmware+0x338>)
 8002e7a:	f7fd f9c9 	bl	8000210 <strlen>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	461a      	mov	r2, r3
 8002e84:	4998      	ldr	r1, [pc, #608]	; (80030e8 <StartGetFirmware+0x338>)
 8002e86:	4895      	ldr	r0, [pc, #596]	; (80030dc <StartGetFirmware+0x32c>)
 8002e88:	f006 fd58 	bl	800993c <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 8002e8c:	4897      	ldr	r0, [pc, #604]	; (80030ec <StartGetFirmware+0x33c>)
 8002e8e:	f7fe fd41 	bl	8001914 <SIM800_Ans>
 8002e92:	4603      	mov	r3, r0
 8002e94:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
	  if (!ans)
 8002e98:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d11d      	bne.n	8002edc <StartGetFirmware+0x12c>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002ea0:	2264      	movs	r2, #100	; 0x64
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	488e      	ldr	r0, [pc, #568]	; (80030e0 <StartGetFirmware+0x330>)
 8002ea6:	f00c f851 	bl	800ef4c <memset>
		  ans = SIM800_Ans("OK");
 8002eaa:	4890      	ldr	r0, [pc, #576]	; (80030ec <StartGetFirmware+0x33c>)
 8002eac:	f7fe fd32 	bl	8001914 <SIM800_Ans>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
		  if (!ans)
 8002eb6:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10e      	bne.n	8002edc <StartGetFirmware+0x12c>
		  {
			  strcpy(&(msg.str), "FTPTYPE\r\n\0");
 8002ebe:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002ec2:	4a8e      	ldr	r2, [pc, #568]	; (80030fc <StartGetFirmware+0x34c>)
 8002ec4:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ec6:	c303      	stmia	r3!, {r0, r1}
 8002ec8:	801a      	strh	r2, [r3, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8002eca:	4b8a      	ldr	r3, [pc, #552]	; (80030f4 <StartGetFirmware+0x344>)
 8002ecc:	6818      	ldr	r0, [r3, #0]
 8002ece:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8002ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f008 fc72 	bl	800b7c0 <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 8002edc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002ee0:	f008 f8f1 	bl	800b0c6 <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002ee4:	2264      	movs	r2, #100	; 0x64
 8002ee6:	2100      	movs	r1, #0
 8002ee8:	487d      	ldr	r0, [pc, #500]	; (80030e0 <StartGetFirmware+0x330>)
 8002eea:	f00c f82f 	bl	800ef4c <memset>
	  sprintf(str_SIM800,"AT+SAPBR=3,1,CONTYPE,GPRS\r\n\0");
 8002eee:	4984      	ldr	r1, [pc, #528]	; (8003100 <StartGetFirmware+0x350>)
 8002ef0:	487d      	ldr	r0, [pc, #500]	; (80030e8 <StartGetFirmware+0x338>)
 8002ef2:	f00c f867 	bl	800efc4 <siprintf>
	  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 8002ef6:	487c      	ldr	r0, [pc, #496]	; (80030e8 <StartGetFirmware+0x338>)
 8002ef8:	f7fd f98a 	bl	8000210 <strlen>
 8002efc:	4603      	mov	r3, r0
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	461a      	mov	r2, r3
 8002f02:	4979      	ldr	r1, [pc, #484]	; (80030e8 <StartGetFirmware+0x338>)
 8002f04:	4875      	ldr	r0, [pc, #468]	; (80030dc <StartGetFirmware+0x32c>)
 8002f06:	f006 fd19 	bl	800993c <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 8002f0a:	4878      	ldr	r0, [pc, #480]	; (80030ec <StartGetFirmware+0x33c>)
 8002f0c:	f7fe fd02 	bl	8001914 <SIM800_Ans>
 8002f10:	4603      	mov	r3, r0
 8002f12:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
	  if (!ans)
 8002f16:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d11e      	bne.n	8002f5c <StartGetFirmware+0x1ac>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002f1e:	2264      	movs	r2, #100	; 0x64
 8002f20:	2100      	movs	r1, #0
 8002f22:	486f      	ldr	r0, [pc, #444]	; (80030e0 <StartGetFirmware+0x330>)
 8002f24:	f00c f812 	bl	800ef4c <memset>
		  ans = SIM800_Ans("OK");
 8002f28:	4870      	ldr	r0, [pc, #448]	; (80030ec <StartGetFirmware+0x33c>)
 8002f2a:	f7fe fcf3 	bl	8001914 <SIM800_Ans>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
		  if (!ans)
 8002f34:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d10f      	bne.n	8002f5c <StartGetFirmware+0x1ac>
		  {
			  strcpy(&(msg.str), "SAPBR\r\n\0");
 8002f3c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002f40:	4a70      	ldr	r2, [pc, #448]	; (8003104 <StartGetFirmware+0x354>)
 8002f42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f46:	e883 0003 	stmia.w	r3, {r0, r1}
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8002f4a:	4b6a      	ldr	r3, [pc, #424]	; (80030f4 <StartGetFirmware+0x344>)
 8002f4c:	6818      	ldr	r0, [r3, #0]
 8002f4e:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8002f52:	f04f 33ff 	mov.w	r3, #4294967295
 8002f56:	2200      	movs	r2, #0
 8002f58:	f008 fc32 	bl	800b7c0 <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 8002f5c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002f60:	f008 f8b1 	bl	800b0c6 <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002f64:	2264      	movs	r2, #100	; 0x64
 8002f66:	2100      	movs	r1, #0
 8002f68:	485d      	ldr	r0, [pc, #372]	; (80030e0 <StartGetFirmware+0x330>)
 8002f6a:	f00b ffef 	bl	800ef4c <memset>
	  sprintf(str_SIM800,"AT+SAPBR=3,1,APN,internet.beeline.ru\r\n\0");
 8002f6e:	4966      	ldr	r1, [pc, #408]	; (8003108 <StartGetFirmware+0x358>)
 8002f70:	485d      	ldr	r0, [pc, #372]	; (80030e8 <StartGetFirmware+0x338>)
 8002f72:	f00c f827 	bl	800efc4 <siprintf>
	  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 8002f76:	485c      	ldr	r0, [pc, #368]	; (80030e8 <StartGetFirmware+0x338>)
 8002f78:	f7fd f94a 	bl	8000210 <strlen>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	461a      	mov	r2, r3
 8002f82:	4959      	ldr	r1, [pc, #356]	; (80030e8 <StartGetFirmware+0x338>)
 8002f84:	4855      	ldr	r0, [pc, #340]	; (80030dc <StartGetFirmware+0x32c>)
 8002f86:	f006 fcd9 	bl	800993c <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 8002f8a:	4858      	ldr	r0, [pc, #352]	; (80030ec <StartGetFirmware+0x33c>)
 8002f8c:	f7fe fcc2 	bl	8001914 <SIM800_Ans>
 8002f90:	4603      	mov	r3, r0
 8002f92:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
	  if (!ans)
 8002f96:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d11e      	bne.n	8002fdc <StartGetFirmware+0x22c>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002f9e:	2264      	movs	r2, #100	; 0x64
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	484f      	ldr	r0, [pc, #316]	; (80030e0 <StartGetFirmware+0x330>)
 8002fa4:	f00b ffd2 	bl	800ef4c <memset>
		  ans = SIM800_Ans("OK");
 8002fa8:	4850      	ldr	r0, [pc, #320]	; (80030ec <StartGetFirmware+0x33c>)
 8002faa:	f7fe fcb3 	bl	8001914 <SIM800_Ans>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
		  if (!ans)
 8002fb4:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d10f      	bne.n	8002fdc <StartGetFirmware+0x22c>
		  {
			  strcpy(&(msg.str), "SAPBR\r\n\0");
 8002fbc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002fc0:	4a50      	ldr	r2, [pc, #320]	; (8003104 <StartGetFirmware+0x354>)
 8002fc2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002fc6:	e883 0003 	stmia.w	r3, {r0, r1}
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8002fca:	4b4a      	ldr	r3, [pc, #296]	; (80030f4 <StartGetFirmware+0x344>)
 8002fcc:	6818      	ldr	r0, [r3, #0]
 8002fce:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8002fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f008 fbf2 	bl	800b7c0 <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 8002fdc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002fe0:	f008 f871 	bl	800b0c6 <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002fe4:	2264      	movs	r2, #100	; 0x64
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	483d      	ldr	r0, [pc, #244]	; (80030e0 <StartGetFirmware+0x330>)
 8002fea:	f00b ffaf 	bl	800ef4c <memset>
	  sprintf(str_SIM800,"AT+SAPBR=1,1\r\n\0");
 8002fee:	4947      	ldr	r1, [pc, #284]	; (800310c <StartGetFirmware+0x35c>)
 8002ff0:	483d      	ldr	r0, [pc, #244]	; (80030e8 <StartGetFirmware+0x338>)
 8002ff2:	f00b ffe7 	bl	800efc4 <siprintf>
	  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 8002ff6:	483c      	ldr	r0, [pc, #240]	; (80030e8 <StartGetFirmware+0x338>)
 8002ff8:	f7fd f90a 	bl	8000210 <strlen>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	461a      	mov	r2, r3
 8003002:	4939      	ldr	r1, [pc, #228]	; (80030e8 <StartGetFirmware+0x338>)
 8003004:	4835      	ldr	r0, [pc, #212]	; (80030dc <StartGetFirmware+0x32c>)
 8003006:	f006 fc99 	bl	800993c <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 800300a:	4838      	ldr	r0, [pc, #224]	; (80030ec <StartGetFirmware+0x33c>)
 800300c:	f7fe fc82 	bl	8001914 <SIM800_Ans>
 8003010:	4603      	mov	r3, r0
 8003012:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
	  if (!ans)
 8003016:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 800301a:	2b00      	cmp	r3, #0
 800301c:	d11e      	bne.n	800305c <StartGetFirmware+0x2ac>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 800301e:	2264      	movs	r2, #100	; 0x64
 8003020:	2100      	movs	r1, #0
 8003022:	482f      	ldr	r0, [pc, #188]	; (80030e0 <StartGetFirmware+0x330>)
 8003024:	f00b ff92 	bl	800ef4c <memset>
		  ans = SIM800_Ans("OK");
 8003028:	4830      	ldr	r0, [pc, #192]	; (80030ec <StartGetFirmware+0x33c>)
 800302a:	f7fe fc73 	bl	8001914 <SIM800_Ans>
 800302e:	4603      	mov	r3, r0
 8003030:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
		  if (!ans)
 8003034:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8003038:	2b00      	cmp	r3, #0
 800303a:	d10f      	bne.n	800305c <StartGetFirmware+0x2ac>
		  {
			  strcpy(&(msg.str), "SAPBR\r\n\0");
 800303c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003040:	4a30      	ldr	r2, [pc, #192]	; (8003104 <StartGetFirmware+0x354>)
 8003042:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003046:	e883 0003 	stmia.w	r3, {r0, r1}
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 800304a:	4b2a      	ldr	r3, [pc, #168]	; (80030f4 <StartGetFirmware+0x344>)
 800304c:	6818      	ldr	r0, [r3, #0]
 800304e:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003052:	f04f 33ff 	mov.w	r3, #4294967295
 8003056:	2200      	movs	r2, #0
 8003058:	f008 fbb2 	bl	800b7c0 <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 800305c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003060:	f008 f831 	bl	800b0c6 <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8003064:	2264      	movs	r2, #100	; 0x64
 8003066:	2100      	movs	r1, #0
 8003068:	481d      	ldr	r0, [pc, #116]	; (80030e0 <StartGetFirmware+0x330>)
 800306a:	f00b ff6f 	bl	800ef4c <memset>
	  sprintf(str_SIM800,"AT+FTPCID=1\r\n\0");
 800306e:	4928      	ldr	r1, [pc, #160]	; (8003110 <StartGetFirmware+0x360>)
 8003070:	481d      	ldr	r0, [pc, #116]	; (80030e8 <StartGetFirmware+0x338>)
 8003072:	f00b ffa7 	bl	800efc4 <siprintf>
	  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 8003076:	481c      	ldr	r0, [pc, #112]	; (80030e8 <StartGetFirmware+0x338>)
 8003078:	f7fd f8ca 	bl	8000210 <strlen>
 800307c:	4603      	mov	r3, r0
 800307e:	b29b      	uxth	r3, r3
 8003080:	461a      	mov	r2, r3
 8003082:	4919      	ldr	r1, [pc, #100]	; (80030e8 <StartGetFirmware+0x338>)
 8003084:	4815      	ldr	r0, [pc, #84]	; (80030dc <StartGetFirmware+0x32c>)
 8003086:	f006 fc59 	bl	800993c <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 800308a:	4818      	ldr	r0, [pc, #96]	; (80030ec <StartGetFirmware+0x33c>)
 800308c:	f7fe fc42 	bl	8001914 <SIM800_Ans>
 8003090:	4603      	mov	r3, r0
 8003092:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
	  if (!ans)
 8003096:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 800309a:	2b00      	cmp	r3, #0
 800309c:	d13c      	bne.n	8003118 <StartGetFirmware+0x368>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 800309e:	2264      	movs	r2, #100	; 0x64
 80030a0:	2100      	movs	r1, #0
 80030a2:	480f      	ldr	r0, [pc, #60]	; (80030e0 <StartGetFirmware+0x330>)
 80030a4:	f00b ff52 	bl	800ef4c <memset>
		  ans = SIM800_Ans("OK");
 80030a8:	4810      	ldr	r0, [pc, #64]	; (80030ec <StartGetFirmware+0x33c>)
 80030aa:	f7fe fc33 	bl	8001914 <SIM800_Ans>
 80030ae:	4603      	mov	r3, r0
 80030b0:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
		  if (!ans)
 80030b4:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d12d      	bne.n	8003118 <StartGetFirmware+0x368>
		  {
			  strcpy(&(msg.str), "FTPCID\r\n\0");
 80030bc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80030c0:	4a14      	ldr	r2, [pc, #80]	; (8003114 <StartGetFirmware+0x364>)
 80030c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80030c4:	c303      	stmia	r3!, {r0, r1}
 80030c6:	701a      	strb	r2, [r3, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 80030c8:	4b0a      	ldr	r3, [pc, #40]	; (80030f4 <StartGetFirmware+0x344>)
 80030ca:	6818      	ldr	r0, [r3, #0]
 80030cc:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 80030d0:	f04f 33ff 	mov.w	r3, #4294967295
 80030d4:	2200      	movs	r2, #0
 80030d6:	f008 fb73 	bl	800b7c0 <osMessageQueuePut>
 80030da:	e01d      	b.n	8003118 <StartGetFirmware+0x368>
 80030dc:	20000224 	.word	0x20000224
 80030e0:	200004f4 	.word	0x200004f4
 80030e4:	08010668 	.word	0x08010668
 80030e8:	20000490 	.word	0x20000490
 80030ec:	080103d0 	.word	0x080103d0
 80030f0:	08010678 	.word	0x08010678
 80030f4:	20000450 	.word	0x20000450
 80030f8:	08010684 	.word	0x08010684
 80030fc:	08010694 	.word	0x08010694
 8003100:	080106a0 	.word	0x080106a0
 8003104:	080106c0 	.word	0x080106c0
 8003108:	080106cc 	.word	0x080106cc
 800310c:	080106f4 	.word	0x080106f4
 8003110:	08010704 	.word	0x08010704
 8003114:	08010714 	.word	0x08010714
		  }
	  }
	  osDelay(300);
 8003118:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800311c:	f007 ffd3 	bl	800b0c6 <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8003120:	2264      	movs	r2, #100	; 0x64
 8003122:	2100      	movs	r1, #0
 8003124:	48c4      	ldr	r0, [pc, #784]	; (8003438 <StartGetFirmware+0x688>)
 8003126:	f00b ff11 	bl	800ef4c <memset>
	  sprintf(str_SIM800,"AT+FTPSERV=%s\r\n\0", DEF_IP_FTP);
 800312a:	4ac4      	ldr	r2, [pc, #784]	; (800343c <StartGetFirmware+0x68c>)
 800312c:	49c4      	ldr	r1, [pc, #784]	; (8003440 <StartGetFirmware+0x690>)
 800312e:	48c5      	ldr	r0, [pc, #788]	; (8003444 <StartGetFirmware+0x694>)
 8003130:	f00b ff48 	bl	800efc4 <siprintf>
	  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 8003134:	48c3      	ldr	r0, [pc, #780]	; (8003444 <StartGetFirmware+0x694>)
 8003136:	f7fd f86b 	bl	8000210 <strlen>
 800313a:	4603      	mov	r3, r0
 800313c:	b29b      	uxth	r3, r3
 800313e:	461a      	mov	r2, r3
 8003140:	49c0      	ldr	r1, [pc, #768]	; (8003444 <StartGetFirmware+0x694>)
 8003142:	48c1      	ldr	r0, [pc, #772]	; (8003448 <StartGetFirmware+0x698>)
 8003144:	f006 fbfa 	bl	800993c <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 8003148:	48c0      	ldr	r0, [pc, #768]	; (800344c <StartGetFirmware+0x69c>)
 800314a:	f7fe fbe3 	bl	8001914 <SIM800_Ans>
 800314e:	4603      	mov	r3, r0
 8003150:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
	  if (!ans)
 8003154:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8003158:	2b00      	cmp	r3, #0
 800315a:	d11d      	bne.n	8003198 <StartGetFirmware+0x3e8>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 800315c:	2264      	movs	r2, #100	; 0x64
 800315e:	2100      	movs	r1, #0
 8003160:	48b5      	ldr	r0, [pc, #724]	; (8003438 <StartGetFirmware+0x688>)
 8003162:	f00b fef3 	bl	800ef4c <memset>
		  ans = SIM800_Ans("OK");
 8003166:	48b9      	ldr	r0, [pc, #740]	; (800344c <StartGetFirmware+0x69c>)
 8003168:	f7fe fbd4 	bl	8001914 <SIM800_Ans>
 800316c:	4603      	mov	r3, r0
 800316e:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
		  if (!ans)
 8003172:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10e      	bne.n	8003198 <StartGetFirmware+0x3e8>
		  {
			  strcpy(&(msg.str), "FTPSERV\r\n\0");
 800317a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800317e:	4ab4      	ldr	r2, [pc, #720]	; (8003450 <StartGetFirmware+0x6a0>)
 8003180:	ca07      	ldmia	r2, {r0, r1, r2}
 8003182:	c303      	stmia	r3!, {r0, r1}
 8003184:	801a      	strh	r2, [r3, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8003186:	4bb3      	ldr	r3, [pc, #716]	; (8003454 <StartGetFirmware+0x6a4>)
 8003188:	6818      	ldr	r0, [r3, #0]
 800318a:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 800318e:	f04f 33ff 	mov.w	r3, #4294967295
 8003192:	2200      	movs	r2, #0
 8003194:	f008 fb14 	bl	800b7c0 <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 8003198:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800319c:	f007 ff93 	bl	800b0c6 <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80031a0:	2264      	movs	r2, #100	; 0x64
 80031a2:	2100      	movs	r1, #0
 80031a4:	48a4      	ldr	r0, [pc, #656]	; (8003438 <StartGetFirmware+0x688>)
 80031a6:	f00b fed1 	bl	800ef4c <memset>
	  sprintf(str_SIM800,"AT+FTPUN=%s\r\n\0", DEF_USER_FTP);
 80031aa:	4aab      	ldr	r2, [pc, #684]	; (8003458 <StartGetFirmware+0x6a8>)
 80031ac:	49ab      	ldr	r1, [pc, #684]	; (800345c <StartGetFirmware+0x6ac>)
 80031ae:	48a5      	ldr	r0, [pc, #660]	; (8003444 <StartGetFirmware+0x694>)
 80031b0:	f00b ff08 	bl	800efc4 <siprintf>
	  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 80031b4:	48a3      	ldr	r0, [pc, #652]	; (8003444 <StartGetFirmware+0x694>)
 80031b6:	f7fd f82b 	bl	8000210 <strlen>
 80031ba:	4603      	mov	r3, r0
 80031bc:	b29b      	uxth	r3, r3
 80031be:	461a      	mov	r2, r3
 80031c0:	49a0      	ldr	r1, [pc, #640]	; (8003444 <StartGetFirmware+0x694>)
 80031c2:	48a1      	ldr	r0, [pc, #644]	; (8003448 <StartGetFirmware+0x698>)
 80031c4:	f006 fbba 	bl	800993c <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 80031c8:	48a0      	ldr	r0, [pc, #640]	; (800344c <StartGetFirmware+0x69c>)
 80031ca:	f7fe fba3 	bl	8001914 <SIM800_Ans>
 80031ce:	4603      	mov	r3, r0
 80031d0:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
	  if (!ans)
 80031d4:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d11e      	bne.n	800321a <StartGetFirmware+0x46a>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80031dc:	2264      	movs	r2, #100	; 0x64
 80031de:	2100      	movs	r1, #0
 80031e0:	4895      	ldr	r0, [pc, #596]	; (8003438 <StartGetFirmware+0x688>)
 80031e2:	f00b feb3 	bl	800ef4c <memset>
		  ans = SIM800_Ans("OK");
 80031e6:	4899      	ldr	r0, [pc, #612]	; (800344c <StartGetFirmware+0x69c>)
 80031e8:	f7fe fb94 	bl	8001914 <SIM800_Ans>
 80031ec:	4603      	mov	r3, r0
 80031ee:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
		  if (!ans)
 80031f2:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10f      	bne.n	800321a <StartGetFirmware+0x46a>
		  {
			  strcpy(&(msg.str), "FTPUN\r\n\0");
 80031fa:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80031fe:	4a98      	ldr	r2, [pc, #608]	; (8003460 <StartGetFirmware+0x6b0>)
 8003200:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003204:	e883 0003 	stmia.w	r3, {r0, r1}
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8003208:	4b92      	ldr	r3, [pc, #584]	; (8003454 <StartGetFirmware+0x6a4>)
 800320a:	6818      	ldr	r0, [r3, #0]
 800320c:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003210:	f04f 33ff 	mov.w	r3, #4294967295
 8003214:	2200      	movs	r2, #0
 8003216:	f008 fad3 	bl	800b7c0 <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 800321a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800321e:	f007 ff52 	bl	800b0c6 <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8003222:	2264      	movs	r2, #100	; 0x64
 8003224:	2100      	movs	r1, #0
 8003226:	4884      	ldr	r0, [pc, #528]	; (8003438 <StartGetFirmware+0x688>)
 8003228:	f00b fe90 	bl	800ef4c <memset>
	  sprintf(str_SIM800,"AT+FTPPW=%s\r\n\0", DEF_PASSWORD_FTP);
 800322c:	4a8d      	ldr	r2, [pc, #564]	; (8003464 <StartGetFirmware+0x6b4>)
 800322e:	498e      	ldr	r1, [pc, #568]	; (8003468 <StartGetFirmware+0x6b8>)
 8003230:	4884      	ldr	r0, [pc, #528]	; (8003444 <StartGetFirmware+0x694>)
 8003232:	f00b fec7 	bl	800efc4 <siprintf>
	  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 8003236:	4883      	ldr	r0, [pc, #524]	; (8003444 <StartGetFirmware+0x694>)
 8003238:	f7fc ffea 	bl	8000210 <strlen>
 800323c:	4603      	mov	r3, r0
 800323e:	b29b      	uxth	r3, r3
 8003240:	461a      	mov	r2, r3
 8003242:	4980      	ldr	r1, [pc, #512]	; (8003444 <StartGetFirmware+0x694>)
 8003244:	4880      	ldr	r0, [pc, #512]	; (8003448 <StartGetFirmware+0x698>)
 8003246:	f006 fb79 	bl	800993c <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 800324a:	4880      	ldr	r0, [pc, #512]	; (800344c <StartGetFirmware+0x69c>)
 800324c:	f7fe fb62 	bl	8001914 <SIM800_Ans>
 8003250:	4603      	mov	r3, r0
 8003252:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
	  if (!ans)
 8003256:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 800325a:	2b00      	cmp	r3, #0
 800325c:	d11e      	bne.n	800329c <StartGetFirmware+0x4ec>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 800325e:	2264      	movs	r2, #100	; 0x64
 8003260:	2100      	movs	r1, #0
 8003262:	4875      	ldr	r0, [pc, #468]	; (8003438 <StartGetFirmware+0x688>)
 8003264:	f00b fe72 	bl	800ef4c <memset>
		  ans = SIM800_Ans("OK");
 8003268:	4878      	ldr	r0, [pc, #480]	; (800344c <StartGetFirmware+0x69c>)
 800326a:	f7fe fb53 	bl	8001914 <SIM800_Ans>
 800326e:	4603      	mov	r3, r0
 8003270:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
		  if (!ans)
 8003274:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8003278:	2b00      	cmp	r3, #0
 800327a:	d10f      	bne.n	800329c <StartGetFirmware+0x4ec>
		  {
			  strcpy(&(msg.str), "FTPPW\r\n\0");
 800327c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003280:	4a7a      	ldr	r2, [pc, #488]	; (800346c <StartGetFirmware+0x6bc>)
 8003282:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003286:	e883 0003 	stmia.w	r3, {r0, r1}
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 800328a:	4b72      	ldr	r3, [pc, #456]	; (8003454 <StartGetFirmware+0x6a4>)
 800328c:	6818      	ldr	r0, [r3, #0]
 800328e:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003292:	f04f 33ff 	mov.w	r3, #4294967295
 8003296:	2200      	movs	r2, #0
 8003298:	f008 fa92 	bl	800b7c0 <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 800329c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80032a0:	f007 ff11 	bl	800b0c6 <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80032a4:	2264      	movs	r2, #100	; 0x64
 80032a6:	2100      	movs	r1, #0
 80032a8:	4863      	ldr	r0, [pc, #396]	; (8003438 <StartGetFirmware+0x688>)
 80032aa:	f00b fe4f 	bl	800ef4c <memset>
	  sprintf(str_SIM800,"AT+FTPGETPATH=/firmware/\r\n\0");
 80032ae:	4970      	ldr	r1, [pc, #448]	; (8003470 <StartGetFirmware+0x6c0>)
 80032b0:	4864      	ldr	r0, [pc, #400]	; (8003444 <StartGetFirmware+0x694>)
 80032b2:	f00b fe87 	bl	800efc4 <siprintf>
	  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 80032b6:	4863      	ldr	r0, [pc, #396]	; (8003444 <StartGetFirmware+0x694>)
 80032b8:	f7fc ffaa 	bl	8000210 <strlen>
 80032bc:	4603      	mov	r3, r0
 80032be:	b29b      	uxth	r3, r3
 80032c0:	461a      	mov	r2, r3
 80032c2:	4960      	ldr	r1, [pc, #384]	; (8003444 <StartGetFirmware+0x694>)
 80032c4:	4860      	ldr	r0, [pc, #384]	; (8003448 <StartGetFirmware+0x698>)
 80032c6:	f006 fb39 	bl	800993c <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 80032ca:	4860      	ldr	r0, [pc, #384]	; (800344c <StartGetFirmware+0x69c>)
 80032cc:	f7fe fb22 	bl	8001914 <SIM800_Ans>
 80032d0:	4603      	mov	r3, r0
 80032d2:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
	  if (!ans)
 80032d6:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d11f      	bne.n	800331e <StartGetFirmware+0x56e>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80032de:	2264      	movs	r2, #100	; 0x64
 80032e0:	2100      	movs	r1, #0
 80032e2:	4855      	ldr	r0, [pc, #340]	; (8003438 <StartGetFirmware+0x688>)
 80032e4:	f00b fe32 	bl	800ef4c <memset>
		  ans = SIM800_Ans("OK");
 80032e8:	4858      	ldr	r0, [pc, #352]	; (800344c <StartGetFirmware+0x69c>)
 80032ea:	f7fe fb13 	bl	8001914 <SIM800_Ans>
 80032ee:	4603      	mov	r3, r0
 80032f0:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
		  if (!ans)
 80032f4:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d110      	bne.n	800331e <StartGetFirmware+0x56e>
		  {
			  strcpy(&(msg.str), "FTPGETPATH\r\n\0");
 80032fc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003300:	4a5c      	ldr	r2, [pc, #368]	; (8003474 <StartGetFirmware+0x6c4>)
 8003302:	461c      	mov	r4, r3
 8003304:	4613      	mov	r3, r2
 8003306:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003308:	c407      	stmia	r4!, {r0, r1, r2}
 800330a:	7023      	strb	r3, [r4, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 800330c:	4b51      	ldr	r3, [pc, #324]	; (8003454 <StartGetFirmware+0x6a4>)
 800330e:	6818      	ldr	r0, [r3, #0]
 8003310:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003314:	f04f 33ff 	mov.w	r3, #4294967295
 8003318:	2200      	movs	r2, #0
 800331a:	f008 fa51 	bl	800b7c0 <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 800331e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003322:	f007 fed0 	bl	800b0c6 <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8003326:	2264      	movs	r2, #100	; 0x64
 8003328:	2100      	movs	r1, #0
 800332a:	4843      	ldr	r0, [pc, #268]	; (8003438 <StartGetFirmware+0x688>)
 800332c:	f00b fe0e 	bl	800ef4c <memset>
	  sprintf(str_SIM800,"AT+FTPGETNAME=Firmware.txt\r\n\0");
 8003330:	4951      	ldr	r1, [pc, #324]	; (8003478 <StartGetFirmware+0x6c8>)
 8003332:	4844      	ldr	r0, [pc, #272]	; (8003444 <StartGetFirmware+0x694>)
 8003334:	f00b fe46 	bl	800efc4 <siprintf>
	  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 8003338:	4842      	ldr	r0, [pc, #264]	; (8003444 <StartGetFirmware+0x694>)
 800333a:	f7fc ff69 	bl	8000210 <strlen>
 800333e:	4603      	mov	r3, r0
 8003340:	b29b      	uxth	r3, r3
 8003342:	461a      	mov	r2, r3
 8003344:	493f      	ldr	r1, [pc, #252]	; (8003444 <StartGetFirmware+0x694>)
 8003346:	4840      	ldr	r0, [pc, #256]	; (8003448 <StartGetFirmware+0x698>)
 8003348:	f006 faf8 	bl	800993c <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 800334c:	483f      	ldr	r0, [pc, #252]	; (800344c <StartGetFirmware+0x69c>)
 800334e:	f7fe fae1 	bl	8001914 <SIM800_Ans>
 8003352:	4603      	mov	r3, r0
 8003354:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
	  if (!ans)
 8003358:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 800335c:	2b00      	cmp	r3, #0
 800335e:	d11f      	bne.n	80033a0 <StartGetFirmware+0x5f0>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8003360:	2264      	movs	r2, #100	; 0x64
 8003362:	2100      	movs	r1, #0
 8003364:	4834      	ldr	r0, [pc, #208]	; (8003438 <StartGetFirmware+0x688>)
 8003366:	f00b fdf1 	bl	800ef4c <memset>
		  ans = SIM800_Ans("OK");
 800336a:	4838      	ldr	r0, [pc, #224]	; (800344c <StartGetFirmware+0x69c>)
 800336c:	f7fe fad2 	bl	8001914 <SIM800_Ans>
 8003370:	4603      	mov	r3, r0
 8003372:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
		  if (!ans)
 8003376:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 800337a:	2b00      	cmp	r3, #0
 800337c:	d110      	bne.n	80033a0 <StartGetFirmware+0x5f0>
		  {
			  strcpy(&(msg.str), "FTPGETNAME\r\n\0");
 800337e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003382:	4a3e      	ldr	r2, [pc, #248]	; (800347c <StartGetFirmware+0x6cc>)
 8003384:	461c      	mov	r4, r3
 8003386:	4613      	mov	r3, r2
 8003388:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800338a:	c407      	stmia	r4!, {r0, r1, r2}
 800338c:	7023      	strb	r3, [r4, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 800338e:	4b31      	ldr	r3, [pc, #196]	; (8003454 <StartGetFirmware+0x6a4>)
 8003390:	6818      	ldr	r0, [r3, #0]
 8003392:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003396:	f04f 33ff 	mov.w	r3, #4294967295
 800339a:	2200      	movs	r2, #0
 800339c:	f008 fa10 	bl	800b7c0 <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 80033a0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80033a4:	f007 fe8f 	bl	800b0c6 <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80033a8:	2264      	movs	r2, #100	; 0x64
 80033aa:	2100      	movs	r1, #0
 80033ac:	4822      	ldr	r0, [pc, #136]	; (8003438 <StartGetFirmware+0x688>)
 80033ae:	f00b fdcd 	bl	800ef4c <memset>
	  sprintf(str_SIM800,"AT+FTPGETTOFS=0,Firmware.txt\r\n\0");
 80033b2:	4933      	ldr	r1, [pc, #204]	; (8003480 <StartGetFirmware+0x6d0>)
 80033b4:	4823      	ldr	r0, [pc, #140]	; (8003444 <StartGetFirmware+0x694>)
 80033b6:	f00b fe05 	bl	800efc4 <siprintf>
	  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 80033ba:	4822      	ldr	r0, [pc, #136]	; (8003444 <StartGetFirmware+0x694>)
 80033bc:	f7fc ff28 	bl	8000210 <strlen>
 80033c0:	4603      	mov	r3, r0
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	461a      	mov	r2, r3
 80033c6:	491f      	ldr	r1, [pc, #124]	; (8003444 <StartGetFirmware+0x694>)
 80033c8:	481f      	ldr	r0, [pc, #124]	; (8003448 <StartGetFirmware+0x698>)
 80033ca:	f006 fab7 	bl	800993c <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 80033ce:	481f      	ldr	r0, [pc, #124]	; (800344c <StartGetFirmware+0x69c>)
 80033d0:	f7fe faa0 	bl	8001914 <SIM800_Ans>
 80033d4:	4603      	mov	r3, r0
 80033d6:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
	  if (!ans)
 80033da:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d11f      	bne.n	8003422 <StartGetFirmware+0x672>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80033e2:	2264      	movs	r2, #100	; 0x64
 80033e4:	2100      	movs	r1, #0
 80033e6:	4814      	ldr	r0, [pc, #80]	; (8003438 <StartGetFirmware+0x688>)
 80033e8:	f00b fdb0 	bl	800ef4c <memset>
		  ans = SIM800_Ans("OK");
 80033ec:	4817      	ldr	r0, [pc, #92]	; (800344c <StartGetFirmware+0x69c>)
 80033ee:	f7fe fa91 	bl	8001914 <SIM800_Ans>
 80033f2:	4603      	mov	r3, r0
 80033f4:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
		  if (!ans)
 80033f8:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d110      	bne.n	8003422 <StartGetFirmware+0x672>
		  {
			  strcpy(&(msg.str), "FTPGETTOFS\r\n\0");
 8003400:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003404:	4a1f      	ldr	r2, [pc, #124]	; (8003484 <StartGetFirmware+0x6d4>)
 8003406:	461c      	mov	r4, r3
 8003408:	4613      	mov	r3, r2
 800340a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800340c:	c407      	stmia	r4!, {r0, r1, r2}
 800340e:	7023      	strb	r3, [r4, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8003410:	4b10      	ldr	r3, [pc, #64]	; (8003454 <StartGetFirmware+0x6a4>)
 8003412:	6818      	ldr	r0, [r3, #0]
 8003414:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003418:	f04f 33ff 	mov.w	r3, #4294967295
 800341c:	2200      	movs	r2, #0
 800341e:	f008 f9cf 	bl	800b7c0 <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 8003422:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003426:	f007 fe4e 	bl	800b0c6 <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 800342a:	2264      	movs	r2, #100	; 0x64
 800342c:	2100      	movs	r1, #0
 800342e:	4802      	ldr	r0, [pc, #8]	; (8003438 <StartGetFirmware+0x688>)
 8003430:	f00b fd8c 	bl	800ef4c <memset>
 8003434:	e028      	b.n	8003488 <StartGetFirmware+0x6d8>
 8003436:	bf00      	nop
 8003438:	200004f4 	.word	0x200004f4
 800343c:	08010720 	.word	0x08010720
 8003440:	08010730 	.word	0x08010730
 8003444:	20000490 	.word	0x20000490
 8003448:	20000224 	.word	0x20000224
 800344c:	080103d0 	.word	0x080103d0
 8003450:	08010744 	.word	0x08010744
 8003454:	20000450 	.word	0x20000450
 8003458:	08010750 	.word	0x08010750
 800345c:	0801075c 	.word	0x0801075c
 8003460:	0801076c 	.word	0x0801076c
 8003464:	08010778 	.word	0x08010778
 8003468:	08010784 	.word	0x08010784
 800346c:	08010794 	.word	0x08010794
 8003470:	080107a0 	.word	0x080107a0
 8003474:	080107bc 	.word	0x080107bc
 8003478:	080107cc 	.word	0x080107cc
 800347c:	080107ec 	.word	0x080107ec
 8003480:	080107fc 	.word	0x080107fc
 8003484:	0801081c 	.word	0x0801081c
	  RX = 0;
 8003488:	4b88      	ldr	r3, [pc, #544]	; (80036ac <StartGetFirmware+0x8fc>)
 800348a:	2200      	movs	r2, #0
 800348c:	701a      	strb	r2, [r3, #0]
	  Tech_ans_wait = 1;
 800348e:	4b88      	ldr	r3, [pc, #544]	; (80036b0 <StartGetFirmware+0x900>)
 8003490:	2201      	movs	r2, #1
 8003492:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Receive_DMA(&huart1, SIM800BuffRx, BUFF_SIM_SIZE);
 8003494:	2264      	movs	r2, #100	; 0x64
 8003496:	4987      	ldr	r1, [pc, #540]	; (80036b4 <StartGetFirmware+0x904>)
 8003498:	4887      	ldr	r0, [pc, #540]	; (80036b8 <StartGetFirmware+0x908>)
 800349a:	f006 facd 	bl	8009a38 <HAL_UART_Receive_DMA>
	  while (RX != 1) {};
 800349e:	bf00      	nop
 80034a0:	4b82      	ldr	r3, [pc, #520]	; (80036ac <StartGetFirmware+0x8fc>)
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d1fb      	bne.n	80034a0 <StartGetFirmware+0x6f0>
	  Tech_ans_wait = 0;
 80034a8:	4b81      	ldr	r3, [pc, #516]	; (80036b0 <StartGetFirmware+0x900>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	701a      	strb	r2, [r3, #0]



	  //good download
	  if (String_in_SIM800BuffRx("+FTPGETTOFS: "))
 80034ae:	4883      	ldr	r0, [pc, #524]	; (80036bc <StartGetFirmware+0x90c>)
 80034b0:	f7fe f93e 	bl	8001730 <String_in_SIM800BuffRx>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f43f ac8e 	beq.w	8002dd8 <StartGetFirmware+0x28>
	  {
		  sscanf(SIM800BuffRx, "%s%2s%d", tmp2, tmp3, &firmware_count_bytes);
 80034bc:	f107 0108 	add.w	r1, r7, #8
 80034c0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80034c4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	460b      	mov	r3, r1
 80034cc:	497c      	ldr	r1, [pc, #496]	; (80036c0 <StartGetFirmware+0x910>)
 80034ce:	4879      	ldr	r0, [pc, #484]	; (80036b4 <StartGetFirmware+0x904>)
 80034d0:	f00b fd98 	bl	800f004 <siscanf>

		  SPI2_Init_Master();
 80034d4:	f7fe f8b2 	bl	800163c <SPI2_Init_Master>
		  HAL_Delay(200);
 80034d8:	20c8      	movs	r0, #200	; 0xc8
 80034da:	f001 f91f 	bl	800471c <HAL_Delay>

		  W25qxx_Init();
 80034de:	f000 fd79 	bl	8003fd4 <W25qxx_Init>

		  uint32_t count_of_pages = (firmware_count_bytes / 256) + ((firmware_count_bytes % 256) ? 1 : 0);
 80034e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034e4:	0a1b      	lsrs	r3, r3, #8
 80034e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034e8:	b2d2      	uxtb	r2, r2
 80034ea:	2a00      	cmp	r2, #0
 80034ec:	d001      	beq.n	80034f2 <StartGetFirmware+0x742>
 80034ee:	2201      	movs	r2, #1
 80034f0:	e000      	b.n	80034f4 <StartGetFirmware+0x744>
 80034f2:	2200      	movs	r2, #0
 80034f4:	4413      	add	r3, r2
 80034f6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		  uint32_t count_of_sectors = (firmware_count_bytes / 4096) + ((firmware_count_bytes % 4096) ? 1 : 0);
 80034fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034fc:	0b1b      	lsrs	r3, r3, #12
 80034fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003500:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8003504:	2a00      	cmp	r2, #0
 8003506:	d001      	beq.n	800350c <StartGetFirmware+0x75c>
 8003508:	2201      	movs	r2, #1
 800350a:	e000      	b.n	800350e <StartGetFirmware+0x75e>
 800350c:	2200      	movs	r2, #0
 800350e:	4413      	add	r3, r2
 8003510:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		  count_of_sectors++;
 8003514:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003518:	3301      	adds	r3, #1
 800351a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

		  //start write from 30 sector
		  for (uint32_t i = 0; i <= count_of_sectors; i++)
 800351e:	2300      	movs	r3, #0
 8003520:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003524:	e010      	b.n	8003548 <StartGetFirmware+0x798>
		  {
			  // sectors for clear
			  uint32_t tmp = i + sector_of_firmware - 1;
 8003526:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800352a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800352e:	4413      	add	r3, r2
 8003530:	3b01      	subs	r3, #1
 8003532:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
			  W25qxx_EraseSector(tmp);
 8003536:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 800353a:	f000 ffaf 	bl	800449c <W25qxx_EraseSector>
		  for (uint32_t i = 0; i <= count_of_sectors; i++)
 800353e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003542:	3301      	adds	r3, #1
 8003544:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003548:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800354c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003550:	429a      	cmp	r2, r3
 8003552:	d9e8      	bls.n	8003526 <StartGetFirmware+0x776>
		  }

		  //writes size of firmware
		  tmp4 = (firmware_count_bytes & 0xFF0000) >> 16;
 8003554:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003556:	0c1b      	lsrs	r3, r3, #16
 8003558:	b2db      	uxtb	r3, r3
 800355a:	4a5a      	ldr	r2, [pc, #360]	; (80036c4 <StartGetFirmware+0x914>)
 800355c:	6013      	str	r3, [r2, #0]
		  tmp5 = (firmware_count_bytes & 0xFF00) >> 8;
 800355e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003560:	0a1b      	lsrs	r3, r3, #8
 8003562:	b2db      	uxtb	r3, r3
 8003564:	4a58      	ldr	r2, [pc, #352]	; (80036c8 <StartGetFirmware+0x918>)
 8003566:	6013      	str	r3, [r2, #0]
		  tmp6 = (firmware_count_bytes & 0xFF);
 8003568:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800356a:	b2db      	uxtb	r3, r3
 800356c:	4a57      	ldr	r2, [pc, #348]	; (80036cc <StartGetFirmware+0x91c>)
 800356e:	6013      	str	r3, [r2, #0]
		  Size_of_firmwware[0] = tmp4;
 8003570:	4b54      	ldr	r3, [pc, #336]	; (80036c4 <StartGetFirmware+0x914>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	b2da      	uxtb	r2, r3
 8003576:	4b56      	ldr	r3, [pc, #344]	; (80036d0 <StartGetFirmware+0x920>)
 8003578:	701a      	strb	r2, [r3, #0]
		  Size_of_firmwware[1] = tmp5;
 800357a:	4b53      	ldr	r3, [pc, #332]	; (80036c8 <StartGetFirmware+0x918>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	b2da      	uxtb	r2, r3
 8003580:	4b53      	ldr	r3, [pc, #332]	; (80036d0 <StartGetFirmware+0x920>)
 8003582:	705a      	strb	r2, [r3, #1]
		  Size_of_firmwware[2] = tmp6;
 8003584:	4b51      	ldr	r3, [pc, #324]	; (80036cc <StartGetFirmware+0x91c>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	b2da      	uxtb	r2, r3
 800358a:	4b51      	ldr	r3, [pc, #324]	; (80036d0 <StartGetFirmware+0x920>)
 800358c:	709a      	strb	r2, [r3, #2]

		  int32_t page_start1 = 16 * (sector_of_firmware - 1);
 800358e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003592:	3b01      	subs	r3, #1
 8003594:	011b      	lsls	r3, r3, #4
 8003596:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

		  W25qxx_WritePage(Size_of_firmwware, page_start1, 0, 3);
 800359a:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800359e:	2303      	movs	r3, #3
 80035a0:	2200      	movs	r2, #0
 80035a2:	484b      	ldr	r0, [pc, #300]	; (80036d0 <StartGetFirmware+0x920>)
 80035a4:	f000 ffce 	bl	8004544 <W25qxx_WritePage>

		  for (uint32_t i = 0; i < count_of_pages; i++)
 80035a8:	2300      	movs	r3, #0
 80035aa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80035ae:	e054      	b.n	800365a <StartGetFirmware+0x8aa>
		  {
			  int32_t start = i * 256;
 80035b0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80035b4:	021b      	lsls	r3, r3, #8
 80035b6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
			  //start += (i > 0) ? 1 : 0;

			  memset(firmware_buf, 0, 399);
 80035ba:	f240 128f 	movw	r2, #399	; 0x18f
 80035be:	2100      	movs	r1, #0
 80035c0:	4844      	ldr	r0, [pc, #272]	; (80036d4 <StartGetFirmware+0x924>)
 80035c2:	f00b fcc3 	bl	800ef4c <memset>
			  sprintf(str_SIM800,"AT+FSREAD=C:\\User\\FTP\\Firmware.txt,1,256,%d\r\n\0", start);
 80035c6:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80035ca:	4943      	ldr	r1, [pc, #268]	; (80036d8 <StartGetFirmware+0x928>)
 80035cc:	4843      	ldr	r0, [pc, #268]	; (80036dc <StartGetFirmware+0x92c>)
 80035ce:	f00b fcf9 	bl	800efc4 <siprintf>
			  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 80035d2:	4842      	ldr	r0, [pc, #264]	; (80036dc <StartGetFirmware+0x92c>)
 80035d4:	f7fc fe1c 	bl	8000210 <strlen>
 80035d8:	4603      	mov	r3, r0
 80035da:	b29b      	uxth	r3, r3
 80035dc:	461a      	mov	r2, r3
 80035de:	493f      	ldr	r1, [pc, #252]	; (80036dc <StartGetFirmware+0x92c>)
 80035e0:	4835      	ldr	r0, [pc, #212]	; (80036b8 <StartGetFirmware+0x908>)
 80035e2:	f006 f9ab 	bl	800993c <HAL_UART_Transmit_DMA>
			  RX = 0;
 80035e6:	4b31      	ldr	r3, [pc, #196]	; (80036ac <StartGetFirmware+0x8fc>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	701a      	strb	r2, [r3, #0]
			  Tech_ans_wait = 1;
 80035ec:	4b30      	ldr	r3, [pc, #192]	; (80036b0 <StartGetFirmware+0x900>)
 80035ee:	2201      	movs	r2, #1
 80035f0:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Receive_DMA(&huart1, firmware_buf, 390);
 80035f2:	f44f 72c3 	mov.w	r2, #390	; 0x186
 80035f6:	4937      	ldr	r1, [pc, #220]	; (80036d4 <StartGetFirmware+0x924>)
 80035f8:	482f      	ldr	r0, [pc, #188]	; (80036b8 <StartGetFirmware+0x908>)
 80035fa:	f006 fa1d 	bl	8009a38 <HAL_UART_Receive_DMA>
			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 80035fe:	2140      	movs	r1, #64	; 0x40
 8003600:	4837      	ldr	r0, [pc, #220]	; (80036e0 <StartGetFirmware+0x930>)
 8003602:	f001 ff82 	bl	800550a <HAL_GPIO_TogglePin>
			  while (RX != 1) {};
 8003606:	bf00      	nop
 8003608:	4b28      	ldr	r3, [pc, #160]	; (80036ac <StartGetFirmware+0x8fc>)
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d1fb      	bne.n	8003608 <StartGetFirmware+0x858>
			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8003610:	2140      	movs	r1, #64	; 0x40
 8003612:	4833      	ldr	r0, [pc, #204]	; (80036e0 <StartGetFirmware+0x930>)
 8003614:	f001 ff79 	bl	800550a <HAL_GPIO_TogglePin>
			  Tech_ans_wait = 0;
 8003618:	4b25      	ldr	r3, [pc, #148]	; (80036b0 <StartGetFirmware+0x900>)
 800361a:	2200      	movs	r2, #0
 800361c:	701a      	strb	r2, [r3, #0]

			  int32_t page_start =  i + 16 * sector_of_firmware; // number of start page
 800361e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003622:	011a      	lsls	r2, r3, #4
 8003624:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003628:	4413      	add	r3, r2
 800362a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
			  W25qxx_WritePage(firmware_buf + strlen(str_SIM800) + 1, page_start, 0, 256);
 800362e:	482b      	ldr	r0, [pc, #172]	; (80036dc <StartGetFirmware+0x92c>)
 8003630:	f7fc fdee 	bl	8000210 <strlen>
 8003634:	4603      	mov	r3, r0
 8003636:	3301      	adds	r3, #1
 8003638:	4a26      	ldr	r2, [pc, #152]	; (80036d4 <StartGetFirmware+0x924>)
 800363a:	1898      	adds	r0, r3, r2
 800363c:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8003640:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003644:	2200      	movs	r2, #0
 8003646:	f000 ff7d 	bl	8004544 <W25qxx_WritePage>
			  osDelay(10); //importent!!!
 800364a:	200a      	movs	r0, #10
 800364c:	f007 fd3b 	bl	800b0c6 <osDelay>
		  for (uint32_t i = 0; i < count_of_pages; i++)
 8003650:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003654:	3301      	adds	r3, #1
 8003656:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800365a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800365e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003662:	429a      	cmp	r2, r3
 8003664:	d3a4      	bcc.n	80035b0 <StartGetFirmware+0x800>
		  }
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8003666:	2140      	movs	r1, #64	; 0x40
 8003668:	481d      	ldr	r0, [pc, #116]	; (80036e0 <StartGetFirmware+0x930>)
 800366a:	f001 ff4e 	bl	800550a <HAL_GPIO_TogglePin>
		  osDelay(2000);
 800366e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003672:	f007 fd28 	bl	800b0c6 <osDelay>
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8003676:	2140      	movs	r1, #64	; 0x40
 8003678:	4819      	ldr	r0, [pc, #100]	; (80036e0 <StartGetFirmware+0x930>)
 800367a:	f001 ff46 	bl	800550a <HAL_GPIO_TogglePin>

		  HAL_Delay(200);
 800367e:	20c8      	movs	r0, #200	; 0xc8
 8003680:	f001 f84c 	bl	800471c <HAL_Delay>
		  //";start"
		  strcpy(&(msg.str), ";start");
 8003684:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003688:	4a16      	ldr	r2, [pc, #88]	; (80036e4 <StartGetFirmware+0x934>)
 800368a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800368e:	6018      	str	r0, [r3, #0]
 8003690:	3304      	adds	r3, #4
 8003692:	8019      	strh	r1, [r3, #0]
 8003694:	3302      	adds	r3, #2
 8003696:	0c0a      	lsrs	r2, r1, #16
 8003698:	701a      	strb	r2, [r3, #0]
		  //HAL_UART_Transmit_DMA(&huart2, msg.str, MESSAGE_TYPE_BUFF_SIZE);
		  HAL_Delay(1000);
 800369a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800369e:	f001 f83d 	bl	800471c <HAL_Delay>
		  HAL_NVIC_SystemReset();
 80036a2:	f001 f958 	bl	8004956 <HAL_NVIC_SystemReset>
  {
 80036a6:	f7ff bb97 	b.w	8002dd8 <StartGetFirmware+0x28>
 80036aa:	bf00      	nop
 80036ac:	20000473 	.word	0x20000473
 80036b0:	20000475 	.word	0x20000475
 80036b4:	200004f4 	.word	0x200004f4
 80036b8:	20000224 	.word	0x20000224
 80036bc:	0801082c 	.word	0x0801082c
 80036c0:	0801083c 	.word	0x0801083c
 80036c4:	20000730 	.word	0x20000730
 80036c8:	20000734 	.word	0x20000734
 80036cc:	20000738 	.word	0x20000738
 80036d0:	2000073c 	.word	0x2000073c
 80036d4:	20000558 	.word	0x20000558
 80036d8:	08010844 	.word	0x08010844
 80036dc:	20000490 	.word	0x20000490
 80036e0:	40020000 	.word	0x40020000
 80036e4:	08010874 	.word	0x08010874

080036e8 <CallbackPingTimer>:
  /* USER CODE END StartGetFirmware */
}

/* CallbackPingTimer function */
void CallbackPingTimer(void *argument)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackPingTimer */
	osSemaphoreRelease(PINGSemHandle);
 80036f0:	4b04      	ldr	r3, [pc, #16]	; (8003704 <CallbackPingTimer+0x1c>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f007 ffab 	bl	800b650 <osSemaphoreRelease>
  /* USER CODE END CallbackPingTimer */
}
 80036fa:	bf00      	nop
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	20000468 	.word	0x20000468

08003708 <CallbackDataTimer>:

/* CallbackDataTimer function */
void CallbackDataTimer(void *argument)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackDataTimer */
	Get_data = 1;
 8003710:	4b04      	ldr	r3, [pc, #16]	; (8003724 <CallbackDataTimer+0x1c>)
 8003712:	2201      	movs	r2, #1
 8003714:	701a      	strb	r2, [r3, #0]
  /* USER CODE END CallbackDataTimer */
}
 8003716:	bf00      	nop
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	20000476 	.word	0x20000476

08003728 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a04      	ldr	r2, [pc, #16]	; (8003748 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d101      	bne.n	800373e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800373a:	f000 ffcf 	bl	80046dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800373e:	bf00      	nop
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	40010000 	.word	0x40010000

0800374c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800374c:	b480      	push	{r7}
 800374e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003750:	b672      	cpsid	i
}
 8003752:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003754:	e7fe      	b.n	8003754 <Error_Handler+0x8>
	...

08003758 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800375e:	2300      	movs	r3, #0
 8003760:	607b      	str	r3, [r7, #4]
 8003762:	4b12      	ldr	r3, [pc, #72]	; (80037ac <HAL_MspInit+0x54>)
 8003764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003766:	4a11      	ldr	r2, [pc, #68]	; (80037ac <HAL_MspInit+0x54>)
 8003768:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800376c:	6453      	str	r3, [r2, #68]	; 0x44
 800376e:	4b0f      	ldr	r3, [pc, #60]	; (80037ac <HAL_MspInit+0x54>)
 8003770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003772:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003776:	607b      	str	r3, [r7, #4]
 8003778:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800377a:	2300      	movs	r3, #0
 800377c:	603b      	str	r3, [r7, #0]
 800377e:	4b0b      	ldr	r3, [pc, #44]	; (80037ac <HAL_MspInit+0x54>)
 8003780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003782:	4a0a      	ldr	r2, [pc, #40]	; (80037ac <HAL_MspInit+0x54>)
 8003784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003788:	6413      	str	r3, [r2, #64]	; 0x40
 800378a:	4b08      	ldr	r3, [pc, #32]	; (80037ac <HAL_MspInit+0x54>)
 800378c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003792:	603b      	str	r3, [r7, #0]
 8003794:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003796:	2200      	movs	r2, #0
 8003798:	210f      	movs	r1, #15
 800379a:	f06f 0001 	mvn.w	r0, #1
 800379e:	f001 f8b0 	bl	8004902 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037a2:	bf00      	nop
 80037a4:	3708      	adds	r7, #8
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	40023800 	.word	0x40023800

080037b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b08a      	sub	sp, #40	; 0x28
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037b8:	f107 0314 	add.w	r3, r7, #20
 80037bc:	2200      	movs	r2, #0
 80037be:	601a      	str	r2, [r3, #0]
 80037c0:	605a      	str	r2, [r3, #4]
 80037c2:	609a      	str	r2, [r3, #8]
 80037c4:	60da      	str	r2, [r3, #12]
 80037c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a50      	ldr	r2, [pc, #320]	; (8003910 <HAL_I2C_MspInit+0x160>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	f040 8099 	bne.w	8003906 <HAL_I2C_MspInit+0x156>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037d4:	2300      	movs	r3, #0
 80037d6:	613b      	str	r3, [r7, #16]
 80037d8:	4b4e      	ldr	r3, [pc, #312]	; (8003914 <HAL_I2C_MspInit+0x164>)
 80037da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037dc:	4a4d      	ldr	r2, [pc, #308]	; (8003914 <HAL_I2C_MspInit+0x164>)
 80037de:	f043 0302 	orr.w	r3, r3, #2
 80037e2:	6313      	str	r3, [r2, #48]	; 0x30
 80037e4:	4b4b      	ldr	r3, [pc, #300]	; (8003914 <HAL_I2C_MspInit+0x164>)
 80037e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	613b      	str	r3, [r7, #16]
 80037ee:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 80037f0:	f44f 6381 	mov.w	r3, #1032	; 0x408
 80037f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80037f6:	2312      	movs	r3, #18
 80037f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80037fa:	2301      	movs	r3, #1
 80037fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037fe:	2303      	movs	r3, #3
 8003800:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003802:	2304      	movs	r3, #4
 8003804:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003806:	f107 0314 	add.w	r3, r7, #20
 800380a:	4619      	mov	r1, r3
 800380c:	4842      	ldr	r0, [pc, #264]	; (8003918 <HAL_I2C_MspInit+0x168>)
 800380e:	f001 fcb7 	bl	8005180 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003812:	2300      	movs	r3, #0
 8003814:	60fb      	str	r3, [r7, #12]
 8003816:	4b3f      	ldr	r3, [pc, #252]	; (8003914 <HAL_I2C_MspInit+0x164>)
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	4a3e      	ldr	r2, [pc, #248]	; (8003914 <HAL_I2C_MspInit+0x164>)
 800381c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003820:	6413      	str	r3, [r2, #64]	; 0x40
 8003822:	4b3c      	ldr	r3, [pc, #240]	; (8003914 <HAL_I2C_MspInit+0x164>)
 8003824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800382a:	60fb      	str	r3, [r7, #12]
 800382c:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 800382e:	4b3b      	ldr	r3, [pc, #236]	; (800391c <HAL_I2C_MspInit+0x16c>)
 8003830:	4a3b      	ldr	r2, [pc, #236]	; (8003920 <HAL_I2C_MspInit+0x170>)
 8003832:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8003834:	4b39      	ldr	r3, [pc, #228]	; (800391c <HAL_I2C_MspInit+0x16c>)
 8003836:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800383a:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800383c:	4b37      	ldr	r3, [pc, #220]	; (800391c <HAL_I2C_MspInit+0x16c>)
 800383e:	2200      	movs	r2, #0
 8003840:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003842:	4b36      	ldr	r3, [pc, #216]	; (800391c <HAL_I2C_MspInit+0x16c>)
 8003844:	2200      	movs	r2, #0
 8003846:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003848:	4b34      	ldr	r3, [pc, #208]	; (800391c <HAL_I2C_MspInit+0x16c>)
 800384a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800384e:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003850:	4b32      	ldr	r3, [pc, #200]	; (800391c <HAL_I2C_MspInit+0x16c>)
 8003852:	2200      	movs	r2, #0
 8003854:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003856:	4b31      	ldr	r3, [pc, #196]	; (800391c <HAL_I2C_MspInit+0x16c>)
 8003858:	2200      	movs	r2, #0
 800385a:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 800385c:	4b2f      	ldr	r3, [pc, #188]	; (800391c <HAL_I2C_MspInit+0x16c>)
 800385e:	2200      	movs	r2, #0
 8003860:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003862:	4b2e      	ldr	r3, [pc, #184]	; (800391c <HAL_I2C_MspInit+0x16c>)
 8003864:	2200      	movs	r2, #0
 8003866:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003868:	4b2c      	ldr	r3, [pc, #176]	; (800391c <HAL_I2C_MspInit+0x16c>)
 800386a:	2200      	movs	r2, #0
 800386c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 800386e:	482b      	ldr	r0, [pc, #172]	; (800391c <HAL_I2C_MspInit+0x16c>)
 8003870:	f001 f876 	bl	8004960 <HAL_DMA_Init>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 800387a:	f7ff ff67 	bl	800374c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a26      	ldr	r2, [pc, #152]	; (800391c <HAL_I2C_MspInit+0x16c>)
 8003882:	639a      	str	r2, [r3, #56]	; 0x38
 8003884:	4a25      	ldr	r2, [pc, #148]	; (800391c <HAL_I2C_MspInit+0x16c>)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 800388a:	4b26      	ldr	r3, [pc, #152]	; (8003924 <HAL_I2C_MspInit+0x174>)
 800388c:	4a26      	ldr	r2, [pc, #152]	; (8003928 <HAL_I2C_MspInit+0x178>)
 800388e:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 8003890:	4b24      	ldr	r3, [pc, #144]	; (8003924 <HAL_I2C_MspInit+0x174>)
 8003892:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8003896:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003898:	4b22      	ldr	r3, [pc, #136]	; (8003924 <HAL_I2C_MspInit+0x174>)
 800389a:	2240      	movs	r2, #64	; 0x40
 800389c:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800389e:	4b21      	ldr	r3, [pc, #132]	; (8003924 <HAL_I2C_MspInit+0x174>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80038a4:	4b1f      	ldr	r3, [pc, #124]	; (8003924 <HAL_I2C_MspInit+0x174>)
 80038a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038aa:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80038ac:	4b1d      	ldr	r3, [pc, #116]	; (8003924 <HAL_I2C_MspInit+0x174>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80038b2:	4b1c      	ldr	r3, [pc, #112]	; (8003924 <HAL_I2C_MspInit+0x174>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 80038b8:	4b1a      	ldr	r3, [pc, #104]	; (8003924 <HAL_I2C_MspInit+0x174>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80038be:	4b19      	ldr	r3, [pc, #100]	; (8003924 <HAL_I2C_MspInit+0x174>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80038c4:	4b17      	ldr	r3, [pc, #92]	; (8003924 <HAL_I2C_MspInit+0x174>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 80038ca:	4816      	ldr	r0, [pc, #88]	; (8003924 <HAL_I2C_MspInit+0x174>)
 80038cc:	f001 f848 	bl	8004960 <HAL_DMA_Init>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 80038d6:	f7ff ff39 	bl	800374c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a11      	ldr	r2, [pc, #68]	; (8003924 <HAL_I2C_MspInit+0x174>)
 80038de:	635a      	str	r2, [r3, #52]	; 0x34
 80038e0:	4a10      	ldr	r2, [pc, #64]	; (8003924 <HAL_I2C_MspInit+0x174>)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 80038e6:	2200      	movs	r2, #0
 80038e8:	2105      	movs	r1, #5
 80038ea:	2021      	movs	r0, #33	; 0x21
 80038ec:	f001 f809 	bl	8004902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80038f0:	2021      	movs	r0, #33	; 0x21
 80038f2:	f001 f822 	bl	800493a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 80038f6:	2200      	movs	r2, #0
 80038f8:	2105      	movs	r1, #5
 80038fa:	2022      	movs	r0, #34	; 0x22
 80038fc:	f001 f801 	bl	8004902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8003900:	2022      	movs	r0, #34	; 0x22
 8003902:	f001 f81a 	bl	800493a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003906:	bf00      	nop
 8003908:	3728      	adds	r7, #40	; 0x28
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	40005800 	.word	0x40005800
 8003914:	40023800 	.word	0x40023800
 8003918:	40020400 	.word	0x40020400
 800391c:	2000010c 	.word	0x2000010c
 8003920:	40026040 	.word	0x40026040
 8003924:	2000016c 	.word	0x2000016c
 8003928:	400260b8 	.word	0x400260b8

0800392c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b08a      	sub	sp, #40	; 0x28
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003934:	f107 0314 	add.w	r3, r7, #20
 8003938:	2200      	movs	r2, #0
 800393a:	601a      	str	r2, [r3, #0]
 800393c:	605a      	str	r2, [r3, #4]
 800393e:	609a      	str	r2, [r3, #8]
 8003940:	60da      	str	r2, [r3, #12]
 8003942:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a19      	ldr	r2, [pc, #100]	; (80039b0 <HAL_SPI_MspInit+0x84>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d12c      	bne.n	80039a8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800394e:	2300      	movs	r3, #0
 8003950:	613b      	str	r3, [r7, #16]
 8003952:	4b18      	ldr	r3, [pc, #96]	; (80039b4 <HAL_SPI_MspInit+0x88>)
 8003954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003956:	4a17      	ldr	r2, [pc, #92]	; (80039b4 <HAL_SPI_MspInit+0x88>)
 8003958:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800395c:	6413      	str	r3, [r2, #64]	; 0x40
 800395e:	4b15      	ldr	r3, [pc, #84]	; (80039b4 <HAL_SPI_MspInit+0x88>)
 8003960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003966:	613b      	str	r3, [r7, #16]
 8003968:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800396a:	2300      	movs	r3, #0
 800396c:	60fb      	str	r3, [r7, #12]
 800396e:	4b11      	ldr	r3, [pc, #68]	; (80039b4 <HAL_SPI_MspInit+0x88>)
 8003970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003972:	4a10      	ldr	r2, [pc, #64]	; (80039b4 <HAL_SPI_MspInit+0x88>)
 8003974:	f043 0302 	orr.w	r3, r3, #2
 8003978:	6313      	str	r3, [r2, #48]	; 0x30
 800397a:	4b0e      	ldr	r3, [pc, #56]	; (80039b4 <HAL_SPI_MspInit+0x88>)
 800397c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	60fb      	str	r3, [r7, #12]
 8003984:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003986:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800398a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800398c:	2302      	movs	r3, #2
 800398e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003990:	2300      	movs	r3, #0
 8003992:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003994:	2303      	movs	r3, #3
 8003996:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003998:	2305      	movs	r3, #5
 800399a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800399c:	f107 0314 	add.w	r3, r7, #20
 80039a0:	4619      	mov	r1, r3
 80039a2:	4805      	ldr	r0, [pc, #20]	; (80039b8 <HAL_SPI_MspInit+0x8c>)
 80039a4:	f001 fbec 	bl	8005180 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80039a8:	bf00      	nop
 80039aa:	3728      	adds	r7, #40	; 0x28
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	40003800 	.word	0x40003800
 80039b4:	40023800 	.word	0x40023800
 80039b8:	40020400 	.word	0x40020400

080039bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b08c      	sub	sp, #48	; 0x30
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039c4:	f107 031c 	add.w	r3, r7, #28
 80039c8:	2200      	movs	r2, #0
 80039ca:	601a      	str	r2, [r3, #0]
 80039cc:	605a      	str	r2, [r3, #4]
 80039ce:	609a      	str	r2, [r3, #8]
 80039d0:	60da      	str	r2, [r3, #12]
 80039d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a97      	ldr	r2, [pc, #604]	; (8003c38 <HAL_UART_MspInit+0x27c>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	f040 8092 	bne.w	8003b04 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80039e0:	2300      	movs	r3, #0
 80039e2:	61bb      	str	r3, [r7, #24]
 80039e4:	4b95      	ldr	r3, [pc, #596]	; (8003c3c <HAL_UART_MspInit+0x280>)
 80039e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e8:	4a94      	ldr	r2, [pc, #592]	; (8003c3c <HAL_UART_MspInit+0x280>)
 80039ea:	f043 0310 	orr.w	r3, r3, #16
 80039ee:	6453      	str	r3, [r2, #68]	; 0x44
 80039f0:	4b92      	ldr	r3, [pc, #584]	; (8003c3c <HAL_UART_MspInit+0x280>)
 80039f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f4:	f003 0310 	and.w	r3, r3, #16
 80039f8:	61bb      	str	r3, [r7, #24]
 80039fa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039fc:	2300      	movs	r3, #0
 80039fe:	617b      	str	r3, [r7, #20]
 8003a00:	4b8e      	ldr	r3, [pc, #568]	; (8003c3c <HAL_UART_MspInit+0x280>)
 8003a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a04:	4a8d      	ldr	r2, [pc, #564]	; (8003c3c <HAL_UART_MspInit+0x280>)
 8003a06:	f043 0301 	orr.w	r3, r3, #1
 8003a0a:	6313      	str	r3, [r2, #48]	; 0x30
 8003a0c:	4b8b      	ldr	r3, [pc, #556]	; (8003c3c <HAL_UART_MspInit+0x280>)
 8003a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	617b      	str	r3, [r7, #20]
 8003a16:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003a18:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003a1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a1e:	2302      	movs	r3, #2
 8003a20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a22:	2300      	movs	r3, #0
 8003a24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a26:	2303      	movs	r3, #3
 8003a28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003a2a:	2307      	movs	r3, #7
 8003a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a2e:	f107 031c 	add.w	r3, r7, #28
 8003a32:	4619      	mov	r1, r3
 8003a34:	4882      	ldr	r0, [pc, #520]	; (8003c40 <HAL_UART_MspInit+0x284>)
 8003a36:	f001 fba3 	bl	8005180 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003a3a:	4b82      	ldr	r3, [pc, #520]	; (8003c44 <HAL_UART_MspInit+0x288>)
 8003a3c:	4a82      	ldr	r2, [pc, #520]	; (8003c48 <HAL_UART_MspInit+0x28c>)
 8003a3e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003a40:	4b80      	ldr	r3, [pc, #512]	; (8003c44 <HAL_UART_MspInit+0x288>)
 8003a42:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a46:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a48:	4b7e      	ldr	r3, [pc, #504]	; (8003c44 <HAL_UART_MspInit+0x288>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a4e:	4b7d      	ldr	r3, [pc, #500]	; (8003c44 <HAL_UART_MspInit+0x288>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003a54:	4b7b      	ldr	r3, [pc, #492]	; (8003c44 <HAL_UART_MspInit+0x288>)
 8003a56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a5a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a5c:	4b79      	ldr	r3, [pc, #484]	; (8003c44 <HAL_UART_MspInit+0x288>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a62:	4b78      	ldr	r3, [pc, #480]	; (8003c44 <HAL_UART_MspInit+0x288>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003a68:	4b76      	ldr	r3, [pc, #472]	; (8003c44 <HAL_UART_MspInit+0x288>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003a6e:	4b75      	ldr	r3, [pc, #468]	; (8003c44 <HAL_UART_MspInit+0x288>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a74:	4b73      	ldr	r3, [pc, #460]	; (8003c44 <HAL_UART_MspInit+0x288>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003a7a:	4872      	ldr	r0, [pc, #456]	; (8003c44 <HAL_UART_MspInit+0x288>)
 8003a7c:	f000 ff70 	bl	8004960 <HAL_DMA_Init>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8003a86:	f7ff fe61 	bl	800374c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a6d      	ldr	r2, [pc, #436]	; (8003c44 <HAL_UART_MspInit+0x288>)
 8003a8e:	639a      	str	r2, [r3, #56]	; 0x38
 8003a90:	4a6c      	ldr	r2, [pc, #432]	; (8003c44 <HAL_UART_MspInit+0x288>)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8003a96:	4b6d      	ldr	r3, [pc, #436]	; (8003c4c <HAL_UART_MspInit+0x290>)
 8003a98:	4a6d      	ldr	r2, [pc, #436]	; (8003c50 <HAL_UART_MspInit+0x294>)
 8003a9a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8003a9c:	4b6b      	ldr	r3, [pc, #428]	; (8003c4c <HAL_UART_MspInit+0x290>)
 8003a9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003aa2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003aa4:	4b69      	ldr	r3, [pc, #420]	; (8003c4c <HAL_UART_MspInit+0x290>)
 8003aa6:	2240      	movs	r2, #64	; 0x40
 8003aa8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003aaa:	4b68      	ldr	r3, [pc, #416]	; (8003c4c <HAL_UART_MspInit+0x290>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003ab0:	4b66      	ldr	r3, [pc, #408]	; (8003c4c <HAL_UART_MspInit+0x290>)
 8003ab2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ab6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003ab8:	4b64      	ldr	r3, [pc, #400]	; (8003c4c <HAL_UART_MspInit+0x290>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003abe:	4b63      	ldr	r3, [pc, #396]	; (8003c4c <HAL_UART_MspInit+0x290>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003ac4:	4b61      	ldr	r3, [pc, #388]	; (8003c4c <HAL_UART_MspInit+0x290>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003aca:	4b60      	ldr	r3, [pc, #384]	; (8003c4c <HAL_UART_MspInit+0x290>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ad0:	4b5e      	ldr	r3, [pc, #376]	; (8003c4c <HAL_UART_MspInit+0x290>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003ad6:	485d      	ldr	r0, [pc, #372]	; (8003c4c <HAL_UART_MspInit+0x290>)
 8003ad8:	f000 ff42 	bl	8004960 <HAL_DMA_Init>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d001      	beq.n	8003ae6 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8003ae2:	f7ff fe33 	bl	800374c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a58      	ldr	r2, [pc, #352]	; (8003c4c <HAL_UART_MspInit+0x290>)
 8003aea:	635a      	str	r2, [r3, #52]	; 0x34
 8003aec:	4a57      	ldr	r2, [pc, #348]	; (8003c4c <HAL_UART_MspInit+0x290>)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003af2:	2200      	movs	r2, #0
 8003af4:	2105      	movs	r1, #5
 8003af6:	2025      	movs	r0, #37	; 0x25
 8003af8:	f000 ff03 	bl	8004902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003afc:	2025      	movs	r0, #37	; 0x25
 8003afe:	f000 ff1c 	bl	800493a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003b02:	e095      	b.n	8003c30 <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART2)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a52      	ldr	r2, [pc, #328]	; (8003c54 <HAL_UART_MspInit+0x298>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	f040 8090 	bne.w	8003c30 <HAL_UART_MspInit+0x274>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003b10:	2300      	movs	r3, #0
 8003b12:	613b      	str	r3, [r7, #16]
 8003b14:	4b49      	ldr	r3, [pc, #292]	; (8003c3c <HAL_UART_MspInit+0x280>)
 8003b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b18:	4a48      	ldr	r2, [pc, #288]	; (8003c3c <HAL_UART_MspInit+0x280>)
 8003b1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b1e:	6413      	str	r3, [r2, #64]	; 0x40
 8003b20:	4b46      	ldr	r3, [pc, #280]	; (8003c3c <HAL_UART_MspInit+0x280>)
 8003b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b28:	613b      	str	r3, [r7, #16]
 8003b2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	60fb      	str	r3, [r7, #12]
 8003b30:	4b42      	ldr	r3, [pc, #264]	; (8003c3c <HAL_UART_MspInit+0x280>)
 8003b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b34:	4a41      	ldr	r2, [pc, #260]	; (8003c3c <HAL_UART_MspInit+0x280>)
 8003b36:	f043 0301 	orr.w	r3, r3, #1
 8003b3a:	6313      	str	r3, [r2, #48]	; 0x30
 8003b3c:	4b3f      	ldr	r3, [pc, #252]	; (8003c3c <HAL_UART_MspInit+0x280>)
 8003b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b40:	f003 0301 	and.w	r3, r3, #1
 8003b44:	60fb      	str	r3, [r7, #12]
 8003b46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003b48:	230c      	movs	r3, #12
 8003b4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b50:	2300      	movs	r3, #0
 8003b52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b54:	2303      	movs	r3, #3
 8003b56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003b58:	2307      	movs	r3, #7
 8003b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b5c:	f107 031c 	add.w	r3, r7, #28
 8003b60:	4619      	mov	r1, r3
 8003b62:	4837      	ldr	r0, [pc, #220]	; (8003c40 <HAL_UART_MspInit+0x284>)
 8003b64:	f001 fb0c 	bl	8005180 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003b68:	4b3b      	ldr	r3, [pc, #236]	; (8003c58 <HAL_UART_MspInit+0x29c>)
 8003b6a:	4a3c      	ldr	r2, [pc, #240]	; (8003c5c <HAL_UART_MspInit+0x2a0>)
 8003b6c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003b6e:	4b3a      	ldr	r3, [pc, #232]	; (8003c58 <HAL_UART_MspInit+0x29c>)
 8003b70:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003b74:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b76:	4b38      	ldr	r3, [pc, #224]	; (8003c58 <HAL_UART_MspInit+0x29c>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b7c:	4b36      	ldr	r3, [pc, #216]	; (8003c58 <HAL_UART_MspInit+0x29c>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003b82:	4b35      	ldr	r3, [pc, #212]	; (8003c58 <HAL_UART_MspInit+0x29c>)
 8003b84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b88:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b8a:	4b33      	ldr	r3, [pc, #204]	; (8003c58 <HAL_UART_MspInit+0x29c>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b90:	4b31      	ldr	r3, [pc, #196]	; (8003c58 <HAL_UART_MspInit+0x29c>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003b96:	4b30      	ldr	r3, [pc, #192]	; (8003c58 <HAL_UART_MspInit+0x29c>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003b9c:	4b2e      	ldr	r3, [pc, #184]	; (8003c58 <HAL_UART_MspInit+0x29c>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ba2:	4b2d      	ldr	r3, [pc, #180]	; (8003c58 <HAL_UART_MspInit+0x29c>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003ba8:	482b      	ldr	r0, [pc, #172]	; (8003c58 <HAL_UART_MspInit+0x29c>)
 8003baa:	f000 fed9 	bl	8004960 <HAL_DMA_Init>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d001      	beq.n	8003bb8 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 8003bb4:	f7ff fdca 	bl	800374c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a27      	ldr	r2, [pc, #156]	; (8003c58 <HAL_UART_MspInit+0x29c>)
 8003bbc:	639a      	str	r2, [r3, #56]	; 0x38
 8003bbe:	4a26      	ldr	r2, [pc, #152]	; (8003c58 <HAL_UART_MspInit+0x29c>)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003bc4:	4b26      	ldr	r3, [pc, #152]	; (8003c60 <HAL_UART_MspInit+0x2a4>)
 8003bc6:	4a27      	ldr	r2, [pc, #156]	; (8003c64 <HAL_UART_MspInit+0x2a8>)
 8003bc8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003bca:	4b25      	ldr	r3, [pc, #148]	; (8003c60 <HAL_UART_MspInit+0x2a4>)
 8003bcc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003bd0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003bd2:	4b23      	ldr	r3, [pc, #140]	; (8003c60 <HAL_UART_MspInit+0x2a4>)
 8003bd4:	2240      	movs	r2, #64	; 0x40
 8003bd6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bd8:	4b21      	ldr	r3, [pc, #132]	; (8003c60 <HAL_UART_MspInit+0x2a4>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003bde:	4b20      	ldr	r3, [pc, #128]	; (8003c60 <HAL_UART_MspInit+0x2a4>)
 8003be0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003be4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003be6:	4b1e      	ldr	r3, [pc, #120]	; (8003c60 <HAL_UART_MspInit+0x2a4>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003bec:	4b1c      	ldr	r3, [pc, #112]	; (8003c60 <HAL_UART_MspInit+0x2a4>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003bf2:	4b1b      	ldr	r3, [pc, #108]	; (8003c60 <HAL_UART_MspInit+0x2a4>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003bf8:	4b19      	ldr	r3, [pc, #100]	; (8003c60 <HAL_UART_MspInit+0x2a4>)
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003bfe:	4b18      	ldr	r3, [pc, #96]	; (8003c60 <HAL_UART_MspInit+0x2a4>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003c04:	4816      	ldr	r0, [pc, #88]	; (8003c60 <HAL_UART_MspInit+0x2a4>)
 8003c06:	f000 feab 	bl	8004960 <HAL_DMA_Init>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d001      	beq.n	8003c14 <HAL_UART_MspInit+0x258>
      Error_Handler();
 8003c10:	f7ff fd9c 	bl	800374c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a12      	ldr	r2, [pc, #72]	; (8003c60 <HAL_UART_MspInit+0x2a4>)
 8003c18:	635a      	str	r2, [r3, #52]	; 0x34
 8003c1a:	4a11      	ldr	r2, [pc, #68]	; (8003c60 <HAL_UART_MspInit+0x2a4>)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003c20:	2200      	movs	r2, #0
 8003c22:	2105      	movs	r1, #5
 8003c24:	2026      	movs	r0, #38	; 0x26
 8003c26:	f000 fe6c 	bl	8004902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003c2a:	2026      	movs	r0, #38	; 0x26
 8003c2c:	f000 fe85 	bl	800493a <HAL_NVIC_EnableIRQ>
}
 8003c30:	bf00      	nop
 8003c32:	3730      	adds	r7, #48	; 0x30
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	40011000 	.word	0x40011000
 8003c3c:	40023800 	.word	0x40023800
 8003c40:	40020000 	.word	0x40020000
 8003c44:	200002ac 	.word	0x200002ac
 8003c48:	40026440 	.word	0x40026440
 8003c4c:	2000030c 	.word	0x2000030c
 8003c50:	400264b8 	.word	0x400264b8
 8003c54:	40004400 	.word	0x40004400
 8003c58:	2000036c 	.word	0x2000036c
 8003c5c:	40026088 	.word	0x40026088
 8003c60:	200003cc 	.word	0x200003cc
 8003c64:	400260a0 	.word	0x400260a0

08003c68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b08c      	sub	sp, #48	; 0x30
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003c70:	2300      	movs	r3, #0
 8003c72:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003c74:	2300      	movs	r3, #0
 8003c76:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8003c78:	2200      	movs	r2, #0
 8003c7a:	6879      	ldr	r1, [r7, #4]
 8003c7c:	2019      	movs	r0, #25
 8003c7e:	f000 fe40 	bl	8004902 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003c82:	2019      	movs	r0, #25
 8003c84:	f000 fe59 	bl	800493a <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003c88:	2300      	movs	r3, #0
 8003c8a:	60fb      	str	r3, [r7, #12]
 8003c8c:	4b1f      	ldr	r3, [pc, #124]	; (8003d0c <HAL_InitTick+0xa4>)
 8003c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c90:	4a1e      	ldr	r2, [pc, #120]	; (8003d0c <HAL_InitTick+0xa4>)
 8003c92:	f043 0301 	orr.w	r3, r3, #1
 8003c96:	6453      	str	r3, [r2, #68]	; 0x44
 8003c98:	4b1c      	ldr	r3, [pc, #112]	; (8003d0c <HAL_InitTick+0xa4>)
 8003c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	60fb      	str	r3, [r7, #12]
 8003ca2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003ca4:	f107 0210 	add.w	r2, r7, #16
 8003ca8:	f107 0314 	add.w	r3, r7, #20
 8003cac:	4611      	mov	r1, r2
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f004 f9c6 	bl	8008040 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003cb4:	f004 f9b0 	bl	8008018 <HAL_RCC_GetPCLK2Freq>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	005b      	lsls	r3, r3, #1
 8003cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc0:	4a13      	ldr	r2, [pc, #76]	; (8003d10 <HAL_InitTick+0xa8>)
 8003cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc6:	0c9b      	lsrs	r3, r3, #18
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003ccc:	4b11      	ldr	r3, [pc, #68]	; (8003d14 <HAL_InitTick+0xac>)
 8003cce:	4a12      	ldr	r2, [pc, #72]	; (8003d18 <HAL_InitTick+0xb0>)
 8003cd0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003cd2:	4b10      	ldr	r3, [pc, #64]	; (8003d14 <HAL_InitTick+0xac>)
 8003cd4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003cd8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003cda:	4a0e      	ldr	r2, [pc, #56]	; (8003d14 <HAL_InitTick+0xac>)
 8003cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cde:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003ce0:	4b0c      	ldr	r3, [pc, #48]	; (8003d14 <HAL_InitTick+0xac>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ce6:	4b0b      	ldr	r3, [pc, #44]	; (8003d14 <HAL_InitTick+0xac>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003cec:	4809      	ldr	r0, [pc, #36]	; (8003d14 <HAL_InitTick+0xac>)
 8003cee:	f005 fa53 	bl	8009198 <HAL_TIM_Base_Init>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d104      	bne.n	8003d02 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003cf8:	4806      	ldr	r0, [pc, #24]	; (8003d14 <HAL_InitTick+0xac>)
 8003cfa:	f005 faa7 	bl	800924c <HAL_TIM_Base_Start_IT>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	e000      	b.n	8003d04 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3730      	adds	r7, #48	; 0x30
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	40023800 	.word	0x40023800
 8003d10:	431bde83 	.word	0x431bde83
 8003d14:	20000744 	.word	0x20000744
 8003d18:	40010000 	.word	0x40010000

08003d1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d20:	e7fe      	b.n	8003d20 <NMI_Handler+0x4>

08003d22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d22:	b480      	push	{r7}
 8003d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d26:	e7fe      	b.n	8003d26 <HardFault_Handler+0x4>

08003d28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d2c:	e7fe      	b.n	8003d2c <MemManage_Handler+0x4>

08003d2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d32:	e7fe      	b.n	8003d32 <BusFault_Handler+0x4>

08003d34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d34:	b480      	push	{r7}
 8003d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d38:	e7fe      	b.n	8003d38 <UsageFault_Handler+0x4>

08003d3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d3e:	bf00      	nop
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8003d4c:	4802      	ldr	r0, [pc, #8]	; (8003d58 <DMA1_Stream2_IRQHandler+0x10>)
 8003d4e:	f000 ff9f 	bl	8004c90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003d52:	bf00      	nop
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	2000010c 	.word	0x2000010c

08003d5c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003d60:	4802      	ldr	r0, [pc, #8]	; (8003d6c <DMA1_Stream5_IRQHandler+0x10>)
 8003d62:	f000 ff95 	bl	8004c90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003d66:	bf00      	nop
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	2000036c 	.word	0x2000036c

08003d70 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003d74:	4802      	ldr	r0, [pc, #8]	; (8003d80 <DMA1_Stream6_IRQHandler+0x10>)
 8003d76:	f000 ff8b 	bl	8004c90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003d7a:	bf00      	nop
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	200003cc 	.word	0x200003cc

08003d84 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003d88:	4802      	ldr	r0, [pc, #8]	; (8003d94 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003d8a:	f005 facf 	bl	800932c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003d8e:	bf00      	nop
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	20000744 	.word	0x20000744

08003d98 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003d9c:	4802      	ldr	r0, [pc, #8]	; (8003da8 <I2C2_EV_IRQHandler+0x10>)
 8003d9e:	f002 f837 	bl	8005e10 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8003da2:	bf00      	nop
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	200000b8 	.word	0x200000b8

08003dac <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8003db0:	4802      	ldr	r0, [pc, #8]	; (8003dbc <I2C2_ER_IRQHandler+0x10>)
 8003db2:	f002 f99e 	bl	80060f2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8003db6:	bf00      	nop
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	200000b8 	.word	0x200000b8

08003dc0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003dc4:	4803      	ldr	r0, [pc, #12]	; (8003dd4 <USART1_IRQHandler+0x14>)
 8003dc6:	f005 fee7 	bl	8009b98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  USER_UART_IRQHandler(&huart1);
 8003dca:	4802      	ldr	r0, [pc, #8]	; (8003dd4 <USART1_IRQHandler+0x14>)
 8003dcc:	f7fd fd3c 	bl	8001848 <USER_UART_IRQHandler>
  /* USER CODE END USART1_IRQn 1 */
}
 8003dd0:	bf00      	nop
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	20000224 	.word	0x20000224

08003dd8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003ddc:	4803      	ldr	r0, [pc, #12]	; (8003dec <USART2_IRQHandler+0x14>)
 8003dde:	f005 fedb 	bl	8009b98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  USER_UART_IRQHandler(&huart2);
 8003de2:	4802      	ldr	r0, [pc, #8]	; (8003dec <USART2_IRQHandler+0x14>)
 8003de4:	f7fd fd30 	bl	8001848 <USER_UART_IRQHandler>
  /* USER CODE END USART2_IRQn 1 */
}
 8003de8:	bf00      	nop
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	20000268 	.word	0x20000268

08003df0 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8003df4:	4802      	ldr	r0, [pc, #8]	; (8003e00 <DMA1_Stream7_IRQHandler+0x10>)
 8003df6:	f000 ff4b 	bl	8004c90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8003dfa:	bf00      	nop
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	2000016c 	.word	0x2000016c

08003e04 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003e08:	4802      	ldr	r0, [pc, #8]	; (8003e14 <DMA2_Stream2_IRQHandler+0x10>)
 8003e0a:	f000 ff41 	bl	8004c90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003e0e:	bf00      	nop
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	200002ac 	.word	0x200002ac

08003e18 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003e1c:	4802      	ldr	r0, [pc, #8]	; (8003e28 <DMA2_Stream7_IRQHandler+0x10>)
 8003e1e:	f000 ff37 	bl	8004c90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003e22:	bf00      	nop
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	2000030c 	.word	0x2000030c

08003e2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b086      	sub	sp, #24
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e34:	4a14      	ldr	r2, [pc, #80]	; (8003e88 <_sbrk+0x5c>)
 8003e36:	4b15      	ldr	r3, [pc, #84]	; (8003e8c <_sbrk+0x60>)
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e40:	4b13      	ldr	r3, [pc, #76]	; (8003e90 <_sbrk+0x64>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d102      	bne.n	8003e4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e48:	4b11      	ldr	r3, [pc, #68]	; (8003e90 <_sbrk+0x64>)
 8003e4a:	4a12      	ldr	r2, [pc, #72]	; (8003e94 <_sbrk+0x68>)
 8003e4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e4e:	4b10      	ldr	r3, [pc, #64]	; (8003e90 <_sbrk+0x64>)
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4413      	add	r3, r2
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d207      	bcs.n	8003e6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e5c:	f00b f83e 	bl	800eedc <__errno>
 8003e60:	4603      	mov	r3, r0
 8003e62:	220c      	movs	r2, #12
 8003e64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e66:	f04f 33ff 	mov.w	r3, #4294967295
 8003e6a:	e009      	b.n	8003e80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e6c:	4b08      	ldr	r3, [pc, #32]	; (8003e90 <_sbrk+0x64>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e72:	4b07      	ldr	r3, [pc, #28]	; (8003e90 <_sbrk+0x64>)
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4413      	add	r3, r2
 8003e7a:	4a05      	ldr	r2, [pc, #20]	; (8003e90 <_sbrk+0x64>)
 8003e7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3718      	adds	r7, #24
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	20020000 	.word	0x20020000
 8003e8c:	00000400 	.word	0x00000400
 8003e90:	2000078c 	.word	0x2000078c
 8003e94:	20005160 	.word	0x20005160

08003e98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e9c:	4b06      	ldr	r3, [pc, #24]	; (8003eb8 <SystemInit+0x20>)
 8003e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea2:	4a05      	ldr	r2, [pc, #20]	; (8003eb8 <SystemInit+0x20>)
 8003ea4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ea8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003eac:	bf00      	nop
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	e000ed00 	.word	0xe000ed00

08003ebc <W25qxx_Spi>:



//###################################################################################################################
uint8_t	W25qxx_Spi(uint8_t	Data)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b086      	sub	sp, #24
 8003ec0:	af02      	add	r7, sp, #8
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	71fb      	strb	r3, [r7, #7]
	uint8_t	ret;

	HAL_SPI_TransmitReceive(W25QXX_SPI_PTR, &Data, &ret, 1, 100); // spi2
 8003ec6:	f107 020f 	add.w	r2, r7, #15
 8003eca:	1df9      	adds	r1, r7, #7
 8003ecc:	2364      	movs	r3, #100	; 0x64
 8003ece:	9300      	str	r3, [sp, #0]
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	4804      	ldr	r0, [pc, #16]	; (8003ee4 <W25qxx_Spi+0x28>)
 8003ed4:	f004 fef3 	bl	8008cbe <HAL_SPI_TransmitReceive>
	ret = W25QXX_SPI->DR;*/

	//while((W25QXX_SPI->SR & SPI_SR_BSY));
	//__HAL_SPI_CLEAR_OVRFLAG(&hspi2);

	return ret;
 8003ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3710      	adds	r7, #16
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	200001cc 	.word	0x200001cc

08003ee8 <W25qxx_ReadID>:

//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	60fb      	str	r3, [r7, #12]
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	60bb      	str	r3, [r7, #8]
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	607b      	str	r3, [r7, #4]
 8003efa:	2300      	movs	r3, #0
 8003efc:	603b      	str	r3, [r7, #0]

	W25QFLASH_CS_SELECT;
 8003efe:	2200      	movs	r2, #0
 8003f00:	2110      	movs	r1, #16
 8003f02:	4813      	ldr	r0, [pc, #76]	; (8003f50 <W25qxx_ReadID+0x68>)
 8003f04:	f001 fae8 	bl	80054d8 <HAL_GPIO_WritePin>

	W25qxx_Spi(W25_GET_JEDEC_ID);
 8003f08:	209f      	movs	r0, #159	; 0x9f
 8003f0a:	f7ff ffd7 	bl	8003ebc <W25qxx_Spi>

	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003f0e:	20a5      	movs	r0, #165	; 0xa5
 8003f10:	f7ff ffd4 	bl	8003ebc <W25qxx_Spi>
 8003f14:	4603      	mov	r3, r0
 8003f16:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003f18:	20a5      	movs	r0, #165	; 0xa5
 8003f1a:	f7ff ffcf 	bl	8003ebc <W25qxx_Spi>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003f22:	20a5      	movs	r0, #165	; 0xa5
 8003f24:	f7ff ffca 	bl	8003ebc <W25qxx_Spi>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	603b      	str	r3, [r7, #0]

	W25QFLASH_CS_UNSELECT;
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	2110      	movs	r1, #16
 8003f30:	4807      	ldr	r0, [pc, #28]	; (8003f50 <W25qxx_ReadID+0x68>)
 8003f32:	f001 fad1 	bl	80054d8 <HAL_GPIO_WritePin>

	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	041a      	lsls	r2, r3, #16
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	021b      	lsls	r3, r3, #8
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	683a      	ldr	r2, [r7, #0]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	60fb      	str	r3, [r7, #12]

	return Temp;
 8003f46:	68fb      	ldr	r3, [r7, #12]
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3710      	adds	r7, #16
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	40020000 	.word	0x40020000

08003f54 <W25qxx_WriteEnable>:
	W25QFLASH_CS_UNSELECT;
}*/

//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	af00      	add	r7, sp, #0
	W25QFLASH_CS_SELECT;
 8003f58:	2200      	movs	r2, #0
 8003f5a:	2110      	movs	r1, #16
 8003f5c:	4807      	ldr	r0, [pc, #28]	; (8003f7c <W25qxx_WriteEnable+0x28>)
 8003f5e:	f001 fabb 	bl	80054d8 <HAL_GPIO_WritePin>
	W25qxx_Spi(W25_WRITE_ENABLE);
 8003f62:	2006      	movs	r0, #6
 8003f64:	f7ff ffaa 	bl	8003ebc <W25qxx_Spi>
	W25QFLASH_CS_UNSELECT;
 8003f68:	2201      	movs	r2, #1
 8003f6a:	2110      	movs	r1, #16
 8003f6c:	4803      	ldr	r0, [pc, #12]	; (8003f7c <W25qxx_WriteEnable+0x28>)
 8003f6e:	f001 fab3 	bl	80054d8 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8003f72:	2001      	movs	r0, #1
 8003f74:	f000 fbd2 	bl	800471c <HAL_Delay>
}
 8003f78:	bf00      	nop
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	40020000 	.word	0x40020000

08003f80 <W25qxx_WaitForWriteEnd>:
	W25QFLASH_CS_UNSELECT;
}*/

//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8003f84:	2001      	movs	r0, #1
 8003f86:	f000 fbc9 	bl	800471c <HAL_Delay>
	W25QFLASH_CS_SELECT;
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	2110      	movs	r1, #16
 8003f8e:	480f      	ldr	r0, [pc, #60]	; (8003fcc <W25qxx_WaitForWriteEnd+0x4c>)
 8003f90:	f001 faa2 	bl	80054d8 <HAL_GPIO_WritePin>
	W25qxx_Spi(W25_READ_STATUS_1);
 8003f94:	2005      	movs	r0, #5
 8003f96:	f7ff ff91 	bl	8003ebc <W25qxx_Spi>

	do{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003f9a:	20a5      	movs	r0, #165	; 0xa5
 8003f9c:	f7ff ff8e 	bl	8003ebc <W25qxx_Spi>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	4b0a      	ldr	r3, [pc, #40]	; (8003fd0 <W25qxx_WaitForWriteEnd+0x50>)
 8003fa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8003faa:	2001      	movs	r0, #1
 8003fac:	f000 fbb6 	bl	800471c <HAL_Delay>
	}
	while((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8003fb0:	4b07      	ldr	r3, [pc, #28]	; (8003fd0 <W25qxx_WaitForWriteEnd+0x50>)
 8003fb2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003fb6:	f003 0301 	and.w	r3, r3, #1
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1ed      	bne.n	8003f9a <W25qxx_WaitForWriteEnd+0x1a>

	W25QFLASH_CS_UNSELECT;
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	2110      	movs	r1, #16
 8003fc2:	4802      	ldr	r0, [pc, #8]	; (8003fcc <W25qxx_WaitForWriteEnd+0x4c>)
 8003fc4:	f001 fa88 	bl	80054d8 <HAL_GPIO_WritePin>
}
 8003fc8:	bf00      	nop
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	40020000 	.word	0x40020000
 8003fd0:	200007d0 	.word	0x200007d0

08003fd4 <W25qxx_Init>:

//###################################################################################################################
uint8_t W25qxx_Init(void)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8003fda:	4bb2      	ldr	r3, [pc, #712]	; (80042a4 <W25qxx_Init+0x2d0>)
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while(HAL_GetTick() < 100)
 8003fe2:	e002      	b.n	8003fea <W25qxx_Init+0x16>
	W25qxx_Delay(1);
 8003fe4:	2001      	movs	r0, #1
 8003fe6:	f000 fb99 	bl	800471c <HAL_Delay>
	while(HAL_GetTick() < 100)
 8003fea:	f000 fb8b 	bl	8004704 <HAL_GetTick>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b63      	cmp	r3, #99	; 0x63
 8003ff2:	d9f7      	bls.n	8003fe4 <W25qxx_Init+0x10>

	W25QFLASH_CS_UNSELECT;
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	2110      	movs	r1, #16
 8003ff8:	48ab      	ldr	r0, [pc, #684]	; (80042a8 <W25qxx_Init+0x2d4>)
 8003ffa:	f001 fa6d 	bl	80054d8 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8003ffe:	2064      	movs	r0, #100	; 0x64
 8004000:	f000 fb8c 	bl	800471c <HAL_Delay>

	uint32_t id;

	#if (INIT_DEBUG == 1)
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Init Begin...\n", 14, 1000);
 8004004:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004008:	220e      	movs	r2, #14
 800400a:	49a8      	ldr	r1, [pc, #672]	; (80042ac <W25qxx_Init+0x2d8>)
 800400c:	48a8      	ldr	r0, [pc, #672]	; (80042b0 <W25qxx_Init+0x2dc>)
 800400e:	f005 fbbe 	bl	800978e <HAL_UART_Transmit>
	#endif
	
	id = W25qxx_ReadID();
 8004012:	f7ff ff69 	bl	8003ee8 <W25qxx_ReadID>
 8004016:	6078      	str	r0, [r7, #4]

	#if (INIT_DEBUG == 1)
	snprintf(buf, 64, "ID:0x%lX\n", id);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4aa6      	ldr	r2, [pc, #664]	; (80042b4 <W25qxx_Init+0x2e0>)
 800401c:	2140      	movs	r1, #64	; 0x40
 800401e:	48a6      	ldr	r0, [pc, #664]	; (80042b8 <W25qxx_Init+0x2e4>)
 8004020:	f00a ff9c 	bl	800ef5c <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 8004024:	48a4      	ldr	r0, [pc, #656]	; (80042b8 <W25qxx_Init+0x2e4>)
 8004026:	f7fc f8f3 	bl	8000210 <strlen>
 800402a:	4603      	mov	r3, r0
 800402c:	b29a      	uxth	r2, r3
 800402e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004032:	49a1      	ldr	r1, [pc, #644]	; (80042b8 <W25qxx_Init+0x2e4>)
 8004034:	489e      	ldr	r0, [pc, #632]	; (80042b0 <W25qxx_Init+0x2dc>)
 8004036:	f005 fbaa 	bl	800978e <HAL_UART_Transmit>
	#endif

	switch(id & 0x0000FFFF)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	b29b      	uxth	r3, r3
 800403e:	f243 0217 	movw	r2, #12311	; 0x3017
 8004042:	4293      	cmp	r3, r2
 8004044:	d83a      	bhi.n	80040bc <W25qxx_Init+0xe8>
 8004046:	f243 0211 	movw	r2, #12305	; 0x3011
 800404a:	4293      	cmp	r3, r2
 800404c:	d21e      	bcs.n	800408c <W25qxx_Init+0xb8>
 800404e:	e11b      	b.n	8004288 <W25qxx_Init+0x2b4>
 8004050:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8004054:	3b11      	subs	r3, #17
 8004056:	2b09      	cmp	r3, #9
 8004058:	f200 8116 	bhi.w	8004288 <W25qxx_Init+0x2b4>
 800405c:	a201      	add	r2, pc, #4	; (adr r2, 8004064 <W25qxx_Init+0x90>)
 800405e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004062:	bf00      	nop
 8004064:	080041d3 	.word	0x080041d3
 8004068:	080041b7 	.word	0x080041b7
 800406c:	0800419b 	.word	0x0800419b
 8004070:	0800417f 	.word	0x0800417f
 8004074:	08004163 	.word	0x08004163
 8004078:	08004147 	.word	0x08004147
 800407c:	0800412b 	.word	0x0800412b
 8004080:	0800410d 	.word	0x0800410d
 8004084:	080040ef 	.word	0x080040ef
 8004088:	080040d1 	.word	0x080040d1
 800408c:	f5a3 5340 	sub.w	r3, r3, #12288	; 0x3000
 8004090:	3b11      	subs	r3, #17
 8004092:	2b06      	cmp	r3, #6
 8004094:	f200 80f8 	bhi.w	8004288 <W25qxx_Init+0x2b4>
 8004098:	a201      	add	r2, pc, #4	; (adr r2, 80040a0 <W25qxx_Init+0xcc>)
 800409a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800409e:	bf00      	nop
 80040a0:	08004273 	.word	0x08004273
 80040a4:	0800425d 	.word	0x0800425d
 80040a8:	08004247 	.word	0x08004247
 80040ac:	08004231 	.word	0x08004231
 80040b0:	0800421b 	.word	0x0800421b
 80040b4:	08004205 	.word	0x08004205
 80040b8:	080041ef 	.word	0x080041ef
 80040bc:	f244 021a 	movw	r2, #16410	; 0x401a
 80040c0:	4293      	cmp	r3, r2
 80040c2:	f200 80e1 	bhi.w	8004288 <W25qxx_Init+0x2b4>
 80040c6:	f244 0211 	movw	r2, #16401	; 0x4011
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d2c0      	bcs.n	8004050 <W25qxx_Init+0x7c>
 80040ce:	e0db      	b.n	8004288 <W25qxx_Init+0x2b4>
	{
		case 0x401A:	// 	w25q512
			w25qxx.ID = W25Q512;
 80040d0:	4b74      	ldr	r3, [pc, #464]	; (80042a4 <W25qxx_Init+0x2d0>)
 80040d2:	220a      	movs	r2, #10
 80040d4:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 1024;
 80040d6:	4b73      	ldr	r3, [pc, #460]	; (80042a4 <W25qxx_Init+0x2d0>)
 80040d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80040dc:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q512\n", 14, 1000);
 80040de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040e2:	220e      	movs	r2, #14
 80040e4:	4975      	ldr	r1, [pc, #468]	; (80042bc <W25qxx_Init+0x2e8>)
 80040e6:	4872      	ldr	r0, [pc, #456]	; (80042b0 <W25qxx_Init+0x2dc>)
 80040e8:	f005 fb51 	bl	800978e <HAL_UART_Transmit>
			#endif
		break;
 80040ec:	e10a      	b.n	8004304 <W25qxx_Init+0x330>

		case 0x4019:	// 	w25q256
			w25qxx.ID = W25Q256;
 80040ee:	4b6d      	ldr	r3, [pc, #436]	; (80042a4 <W25qxx_Init+0x2d0>)
 80040f0:	2209      	movs	r2, #9
 80040f2:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 512;
 80040f4:	4b6b      	ldr	r3, [pc, #428]	; (80042a4 <W25qxx_Init+0x2d0>)
 80040f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040fa:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q256\n", 14, 1000);
 80040fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004100:	220e      	movs	r2, #14
 8004102:	496f      	ldr	r1, [pc, #444]	; (80042c0 <W25qxx_Init+0x2ec>)
 8004104:	486a      	ldr	r0, [pc, #424]	; (80042b0 <W25qxx_Init+0x2dc>)
 8004106:	f005 fb42 	bl	800978e <HAL_UART_Transmit>
			#endif
		break;
 800410a:	e0fb      	b.n	8004304 <W25qxx_Init+0x330>

		case 0x4018:	// 	w25q128
			w25qxx.ID = W25Q128;
 800410c:	4b65      	ldr	r3, [pc, #404]	; (80042a4 <W25qxx_Init+0x2d0>)
 800410e:	2208      	movs	r2, #8
 8004110:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 256;
 8004112:	4b64      	ldr	r3, [pc, #400]	; (80042a4 <W25qxx_Init+0x2d0>)
 8004114:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004118:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q128\n", 14, 1000);
 800411a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800411e:	220e      	movs	r2, #14
 8004120:	4968      	ldr	r1, [pc, #416]	; (80042c4 <W25qxx_Init+0x2f0>)
 8004122:	4863      	ldr	r0, [pc, #396]	; (80042b0 <W25qxx_Init+0x2dc>)
 8004124:	f005 fb33 	bl	800978e <HAL_UART_Transmit>
			#endif
		break;
 8004128:	e0ec      	b.n	8004304 <W25qxx_Init+0x330>

		case 0x4017:	//	w25q64
			w25qxx.ID = W25Q64;
 800412a:	4b5e      	ldr	r3, [pc, #376]	; (80042a4 <W25qxx_Init+0x2d0>)
 800412c:	2207      	movs	r2, #7
 800412e:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 128;
 8004130:	4b5c      	ldr	r3, [pc, #368]	; (80042a4 <W25qxx_Init+0x2d0>)
 8004132:	2280      	movs	r2, #128	; 0x80
 8004134:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q64\n", 13, 1000);
 8004136:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800413a:	220d      	movs	r2, #13
 800413c:	4962      	ldr	r1, [pc, #392]	; (80042c8 <W25qxx_Init+0x2f4>)
 800413e:	485c      	ldr	r0, [pc, #368]	; (80042b0 <W25qxx_Init+0x2dc>)
 8004140:	f005 fb25 	bl	800978e <HAL_UART_Transmit>
			#endif
		break;
 8004144:	e0de      	b.n	8004304 <W25qxx_Init+0x330>

		case 0x4016:	//	w25q32
			w25qxx.ID = W25Q32;
 8004146:	4b57      	ldr	r3, [pc, #348]	; (80042a4 <W25qxx_Init+0x2d0>)
 8004148:	2206      	movs	r2, #6
 800414a:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 64;
 800414c:	4b55      	ldr	r3, [pc, #340]	; (80042a4 <W25qxx_Init+0x2d0>)
 800414e:	2240      	movs	r2, #64	; 0x40
 8004150:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q32\n", 13, 1000);
 8004152:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004156:	220d      	movs	r2, #13
 8004158:	495c      	ldr	r1, [pc, #368]	; (80042cc <W25qxx_Init+0x2f8>)
 800415a:	4855      	ldr	r0, [pc, #340]	; (80042b0 <W25qxx_Init+0x2dc>)
 800415c:	f005 fb17 	bl	800978e <HAL_UART_Transmit>
			#endif
		break;
 8004160:	e0d0      	b.n	8004304 <W25qxx_Init+0x330>

		case 0x4015:	//	w25q16
			w25qxx.ID = W25Q16;
 8004162:	4b50      	ldr	r3, [pc, #320]	; (80042a4 <W25qxx_Init+0x2d0>)
 8004164:	2205      	movs	r2, #5
 8004166:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 32;
 8004168:	4b4e      	ldr	r3, [pc, #312]	; (80042a4 <W25qxx_Init+0x2d0>)
 800416a:	2220      	movs	r2, #32
 800416c:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q16\n", 13, 1000);
 800416e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004172:	220d      	movs	r2, #13
 8004174:	4956      	ldr	r1, [pc, #344]	; (80042d0 <W25qxx_Init+0x2fc>)
 8004176:	484e      	ldr	r0, [pc, #312]	; (80042b0 <W25qxx_Init+0x2dc>)
 8004178:	f005 fb09 	bl	800978e <HAL_UART_Transmit>
			#endif
		break;
 800417c:	e0c2      	b.n	8004304 <W25qxx_Init+0x330>

		case 0x4014:	//	w25q80
			w25qxx.ID = W25Q80;
 800417e:	4b49      	ldr	r3, [pc, #292]	; (80042a4 <W25qxx_Init+0x2d0>)
 8004180:	2204      	movs	r2, #4
 8004182:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 16;
 8004184:	4b47      	ldr	r3, [pc, #284]	; (80042a4 <W25qxx_Init+0x2d0>)
 8004186:	2210      	movs	r2, #16
 8004188:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q80\n", 13, 1000);
 800418a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800418e:	220d      	movs	r2, #13
 8004190:	4950      	ldr	r1, [pc, #320]	; (80042d4 <W25qxx_Init+0x300>)
 8004192:	4847      	ldr	r0, [pc, #284]	; (80042b0 <W25qxx_Init+0x2dc>)
 8004194:	f005 fafb 	bl	800978e <HAL_UART_Transmit>
			#endif
		break;
 8004198:	e0b4      	b.n	8004304 <W25qxx_Init+0x330>

		case 0x4013:	//	w25q40
			w25qxx.ID = W25Q40;
 800419a:	4b42      	ldr	r3, [pc, #264]	; (80042a4 <W25qxx_Init+0x2d0>)
 800419c:	2203      	movs	r2, #3
 800419e:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 8;
 80041a0:	4b40      	ldr	r3, [pc, #256]	; (80042a4 <W25qxx_Init+0x2d0>)
 80041a2:	2208      	movs	r2, #8
 80041a4:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q40\n", 13, 1000);
 80041a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041aa:	220d      	movs	r2, #13
 80041ac:	494a      	ldr	r1, [pc, #296]	; (80042d8 <W25qxx_Init+0x304>)
 80041ae:	4840      	ldr	r0, [pc, #256]	; (80042b0 <W25qxx_Init+0x2dc>)
 80041b0:	f005 faed 	bl	800978e <HAL_UART_Transmit>
			#endif
		break;
 80041b4:	e0a6      	b.n	8004304 <W25qxx_Init+0x330>

		case 0x4012:	//	w25q20
			w25qxx.ID = W25Q20;
 80041b6:	4b3b      	ldr	r3, [pc, #236]	; (80042a4 <W25qxx_Init+0x2d0>)
 80041b8:	2202      	movs	r2, #2
 80041ba:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 4;
 80041bc:	4b39      	ldr	r3, [pc, #228]	; (80042a4 <W25qxx_Init+0x2d0>)
 80041be:	2204      	movs	r2, #4
 80041c0:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q20\n", 13, 1000);
 80041c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041c6:	220d      	movs	r2, #13
 80041c8:	4944      	ldr	r1, [pc, #272]	; (80042dc <W25qxx_Init+0x308>)
 80041ca:	4839      	ldr	r0, [pc, #228]	; (80042b0 <W25qxx_Init+0x2dc>)
 80041cc:	f005 fadf 	bl	800978e <HAL_UART_Transmit>
			#endif
		break;
 80041d0:	e098      	b.n	8004304 <W25qxx_Init+0x330>

		case 0x4011:	//	w25q10
			w25qxx.ID = W25Q10;
 80041d2:	4b34      	ldr	r3, [pc, #208]	; (80042a4 <W25qxx_Init+0x2d0>)
 80041d4:	2201      	movs	r2, #1
 80041d6:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 2;
 80041d8:	4b32      	ldr	r3, [pc, #200]	; (80042a4 <W25qxx_Init+0x2d0>)
 80041da:	2202      	movs	r2, #2
 80041dc:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q10\n", 13, 1000);
 80041de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041e2:	220d      	movs	r2, #13
 80041e4:	493e      	ldr	r1, [pc, #248]	; (80042e0 <W25qxx_Init+0x30c>)
 80041e6:	4832      	ldr	r0, [pc, #200]	; (80042b0 <W25qxx_Init+0x2dc>)
 80041e8:	f005 fad1 	bl	800978e <HAL_UART_Transmit>
			#endif
		break;
 80041ec:	e08a      	b.n	8004304 <W25qxx_Init+0x330>

		////////////////////////////////////////////////////////////////////////////////

		case 0x3017:	//	w25x64
			//w25qxx.ID = W25Q64;
			w25qxx.BlockCount = 128;
 80041ee:	4b2d      	ldr	r3, [pc, #180]	; (80042a4 <W25qxx_Init+0x2d0>)
 80041f0:	2280      	movs	r2, #128	; 0x80
 80041f2:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x64\n", 13, 1000);
 80041f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041f8:	220d      	movs	r2, #13
 80041fa:	493a      	ldr	r1, [pc, #232]	; (80042e4 <W25qxx_Init+0x310>)
 80041fc:	482c      	ldr	r0, [pc, #176]	; (80042b0 <W25qxx_Init+0x2dc>)
 80041fe:	f005 fac6 	bl	800978e <HAL_UART_Transmit>
			#endif
		break;
 8004202:	e07f      	b.n	8004304 <W25qxx_Init+0x330>

		case 0x3016:	//	w25x32
			//w25qxx.ID = W25Q32;
			w25qxx.BlockCount = 64;
 8004204:	4b27      	ldr	r3, [pc, #156]	; (80042a4 <W25qxx_Init+0x2d0>)
 8004206:	2240      	movs	r2, #64	; 0x40
 8004208:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x32\n", 13, 1000);
 800420a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800420e:	220d      	movs	r2, #13
 8004210:	4935      	ldr	r1, [pc, #212]	; (80042e8 <W25qxx_Init+0x314>)
 8004212:	4827      	ldr	r0, [pc, #156]	; (80042b0 <W25qxx_Init+0x2dc>)
 8004214:	f005 fabb 	bl	800978e <HAL_UART_Transmit>
			#endif
		break;
 8004218:	e074      	b.n	8004304 <W25qxx_Init+0x330>

		case 0x3015:	//	w25q16
			//w25qxx.ID = W25Q16;
			w25qxx.BlockCount = 32;
 800421a:	4b22      	ldr	r3, [pc, #136]	; (80042a4 <W25qxx_Init+0x2d0>)
 800421c:	2220      	movs	r2, #32
 800421e:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x16\n", 13, 1000);
 8004220:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004224:	220d      	movs	r2, #13
 8004226:	4931      	ldr	r1, [pc, #196]	; (80042ec <W25qxx_Init+0x318>)
 8004228:	4821      	ldr	r0, [pc, #132]	; (80042b0 <W25qxx_Init+0x2dc>)
 800422a:	f005 fab0 	bl	800978e <HAL_UART_Transmit>
			#endif
		break;
 800422e:	e069      	b.n	8004304 <W25qxx_Init+0x330>

		////////////////////////////////////////////////////////////////////////////////
		case 0x3014:	//	w25x80
			//w25qxx.ID = W25Q80;
			w25qxx.BlockCount = 16;
 8004230:	4b1c      	ldr	r3, [pc, #112]	; (80042a4 <W25qxx_Init+0x2d0>)
 8004232:	2210      	movs	r2, #16
 8004234:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x80\n", 13, 1000);
 8004236:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800423a:	220d      	movs	r2, #13
 800423c:	492c      	ldr	r1, [pc, #176]	; (80042f0 <W25qxx_Init+0x31c>)
 800423e:	481c      	ldr	r0, [pc, #112]	; (80042b0 <W25qxx_Init+0x2dc>)
 8004240:	f005 faa5 	bl	800978e <HAL_UART_Transmit>
			#endif
		break;
 8004244:	e05e      	b.n	8004304 <W25qxx_Init+0x330>

		case 0x3013:	//	w25x40
			//w25qxx.ID = W25Q40;
			w25qxx.BlockCount = 8;
 8004246:	4b17      	ldr	r3, [pc, #92]	; (80042a4 <W25qxx_Init+0x2d0>)
 8004248:	2208      	movs	r2, #8
 800424a:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x40\n", 13, 1000);
 800424c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004250:	220d      	movs	r2, #13
 8004252:	4928      	ldr	r1, [pc, #160]	; (80042f4 <W25qxx_Init+0x320>)
 8004254:	4816      	ldr	r0, [pc, #88]	; (80042b0 <W25qxx_Init+0x2dc>)
 8004256:	f005 fa9a 	bl	800978e <HAL_UART_Transmit>
			#endif
		break;
 800425a:	e053      	b.n	8004304 <W25qxx_Init+0x330>

		case 0x3012:	//	w25x20
			//w25qxx.ID = W25Q20;
			w25qxx.BlockCount = 4;
 800425c:	4b11      	ldr	r3, [pc, #68]	; (80042a4 <W25qxx_Init+0x2d0>)
 800425e:	2204      	movs	r2, #4
 8004260:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x20\n", 13, 1000);
 8004262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004266:	220d      	movs	r2, #13
 8004268:	4923      	ldr	r1, [pc, #140]	; (80042f8 <W25qxx_Init+0x324>)
 800426a:	4811      	ldr	r0, [pc, #68]	; (80042b0 <W25qxx_Init+0x2dc>)
 800426c:	f005 fa8f 	bl	800978e <HAL_UART_Transmit>
			#endif
		break;
 8004270:	e048      	b.n	8004304 <W25qxx_Init+0x330>

		case 0x3011:	//	w25x10
			//w25qxx.ID = W25Q10;
			w25qxx.BlockCount = 2;
 8004272:	4b0c      	ldr	r3, [pc, #48]	; (80042a4 <W25qxx_Init+0x2d0>)
 8004274:	2202      	movs	r2, #2
 8004276:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x10\n", 13, 1000);
 8004278:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800427c:	220d      	movs	r2, #13
 800427e:	491f      	ldr	r1, [pc, #124]	; (80042fc <W25qxx_Init+0x328>)
 8004280:	480b      	ldr	r0, [pc, #44]	; (80042b0 <W25qxx_Init+0x2dc>)
 8004282:	f005 fa84 	bl	800978e <HAL_UART_Transmit>
			#endif
		break;
 8004286:	e03d      	b.n	8004304 <W25qxx_Init+0x330>



		default:
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Unknown ID\n", 11, 1000);
 8004288:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800428c:	220b      	movs	r2, #11
 800428e:	491c      	ldr	r1, [pc, #112]	; (8004300 <W25qxx_Init+0x32c>)
 8004290:	4807      	ldr	r0, [pc, #28]	; (80042b0 <W25qxx_Init+0x2dc>)
 8004292:	f005 fa7c 	bl	800978e <HAL_UART_Transmit>
			#endif

			w25qxx.Lock = 0;
 8004296:	4b03      	ldr	r3, [pc, #12]	; (80042a4 <W25qxx_Init+0x2d0>)
 8004298:	2200      	movs	r2, #0
 800429a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			return 0;
 800429e:	2300      	movs	r3, #0
 80042a0:	e0e1      	b.n	8004466 <W25qxx_Init+0x492>
 80042a2:	bf00      	nop
 80042a4:	200007d0 	.word	0x200007d0
 80042a8:	40020000 	.word	0x40020000
 80042ac:	0801087c 	.word	0x0801087c
 80042b0:	20000268 	.word	0x20000268
 80042b4:	0801088c 	.word	0x0801088c
 80042b8:	20000790 	.word	0x20000790
 80042bc:	08010898 	.word	0x08010898
 80042c0:	080108a8 	.word	0x080108a8
 80042c4:	080108b8 	.word	0x080108b8
 80042c8:	080108c8 	.word	0x080108c8
 80042cc:	080108d8 	.word	0x080108d8
 80042d0:	080108e8 	.word	0x080108e8
 80042d4:	080108f8 	.word	0x080108f8
 80042d8:	08010908 	.word	0x08010908
 80042dc:	08010918 	.word	0x08010918
 80042e0:	08010928 	.word	0x08010928
 80042e4:	08010938 	.word	0x08010938
 80042e8:	08010948 	.word	0x08010948
 80042ec:	08010958 	.word	0x08010958
 80042f0:	08010968 	.word	0x08010968
 80042f4:	08010978 	.word	0x08010978
 80042f8:	08010988 	.word	0x08010988
 80042fc:	08010998 	.word	0x08010998
 8004300:	080109a8 	.word	0x080109a8
	}


	w25qxx.PageSize = 256;
 8004304:	4b5a      	ldr	r3, [pc, #360]	; (8004470 <W25qxx_Init+0x49c>)
 8004306:	f44f 7280 	mov.w	r2, #256	; 0x100
 800430a:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 800430c:	4b58      	ldr	r3, [pc, #352]	; (8004470 <W25qxx_Init+0x49c>)
 800430e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004312:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8004314:	4b56      	ldr	r3, [pc, #344]	; (8004470 <W25qxx_Init+0x49c>)
 8004316:	69db      	ldr	r3, [r3, #28]
 8004318:	011b      	lsls	r3, r3, #4
 800431a:	4a55      	ldr	r2, [pc, #340]	; (8004470 <W25qxx_Init+0x49c>)
 800431c:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 800431e:	4b54      	ldr	r3, [pc, #336]	; (8004470 <W25qxx_Init+0x49c>)
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	4a53      	ldr	r2, [pc, #332]	; (8004470 <W25qxx_Init+0x49c>)
 8004324:	6912      	ldr	r2, [r2, #16]
 8004326:	fb02 f303 	mul.w	r3, r2, r3
 800432a:	4a51      	ldr	r2, [pc, #324]	; (8004470 <W25qxx_Init+0x49c>)
 800432c:	8952      	ldrh	r2, [r2, #10]
 800432e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004332:	4a4f      	ldr	r2, [pc, #316]	; (8004470 <W25qxx_Init+0x49c>)
 8004334:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8004336:	4b4e      	ldr	r3, [pc, #312]	; (8004470 <W25qxx_Init+0x49c>)
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	011b      	lsls	r3, r3, #4
 800433c:	4a4c      	ldr	r2, [pc, #304]	; (8004470 <W25qxx_Init+0x49c>)
 800433e:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8004340:	4b4b      	ldr	r3, [pc, #300]	; (8004470 <W25qxx_Init+0x49c>)
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	4a4a      	ldr	r2, [pc, #296]	; (8004470 <W25qxx_Init+0x49c>)
 8004346:	6912      	ldr	r2, [r2, #16]
 8004348:	fb02 f303 	mul.w	r3, r2, r3
 800434c:	0a9b      	lsrs	r3, r3, #10
 800434e:	4a48      	ldr	r2, [pc, #288]	; (8004470 <W25qxx_Init+0x49c>)
 8004350:	6213      	str	r3, [r2, #32]
	//W25qxx_ReadStatusRegister(1);
	//W25qxx_ReadStatusRegister(2);
	//W25qxx_ReadStatusRegister(3);

	#if (INIT_DEBUG == 1)
	snprintf(buf, 64, "Page Size: %d Bytes\n", w25qxx.PageSize);
 8004352:	4b47      	ldr	r3, [pc, #284]	; (8004470 <W25qxx_Init+0x49c>)
 8004354:	895b      	ldrh	r3, [r3, #10]
 8004356:	4a47      	ldr	r2, [pc, #284]	; (8004474 <W25qxx_Init+0x4a0>)
 8004358:	2140      	movs	r1, #64	; 0x40
 800435a:	4847      	ldr	r0, [pc, #284]	; (8004478 <W25qxx_Init+0x4a4>)
 800435c:	f00a fdfe 	bl	800ef5c <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 8004360:	4845      	ldr	r0, [pc, #276]	; (8004478 <W25qxx_Init+0x4a4>)
 8004362:	f7fb ff55 	bl	8000210 <strlen>
 8004366:	4603      	mov	r3, r0
 8004368:	b29a      	uxth	r2, r3
 800436a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800436e:	4942      	ldr	r1, [pc, #264]	; (8004478 <W25qxx_Init+0x4a4>)
 8004370:	4842      	ldr	r0, [pc, #264]	; (800447c <W25qxx_Init+0x4a8>)
 8004372:	f005 fa0c 	bl	800978e <HAL_UART_Transmit>

	snprintf(buf, 64, "Page Count: %lu\n", w25qxx.PageCount);
 8004376:	4b3e      	ldr	r3, [pc, #248]	; (8004470 <W25qxx_Init+0x49c>)
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	4a41      	ldr	r2, [pc, #260]	; (8004480 <W25qxx_Init+0x4ac>)
 800437c:	2140      	movs	r1, #64	; 0x40
 800437e:	483e      	ldr	r0, [pc, #248]	; (8004478 <W25qxx_Init+0x4a4>)
 8004380:	f00a fdec 	bl	800ef5c <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 8004384:	483c      	ldr	r0, [pc, #240]	; (8004478 <W25qxx_Init+0x4a4>)
 8004386:	f7fb ff43 	bl	8000210 <strlen>
 800438a:	4603      	mov	r3, r0
 800438c:	b29a      	uxth	r2, r3
 800438e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004392:	4939      	ldr	r1, [pc, #228]	; (8004478 <W25qxx_Init+0x4a4>)
 8004394:	4839      	ldr	r0, [pc, #228]	; (800447c <W25qxx_Init+0x4a8>)
 8004396:	f005 f9fa 	bl	800978e <HAL_UART_Transmit>

	snprintf(buf, 64, "Sector Size: %lu Bytes\n", w25qxx.SectorSize);
 800439a:	4b35      	ldr	r3, [pc, #212]	; (8004470 <W25qxx_Init+0x49c>)
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	4a39      	ldr	r2, [pc, #228]	; (8004484 <W25qxx_Init+0x4b0>)
 80043a0:	2140      	movs	r1, #64	; 0x40
 80043a2:	4835      	ldr	r0, [pc, #212]	; (8004478 <W25qxx_Init+0x4a4>)
 80043a4:	f00a fdda 	bl	800ef5c <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 80043a8:	4833      	ldr	r0, [pc, #204]	; (8004478 <W25qxx_Init+0x4a4>)
 80043aa:	f7fb ff31 	bl	8000210 <strlen>
 80043ae:	4603      	mov	r3, r0
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043b6:	4930      	ldr	r1, [pc, #192]	; (8004478 <W25qxx_Init+0x4a4>)
 80043b8:	4830      	ldr	r0, [pc, #192]	; (800447c <W25qxx_Init+0x4a8>)
 80043ba:	f005 f9e8 	bl	800978e <HAL_UART_Transmit>

	snprintf(buf, 64, "Sector Count: %lu\n", w25qxx.SectorCount);
 80043be:	4b2c      	ldr	r3, [pc, #176]	; (8004470 <W25qxx_Init+0x49c>)
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	4a31      	ldr	r2, [pc, #196]	; (8004488 <W25qxx_Init+0x4b4>)
 80043c4:	2140      	movs	r1, #64	; 0x40
 80043c6:	482c      	ldr	r0, [pc, #176]	; (8004478 <W25qxx_Init+0x4a4>)
 80043c8:	f00a fdc8 	bl	800ef5c <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 80043cc:	482a      	ldr	r0, [pc, #168]	; (8004478 <W25qxx_Init+0x4a4>)
 80043ce:	f7fb ff1f 	bl	8000210 <strlen>
 80043d2:	4603      	mov	r3, r0
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043da:	4927      	ldr	r1, [pc, #156]	; (8004478 <W25qxx_Init+0x4a4>)
 80043dc:	4827      	ldr	r0, [pc, #156]	; (800447c <W25qxx_Init+0x4a8>)
 80043de:	f005 f9d6 	bl	800978e <HAL_UART_Transmit>

	snprintf(buf, 64, "Block Size: %lu Bytes\n", w25qxx.BlockSize);
 80043e2:	4b23      	ldr	r3, [pc, #140]	; (8004470 <W25qxx_Init+0x49c>)
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	4a29      	ldr	r2, [pc, #164]	; (800448c <W25qxx_Init+0x4b8>)
 80043e8:	2140      	movs	r1, #64	; 0x40
 80043ea:	4823      	ldr	r0, [pc, #140]	; (8004478 <W25qxx_Init+0x4a4>)
 80043ec:	f00a fdb6 	bl	800ef5c <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 80043f0:	4821      	ldr	r0, [pc, #132]	; (8004478 <W25qxx_Init+0x4a4>)
 80043f2:	f7fb ff0d 	bl	8000210 <strlen>
 80043f6:	4603      	mov	r3, r0
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043fe:	491e      	ldr	r1, [pc, #120]	; (8004478 <W25qxx_Init+0x4a4>)
 8004400:	481e      	ldr	r0, [pc, #120]	; (800447c <W25qxx_Init+0x4a8>)
 8004402:	f005 f9c4 	bl	800978e <HAL_UART_Transmit>

	snprintf(buf, 64, "Block Count: %lu\n", w25qxx.BlockCount);
 8004406:	4b1a      	ldr	r3, [pc, #104]	; (8004470 <W25qxx_Init+0x49c>)
 8004408:	69db      	ldr	r3, [r3, #28]
 800440a:	4a21      	ldr	r2, [pc, #132]	; (8004490 <W25qxx_Init+0x4bc>)
 800440c:	2140      	movs	r1, #64	; 0x40
 800440e:	481a      	ldr	r0, [pc, #104]	; (8004478 <W25qxx_Init+0x4a4>)
 8004410:	f00a fda4 	bl	800ef5c <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 8004414:	4818      	ldr	r0, [pc, #96]	; (8004478 <W25qxx_Init+0x4a4>)
 8004416:	f7fb fefb 	bl	8000210 <strlen>
 800441a:	4603      	mov	r3, r0
 800441c:	b29a      	uxth	r2, r3
 800441e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004422:	4915      	ldr	r1, [pc, #84]	; (8004478 <W25qxx_Init+0x4a4>)
 8004424:	4815      	ldr	r0, [pc, #84]	; (800447c <W25qxx_Init+0x4a8>)
 8004426:	f005 f9b2 	bl	800978e <HAL_UART_Transmit>

	snprintf(buf, 64, "Capacity: %lu KBytes\n", w25qxx.CapacityInKiloByte);
 800442a:	4b11      	ldr	r3, [pc, #68]	; (8004470 <W25qxx_Init+0x49c>)
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	4a19      	ldr	r2, [pc, #100]	; (8004494 <W25qxx_Init+0x4c0>)
 8004430:	2140      	movs	r1, #64	; 0x40
 8004432:	4811      	ldr	r0, [pc, #68]	; (8004478 <W25qxx_Init+0x4a4>)
 8004434:	f00a fd92 	bl	800ef5c <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 8004438:	480f      	ldr	r0, [pc, #60]	; (8004478 <W25qxx_Init+0x4a4>)
 800443a:	f7fb fee9 	bl	8000210 <strlen>
 800443e:	4603      	mov	r3, r0
 8004440:	b29a      	uxth	r2, r3
 8004442:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004446:	490c      	ldr	r1, [pc, #48]	; (8004478 <W25qxx_Init+0x4a4>)
 8004448:	480c      	ldr	r0, [pc, #48]	; (800447c <W25qxx_Init+0x4a8>)
 800444a:	f005 f9a0 	bl	800978e <HAL_UART_Transmit>

	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Init Done\n", 10, 1000);
 800444e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004452:	220a      	movs	r2, #10
 8004454:	4910      	ldr	r1, [pc, #64]	; (8004498 <W25qxx_Init+0x4c4>)
 8004456:	4809      	ldr	r0, [pc, #36]	; (800447c <W25qxx_Init+0x4a8>)
 8004458:	f005 f999 	bl	800978e <HAL_UART_Transmit>
	#endif

	w25qxx.Lock = 0;
 800445c:	4b04      	ldr	r3, [pc, #16]	; (8004470 <W25qxx_Init+0x49c>)
 800445e:	2200      	movs	r2, #0
 8004460:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return 1;
 8004464:	2301      	movs	r3, #1
}	
 8004466:	4618      	mov	r0, r3
 8004468:	3708      	adds	r7, #8
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	200007d0 	.word	0x200007d0
 8004474:	080109b4 	.word	0x080109b4
 8004478:	20000790 	.word	0x20000790
 800447c:	20000268 	.word	0x20000268
 8004480:	080109cc 	.word	0x080109cc
 8004484:	080109e0 	.word	0x080109e0
 8004488:	080109f8 	.word	0x080109f8
 800448c:	08010a0c 	.word	0x08010a0c
 8004490:	08010a24 	.word	0x08010a24
 8004494:	08010a38 	.word	0x08010a38
 8004498:	08010a50 	.word	0x08010a50

0800449c <W25qxx_EraseSector>:
	w25qxx.Lock = 0;
}

//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
	while(w25qxx.Lock == 1)
 80044a4:	e002      	b.n	80044ac <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 80044a6:	2001      	movs	r0, #1
 80044a8:	f000 f938 	bl	800471c <HAL_Delay>
	while(w25qxx.Lock == 1)
 80044ac:	4b23      	ldr	r3, [pc, #140]	; (800453c <W25qxx_EraseSector+0xa0>)
 80044ae:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d0f7      	beq.n	80044a6 <W25qxx_EraseSector+0xa>

	w25qxx.Lock = 1;
 80044b6:	4b21      	ldr	r3, [pc, #132]	; (800453c <W25qxx_EraseSector+0xa0>)
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	W25qxx_WaitForWriteEnd();
 80044be:	f7ff fd5f 	bl	8003f80 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 80044c2:	4b1e      	ldr	r3, [pc, #120]	; (800453c <W25qxx_EraseSector+0xa0>)
 80044c4:	691a      	ldr	r2, [r3, #16]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	fb02 f303 	mul.w	r3, r2, r3
 80044cc:	607b      	str	r3, [r7, #4]

	W25qxx_WriteEnable();
 80044ce:	f7ff fd41 	bl	8003f54 <W25qxx_WriteEnable>

	W25QFLASH_CS_SELECT;
 80044d2:	2200      	movs	r2, #0
 80044d4:	2110      	movs	r1, #16
 80044d6:	481a      	ldr	r0, [pc, #104]	; (8004540 <W25qxx_EraseSector+0xa4>)
 80044d8:	f000 fffe 	bl	80054d8 <HAL_GPIO_WritePin>

	W25qxx_Spi(W25_SECTOR_ERASE);
 80044dc:	2020      	movs	r0, #32
 80044de:	f7ff fced 	bl	8003ebc <W25qxx_Spi>

	if(w25qxx.ID >= W25Q256)
 80044e2:	4b16      	ldr	r3, [pc, #88]	; (800453c <W25qxx_EraseSector+0xa0>)
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	2b08      	cmp	r3, #8
 80044e8:	d905      	bls.n	80044f6 <W25qxx_EraseSector+0x5a>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	0e1b      	lsrs	r3, r3, #24
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7ff fce3 	bl	8003ebc <W25qxx_Spi>

	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	0c1b      	lsrs	r3, r3, #16
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7ff fcdd 	bl	8003ebc <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	0a1b      	lsrs	r3, r3, #8
 8004506:	b2db      	uxtb	r3, r3
 8004508:	4618      	mov	r0, r3
 800450a:	f7ff fcd7 	bl	8003ebc <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	b2db      	uxtb	r3, r3
 8004512:	4618      	mov	r0, r3
 8004514:	f7ff fcd2 	bl	8003ebc <W25qxx_Spi>

	W25QFLASH_CS_UNSELECT;
 8004518:	2201      	movs	r2, #1
 800451a:	2110      	movs	r1, #16
 800451c:	4808      	ldr	r0, [pc, #32]	; (8004540 <W25qxx_EraseSector+0xa4>)
 800451e:	f000 ffdb 	bl	80054d8 <HAL_GPIO_WritePin>

	W25qxx_WaitForWriteEnd();
 8004522:	f7ff fd2d 	bl	8003f80 <W25qxx_WaitForWriteEnd>

	W25qxx_Delay(1);
 8004526:	2001      	movs	r0, #1
 8004528:	f000 f8f8 	bl	800471c <HAL_Delay>
	w25qxx.Lock = 0;
 800452c:	4b03      	ldr	r3, [pc, #12]	; (800453c <W25qxx_EraseSector+0xa0>)
 800452e:	2200      	movs	r2, #0
 8004530:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004534:	bf00      	nop
 8004536:	3708      	adds	r7, #8
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	200007d0 	.word	0x200007d0
 8004540:	40020000 	.word	0x40020000

08004544 <W25qxx_WritePage>:
	w25qxx.Lock = 0;
}

//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
 8004550:	603b      	str	r3, [r7, #0]
	while(w25qxx.Lock == 1)
 8004552:	e002      	b.n	800455a <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8004554:	2001      	movs	r0, #1
 8004556:	f000 f8e1 	bl	800471c <HAL_Delay>
	while(w25qxx.Lock == 1)
 800455a:	4b37      	ldr	r3, [pc, #220]	; (8004638 <W25qxx_WritePage+0xf4>)
 800455c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004560:	2b01      	cmp	r3, #1
 8004562:	d0f7      	beq.n	8004554 <W25qxx_WritePage+0x10>

	w25qxx.Lock = 1;
 8004564:	4b34      	ldr	r3, [pc, #208]	; (8004638 <W25qxx_WritePage+0xf4>)
 8004566:	2201      	movs	r2, #1
 8004568:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	if(((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 800456c:	683a      	ldr	r2, [r7, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4413      	add	r3, r2
 8004572:	4a31      	ldr	r2, [pc, #196]	; (8004638 <W25qxx_WritePage+0xf4>)
 8004574:	8952      	ldrh	r2, [r2, #10]
 8004576:	4293      	cmp	r3, r2
 8004578:	d802      	bhi.n	8004580 <W25qxx_WritePage+0x3c>
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d105      	bne.n	800458c <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8004580:	4b2d      	ldr	r3, [pc, #180]	; (8004638 <W25qxx_WritePage+0xf4>)
 8004582:	895b      	ldrh	r3, [r3, #10]
 8004584:	461a      	mov	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	603b      	str	r3, [r7, #0]

	if((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	4413      	add	r3, r2
 8004592:	4a29      	ldr	r2, [pc, #164]	; (8004638 <W25qxx_WritePage+0xf4>)
 8004594:	8952      	ldrh	r2, [r2, #10]
 8004596:	4293      	cmp	r3, r2
 8004598:	d905      	bls.n	80045a6 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800459a:	4b27      	ldr	r3, [pc, #156]	; (8004638 <W25qxx_WritePage+0xf4>)
 800459c:	895b      	ldrh	r3, [r3, #10]
 800459e:	461a      	mov	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	603b      	str	r3, [r7, #0]


	W25qxx_WaitForWriteEnd();
 80045a6:	f7ff fceb 	bl	8003f80 <W25qxx_WaitForWriteEnd>

	W25qxx_WriteEnable();
 80045aa:	f7ff fcd3 	bl	8003f54 <W25qxx_WriteEnable>

	W25QFLASH_CS_SELECT;
 80045ae:	2200      	movs	r2, #0
 80045b0:	2110      	movs	r1, #16
 80045b2:	4822      	ldr	r0, [pc, #136]	; (800463c <W25qxx_WritePage+0xf8>)
 80045b4:	f000 ff90 	bl	80054d8 <HAL_GPIO_WritePin>

	W25qxx_Spi(W25_PAGE_PROGRAMM);
 80045b8:	2002      	movs	r0, #2
 80045ba:	f7ff fc7f 	bl	8003ebc <W25qxx_Spi>

	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 80045be:	4b1e      	ldr	r3, [pc, #120]	; (8004638 <W25qxx_WritePage+0xf4>)
 80045c0:	895b      	ldrh	r3, [r3, #10]
 80045c2:	461a      	mov	r2, r3
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	fb02 f303 	mul.w	r3, r2, r3
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	4413      	add	r3, r2
 80045ce:	60bb      	str	r3, [r7, #8]

	if(w25qxx.ID >= W25Q256)
 80045d0:	4b19      	ldr	r3, [pc, #100]	; (8004638 <W25qxx_WritePage+0xf4>)
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	2b08      	cmp	r3, #8
 80045d6:	d905      	bls.n	80045e4 <W25qxx_WritePage+0xa0>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	0e1b      	lsrs	r3, r3, #24
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	4618      	mov	r0, r3
 80045e0:	f7ff fc6c 	bl	8003ebc <W25qxx_Spi>

	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	0c1b      	lsrs	r3, r3, #16
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7ff fc66 	bl	8003ebc <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	0a1b      	lsrs	r3, r3, #8
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7ff fc60 	bl	8003ebc <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	4618      	mov	r0, r3
 8004602:	f7ff fc5b 	bl	8003ebc <W25qxx_Spi>

	HAL_SPI_Transmit(W25QXX_SPI_PTR, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	b29a      	uxth	r2, r3
 800460a:	2364      	movs	r3, #100	; 0x64
 800460c:	68f9      	ldr	r1, [r7, #12]
 800460e:	480c      	ldr	r0, [pc, #48]	; (8004640 <W25qxx_WritePage+0xfc>)
 8004610:	f004 fa19 	bl	8008a46 <HAL_SPI_Transmit>

	W25QFLASH_CS_UNSELECT;
 8004614:	2201      	movs	r2, #1
 8004616:	2110      	movs	r1, #16
 8004618:	4808      	ldr	r0, [pc, #32]	; (800463c <W25qxx_WritePage+0xf8>)
 800461a:	f000 ff5d 	bl	80054d8 <HAL_GPIO_WritePin>

	W25qxx_WaitForWriteEnd();
 800461e:	f7ff fcaf 	bl	8003f80 <W25qxx_WaitForWriteEnd>

	W25qxx_Delay(1);
 8004622:	2001      	movs	r0, #1
 8004624:	f000 f87a 	bl	800471c <HAL_Delay>
	w25qxx.Lock = 0;
 8004628:	4b03      	ldr	r3, [pc, #12]	; (8004638 <W25qxx_WritePage+0xf4>)
 800462a:	2200      	movs	r2, #0
 800462c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004630:	bf00      	nop
 8004632:	3710      	adds	r7, #16
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	200007d0 	.word	0x200007d0
 800463c:	40020000 	.word	0x40020000
 8004640:	200001cc 	.word	0x200001cc

08004644 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004644:	f8df d034 	ldr.w	sp, [pc, #52]	; 800467c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004648:	480d      	ldr	r0, [pc, #52]	; (8004680 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800464a:	490e      	ldr	r1, [pc, #56]	; (8004684 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800464c:	4a0e      	ldr	r2, [pc, #56]	; (8004688 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800464e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004650:	e002      	b.n	8004658 <LoopCopyDataInit>

08004652 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004652:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004654:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004656:	3304      	adds	r3, #4

08004658 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004658:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800465a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800465c:	d3f9      	bcc.n	8004652 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800465e:	4a0b      	ldr	r2, [pc, #44]	; (800468c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004660:	4c0b      	ldr	r4, [pc, #44]	; (8004690 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004662:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004664:	e001      	b.n	800466a <LoopFillZerobss>

08004666 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004666:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004668:	3204      	adds	r2, #4

0800466a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800466a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800466c:	d3fb      	bcc.n	8004666 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800466e:	f7ff fc13 	bl	8003e98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004672:	f00a fc39 	bl	800eee8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004676:	f7fc fcdf 	bl	8001038 <main>
  bx  lr    
 800467a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800467c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004680:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004684:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8004688:	0801103c 	.word	0x0801103c
  ldr r2, =_sbss
 800468c:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8004690:	2000515c 	.word	0x2000515c

08004694 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004694:	e7fe      	b.n	8004694 <ADC_IRQHandler>
	...

08004698 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800469c:	4b0e      	ldr	r3, [pc, #56]	; (80046d8 <HAL_Init+0x40>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a0d      	ldr	r2, [pc, #52]	; (80046d8 <HAL_Init+0x40>)
 80046a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80046a8:	4b0b      	ldr	r3, [pc, #44]	; (80046d8 <HAL_Init+0x40>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a0a      	ldr	r2, [pc, #40]	; (80046d8 <HAL_Init+0x40>)
 80046ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80046b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80046b4:	4b08      	ldr	r3, [pc, #32]	; (80046d8 <HAL_Init+0x40>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a07      	ldr	r2, [pc, #28]	; (80046d8 <HAL_Init+0x40>)
 80046ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046c0:	2003      	movs	r0, #3
 80046c2:	f000 f913 	bl	80048ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80046c6:	2000      	movs	r0, #0
 80046c8:	f7ff face 	bl	8003c68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80046cc:	f7ff f844 	bl	8003758 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	40023c00 	.word	0x40023c00

080046dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046dc:	b480      	push	{r7}
 80046de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80046e0:	4b06      	ldr	r3, [pc, #24]	; (80046fc <HAL_IncTick+0x20>)
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	461a      	mov	r2, r3
 80046e6:	4b06      	ldr	r3, [pc, #24]	; (8004700 <HAL_IncTick+0x24>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4413      	add	r3, r2
 80046ec:	4a04      	ldr	r2, [pc, #16]	; (8004700 <HAL_IncTick+0x24>)
 80046ee:	6013      	str	r3, [r2, #0]
}
 80046f0:	bf00      	nop
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	20000030 	.word	0x20000030
 8004700:	200007f8 	.word	0x200007f8

08004704 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004704:	b480      	push	{r7}
 8004706:	af00      	add	r7, sp, #0
  return uwTick;
 8004708:	4b03      	ldr	r3, [pc, #12]	; (8004718 <HAL_GetTick+0x14>)
 800470a:	681b      	ldr	r3, [r3, #0]
}
 800470c:	4618      	mov	r0, r3
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	200007f8 	.word	0x200007f8

0800471c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004724:	f7ff ffee 	bl	8004704 <HAL_GetTick>
 8004728:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004734:	d005      	beq.n	8004742 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004736:	4b0a      	ldr	r3, [pc, #40]	; (8004760 <HAL_Delay+0x44>)
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	461a      	mov	r2, r3
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	4413      	add	r3, r2
 8004740:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004742:	bf00      	nop
 8004744:	f7ff ffde 	bl	8004704 <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	429a      	cmp	r2, r3
 8004752:	d8f7      	bhi.n	8004744 <HAL_Delay+0x28>
  {
  }
}
 8004754:	bf00      	nop
 8004756:	bf00      	nop
 8004758:	3710      	adds	r7, #16
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	20000030 	.word	0x20000030

08004764 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f003 0307 	and.w	r3, r3, #7
 8004772:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004774:	4b0c      	ldr	r3, [pc, #48]	; (80047a8 <__NVIC_SetPriorityGrouping+0x44>)
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800477a:	68ba      	ldr	r2, [r7, #8]
 800477c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004780:	4013      	ands	r3, r2
 8004782:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800478c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004794:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004796:	4a04      	ldr	r2, [pc, #16]	; (80047a8 <__NVIC_SetPriorityGrouping+0x44>)
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	60d3      	str	r3, [r2, #12]
}
 800479c:	bf00      	nop
 800479e:	3714      	adds	r7, #20
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr
 80047a8:	e000ed00 	.word	0xe000ed00

080047ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047ac:	b480      	push	{r7}
 80047ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047b0:	4b04      	ldr	r3, [pc, #16]	; (80047c4 <__NVIC_GetPriorityGrouping+0x18>)
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	0a1b      	lsrs	r3, r3, #8
 80047b6:	f003 0307 	and.w	r3, r3, #7
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr
 80047c4:	e000ed00 	.word	0xe000ed00

080047c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	4603      	mov	r3, r0
 80047d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	db0b      	blt.n	80047f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047da:	79fb      	ldrb	r3, [r7, #7]
 80047dc:	f003 021f 	and.w	r2, r3, #31
 80047e0:	4907      	ldr	r1, [pc, #28]	; (8004800 <__NVIC_EnableIRQ+0x38>)
 80047e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047e6:	095b      	lsrs	r3, r3, #5
 80047e8:	2001      	movs	r0, #1
 80047ea:	fa00 f202 	lsl.w	r2, r0, r2
 80047ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80047f2:	bf00      	nop
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	e000e100 	.word	0xe000e100

08004804 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	4603      	mov	r3, r0
 800480c:	6039      	str	r1, [r7, #0]
 800480e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004814:	2b00      	cmp	r3, #0
 8004816:	db0a      	blt.n	800482e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	b2da      	uxtb	r2, r3
 800481c:	490c      	ldr	r1, [pc, #48]	; (8004850 <__NVIC_SetPriority+0x4c>)
 800481e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004822:	0112      	lsls	r2, r2, #4
 8004824:	b2d2      	uxtb	r2, r2
 8004826:	440b      	add	r3, r1
 8004828:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800482c:	e00a      	b.n	8004844 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	b2da      	uxtb	r2, r3
 8004832:	4908      	ldr	r1, [pc, #32]	; (8004854 <__NVIC_SetPriority+0x50>)
 8004834:	79fb      	ldrb	r3, [r7, #7]
 8004836:	f003 030f 	and.w	r3, r3, #15
 800483a:	3b04      	subs	r3, #4
 800483c:	0112      	lsls	r2, r2, #4
 800483e:	b2d2      	uxtb	r2, r2
 8004840:	440b      	add	r3, r1
 8004842:	761a      	strb	r2, [r3, #24]
}
 8004844:	bf00      	nop
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr
 8004850:	e000e100 	.word	0xe000e100
 8004854:	e000ed00 	.word	0xe000ed00

08004858 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004858:	b480      	push	{r7}
 800485a:	b089      	sub	sp, #36	; 0x24
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f003 0307 	and.w	r3, r3, #7
 800486a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	f1c3 0307 	rsb	r3, r3, #7
 8004872:	2b04      	cmp	r3, #4
 8004874:	bf28      	it	cs
 8004876:	2304      	movcs	r3, #4
 8004878:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	3304      	adds	r3, #4
 800487e:	2b06      	cmp	r3, #6
 8004880:	d902      	bls.n	8004888 <NVIC_EncodePriority+0x30>
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	3b03      	subs	r3, #3
 8004886:	e000      	b.n	800488a <NVIC_EncodePriority+0x32>
 8004888:	2300      	movs	r3, #0
 800488a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800488c:	f04f 32ff 	mov.w	r2, #4294967295
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	fa02 f303 	lsl.w	r3, r2, r3
 8004896:	43da      	mvns	r2, r3
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	401a      	ands	r2, r3
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048a0:	f04f 31ff 	mov.w	r1, #4294967295
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	fa01 f303 	lsl.w	r3, r1, r3
 80048aa:	43d9      	mvns	r1, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048b0:	4313      	orrs	r3, r2
         );
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3724      	adds	r7, #36	; 0x24
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
	...

080048c0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80048c0:	b480      	push	{r7}
 80048c2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80048c4:	f3bf 8f4f 	dsb	sy
}
 80048c8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80048ca:	4b06      	ldr	r3, [pc, #24]	; (80048e4 <__NVIC_SystemReset+0x24>)
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80048d2:	4904      	ldr	r1, [pc, #16]	; (80048e4 <__NVIC_SystemReset+0x24>)
 80048d4:	4b04      	ldr	r3, [pc, #16]	; (80048e8 <__NVIC_SystemReset+0x28>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80048da:	f3bf 8f4f 	dsb	sy
}
 80048de:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80048e0:	bf00      	nop
 80048e2:	e7fd      	b.n	80048e0 <__NVIC_SystemReset+0x20>
 80048e4:	e000ed00 	.word	0xe000ed00
 80048e8:	05fa0004 	.word	0x05fa0004

080048ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f7ff ff35 	bl	8004764 <__NVIC_SetPriorityGrouping>
}
 80048fa:	bf00      	nop
 80048fc:	3708      	adds	r7, #8
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}

08004902 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004902:	b580      	push	{r7, lr}
 8004904:	b086      	sub	sp, #24
 8004906:	af00      	add	r7, sp, #0
 8004908:	4603      	mov	r3, r0
 800490a:	60b9      	str	r1, [r7, #8]
 800490c:	607a      	str	r2, [r7, #4]
 800490e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004910:	2300      	movs	r3, #0
 8004912:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004914:	f7ff ff4a 	bl	80047ac <__NVIC_GetPriorityGrouping>
 8004918:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	68b9      	ldr	r1, [r7, #8]
 800491e:	6978      	ldr	r0, [r7, #20]
 8004920:	f7ff ff9a 	bl	8004858 <NVIC_EncodePriority>
 8004924:	4602      	mov	r2, r0
 8004926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800492a:	4611      	mov	r1, r2
 800492c:	4618      	mov	r0, r3
 800492e:	f7ff ff69 	bl	8004804 <__NVIC_SetPriority>
}
 8004932:	bf00      	nop
 8004934:	3718      	adds	r7, #24
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800493a:	b580      	push	{r7, lr}
 800493c:	b082      	sub	sp, #8
 800493e:	af00      	add	r7, sp, #0
 8004940:	4603      	mov	r3, r0
 8004942:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004948:	4618      	mov	r0, r3
 800494a:	f7ff ff3d 	bl	80047c8 <__NVIC_EnableIRQ>
}
 800494e:	bf00      	nop
 8004950:	3708      	adds	r7, #8
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8004956:	b580      	push	{r7, lr}
 8004958:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800495a:	f7ff ffb1 	bl	80048c0 <__NVIC_SystemReset>
	...

08004960 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b086      	sub	sp, #24
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004968:	2300      	movs	r3, #0
 800496a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800496c:	f7ff feca 	bl	8004704 <HAL_GetTick>
 8004970:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d101      	bne.n	800497c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e099      	b.n	8004ab0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2202      	movs	r2, #2
 8004980:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f022 0201 	bic.w	r2, r2, #1
 800499a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800499c:	e00f      	b.n	80049be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800499e:	f7ff feb1 	bl	8004704 <HAL_GetTick>
 80049a2:	4602      	mov	r2, r0
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	2b05      	cmp	r3, #5
 80049aa:	d908      	bls.n	80049be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2220      	movs	r2, #32
 80049b0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2203      	movs	r2, #3
 80049b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e078      	b.n	8004ab0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0301 	and.w	r3, r3, #1
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d1e8      	bne.n	800499e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80049d4:	697a      	ldr	r2, [r7, #20]
 80049d6:	4b38      	ldr	r3, [pc, #224]	; (8004ab8 <HAL_DMA_Init+0x158>)
 80049d8:	4013      	ands	r3, r2
 80049da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685a      	ldr	r2, [r3, #4]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80049ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	699b      	ldr	r3, [r3, #24]
 80049fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a1b      	ldr	r3, [r3, #32]
 8004a08:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a0a:	697a      	ldr	r2, [r7, #20]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a14:	2b04      	cmp	r3, #4
 8004a16:	d107      	bne.n	8004a28 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a20:	4313      	orrs	r3, r2
 8004a22:	697a      	ldr	r2, [r7, #20]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	697a      	ldr	r2, [r7, #20]
 8004a2e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	f023 0307 	bic.w	r3, r3, #7
 8004a3e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4e:	2b04      	cmp	r3, #4
 8004a50:	d117      	bne.n	8004a82 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a56:	697a      	ldr	r2, [r7, #20]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00e      	beq.n	8004a82 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 fb0f 	bl	8005088 <DMA_CheckFifoParam>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d008      	beq.n	8004a82 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2240      	movs	r2, #64	; 0x40
 8004a74:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e016      	b.n	8004ab0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	697a      	ldr	r2, [r7, #20]
 8004a88:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 fac6 	bl	800501c <DMA_CalcBaseAndBitshift>
 8004a90:	4603      	mov	r3, r0
 8004a92:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a98:	223f      	movs	r2, #63	; 0x3f
 8004a9a:	409a      	lsls	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3718      	adds	r7, #24
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	f010803f 	.word	0xf010803f

08004abc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b086      	sub	sp, #24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
 8004ac8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004aca:	2300      	movs	r3, #0
 8004acc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d101      	bne.n	8004ae2 <HAL_DMA_Start_IT+0x26>
 8004ade:	2302      	movs	r3, #2
 8004ae0:	e040      	b.n	8004b64 <HAL_DMA_Start_IT+0xa8>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d12f      	bne.n	8004b56 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2202      	movs	r2, #2
 8004afa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2200      	movs	r2, #0
 8004b02:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	68b9      	ldr	r1, [r7, #8]
 8004b0a:	68f8      	ldr	r0, [r7, #12]
 8004b0c:	f000 fa58 	bl	8004fc0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b14:	223f      	movs	r2, #63	; 0x3f
 8004b16:	409a      	lsls	r2, r3
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f042 0216 	orr.w	r2, r2, #22
 8004b2a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d007      	beq.n	8004b44 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f042 0208 	orr.w	r2, r2, #8
 8004b42:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f042 0201 	orr.w	r2, r2, #1
 8004b52:	601a      	str	r2, [r3, #0]
 8004b54:	e005      	b.n	8004b62 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004b5e:	2302      	movs	r3, #2
 8004b60:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004b62:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3718      	adds	r7, #24
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b78:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004b7a:	f7ff fdc3 	bl	8004704 <HAL_GetTick>
 8004b7e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d008      	beq.n	8004b9e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2280      	movs	r2, #128	; 0x80
 8004b90:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e052      	b.n	8004c44 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f022 0216 	bic.w	r2, r2, #22
 8004bac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	695a      	ldr	r2, [r3, #20]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bbc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d103      	bne.n	8004bce <HAL_DMA_Abort+0x62>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d007      	beq.n	8004bde <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f022 0208 	bic.w	r2, r2, #8
 8004bdc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f022 0201 	bic.w	r2, r2, #1
 8004bec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004bee:	e013      	b.n	8004c18 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004bf0:	f7ff fd88 	bl	8004704 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	2b05      	cmp	r3, #5
 8004bfc:	d90c      	bls.n	8004c18 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2220      	movs	r2, #32
 8004c02:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2203      	movs	r2, #3
 8004c08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e015      	b.n	8004c44 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d1e4      	bne.n	8004bf0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c2a:	223f      	movs	r2, #63	; 0x3f
 8004c2c:	409a      	lsls	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2201      	movs	r2, #1
 8004c36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3710      	adds	r7, #16
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d004      	beq.n	8004c6a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2280      	movs	r2, #128	; 0x80
 8004c64:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e00c      	b.n	8004c84 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2205      	movs	r2, #5
 8004c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f022 0201 	bic.w	r2, r2, #1
 8004c80:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004c9c:	4b8e      	ldr	r3, [pc, #568]	; (8004ed8 <HAL_DMA_IRQHandler+0x248>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a8e      	ldr	r2, [pc, #568]	; (8004edc <HAL_DMA_IRQHandler+0x24c>)
 8004ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca6:	0a9b      	lsrs	r3, r3, #10
 8004ca8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cba:	2208      	movs	r2, #8
 8004cbc:	409a      	lsls	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d01a      	beq.n	8004cfc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0304 	and.w	r3, r3, #4
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d013      	beq.n	8004cfc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f022 0204 	bic.w	r2, r2, #4
 8004ce2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ce8:	2208      	movs	r2, #8
 8004cea:	409a      	lsls	r2, r3
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf4:	f043 0201 	orr.w	r2, r3, #1
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d00:	2201      	movs	r2, #1
 8004d02:	409a      	lsls	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	4013      	ands	r3, r2
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d012      	beq.n	8004d32 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00b      	beq.n	8004d32 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d1e:	2201      	movs	r2, #1
 8004d20:	409a      	lsls	r2, r3
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d2a:	f043 0202 	orr.w	r2, r3, #2
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d36:	2204      	movs	r2, #4
 8004d38:	409a      	lsls	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d012      	beq.n	8004d68 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0302 	and.w	r3, r3, #2
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d00b      	beq.n	8004d68 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d54:	2204      	movs	r2, #4
 8004d56:	409a      	lsls	r2, r3
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d60:	f043 0204 	orr.w	r2, r3, #4
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d6c:	2210      	movs	r2, #16
 8004d6e:	409a      	lsls	r2, r3
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	4013      	ands	r3, r2
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d043      	beq.n	8004e00 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0308 	and.w	r3, r3, #8
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d03c      	beq.n	8004e00 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d8a:	2210      	movs	r2, #16
 8004d8c:	409a      	lsls	r2, r3
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d018      	beq.n	8004dd2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d108      	bne.n	8004dc0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d024      	beq.n	8004e00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	4798      	blx	r3
 8004dbe:	e01f      	b.n	8004e00 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d01b      	beq.n	8004e00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	4798      	blx	r3
 8004dd0:	e016      	b.n	8004e00 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d107      	bne.n	8004df0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f022 0208 	bic.w	r2, r2, #8
 8004dee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d003      	beq.n	8004e00 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e04:	2220      	movs	r2, #32
 8004e06:	409a      	lsls	r2, r3
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f000 808f 	beq.w	8004f30 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0310 	and.w	r3, r3, #16
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f000 8087 	beq.w	8004f30 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e26:	2220      	movs	r2, #32
 8004e28:	409a      	lsls	r2, r3
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	2b05      	cmp	r3, #5
 8004e38:	d136      	bne.n	8004ea8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f022 0216 	bic.w	r2, r2, #22
 8004e48:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	695a      	ldr	r2, [r3, #20]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e58:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d103      	bne.n	8004e6a <HAL_DMA_IRQHandler+0x1da>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d007      	beq.n	8004e7a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f022 0208 	bic.w	r2, r2, #8
 8004e78:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e7e:	223f      	movs	r2, #63	; 0x3f
 8004e80:	409a      	lsls	r2, r3
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d07e      	beq.n	8004f9c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	4798      	blx	r3
        }
        return;
 8004ea6:	e079      	b.n	8004f9c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d01d      	beq.n	8004ef2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d10d      	bne.n	8004ee0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d031      	beq.n	8004f30 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	4798      	blx	r3
 8004ed4:	e02c      	b.n	8004f30 <HAL_DMA_IRQHandler+0x2a0>
 8004ed6:	bf00      	nop
 8004ed8:	20000028 	.word	0x20000028
 8004edc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d023      	beq.n	8004f30 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	4798      	blx	r3
 8004ef0:	e01e      	b.n	8004f30 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d10f      	bne.n	8004f20 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f022 0210 	bic.w	r2, r2, #16
 8004f0e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d003      	beq.n	8004f30 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d032      	beq.n	8004f9e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f3c:	f003 0301 	and.w	r3, r3, #1
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d022      	beq.n	8004f8a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2205      	movs	r2, #5
 8004f48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f022 0201 	bic.w	r2, r2, #1
 8004f5a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	3301      	adds	r3, #1
 8004f60:	60bb      	str	r3, [r7, #8]
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d307      	bcc.n	8004f78 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0301 	and.w	r3, r3, #1
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1f2      	bne.n	8004f5c <HAL_DMA_IRQHandler+0x2cc>
 8004f76:	e000      	b.n	8004f7a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004f78:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d005      	beq.n	8004f9e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	4798      	blx	r3
 8004f9a:	e000      	b.n	8004f9e <HAL_DMA_IRQHandler+0x30e>
        return;
 8004f9c:	bf00      	nop
    }
  }
}
 8004f9e:	3718      	adds	r7, #24
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004fb2:	b2db      	uxtb	r3, r3
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b085      	sub	sp, #20
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	607a      	str	r2, [r7, #4]
 8004fcc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004fdc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	683a      	ldr	r2, [r7, #0]
 8004fe4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	2b40      	cmp	r3, #64	; 0x40
 8004fec:	d108      	bne.n	8005000 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68ba      	ldr	r2, [r7, #8]
 8004ffc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004ffe:	e007      	b.n	8005010 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68ba      	ldr	r2, [r7, #8]
 8005006:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	60da      	str	r2, [r3, #12]
}
 8005010:	bf00      	nop
 8005012:	3714      	adds	r7, #20
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800501c:	b480      	push	{r7}
 800501e:	b085      	sub	sp, #20
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	b2db      	uxtb	r3, r3
 800502a:	3b10      	subs	r3, #16
 800502c:	4a14      	ldr	r2, [pc, #80]	; (8005080 <DMA_CalcBaseAndBitshift+0x64>)
 800502e:	fba2 2303 	umull	r2, r3, r2, r3
 8005032:	091b      	lsrs	r3, r3, #4
 8005034:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005036:	4a13      	ldr	r2, [pc, #76]	; (8005084 <DMA_CalcBaseAndBitshift+0x68>)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	4413      	add	r3, r2
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	461a      	mov	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2b03      	cmp	r3, #3
 8005048:	d909      	bls.n	800505e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005052:	f023 0303 	bic.w	r3, r3, #3
 8005056:	1d1a      	adds	r2, r3, #4
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	659a      	str	r2, [r3, #88]	; 0x58
 800505c:	e007      	b.n	800506e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005066:	f023 0303 	bic.w	r3, r3, #3
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005072:	4618      	mov	r0, r3
 8005074:	3714      	adds	r7, #20
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
 800507e:	bf00      	nop
 8005080:	aaaaaaab 	.word	0xaaaaaaab
 8005084:	08010e74 	.word	0x08010e74

08005088 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005088:	b480      	push	{r7}
 800508a:	b085      	sub	sp, #20
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005090:	2300      	movs	r3, #0
 8005092:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005098:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d11f      	bne.n	80050e2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	2b03      	cmp	r3, #3
 80050a6:	d856      	bhi.n	8005156 <DMA_CheckFifoParam+0xce>
 80050a8:	a201      	add	r2, pc, #4	; (adr r2, 80050b0 <DMA_CheckFifoParam+0x28>)
 80050aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ae:	bf00      	nop
 80050b0:	080050c1 	.word	0x080050c1
 80050b4:	080050d3 	.word	0x080050d3
 80050b8:	080050c1 	.word	0x080050c1
 80050bc:	08005157 	.word	0x08005157
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d046      	beq.n	800515a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050d0:	e043      	b.n	800515a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80050da:	d140      	bne.n	800515e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050e0:	e03d      	b.n	800515e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050ea:	d121      	bne.n	8005130 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	2b03      	cmp	r3, #3
 80050f0:	d837      	bhi.n	8005162 <DMA_CheckFifoParam+0xda>
 80050f2:	a201      	add	r2, pc, #4	; (adr r2, 80050f8 <DMA_CheckFifoParam+0x70>)
 80050f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f8:	08005109 	.word	0x08005109
 80050fc:	0800510f 	.word	0x0800510f
 8005100:	08005109 	.word	0x08005109
 8005104:	08005121 	.word	0x08005121
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	73fb      	strb	r3, [r7, #15]
      break;
 800510c:	e030      	b.n	8005170 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005112:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d025      	beq.n	8005166 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800511e:	e022      	b.n	8005166 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005124:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005128:	d11f      	bne.n	800516a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800512e:	e01c      	b.n	800516a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	2b02      	cmp	r3, #2
 8005134:	d903      	bls.n	800513e <DMA_CheckFifoParam+0xb6>
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	2b03      	cmp	r3, #3
 800513a:	d003      	beq.n	8005144 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800513c:	e018      	b.n	8005170 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	73fb      	strb	r3, [r7, #15]
      break;
 8005142:	e015      	b.n	8005170 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005148:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00e      	beq.n	800516e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	73fb      	strb	r3, [r7, #15]
      break;
 8005154:	e00b      	b.n	800516e <DMA_CheckFifoParam+0xe6>
      break;
 8005156:	bf00      	nop
 8005158:	e00a      	b.n	8005170 <DMA_CheckFifoParam+0xe8>
      break;
 800515a:	bf00      	nop
 800515c:	e008      	b.n	8005170 <DMA_CheckFifoParam+0xe8>
      break;
 800515e:	bf00      	nop
 8005160:	e006      	b.n	8005170 <DMA_CheckFifoParam+0xe8>
      break;
 8005162:	bf00      	nop
 8005164:	e004      	b.n	8005170 <DMA_CheckFifoParam+0xe8>
      break;
 8005166:	bf00      	nop
 8005168:	e002      	b.n	8005170 <DMA_CheckFifoParam+0xe8>
      break;   
 800516a:	bf00      	nop
 800516c:	e000      	b.n	8005170 <DMA_CheckFifoParam+0xe8>
      break;
 800516e:	bf00      	nop
    }
  } 
  
  return status; 
 8005170:	7bfb      	ldrb	r3, [r7, #15]
}
 8005172:	4618      	mov	r0, r3
 8005174:	3714      	adds	r7, #20
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr
 800517e:	bf00      	nop

08005180 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005180:	b480      	push	{r7}
 8005182:	b089      	sub	sp, #36	; 0x24
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800518a:	2300      	movs	r3, #0
 800518c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800518e:	2300      	movs	r3, #0
 8005190:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005192:	2300      	movs	r3, #0
 8005194:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005196:	2300      	movs	r3, #0
 8005198:	61fb      	str	r3, [r7, #28]
 800519a:	e165      	b.n	8005468 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800519c:	2201      	movs	r2, #1
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	fa02 f303 	lsl.w	r3, r2, r3
 80051a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	697a      	ldr	r2, [r7, #20]
 80051ac:	4013      	ands	r3, r2
 80051ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	f040 8154 	bne.w	8005462 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	f003 0303 	and.w	r3, r3, #3
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d005      	beq.n	80051d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d130      	bne.n	8005234 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	005b      	lsls	r3, r3, #1
 80051dc:	2203      	movs	r2, #3
 80051de:	fa02 f303 	lsl.w	r3, r2, r3
 80051e2:	43db      	mvns	r3, r3
 80051e4:	69ba      	ldr	r2, [r7, #24]
 80051e6:	4013      	ands	r3, r2
 80051e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	68da      	ldr	r2, [r3, #12]
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	005b      	lsls	r3, r3, #1
 80051f2:	fa02 f303 	lsl.w	r3, r2, r3
 80051f6:	69ba      	ldr	r2, [r7, #24]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	69ba      	ldr	r2, [r7, #24]
 8005200:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005208:	2201      	movs	r2, #1
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	fa02 f303 	lsl.w	r3, r2, r3
 8005210:	43db      	mvns	r3, r3
 8005212:	69ba      	ldr	r2, [r7, #24]
 8005214:	4013      	ands	r3, r2
 8005216:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	091b      	lsrs	r3, r3, #4
 800521e:	f003 0201 	and.w	r2, r3, #1
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	fa02 f303 	lsl.w	r3, r2, r3
 8005228:	69ba      	ldr	r2, [r7, #24]
 800522a:	4313      	orrs	r3, r2
 800522c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	69ba      	ldr	r2, [r7, #24]
 8005232:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	f003 0303 	and.w	r3, r3, #3
 800523c:	2b03      	cmp	r3, #3
 800523e:	d017      	beq.n	8005270 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	005b      	lsls	r3, r3, #1
 800524a:	2203      	movs	r2, #3
 800524c:	fa02 f303 	lsl.w	r3, r2, r3
 8005250:	43db      	mvns	r3, r3
 8005252:	69ba      	ldr	r2, [r7, #24]
 8005254:	4013      	ands	r3, r2
 8005256:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	689a      	ldr	r2, [r3, #8]
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	005b      	lsls	r3, r3, #1
 8005260:	fa02 f303 	lsl.w	r3, r2, r3
 8005264:	69ba      	ldr	r2, [r7, #24]
 8005266:	4313      	orrs	r3, r2
 8005268:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	69ba      	ldr	r2, [r7, #24]
 800526e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	f003 0303 	and.w	r3, r3, #3
 8005278:	2b02      	cmp	r3, #2
 800527a:	d123      	bne.n	80052c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	08da      	lsrs	r2, r3, #3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	3208      	adds	r2, #8
 8005284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005288:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	f003 0307 	and.w	r3, r3, #7
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	220f      	movs	r2, #15
 8005294:	fa02 f303 	lsl.w	r3, r2, r3
 8005298:	43db      	mvns	r3, r3
 800529a:	69ba      	ldr	r2, [r7, #24]
 800529c:	4013      	ands	r3, r2
 800529e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	691a      	ldr	r2, [r3, #16]
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	f003 0307 	and.w	r3, r3, #7
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	fa02 f303 	lsl.w	r3, r2, r3
 80052b0:	69ba      	ldr	r2, [r7, #24]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	08da      	lsrs	r2, r3, #3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	3208      	adds	r2, #8
 80052be:	69b9      	ldr	r1, [r7, #24]
 80052c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	005b      	lsls	r3, r3, #1
 80052ce:	2203      	movs	r2, #3
 80052d0:	fa02 f303 	lsl.w	r3, r2, r3
 80052d4:	43db      	mvns	r3, r3
 80052d6:	69ba      	ldr	r2, [r7, #24]
 80052d8:	4013      	ands	r3, r2
 80052da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	f003 0203 	and.w	r2, r3, #3
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	005b      	lsls	r3, r3, #1
 80052e8:	fa02 f303 	lsl.w	r3, r2, r3
 80052ec:	69ba      	ldr	r2, [r7, #24]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	69ba      	ldr	r2, [r7, #24]
 80052f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005300:	2b00      	cmp	r3, #0
 8005302:	f000 80ae 	beq.w	8005462 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005306:	2300      	movs	r3, #0
 8005308:	60fb      	str	r3, [r7, #12]
 800530a:	4b5d      	ldr	r3, [pc, #372]	; (8005480 <HAL_GPIO_Init+0x300>)
 800530c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800530e:	4a5c      	ldr	r2, [pc, #368]	; (8005480 <HAL_GPIO_Init+0x300>)
 8005310:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005314:	6453      	str	r3, [r2, #68]	; 0x44
 8005316:	4b5a      	ldr	r3, [pc, #360]	; (8005480 <HAL_GPIO_Init+0x300>)
 8005318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800531a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800531e:	60fb      	str	r3, [r7, #12]
 8005320:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005322:	4a58      	ldr	r2, [pc, #352]	; (8005484 <HAL_GPIO_Init+0x304>)
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	089b      	lsrs	r3, r3, #2
 8005328:	3302      	adds	r3, #2
 800532a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800532e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	f003 0303 	and.w	r3, r3, #3
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	220f      	movs	r2, #15
 800533a:	fa02 f303 	lsl.w	r3, r2, r3
 800533e:	43db      	mvns	r3, r3
 8005340:	69ba      	ldr	r2, [r7, #24]
 8005342:	4013      	ands	r3, r2
 8005344:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a4f      	ldr	r2, [pc, #316]	; (8005488 <HAL_GPIO_Init+0x308>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d025      	beq.n	800539a <HAL_GPIO_Init+0x21a>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a4e      	ldr	r2, [pc, #312]	; (800548c <HAL_GPIO_Init+0x30c>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d01f      	beq.n	8005396 <HAL_GPIO_Init+0x216>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a4d      	ldr	r2, [pc, #308]	; (8005490 <HAL_GPIO_Init+0x310>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d019      	beq.n	8005392 <HAL_GPIO_Init+0x212>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a4c      	ldr	r2, [pc, #304]	; (8005494 <HAL_GPIO_Init+0x314>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d013      	beq.n	800538e <HAL_GPIO_Init+0x20e>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a4b      	ldr	r2, [pc, #300]	; (8005498 <HAL_GPIO_Init+0x318>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d00d      	beq.n	800538a <HAL_GPIO_Init+0x20a>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a4a      	ldr	r2, [pc, #296]	; (800549c <HAL_GPIO_Init+0x31c>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d007      	beq.n	8005386 <HAL_GPIO_Init+0x206>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a49      	ldr	r2, [pc, #292]	; (80054a0 <HAL_GPIO_Init+0x320>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d101      	bne.n	8005382 <HAL_GPIO_Init+0x202>
 800537e:	2306      	movs	r3, #6
 8005380:	e00c      	b.n	800539c <HAL_GPIO_Init+0x21c>
 8005382:	2307      	movs	r3, #7
 8005384:	e00a      	b.n	800539c <HAL_GPIO_Init+0x21c>
 8005386:	2305      	movs	r3, #5
 8005388:	e008      	b.n	800539c <HAL_GPIO_Init+0x21c>
 800538a:	2304      	movs	r3, #4
 800538c:	e006      	b.n	800539c <HAL_GPIO_Init+0x21c>
 800538e:	2303      	movs	r3, #3
 8005390:	e004      	b.n	800539c <HAL_GPIO_Init+0x21c>
 8005392:	2302      	movs	r3, #2
 8005394:	e002      	b.n	800539c <HAL_GPIO_Init+0x21c>
 8005396:	2301      	movs	r3, #1
 8005398:	e000      	b.n	800539c <HAL_GPIO_Init+0x21c>
 800539a:	2300      	movs	r3, #0
 800539c:	69fa      	ldr	r2, [r7, #28]
 800539e:	f002 0203 	and.w	r2, r2, #3
 80053a2:	0092      	lsls	r2, r2, #2
 80053a4:	4093      	lsls	r3, r2
 80053a6:	69ba      	ldr	r2, [r7, #24]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80053ac:	4935      	ldr	r1, [pc, #212]	; (8005484 <HAL_GPIO_Init+0x304>)
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	089b      	lsrs	r3, r3, #2
 80053b2:	3302      	adds	r3, #2
 80053b4:	69ba      	ldr	r2, [r7, #24]
 80053b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80053ba:	4b3a      	ldr	r3, [pc, #232]	; (80054a4 <HAL_GPIO_Init+0x324>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	43db      	mvns	r3, r3
 80053c4:	69ba      	ldr	r2, [r7, #24]
 80053c6:	4013      	ands	r3, r2
 80053c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d003      	beq.n	80053de <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80053d6:	69ba      	ldr	r2, [r7, #24]
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	4313      	orrs	r3, r2
 80053dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80053de:	4a31      	ldr	r2, [pc, #196]	; (80054a4 <HAL_GPIO_Init+0x324>)
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80053e4:	4b2f      	ldr	r3, [pc, #188]	; (80054a4 <HAL_GPIO_Init+0x324>)
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	43db      	mvns	r3, r3
 80053ee:	69ba      	ldr	r2, [r7, #24]
 80053f0:	4013      	ands	r3, r2
 80053f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d003      	beq.n	8005408 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005400:	69ba      	ldr	r2, [r7, #24]
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	4313      	orrs	r3, r2
 8005406:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005408:	4a26      	ldr	r2, [pc, #152]	; (80054a4 <HAL_GPIO_Init+0x324>)
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800540e:	4b25      	ldr	r3, [pc, #148]	; (80054a4 <HAL_GPIO_Init+0x324>)
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	43db      	mvns	r3, r3
 8005418:	69ba      	ldr	r2, [r7, #24]
 800541a:	4013      	ands	r3, r2
 800541c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d003      	beq.n	8005432 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800542a:	69ba      	ldr	r2, [r7, #24]
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	4313      	orrs	r3, r2
 8005430:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005432:	4a1c      	ldr	r2, [pc, #112]	; (80054a4 <HAL_GPIO_Init+0x324>)
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005438:	4b1a      	ldr	r3, [pc, #104]	; (80054a4 <HAL_GPIO_Init+0x324>)
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	43db      	mvns	r3, r3
 8005442:	69ba      	ldr	r2, [r7, #24]
 8005444:	4013      	ands	r3, r2
 8005446:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005450:	2b00      	cmp	r3, #0
 8005452:	d003      	beq.n	800545c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005454:	69ba      	ldr	r2, [r7, #24]
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	4313      	orrs	r3, r2
 800545a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800545c:	4a11      	ldr	r2, [pc, #68]	; (80054a4 <HAL_GPIO_Init+0x324>)
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	3301      	adds	r3, #1
 8005466:	61fb      	str	r3, [r7, #28]
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	2b0f      	cmp	r3, #15
 800546c:	f67f ae96 	bls.w	800519c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005470:	bf00      	nop
 8005472:	bf00      	nop
 8005474:	3724      	adds	r7, #36	; 0x24
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	40023800 	.word	0x40023800
 8005484:	40013800 	.word	0x40013800
 8005488:	40020000 	.word	0x40020000
 800548c:	40020400 	.word	0x40020400
 8005490:	40020800 	.word	0x40020800
 8005494:	40020c00 	.word	0x40020c00
 8005498:	40021000 	.word	0x40021000
 800549c:	40021400 	.word	0x40021400
 80054a0:	40021800 	.word	0x40021800
 80054a4:	40013c00 	.word	0x40013c00

080054a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	460b      	mov	r3, r1
 80054b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	691a      	ldr	r2, [r3, #16]
 80054b8:	887b      	ldrh	r3, [r7, #2]
 80054ba:	4013      	ands	r3, r2
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d002      	beq.n	80054c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80054c0:	2301      	movs	r3, #1
 80054c2:	73fb      	strb	r3, [r7, #15]
 80054c4:	e001      	b.n	80054ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80054c6:	2300      	movs	r3, #0
 80054c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80054ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3714      	adds	r7, #20
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	460b      	mov	r3, r1
 80054e2:	807b      	strh	r3, [r7, #2]
 80054e4:	4613      	mov	r3, r2
 80054e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80054e8:	787b      	ldrb	r3, [r7, #1]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d003      	beq.n	80054f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80054ee:	887a      	ldrh	r2, [r7, #2]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80054f4:	e003      	b.n	80054fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80054f6:	887b      	ldrh	r3, [r7, #2]
 80054f8:	041a      	lsls	r2, r3, #16
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	619a      	str	r2, [r3, #24]
}
 80054fe:	bf00      	nop
 8005500:	370c      	adds	r7, #12
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr

0800550a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800550a:	b480      	push	{r7}
 800550c:	b085      	sub	sp, #20
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
 8005512:	460b      	mov	r3, r1
 8005514:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	695b      	ldr	r3, [r3, #20]
 800551a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800551c:	887a      	ldrh	r2, [r7, #2]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	4013      	ands	r3, r2
 8005522:	041a      	lsls	r2, r3, #16
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	43d9      	mvns	r1, r3
 8005528:	887b      	ldrh	r3, [r7, #2]
 800552a:	400b      	ands	r3, r1
 800552c:	431a      	orrs	r2, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	619a      	str	r2, [r3, #24]
}
 8005532:	bf00      	nop
 8005534:	3714      	adds	r7, #20
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
	...

08005540 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d101      	bne.n	8005552 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e12b      	b.n	80057aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005558:	b2db      	uxtb	r3, r3
 800555a:	2b00      	cmp	r3, #0
 800555c:	d106      	bne.n	800556c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f7fe f922 	bl	80037b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2224      	movs	r2, #36	; 0x24
 8005570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f022 0201 	bic.w	r2, r2, #1
 8005582:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005592:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80055a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80055a4:	f002 fd24 	bl	8007ff0 <HAL_RCC_GetPCLK1Freq>
 80055a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	4a81      	ldr	r2, [pc, #516]	; (80057b4 <HAL_I2C_Init+0x274>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d807      	bhi.n	80055c4 <HAL_I2C_Init+0x84>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	4a80      	ldr	r2, [pc, #512]	; (80057b8 <HAL_I2C_Init+0x278>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	bf94      	ite	ls
 80055bc:	2301      	movls	r3, #1
 80055be:	2300      	movhi	r3, #0
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	e006      	b.n	80055d2 <HAL_I2C_Init+0x92>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	4a7d      	ldr	r2, [pc, #500]	; (80057bc <HAL_I2C_Init+0x27c>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	bf94      	ite	ls
 80055cc:	2301      	movls	r3, #1
 80055ce:	2300      	movhi	r3, #0
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d001      	beq.n	80055da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e0e7      	b.n	80057aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	4a78      	ldr	r2, [pc, #480]	; (80057c0 <HAL_I2C_Init+0x280>)
 80055de:	fba2 2303 	umull	r2, r3, r2, r3
 80055e2:	0c9b      	lsrs	r3, r3, #18
 80055e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68ba      	ldr	r2, [r7, #8]
 80055f6:	430a      	orrs	r2, r1
 80055f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	6a1b      	ldr	r3, [r3, #32]
 8005600:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	4a6a      	ldr	r2, [pc, #424]	; (80057b4 <HAL_I2C_Init+0x274>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d802      	bhi.n	8005614 <HAL_I2C_Init+0xd4>
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	3301      	adds	r3, #1
 8005612:	e009      	b.n	8005628 <HAL_I2C_Init+0xe8>
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800561a:	fb02 f303 	mul.w	r3, r2, r3
 800561e:	4a69      	ldr	r2, [pc, #420]	; (80057c4 <HAL_I2C_Init+0x284>)
 8005620:	fba2 2303 	umull	r2, r3, r2, r3
 8005624:	099b      	lsrs	r3, r3, #6
 8005626:	3301      	adds	r3, #1
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	6812      	ldr	r2, [r2, #0]
 800562c:	430b      	orrs	r3, r1
 800562e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	69db      	ldr	r3, [r3, #28]
 8005636:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800563a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	495c      	ldr	r1, [pc, #368]	; (80057b4 <HAL_I2C_Init+0x274>)
 8005644:	428b      	cmp	r3, r1
 8005646:	d819      	bhi.n	800567c <HAL_I2C_Init+0x13c>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	1e59      	subs	r1, r3, #1
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	005b      	lsls	r3, r3, #1
 8005652:	fbb1 f3f3 	udiv	r3, r1, r3
 8005656:	1c59      	adds	r1, r3, #1
 8005658:	f640 73fc 	movw	r3, #4092	; 0xffc
 800565c:	400b      	ands	r3, r1
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00a      	beq.n	8005678 <HAL_I2C_Init+0x138>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	1e59      	subs	r1, r3, #1
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	005b      	lsls	r3, r3, #1
 800566c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005670:	3301      	adds	r3, #1
 8005672:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005676:	e051      	b.n	800571c <HAL_I2C_Init+0x1dc>
 8005678:	2304      	movs	r3, #4
 800567a:	e04f      	b.n	800571c <HAL_I2C_Init+0x1dc>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d111      	bne.n	80056a8 <HAL_I2C_Init+0x168>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	1e58      	subs	r0, r3, #1
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6859      	ldr	r1, [r3, #4]
 800568c:	460b      	mov	r3, r1
 800568e:	005b      	lsls	r3, r3, #1
 8005690:	440b      	add	r3, r1
 8005692:	fbb0 f3f3 	udiv	r3, r0, r3
 8005696:	3301      	adds	r3, #1
 8005698:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800569c:	2b00      	cmp	r3, #0
 800569e:	bf0c      	ite	eq
 80056a0:	2301      	moveq	r3, #1
 80056a2:	2300      	movne	r3, #0
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	e012      	b.n	80056ce <HAL_I2C_Init+0x18e>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	1e58      	subs	r0, r3, #1
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6859      	ldr	r1, [r3, #4]
 80056b0:	460b      	mov	r3, r1
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	440b      	add	r3, r1
 80056b6:	0099      	lsls	r1, r3, #2
 80056b8:	440b      	add	r3, r1
 80056ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80056be:	3301      	adds	r3, #1
 80056c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	bf0c      	ite	eq
 80056c8:	2301      	moveq	r3, #1
 80056ca:	2300      	movne	r3, #0
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d001      	beq.n	80056d6 <HAL_I2C_Init+0x196>
 80056d2:	2301      	movs	r3, #1
 80056d4:	e022      	b.n	800571c <HAL_I2C_Init+0x1dc>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d10e      	bne.n	80056fc <HAL_I2C_Init+0x1bc>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	1e58      	subs	r0, r3, #1
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6859      	ldr	r1, [r3, #4]
 80056e6:	460b      	mov	r3, r1
 80056e8:	005b      	lsls	r3, r3, #1
 80056ea:	440b      	add	r3, r1
 80056ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80056f0:	3301      	adds	r3, #1
 80056f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056fa:	e00f      	b.n	800571c <HAL_I2C_Init+0x1dc>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	1e58      	subs	r0, r3, #1
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6859      	ldr	r1, [r3, #4]
 8005704:	460b      	mov	r3, r1
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	440b      	add	r3, r1
 800570a:	0099      	lsls	r1, r3, #2
 800570c:	440b      	add	r3, r1
 800570e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005712:	3301      	adds	r3, #1
 8005714:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005718:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800571c:	6879      	ldr	r1, [r7, #4]
 800571e:	6809      	ldr	r1, [r1, #0]
 8005720:	4313      	orrs	r3, r2
 8005722:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	69da      	ldr	r2, [r3, #28]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a1b      	ldr	r3, [r3, #32]
 8005736:	431a      	orrs	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	430a      	orrs	r2, r1
 800573e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800574a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	6911      	ldr	r1, [r2, #16]
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	68d2      	ldr	r2, [r2, #12]
 8005756:	4311      	orrs	r1, r2
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	6812      	ldr	r2, [r2, #0]
 800575c:	430b      	orrs	r3, r1
 800575e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	695a      	ldr	r2, [r3, #20]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	699b      	ldr	r3, [r3, #24]
 8005772:	431a      	orrs	r2, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	430a      	orrs	r2, r1
 800577a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f042 0201 	orr.w	r2, r2, #1
 800578a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2220      	movs	r2, #32
 8005796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3710      	adds	r7, #16
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	000186a0 	.word	0x000186a0
 80057b8:	001e847f 	.word	0x001e847f
 80057bc:	003d08ff 	.word	0x003d08ff
 80057c0:	431bde83 	.word	0x431bde83
 80057c4:	10624dd3 	.word	0x10624dd3

080057c8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b088      	sub	sp, #32
 80057cc:	af02      	add	r7, sp, #8
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	607a      	str	r2, [r7, #4]
 80057d2:	461a      	mov	r2, r3
 80057d4:	460b      	mov	r3, r1
 80057d6:	817b      	strh	r3, [r7, #10]
 80057d8:	4613      	mov	r3, r2
 80057da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80057dc:	f7fe ff92 	bl	8004704 <HAL_GetTick>
 80057e0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	2b20      	cmp	r3, #32
 80057ec:	f040 80e0 	bne.w	80059b0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	9300      	str	r3, [sp, #0]
 80057f4:	2319      	movs	r3, #25
 80057f6:	2201      	movs	r2, #1
 80057f8:	4970      	ldr	r1, [pc, #448]	; (80059bc <HAL_I2C_Master_Transmit+0x1f4>)
 80057fa:	68f8      	ldr	r0, [r7, #12]
 80057fc:	f002 f8dc 	bl	80079b8 <I2C_WaitOnFlagUntilTimeout>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d001      	beq.n	800580a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005806:	2302      	movs	r3, #2
 8005808:	e0d3      	b.n	80059b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005810:	2b01      	cmp	r3, #1
 8005812:	d101      	bne.n	8005818 <HAL_I2C_Master_Transmit+0x50>
 8005814:	2302      	movs	r3, #2
 8005816:	e0cc      	b.n	80059b2 <HAL_I2C_Master_Transmit+0x1ea>
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 0301 	and.w	r3, r3, #1
 800582a:	2b01      	cmp	r3, #1
 800582c:	d007      	beq.n	800583e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f042 0201 	orr.w	r2, r2, #1
 800583c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800584c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2221      	movs	r2, #33	; 0x21
 8005852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2210      	movs	r2, #16
 800585a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	893a      	ldrh	r2, [r7, #8]
 800586e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005874:	b29a      	uxth	r2, r3
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	4a50      	ldr	r2, [pc, #320]	; (80059c0 <HAL_I2C_Master_Transmit+0x1f8>)
 800587e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005880:	8979      	ldrh	r1, [r7, #10]
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	6a3a      	ldr	r2, [r7, #32]
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	f001 fe9e 	bl	80075c8 <I2C_MasterRequestWrite>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d001      	beq.n	8005896 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e08d      	b.n	80059b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005896:	2300      	movs	r3, #0
 8005898:	613b      	str	r3, [r7, #16]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	695b      	ldr	r3, [r3, #20]
 80058a0:	613b      	str	r3, [r7, #16]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	699b      	ldr	r3, [r3, #24]
 80058a8:	613b      	str	r3, [r7, #16]
 80058aa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80058ac:	e066      	b.n	800597c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	6a39      	ldr	r1, [r7, #32]
 80058b2:	68f8      	ldr	r0, [r7, #12]
 80058b4:	f002 f956 	bl	8007b64 <I2C_WaitOnTXEFlagUntilTimeout>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d00d      	beq.n	80058da <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c2:	2b04      	cmp	r3, #4
 80058c4:	d107      	bne.n	80058d6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e06b      	b.n	80059b2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058de:	781a      	ldrb	r2, [r3, #0]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ea:	1c5a      	adds	r2, r3, #1
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	3b01      	subs	r3, #1
 80058f8:	b29a      	uxth	r2, r3
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005902:	3b01      	subs	r3, #1
 8005904:	b29a      	uxth	r2, r3
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	695b      	ldr	r3, [r3, #20]
 8005910:	f003 0304 	and.w	r3, r3, #4
 8005914:	2b04      	cmp	r3, #4
 8005916:	d11b      	bne.n	8005950 <HAL_I2C_Master_Transmit+0x188>
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800591c:	2b00      	cmp	r3, #0
 800591e:	d017      	beq.n	8005950 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005924:	781a      	ldrb	r2, [r3, #0]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005930:	1c5a      	adds	r2, r3, #1
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800593a:	b29b      	uxth	r3, r3
 800593c:	3b01      	subs	r3, #1
 800593e:	b29a      	uxth	r2, r3
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005948:	3b01      	subs	r3, #1
 800594a:	b29a      	uxth	r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005950:	697a      	ldr	r2, [r7, #20]
 8005952:	6a39      	ldr	r1, [r7, #32]
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	f002 f946 	bl	8007be6 <I2C_WaitOnBTFFlagUntilTimeout>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d00d      	beq.n	800597c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005964:	2b04      	cmp	r3, #4
 8005966:	d107      	bne.n	8005978 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005976:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e01a      	b.n	80059b2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005980:	2b00      	cmp	r3, #0
 8005982:	d194      	bne.n	80058ae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005992:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2220      	movs	r2, #32
 8005998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80059ac:	2300      	movs	r3, #0
 80059ae:	e000      	b.n	80059b2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80059b0:	2302      	movs	r3, #2
  }
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3718      	adds	r7, #24
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	00100002 	.word	0x00100002
 80059c0:	ffff0000 	.word	0xffff0000

080059c4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b08c      	sub	sp, #48	; 0x30
 80059c8:	af02      	add	r7, sp, #8
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	607a      	str	r2, [r7, #4]
 80059ce:	461a      	mov	r2, r3
 80059d0:	460b      	mov	r3, r1
 80059d2:	817b      	strh	r3, [r7, #10]
 80059d4:	4613      	mov	r3, r2
 80059d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80059d8:	f7fe fe94 	bl	8004704 <HAL_GetTick>
 80059dc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	2b20      	cmp	r3, #32
 80059e8:	f040 820b 	bne.w	8005e02 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80059ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ee:	9300      	str	r3, [sp, #0]
 80059f0:	2319      	movs	r3, #25
 80059f2:	2201      	movs	r2, #1
 80059f4:	497c      	ldr	r1, [pc, #496]	; (8005be8 <HAL_I2C_Master_Receive+0x224>)
 80059f6:	68f8      	ldr	r0, [r7, #12]
 80059f8:	f001 ffde 	bl	80079b8 <I2C_WaitOnFlagUntilTimeout>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d001      	beq.n	8005a06 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005a02:	2302      	movs	r3, #2
 8005a04:	e1fe      	b.n	8005e04 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d101      	bne.n	8005a14 <HAL_I2C_Master_Receive+0x50>
 8005a10:	2302      	movs	r3, #2
 8005a12:	e1f7      	b.n	8005e04 <HAL_I2C_Master_Receive+0x440>
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 0301 	and.w	r3, r3, #1
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d007      	beq.n	8005a3a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f042 0201 	orr.w	r2, r2, #1
 8005a38:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a48:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2222      	movs	r2, #34	; 0x22
 8005a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2210      	movs	r2, #16
 8005a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	893a      	ldrh	r2, [r7, #8]
 8005a6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a70:	b29a      	uxth	r2, r3
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	4a5c      	ldr	r2, [pc, #368]	; (8005bec <HAL_I2C_Master_Receive+0x228>)
 8005a7a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005a7c:	8979      	ldrh	r1, [r7, #10]
 8005a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a82:	68f8      	ldr	r0, [r7, #12]
 8005a84:	f001 fe22 	bl	80076cc <I2C_MasterRequestRead>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d001      	beq.n	8005a92 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e1b8      	b.n	8005e04 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d113      	bne.n	8005ac2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	623b      	str	r3, [r7, #32]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	695b      	ldr	r3, [r3, #20]
 8005aa4:	623b      	str	r3, [r7, #32]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	699b      	ldr	r3, [r3, #24]
 8005aac:	623b      	str	r3, [r7, #32]
 8005aae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005abe:	601a      	str	r2, [r3, #0]
 8005ac0:	e18c      	b.n	8005ddc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d11b      	bne.n	8005b02 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ad8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ada:	2300      	movs	r3, #0
 8005adc:	61fb      	str	r3, [r7, #28]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	695b      	ldr	r3, [r3, #20]
 8005ae4:	61fb      	str	r3, [r7, #28]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	61fb      	str	r3, [r7, #28]
 8005aee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005afe:	601a      	str	r2, [r3, #0]
 8005b00:	e16c      	b.n	8005ddc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d11b      	bne.n	8005b42 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b18:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	61bb      	str	r3, [r7, #24]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	695b      	ldr	r3, [r3, #20]
 8005b34:	61bb      	str	r3, [r7, #24]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	699b      	ldr	r3, [r3, #24]
 8005b3c:	61bb      	str	r3, [r7, #24]
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	e14c      	b.n	8005ddc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b50:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b52:	2300      	movs	r3, #0
 8005b54:	617b      	str	r3, [r7, #20]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	695b      	ldr	r3, [r3, #20]
 8005b5c:	617b      	str	r3, [r7, #20]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	699b      	ldr	r3, [r3, #24]
 8005b64:	617b      	str	r3, [r7, #20]
 8005b66:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005b68:	e138      	b.n	8005ddc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b6e:	2b03      	cmp	r3, #3
 8005b70:	f200 80f1 	bhi.w	8005d56 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d123      	bne.n	8005bc4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b80:	68f8      	ldr	r0, [r7, #12]
 8005b82:	f002 f8a3 	bl	8007ccc <I2C_WaitOnRXNEFlagUntilTimeout>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d001      	beq.n	8005b90 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e139      	b.n	8005e04 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	691a      	ldr	r2, [r3, #16]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9a:	b2d2      	uxtb	r2, r2
 8005b9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba2:	1c5a      	adds	r2, r3, #1
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bac:	3b01      	subs	r3, #1
 8005bae:	b29a      	uxth	r2, r3
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	b29a      	uxth	r2, r3
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005bc2:	e10b      	b.n	8005ddc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	d14e      	bne.n	8005c6a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bce:	9300      	str	r3, [sp, #0]
 8005bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	4906      	ldr	r1, [pc, #24]	; (8005bf0 <HAL_I2C_Master_Receive+0x22c>)
 8005bd6:	68f8      	ldr	r0, [r7, #12]
 8005bd8:	f001 feee 	bl	80079b8 <I2C_WaitOnFlagUntilTimeout>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d008      	beq.n	8005bf4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e10e      	b.n	8005e04 <HAL_I2C_Master_Receive+0x440>
 8005be6:	bf00      	nop
 8005be8:	00100002 	.word	0x00100002
 8005bec:	ffff0000 	.word	0xffff0000
 8005bf0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	691a      	ldr	r2, [r3, #16]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0e:	b2d2      	uxtb	r2, r2
 8005c10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c16:	1c5a      	adds	r2, r3, #1
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c20:	3b01      	subs	r3, #1
 8005c22:	b29a      	uxth	r2, r3
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	3b01      	subs	r3, #1
 8005c30:	b29a      	uxth	r2, r3
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	691a      	ldr	r2, [r3, #16]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c40:	b2d2      	uxtb	r2, r2
 8005c42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c48:	1c5a      	adds	r2, r3, #1
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c52:	3b01      	subs	r3, #1
 8005c54:	b29a      	uxth	r2, r3
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	3b01      	subs	r3, #1
 8005c62:	b29a      	uxth	r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005c68:	e0b8      	b.n	8005ddc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6c:	9300      	str	r3, [sp, #0]
 8005c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c70:	2200      	movs	r2, #0
 8005c72:	4966      	ldr	r1, [pc, #408]	; (8005e0c <HAL_I2C_Master_Receive+0x448>)
 8005c74:	68f8      	ldr	r0, [r7, #12]
 8005c76:	f001 fe9f 	bl	80079b8 <I2C_WaitOnFlagUntilTimeout>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d001      	beq.n	8005c84 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e0bf      	b.n	8005e04 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	691a      	ldr	r2, [r3, #16]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9e:	b2d2      	uxtb	r2, r2
 8005ca0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca6:	1c5a      	adds	r2, r3, #1
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cb0:	3b01      	subs	r3, #1
 8005cb2:	b29a      	uxth	r2, r3
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	b29a      	uxth	r2, r3
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc8:	9300      	str	r3, [sp, #0]
 8005cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ccc:	2200      	movs	r2, #0
 8005cce:	494f      	ldr	r1, [pc, #316]	; (8005e0c <HAL_I2C_Master_Receive+0x448>)
 8005cd0:	68f8      	ldr	r0, [r7, #12]
 8005cd2:	f001 fe71 	bl	80079b8 <I2C_WaitOnFlagUntilTimeout>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d001      	beq.n	8005ce0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e091      	b.n	8005e04 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	691a      	ldr	r2, [r3, #16]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfa:	b2d2      	uxtb	r2, r2
 8005cfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d02:	1c5a      	adds	r2, r3, #1
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d0c:	3b01      	subs	r3, #1
 8005d0e:	b29a      	uxth	r2, r3
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	b29a      	uxth	r2, r3
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	691a      	ldr	r2, [r3, #16]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2c:	b2d2      	uxtb	r2, r2
 8005d2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d34:	1c5a      	adds	r2, r3, #1
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d3e:	3b01      	subs	r3, #1
 8005d40:	b29a      	uxth	r2, r3
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	3b01      	subs	r3, #1
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005d54:	e042      	b.n	8005ddc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	f001 ffb6 	bl	8007ccc <I2C_WaitOnRXNEFlagUntilTimeout>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d001      	beq.n	8005d6a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e04c      	b.n	8005e04 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	691a      	ldr	r2, [r3, #16]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d74:	b2d2      	uxtb	r2, r2
 8005d76:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7c:	1c5a      	adds	r2, r3, #1
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d86:	3b01      	subs	r3, #1
 8005d88:	b29a      	uxth	r2, r3
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	3b01      	subs	r3, #1
 8005d96:	b29a      	uxth	r2, r3
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	695b      	ldr	r3, [r3, #20]
 8005da2:	f003 0304 	and.w	r3, r3, #4
 8005da6:	2b04      	cmp	r3, #4
 8005da8:	d118      	bne.n	8005ddc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	691a      	ldr	r2, [r3, #16]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db4:	b2d2      	uxtb	r2, r2
 8005db6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dbc:	1c5a      	adds	r2, r3, #1
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dc6:	3b01      	subs	r3, #1
 8005dc8:	b29a      	uxth	r2, r3
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	b29a      	uxth	r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	f47f aec2 	bne.w	8005b6a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2220      	movs	r2, #32
 8005dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	e000      	b.n	8005e04 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005e02:	2302      	movs	r3, #2
  }
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3728      	adds	r7, #40	; 0x28
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	00010004 	.word	0x00010004

08005e10 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b088      	sub	sp, #32
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e28:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e30:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e38:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005e3a:	7bfb      	ldrb	r3, [r7, #15]
 8005e3c:	2b10      	cmp	r3, #16
 8005e3e:	d003      	beq.n	8005e48 <HAL_I2C_EV_IRQHandler+0x38>
 8005e40:	7bfb      	ldrb	r3, [r7, #15]
 8005e42:	2b40      	cmp	r3, #64	; 0x40
 8005e44:	f040 80c1 	bne.w	8005fca <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	699b      	ldr	r3, [r3, #24]
 8005e4e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	695b      	ldr	r3, [r3, #20]
 8005e56:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	f003 0301 	and.w	r3, r3, #1
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d10d      	bne.n	8005e7e <HAL_I2C_EV_IRQHandler+0x6e>
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005e68:	d003      	beq.n	8005e72 <HAL_I2C_EV_IRQHandler+0x62>
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005e70:	d101      	bne.n	8005e76 <HAL_I2C_EV_IRQHandler+0x66>
 8005e72:	2301      	movs	r3, #1
 8005e74:	e000      	b.n	8005e78 <HAL_I2C_EV_IRQHandler+0x68>
 8005e76:	2300      	movs	r3, #0
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	f000 8132 	beq.w	80060e2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	f003 0301 	and.w	r3, r3, #1
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00c      	beq.n	8005ea2 <HAL_I2C_EV_IRQHandler+0x92>
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	0a5b      	lsrs	r3, r3, #9
 8005e8c:	f003 0301 	and.w	r3, r3, #1
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d006      	beq.n	8005ea2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f001 ff9e 	bl	8007dd6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 fd79 	bl	8006992 <I2C_Master_SB>
 8005ea0:	e092      	b.n	8005fc8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	08db      	lsrs	r3, r3, #3
 8005ea6:	f003 0301 	and.w	r3, r3, #1
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d009      	beq.n	8005ec2 <HAL_I2C_EV_IRQHandler+0xb2>
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	0a5b      	lsrs	r3, r3, #9
 8005eb2:	f003 0301 	and.w	r3, r3, #1
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d003      	beq.n	8005ec2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 fdef 	bl	8006a9e <I2C_Master_ADD10>
 8005ec0:	e082      	b.n	8005fc8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	085b      	lsrs	r3, r3, #1
 8005ec6:	f003 0301 	and.w	r3, r3, #1
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d009      	beq.n	8005ee2 <HAL_I2C_EV_IRQHandler+0xd2>
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	0a5b      	lsrs	r3, r3, #9
 8005ed2:	f003 0301 	and.w	r3, r3, #1
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d003      	beq.n	8005ee2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 fe09 	bl	8006af2 <I2C_Master_ADDR>
 8005ee0:	e072      	b.n	8005fc8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	089b      	lsrs	r3, r3, #2
 8005ee6:	f003 0301 	and.w	r3, r3, #1
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d03b      	beq.n	8005f66 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ef8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005efc:	f000 80f3 	beq.w	80060e6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	09db      	lsrs	r3, r3, #7
 8005f04:	f003 0301 	and.w	r3, r3, #1
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d00f      	beq.n	8005f2c <HAL_I2C_EV_IRQHandler+0x11c>
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	0a9b      	lsrs	r3, r3, #10
 8005f10:	f003 0301 	and.w	r3, r3, #1
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d009      	beq.n	8005f2c <HAL_I2C_EV_IRQHandler+0x11c>
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	089b      	lsrs	r3, r3, #2
 8005f1c:	f003 0301 	and.w	r3, r3, #1
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d103      	bne.n	8005f2c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 f9f3 	bl	8006310 <I2C_MasterTransmit_TXE>
 8005f2a:	e04d      	b.n	8005fc8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	089b      	lsrs	r3, r3, #2
 8005f30:	f003 0301 	and.w	r3, r3, #1
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	f000 80d6 	beq.w	80060e6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	0a5b      	lsrs	r3, r3, #9
 8005f3e:	f003 0301 	and.w	r3, r3, #1
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	f000 80cf 	beq.w	80060e6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005f48:	7bbb      	ldrb	r3, [r7, #14]
 8005f4a:	2b21      	cmp	r3, #33	; 0x21
 8005f4c:	d103      	bne.n	8005f56 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 fa7a 	bl	8006448 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005f54:	e0c7      	b.n	80060e6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005f56:	7bfb      	ldrb	r3, [r7, #15]
 8005f58:	2b40      	cmp	r3, #64	; 0x40
 8005f5a:	f040 80c4 	bne.w	80060e6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 fae8 	bl	8006534 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005f64:	e0bf      	b.n	80060e6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f74:	f000 80b7 	beq.w	80060e6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	099b      	lsrs	r3, r3, #6
 8005f7c:	f003 0301 	and.w	r3, r3, #1
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d00f      	beq.n	8005fa4 <HAL_I2C_EV_IRQHandler+0x194>
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	0a9b      	lsrs	r3, r3, #10
 8005f88:	f003 0301 	and.w	r3, r3, #1
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d009      	beq.n	8005fa4 <HAL_I2C_EV_IRQHandler+0x194>
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	089b      	lsrs	r3, r3, #2
 8005f94:	f003 0301 	and.w	r3, r3, #1
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d103      	bne.n	8005fa4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 fb5d 	bl	800665c <I2C_MasterReceive_RXNE>
 8005fa2:	e011      	b.n	8005fc8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	089b      	lsrs	r3, r3, #2
 8005fa8:	f003 0301 	and.w	r3, r3, #1
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	f000 809a 	beq.w	80060e6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	0a5b      	lsrs	r3, r3, #9
 8005fb6:	f003 0301 	and.w	r3, r3, #1
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	f000 8093 	beq.w	80060e6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f000 fbfc 	bl	80067be <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005fc6:	e08e      	b.n	80060e6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005fc8:	e08d      	b.n	80060e6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d004      	beq.n	8005fdc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	695b      	ldr	r3, [r3, #20]
 8005fd8:	61fb      	str	r3, [r7, #28]
 8005fda:	e007      	b.n	8005fec <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	699b      	ldr	r3, [r3, #24]
 8005fe2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	695b      	ldr	r3, [r3, #20]
 8005fea:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	085b      	lsrs	r3, r3, #1
 8005ff0:	f003 0301 	and.w	r3, r3, #1
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d012      	beq.n	800601e <HAL_I2C_EV_IRQHandler+0x20e>
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	0a5b      	lsrs	r3, r3, #9
 8005ffc:	f003 0301 	and.w	r3, r3, #1
 8006000:	2b00      	cmp	r3, #0
 8006002:	d00c      	beq.n	800601e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006008:	2b00      	cmp	r3, #0
 800600a:	d003      	beq.n	8006014 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	699b      	ldr	r3, [r3, #24]
 8006012:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006014:	69b9      	ldr	r1, [r7, #24]
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 ffba 	bl	8006f90 <I2C_Slave_ADDR>
 800601c:	e066      	b.n	80060ec <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	091b      	lsrs	r3, r3, #4
 8006022:	f003 0301 	and.w	r3, r3, #1
 8006026:	2b00      	cmp	r3, #0
 8006028:	d009      	beq.n	800603e <HAL_I2C_EV_IRQHandler+0x22e>
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	0a5b      	lsrs	r3, r3, #9
 800602e:	f003 0301 	and.w	r3, r3, #1
 8006032:	2b00      	cmp	r3, #0
 8006034:	d003      	beq.n	800603e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 fff4 	bl	8007024 <I2C_Slave_STOPF>
 800603c:	e056      	b.n	80060ec <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800603e:	7bbb      	ldrb	r3, [r7, #14]
 8006040:	2b21      	cmp	r3, #33	; 0x21
 8006042:	d002      	beq.n	800604a <HAL_I2C_EV_IRQHandler+0x23a>
 8006044:	7bbb      	ldrb	r3, [r7, #14]
 8006046:	2b29      	cmp	r3, #41	; 0x29
 8006048:	d125      	bne.n	8006096 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	09db      	lsrs	r3, r3, #7
 800604e:	f003 0301 	and.w	r3, r3, #1
 8006052:	2b00      	cmp	r3, #0
 8006054:	d00f      	beq.n	8006076 <HAL_I2C_EV_IRQHandler+0x266>
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	0a9b      	lsrs	r3, r3, #10
 800605a:	f003 0301 	and.w	r3, r3, #1
 800605e:	2b00      	cmp	r3, #0
 8006060:	d009      	beq.n	8006076 <HAL_I2C_EV_IRQHandler+0x266>
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	089b      	lsrs	r3, r3, #2
 8006066:	f003 0301 	and.w	r3, r3, #1
 800606a:	2b00      	cmp	r3, #0
 800606c:	d103      	bne.n	8006076 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 fed0 	bl	8006e14 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006074:	e039      	b.n	80060ea <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	089b      	lsrs	r3, r3, #2
 800607a:	f003 0301 	and.w	r3, r3, #1
 800607e:	2b00      	cmp	r3, #0
 8006080:	d033      	beq.n	80060ea <HAL_I2C_EV_IRQHandler+0x2da>
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	0a5b      	lsrs	r3, r3, #9
 8006086:	f003 0301 	and.w	r3, r3, #1
 800608a:	2b00      	cmp	r3, #0
 800608c:	d02d      	beq.n	80060ea <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 fefd 	bl	8006e8e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006094:	e029      	b.n	80060ea <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	099b      	lsrs	r3, r3, #6
 800609a:	f003 0301 	and.w	r3, r3, #1
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d00f      	beq.n	80060c2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	0a9b      	lsrs	r3, r3, #10
 80060a6:	f003 0301 	and.w	r3, r3, #1
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d009      	beq.n	80060c2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	089b      	lsrs	r3, r3, #2
 80060b2:	f003 0301 	and.w	r3, r3, #1
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d103      	bne.n	80060c2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 ff08 	bl	8006ed0 <I2C_SlaveReceive_RXNE>
 80060c0:	e014      	b.n	80060ec <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	089b      	lsrs	r3, r3, #2
 80060c6:	f003 0301 	and.w	r3, r3, #1
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d00e      	beq.n	80060ec <HAL_I2C_EV_IRQHandler+0x2dc>
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	0a5b      	lsrs	r3, r3, #9
 80060d2:	f003 0301 	and.w	r3, r3, #1
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d008      	beq.n	80060ec <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 ff36 	bl	8006f4c <I2C_SlaveReceive_BTF>
 80060e0:	e004      	b.n	80060ec <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80060e2:	bf00      	nop
 80060e4:	e002      	b.n	80060ec <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80060e6:	bf00      	nop
 80060e8:	e000      	b.n	80060ec <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80060ea:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80060ec:	3720      	adds	r7, #32
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}

080060f2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80060f2:	b580      	push	{r7, lr}
 80060f4:	b08a      	sub	sp, #40	; 0x28
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	695b      	ldr	r3, [r3, #20]
 8006100:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800610a:	2300      	movs	r3, #0
 800610c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006114:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006116:	6a3b      	ldr	r3, [r7, #32]
 8006118:	0a1b      	lsrs	r3, r3, #8
 800611a:	f003 0301 	and.w	r3, r3, #1
 800611e:	2b00      	cmp	r3, #0
 8006120:	d00e      	beq.n	8006140 <HAL_I2C_ER_IRQHandler+0x4e>
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	0a1b      	lsrs	r3, r3, #8
 8006126:	f003 0301 	and.w	r3, r3, #1
 800612a:	2b00      	cmp	r3, #0
 800612c:	d008      	beq.n	8006140 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800612e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006130:	f043 0301 	orr.w	r3, r3, #1
 8006134:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800613e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006140:	6a3b      	ldr	r3, [r7, #32]
 8006142:	0a5b      	lsrs	r3, r3, #9
 8006144:	f003 0301 	and.w	r3, r3, #1
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00e      	beq.n	800616a <HAL_I2C_ER_IRQHandler+0x78>
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	0a1b      	lsrs	r3, r3, #8
 8006150:	f003 0301 	and.w	r3, r3, #1
 8006154:	2b00      	cmp	r3, #0
 8006156:	d008      	beq.n	800616a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615a:	f043 0302 	orr.w	r3, r3, #2
 800615e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8006168:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800616a:	6a3b      	ldr	r3, [r7, #32]
 800616c:	0a9b      	lsrs	r3, r3, #10
 800616e:	f003 0301 	and.w	r3, r3, #1
 8006172:	2b00      	cmp	r3, #0
 8006174:	d03f      	beq.n	80061f6 <HAL_I2C_ER_IRQHandler+0x104>
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	0a1b      	lsrs	r3, r3, #8
 800617a:	f003 0301 	and.w	r3, r3, #1
 800617e:	2b00      	cmp	r3, #0
 8006180:	d039      	beq.n	80061f6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8006182:	7efb      	ldrb	r3, [r7, #27]
 8006184:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800618a:	b29b      	uxth	r3, r3
 800618c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006194:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800619a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800619c:	7ebb      	ldrb	r3, [r7, #26]
 800619e:	2b20      	cmp	r3, #32
 80061a0:	d112      	bne.n	80061c8 <HAL_I2C_ER_IRQHandler+0xd6>
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d10f      	bne.n	80061c8 <HAL_I2C_ER_IRQHandler+0xd6>
 80061a8:	7cfb      	ldrb	r3, [r7, #19]
 80061aa:	2b21      	cmp	r3, #33	; 0x21
 80061ac:	d008      	beq.n	80061c0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80061ae:	7cfb      	ldrb	r3, [r7, #19]
 80061b0:	2b29      	cmp	r3, #41	; 0x29
 80061b2:	d005      	beq.n	80061c0 <HAL_I2C_ER_IRQHandler+0xce>
 80061b4:	7cfb      	ldrb	r3, [r7, #19]
 80061b6:	2b28      	cmp	r3, #40	; 0x28
 80061b8:	d106      	bne.n	80061c8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2b21      	cmp	r3, #33	; 0x21
 80061be:	d103      	bne.n	80061c8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f001 f85f 	bl	8007284 <I2C_Slave_AF>
 80061c6:	e016      	b.n	80061f6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80061d0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80061d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d4:	f043 0304 	orr.w	r3, r3, #4
 80061d8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80061da:	7efb      	ldrb	r3, [r7, #27]
 80061dc:	2b10      	cmp	r3, #16
 80061de:	d002      	beq.n	80061e6 <HAL_I2C_ER_IRQHandler+0xf4>
 80061e0:	7efb      	ldrb	r3, [r7, #27]
 80061e2:	2b40      	cmp	r3, #64	; 0x40
 80061e4:	d107      	bne.n	80061f6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061f4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80061f6:	6a3b      	ldr	r3, [r7, #32]
 80061f8:	0adb      	lsrs	r3, r3, #11
 80061fa:	f003 0301 	and.w	r3, r3, #1
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d00e      	beq.n	8006220 <HAL_I2C_ER_IRQHandler+0x12e>
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	0a1b      	lsrs	r3, r3, #8
 8006206:	f003 0301 	and.w	r3, r3, #1
 800620a:	2b00      	cmp	r3, #0
 800620c:	d008      	beq.n	8006220 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800620e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006210:	f043 0308 	orr.w	r3, r3, #8
 8006214:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800621e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006222:	2b00      	cmp	r3, #0
 8006224:	d008      	beq.n	8006238 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800622a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622c:	431a      	orrs	r2, r3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f001 f896 	bl	8007364 <I2C_ITError>
  }
}
 8006238:	bf00      	nop
 800623a:	3728      	adds	r7, #40	; 0x28
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}

08006240 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800625c:	bf00      	nop
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006270:	bf00      	nop
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006284:	bf00      	nop
 8006286:	370c      	adds	r7, #12
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	460b      	mov	r3, r1
 800629a:	70fb      	strb	r3, [r7, #3]
 800629c:	4613      	mov	r3, r2
 800629e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80062a0:	bf00      	nop
 80062a2:	370c      	adds	r7, #12
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80062b4:	bf00      	nop
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80062c8:	bf00      	nop
 80062ca:	370c      	adds	r7, #12
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80062dc:	bf00      	nop
 80062de:	370c      	adds	r7, #12
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80062f0:	bf00      	nop
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006304:	bf00      	nop
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800631e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006326:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800632c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006332:	2b00      	cmp	r3, #0
 8006334:	d150      	bne.n	80063d8 <I2C_MasterTransmit_TXE+0xc8>
 8006336:	7bfb      	ldrb	r3, [r7, #15]
 8006338:	2b21      	cmp	r3, #33	; 0x21
 800633a:	d14d      	bne.n	80063d8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	2b08      	cmp	r3, #8
 8006340:	d01d      	beq.n	800637e <I2C_MasterTransmit_TXE+0x6e>
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	2b20      	cmp	r3, #32
 8006346:	d01a      	beq.n	800637e <I2C_MasterTransmit_TXE+0x6e>
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800634e:	d016      	beq.n	800637e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	685a      	ldr	r2, [r3, #4]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800635e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2211      	movs	r2, #17
 8006364:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2220      	movs	r2, #32
 8006372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f7ff ff62 	bl	8006240 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800637c:	e060      	b.n	8006440 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	685a      	ldr	r2, [r3, #4]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800638c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800639c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2220      	movs	r2, #32
 80063a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	2b40      	cmp	r3, #64	; 0x40
 80063b6:	d107      	bne.n	80063c8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f7ff ff7d 	bl	80062c0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80063c6:	e03b      	b.n	8006440 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f7ff ff35 	bl	8006240 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80063d6:	e033      	b.n	8006440 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80063d8:	7bfb      	ldrb	r3, [r7, #15]
 80063da:	2b21      	cmp	r3, #33	; 0x21
 80063dc:	d005      	beq.n	80063ea <I2C_MasterTransmit_TXE+0xda>
 80063de:	7bbb      	ldrb	r3, [r7, #14]
 80063e0:	2b40      	cmp	r3, #64	; 0x40
 80063e2:	d12d      	bne.n	8006440 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80063e4:	7bfb      	ldrb	r3, [r7, #15]
 80063e6:	2b22      	cmp	r3, #34	; 0x22
 80063e8:	d12a      	bne.n	8006440 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d108      	bne.n	8006406 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	685a      	ldr	r2, [r3, #4]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006402:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006404:	e01c      	b.n	8006440 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800640c:	b2db      	uxtb	r3, r3
 800640e:	2b40      	cmp	r3, #64	; 0x40
 8006410:	d103      	bne.n	800641a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 f88e 	bl	8006534 <I2C_MemoryTransmit_TXE_BTF>
}
 8006418:	e012      	b.n	8006440 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641e:	781a      	ldrb	r2, [r3, #0]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642a:	1c5a      	adds	r2, r3, #1
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006434:	b29b      	uxth	r3, r3
 8006436:	3b01      	subs	r3, #1
 8006438:	b29a      	uxth	r2, r3
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800643e:	e7ff      	b.n	8006440 <I2C_MasterTransmit_TXE+0x130>
 8006440:	bf00      	nop
 8006442:	3710      	adds	r7, #16
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}

08006448 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b084      	sub	sp, #16
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006454:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800645c:	b2db      	uxtb	r3, r3
 800645e:	2b21      	cmp	r3, #33	; 0x21
 8006460:	d164      	bne.n	800652c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006466:	b29b      	uxth	r3, r3
 8006468:	2b00      	cmp	r3, #0
 800646a:	d012      	beq.n	8006492 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006470:	781a      	ldrb	r2, [r3, #0]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647c:	1c5a      	adds	r2, r3, #1
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006486:	b29b      	uxth	r3, r3
 8006488:	3b01      	subs	r3, #1
 800648a:	b29a      	uxth	r2, r3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006490:	e04c      	b.n	800652c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2b08      	cmp	r3, #8
 8006496:	d01d      	beq.n	80064d4 <I2C_MasterTransmit_BTF+0x8c>
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2b20      	cmp	r3, #32
 800649c:	d01a      	beq.n	80064d4 <I2C_MasterTransmit_BTF+0x8c>
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80064a4:	d016      	beq.n	80064d4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	685a      	ldr	r2, [r3, #4]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80064b4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2211      	movs	r2, #17
 80064ba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2220      	movs	r2, #32
 80064c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f7ff feb7 	bl	8006240 <HAL_I2C_MasterTxCpltCallback>
}
 80064d2:	e02b      	b.n	800652c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	685a      	ldr	r2, [r3, #4]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80064e2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064f2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2220      	movs	r2, #32
 80064fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006508:	b2db      	uxtb	r3, r3
 800650a:	2b40      	cmp	r3, #64	; 0x40
 800650c:	d107      	bne.n	800651e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f7ff fed2 	bl	80062c0 <HAL_I2C_MemTxCpltCallback>
}
 800651c:	e006      	b.n	800652c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f7ff fe8a 	bl	8006240 <HAL_I2C_MasterTxCpltCallback>
}
 800652c:	bf00      	nop
 800652e:	3710      	adds	r7, #16
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}

08006534 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b084      	sub	sp, #16
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006542:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006548:	2b00      	cmp	r3, #0
 800654a:	d11d      	bne.n	8006588 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006550:	2b01      	cmp	r3, #1
 8006552:	d10b      	bne.n	800656c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006558:	b2da      	uxtb	r2, r3
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006564:	1c9a      	adds	r2, r3, #2
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800656a:	e073      	b.n	8006654 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006570:	b29b      	uxth	r3, r3
 8006572:	121b      	asrs	r3, r3, #8
 8006574:	b2da      	uxtb	r2, r3
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006580:	1c5a      	adds	r2, r3, #1
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006586:	e065      	b.n	8006654 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800658c:	2b01      	cmp	r3, #1
 800658e:	d10b      	bne.n	80065a8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006594:	b2da      	uxtb	r2, r3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065a0:	1c5a      	adds	r2, r3, #1
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80065a6:	e055      	b.n	8006654 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065ac:	2b02      	cmp	r3, #2
 80065ae:	d151      	bne.n	8006654 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80065b0:	7bfb      	ldrb	r3, [r7, #15]
 80065b2:	2b22      	cmp	r3, #34	; 0x22
 80065b4:	d10d      	bne.n	80065d2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065c4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065ca:	1c5a      	adds	r2, r3, #1
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	651a      	str	r2, [r3, #80]	; 0x50
}
 80065d0:	e040      	b.n	8006654 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d015      	beq.n	8006608 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80065dc:	7bfb      	ldrb	r3, [r7, #15]
 80065de:	2b21      	cmp	r3, #33	; 0x21
 80065e0:	d112      	bne.n	8006608 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e6:	781a      	ldrb	r2, [r3, #0]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f2:	1c5a      	adds	r2, r3, #1
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	3b01      	subs	r3, #1
 8006600:	b29a      	uxth	r2, r3
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006606:	e025      	b.n	8006654 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800660c:	b29b      	uxth	r3, r3
 800660e:	2b00      	cmp	r3, #0
 8006610:	d120      	bne.n	8006654 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8006612:	7bfb      	ldrb	r3, [r7, #15]
 8006614:	2b21      	cmp	r3, #33	; 0x21
 8006616:	d11d      	bne.n	8006654 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	685a      	ldr	r2, [r3, #4]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006626:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006636:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2220      	movs	r2, #32
 8006642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f7ff fe36 	bl	80062c0 <HAL_I2C_MemTxCpltCallback>
}
 8006654:	bf00      	nop
 8006656:	3710      	adds	r7, #16
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800666a:	b2db      	uxtb	r3, r3
 800666c:	2b22      	cmp	r3, #34	; 0x22
 800666e:	f040 80a2 	bne.w	80067b6 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006676:	b29b      	uxth	r3, r3
 8006678:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2b03      	cmp	r3, #3
 800667e:	d921      	bls.n	80066c4 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	691a      	ldr	r2, [r3, #16]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800668a:	b2d2      	uxtb	r2, r2
 800668c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006692:	1c5a      	adds	r2, r3, #1
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800669c:	b29b      	uxth	r3, r3
 800669e:	3b01      	subs	r3, #1
 80066a0:	b29a      	uxth	r2, r3
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	2b03      	cmp	r3, #3
 80066ae:	f040 8082 	bne.w	80067b6 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	685a      	ldr	r2, [r3, #4]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066c0:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80066c2:	e078      	b.n	80067b6 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c8:	2b02      	cmp	r3, #2
 80066ca:	d074      	beq.n	80067b6 <I2C_MasterReceive_RXNE+0x15a>
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d002      	beq.n	80066d8 <I2C_MasterReceive_RXNE+0x7c>
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d16e      	bne.n	80067b6 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f001 fac5 	bl	8007c68 <I2C_WaitOnSTOPRequestThroughIT>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d142      	bne.n	800676a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066f2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	685a      	ldr	r2, [r3, #4]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006702:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	691a      	ldr	r2, [r3, #16]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670e:	b2d2      	uxtb	r2, r2
 8006710:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006716:	1c5a      	adds	r2, r3, #1
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006720:	b29b      	uxth	r3, r3
 8006722:	3b01      	subs	r3, #1
 8006724:	b29a      	uxth	r2, r3
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2220      	movs	r2, #32
 800672e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006738:	b2db      	uxtb	r3, r3
 800673a:	2b40      	cmp	r3, #64	; 0x40
 800673c:	d10a      	bne.n	8006754 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f7ff fdc1 	bl	80062d4 <HAL_I2C_MemRxCpltCallback>
}
 8006752:	e030      	b.n	80067b6 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2212      	movs	r2, #18
 8006760:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f7ff fd76 	bl	8006254 <HAL_I2C_MasterRxCpltCallback>
}
 8006768:	e025      	b.n	80067b6 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	685a      	ldr	r2, [r3, #4]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006778:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	691a      	ldr	r2, [r3, #16]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006784:	b2d2      	uxtb	r2, r2
 8006786:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678c:	1c5a      	adds	r2, r3, #1
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006796:	b29b      	uxth	r3, r3
 8006798:	3b01      	subs	r3, #1
 800679a:	b29a      	uxth	r2, r3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2220      	movs	r2, #32
 80067a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f7ff fd99 	bl	80062e8 <HAL_I2C_ErrorCallback>
}
 80067b6:	bf00      	nop
 80067b8:	3710      	adds	r7, #16
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}

080067be <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80067be:	b580      	push	{r7, lr}
 80067c0:	b084      	sub	sp, #16
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ca:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	2b04      	cmp	r3, #4
 80067d4:	d11b      	bne.n	800680e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	685a      	ldr	r2, [r3, #4]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067e4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	691a      	ldr	r2, [r3, #16]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f0:	b2d2      	uxtb	r2, r2
 80067f2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f8:	1c5a      	adds	r2, r3, #1
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006802:	b29b      	uxth	r3, r3
 8006804:	3b01      	subs	r3, #1
 8006806:	b29a      	uxth	r2, r3
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800680c:	e0bd      	b.n	800698a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006812:	b29b      	uxth	r3, r3
 8006814:	2b03      	cmp	r3, #3
 8006816:	d129      	bne.n	800686c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	685a      	ldr	r2, [r3, #4]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006826:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2b04      	cmp	r3, #4
 800682c:	d00a      	beq.n	8006844 <I2C_MasterReceive_BTF+0x86>
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2b02      	cmp	r3, #2
 8006832:	d007      	beq.n	8006844 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006842:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	691a      	ldr	r2, [r3, #16]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684e:	b2d2      	uxtb	r2, r2
 8006850:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006856:	1c5a      	adds	r2, r3, #1
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006860:	b29b      	uxth	r3, r3
 8006862:	3b01      	subs	r3, #1
 8006864:	b29a      	uxth	r2, r3
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800686a:	e08e      	b.n	800698a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006870:	b29b      	uxth	r3, r3
 8006872:	2b02      	cmp	r3, #2
 8006874:	d176      	bne.n	8006964 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2b01      	cmp	r3, #1
 800687a:	d002      	beq.n	8006882 <I2C_MasterReceive_BTF+0xc4>
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2b10      	cmp	r3, #16
 8006880:	d108      	bne.n	8006894 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006890:	601a      	str	r2, [r3, #0]
 8006892:	e019      	b.n	80068c8 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2b04      	cmp	r3, #4
 8006898:	d002      	beq.n	80068a0 <I2C_MasterReceive_BTF+0xe2>
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2b02      	cmp	r3, #2
 800689e:	d108      	bne.n	80068b2 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80068ae:	601a      	str	r2, [r3, #0]
 80068b0:	e00a      	b.n	80068c8 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2b10      	cmp	r3, #16
 80068b6:	d007      	beq.n	80068c8 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068c6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	691a      	ldr	r2, [r3, #16]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d2:	b2d2      	uxtb	r2, r2
 80068d4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068da:	1c5a      	adds	r2, r3, #1
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	3b01      	subs	r3, #1
 80068e8:	b29a      	uxth	r2, r3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	691a      	ldr	r2, [r3, #16]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f8:	b2d2      	uxtb	r2, r2
 80068fa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006900:	1c5a      	adds	r2, r3, #1
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800690a:	b29b      	uxth	r3, r3
 800690c:	3b01      	subs	r3, #1
 800690e:	b29a      	uxth	r2, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	685a      	ldr	r2, [r3, #4]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006922:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2220      	movs	r2, #32
 8006928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006932:	b2db      	uxtb	r3, r3
 8006934:	2b40      	cmp	r3, #64	; 0x40
 8006936:	d10a      	bne.n	800694e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f7ff fcc4 	bl	80062d4 <HAL_I2C_MemRxCpltCallback>
}
 800694c:	e01d      	b.n	800698a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2212      	movs	r2, #18
 800695a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f7ff fc79 	bl	8006254 <HAL_I2C_MasterRxCpltCallback>
}
 8006962:	e012      	b.n	800698a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	691a      	ldr	r2, [r3, #16]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696e:	b2d2      	uxtb	r2, r2
 8006970:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006976:	1c5a      	adds	r2, r3, #1
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006980:	b29b      	uxth	r3, r3
 8006982:	3b01      	subs	r3, #1
 8006984:	b29a      	uxth	r2, r3
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800698a:	bf00      	nop
 800698c:	3710      	adds	r7, #16
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}

08006992 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006992:	b480      	push	{r7}
 8006994:	b083      	sub	sp, #12
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	2b40      	cmp	r3, #64	; 0x40
 80069a4:	d117      	bne.n	80069d6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d109      	bne.n	80069c2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	461a      	mov	r2, r3
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80069be:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80069c0:	e067      	b.n	8006a92 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	f043 0301 	orr.w	r3, r3, #1
 80069cc:	b2da      	uxtb	r2, r3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	611a      	str	r2, [r3, #16]
}
 80069d4:	e05d      	b.n	8006a92 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	691b      	ldr	r3, [r3, #16]
 80069da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069de:	d133      	bne.n	8006a48 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	2b21      	cmp	r3, #33	; 0x21
 80069ea:	d109      	bne.n	8006a00 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	461a      	mov	r2, r3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80069fc:	611a      	str	r2, [r3, #16]
 80069fe:	e008      	b.n	8006a12 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	f043 0301 	orr.w	r3, r3, #1
 8006a0a:	b2da      	uxtb	r2, r3
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d004      	beq.n	8006a24 <I2C_Master_SB+0x92>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d108      	bne.n	8006a36 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d032      	beq.n	8006a92 <I2C_Master_SB+0x100>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d02d      	beq.n	8006a92 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	685a      	ldr	r2, [r3, #4]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a44:	605a      	str	r2, [r3, #4]
}
 8006a46:	e024      	b.n	8006a92 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d10e      	bne.n	8006a6e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	11db      	asrs	r3, r3, #7
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	f003 0306 	and.w	r3, r3, #6
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	f063 030f 	orn	r3, r3, #15
 8006a64:	b2da      	uxtb	r2, r3
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	611a      	str	r2, [r3, #16]
}
 8006a6c:	e011      	b.n	8006a92 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d10d      	bne.n	8006a92 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	11db      	asrs	r3, r3, #7
 8006a7e:	b2db      	uxtb	r3, r3
 8006a80:	f003 0306 	and.w	r3, r3, #6
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	f063 030e 	orn	r3, r3, #14
 8006a8a:	b2da      	uxtb	r2, r3
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	611a      	str	r2, [r3, #16]
}
 8006a92:	bf00      	nop
 8006a94:	370c      	adds	r7, #12
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr

08006a9e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006a9e:	b480      	push	{r7}
 8006aa0:	b083      	sub	sp, #12
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aaa:	b2da      	uxtb	r2, r3
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d004      	beq.n	8006ac4 <I2C_Master_ADD10+0x26>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d108      	bne.n	8006ad6 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d00c      	beq.n	8006ae6 <I2C_Master_ADD10+0x48>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d007      	beq.n	8006ae6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	685a      	ldr	r2, [r3, #4]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ae4:	605a      	str	r2, [r3, #4]
  }
}
 8006ae6:	bf00      	nop
 8006ae8:	370c      	adds	r7, #12
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr

08006af2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006af2:	b480      	push	{r7}
 8006af4:	b091      	sub	sp, #68	; 0x44
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b00:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b08:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b0e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	2b22      	cmp	r3, #34	; 0x22
 8006b1a:	f040 8169 	bne.w	8006df0 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d10f      	bne.n	8006b46 <I2C_Master_ADDR+0x54>
 8006b26:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006b2a:	2b40      	cmp	r3, #64	; 0x40
 8006b2c:	d10b      	bne.n	8006b46 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b2e:	2300      	movs	r3, #0
 8006b30:	633b      	str	r3, [r7, #48]	; 0x30
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	695b      	ldr	r3, [r3, #20]
 8006b38:	633b      	str	r3, [r7, #48]	; 0x30
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	699b      	ldr	r3, [r3, #24]
 8006b40:	633b      	str	r3, [r7, #48]	; 0x30
 8006b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b44:	e160      	b.n	8006e08 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d11d      	bne.n	8006b8a <I2C_Master_ADDR+0x98>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006b56:	d118      	bne.n	8006b8a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b58:	2300      	movs	r3, #0
 8006b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	695b      	ldr	r3, [r3, #20]
 8006b62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	699b      	ldr	r3, [r3, #24]
 8006b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b7c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b82:	1c5a      	adds	r2, r3, #1
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	651a      	str	r2, [r3, #80]	; 0x50
 8006b88:	e13e      	b.n	8006e08 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d113      	bne.n	8006bbc <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b94:	2300      	movs	r3, #0
 8006b96:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	695b      	ldr	r3, [r3, #20]
 8006b9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	699b      	ldr	r3, [r3, #24]
 8006ba6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bb8:	601a      	str	r2, [r3, #0]
 8006bba:	e115      	b.n	8006de8 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	f040 808a 	bne.w	8006cdc <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006bce:	d137      	bne.n	8006c40 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bde:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bee:	d113      	bne.n	8006c18 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bfe:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c00:	2300      	movs	r3, #0
 8006c02:	627b      	str	r3, [r7, #36]	; 0x24
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	695b      	ldr	r3, [r3, #20]
 8006c0a:	627b      	str	r3, [r7, #36]	; 0x24
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	699b      	ldr	r3, [r3, #24]
 8006c12:	627b      	str	r3, [r7, #36]	; 0x24
 8006c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c16:	e0e7      	b.n	8006de8 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c18:	2300      	movs	r3, #0
 8006c1a:	623b      	str	r3, [r7, #32]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	695b      	ldr	r3, [r3, #20]
 8006c22:	623b      	str	r3, [r7, #32]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	699b      	ldr	r3, [r3, #24]
 8006c2a:	623b      	str	r3, [r7, #32]
 8006c2c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c3c:	601a      	str	r2, [r3, #0]
 8006c3e:	e0d3      	b.n	8006de8 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c42:	2b08      	cmp	r3, #8
 8006c44:	d02e      	beq.n	8006ca4 <I2C_Master_ADDR+0x1b2>
 8006c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c48:	2b20      	cmp	r3, #32
 8006c4a:	d02b      	beq.n	8006ca4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c4e:	2b12      	cmp	r3, #18
 8006c50:	d102      	bne.n	8006c58 <I2C_Master_ADDR+0x166>
 8006c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d125      	bne.n	8006ca4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c5a:	2b04      	cmp	r3, #4
 8006c5c:	d00e      	beq.n	8006c7c <I2C_Master_ADDR+0x18a>
 8006c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c60:	2b02      	cmp	r3, #2
 8006c62:	d00b      	beq.n	8006c7c <I2C_Master_ADDR+0x18a>
 8006c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c66:	2b10      	cmp	r3, #16
 8006c68:	d008      	beq.n	8006c7c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c78:	601a      	str	r2, [r3, #0]
 8006c7a:	e007      	b.n	8006c8c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006c8a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	61fb      	str	r3, [r7, #28]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	695b      	ldr	r3, [r3, #20]
 8006c96:	61fb      	str	r3, [r7, #28]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	699b      	ldr	r3, [r3, #24]
 8006c9e:	61fb      	str	r3, [r7, #28]
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	e0a1      	b.n	8006de8 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cb2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	61bb      	str	r3, [r7, #24]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	695b      	ldr	r3, [r3, #20]
 8006cbe:	61bb      	str	r3, [r7, #24]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	699b      	ldr	r3, [r3, #24]
 8006cc6:	61bb      	str	r3, [r7, #24]
 8006cc8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cd8:	601a      	str	r2, [r3, #0]
 8006cda:	e085      	b.n	8006de8 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	2b02      	cmp	r3, #2
 8006ce4:	d14d      	bne.n	8006d82 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce8:	2b04      	cmp	r3, #4
 8006cea:	d016      	beq.n	8006d1a <I2C_Master_ADDR+0x228>
 8006cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cee:	2b02      	cmp	r3, #2
 8006cf0:	d013      	beq.n	8006d1a <I2C_Master_ADDR+0x228>
 8006cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf4:	2b10      	cmp	r3, #16
 8006cf6:	d010      	beq.n	8006d1a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d06:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d16:	601a      	str	r2, [r3, #0]
 8006d18:	e007      	b.n	8006d2a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006d28:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d38:	d117      	bne.n	8006d6a <I2C_Master_ADDR+0x278>
 8006d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006d40:	d00b      	beq.n	8006d5a <I2C_Master_ADDR+0x268>
 8006d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d008      	beq.n	8006d5a <I2C_Master_ADDR+0x268>
 8006d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d4a:	2b08      	cmp	r3, #8
 8006d4c:	d005      	beq.n	8006d5a <I2C_Master_ADDR+0x268>
 8006d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d50:	2b10      	cmp	r3, #16
 8006d52:	d002      	beq.n	8006d5a <I2C_Master_ADDR+0x268>
 8006d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d56:	2b20      	cmp	r3, #32
 8006d58:	d107      	bne.n	8006d6a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	685a      	ldr	r2, [r3, #4]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006d68:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	617b      	str	r3, [r7, #20]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	695b      	ldr	r3, [r3, #20]
 8006d74:	617b      	str	r3, [r7, #20]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	699b      	ldr	r3, [r3, #24]
 8006d7c:	617b      	str	r3, [r7, #20]
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	e032      	b.n	8006de8 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006d90:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006da0:	d117      	bne.n	8006dd2 <I2C_Master_ADDR+0x2e0>
 8006da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006da8:	d00b      	beq.n	8006dc2 <I2C_Master_ADDR+0x2d0>
 8006daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d008      	beq.n	8006dc2 <I2C_Master_ADDR+0x2d0>
 8006db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db2:	2b08      	cmp	r3, #8
 8006db4:	d005      	beq.n	8006dc2 <I2C_Master_ADDR+0x2d0>
 8006db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db8:	2b10      	cmp	r3, #16
 8006dba:	d002      	beq.n	8006dc2 <I2C_Master_ADDR+0x2d0>
 8006dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dbe:	2b20      	cmp	r3, #32
 8006dc0:	d107      	bne.n	8006dd2 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	685a      	ldr	r2, [r3, #4]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006dd0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	613b      	str	r3, [r7, #16]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	695b      	ldr	r3, [r3, #20]
 8006ddc:	613b      	str	r3, [r7, #16]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	699b      	ldr	r3, [r3, #24]
 8006de4:	613b      	str	r3, [r7, #16]
 8006de6:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006dee:	e00b      	b.n	8006e08 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006df0:	2300      	movs	r3, #0
 8006df2:	60fb      	str	r3, [r7, #12]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	695b      	ldr	r3, [r3, #20]
 8006dfa:	60fb      	str	r3, [r7, #12]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	699b      	ldr	r3, [r3, #24]
 8006e02:	60fb      	str	r3, [r7, #12]
 8006e04:	68fb      	ldr	r3, [r7, #12]
}
 8006e06:	e7ff      	b.n	8006e08 <I2C_Master_ADDR+0x316>
 8006e08:	bf00      	nop
 8006e0a:	3744      	adds	r7, #68	; 0x44
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e22:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d02b      	beq.n	8006e86 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e32:	781a      	ldrb	r2, [r3, #0]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3e:	1c5a      	adds	r2, r3, #1
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	3b01      	subs	r3, #1
 8006e4c:	b29a      	uxth	r2, r3
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d114      	bne.n	8006e86 <I2C_SlaveTransmit_TXE+0x72>
 8006e5c:	7bfb      	ldrb	r3, [r7, #15]
 8006e5e:	2b29      	cmp	r3, #41	; 0x29
 8006e60:	d111      	bne.n	8006e86 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	685a      	ldr	r2, [r3, #4]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e70:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2221      	movs	r2, #33	; 0x21
 8006e76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2228      	movs	r2, #40	; 0x28
 8006e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f7ff f9f1 	bl	8006268 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006e86:	bf00      	nop
 8006e88:	3710      	adds	r7, #16
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}

08006e8e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006e8e:	b480      	push	{r7}
 8006e90:	b083      	sub	sp, #12
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d011      	beq.n	8006ec4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea4:	781a      	ldrb	r2, [r3, #0]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb0:	1c5a      	adds	r2, r3, #1
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	3b01      	subs	r3, #1
 8006ebe:	b29a      	uxth	r2, r3
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006ec4:	bf00      	nop
 8006ec6:	370c      	adds	r7, #12
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ede:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d02c      	beq.n	8006f44 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	691a      	ldr	r2, [r3, #16]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef4:	b2d2      	uxtb	r2, r2
 8006ef6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efc:	1c5a      	adds	r2, r3, #1
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	3b01      	subs	r3, #1
 8006f0a:	b29a      	uxth	r2, r3
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d114      	bne.n	8006f44 <I2C_SlaveReceive_RXNE+0x74>
 8006f1a:	7bfb      	ldrb	r3, [r7, #15]
 8006f1c:	2b2a      	cmp	r3, #42	; 0x2a
 8006f1e:	d111      	bne.n	8006f44 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	685a      	ldr	r2, [r3, #4]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f2e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2222      	movs	r2, #34	; 0x22
 8006f34:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2228      	movs	r2, #40	; 0x28
 8006f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f7ff f99c 	bl	800627c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006f44:	bf00      	nop
 8006f46:	3710      	adds	r7, #16
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b083      	sub	sp, #12
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d012      	beq.n	8006f84 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	691a      	ldr	r2, [r3, #16]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f68:	b2d2      	uxtb	r2, r2
 8006f6a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f70:	1c5a      	adds	r2, r3, #1
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	3b01      	subs	r3, #1
 8006f7e:	b29a      	uxth	r2, r3
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006f84:	bf00      	nop
 8006f86:	370c      	adds	r7, #12
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006faa:	2b28      	cmp	r3, #40	; 0x28
 8006fac:	d127      	bne.n	8006ffe <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	685a      	ldr	r2, [r3, #4]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fbc:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	089b      	lsrs	r3, r3, #2
 8006fc2:	f003 0301 	and.w	r3, r3, #1
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d101      	bne.n	8006fce <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	09db      	lsrs	r3, r3, #7
 8006fd2:	f003 0301 	and.w	r3, r3, #1
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d103      	bne.n	8006fe2 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	68db      	ldr	r3, [r3, #12]
 8006fde:	81bb      	strh	r3, [r7, #12]
 8006fe0:	e002      	b.n	8006fe8 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	699b      	ldr	r3, [r3, #24]
 8006fe6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006ff0:	89ba      	ldrh	r2, [r7, #12]
 8006ff2:	7bfb      	ldrb	r3, [r7, #15]
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f7ff f94a 	bl	8006290 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006ffc:	e00e      	b.n	800701c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ffe:	2300      	movs	r3, #0
 8007000:	60bb      	str	r3, [r7, #8]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	695b      	ldr	r3, [r3, #20]
 8007008:	60bb      	str	r3, [r7, #8]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	699b      	ldr	r3, [r3, #24]
 8007010:	60bb      	str	r3, [r7, #8]
 8007012:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2200      	movs	r2, #0
 8007018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800701c:	bf00      	nop
 800701e:	3710      	adds	r7, #16
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007032:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	685a      	ldr	r2, [r3, #4]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007042:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007044:	2300      	movs	r3, #0
 8007046:	60bb      	str	r3, [r7, #8]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	695b      	ldr	r3, [r3, #20]
 800704e:	60bb      	str	r3, [r7, #8]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f042 0201 	orr.w	r2, r2, #1
 800705e:	601a      	str	r2, [r3, #0]
 8007060:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007070:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800707c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007080:	d172      	bne.n	8007168 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007082:	7bfb      	ldrb	r3, [r7, #15]
 8007084:	2b22      	cmp	r3, #34	; 0x22
 8007086:	d002      	beq.n	800708e <I2C_Slave_STOPF+0x6a>
 8007088:	7bfb      	ldrb	r3, [r7, #15]
 800708a:	2b2a      	cmp	r3, #42	; 0x2a
 800708c:	d135      	bne.n	80070fa <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	b29a      	uxth	r2, r3
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d005      	beq.n	80070b2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070aa:	f043 0204 	orr.w	r2, r3, #4
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	685a      	ldr	r2, [r3, #4]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80070c0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c6:	4618      	mov	r0, r3
 80070c8:	f7fd ff6c 	bl	8004fa4 <HAL_DMA_GetState>
 80070cc:	4603      	mov	r3, r0
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d049      	beq.n	8007166 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d6:	4a69      	ldr	r2, [pc, #420]	; (800727c <I2C_Slave_STOPF+0x258>)
 80070d8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070de:	4618      	mov	r0, r3
 80070e0:	f7fd fdb4 	bl	8004c4c <HAL_DMA_Abort_IT>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d03d      	beq.n	8007166 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80070f4:	4610      	mov	r0, r2
 80070f6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80070f8:	e035      	b.n	8007166 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	b29a      	uxth	r2, r3
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800710c:	b29b      	uxth	r3, r3
 800710e:	2b00      	cmp	r3, #0
 8007110:	d005      	beq.n	800711e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007116:	f043 0204 	orr.w	r2, r3, #4
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	685a      	ldr	r2, [r3, #4]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800712c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007132:	4618      	mov	r0, r3
 8007134:	f7fd ff36 	bl	8004fa4 <HAL_DMA_GetState>
 8007138:	4603      	mov	r3, r0
 800713a:	2b01      	cmp	r3, #1
 800713c:	d014      	beq.n	8007168 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007142:	4a4e      	ldr	r2, [pc, #312]	; (800727c <I2C_Slave_STOPF+0x258>)
 8007144:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800714a:	4618      	mov	r0, r3
 800714c:	f7fd fd7e 	bl	8004c4c <HAL_DMA_Abort_IT>
 8007150:	4603      	mov	r3, r0
 8007152:	2b00      	cmp	r3, #0
 8007154:	d008      	beq.n	8007168 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800715a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007160:	4610      	mov	r0, r2
 8007162:	4798      	blx	r3
 8007164:	e000      	b.n	8007168 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007166:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800716c:	b29b      	uxth	r3, r3
 800716e:	2b00      	cmp	r3, #0
 8007170:	d03e      	beq.n	80071f0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	695b      	ldr	r3, [r3, #20]
 8007178:	f003 0304 	and.w	r3, r3, #4
 800717c:	2b04      	cmp	r3, #4
 800717e:	d112      	bne.n	80071a6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	691a      	ldr	r2, [r3, #16]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718a:	b2d2      	uxtb	r2, r2
 800718c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007192:	1c5a      	adds	r2, r3, #1
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800719c:	b29b      	uxth	r3, r3
 800719e:	3b01      	subs	r3, #1
 80071a0:	b29a      	uxth	r2, r3
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	695b      	ldr	r3, [r3, #20]
 80071ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071b0:	2b40      	cmp	r3, #64	; 0x40
 80071b2:	d112      	bne.n	80071da <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	691a      	ldr	r2, [r3, #16]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071be:	b2d2      	uxtb	r2, r2
 80071c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c6:	1c5a      	adds	r2, r3, #1
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	3b01      	subs	r3, #1
 80071d4:	b29a      	uxth	r2, r3
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071de:	b29b      	uxth	r3, r3
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d005      	beq.n	80071f0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e8:	f043 0204 	orr.w	r2, r3, #4
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d003      	beq.n	8007200 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 f8b3 	bl	8007364 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80071fe:	e039      	b.n	8007274 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007200:	7bfb      	ldrb	r3, [r7, #15]
 8007202:	2b2a      	cmp	r3, #42	; 0x2a
 8007204:	d109      	bne.n	800721a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2228      	movs	r2, #40	; 0x28
 8007210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f7ff f831 	bl	800627c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007220:	b2db      	uxtb	r3, r3
 8007222:	2b28      	cmp	r3, #40	; 0x28
 8007224:	d111      	bne.n	800724a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	4a15      	ldr	r2, [pc, #84]	; (8007280 <I2C_Slave_STOPF+0x25c>)
 800722a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2220      	movs	r2, #32
 8007236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f7ff f832 	bl	80062ac <HAL_I2C_ListenCpltCallback>
}
 8007248:	e014      	b.n	8007274 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800724e:	2b22      	cmp	r3, #34	; 0x22
 8007250:	d002      	beq.n	8007258 <I2C_Slave_STOPF+0x234>
 8007252:	7bfb      	ldrb	r3, [r7, #15]
 8007254:	2b22      	cmp	r3, #34	; 0x22
 8007256:	d10d      	bne.n	8007274 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2220      	movs	r2, #32
 8007262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f7ff f804 	bl	800627c <HAL_I2C_SlaveRxCpltCallback>
}
 8007274:	bf00      	nop
 8007276:	3710      	adds	r7, #16
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}
 800727c:	08007869 	.word	0x08007869
 8007280:	ffff0000 	.word	0xffff0000

08007284 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007292:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007298:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	2b08      	cmp	r3, #8
 800729e:	d002      	beq.n	80072a6 <I2C_Slave_AF+0x22>
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	2b20      	cmp	r3, #32
 80072a4:	d129      	bne.n	80072fa <I2C_Slave_AF+0x76>
 80072a6:	7bfb      	ldrb	r3, [r7, #15]
 80072a8:	2b28      	cmp	r3, #40	; 0x28
 80072aa:	d126      	bne.n	80072fa <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	4a2c      	ldr	r2, [pc, #176]	; (8007360 <I2C_Slave_AF+0xdc>)
 80072b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	685a      	ldr	r2, [r3, #4]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80072c0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80072ca:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072da:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2220      	movs	r2, #32
 80072e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f7fe ffda 	bl	80062ac <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80072f8:	e02e      	b.n	8007358 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80072fa:	7bfb      	ldrb	r3, [r7, #15]
 80072fc:	2b21      	cmp	r3, #33	; 0x21
 80072fe:	d126      	bne.n	800734e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	4a17      	ldr	r2, [pc, #92]	; (8007360 <I2C_Slave_AF+0xdc>)
 8007304:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2221      	movs	r2, #33	; 0x21
 800730a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2220      	movs	r2, #32
 8007310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2200      	movs	r2, #0
 8007318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	685a      	ldr	r2, [r3, #4]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800732a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007334:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007344:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f7fe ff8e 	bl	8006268 <HAL_I2C_SlaveTxCpltCallback>
}
 800734c:	e004      	b.n	8007358 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007356:	615a      	str	r2, [r3, #20]
}
 8007358:	bf00      	nop
 800735a:	3710      	adds	r7, #16
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}
 8007360:	ffff0000 	.word	0xffff0000

08007364 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007372:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800737a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800737c:	7bbb      	ldrb	r3, [r7, #14]
 800737e:	2b10      	cmp	r3, #16
 8007380:	d002      	beq.n	8007388 <I2C_ITError+0x24>
 8007382:	7bbb      	ldrb	r3, [r7, #14]
 8007384:	2b40      	cmp	r3, #64	; 0x40
 8007386:	d10a      	bne.n	800739e <I2C_ITError+0x3a>
 8007388:	7bfb      	ldrb	r3, [r7, #15]
 800738a:	2b22      	cmp	r3, #34	; 0x22
 800738c:	d107      	bne.n	800739e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800739c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800739e:	7bfb      	ldrb	r3, [r7, #15]
 80073a0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80073a4:	2b28      	cmp	r3, #40	; 0x28
 80073a6:	d107      	bne.n	80073b8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2228      	movs	r2, #40	; 0x28
 80073b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80073b6:	e015      	b.n	80073e4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073c6:	d00a      	beq.n	80073de <I2C_ITError+0x7a>
 80073c8:	7bfb      	ldrb	r3, [r7, #15]
 80073ca:	2b60      	cmp	r3, #96	; 0x60
 80073cc:	d007      	beq.n	80073de <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2220      	movs	r2, #32
 80073d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2200      	movs	r2, #0
 80073da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2200      	movs	r2, #0
 80073e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073f2:	d162      	bne.n	80074ba <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	685a      	ldr	r2, [r3, #4]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007402:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007408:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800740c:	b2db      	uxtb	r3, r3
 800740e:	2b01      	cmp	r3, #1
 8007410:	d020      	beq.n	8007454 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007416:	4a6a      	ldr	r2, [pc, #424]	; (80075c0 <I2C_ITError+0x25c>)
 8007418:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800741e:	4618      	mov	r0, r3
 8007420:	f7fd fc14 	bl	8004c4c <HAL_DMA_Abort_IT>
 8007424:	4603      	mov	r3, r0
 8007426:	2b00      	cmp	r3, #0
 8007428:	f000 8089 	beq.w	800753e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f022 0201 	bic.w	r2, r2, #1
 800743a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2220      	movs	r2, #32
 8007440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007448:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800744a:	687a      	ldr	r2, [r7, #4]
 800744c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800744e:	4610      	mov	r0, r2
 8007450:	4798      	blx	r3
 8007452:	e074      	b.n	800753e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007458:	4a59      	ldr	r2, [pc, #356]	; (80075c0 <I2C_ITError+0x25c>)
 800745a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007460:	4618      	mov	r0, r3
 8007462:	f7fd fbf3 	bl	8004c4c <HAL_DMA_Abort_IT>
 8007466:	4603      	mov	r3, r0
 8007468:	2b00      	cmp	r3, #0
 800746a:	d068      	beq.n	800753e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	695b      	ldr	r3, [r3, #20]
 8007472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007476:	2b40      	cmp	r3, #64	; 0x40
 8007478:	d10b      	bne.n	8007492 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	691a      	ldr	r2, [r3, #16]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007484:	b2d2      	uxtb	r2, r2
 8007486:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748c:	1c5a      	adds	r2, r3, #1
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f022 0201 	bic.w	r2, r2, #1
 80074a0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2220      	movs	r2, #32
 80074a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80074b4:	4610      	mov	r0, r2
 80074b6:	4798      	blx	r3
 80074b8:	e041      	b.n	800753e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	2b60      	cmp	r3, #96	; 0x60
 80074c4:	d125      	bne.n	8007512 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2220      	movs	r2, #32
 80074ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	695b      	ldr	r3, [r3, #20]
 80074da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074de:	2b40      	cmp	r3, #64	; 0x40
 80074e0:	d10b      	bne.n	80074fa <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	691a      	ldr	r2, [r3, #16]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ec:	b2d2      	uxtb	r2, r2
 80074ee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f4:	1c5a      	adds	r2, r3, #1
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f022 0201 	bic.w	r2, r2, #1
 8007508:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f7fe fef6 	bl	80062fc <HAL_I2C_AbortCpltCallback>
 8007510:	e015      	b.n	800753e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	695b      	ldr	r3, [r3, #20]
 8007518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800751c:	2b40      	cmp	r3, #64	; 0x40
 800751e:	d10b      	bne.n	8007538 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	691a      	ldr	r2, [r3, #16]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752a:	b2d2      	uxtb	r2, r2
 800752c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007532:	1c5a      	adds	r2, r3, #1
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f7fe fed5 	bl	80062e8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007542:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	f003 0301 	and.w	r3, r3, #1
 800754a:	2b00      	cmp	r3, #0
 800754c:	d10e      	bne.n	800756c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007554:	2b00      	cmp	r3, #0
 8007556:	d109      	bne.n	800756c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800755e:	2b00      	cmp	r3, #0
 8007560:	d104      	bne.n	800756c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007568:	2b00      	cmp	r3, #0
 800756a:	d007      	beq.n	800757c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	685a      	ldr	r2, [r3, #4]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800757a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007582:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007588:	f003 0304 	and.w	r3, r3, #4
 800758c:	2b04      	cmp	r3, #4
 800758e:	d113      	bne.n	80075b8 <I2C_ITError+0x254>
 8007590:	7bfb      	ldrb	r3, [r7, #15]
 8007592:	2b28      	cmp	r3, #40	; 0x28
 8007594:	d110      	bne.n	80075b8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4a0a      	ldr	r2, [pc, #40]	; (80075c4 <I2C_ITError+0x260>)
 800759a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2220      	movs	r2, #32
 80075a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f7fe fe7a 	bl	80062ac <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80075b8:	bf00      	nop
 80075ba:	3710      	adds	r7, #16
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}
 80075c0:	08007869 	.word	0x08007869
 80075c4:	ffff0000 	.word	0xffff0000

080075c8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b088      	sub	sp, #32
 80075cc:	af02      	add	r7, sp, #8
 80075ce:	60f8      	str	r0, [r7, #12]
 80075d0:	607a      	str	r2, [r7, #4]
 80075d2:	603b      	str	r3, [r7, #0]
 80075d4:	460b      	mov	r3, r1
 80075d6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075dc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	2b08      	cmp	r3, #8
 80075e2:	d006      	beq.n	80075f2 <I2C_MasterRequestWrite+0x2a>
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d003      	beq.n	80075f2 <I2C_MasterRequestWrite+0x2a>
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80075f0:	d108      	bne.n	8007604 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007600:	601a      	str	r2, [r3, #0]
 8007602:	e00b      	b.n	800761c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007608:	2b12      	cmp	r3, #18
 800760a:	d107      	bne.n	800761c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	681a      	ldr	r2, [r3, #0]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800761a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	9300      	str	r3, [sp, #0]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007628:	68f8      	ldr	r0, [r7, #12]
 800762a:	f000 f9c5 	bl	80079b8 <I2C_WaitOnFlagUntilTimeout>
 800762e:	4603      	mov	r3, r0
 8007630:	2b00      	cmp	r3, #0
 8007632:	d00d      	beq.n	8007650 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800763e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007642:	d103      	bne.n	800764c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f44f 7200 	mov.w	r2, #512	; 0x200
 800764a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800764c:	2303      	movs	r3, #3
 800764e:	e035      	b.n	80076bc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	691b      	ldr	r3, [r3, #16]
 8007654:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007658:	d108      	bne.n	800766c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800765a:	897b      	ldrh	r3, [r7, #10]
 800765c:	b2db      	uxtb	r3, r3
 800765e:	461a      	mov	r2, r3
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007668:	611a      	str	r2, [r3, #16]
 800766a:	e01b      	b.n	80076a4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800766c:	897b      	ldrh	r3, [r7, #10]
 800766e:	11db      	asrs	r3, r3, #7
 8007670:	b2db      	uxtb	r3, r3
 8007672:	f003 0306 	and.w	r3, r3, #6
 8007676:	b2db      	uxtb	r3, r3
 8007678:	f063 030f 	orn	r3, r3, #15
 800767c:	b2da      	uxtb	r2, r3
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	490e      	ldr	r1, [pc, #56]	; (80076c4 <I2C_MasterRequestWrite+0xfc>)
 800768a:	68f8      	ldr	r0, [r7, #12]
 800768c:	f000 f9eb 	bl	8007a66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007690:	4603      	mov	r3, r0
 8007692:	2b00      	cmp	r3, #0
 8007694:	d001      	beq.n	800769a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	e010      	b.n	80076bc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800769a:	897b      	ldrh	r3, [r7, #10]
 800769c:	b2da      	uxtb	r2, r3
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	4907      	ldr	r1, [pc, #28]	; (80076c8 <I2C_MasterRequestWrite+0x100>)
 80076aa:	68f8      	ldr	r0, [r7, #12]
 80076ac:	f000 f9db 	bl	8007a66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80076b0:	4603      	mov	r3, r0
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d001      	beq.n	80076ba <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80076b6:	2301      	movs	r3, #1
 80076b8:	e000      	b.n	80076bc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80076ba:	2300      	movs	r3, #0
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3718      	adds	r7, #24
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}
 80076c4:	00010008 	.word	0x00010008
 80076c8:	00010002 	.word	0x00010002

080076cc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b088      	sub	sp, #32
 80076d0:	af02      	add	r7, sp, #8
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	607a      	str	r2, [r7, #4]
 80076d6:	603b      	str	r3, [r7, #0]
 80076d8:	460b      	mov	r3, r1
 80076da:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80076f0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	2b08      	cmp	r3, #8
 80076f6:	d006      	beq.n	8007706 <I2C_MasterRequestRead+0x3a>
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d003      	beq.n	8007706 <I2C_MasterRequestRead+0x3a>
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007704:	d108      	bne.n	8007718 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007714:	601a      	str	r2, [r3, #0]
 8007716:	e00b      	b.n	8007730 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800771c:	2b11      	cmp	r3, #17
 800771e:	d107      	bne.n	8007730 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	681a      	ldr	r2, [r3, #0]
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800772e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	9300      	str	r3, [sp, #0]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2200      	movs	r2, #0
 8007738:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800773c:	68f8      	ldr	r0, [r7, #12]
 800773e:	f000 f93b 	bl	80079b8 <I2C_WaitOnFlagUntilTimeout>
 8007742:	4603      	mov	r3, r0
 8007744:	2b00      	cmp	r3, #0
 8007746:	d00d      	beq.n	8007764 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007752:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007756:	d103      	bne.n	8007760 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800775e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007760:	2303      	movs	r3, #3
 8007762:	e079      	b.n	8007858 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	691b      	ldr	r3, [r3, #16]
 8007768:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800776c:	d108      	bne.n	8007780 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800776e:	897b      	ldrh	r3, [r7, #10]
 8007770:	b2db      	uxtb	r3, r3
 8007772:	f043 0301 	orr.w	r3, r3, #1
 8007776:	b2da      	uxtb	r2, r3
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	611a      	str	r2, [r3, #16]
 800777e:	e05f      	b.n	8007840 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007780:	897b      	ldrh	r3, [r7, #10]
 8007782:	11db      	asrs	r3, r3, #7
 8007784:	b2db      	uxtb	r3, r3
 8007786:	f003 0306 	and.w	r3, r3, #6
 800778a:	b2db      	uxtb	r3, r3
 800778c:	f063 030f 	orn	r3, r3, #15
 8007790:	b2da      	uxtb	r2, r3
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	4930      	ldr	r1, [pc, #192]	; (8007860 <I2C_MasterRequestRead+0x194>)
 800779e:	68f8      	ldr	r0, [r7, #12]
 80077a0:	f000 f961 	bl	8007a66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80077a4:	4603      	mov	r3, r0
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d001      	beq.n	80077ae <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	e054      	b.n	8007858 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80077ae:	897b      	ldrh	r3, [r7, #10]
 80077b0:	b2da      	uxtb	r2, r3
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	687a      	ldr	r2, [r7, #4]
 80077bc:	4929      	ldr	r1, [pc, #164]	; (8007864 <I2C_MasterRequestRead+0x198>)
 80077be:	68f8      	ldr	r0, [r7, #12]
 80077c0:	f000 f951 	bl	8007a66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80077c4:	4603      	mov	r3, r0
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d001      	beq.n	80077ce <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80077ca:	2301      	movs	r3, #1
 80077cc:	e044      	b.n	8007858 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077ce:	2300      	movs	r3, #0
 80077d0:	613b      	str	r3, [r7, #16]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	695b      	ldr	r3, [r3, #20]
 80077d8:	613b      	str	r3, [r7, #16]
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	699b      	ldr	r3, [r3, #24]
 80077e0:	613b      	str	r3, [r7, #16]
 80077e2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077f2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	9300      	str	r3, [sp, #0]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007800:	68f8      	ldr	r0, [r7, #12]
 8007802:	f000 f8d9 	bl	80079b8 <I2C_WaitOnFlagUntilTimeout>
 8007806:	4603      	mov	r3, r0
 8007808:	2b00      	cmp	r3, #0
 800780a:	d00d      	beq.n	8007828 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007816:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800781a:	d103      	bne.n	8007824 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007822:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8007824:	2303      	movs	r3, #3
 8007826:	e017      	b.n	8007858 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007828:	897b      	ldrh	r3, [r7, #10]
 800782a:	11db      	asrs	r3, r3, #7
 800782c:	b2db      	uxtb	r3, r3
 800782e:	f003 0306 	and.w	r3, r3, #6
 8007832:	b2db      	uxtb	r3, r3
 8007834:	f063 030e 	orn	r3, r3, #14
 8007838:	b2da      	uxtb	r2, r3
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	4907      	ldr	r1, [pc, #28]	; (8007864 <I2C_MasterRequestRead+0x198>)
 8007846:	68f8      	ldr	r0, [r7, #12]
 8007848:	f000 f90d 	bl	8007a66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800784c:	4603      	mov	r3, r0
 800784e:	2b00      	cmp	r3, #0
 8007850:	d001      	beq.n	8007856 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	e000      	b.n	8007858 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8007856:	2300      	movs	r3, #0
}
 8007858:	4618      	mov	r0, r3
 800785a:	3718      	adds	r7, #24
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}
 8007860:	00010008 	.word	0x00010008
 8007864:	00010002 	.word	0x00010002

08007868 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b086      	sub	sp, #24
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007870:	2300      	movs	r3, #0
 8007872:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007878:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007880:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007882:	4b4b      	ldr	r3, [pc, #300]	; (80079b0 <I2C_DMAAbort+0x148>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	08db      	lsrs	r3, r3, #3
 8007888:	4a4a      	ldr	r2, [pc, #296]	; (80079b4 <I2C_DMAAbort+0x14c>)
 800788a:	fba2 2303 	umull	r2, r3, r2, r3
 800788e:	0a1a      	lsrs	r2, r3, #8
 8007890:	4613      	mov	r3, r2
 8007892:	009b      	lsls	r3, r3, #2
 8007894:	4413      	add	r3, r2
 8007896:	00da      	lsls	r2, r3, #3
 8007898:	1ad3      	subs	r3, r2, r3
 800789a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d106      	bne.n	80078b0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a6:	f043 0220 	orr.w	r2, r3, #32
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80078ae:	e00a      	b.n	80078c6 <I2C_DMAAbort+0x5e>
    }
    count--;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	3b01      	subs	r3, #1
 80078b4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078c4:	d0ea      	beq.n	800789c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d003      	beq.n	80078d6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078d2:	2200      	movs	r2, #0
 80078d4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d003      	beq.n	80078e6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e2:	2200      	movs	r2, #0
 80078e4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078f4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	2200      	movs	r2, #0
 80078fa:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007900:	2b00      	cmp	r3, #0
 8007902:	d003      	beq.n	800790c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007908:	2200      	movs	r2, #0
 800790a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007910:	2b00      	cmp	r3, #0
 8007912:	d003      	beq.n	800791c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007918:	2200      	movs	r2, #0
 800791a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f022 0201 	bic.w	r2, r2, #1
 800792a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007932:	b2db      	uxtb	r3, r3
 8007934:	2b60      	cmp	r3, #96	; 0x60
 8007936:	d10e      	bne.n	8007956 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	2220      	movs	r2, #32
 800793c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	2200      	movs	r2, #0
 8007944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	2200      	movs	r2, #0
 800794c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800794e:	6978      	ldr	r0, [r7, #20]
 8007950:	f7fe fcd4 	bl	80062fc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007954:	e027      	b.n	80079a6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007956:	7cfb      	ldrb	r3, [r7, #19]
 8007958:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800795c:	2b28      	cmp	r3, #40	; 0x28
 800795e:	d117      	bne.n	8007990 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f042 0201 	orr.w	r2, r2, #1
 800796e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800797e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	2200      	movs	r2, #0
 8007984:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	2228      	movs	r2, #40	; 0x28
 800798a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800798e:	e007      	b.n	80079a0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	2220      	movs	r2, #32
 8007994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	2200      	movs	r2, #0
 800799c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80079a0:	6978      	ldr	r0, [r7, #20]
 80079a2:	f7fe fca1 	bl	80062e8 <HAL_I2C_ErrorCallback>
}
 80079a6:	bf00      	nop
 80079a8:	3718      	adds	r7, #24
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	bf00      	nop
 80079b0:	20000028 	.word	0x20000028
 80079b4:	14f8b589 	.word	0x14f8b589

080079b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	603b      	str	r3, [r7, #0]
 80079c4:	4613      	mov	r3, r2
 80079c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80079c8:	e025      	b.n	8007a16 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079d0:	d021      	beq.n	8007a16 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079d2:	f7fc fe97 	bl	8004704 <HAL_GetTick>
 80079d6:	4602      	mov	r2, r0
 80079d8:	69bb      	ldr	r3, [r7, #24]
 80079da:	1ad3      	subs	r3, r2, r3
 80079dc:	683a      	ldr	r2, [r7, #0]
 80079de:	429a      	cmp	r2, r3
 80079e0:	d302      	bcc.n	80079e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d116      	bne.n	8007a16 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2200      	movs	r2, #0
 80079ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2220      	movs	r2, #32
 80079f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2200      	movs	r2, #0
 80079fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a02:	f043 0220 	orr.w	r2, r3, #32
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007a12:	2301      	movs	r3, #1
 8007a14:	e023      	b.n	8007a5e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	0c1b      	lsrs	r3, r3, #16
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d10d      	bne.n	8007a3c <I2C_WaitOnFlagUntilTimeout+0x84>
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	695b      	ldr	r3, [r3, #20]
 8007a26:	43da      	mvns	r2, r3
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	4013      	ands	r3, r2
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	bf0c      	ite	eq
 8007a32:	2301      	moveq	r3, #1
 8007a34:	2300      	movne	r3, #0
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	461a      	mov	r2, r3
 8007a3a:	e00c      	b.n	8007a56 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	699b      	ldr	r3, [r3, #24]
 8007a42:	43da      	mvns	r2, r3
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	4013      	ands	r3, r2
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	bf0c      	ite	eq
 8007a4e:	2301      	moveq	r3, #1
 8007a50:	2300      	movne	r3, #0
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	461a      	mov	r2, r3
 8007a56:	79fb      	ldrb	r3, [r7, #7]
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d0b6      	beq.n	80079ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007a5c:	2300      	movs	r3, #0
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3710      	adds	r7, #16
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}

08007a66 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007a66:	b580      	push	{r7, lr}
 8007a68:	b084      	sub	sp, #16
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	60f8      	str	r0, [r7, #12]
 8007a6e:	60b9      	str	r1, [r7, #8]
 8007a70:	607a      	str	r2, [r7, #4]
 8007a72:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007a74:	e051      	b.n	8007b1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	695b      	ldr	r3, [r3, #20]
 8007a7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a84:	d123      	bne.n	8007ace <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a94:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007a9e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2220      	movs	r2, #32
 8007aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aba:	f043 0204 	orr.w	r2, r3, #4
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007aca:	2301      	movs	r3, #1
 8007acc:	e046      	b.n	8007b5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ad4:	d021      	beq.n	8007b1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ad6:	f7fc fe15 	bl	8004704 <HAL_GetTick>
 8007ada:	4602      	mov	r2, r0
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	1ad3      	subs	r3, r2, r3
 8007ae0:	687a      	ldr	r2, [r7, #4]
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d302      	bcc.n	8007aec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d116      	bne.n	8007b1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2200      	movs	r2, #0
 8007af0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2220      	movs	r2, #32
 8007af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2200      	movs	r2, #0
 8007afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b06:	f043 0220 	orr.w	r2, r3, #32
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	e020      	b.n	8007b5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	0c1b      	lsrs	r3, r3, #16
 8007b1e:	b2db      	uxtb	r3, r3
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d10c      	bne.n	8007b3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	695b      	ldr	r3, [r3, #20]
 8007b2a:	43da      	mvns	r2, r3
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	4013      	ands	r3, r2
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	bf14      	ite	ne
 8007b36:	2301      	movne	r3, #1
 8007b38:	2300      	moveq	r3, #0
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	e00b      	b.n	8007b56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	699b      	ldr	r3, [r3, #24]
 8007b44:	43da      	mvns	r2, r3
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	4013      	ands	r3, r2
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	bf14      	ite	ne
 8007b50:	2301      	movne	r3, #1
 8007b52:	2300      	moveq	r3, #0
 8007b54:	b2db      	uxtb	r3, r3
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d18d      	bne.n	8007a76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007b5a:	2300      	movs	r3, #0
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3710      	adds	r7, #16
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b084      	sub	sp, #16
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	60b9      	str	r1, [r7, #8]
 8007b6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007b70:	e02d      	b.n	8007bce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007b72:	68f8      	ldr	r0, [r7, #12]
 8007b74:	f000 f900 	bl	8007d78 <I2C_IsAcknowledgeFailed>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d001      	beq.n	8007b82 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e02d      	b.n	8007bde <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b88:	d021      	beq.n	8007bce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b8a:	f7fc fdbb 	bl	8004704 <HAL_GetTick>
 8007b8e:	4602      	mov	r2, r0
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	1ad3      	subs	r3, r2, r3
 8007b94:	68ba      	ldr	r2, [r7, #8]
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d302      	bcc.n	8007ba0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d116      	bne.n	8007bce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2220      	movs	r2, #32
 8007baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bba:	f043 0220 	orr.w	r2, r3, #32
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	e007      	b.n	8007bde <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	695b      	ldr	r3, [r3, #20]
 8007bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bd8:	2b80      	cmp	r3, #128	; 0x80
 8007bda:	d1ca      	bne.n	8007b72 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007bdc:	2300      	movs	r3, #0
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3710      	adds	r7, #16
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}

08007be6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007be6:	b580      	push	{r7, lr}
 8007be8:	b084      	sub	sp, #16
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	60f8      	str	r0, [r7, #12]
 8007bee:	60b9      	str	r1, [r7, #8]
 8007bf0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007bf2:	e02d      	b.n	8007c50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007bf4:	68f8      	ldr	r0, [r7, #12]
 8007bf6:	f000 f8bf 	bl	8007d78 <I2C_IsAcknowledgeFailed>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d001      	beq.n	8007c04 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007c00:	2301      	movs	r3, #1
 8007c02:	e02d      	b.n	8007c60 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c0a:	d021      	beq.n	8007c50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c0c:	f7fc fd7a 	bl	8004704 <HAL_GetTick>
 8007c10:	4602      	mov	r2, r0
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	1ad3      	subs	r3, r2, r3
 8007c16:	68ba      	ldr	r2, [r7, #8]
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d302      	bcc.n	8007c22 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d116      	bne.n	8007c50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2200      	movs	r2, #0
 8007c26:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2220      	movs	r2, #32
 8007c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2200      	movs	r2, #0
 8007c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c3c:	f043 0220 	orr.w	r2, r3, #32
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2200      	movs	r2, #0
 8007c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	e007      	b.n	8007c60 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	695b      	ldr	r3, [r3, #20]
 8007c56:	f003 0304 	and.w	r3, r3, #4
 8007c5a:	2b04      	cmp	r3, #4
 8007c5c:	d1ca      	bne.n	8007bf4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007c5e:	2300      	movs	r3, #0
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3710      	adds	r7, #16
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b085      	sub	sp, #20
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c70:	2300      	movs	r3, #0
 8007c72:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007c74:	4b13      	ldr	r3, [pc, #76]	; (8007cc4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	08db      	lsrs	r3, r3, #3
 8007c7a:	4a13      	ldr	r2, [pc, #76]	; (8007cc8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8007c80:	0a1a      	lsrs	r2, r3, #8
 8007c82:	4613      	mov	r3, r2
 8007c84:	009b      	lsls	r3, r3, #2
 8007c86:	4413      	add	r3, r2
 8007c88:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	3b01      	subs	r3, #1
 8007c8e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d107      	bne.n	8007ca6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c9a:	f043 0220 	orr.w	r2, r3, #32
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	e008      	b.n	8007cb8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007cb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cb4:	d0e9      	beq.n	8007c8a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007cb6:	2300      	movs	r3, #0
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3714      	adds	r7, #20
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr
 8007cc4:	20000028 	.word	0x20000028
 8007cc8:	14f8b589 	.word	0x14f8b589

08007ccc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	60b9      	str	r1, [r7, #8]
 8007cd6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007cd8:	e042      	b.n	8007d60 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	695b      	ldr	r3, [r3, #20]
 8007ce0:	f003 0310 	and.w	r3, r3, #16
 8007ce4:	2b10      	cmp	r3, #16
 8007ce6:	d119      	bne.n	8007d1c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f06f 0210 	mvn.w	r2, #16
 8007cf0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2220      	movs	r2, #32
 8007cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2200      	movs	r2, #0
 8007d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2200      	movs	r2, #0
 8007d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	e029      	b.n	8007d70 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d1c:	f7fc fcf2 	bl	8004704 <HAL_GetTick>
 8007d20:	4602      	mov	r2, r0
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	1ad3      	subs	r3, r2, r3
 8007d26:	68ba      	ldr	r2, [r7, #8]
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	d302      	bcc.n	8007d32 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d116      	bne.n	8007d60 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2200      	movs	r2, #0
 8007d36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2220      	movs	r2, #32
 8007d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2200      	movs	r2, #0
 8007d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d4c:	f043 0220 	orr.w	r2, r3, #32
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2200      	movs	r2, #0
 8007d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e007      	b.n	8007d70 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	695b      	ldr	r3, [r3, #20]
 8007d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d6a:	2b40      	cmp	r3, #64	; 0x40
 8007d6c:	d1b5      	bne.n	8007cda <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007d6e:	2300      	movs	r3, #0
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3710      	adds	r7, #16
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	695b      	ldr	r3, [r3, #20]
 8007d86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d8e:	d11b      	bne.n	8007dc8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007d98:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2220      	movs	r2, #32
 8007da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2200      	movs	r2, #0
 8007dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db4:	f043 0204 	orr.w	r2, r3, #4
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	e000      	b.n	8007dca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007dc8:	2300      	movs	r3, #0
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	370c      	adds	r7, #12
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd4:	4770      	bx	lr

08007dd6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007dd6:	b480      	push	{r7}
 8007dd8:	b083      	sub	sp, #12
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007de6:	d103      	bne.n	8007df0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2201      	movs	r2, #1
 8007dec:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007dee:	e007      	b.n	8007e00 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007df8:	d102      	bne.n	8007e00 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2208      	movs	r2, #8
 8007dfe:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007e00:	bf00      	nop
 8007e02:	370c      	adds	r7, #12
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr

08007e0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b084      	sub	sp, #16
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d101      	bne.n	8007e20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	e0cc      	b.n	8007fba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007e20:	4b68      	ldr	r3, [pc, #416]	; (8007fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f003 030f 	and.w	r3, r3, #15
 8007e28:	683a      	ldr	r2, [r7, #0]
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d90c      	bls.n	8007e48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e2e:	4b65      	ldr	r3, [pc, #404]	; (8007fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8007e30:	683a      	ldr	r2, [r7, #0]
 8007e32:	b2d2      	uxtb	r2, r2
 8007e34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e36:	4b63      	ldr	r3, [pc, #396]	; (8007fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f003 030f 	and.w	r3, r3, #15
 8007e3e:	683a      	ldr	r2, [r7, #0]
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d001      	beq.n	8007e48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007e44:	2301      	movs	r3, #1
 8007e46:	e0b8      	b.n	8007fba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f003 0302 	and.w	r3, r3, #2
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d020      	beq.n	8007e96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f003 0304 	and.w	r3, r3, #4
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d005      	beq.n	8007e6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007e60:	4b59      	ldr	r3, [pc, #356]	; (8007fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	4a58      	ldr	r2, [pc, #352]	; (8007fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007e66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007e6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f003 0308 	and.w	r3, r3, #8
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d005      	beq.n	8007e84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007e78:	4b53      	ldr	r3, [pc, #332]	; (8007fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	4a52      	ldr	r2, [pc, #328]	; (8007fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007e7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007e82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e84:	4b50      	ldr	r3, [pc, #320]	; (8007fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	494d      	ldr	r1, [pc, #308]	; (8007fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007e92:	4313      	orrs	r3, r2
 8007e94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f003 0301 	and.w	r3, r3, #1
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d044      	beq.n	8007f2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	d107      	bne.n	8007eba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007eaa:	4b47      	ldr	r3, [pc, #284]	; (8007fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d119      	bne.n	8007eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	e07f      	b.n	8007fba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	2b02      	cmp	r3, #2
 8007ec0:	d003      	beq.n	8007eca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007ec6:	2b03      	cmp	r3, #3
 8007ec8:	d107      	bne.n	8007eda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007eca:	4b3f      	ldr	r3, [pc, #252]	; (8007fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d109      	bne.n	8007eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	e06f      	b.n	8007fba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007eda:	4b3b      	ldr	r3, [pc, #236]	; (8007fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f003 0302 	and.w	r3, r3, #2
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d101      	bne.n	8007eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e067      	b.n	8007fba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007eea:	4b37      	ldr	r3, [pc, #220]	; (8007fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007eec:	689b      	ldr	r3, [r3, #8]
 8007eee:	f023 0203 	bic.w	r2, r3, #3
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	4934      	ldr	r1, [pc, #208]	; (8007fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007efc:	f7fc fc02 	bl	8004704 <HAL_GetTick>
 8007f00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f02:	e00a      	b.n	8007f1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f04:	f7fc fbfe 	bl	8004704 <HAL_GetTick>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	1ad3      	subs	r3, r2, r3
 8007f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d901      	bls.n	8007f1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007f16:	2303      	movs	r3, #3
 8007f18:	e04f      	b.n	8007fba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f1a:	4b2b      	ldr	r3, [pc, #172]	; (8007fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	f003 020c 	and.w	r2, r3, #12
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d1eb      	bne.n	8007f04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007f2c:	4b25      	ldr	r3, [pc, #148]	; (8007fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f003 030f 	and.w	r3, r3, #15
 8007f34:	683a      	ldr	r2, [r7, #0]
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d20c      	bcs.n	8007f54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f3a:	4b22      	ldr	r3, [pc, #136]	; (8007fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8007f3c:	683a      	ldr	r2, [r7, #0]
 8007f3e:	b2d2      	uxtb	r2, r2
 8007f40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f42:	4b20      	ldr	r3, [pc, #128]	; (8007fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f003 030f 	and.w	r3, r3, #15
 8007f4a:	683a      	ldr	r2, [r7, #0]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d001      	beq.n	8007f54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007f50:	2301      	movs	r3, #1
 8007f52:	e032      	b.n	8007fba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f003 0304 	and.w	r3, r3, #4
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d008      	beq.n	8007f72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007f60:	4b19      	ldr	r3, [pc, #100]	; (8007fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	68db      	ldr	r3, [r3, #12]
 8007f6c:	4916      	ldr	r1, [pc, #88]	; (8007fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f003 0308 	and.w	r3, r3, #8
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d009      	beq.n	8007f92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007f7e:	4b12      	ldr	r3, [pc, #72]	; (8007fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	691b      	ldr	r3, [r3, #16]
 8007f8a:	00db      	lsls	r3, r3, #3
 8007f8c:	490e      	ldr	r1, [pc, #56]	; (8007fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007f92:	f000 f887 	bl	80080a4 <HAL_RCC_GetSysClockFreq>
 8007f96:	4602      	mov	r2, r0
 8007f98:	4b0b      	ldr	r3, [pc, #44]	; (8007fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	091b      	lsrs	r3, r3, #4
 8007f9e:	f003 030f 	and.w	r3, r3, #15
 8007fa2:	490a      	ldr	r1, [pc, #40]	; (8007fcc <HAL_RCC_ClockConfig+0x1c0>)
 8007fa4:	5ccb      	ldrb	r3, [r1, r3]
 8007fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8007faa:	4a09      	ldr	r2, [pc, #36]	; (8007fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8007fac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007fae:	4b09      	ldr	r3, [pc, #36]	; (8007fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f7fb fe58 	bl	8003c68 <HAL_InitTick>

  return HAL_OK;
 8007fb8:	2300      	movs	r3, #0
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3710      	adds	r7, #16
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	bf00      	nop
 8007fc4:	40023c00 	.word	0x40023c00
 8007fc8:	40023800 	.word	0x40023800
 8007fcc:	08010e5c 	.word	0x08010e5c
 8007fd0:	20000028 	.word	0x20000028
 8007fd4:	2000002c 	.word	0x2000002c

08007fd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007fdc:	4b03      	ldr	r3, [pc, #12]	; (8007fec <HAL_RCC_GetHCLKFreq+0x14>)
 8007fde:	681b      	ldr	r3, [r3, #0]
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe8:	4770      	bx	lr
 8007fea:	bf00      	nop
 8007fec:	20000028 	.word	0x20000028

08007ff0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007ff4:	f7ff fff0 	bl	8007fd8 <HAL_RCC_GetHCLKFreq>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	4b05      	ldr	r3, [pc, #20]	; (8008010 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	0a9b      	lsrs	r3, r3, #10
 8008000:	f003 0307 	and.w	r3, r3, #7
 8008004:	4903      	ldr	r1, [pc, #12]	; (8008014 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008006:	5ccb      	ldrb	r3, [r1, r3]
 8008008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800800c:	4618      	mov	r0, r3
 800800e:	bd80      	pop	{r7, pc}
 8008010:	40023800 	.word	0x40023800
 8008014:	08010e6c 	.word	0x08010e6c

08008018 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800801c:	f7ff ffdc 	bl	8007fd8 <HAL_RCC_GetHCLKFreq>
 8008020:	4602      	mov	r2, r0
 8008022:	4b05      	ldr	r3, [pc, #20]	; (8008038 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	0b5b      	lsrs	r3, r3, #13
 8008028:	f003 0307 	and.w	r3, r3, #7
 800802c:	4903      	ldr	r1, [pc, #12]	; (800803c <HAL_RCC_GetPCLK2Freq+0x24>)
 800802e:	5ccb      	ldrb	r3, [r1, r3]
 8008030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008034:	4618      	mov	r0, r3
 8008036:	bd80      	pop	{r7, pc}
 8008038:	40023800 	.word	0x40023800
 800803c:	08010e6c 	.word	0x08010e6c

08008040 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008040:	b480      	push	{r7}
 8008042:	b083      	sub	sp, #12
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	220f      	movs	r2, #15
 800804e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008050:	4b12      	ldr	r3, [pc, #72]	; (800809c <HAL_RCC_GetClockConfig+0x5c>)
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	f003 0203 	and.w	r2, r3, #3
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800805c:	4b0f      	ldr	r3, [pc, #60]	; (800809c <HAL_RCC_GetClockConfig+0x5c>)
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008068:	4b0c      	ldr	r3, [pc, #48]	; (800809c <HAL_RCC_GetClockConfig+0x5c>)
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008074:	4b09      	ldr	r3, [pc, #36]	; (800809c <HAL_RCC_GetClockConfig+0x5c>)
 8008076:	689b      	ldr	r3, [r3, #8]
 8008078:	08db      	lsrs	r3, r3, #3
 800807a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008082:	4b07      	ldr	r3, [pc, #28]	; (80080a0 <HAL_RCC_GetClockConfig+0x60>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f003 020f 	and.w	r2, r3, #15
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	601a      	str	r2, [r3, #0]
}
 800808e:	bf00      	nop
 8008090:	370c      	adds	r7, #12
 8008092:	46bd      	mov	sp, r7
 8008094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008098:	4770      	bx	lr
 800809a:	bf00      	nop
 800809c:	40023800 	.word	0x40023800
 80080a0:	40023c00 	.word	0x40023c00

080080a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80080a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080a8:	b0a6      	sub	sp, #152	; 0x98
 80080aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80080ac:	2300      	movs	r3, #0
 80080ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 80080b2:	2300      	movs	r3, #0
 80080b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 80080b8:	2300      	movs	r3, #0
 80080ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 80080be:	2300      	movs	r3, #0
 80080c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 80080c4:	2300      	movs	r3, #0
 80080c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80080ca:	4bc8      	ldr	r3, [pc, #800]	; (80083ec <HAL_RCC_GetSysClockFreq+0x348>)
 80080cc:	689b      	ldr	r3, [r3, #8]
 80080ce:	f003 030c 	and.w	r3, r3, #12
 80080d2:	2b0c      	cmp	r3, #12
 80080d4:	f200 817e 	bhi.w	80083d4 <HAL_RCC_GetSysClockFreq+0x330>
 80080d8:	a201      	add	r2, pc, #4	; (adr r2, 80080e0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80080da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080de:	bf00      	nop
 80080e0:	08008115 	.word	0x08008115
 80080e4:	080083d5 	.word	0x080083d5
 80080e8:	080083d5 	.word	0x080083d5
 80080ec:	080083d5 	.word	0x080083d5
 80080f0:	0800811d 	.word	0x0800811d
 80080f4:	080083d5 	.word	0x080083d5
 80080f8:	080083d5 	.word	0x080083d5
 80080fc:	080083d5 	.word	0x080083d5
 8008100:	08008125 	.word	0x08008125
 8008104:	080083d5 	.word	0x080083d5
 8008108:	080083d5 	.word	0x080083d5
 800810c:	080083d5 	.word	0x080083d5
 8008110:	0800828f 	.word	0x0800828f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008114:	4bb6      	ldr	r3, [pc, #728]	; (80083f0 <HAL_RCC_GetSysClockFreq+0x34c>)
 8008116:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 800811a:	e15f      	b.n	80083dc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800811c:	4bb5      	ldr	r3, [pc, #724]	; (80083f4 <HAL_RCC_GetSysClockFreq+0x350>)
 800811e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8008122:	e15b      	b.n	80083dc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008124:	4bb1      	ldr	r3, [pc, #708]	; (80083ec <HAL_RCC_GetSysClockFreq+0x348>)
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800812c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008130:	4bae      	ldr	r3, [pc, #696]	; (80083ec <HAL_RCC_GetSysClockFreq+0x348>)
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008138:	2b00      	cmp	r3, #0
 800813a:	d031      	beq.n	80081a0 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800813c:	4bab      	ldr	r3, [pc, #684]	; (80083ec <HAL_RCC_GetSysClockFreq+0x348>)
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	099b      	lsrs	r3, r3, #6
 8008142:	2200      	movs	r2, #0
 8008144:	66bb      	str	r3, [r7, #104]	; 0x68
 8008146:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008148:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800814a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800814e:	663b      	str	r3, [r7, #96]	; 0x60
 8008150:	2300      	movs	r3, #0
 8008152:	667b      	str	r3, [r7, #100]	; 0x64
 8008154:	4ba7      	ldr	r3, [pc, #668]	; (80083f4 <HAL_RCC_GetSysClockFreq+0x350>)
 8008156:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800815a:	462a      	mov	r2, r5
 800815c:	fb03 f202 	mul.w	r2, r3, r2
 8008160:	2300      	movs	r3, #0
 8008162:	4621      	mov	r1, r4
 8008164:	fb01 f303 	mul.w	r3, r1, r3
 8008168:	4413      	add	r3, r2
 800816a:	4aa2      	ldr	r2, [pc, #648]	; (80083f4 <HAL_RCC_GetSysClockFreq+0x350>)
 800816c:	4621      	mov	r1, r4
 800816e:	fba1 1202 	umull	r1, r2, r1, r2
 8008172:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008174:	460a      	mov	r2, r1
 8008176:	67ba      	str	r2, [r7, #120]	; 0x78
 8008178:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800817a:	4413      	add	r3, r2
 800817c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800817e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008182:	2200      	movs	r2, #0
 8008184:	65bb      	str	r3, [r7, #88]	; 0x58
 8008186:	65fa      	str	r2, [r7, #92]	; 0x5c
 8008188:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800818c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8008190:	f7f8 fcb4 	bl	8000afc <__aeabi_uldivmod>
 8008194:	4602      	mov	r2, r0
 8008196:	460b      	mov	r3, r1
 8008198:	4613      	mov	r3, r2
 800819a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800819e:	e064      	b.n	800826a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80081a0:	4b92      	ldr	r3, [pc, #584]	; (80083ec <HAL_RCC_GetSysClockFreq+0x348>)
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	099b      	lsrs	r3, r3, #6
 80081a6:	2200      	movs	r2, #0
 80081a8:	653b      	str	r3, [r7, #80]	; 0x50
 80081aa:	657a      	str	r2, [r7, #84]	; 0x54
 80081ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80081b4:	2300      	movs	r3, #0
 80081b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80081b8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80081bc:	4622      	mov	r2, r4
 80081be:	462b      	mov	r3, r5
 80081c0:	f04f 0000 	mov.w	r0, #0
 80081c4:	f04f 0100 	mov.w	r1, #0
 80081c8:	0159      	lsls	r1, r3, #5
 80081ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80081ce:	0150      	lsls	r0, r2, #5
 80081d0:	4602      	mov	r2, r0
 80081d2:	460b      	mov	r3, r1
 80081d4:	4621      	mov	r1, r4
 80081d6:	1a51      	subs	r1, r2, r1
 80081d8:	6139      	str	r1, [r7, #16]
 80081da:	4629      	mov	r1, r5
 80081dc:	eb63 0301 	sbc.w	r3, r3, r1
 80081e0:	617b      	str	r3, [r7, #20]
 80081e2:	f04f 0200 	mov.w	r2, #0
 80081e6:	f04f 0300 	mov.w	r3, #0
 80081ea:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80081ee:	4659      	mov	r1, fp
 80081f0:	018b      	lsls	r3, r1, #6
 80081f2:	4651      	mov	r1, sl
 80081f4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80081f8:	4651      	mov	r1, sl
 80081fa:	018a      	lsls	r2, r1, #6
 80081fc:	4651      	mov	r1, sl
 80081fe:	ebb2 0801 	subs.w	r8, r2, r1
 8008202:	4659      	mov	r1, fp
 8008204:	eb63 0901 	sbc.w	r9, r3, r1
 8008208:	f04f 0200 	mov.w	r2, #0
 800820c:	f04f 0300 	mov.w	r3, #0
 8008210:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008214:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008218:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800821c:	4690      	mov	r8, r2
 800821e:	4699      	mov	r9, r3
 8008220:	4623      	mov	r3, r4
 8008222:	eb18 0303 	adds.w	r3, r8, r3
 8008226:	60bb      	str	r3, [r7, #8]
 8008228:	462b      	mov	r3, r5
 800822a:	eb49 0303 	adc.w	r3, r9, r3
 800822e:	60fb      	str	r3, [r7, #12]
 8008230:	f04f 0200 	mov.w	r2, #0
 8008234:	f04f 0300 	mov.w	r3, #0
 8008238:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800823c:	4629      	mov	r1, r5
 800823e:	028b      	lsls	r3, r1, #10
 8008240:	4621      	mov	r1, r4
 8008242:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008246:	4621      	mov	r1, r4
 8008248:	028a      	lsls	r2, r1, #10
 800824a:	4610      	mov	r0, r2
 800824c:	4619      	mov	r1, r3
 800824e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008252:	2200      	movs	r2, #0
 8008254:	643b      	str	r3, [r7, #64]	; 0x40
 8008256:	647a      	str	r2, [r7, #68]	; 0x44
 8008258:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800825c:	f7f8 fc4e 	bl	8000afc <__aeabi_uldivmod>
 8008260:	4602      	mov	r2, r0
 8008262:	460b      	mov	r3, r1
 8008264:	4613      	mov	r3, r2
 8008266:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800826a:	4b60      	ldr	r3, [pc, #384]	; (80083ec <HAL_RCC_GetSysClockFreq+0x348>)
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	0c1b      	lsrs	r3, r3, #16
 8008270:	f003 0303 	and.w	r3, r3, #3
 8008274:	3301      	adds	r3, #1
 8008276:	005b      	lsls	r3, r3, #1
 8008278:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 800827c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008280:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008284:	fbb2 f3f3 	udiv	r3, r2, r3
 8008288:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800828c:	e0a6      	b.n	80083dc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800828e:	4b57      	ldr	r3, [pc, #348]	; (80083ec <HAL_RCC_GetSysClockFreq+0x348>)
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008296:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800829a:	4b54      	ldr	r3, [pc, #336]	; (80083ec <HAL_RCC_GetSysClockFreq+0x348>)
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d02a      	beq.n	80082fc <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80082a6:	4b51      	ldr	r3, [pc, #324]	; (80083ec <HAL_RCC_GetSysClockFreq+0x348>)
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	099b      	lsrs	r3, r3, #6
 80082ac:	2200      	movs	r2, #0
 80082ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80082b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80082b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80082b8:	2100      	movs	r1, #0
 80082ba:	4b4e      	ldr	r3, [pc, #312]	; (80083f4 <HAL_RCC_GetSysClockFreq+0x350>)
 80082bc:	fb03 f201 	mul.w	r2, r3, r1
 80082c0:	2300      	movs	r3, #0
 80082c2:	fb00 f303 	mul.w	r3, r0, r3
 80082c6:	4413      	add	r3, r2
 80082c8:	4a4a      	ldr	r2, [pc, #296]	; (80083f4 <HAL_RCC_GetSysClockFreq+0x350>)
 80082ca:	fba0 1202 	umull	r1, r2, r0, r2
 80082ce:	677a      	str	r2, [r7, #116]	; 0x74
 80082d0:	460a      	mov	r2, r1
 80082d2:	673a      	str	r2, [r7, #112]	; 0x70
 80082d4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80082d6:	4413      	add	r3, r2
 80082d8:	677b      	str	r3, [r7, #116]	; 0x74
 80082da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80082de:	2200      	movs	r2, #0
 80082e0:	633b      	str	r3, [r7, #48]	; 0x30
 80082e2:	637a      	str	r2, [r7, #52]	; 0x34
 80082e4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80082e8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80082ec:	f7f8 fc06 	bl	8000afc <__aeabi_uldivmod>
 80082f0:	4602      	mov	r2, r0
 80082f2:	460b      	mov	r3, r1
 80082f4:	4613      	mov	r3, r2
 80082f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80082fa:	e05b      	b.n	80083b4 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80082fc:	4b3b      	ldr	r3, [pc, #236]	; (80083ec <HAL_RCC_GetSysClockFreq+0x348>)
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	099b      	lsrs	r3, r3, #6
 8008302:	2200      	movs	r2, #0
 8008304:	62bb      	str	r3, [r7, #40]	; 0x28
 8008306:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800830a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800830e:	623b      	str	r3, [r7, #32]
 8008310:	2300      	movs	r3, #0
 8008312:	627b      	str	r3, [r7, #36]	; 0x24
 8008314:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008318:	4642      	mov	r2, r8
 800831a:	464b      	mov	r3, r9
 800831c:	f04f 0000 	mov.w	r0, #0
 8008320:	f04f 0100 	mov.w	r1, #0
 8008324:	0159      	lsls	r1, r3, #5
 8008326:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800832a:	0150      	lsls	r0, r2, #5
 800832c:	4602      	mov	r2, r0
 800832e:	460b      	mov	r3, r1
 8008330:	4641      	mov	r1, r8
 8008332:	ebb2 0a01 	subs.w	sl, r2, r1
 8008336:	4649      	mov	r1, r9
 8008338:	eb63 0b01 	sbc.w	fp, r3, r1
 800833c:	f04f 0200 	mov.w	r2, #0
 8008340:	f04f 0300 	mov.w	r3, #0
 8008344:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008348:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800834c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008350:	ebb2 040a 	subs.w	r4, r2, sl
 8008354:	eb63 050b 	sbc.w	r5, r3, fp
 8008358:	f04f 0200 	mov.w	r2, #0
 800835c:	f04f 0300 	mov.w	r3, #0
 8008360:	00eb      	lsls	r3, r5, #3
 8008362:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008366:	00e2      	lsls	r2, r4, #3
 8008368:	4614      	mov	r4, r2
 800836a:	461d      	mov	r5, r3
 800836c:	4643      	mov	r3, r8
 800836e:	18e3      	adds	r3, r4, r3
 8008370:	603b      	str	r3, [r7, #0]
 8008372:	464b      	mov	r3, r9
 8008374:	eb45 0303 	adc.w	r3, r5, r3
 8008378:	607b      	str	r3, [r7, #4]
 800837a:	f04f 0200 	mov.w	r2, #0
 800837e:	f04f 0300 	mov.w	r3, #0
 8008382:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008386:	4629      	mov	r1, r5
 8008388:	028b      	lsls	r3, r1, #10
 800838a:	4621      	mov	r1, r4
 800838c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008390:	4621      	mov	r1, r4
 8008392:	028a      	lsls	r2, r1, #10
 8008394:	4610      	mov	r0, r2
 8008396:	4619      	mov	r1, r3
 8008398:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800839c:	2200      	movs	r2, #0
 800839e:	61bb      	str	r3, [r7, #24]
 80083a0:	61fa      	str	r2, [r7, #28]
 80083a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80083a6:	f7f8 fba9 	bl	8000afc <__aeabi_uldivmod>
 80083aa:	4602      	mov	r2, r0
 80083ac:	460b      	mov	r3, r1
 80083ae:	4613      	mov	r3, r2
 80083b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80083b4:	4b0d      	ldr	r3, [pc, #52]	; (80083ec <HAL_RCC_GetSysClockFreq+0x348>)
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	0f1b      	lsrs	r3, r3, #28
 80083ba:	f003 0307 	and.w	r3, r3, #7
 80083be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 80083c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80083c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80083ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80083ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80083d2:	e003      	b.n	80083dc <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80083d4:	4b06      	ldr	r3, [pc, #24]	; (80083f0 <HAL_RCC_GetSysClockFreq+0x34c>)
 80083d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80083da:	bf00      	nop
    }
  }
  return sysclockfreq;
 80083dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3798      	adds	r7, #152	; 0x98
 80083e4:	46bd      	mov	sp, r7
 80083e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80083ea:	bf00      	nop
 80083ec:	40023800 	.word	0x40023800
 80083f0:	00f42400 	.word	0x00f42400
 80083f4:	017d7840 	.word	0x017d7840

080083f8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b086      	sub	sp, #24
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d101      	bne.n	800840a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008406:	2301      	movs	r3, #1
 8008408:	e28d      	b.n	8008926 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f003 0301 	and.w	r3, r3, #1
 8008412:	2b00      	cmp	r3, #0
 8008414:	f000 8083 	beq.w	800851e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008418:	4b94      	ldr	r3, [pc, #592]	; (800866c <HAL_RCC_OscConfig+0x274>)
 800841a:	689b      	ldr	r3, [r3, #8]
 800841c:	f003 030c 	and.w	r3, r3, #12
 8008420:	2b04      	cmp	r3, #4
 8008422:	d019      	beq.n	8008458 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008424:	4b91      	ldr	r3, [pc, #580]	; (800866c <HAL_RCC_OscConfig+0x274>)
 8008426:	689b      	ldr	r3, [r3, #8]
 8008428:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800842c:	2b08      	cmp	r3, #8
 800842e:	d106      	bne.n	800843e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008430:	4b8e      	ldr	r3, [pc, #568]	; (800866c <HAL_RCC_OscConfig+0x274>)
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008438:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800843c:	d00c      	beq.n	8008458 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800843e:	4b8b      	ldr	r3, [pc, #556]	; (800866c <HAL_RCC_OscConfig+0x274>)
 8008440:	689b      	ldr	r3, [r3, #8]
 8008442:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008446:	2b0c      	cmp	r3, #12
 8008448:	d112      	bne.n	8008470 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800844a:	4b88      	ldr	r3, [pc, #544]	; (800866c <HAL_RCC_OscConfig+0x274>)
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008452:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008456:	d10b      	bne.n	8008470 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008458:	4b84      	ldr	r3, [pc, #528]	; (800866c <HAL_RCC_OscConfig+0x274>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008460:	2b00      	cmp	r3, #0
 8008462:	d05b      	beq.n	800851c <HAL_RCC_OscConfig+0x124>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d157      	bne.n	800851c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800846c:	2301      	movs	r3, #1
 800846e:	e25a      	b.n	8008926 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008478:	d106      	bne.n	8008488 <HAL_RCC_OscConfig+0x90>
 800847a:	4b7c      	ldr	r3, [pc, #496]	; (800866c <HAL_RCC_OscConfig+0x274>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4a7b      	ldr	r2, [pc, #492]	; (800866c <HAL_RCC_OscConfig+0x274>)
 8008480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008484:	6013      	str	r3, [r2, #0]
 8008486:	e01d      	b.n	80084c4 <HAL_RCC_OscConfig+0xcc>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008490:	d10c      	bne.n	80084ac <HAL_RCC_OscConfig+0xb4>
 8008492:	4b76      	ldr	r3, [pc, #472]	; (800866c <HAL_RCC_OscConfig+0x274>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a75      	ldr	r2, [pc, #468]	; (800866c <HAL_RCC_OscConfig+0x274>)
 8008498:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800849c:	6013      	str	r3, [r2, #0]
 800849e:	4b73      	ldr	r3, [pc, #460]	; (800866c <HAL_RCC_OscConfig+0x274>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4a72      	ldr	r2, [pc, #456]	; (800866c <HAL_RCC_OscConfig+0x274>)
 80084a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084a8:	6013      	str	r3, [r2, #0]
 80084aa:	e00b      	b.n	80084c4 <HAL_RCC_OscConfig+0xcc>
 80084ac:	4b6f      	ldr	r3, [pc, #444]	; (800866c <HAL_RCC_OscConfig+0x274>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a6e      	ldr	r2, [pc, #440]	; (800866c <HAL_RCC_OscConfig+0x274>)
 80084b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084b6:	6013      	str	r3, [r2, #0]
 80084b8:	4b6c      	ldr	r3, [pc, #432]	; (800866c <HAL_RCC_OscConfig+0x274>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a6b      	ldr	r2, [pc, #428]	; (800866c <HAL_RCC_OscConfig+0x274>)
 80084be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80084c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d013      	beq.n	80084f4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084cc:	f7fc f91a 	bl	8004704 <HAL_GetTick>
 80084d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80084d2:	e008      	b.n	80084e6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80084d4:	f7fc f916 	bl	8004704 <HAL_GetTick>
 80084d8:	4602      	mov	r2, r0
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	1ad3      	subs	r3, r2, r3
 80084de:	2b64      	cmp	r3, #100	; 0x64
 80084e0:	d901      	bls.n	80084e6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80084e2:	2303      	movs	r3, #3
 80084e4:	e21f      	b.n	8008926 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80084e6:	4b61      	ldr	r3, [pc, #388]	; (800866c <HAL_RCC_OscConfig+0x274>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d0f0      	beq.n	80084d4 <HAL_RCC_OscConfig+0xdc>
 80084f2:	e014      	b.n	800851e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084f4:	f7fc f906 	bl	8004704 <HAL_GetTick>
 80084f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80084fa:	e008      	b.n	800850e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80084fc:	f7fc f902 	bl	8004704 <HAL_GetTick>
 8008500:	4602      	mov	r2, r0
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	1ad3      	subs	r3, r2, r3
 8008506:	2b64      	cmp	r3, #100	; 0x64
 8008508:	d901      	bls.n	800850e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800850a:	2303      	movs	r3, #3
 800850c:	e20b      	b.n	8008926 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800850e:	4b57      	ldr	r3, [pc, #348]	; (800866c <HAL_RCC_OscConfig+0x274>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008516:	2b00      	cmp	r3, #0
 8008518:	d1f0      	bne.n	80084fc <HAL_RCC_OscConfig+0x104>
 800851a:	e000      	b.n	800851e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800851c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f003 0302 	and.w	r3, r3, #2
 8008526:	2b00      	cmp	r3, #0
 8008528:	d06f      	beq.n	800860a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800852a:	4b50      	ldr	r3, [pc, #320]	; (800866c <HAL_RCC_OscConfig+0x274>)
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	f003 030c 	and.w	r3, r3, #12
 8008532:	2b00      	cmp	r3, #0
 8008534:	d017      	beq.n	8008566 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008536:	4b4d      	ldr	r3, [pc, #308]	; (800866c <HAL_RCC_OscConfig+0x274>)
 8008538:	689b      	ldr	r3, [r3, #8]
 800853a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800853e:	2b08      	cmp	r3, #8
 8008540:	d105      	bne.n	800854e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008542:	4b4a      	ldr	r3, [pc, #296]	; (800866c <HAL_RCC_OscConfig+0x274>)
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800854a:	2b00      	cmp	r3, #0
 800854c:	d00b      	beq.n	8008566 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800854e:	4b47      	ldr	r3, [pc, #284]	; (800866c <HAL_RCC_OscConfig+0x274>)
 8008550:	689b      	ldr	r3, [r3, #8]
 8008552:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008556:	2b0c      	cmp	r3, #12
 8008558:	d11c      	bne.n	8008594 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800855a:	4b44      	ldr	r3, [pc, #272]	; (800866c <HAL_RCC_OscConfig+0x274>)
 800855c:	685b      	ldr	r3, [r3, #4]
 800855e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008562:	2b00      	cmp	r3, #0
 8008564:	d116      	bne.n	8008594 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008566:	4b41      	ldr	r3, [pc, #260]	; (800866c <HAL_RCC_OscConfig+0x274>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f003 0302 	and.w	r3, r3, #2
 800856e:	2b00      	cmp	r3, #0
 8008570:	d005      	beq.n	800857e <HAL_RCC_OscConfig+0x186>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	68db      	ldr	r3, [r3, #12]
 8008576:	2b01      	cmp	r3, #1
 8008578:	d001      	beq.n	800857e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800857a:	2301      	movs	r3, #1
 800857c:	e1d3      	b.n	8008926 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800857e:	4b3b      	ldr	r3, [pc, #236]	; (800866c <HAL_RCC_OscConfig+0x274>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	691b      	ldr	r3, [r3, #16]
 800858a:	00db      	lsls	r3, r3, #3
 800858c:	4937      	ldr	r1, [pc, #220]	; (800866c <HAL_RCC_OscConfig+0x274>)
 800858e:	4313      	orrs	r3, r2
 8008590:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008592:	e03a      	b.n	800860a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	68db      	ldr	r3, [r3, #12]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d020      	beq.n	80085de <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800859c:	4b34      	ldr	r3, [pc, #208]	; (8008670 <HAL_RCC_OscConfig+0x278>)
 800859e:	2201      	movs	r2, #1
 80085a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085a2:	f7fc f8af 	bl	8004704 <HAL_GetTick>
 80085a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80085a8:	e008      	b.n	80085bc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80085aa:	f7fc f8ab 	bl	8004704 <HAL_GetTick>
 80085ae:	4602      	mov	r2, r0
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	1ad3      	subs	r3, r2, r3
 80085b4:	2b02      	cmp	r3, #2
 80085b6:	d901      	bls.n	80085bc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80085b8:	2303      	movs	r3, #3
 80085ba:	e1b4      	b.n	8008926 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80085bc:	4b2b      	ldr	r3, [pc, #172]	; (800866c <HAL_RCC_OscConfig+0x274>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f003 0302 	and.w	r3, r3, #2
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d0f0      	beq.n	80085aa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085c8:	4b28      	ldr	r3, [pc, #160]	; (800866c <HAL_RCC_OscConfig+0x274>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	691b      	ldr	r3, [r3, #16]
 80085d4:	00db      	lsls	r3, r3, #3
 80085d6:	4925      	ldr	r1, [pc, #148]	; (800866c <HAL_RCC_OscConfig+0x274>)
 80085d8:	4313      	orrs	r3, r2
 80085da:	600b      	str	r3, [r1, #0]
 80085dc:	e015      	b.n	800860a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80085de:	4b24      	ldr	r3, [pc, #144]	; (8008670 <HAL_RCC_OscConfig+0x278>)
 80085e0:	2200      	movs	r2, #0
 80085e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085e4:	f7fc f88e 	bl	8004704 <HAL_GetTick>
 80085e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80085ea:	e008      	b.n	80085fe <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80085ec:	f7fc f88a 	bl	8004704 <HAL_GetTick>
 80085f0:	4602      	mov	r2, r0
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	1ad3      	subs	r3, r2, r3
 80085f6:	2b02      	cmp	r3, #2
 80085f8:	d901      	bls.n	80085fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80085fa:	2303      	movs	r3, #3
 80085fc:	e193      	b.n	8008926 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80085fe:	4b1b      	ldr	r3, [pc, #108]	; (800866c <HAL_RCC_OscConfig+0x274>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f003 0302 	and.w	r3, r3, #2
 8008606:	2b00      	cmp	r3, #0
 8008608:	d1f0      	bne.n	80085ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f003 0308 	and.w	r3, r3, #8
 8008612:	2b00      	cmp	r3, #0
 8008614:	d036      	beq.n	8008684 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	695b      	ldr	r3, [r3, #20]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d016      	beq.n	800864c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800861e:	4b15      	ldr	r3, [pc, #84]	; (8008674 <HAL_RCC_OscConfig+0x27c>)
 8008620:	2201      	movs	r2, #1
 8008622:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008624:	f7fc f86e 	bl	8004704 <HAL_GetTick>
 8008628:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800862a:	e008      	b.n	800863e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800862c:	f7fc f86a 	bl	8004704 <HAL_GetTick>
 8008630:	4602      	mov	r2, r0
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	1ad3      	subs	r3, r2, r3
 8008636:	2b02      	cmp	r3, #2
 8008638:	d901      	bls.n	800863e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800863a:	2303      	movs	r3, #3
 800863c:	e173      	b.n	8008926 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800863e:	4b0b      	ldr	r3, [pc, #44]	; (800866c <HAL_RCC_OscConfig+0x274>)
 8008640:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008642:	f003 0302 	and.w	r3, r3, #2
 8008646:	2b00      	cmp	r3, #0
 8008648:	d0f0      	beq.n	800862c <HAL_RCC_OscConfig+0x234>
 800864a:	e01b      	b.n	8008684 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800864c:	4b09      	ldr	r3, [pc, #36]	; (8008674 <HAL_RCC_OscConfig+0x27c>)
 800864e:	2200      	movs	r2, #0
 8008650:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008652:	f7fc f857 	bl	8004704 <HAL_GetTick>
 8008656:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008658:	e00e      	b.n	8008678 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800865a:	f7fc f853 	bl	8004704 <HAL_GetTick>
 800865e:	4602      	mov	r2, r0
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	1ad3      	subs	r3, r2, r3
 8008664:	2b02      	cmp	r3, #2
 8008666:	d907      	bls.n	8008678 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8008668:	2303      	movs	r3, #3
 800866a:	e15c      	b.n	8008926 <HAL_RCC_OscConfig+0x52e>
 800866c:	40023800 	.word	0x40023800
 8008670:	42470000 	.word	0x42470000
 8008674:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008678:	4b8a      	ldr	r3, [pc, #552]	; (80088a4 <HAL_RCC_OscConfig+0x4ac>)
 800867a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800867c:	f003 0302 	and.w	r3, r3, #2
 8008680:	2b00      	cmp	r3, #0
 8008682:	d1ea      	bne.n	800865a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f003 0304 	and.w	r3, r3, #4
 800868c:	2b00      	cmp	r3, #0
 800868e:	f000 8097 	beq.w	80087c0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008692:	2300      	movs	r3, #0
 8008694:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008696:	4b83      	ldr	r3, [pc, #524]	; (80088a4 <HAL_RCC_OscConfig+0x4ac>)
 8008698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800869a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d10f      	bne.n	80086c2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80086a2:	2300      	movs	r3, #0
 80086a4:	60bb      	str	r3, [r7, #8]
 80086a6:	4b7f      	ldr	r3, [pc, #508]	; (80088a4 <HAL_RCC_OscConfig+0x4ac>)
 80086a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086aa:	4a7e      	ldr	r2, [pc, #504]	; (80088a4 <HAL_RCC_OscConfig+0x4ac>)
 80086ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086b0:	6413      	str	r3, [r2, #64]	; 0x40
 80086b2:	4b7c      	ldr	r3, [pc, #496]	; (80088a4 <HAL_RCC_OscConfig+0x4ac>)
 80086b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086ba:	60bb      	str	r3, [r7, #8]
 80086bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80086be:	2301      	movs	r3, #1
 80086c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80086c2:	4b79      	ldr	r3, [pc, #484]	; (80088a8 <HAL_RCC_OscConfig+0x4b0>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d118      	bne.n	8008700 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80086ce:	4b76      	ldr	r3, [pc, #472]	; (80088a8 <HAL_RCC_OscConfig+0x4b0>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4a75      	ldr	r2, [pc, #468]	; (80088a8 <HAL_RCC_OscConfig+0x4b0>)
 80086d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80086da:	f7fc f813 	bl	8004704 <HAL_GetTick>
 80086de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80086e0:	e008      	b.n	80086f4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80086e2:	f7fc f80f 	bl	8004704 <HAL_GetTick>
 80086e6:	4602      	mov	r2, r0
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	1ad3      	subs	r3, r2, r3
 80086ec:	2b02      	cmp	r3, #2
 80086ee:	d901      	bls.n	80086f4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80086f0:	2303      	movs	r3, #3
 80086f2:	e118      	b.n	8008926 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80086f4:	4b6c      	ldr	r3, [pc, #432]	; (80088a8 <HAL_RCC_OscConfig+0x4b0>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d0f0      	beq.n	80086e2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	689b      	ldr	r3, [r3, #8]
 8008704:	2b01      	cmp	r3, #1
 8008706:	d106      	bne.n	8008716 <HAL_RCC_OscConfig+0x31e>
 8008708:	4b66      	ldr	r3, [pc, #408]	; (80088a4 <HAL_RCC_OscConfig+0x4ac>)
 800870a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800870c:	4a65      	ldr	r2, [pc, #404]	; (80088a4 <HAL_RCC_OscConfig+0x4ac>)
 800870e:	f043 0301 	orr.w	r3, r3, #1
 8008712:	6713      	str	r3, [r2, #112]	; 0x70
 8008714:	e01c      	b.n	8008750 <HAL_RCC_OscConfig+0x358>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	689b      	ldr	r3, [r3, #8]
 800871a:	2b05      	cmp	r3, #5
 800871c:	d10c      	bne.n	8008738 <HAL_RCC_OscConfig+0x340>
 800871e:	4b61      	ldr	r3, [pc, #388]	; (80088a4 <HAL_RCC_OscConfig+0x4ac>)
 8008720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008722:	4a60      	ldr	r2, [pc, #384]	; (80088a4 <HAL_RCC_OscConfig+0x4ac>)
 8008724:	f043 0304 	orr.w	r3, r3, #4
 8008728:	6713      	str	r3, [r2, #112]	; 0x70
 800872a:	4b5e      	ldr	r3, [pc, #376]	; (80088a4 <HAL_RCC_OscConfig+0x4ac>)
 800872c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800872e:	4a5d      	ldr	r2, [pc, #372]	; (80088a4 <HAL_RCC_OscConfig+0x4ac>)
 8008730:	f043 0301 	orr.w	r3, r3, #1
 8008734:	6713      	str	r3, [r2, #112]	; 0x70
 8008736:	e00b      	b.n	8008750 <HAL_RCC_OscConfig+0x358>
 8008738:	4b5a      	ldr	r3, [pc, #360]	; (80088a4 <HAL_RCC_OscConfig+0x4ac>)
 800873a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800873c:	4a59      	ldr	r2, [pc, #356]	; (80088a4 <HAL_RCC_OscConfig+0x4ac>)
 800873e:	f023 0301 	bic.w	r3, r3, #1
 8008742:	6713      	str	r3, [r2, #112]	; 0x70
 8008744:	4b57      	ldr	r3, [pc, #348]	; (80088a4 <HAL_RCC_OscConfig+0x4ac>)
 8008746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008748:	4a56      	ldr	r2, [pc, #344]	; (80088a4 <HAL_RCC_OscConfig+0x4ac>)
 800874a:	f023 0304 	bic.w	r3, r3, #4
 800874e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	689b      	ldr	r3, [r3, #8]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d015      	beq.n	8008784 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008758:	f7fb ffd4 	bl	8004704 <HAL_GetTick>
 800875c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800875e:	e00a      	b.n	8008776 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008760:	f7fb ffd0 	bl	8004704 <HAL_GetTick>
 8008764:	4602      	mov	r2, r0
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	1ad3      	subs	r3, r2, r3
 800876a:	f241 3288 	movw	r2, #5000	; 0x1388
 800876e:	4293      	cmp	r3, r2
 8008770:	d901      	bls.n	8008776 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8008772:	2303      	movs	r3, #3
 8008774:	e0d7      	b.n	8008926 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008776:	4b4b      	ldr	r3, [pc, #300]	; (80088a4 <HAL_RCC_OscConfig+0x4ac>)
 8008778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800877a:	f003 0302 	and.w	r3, r3, #2
 800877e:	2b00      	cmp	r3, #0
 8008780:	d0ee      	beq.n	8008760 <HAL_RCC_OscConfig+0x368>
 8008782:	e014      	b.n	80087ae <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008784:	f7fb ffbe 	bl	8004704 <HAL_GetTick>
 8008788:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800878a:	e00a      	b.n	80087a2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800878c:	f7fb ffba 	bl	8004704 <HAL_GetTick>
 8008790:	4602      	mov	r2, r0
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	1ad3      	subs	r3, r2, r3
 8008796:	f241 3288 	movw	r2, #5000	; 0x1388
 800879a:	4293      	cmp	r3, r2
 800879c:	d901      	bls.n	80087a2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800879e:	2303      	movs	r3, #3
 80087a0:	e0c1      	b.n	8008926 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80087a2:	4b40      	ldr	r3, [pc, #256]	; (80088a4 <HAL_RCC_OscConfig+0x4ac>)
 80087a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087a6:	f003 0302 	and.w	r3, r3, #2
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d1ee      	bne.n	800878c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80087ae:	7dfb      	ldrb	r3, [r7, #23]
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	d105      	bne.n	80087c0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80087b4:	4b3b      	ldr	r3, [pc, #236]	; (80088a4 <HAL_RCC_OscConfig+0x4ac>)
 80087b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087b8:	4a3a      	ldr	r2, [pc, #232]	; (80088a4 <HAL_RCC_OscConfig+0x4ac>)
 80087ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80087be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	699b      	ldr	r3, [r3, #24]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	f000 80ad 	beq.w	8008924 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80087ca:	4b36      	ldr	r3, [pc, #216]	; (80088a4 <HAL_RCC_OscConfig+0x4ac>)
 80087cc:	689b      	ldr	r3, [r3, #8]
 80087ce:	f003 030c 	and.w	r3, r3, #12
 80087d2:	2b08      	cmp	r3, #8
 80087d4:	d060      	beq.n	8008898 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	699b      	ldr	r3, [r3, #24]
 80087da:	2b02      	cmp	r3, #2
 80087dc:	d145      	bne.n	800886a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80087de:	4b33      	ldr	r3, [pc, #204]	; (80088ac <HAL_RCC_OscConfig+0x4b4>)
 80087e0:	2200      	movs	r2, #0
 80087e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087e4:	f7fb ff8e 	bl	8004704 <HAL_GetTick>
 80087e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087ea:	e008      	b.n	80087fe <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80087ec:	f7fb ff8a 	bl	8004704 <HAL_GetTick>
 80087f0:	4602      	mov	r2, r0
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	1ad3      	subs	r3, r2, r3
 80087f6:	2b02      	cmp	r3, #2
 80087f8:	d901      	bls.n	80087fe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80087fa:	2303      	movs	r3, #3
 80087fc:	e093      	b.n	8008926 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087fe:	4b29      	ldr	r3, [pc, #164]	; (80088a4 <HAL_RCC_OscConfig+0x4ac>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008806:	2b00      	cmp	r3, #0
 8008808:	d1f0      	bne.n	80087ec <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	69da      	ldr	r2, [r3, #28]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6a1b      	ldr	r3, [r3, #32]
 8008812:	431a      	orrs	r2, r3
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008818:	019b      	lsls	r3, r3, #6
 800881a:	431a      	orrs	r2, r3
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008820:	085b      	lsrs	r3, r3, #1
 8008822:	3b01      	subs	r3, #1
 8008824:	041b      	lsls	r3, r3, #16
 8008826:	431a      	orrs	r2, r3
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800882c:	061b      	lsls	r3, r3, #24
 800882e:	431a      	orrs	r2, r3
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008834:	071b      	lsls	r3, r3, #28
 8008836:	491b      	ldr	r1, [pc, #108]	; (80088a4 <HAL_RCC_OscConfig+0x4ac>)
 8008838:	4313      	orrs	r3, r2
 800883a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800883c:	4b1b      	ldr	r3, [pc, #108]	; (80088ac <HAL_RCC_OscConfig+0x4b4>)
 800883e:	2201      	movs	r2, #1
 8008840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008842:	f7fb ff5f 	bl	8004704 <HAL_GetTick>
 8008846:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008848:	e008      	b.n	800885c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800884a:	f7fb ff5b 	bl	8004704 <HAL_GetTick>
 800884e:	4602      	mov	r2, r0
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	1ad3      	subs	r3, r2, r3
 8008854:	2b02      	cmp	r3, #2
 8008856:	d901      	bls.n	800885c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8008858:	2303      	movs	r3, #3
 800885a:	e064      	b.n	8008926 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800885c:	4b11      	ldr	r3, [pc, #68]	; (80088a4 <HAL_RCC_OscConfig+0x4ac>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008864:	2b00      	cmp	r3, #0
 8008866:	d0f0      	beq.n	800884a <HAL_RCC_OscConfig+0x452>
 8008868:	e05c      	b.n	8008924 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800886a:	4b10      	ldr	r3, [pc, #64]	; (80088ac <HAL_RCC_OscConfig+0x4b4>)
 800886c:	2200      	movs	r2, #0
 800886e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008870:	f7fb ff48 	bl	8004704 <HAL_GetTick>
 8008874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008876:	e008      	b.n	800888a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008878:	f7fb ff44 	bl	8004704 <HAL_GetTick>
 800887c:	4602      	mov	r2, r0
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	1ad3      	subs	r3, r2, r3
 8008882:	2b02      	cmp	r3, #2
 8008884:	d901      	bls.n	800888a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8008886:	2303      	movs	r3, #3
 8008888:	e04d      	b.n	8008926 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800888a:	4b06      	ldr	r3, [pc, #24]	; (80088a4 <HAL_RCC_OscConfig+0x4ac>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008892:	2b00      	cmp	r3, #0
 8008894:	d1f0      	bne.n	8008878 <HAL_RCC_OscConfig+0x480>
 8008896:	e045      	b.n	8008924 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	699b      	ldr	r3, [r3, #24]
 800889c:	2b01      	cmp	r3, #1
 800889e:	d107      	bne.n	80088b0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80088a0:	2301      	movs	r3, #1
 80088a2:	e040      	b.n	8008926 <HAL_RCC_OscConfig+0x52e>
 80088a4:	40023800 	.word	0x40023800
 80088a8:	40007000 	.word	0x40007000
 80088ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80088b0:	4b1f      	ldr	r3, [pc, #124]	; (8008930 <HAL_RCC_OscConfig+0x538>)
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	699b      	ldr	r3, [r3, #24]
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d030      	beq.n	8008920 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d129      	bne.n	8008920 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80088d6:	429a      	cmp	r2, r3
 80088d8:	d122      	bne.n	8008920 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80088da:	68fa      	ldr	r2, [r7, #12]
 80088dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80088e0:	4013      	ands	r3, r2
 80088e2:	687a      	ldr	r2, [r7, #4]
 80088e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80088e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d119      	bne.n	8008920 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088f6:	085b      	lsrs	r3, r3, #1
 80088f8:	3b01      	subs	r3, #1
 80088fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80088fc:	429a      	cmp	r2, r3
 80088fe:	d10f      	bne.n	8008920 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800890a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800890c:	429a      	cmp	r2, r3
 800890e:	d107      	bne.n	8008920 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800891a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800891c:	429a      	cmp	r2, r3
 800891e:	d001      	beq.n	8008924 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8008920:	2301      	movs	r3, #1
 8008922:	e000      	b.n	8008926 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8008924:	2300      	movs	r3, #0
}
 8008926:	4618      	mov	r0, r3
 8008928:	3718      	adds	r7, #24
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
 800892e:	bf00      	nop
 8008930:	40023800 	.word	0x40023800

08008934 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b082      	sub	sp, #8
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d101      	bne.n	8008946 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008942:	2301      	movs	r3, #1
 8008944:	e07b      	b.n	8008a3e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800894a:	2b00      	cmp	r3, #0
 800894c:	d108      	bne.n	8008960 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008956:	d009      	beq.n	800896c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2200      	movs	r2, #0
 800895c:	61da      	str	r2, [r3, #28]
 800895e:	e005      	b.n	800896c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2200      	movs	r2, #0
 8008964:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2200      	movs	r2, #0
 800896a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008978:	b2db      	uxtb	r3, r3
 800897a:	2b00      	cmp	r3, #0
 800897c:	d106      	bne.n	800898c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2200      	movs	r2, #0
 8008982:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f7fa ffd0 	bl	800392c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2202      	movs	r2, #2
 8008990:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	681a      	ldr	r2, [r3, #0]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	689b      	ldr	r3, [r3, #8]
 80089b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80089b4:	431a      	orrs	r2, r3
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	68db      	ldr	r3, [r3, #12]
 80089ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089be:	431a      	orrs	r2, r3
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	691b      	ldr	r3, [r3, #16]
 80089c4:	f003 0302 	and.w	r3, r3, #2
 80089c8:	431a      	orrs	r2, r3
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	695b      	ldr	r3, [r3, #20]
 80089ce:	f003 0301 	and.w	r3, r3, #1
 80089d2:	431a      	orrs	r2, r3
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	699b      	ldr	r3, [r3, #24]
 80089d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80089dc:	431a      	orrs	r2, r3
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	69db      	ldr	r3, [r3, #28]
 80089e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80089e6:	431a      	orrs	r2, r3
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6a1b      	ldr	r3, [r3, #32]
 80089ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089f0:	ea42 0103 	orr.w	r1, r2, r3
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089f8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	430a      	orrs	r2, r1
 8008a02:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	699b      	ldr	r3, [r3, #24]
 8008a08:	0c1b      	lsrs	r3, r3, #16
 8008a0a:	f003 0104 	and.w	r1, r3, #4
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a12:	f003 0210 	and.w	r2, r3, #16
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	430a      	orrs	r2, r1
 8008a1c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	69da      	ldr	r2, [r3, #28]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008a2c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2200      	movs	r2, #0
 8008a32:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2201      	movs	r2, #1
 8008a38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008a3c:	2300      	movs	r3, #0
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3708      	adds	r7, #8
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}

08008a46 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a46:	b580      	push	{r7, lr}
 8008a48:	b088      	sub	sp, #32
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	60f8      	str	r0, [r7, #12]
 8008a4e:	60b9      	str	r1, [r7, #8]
 8008a50:	603b      	str	r3, [r7, #0]
 8008a52:	4613      	mov	r3, r2
 8008a54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008a56:	2300      	movs	r3, #0
 8008a58:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	d101      	bne.n	8008a68 <HAL_SPI_Transmit+0x22>
 8008a64:	2302      	movs	r3, #2
 8008a66:	e126      	b.n	8008cb6 <HAL_SPI_Transmit+0x270>
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008a70:	f7fb fe48 	bl	8004704 <HAL_GetTick>
 8008a74:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008a76:	88fb      	ldrh	r3, [r7, #6]
 8008a78:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008a80:	b2db      	uxtb	r3, r3
 8008a82:	2b01      	cmp	r3, #1
 8008a84:	d002      	beq.n	8008a8c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008a86:	2302      	movs	r3, #2
 8008a88:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008a8a:	e10b      	b.n	8008ca4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d002      	beq.n	8008a98 <HAL_SPI_Transmit+0x52>
 8008a92:	88fb      	ldrh	r3, [r7, #6]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d102      	bne.n	8008a9e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008a9c:	e102      	b.n	8008ca4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2203      	movs	r2, #3
 8008aa2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	68ba      	ldr	r2, [r7, #8]
 8008ab0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	88fa      	ldrh	r2, [r7, #6]
 8008ab6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	88fa      	ldrh	r2, [r7, #6]
 8008abc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2200      	movs	r2, #0
 8008ace:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	689b      	ldr	r3, [r3, #8]
 8008ae0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ae4:	d10f      	bne.n	8008b06 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	681a      	ldr	r2, [r3, #0]
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008af4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	681a      	ldr	r2, [r3, #0]
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008b04:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b10:	2b40      	cmp	r3, #64	; 0x40
 8008b12:	d007      	beq.n	8008b24 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	681a      	ldr	r2, [r3, #0]
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b22:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	68db      	ldr	r3, [r3, #12]
 8008b28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b2c:	d14b      	bne.n	8008bc6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d002      	beq.n	8008b3c <HAL_SPI_Transmit+0xf6>
 8008b36:	8afb      	ldrh	r3, [r7, #22]
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	d13e      	bne.n	8008bba <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b40:	881a      	ldrh	r2, [r3, #0]
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b4c:	1c9a      	adds	r2, r3, #2
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	3b01      	subs	r3, #1
 8008b5a:	b29a      	uxth	r2, r3
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008b60:	e02b      	b.n	8008bba <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	689b      	ldr	r3, [r3, #8]
 8008b68:	f003 0302 	and.w	r3, r3, #2
 8008b6c:	2b02      	cmp	r3, #2
 8008b6e:	d112      	bne.n	8008b96 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b74:	881a      	ldrh	r2, [r3, #0]
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b80:	1c9a      	adds	r2, r3, #2
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b8a:	b29b      	uxth	r3, r3
 8008b8c:	3b01      	subs	r3, #1
 8008b8e:	b29a      	uxth	r2, r3
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	86da      	strh	r2, [r3, #54]	; 0x36
 8008b94:	e011      	b.n	8008bba <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b96:	f7fb fdb5 	bl	8004704 <HAL_GetTick>
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	69bb      	ldr	r3, [r7, #24]
 8008b9e:	1ad3      	subs	r3, r2, r3
 8008ba0:	683a      	ldr	r2, [r7, #0]
 8008ba2:	429a      	cmp	r2, r3
 8008ba4:	d803      	bhi.n	8008bae <HAL_SPI_Transmit+0x168>
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bac:	d102      	bne.n	8008bb4 <HAL_SPI_Transmit+0x16e>
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d102      	bne.n	8008bba <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008bb4:	2303      	movs	r3, #3
 8008bb6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008bb8:	e074      	b.n	8008ca4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008bbe:	b29b      	uxth	r3, r3
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d1ce      	bne.n	8008b62 <HAL_SPI_Transmit+0x11c>
 8008bc4:	e04c      	b.n	8008c60 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	685b      	ldr	r3, [r3, #4]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d002      	beq.n	8008bd4 <HAL_SPI_Transmit+0x18e>
 8008bce:	8afb      	ldrh	r3, [r7, #22]
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d140      	bne.n	8008c56 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	330c      	adds	r3, #12
 8008bde:	7812      	ldrb	r2, [r2, #0]
 8008be0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008be6:	1c5a      	adds	r2, r3, #1
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008bf0:	b29b      	uxth	r3, r3
 8008bf2:	3b01      	subs	r3, #1
 8008bf4:	b29a      	uxth	r2, r3
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008bfa:	e02c      	b.n	8008c56 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	689b      	ldr	r3, [r3, #8]
 8008c02:	f003 0302 	and.w	r3, r3, #2
 8008c06:	2b02      	cmp	r3, #2
 8008c08:	d113      	bne.n	8008c32 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	330c      	adds	r3, #12
 8008c14:	7812      	ldrb	r2, [r2, #0]
 8008c16:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c1c:	1c5a      	adds	r2, r3, #1
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c26:	b29b      	uxth	r3, r3
 8008c28:	3b01      	subs	r3, #1
 8008c2a:	b29a      	uxth	r2, r3
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	86da      	strh	r2, [r3, #54]	; 0x36
 8008c30:	e011      	b.n	8008c56 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c32:	f7fb fd67 	bl	8004704 <HAL_GetTick>
 8008c36:	4602      	mov	r2, r0
 8008c38:	69bb      	ldr	r3, [r7, #24]
 8008c3a:	1ad3      	subs	r3, r2, r3
 8008c3c:	683a      	ldr	r2, [r7, #0]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d803      	bhi.n	8008c4a <HAL_SPI_Transmit+0x204>
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c48:	d102      	bne.n	8008c50 <HAL_SPI_Transmit+0x20a>
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d102      	bne.n	8008c56 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008c50:	2303      	movs	r3, #3
 8008c52:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008c54:	e026      	b.n	8008ca4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c5a:	b29b      	uxth	r3, r3
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d1cd      	bne.n	8008bfc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008c60:	69ba      	ldr	r2, [r7, #24]
 8008c62:	6839      	ldr	r1, [r7, #0]
 8008c64:	68f8      	ldr	r0, [r7, #12]
 8008c66:	f000 fa55 	bl	8009114 <SPI_EndRxTxTransaction>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d002      	beq.n	8008c76 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2220      	movs	r2, #32
 8008c74:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	689b      	ldr	r3, [r3, #8]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d10a      	bne.n	8008c94 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008c7e:	2300      	movs	r3, #0
 8008c80:	613b      	str	r3, [r7, #16]
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	68db      	ldr	r3, [r3, #12]
 8008c88:	613b      	str	r3, [r7, #16]
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	689b      	ldr	r3, [r3, #8]
 8008c90:	613b      	str	r3, [r7, #16]
 8008c92:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d002      	beq.n	8008ca2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	77fb      	strb	r3, [r7, #31]
 8008ca0:	e000      	b.n	8008ca4 <HAL_SPI_Transmit+0x25e>
  }

error:
 8008ca2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008cb4:	7ffb      	ldrb	r3, [r7, #31]
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3720      	adds	r7, #32
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}

08008cbe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008cbe:	b580      	push	{r7, lr}
 8008cc0:	b08c      	sub	sp, #48	; 0x30
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	60f8      	str	r0, [r7, #12]
 8008cc6:	60b9      	str	r1, [r7, #8]
 8008cc8:	607a      	str	r2, [r7, #4]
 8008cca:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d101      	bne.n	8008ce4 <HAL_SPI_TransmitReceive+0x26>
 8008ce0:	2302      	movs	r3, #2
 8008ce2:	e18a      	b.n	8008ffa <HAL_SPI_TransmitReceive+0x33c>
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008cec:	f7fb fd0a 	bl	8004704 <HAL_GetTick>
 8008cf0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008cf8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008d02:	887b      	ldrh	r3, [r7, #2]
 8008d04:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008d06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008d0a:	2b01      	cmp	r3, #1
 8008d0c:	d00f      	beq.n	8008d2e <HAL_SPI_TransmitReceive+0x70>
 8008d0e:	69fb      	ldr	r3, [r7, #28]
 8008d10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d14:	d107      	bne.n	8008d26 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	689b      	ldr	r3, [r3, #8]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d103      	bne.n	8008d26 <HAL_SPI_TransmitReceive+0x68>
 8008d1e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008d22:	2b04      	cmp	r3, #4
 8008d24:	d003      	beq.n	8008d2e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008d26:	2302      	movs	r3, #2
 8008d28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008d2c:	e15b      	b.n	8008fe6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d005      	beq.n	8008d40 <HAL_SPI_TransmitReceive+0x82>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d002      	beq.n	8008d40 <HAL_SPI_TransmitReceive+0x82>
 8008d3a:	887b      	ldrh	r3, [r7, #2]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d103      	bne.n	8008d48 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008d40:	2301      	movs	r3, #1
 8008d42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008d46:	e14e      	b.n	8008fe6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	2b04      	cmp	r3, #4
 8008d52:	d003      	beq.n	8008d5c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	2205      	movs	r2, #5
 8008d58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	687a      	ldr	r2, [r7, #4]
 8008d66:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	887a      	ldrh	r2, [r7, #2]
 8008d6c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	887a      	ldrh	r2, [r7, #2]
 8008d72:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	68ba      	ldr	r2, [r7, #8]
 8008d78:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	887a      	ldrh	r2, [r7, #2]
 8008d7e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	887a      	ldrh	r2, [r7, #2]
 8008d84:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d9c:	2b40      	cmp	r3, #64	; 0x40
 8008d9e:	d007      	beq.n	8008db0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	681a      	ldr	r2, [r3, #0]
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008dae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	68db      	ldr	r3, [r3, #12]
 8008db4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008db8:	d178      	bne.n	8008eac <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d002      	beq.n	8008dc8 <HAL_SPI_TransmitReceive+0x10a>
 8008dc2:	8b7b      	ldrh	r3, [r7, #26]
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	d166      	bne.n	8008e96 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dcc:	881a      	ldrh	r2, [r3, #0]
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dd8:	1c9a      	adds	r2, r3, #2
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008de2:	b29b      	uxth	r3, r3
 8008de4:	3b01      	subs	r3, #1
 8008de6:	b29a      	uxth	r2, r3
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008dec:	e053      	b.n	8008e96 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	689b      	ldr	r3, [r3, #8]
 8008df4:	f003 0302 	and.w	r3, r3, #2
 8008df8:	2b02      	cmp	r3, #2
 8008dfa:	d11b      	bne.n	8008e34 <HAL_SPI_TransmitReceive+0x176>
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e00:	b29b      	uxth	r3, r3
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d016      	beq.n	8008e34 <HAL_SPI_TransmitReceive+0x176>
 8008e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	d113      	bne.n	8008e34 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e10:	881a      	ldrh	r2, [r3, #0]
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e1c:	1c9a      	adds	r2, r3, #2
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e26:	b29b      	uxth	r3, r3
 8008e28:	3b01      	subs	r3, #1
 8008e2a:	b29a      	uxth	r2, r3
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008e30:	2300      	movs	r3, #0
 8008e32:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	689b      	ldr	r3, [r3, #8]
 8008e3a:	f003 0301 	and.w	r3, r3, #1
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d119      	bne.n	8008e76 <HAL_SPI_TransmitReceive+0x1b8>
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e46:	b29b      	uxth	r3, r3
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d014      	beq.n	8008e76 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	68da      	ldr	r2, [r3, #12]
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e56:	b292      	uxth	r2, r2
 8008e58:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e5e:	1c9a      	adds	r2, r3, #2
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e68:	b29b      	uxth	r3, r3
 8008e6a:	3b01      	subs	r3, #1
 8008e6c:	b29a      	uxth	r2, r3
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008e72:	2301      	movs	r3, #1
 8008e74:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008e76:	f7fb fc45 	bl	8004704 <HAL_GetTick>
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e7e:	1ad3      	subs	r3, r2, r3
 8008e80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e82:	429a      	cmp	r2, r3
 8008e84:	d807      	bhi.n	8008e96 <HAL_SPI_TransmitReceive+0x1d8>
 8008e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e8c:	d003      	beq.n	8008e96 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008e8e:	2303      	movs	r3, #3
 8008e90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008e94:	e0a7      	b.n	8008fe6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e9a:	b29b      	uxth	r3, r3
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d1a6      	bne.n	8008dee <HAL_SPI_TransmitReceive+0x130>
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ea4:	b29b      	uxth	r3, r3
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d1a1      	bne.n	8008dee <HAL_SPI_TransmitReceive+0x130>
 8008eaa:	e07c      	b.n	8008fa6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d002      	beq.n	8008eba <HAL_SPI_TransmitReceive+0x1fc>
 8008eb4:	8b7b      	ldrh	r3, [r7, #26]
 8008eb6:	2b01      	cmp	r3, #1
 8008eb8:	d16b      	bne.n	8008f92 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	330c      	adds	r3, #12
 8008ec4:	7812      	ldrb	r2, [r2, #0]
 8008ec6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ecc:	1c5a      	adds	r2, r3, #1
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ed6:	b29b      	uxth	r3, r3
 8008ed8:	3b01      	subs	r3, #1
 8008eda:	b29a      	uxth	r2, r3
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ee0:	e057      	b.n	8008f92 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	689b      	ldr	r3, [r3, #8]
 8008ee8:	f003 0302 	and.w	r3, r3, #2
 8008eec:	2b02      	cmp	r3, #2
 8008eee:	d11c      	bne.n	8008f2a <HAL_SPI_TransmitReceive+0x26c>
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ef4:	b29b      	uxth	r3, r3
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d017      	beq.n	8008f2a <HAL_SPI_TransmitReceive+0x26c>
 8008efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	d114      	bne.n	8008f2a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	330c      	adds	r3, #12
 8008f0a:	7812      	ldrb	r2, [r2, #0]
 8008f0c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f12:	1c5a      	adds	r2, r3, #1
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	3b01      	subs	r3, #1
 8008f20:	b29a      	uxth	r2, r3
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008f26:	2300      	movs	r3, #0
 8008f28:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	689b      	ldr	r3, [r3, #8]
 8008f30:	f003 0301 	and.w	r3, r3, #1
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	d119      	bne.n	8008f6c <HAL_SPI_TransmitReceive+0x2ae>
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d014      	beq.n	8008f6c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	68da      	ldr	r2, [r3, #12]
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f4c:	b2d2      	uxtb	r2, r2
 8008f4e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f54:	1c5a      	adds	r2, r3, #1
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f5e:	b29b      	uxth	r3, r3
 8008f60:	3b01      	subs	r3, #1
 8008f62:	b29a      	uxth	r2, r3
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008f6c:	f7fb fbca 	bl	8004704 <HAL_GetTick>
 8008f70:	4602      	mov	r2, r0
 8008f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f74:	1ad3      	subs	r3, r2, r3
 8008f76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	d803      	bhi.n	8008f84 <HAL_SPI_TransmitReceive+0x2c6>
 8008f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f82:	d102      	bne.n	8008f8a <HAL_SPI_TransmitReceive+0x2cc>
 8008f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d103      	bne.n	8008f92 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008f8a:	2303      	movs	r3, #3
 8008f8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008f90:	e029      	b.n	8008fe6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f96:	b29b      	uxth	r3, r3
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d1a2      	bne.n	8008ee2 <HAL_SPI_TransmitReceive+0x224>
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fa0:	b29b      	uxth	r3, r3
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d19d      	bne.n	8008ee2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fa8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008faa:	68f8      	ldr	r0, [r7, #12]
 8008fac:	f000 f8b2 	bl	8009114 <SPI_EndRxTxTransaction>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d006      	beq.n	8008fc4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	2220      	movs	r2, #32
 8008fc0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008fc2:	e010      	b.n	8008fe6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	689b      	ldr	r3, [r3, #8]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d10b      	bne.n	8008fe4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008fcc:	2300      	movs	r3, #0
 8008fce:	617b      	str	r3, [r7, #20]
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	68db      	ldr	r3, [r3, #12]
 8008fd6:	617b      	str	r3, [r7, #20]
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	689b      	ldr	r3, [r3, #8]
 8008fde:	617b      	str	r3, [r7, #20]
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	e000      	b.n	8008fe6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008fe4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2201      	movs	r2, #1
 8008fea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008ff6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3730      	adds	r7, #48	; 0x30
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
	...

08009004 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b088      	sub	sp, #32
 8009008:	af00      	add	r7, sp, #0
 800900a:	60f8      	str	r0, [r7, #12]
 800900c:	60b9      	str	r1, [r7, #8]
 800900e:	603b      	str	r3, [r7, #0]
 8009010:	4613      	mov	r3, r2
 8009012:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009014:	f7fb fb76 	bl	8004704 <HAL_GetTick>
 8009018:	4602      	mov	r2, r0
 800901a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800901c:	1a9b      	subs	r3, r3, r2
 800901e:	683a      	ldr	r2, [r7, #0]
 8009020:	4413      	add	r3, r2
 8009022:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009024:	f7fb fb6e 	bl	8004704 <HAL_GetTick>
 8009028:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800902a:	4b39      	ldr	r3, [pc, #228]	; (8009110 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	015b      	lsls	r3, r3, #5
 8009030:	0d1b      	lsrs	r3, r3, #20
 8009032:	69fa      	ldr	r2, [r7, #28]
 8009034:	fb02 f303 	mul.w	r3, r2, r3
 8009038:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800903a:	e054      	b.n	80090e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009042:	d050      	beq.n	80090e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009044:	f7fb fb5e 	bl	8004704 <HAL_GetTick>
 8009048:	4602      	mov	r2, r0
 800904a:	69bb      	ldr	r3, [r7, #24]
 800904c:	1ad3      	subs	r3, r2, r3
 800904e:	69fa      	ldr	r2, [r7, #28]
 8009050:	429a      	cmp	r2, r3
 8009052:	d902      	bls.n	800905a <SPI_WaitFlagStateUntilTimeout+0x56>
 8009054:	69fb      	ldr	r3, [r7, #28]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d13d      	bne.n	80090d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	685a      	ldr	r2, [r3, #4]
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009068:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	685b      	ldr	r3, [r3, #4]
 800906e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009072:	d111      	bne.n	8009098 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	689b      	ldr	r3, [r3, #8]
 8009078:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800907c:	d004      	beq.n	8009088 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	689b      	ldr	r3, [r3, #8]
 8009082:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009086:	d107      	bne.n	8009098 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	681a      	ldr	r2, [r3, #0]
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009096:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800909c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090a0:	d10f      	bne.n	80090c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	681a      	ldr	r2, [r3, #0]
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80090b0:	601a      	str	r2, [r3, #0]
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	681a      	ldr	r2, [r3, #0]
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80090c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	2201      	movs	r2, #1
 80090c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	2200      	movs	r2, #0
 80090ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80090d2:	2303      	movs	r3, #3
 80090d4:	e017      	b.n	8009106 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d101      	bne.n	80090e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80090dc:	2300      	movs	r3, #0
 80090de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	3b01      	subs	r3, #1
 80090e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	689a      	ldr	r2, [r3, #8]
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	4013      	ands	r3, r2
 80090f0:	68ba      	ldr	r2, [r7, #8]
 80090f2:	429a      	cmp	r2, r3
 80090f4:	bf0c      	ite	eq
 80090f6:	2301      	moveq	r3, #1
 80090f8:	2300      	movne	r3, #0
 80090fa:	b2db      	uxtb	r3, r3
 80090fc:	461a      	mov	r2, r3
 80090fe:	79fb      	ldrb	r3, [r7, #7]
 8009100:	429a      	cmp	r2, r3
 8009102:	d19b      	bne.n	800903c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009104:	2300      	movs	r3, #0
}
 8009106:	4618      	mov	r0, r3
 8009108:	3720      	adds	r7, #32
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
 800910e:	bf00      	nop
 8009110:	20000028 	.word	0x20000028

08009114 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b088      	sub	sp, #32
 8009118:	af02      	add	r7, sp, #8
 800911a:	60f8      	str	r0, [r7, #12]
 800911c:	60b9      	str	r1, [r7, #8]
 800911e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009120:	4b1b      	ldr	r3, [pc, #108]	; (8009190 <SPI_EndRxTxTransaction+0x7c>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4a1b      	ldr	r2, [pc, #108]	; (8009194 <SPI_EndRxTxTransaction+0x80>)
 8009126:	fba2 2303 	umull	r2, r3, r2, r3
 800912a:	0d5b      	lsrs	r3, r3, #21
 800912c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009130:	fb02 f303 	mul.w	r3, r2, r3
 8009134:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	685b      	ldr	r3, [r3, #4]
 800913a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800913e:	d112      	bne.n	8009166 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	9300      	str	r3, [sp, #0]
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	2200      	movs	r2, #0
 8009148:	2180      	movs	r1, #128	; 0x80
 800914a:	68f8      	ldr	r0, [r7, #12]
 800914c:	f7ff ff5a 	bl	8009004 <SPI_WaitFlagStateUntilTimeout>
 8009150:	4603      	mov	r3, r0
 8009152:	2b00      	cmp	r3, #0
 8009154:	d016      	beq.n	8009184 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800915a:	f043 0220 	orr.w	r2, r3, #32
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009162:	2303      	movs	r3, #3
 8009164:	e00f      	b.n	8009186 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d00a      	beq.n	8009182 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	3b01      	subs	r3, #1
 8009170:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	689b      	ldr	r3, [r3, #8]
 8009178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800917c:	2b80      	cmp	r3, #128	; 0x80
 800917e:	d0f2      	beq.n	8009166 <SPI_EndRxTxTransaction+0x52>
 8009180:	e000      	b.n	8009184 <SPI_EndRxTxTransaction+0x70>
        break;
 8009182:	bf00      	nop
  }

  return HAL_OK;
 8009184:	2300      	movs	r3, #0
}
 8009186:	4618      	mov	r0, r3
 8009188:	3718      	adds	r7, #24
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}
 800918e:	bf00      	nop
 8009190:	20000028 	.word	0x20000028
 8009194:	165e9f81 	.word	0x165e9f81

08009198 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b082      	sub	sp, #8
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d101      	bne.n	80091aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80091a6:	2301      	movs	r3, #1
 80091a8:	e041      	b.n	800922e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091b0:	b2db      	uxtb	r3, r3
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d106      	bne.n	80091c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2200      	movs	r2, #0
 80091ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 f839 	bl	8009236 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2202      	movs	r2, #2
 80091c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681a      	ldr	r2, [r3, #0]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	3304      	adds	r3, #4
 80091d4:	4619      	mov	r1, r3
 80091d6:	4610      	mov	r0, r2
 80091d8:	f000 f9d8 	bl	800958c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2201      	movs	r2, #1
 80091e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2201      	movs	r2, #1
 80091e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2201      	movs	r2, #1
 80091f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2201      	movs	r2, #1
 80091f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2201      	movs	r2, #1
 8009200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2201      	movs	r2, #1
 8009208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2201      	movs	r2, #1
 8009210:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2201      	movs	r2, #1
 8009218:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2201      	movs	r2, #1
 8009220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2201      	movs	r2, #1
 8009228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800922c:	2300      	movs	r3, #0
}
 800922e:	4618      	mov	r0, r3
 8009230:	3708      	adds	r7, #8
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}

08009236 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009236:	b480      	push	{r7}
 8009238:	b083      	sub	sp, #12
 800923a:	af00      	add	r7, sp, #0
 800923c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800923e:	bf00      	nop
 8009240:	370c      	adds	r7, #12
 8009242:	46bd      	mov	sp, r7
 8009244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009248:	4770      	bx	lr
	...

0800924c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800924c:	b480      	push	{r7}
 800924e:	b085      	sub	sp, #20
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800925a:	b2db      	uxtb	r3, r3
 800925c:	2b01      	cmp	r3, #1
 800925e:	d001      	beq.n	8009264 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009260:	2301      	movs	r3, #1
 8009262:	e04e      	b.n	8009302 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2202      	movs	r2, #2
 8009268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	68da      	ldr	r2, [r3, #12]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f042 0201 	orr.w	r2, r2, #1
 800927a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	4a23      	ldr	r2, [pc, #140]	; (8009310 <HAL_TIM_Base_Start_IT+0xc4>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d022      	beq.n	80092cc <HAL_TIM_Base_Start_IT+0x80>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800928e:	d01d      	beq.n	80092cc <HAL_TIM_Base_Start_IT+0x80>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	4a1f      	ldr	r2, [pc, #124]	; (8009314 <HAL_TIM_Base_Start_IT+0xc8>)
 8009296:	4293      	cmp	r3, r2
 8009298:	d018      	beq.n	80092cc <HAL_TIM_Base_Start_IT+0x80>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	4a1e      	ldr	r2, [pc, #120]	; (8009318 <HAL_TIM_Base_Start_IT+0xcc>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d013      	beq.n	80092cc <HAL_TIM_Base_Start_IT+0x80>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	4a1c      	ldr	r2, [pc, #112]	; (800931c <HAL_TIM_Base_Start_IT+0xd0>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d00e      	beq.n	80092cc <HAL_TIM_Base_Start_IT+0x80>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	4a1b      	ldr	r2, [pc, #108]	; (8009320 <HAL_TIM_Base_Start_IT+0xd4>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d009      	beq.n	80092cc <HAL_TIM_Base_Start_IT+0x80>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	4a19      	ldr	r2, [pc, #100]	; (8009324 <HAL_TIM_Base_Start_IT+0xd8>)
 80092be:	4293      	cmp	r3, r2
 80092c0:	d004      	beq.n	80092cc <HAL_TIM_Base_Start_IT+0x80>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4a18      	ldr	r2, [pc, #96]	; (8009328 <HAL_TIM_Base_Start_IT+0xdc>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d111      	bne.n	80092f0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	689b      	ldr	r3, [r3, #8]
 80092d2:	f003 0307 	and.w	r3, r3, #7
 80092d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	2b06      	cmp	r3, #6
 80092dc:	d010      	beq.n	8009300 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	681a      	ldr	r2, [r3, #0]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f042 0201 	orr.w	r2, r2, #1
 80092ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092ee:	e007      	b.n	8009300 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	681a      	ldr	r2, [r3, #0]
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f042 0201 	orr.w	r2, r2, #1
 80092fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009300:	2300      	movs	r3, #0
}
 8009302:	4618      	mov	r0, r3
 8009304:	3714      	adds	r7, #20
 8009306:	46bd      	mov	sp, r7
 8009308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930c:	4770      	bx	lr
 800930e:	bf00      	nop
 8009310:	40010000 	.word	0x40010000
 8009314:	40000400 	.word	0x40000400
 8009318:	40000800 	.word	0x40000800
 800931c:	40000c00 	.word	0x40000c00
 8009320:	40010400 	.word	0x40010400
 8009324:	40014000 	.word	0x40014000
 8009328:	40001800 	.word	0x40001800

0800932c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b082      	sub	sp, #8
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	691b      	ldr	r3, [r3, #16]
 800933a:	f003 0302 	and.w	r3, r3, #2
 800933e:	2b02      	cmp	r3, #2
 8009340:	d122      	bne.n	8009388 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	68db      	ldr	r3, [r3, #12]
 8009348:	f003 0302 	and.w	r3, r3, #2
 800934c:	2b02      	cmp	r3, #2
 800934e:	d11b      	bne.n	8009388 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f06f 0202 	mvn.w	r2, #2
 8009358:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2201      	movs	r2, #1
 800935e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	699b      	ldr	r3, [r3, #24]
 8009366:	f003 0303 	and.w	r3, r3, #3
 800936a:	2b00      	cmp	r3, #0
 800936c:	d003      	beq.n	8009376 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f000 f8ee 	bl	8009550 <HAL_TIM_IC_CaptureCallback>
 8009374:	e005      	b.n	8009382 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f000 f8e0 	bl	800953c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f000 f8f1 	bl	8009564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2200      	movs	r2, #0
 8009386:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	691b      	ldr	r3, [r3, #16]
 800938e:	f003 0304 	and.w	r3, r3, #4
 8009392:	2b04      	cmp	r3, #4
 8009394:	d122      	bne.n	80093dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	68db      	ldr	r3, [r3, #12]
 800939c:	f003 0304 	and.w	r3, r3, #4
 80093a0:	2b04      	cmp	r3, #4
 80093a2:	d11b      	bne.n	80093dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f06f 0204 	mvn.w	r2, #4
 80093ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2202      	movs	r2, #2
 80093b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	699b      	ldr	r3, [r3, #24]
 80093ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d003      	beq.n	80093ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f000 f8c4 	bl	8009550 <HAL_TIM_IC_CaptureCallback>
 80093c8:	e005      	b.n	80093d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f000 f8b6 	bl	800953c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f000 f8c7 	bl	8009564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2200      	movs	r2, #0
 80093da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	691b      	ldr	r3, [r3, #16]
 80093e2:	f003 0308 	and.w	r3, r3, #8
 80093e6:	2b08      	cmp	r3, #8
 80093e8:	d122      	bne.n	8009430 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	68db      	ldr	r3, [r3, #12]
 80093f0:	f003 0308 	and.w	r3, r3, #8
 80093f4:	2b08      	cmp	r3, #8
 80093f6:	d11b      	bne.n	8009430 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f06f 0208 	mvn.w	r2, #8
 8009400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2204      	movs	r2, #4
 8009406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	69db      	ldr	r3, [r3, #28]
 800940e:	f003 0303 	and.w	r3, r3, #3
 8009412:	2b00      	cmp	r3, #0
 8009414:	d003      	beq.n	800941e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f000 f89a 	bl	8009550 <HAL_TIM_IC_CaptureCallback>
 800941c:	e005      	b.n	800942a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f000 f88c 	bl	800953c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f000 f89d 	bl	8009564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2200      	movs	r2, #0
 800942e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	691b      	ldr	r3, [r3, #16]
 8009436:	f003 0310 	and.w	r3, r3, #16
 800943a:	2b10      	cmp	r3, #16
 800943c:	d122      	bne.n	8009484 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	68db      	ldr	r3, [r3, #12]
 8009444:	f003 0310 	and.w	r3, r3, #16
 8009448:	2b10      	cmp	r3, #16
 800944a:	d11b      	bne.n	8009484 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f06f 0210 	mvn.w	r2, #16
 8009454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2208      	movs	r2, #8
 800945a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	69db      	ldr	r3, [r3, #28]
 8009462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009466:	2b00      	cmp	r3, #0
 8009468:	d003      	beq.n	8009472 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 f870 	bl	8009550 <HAL_TIM_IC_CaptureCallback>
 8009470:	e005      	b.n	800947e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 f862 	bl	800953c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f000 f873 	bl	8009564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2200      	movs	r2, #0
 8009482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	691b      	ldr	r3, [r3, #16]
 800948a:	f003 0301 	and.w	r3, r3, #1
 800948e:	2b01      	cmp	r3, #1
 8009490:	d10e      	bne.n	80094b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	68db      	ldr	r3, [r3, #12]
 8009498:	f003 0301 	and.w	r3, r3, #1
 800949c:	2b01      	cmp	r3, #1
 800949e:	d107      	bne.n	80094b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f06f 0201 	mvn.w	r2, #1
 80094a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f7fa f93c 	bl	8003728 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	691b      	ldr	r3, [r3, #16]
 80094b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094ba:	2b80      	cmp	r3, #128	; 0x80
 80094bc:	d10e      	bne.n	80094dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	68db      	ldr	r3, [r3, #12]
 80094c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094c8:	2b80      	cmp	r3, #128	; 0x80
 80094ca:	d107      	bne.n	80094dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80094d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f000 f902 	bl	80096e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	691b      	ldr	r3, [r3, #16]
 80094e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094e6:	2b40      	cmp	r3, #64	; 0x40
 80094e8:	d10e      	bne.n	8009508 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	68db      	ldr	r3, [r3, #12]
 80094f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094f4:	2b40      	cmp	r3, #64	; 0x40
 80094f6:	d107      	bne.n	8009508 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 f838 	bl	8009578 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	691b      	ldr	r3, [r3, #16]
 800950e:	f003 0320 	and.w	r3, r3, #32
 8009512:	2b20      	cmp	r3, #32
 8009514:	d10e      	bne.n	8009534 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	68db      	ldr	r3, [r3, #12]
 800951c:	f003 0320 	and.w	r3, r3, #32
 8009520:	2b20      	cmp	r3, #32
 8009522:	d107      	bne.n	8009534 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f06f 0220 	mvn.w	r2, #32
 800952c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f000 f8cc 	bl	80096cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009534:	bf00      	nop
 8009536:	3708      	adds	r7, #8
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}

0800953c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800953c:	b480      	push	{r7}
 800953e:	b083      	sub	sp, #12
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009544:	bf00      	nop
 8009546:	370c      	adds	r7, #12
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr

08009550 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009550:	b480      	push	{r7}
 8009552:	b083      	sub	sp, #12
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009558:	bf00      	nop
 800955a:	370c      	adds	r7, #12
 800955c:	46bd      	mov	sp, r7
 800955e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009562:	4770      	bx	lr

08009564 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009564:	b480      	push	{r7}
 8009566:	b083      	sub	sp, #12
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800956c:	bf00      	nop
 800956e:	370c      	adds	r7, #12
 8009570:	46bd      	mov	sp, r7
 8009572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009576:	4770      	bx	lr

08009578 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009578:	b480      	push	{r7}
 800957a:	b083      	sub	sp, #12
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009580:	bf00      	nop
 8009582:	370c      	adds	r7, #12
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr

0800958c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800958c:	b480      	push	{r7}
 800958e:	b085      	sub	sp, #20
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	4a40      	ldr	r2, [pc, #256]	; (80096a0 <TIM_Base_SetConfig+0x114>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d013      	beq.n	80095cc <TIM_Base_SetConfig+0x40>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095aa:	d00f      	beq.n	80095cc <TIM_Base_SetConfig+0x40>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	4a3d      	ldr	r2, [pc, #244]	; (80096a4 <TIM_Base_SetConfig+0x118>)
 80095b0:	4293      	cmp	r3, r2
 80095b2:	d00b      	beq.n	80095cc <TIM_Base_SetConfig+0x40>
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	4a3c      	ldr	r2, [pc, #240]	; (80096a8 <TIM_Base_SetConfig+0x11c>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d007      	beq.n	80095cc <TIM_Base_SetConfig+0x40>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	4a3b      	ldr	r2, [pc, #236]	; (80096ac <TIM_Base_SetConfig+0x120>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d003      	beq.n	80095cc <TIM_Base_SetConfig+0x40>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	4a3a      	ldr	r2, [pc, #232]	; (80096b0 <TIM_Base_SetConfig+0x124>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d108      	bne.n	80095de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	685b      	ldr	r3, [r3, #4]
 80095d8:	68fa      	ldr	r2, [r7, #12]
 80095da:	4313      	orrs	r3, r2
 80095dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	4a2f      	ldr	r2, [pc, #188]	; (80096a0 <TIM_Base_SetConfig+0x114>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d02b      	beq.n	800963e <TIM_Base_SetConfig+0xb2>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095ec:	d027      	beq.n	800963e <TIM_Base_SetConfig+0xb2>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	4a2c      	ldr	r2, [pc, #176]	; (80096a4 <TIM_Base_SetConfig+0x118>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d023      	beq.n	800963e <TIM_Base_SetConfig+0xb2>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	4a2b      	ldr	r2, [pc, #172]	; (80096a8 <TIM_Base_SetConfig+0x11c>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d01f      	beq.n	800963e <TIM_Base_SetConfig+0xb2>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	4a2a      	ldr	r2, [pc, #168]	; (80096ac <TIM_Base_SetConfig+0x120>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d01b      	beq.n	800963e <TIM_Base_SetConfig+0xb2>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	4a29      	ldr	r2, [pc, #164]	; (80096b0 <TIM_Base_SetConfig+0x124>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d017      	beq.n	800963e <TIM_Base_SetConfig+0xb2>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	4a28      	ldr	r2, [pc, #160]	; (80096b4 <TIM_Base_SetConfig+0x128>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d013      	beq.n	800963e <TIM_Base_SetConfig+0xb2>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	4a27      	ldr	r2, [pc, #156]	; (80096b8 <TIM_Base_SetConfig+0x12c>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d00f      	beq.n	800963e <TIM_Base_SetConfig+0xb2>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	4a26      	ldr	r2, [pc, #152]	; (80096bc <TIM_Base_SetConfig+0x130>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d00b      	beq.n	800963e <TIM_Base_SetConfig+0xb2>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	4a25      	ldr	r2, [pc, #148]	; (80096c0 <TIM_Base_SetConfig+0x134>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d007      	beq.n	800963e <TIM_Base_SetConfig+0xb2>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	4a24      	ldr	r2, [pc, #144]	; (80096c4 <TIM_Base_SetConfig+0x138>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d003      	beq.n	800963e <TIM_Base_SetConfig+0xb2>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	4a23      	ldr	r2, [pc, #140]	; (80096c8 <TIM_Base_SetConfig+0x13c>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d108      	bne.n	8009650 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009644:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	68db      	ldr	r3, [r3, #12]
 800964a:	68fa      	ldr	r2, [r7, #12]
 800964c:	4313      	orrs	r3, r2
 800964e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	695b      	ldr	r3, [r3, #20]
 800965a:	4313      	orrs	r3, r2
 800965c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	68fa      	ldr	r2, [r7, #12]
 8009662:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	689a      	ldr	r2, [r3, #8]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	681a      	ldr	r2, [r3, #0]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	4a0a      	ldr	r2, [pc, #40]	; (80096a0 <TIM_Base_SetConfig+0x114>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d003      	beq.n	8009684 <TIM_Base_SetConfig+0xf8>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	4a0c      	ldr	r2, [pc, #48]	; (80096b0 <TIM_Base_SetConfig+0x124>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d103      	bne.n	800968c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	691a      	ldr	r2, [r3, #16]
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2201      	movs	r2, #1
 8009690:	615a      	str	r2, [r3, #20]
}
 8009692:	bf00      	nop
 8009694:	3714      	adds	r7, #20
 8009696:	46bd      	mov	sp, r7
 8009698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969c:	4770      	bx	lr
 800969e:	bf00      	nop
 80096a0:	40010000 	.word	0x40010000
 80096a4:	40000400 	.word	0x40000400
 80096a8:	40000800 	.word	0x40000800
 80096ac:	40000c00 	.word	0x40000c00
 80096b0:	40010400 	.word	0x40010400
 80096b4:	40014000 	.word	0x40014000
 80096b8:	40014400 	.word	0x40014400
 80096bc:	40014800 	.word	0x40014800
 80096c0:	40001800 	.word	0x40001800
 80096c4:	40001c00 	.word	0x40001c00
 80096c8:	40002000 	.word	0x40002000

080096cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b083      	sub	sp, #12
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80096d4:	bf00      	nop
 80096d6:	370c      	adds	r7, #12
 80096d8:	46bd      	mov	sp, r7
 80096da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096de:	4770      	bx	lr

080096e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b083      	sub	sp, #12
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80096e8:	bf00      	nop
 80096ea:	370c      	adds	r7, #12
 80096ec:	46bd      	mov	sp, r7
 80096ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f2:	4770      	bx	lr

080096f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b082      	sub	sp, #8
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d101      	bne.n	8009706 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009702:	2301      	movs	r3, #1
 8009704:	e03f      	b.n	8009786 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800970c:	b2db      	uxtb	r3, r3
 800970e:	2b00      	cmp	r3, #0
 8009710:	d106      	bne.n	8009720 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2200      	movs	r2, #0
 8009716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f7fa f94e 	bl	80039bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2224      	movs	r2, #36	; 0x24
 8009724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	68da      	ldr	r2, [r3, #12]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009736:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f001 f903 	bl	800a944 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	691a      	ldr	r2, [r3, #16]
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800974c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	695a      	ldr	r2, [r3, #20]
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800975c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	68da      	ldr	r2, [r3, #12]
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800976c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2200      	movs	r2, #0
 8009772:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2220      	movs	r2, #32
 8009778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2220      	movs	r2, #32
 8009780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009784:	2300      	movs	r3, #0
}
 8009786:	4618      	mov	r0, r3
 8009788:	3708      	adds	r7, #8
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}

0800978e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800978e:	b580      	push	{r7, lr}
 8009790:	b08a      	sub	sp, #40	; 0x28
 8009792:	af02      	add	r7, sp, #8
 8009794:	60f8      	str	r0, [r7, #12]
 8009796:	60b9      	str	r1, [r7, #8]
 8009798:	603b      	str	r3, [r7, #0]
 800979a:	4613      	mov	r3, r2
 800979c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800979e:	2300      	movs	r3, #0
 80097a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097a8:	b2db      	uxtb	r3, r3
 80097aa:	2b20      	cmp	r3, #32
 80097ac:	d17c      	bne.n	80098a8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d002      	beq.n	80097ba <HAL_UART_Transmit+0x2c>
 80097b4:	88fb      	ldrh	r3, [r7, #6]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d101      	bne.n	80097be <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80097ba:	2301      	movs	r3, #1
 80097bc:	e075      	b.n	80098aa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d101      	bne.n	80097cc <HAL_UART_Transmit+0x3e>
 80097c8:	2302      	movs	r3, #2
 80097ca:	e06e      	b.n	80098aa <HAL_UART_Transmit+0x11c>
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2201      	movs	r2, #1
 80097d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	2200      	movs	r2, #0
 80097d8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	2221      	movs	r2, #33	; 0x21
 80097de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80097e2:	f7fa ff8f 	bl	8004704 <HAL_GetTick>
 80097e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	88fa      	ldrh	r2, [r7, #6]
 80097ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	88fa      	ldrh	r2, [r7, #6]
 80097f2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	689b      	ldr	r3, [r3, #8]
 80097f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097fc:	d108      	bne.n	8009810 <HAL_UART_Transmit+0x82>
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	691b      	ldr	r3, [r3, #16]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d104      	bne.n	8009810 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009806:	2300      	movs	r3, #0
 8009808:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	61bb      	str	r3, [r7, #24]
 800980e:	e003      	b.n	8009818 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009814:	2300      	movs	r3, #0
 8009816:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	2200      	movs	r2, #0
 800981c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009820:	e02a      	b.n	8009878 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	9300      	str	r3, [sp, #0]
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	2200      	movs	r2, #0
 800982a:	2180      	movs	r1, #128	; 0x80
 800982c:	68f8      	ldr	r0, [r7, #12]
 800982e:	f000 fdbe 	bl	800a3ae <UART_WaitOnFlagUntilTimeout>
 8009832:	4603      	mov	r3, r0
 8009834:	2b00      	cmp	r3, #0
 8009836:	d001      	beq.n	800983c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009838:	2303      	movs	r3, #3
 800983a:	e036      	b.n	80098aa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800983c:	69fb      	ldr	r3, [r7, #28]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d10b      	bne.n	800985a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009842:	69bb      	ldr	r3, [r7, #24]
 8009844:	881b      	ldrh	r3, [r3, #0]
 8009846:	461a      	mov	r2, r3
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009850:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009852:	69bb      	ldr	r3, [r7, #24]
 8009854:	3302      	adds	r3, #2
 8009856:	61bb      	str	r3, [r7, #24]
 8009858:	e007      	b.n	800986a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800985a:	69fb      	ldr	r3, [r7, #28]
 800985c:	781a      	ldrb	r2, [r3, #0]
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009864:	69fb      	ldr	r3, [r7, #28]
 8009866:	3301      	adds	r3, #1
 8009868:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800986e:	b29b      	uxth	r3, r3
 8009870:	3b01      	subs	r3, #1
 8009872:	b29a      	uxth	r2, r3
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800987c:	b29b      	uxth	r3, r3
 800987e:	2b00      	cmp	r3, #0
 8009880:	d1cf      	bne.n	8009822 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	9300      	str	r3, [sp, #0]
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	2200      	movs	r2, #0
 800988a:	2140      	movs	r1, #64	; 0x40
 800988c:	68f8      	ldr	r0, [r7, #12]
 800988e:	f000 fd8e 	bl	800a3ae <UART_WaitOnFlagUntilTimeout>
 8009892:	4603      	mov	r3, r0
 8009894:	2b00      	cmp	r3, #0
 8009896:	d001      	beq.n	800989c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009898:	2303      	movs	r3, #3
 800989a:	e006      	b.n	80098aa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	2220      	movs	r2, #32
 80098a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80098a4:	2300      	movs	r3, #0
 80098a6:	e000      	b.n	80098aa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80098a8:	2302      	movs	r3, #2
  }
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3720      	adds	r7, #32
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}

080098b2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80098b2:	b480      	push	{r7}
 80098b4:	b085      	sub	sp, #20
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	60f8      	str	r0, [r7, #12]
 80098ba:	60b9      	str	r1, [r7, #8]
 80098bc:	4613      	mov	r3, r2
 80098be:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098c6:	b2db      	uxtb	r3, r3
 80098c8:	2b20      	cmp	r3, #32
 80098ca:	d130      	bne.n	800992e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d002      	beq.n	80098d8 <HAL_UART_Transmit_IT+0x26>
 80098d2:	88fb      	ldrh	r3, [r7, #6]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d101      	bne.n	80098dc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80098d8:	2301      	movs	r3, #1
 80098da:	e029      	b.n	8009930 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098e2:	2b01      	cmp	r3, #1
 80098e4:	d101      	bne.n	80098ea <HAL_UART_Transmit_IT+0x38>
 80098e6:	2302      	movs	r3, #2
 80098e8:	e022      	b.n	8009930 <HAL_UART_Transmit_IT+0x7e>
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	2201      	movs	r2, #1
 80098ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	68ba      	ldr	r2, [r7, #8]
 80098f6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	88fa      	ldrh	r2, [r7, #6]
 80098fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	88fa      	ldrh	r2, [r7, #6]
 8009902:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	2200      	movs	r2, #0
 8009908:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	2221      	movs	r2, #33	; 0x21
 800990e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	2200      	movs	r2, #0
 8009916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	68da      	ldr	r2, [r3, #12]
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009928:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800992a:	2300      	movs	r3, #0
 800992c:	e000      	b.n	8009930 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800992e:	2302      	movs	r3, #2
  }
}
 8009930:	4618      	mov	r0, r3
 8009932:	3714      	adds	r7, #20
 8009934:	46bd      	mov	sp, r7
 8009936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993a:	4770      	bx	lr

0800993c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b08c      	sub	sp, #48	; 0x30
 8009940:	af00      	add	r7, sp, #0
 8009942:	60f8      	str	r0, [r7, #12]
 8009944:	60b9      	str	r1, [r7, #8]
 8009946:	4613      	mov	r3, r2
 8009948:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009950:	b2db      	uxtb	r3, r3
 8009952:	2b20      	cmp	r3, #32
 8009954:	d165      	bne.n	8009a22 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d002      	beq.n	8009962 <HAL_UART_Transmit_DMA+0x26>
 800995c:	88fb      	ldrh	r3, [r7, #6]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d101      	bne.n	8009966 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8009962:	2301      	movs	r3, #1
 8009964:	e05e      	b.n	8009a24 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800996c:	2b01      	cmp	r3, #1
 800996e:	d101      	bne.n	8009974 <HAL_UART_Transmit_DMA+0x38>
 8009970:	2302      	movs	r3, #2
 8009972:	e057      	b.n	8009a24 <HAL_UART_Transmit_DMA+0xe8>
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	2201      	movs	r2, #1
 8009978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800997c:	68ba      	ldr	r2, [r7, #8]
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	88fa      	ldrh	r2, [r7, #6]
 8009986:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	88fa      	ldrh	r2, [r7, #6]
 800998c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	2200      	movs	r2, #0
 8009992:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	2221      	movs	r2, #33	; 0x21
 8009998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099a0:	4a22      	ldr	r2, [pc, #136]	; (8009a2c <HAL_UART_Transmit_DMA+0xf0>)
 80099a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099a8:	4a21      	ldr	r2, [pc, #132]	; (8009a30 <HAL_UART_Transmit_DMA+0xf4>)
 80099aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099b0:	4a20      	ldr	r2, [pc, #128]	; (8009a34 <HAL_UART_Transmit_DMA+0xf8>)
 80099b2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099b8:	2200      	movs	r2, #0
 80099ba:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80099bc:	f107 0308 	add.w	r3, r7, #8
 80099c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80099c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099c8:	6819      	ldr	r1, [r3, #0]
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	3304      	adds	r3, #4
 80099d0:	461a      	mov	r2, r3
 80099d2:	88fb      	ldrh	r3, [r7, #6]
 80099d4:	f7fb f872 	bl	8004abc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80099e0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	2200      	movs	r2, #0
 80099e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	3314      	adds	r3, #20
 80099f0:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099f2:	69bb      	ldr	r3, [r7, #24]
 80099f4:	e853 3f00 	ldrex	r3, [r3]
 80099f8:	617b      	str	r3, [r7, #20]
   return(result);
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a00:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	3314      	adds	r3, #20
 8009a08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a0a:	627a      	str	r2, [r7, #36]	; 0x24
 8009a0c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a0e:	6a39      	ldr	r1, [r7, #32]
 8009a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a12:	e841 2300 	strex	r3, r2, [r1]
 8009a16:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a18:	69fb      	ldr	r3, [r7, #28]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d1e5      	bne.n	80099ea <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	e000      	b.n	8009a24 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8009a22:	2302      	movs	r3, #2
  }
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	3730      	adds	r7, #48	; 0x30
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}
 8009a2c:	0800a109 	.word	0x0800a109
 8009a30:	0800a1a3 	.word	0x0800a1a3
 8009a34:	0800a31b 	.word	0x0800a31b

08009a38 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b084      	sub	sp, #16
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	60f8      	str	r0, [r7, #12]
 8009a40:	60b9      	str	r1, [r7, #8]
 8009a42:	4613      	mov	r3, r2
 8009a44:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009a4c:	b2db      	uxtb	r3, r3
 8009a4e:	2b20      	cmp	r3, #32
 8009a50:	d11d      	bne.n	8009a8e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d002      	beq.n	8009a5e <HAL_UART_Receive_DMA+0x26>
 8009a58:	88fb      	ldrh	r3, [r7, #6]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d101      	bne.n	8009a62 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009a5e:	2301      	movs	r3, #1
 8009a60:	e016      	b.n	8009a90 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a68:	2b01      	cmp	r3, #1
 8009a6a:	d101      	bne.n	8009a70 <HAL_UART_Receive_DMA+0x38>
 8009a6c:	2302      	movs	r3, #2
 8009a6e:	e00f      	b.n	8009a90 <HAL_UART_Receive_DMA+0x58>
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2201      	movs	r2, #1
 8009a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009a7e:	88fb      	ldrh	r3, [r7, #6]
 8009a80:	461a      	mov	r2, r3
 8009a82:	68b9      	ldr	r1, [r7, #8]
 8009a84:	68f8      	ldr	r0, [r7, #12]
 8009a86:	f000 fd01 	bl	800a48c <UART_Start_Receive_DMA>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	e000      	b.n	8009a90 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009a8e:	2302      	movs	r3, #2
  }
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	3710      	adds	r7, #16
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}

08009a98 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b090      	sub	sp, #64	; 0x40
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	695b      	ldr	r3, [r3, #20]
 8009aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009aae:	2b80      	cmp	r3, #128	; 0x80
 8009ab0:	bf0c      	ite	eq
 8009ab2:	2301      	moveq	r3, #1
 8009ab4:	2300      	movne	r3, #0
 8009ab6:	b2db      	uxtb	r3, r3
 8009ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ac0:	b2db      	uxtb	r3, r3
 8009ac2:	2b21      	cmp	r3, #33	; 0x21
 8009ac4:	d128      	bne.n	8009b18 <HAL_UART_DMAStop+0x80>
 8009ac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d025      	beq.n	8009b18 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	3314      	adds	r3, #20
 8009ad2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad6:	e853 3f00 	ldrex	r3, [r3]
 8009ada:	623b      	str	r3, [r7, #32]
   return(result);
 8009adc:	6a3b      	ldr	r3, [r7, #32]
 8009ade:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ae2:	63bb      	str	r3, [r7, #56]	; 0x38
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	3314      	adds	r3, #20
 8009aea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009aec:	633a      	str	r2, [r7, #48]	; 0x30
 8009aee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009af0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009af2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009af4:	e841 2300 	strex	r3, r2, [r1]
 8009af8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d1e5      	bne.n	8009acc <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d004      	beq.n	8009b12 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f7fb f82d 	bl	8004b6c <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 fd54 	bl	800a5c0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	695b      	ldr	r3, [r3, #20]
 8009b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b22:	2b40      	cmp	r3, #64	; 0x40
 8009b24:	bf0c      	ite	eq
 8009b26:	2301      	moveq	r3, #1
 8009b28:	2300      	movne	r3, #0
 8009b2a:	b2db      	uxtb	r3, r3
 8009b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009b34:	b2db      	uxtb	r3, r3
 8009b36:	2b22      	cmp	r3, #34	; 0x22
 8009b38:	d128      	bne.n	8009b8c <HAL_UART_DMAStop+0xf4>
 8009b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d025      	beq.n	8009b8c <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	3314      	adds	r3, #20
 8009b46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	e853 3f00 	ldrex	r3, [r3]
 8009b4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b56:	637b      	str	r3, [r7, #52]	; 0x34
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	3314      	adds	r3, #20
 8009b5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b60:	61fa      	str	r2, [r7, #28]
 8009b62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b64:	69b9      	ldr	r1, [r7, #24]
 8009b66:	69fa      	ldr	r2, [r7, #28]
 8009b68:	e841 2300 	strex	r3, r2, [r1]
 8009b6c:	617b      	str	r3, [r7, #20]
   return(result);
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d1e5      	bne.n	8009b40 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d004      	beq.n	8009b86 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b80:	4618      	mov	r0, r3
 8009b82:	f7fa fff3 	bl	8004b6c <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f000 fd42 	bl	800a610 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8009b8c:	2300      	movs	r3, #0
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3740      	adds	r7, #64	; 0x40
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}
	...

08009b98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b0ba      	sub	sp, #232	; 0xe8
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	68db      	ldr	r3, [r3, #12]
 8009bb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	695b      	ldr	r3, [r3, #20]
 8009bba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bce:	f003 030f 	and.w	r3, r3, #15
 8009bd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009bd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d10f      	bne.n	8009bfe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009be2:	f003 0320 	and.w	r3, r3, #32
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d009      	beq.n	8009bfe <HAL_UART_IRQHandler+0x66>
 8009bea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009bee:	f003 0320 	and.w	r3, r3, #32
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d003      	beq.n	8009bfe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f000 fde9 	bl	800a7ce <UART_Receive_IT>
      return;
 8009bfc:	e256      	b.n	800a0ac <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009bfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	f000 80de 	beq.w	8009dc4 <HAL_UART_IRQHandler+0x22c>
 8009c08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c0c:	f003 0301 	and.w	r3, r3, #1
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d106      	bne.n	8009c22 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c18:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	f000 80d1 	beq.w	8009dc4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c26:	f003 0301 	and.w	r3, r3, #1
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d00b      	beq.n	8009c46 <HAL_UART_IRQHandler+0xae>
 8009c2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d005      	beq.n	8009c46 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c3e:	f043 0201 	orr.w	r2, r3, #1
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c4a:	f003 0304 	and.w	r3, r3, #4
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d00b      	beq.n	8009c6a <HAL_UART_IRQHandler+0xd2>
 8009c52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c56:	f003 0301 	and.w	r3, r3, #1
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d005      	beq.n	8009c6a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c62:	f043 0202 	orr.w	r2, r3, #2
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c6e:	f003 0302 	and.w	r3, r3, #2
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d00b      	beq.n	8009c8e <HAL_UART_IRQHandler+0xf6>
 8009c76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c7a:	f003 0301 	and.w	r3, r3, #1
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d005      	beq.n	8009c8e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c86:	f043 0204 	orr.w	r2, r3, #4
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c92:	f003 0308 	and.w	r3, r3, #8
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d011      	beq.n	8009cbe <HAL_UART_IRQHandler+0x126>
 8009c9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c9e:	f003 0320 	and.w	r3, r3, #32
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d105      	bne.n	8009cb2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009ca6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009caa:	f003 0301 	and.w	r3, r3, #1
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d005      	beq.n	8009cbe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cb6:	f043 0208 	orr.w	r2, r3, #8
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	f000 81ed 	beq.w	800a0a2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ccc:	f003 0320 	and.w	r3, r3, #32
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d008      	beq.n	8009ce6 <HAL_UART_IRQHandler+0x14e>
 8009cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009cd8:	f003 0320 	and.w	r3, r3, #32
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d002      	beq.n	8009ce6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f000 fd74 	bl	800a7ce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	695b      	ldr	r3, [r3, #20]
 8009cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cf0:	2b40      	cmp	r3, #64	; 0x40
 8009cf2:	bf0c      	ite	eq
 8009cf4:	2301      	moveq	r3, #1
 8009cf6:	2300      	movne	r3, #0
 8009cf8:	b2db      	uxtb	r3, r3
 8009cfa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d02:	f003 0308 	and.w	r3, r3, #8
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d103      	bne.n	8009d12 <HAL_UART_IRQHandler+0x17a>
 8009d0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d04f      	beq.n	8009db2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f000 fc7c 	bl	800a610 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	695b      	ldr	r3, [r3, #20]
 8009d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d22:	2b40      	cmp	r3, #64	; 0x40
 8009d24:	d141      	bne.n	8009daa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	3314      	adds	r3, #20
 8009d2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009d34:	e853 3f00 	ldrex	r3, [r3]
 8009d38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009d3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009d40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	3314      	adds	r3, #20
 8009d4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009d52:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009d56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009d5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009d62:	e841 2300 	strex	r3, r2, [r1]
 8009d66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009d6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d1d9      	bne.n	8009d26 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d013      	beq.n	8009da2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d7e:	4a7d      	ldr	r2, [pc, #500]	; (8009f74 <HAL_UART_IRQHandler+0x3dc>)
 8009d80:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d86:	4618      	mov	r0, r3
 8009d88:	f7fa ff60 	bl	8004c4c <HAL_DMA_Abort_IT>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d016      	beq.n	8009dc0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d98:	687a      	ldr	r2, [r7, #4]
 8009d9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009d9c:	4610      	mov	r0, r2
 8009d9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009da0:	e00e      	b.n	8009dc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f000 f99a 	bl	800a0dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009da8:	e00a      	b.n	8009dc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f000 f996 	bl	800a0dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009db0:	e006      	b.n	8009dc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f000 f992 	bl	800a0dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009dbe:	e170      	b.n	800a0a2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dc0:	bf00      	nop
    return;
 8009dc2:	e16e      	b.n	800a0a2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dc8:	2b01      	cmp	r3, #1
 8009dca:	f040 814a 	bne.w	800a062 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009dd2:	f003 0310 	and.w	r3, r3, #16
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	f000 8143 	beq.w	800a062 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009de0:	f003 0310 	and.w	r3, r3, #16
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	f000 813c 	beq.w	800a062 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009dea:	2300      	movs	r3, #0
 8009dec:	60bb      	str	r3, [r7, #8]
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	60bb      	str	r3, [r7, #8]
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	685b      	ldr	r3, [r3, #4]
 8009dfc:	60bb      	str	r3, [r7, #8]
 8009dfe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	695b      	ldr	r3, [r3, #20]
 8009e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e0a:	2b40      	cmp	r3, #64	; 0x40
 8009e0c:	f040 80b4 	bne.w	8009f78 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	685b      	ldr	r3, [r3, #4]
 8009e18:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009e1c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	f000 8140 	beq.w	800a0a6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009e2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009e2e:	429a      	cmp	r2, r3
 8009e30:	f080 8139 	bcs.w	800a0a6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009e3a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e40:	69db      	ldr	r3, [r3, #28]
 8009e42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e46:	f000 8088 	beq.w	8009f5a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	330c      	adds	r3, #12
 8009e50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009e58:	e853 3f00 	ldrex	r3, [r3]
 8009e5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009e60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009e64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	330c      	adds	r3, #12
 8009e72:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009e76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009e7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e7e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009e82:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009e86:	e841 2300 	strex	r3, r2, [r1]
 8009e8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009e8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d1d9      	bne.n	8009e4a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	3314      	adds	r3, #20
 8009e9c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ea0:	e853 3f00 	ldrex	r3, [r3]
 8009ea4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009ea6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009ea8:	f023 0301 	bic.w	r3, r3, #1
 8009eac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	3314      	adds	r3, #20
 8009eb6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009eba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009ebe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ec0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009ec2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009ec6:	e841 2300 	strex	r3, r2, [r1]
 8009eca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009ecc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d1e1      	bne.n	8009e96 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	3314      	adds	r3, #20
 8009ed8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009edc:	e853 3f00 	ldrex	r3, [r3]
 8009ee0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009ee2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ee4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ee8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	3314      	adds	r3, #20
 8009ef2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009ef6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009ef8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009efa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009efc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009efe:	e841 2300 	strex	r3, r2, [r1]
 8009f02:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009f04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d1e3      	bne.n	8009ed2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2220      	movs	r2, #32
 8009f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2200      	movs	r2, #0
 8009f16:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	330c      	adds	r3, #12
 8009f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f22:	e853 3f00 	ldrex	r3, [r3]
 8009f26:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009f28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f2a:	f023 0310 	bic.w	r3, r3, #16
 8009f2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	330c      	adds	r3, #12
 8009f38:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009f3c:	65ba      	str	r2, [r7, #88]	; 0x58
 8009f3e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f40:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009f42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009f44:	e841 2300 	strex	r3, r2, [r1]
 8009f48:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009f4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d1e3      	bne.n	8009f18 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f54:	4618      	mov	r0, r3
 8009f56:	f7fa fe09 	bl	8004b6c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009f62:	b29b      	uxth	r3, r3
 8009f64:	1ad3      	subs	r3, r2, r3
 8009f66:	b29b      	uxth	r3, r3
 8009f68:	4619      	mov	r1, r3
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f000 f8c0 	bl	800a0f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009f70:	e099      	b.n	800a0a6 <HAL_UART_IRQHandler+0x50e>
 8009f72:	bf00      	nop
 8009f74:	0800a6d7 	.word	0x0800a6d7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009f80:	b29b      	uxth	r3, r3
 8009f82:	1ad3      	subs	r3, r2, r3
 8009f84:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009f8c:	b29b      	uxth	r3, r3
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	f000 808b 	beq.w	800a0aa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009f94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	f000 8086 	beq.w	800a0aa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	330c      	adds	r3, #12
 8009fa4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fa8:	e853 3f00 	ldrex	r3, [r3]
 8009fac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fb0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009fb4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	330c      	adds	r3, #12
 8009fbe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009fc2:	647a      	str	r2, [r7, #68]	; 0x44
 8009fc4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fc6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009fc8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009fca:	e841 2300 	strex	r3, r2, [r1]
 8009fce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009fd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d1e3      	bne.n	8009f9e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	3314      	adds	r3, #20
 8009fdc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe0:	e853 3f00 	ldrex	r3, [r3]
 8009fe4:	623b      	str	r3, [r7, #32]
   return(result);
 8009fe6:	6a3b      	ldr	r3, [r7, #32]
 8009fe8:	f023 0301 	bic.w	r3, r3, #1
 8009fec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	3314      	adds	r3, #20
 8009ff6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009ffa:	633a      	str	r2, [r7, #48]	; 0x30
 8009ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ffe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a000:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a002:	e841 2300 	strex	r3, r2, [r1]
 800a006:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d1e3      	bne.n	8009fd6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2220      	movs	r2, #32
 800a012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2200      	movs	r2, #0
 800a01a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	330c      	adds	r3, #12
 800a022:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a024:	693b      	ldr	r3, [r7, #16]
 800a026:	e853 3f00 	ldrex	r3, [r3]
 800a02a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f023 0310 	bic.w	r3, r3, #16
 800a032:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	330c      	adds	r3, #12
 800a03c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a040:	61fa      	str	r2, [r7, #28]
 800a042:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a044:	69b9      	ldr	r1, [r7, #24]
 800a046:	69fa      	ldr	r2, [r7, #28]
 800a048:	e841 2300 	strex	r3, r2, [r1]
 800a04c:	617b      	str	r3, [r7, #20]
   return(result);
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d1e3      	bne.n	800a01c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a054:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a058:	4619      	mov	r1, r3
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f000 f848 	bl	800a0f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a060:	e023      	b.n	800a0aa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d009      	beq.n	800a082 <HAL_UART_IRQHandler+0x4ea>
 800a06e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a076:	2b00      	cmp	r3, #0
 800a078:	d003      	beq.n	800a082 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f000 fb3f 	bl	800a6fe <UART_Transmit_IT>
    return;
 800a080:	e014      	b.n	800a0ac <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d00e      	beq.n	800a0ac <HAL_UART_IRQHandler+0x514>
 800a08e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a096:	2b00      	cmp	r3, #0
 800a098:	d008      	beq.n	800a0ac <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f000 fb7f 	bl	800a79e <UART_EndTransmit_IT>
    return;
 800a0a0:	e004      	b.n	800a0ac <HAL_UART_IRQHandler+0x514>
    return;
 800a0a2:	bf00      	nop
 800a0a4:	e002      	b.n	800a0ac <HAL_UART_IRQHandler+0x514>
      return;
 800a0a6:	bf00      	nop
 800a0a8:	e000      	b.n	800a0ac <HAL_UART_IRQHandler+0x514>
      return;
 800a0aa:	bf00      	nop
  }
}
 800a0ac:	37e8      	adds	r7, #232	; 0xe8
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}
 800a0b2:	bf00      	nop

0800a0b4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b083      	sub	sp, #12
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800a0bc:	bf00      	nop
 800a0be:	370c      	adds	r7, #12
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr

0800a0c8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b083      	sub	sp, #12
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a0d0:	bf00      	nop
 800a0d2:	370c      	adds	r7, #12
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0da:	4770      	bx	lr

0800a0dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b083      	sub	sp, #12
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a0e4:	bf00      	nop
 800a0e6:	370c      	adds	r7, #12
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ee:	4770      	bx	lr

0800a0f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b083      	sub	sp, #12
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	460b      	mov	r3, r1
 800a0fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a0fc:	bf00      	nop
 800a0fe:	370c      	adds	r7, #12
 800a100:	46bd      	mov	sp, r7
 800a102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a106:	4770      	bx	lr

0800a108 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b090      	sub	sp, #64	; 0x40
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a114:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a120:	2b00      	cmp	r3, #0
 800a122:	d137      	bne.n	800a194 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800a124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a126:	2200      	movs	r2, #0
 800a128:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a12a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	3314      	adds	r3, #20
 800a130:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a134:	e853 3f00 	ldrex	r3, [r3]
 800a138:	623b      	str	r3, [r7, #32]
   return(result);
 800a13a:	6a3b      	ldr	r3, [r7, #32]
 800a13c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a140:	63bb      	str	r3, [r7, #56]	; 0x38
 800a142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	3314      	adds	r3, #20
 800a148:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a14a:	633a      	str	r2, [r7, #48]	; 0x30
 800a14c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a14e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a150:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a152:	e841 2300 	strex	r3, r2, [r1]
 800a156:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d1e5      	bne.n	800a12a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a15e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	330c      	adds	r3, #12
 800a164:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	e853 3f00 	ldrex	r3, [r3]
 800a16c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a174:	637b      	str	r3, [r7, #52]	; 0x34
 800a176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	330c      	adds	r3, #12
 800a17c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a17e:	61fa      	str	r2, [r7, #28]
 800a180:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a182:	69b9      	ldr	r1, [r7, #24]
 800a184:	69fa      	ldr	r2, [r7, #28]
 800a186:	e841 2300 	strex	r3, r2, [r1]
 800a18a:	617b      	str	r3, [r7, #20]
   return(result);
 800a18c:	697b      	ldr	r3, [r7, #20]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d1e5      	bne.n	800a15e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a192:	e002      	b.n	800a19a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a194:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a196:	f7f7 fa3b 	bl	8001610 <HAL_UART_TxCpltCallback>
}
 800a19a:	bf00      	nop
 800a19c:	3740      	adds	r7, #64	; 0x40
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}

0800a1a2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a1a2:	b580      	push	{r7, lr}
 800a1a4:	b084      	sub	sp, #16
 800a1a6:	af00      	add	r7, sp, #0
 800a1a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1ae:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a1b0:	68f8      	ldr	r0, [r7, #12]
 800a1b2:	f7ff ff7f 	bl	800a0b4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a1b6:	bf00      	nop
 800a1b8:	3710      	adds	r7, #16
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}

0800a1be <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a1be:	b580      	push	{r7, lr}
 800a1c0:	b09c      	sub	sp, #112	; 0x70
 800a1c2:	af00      	add	r7, sp, #0
 800a1c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1ca:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d172      	bne.n	800a2c0 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800a1da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1dc:	2200      	movs	r2, #0
 800a1de:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a1e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	330c      	adds	r3, #12
 800a1e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1ea:	e853 3f00 	ldrex	r3, [r3]
 800a1ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a1f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a1f6:	66bb      	str	r3, [r7, #104]	; 0x68
 800a1f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	330c      	adds	r3, #12
 800a1fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a200:	65ba      	str	r2, [r7, #88]	; 0x58
 800a202:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a204:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a206:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a208:	e841 2300 	strex	r3, r2, [r1]
 800a20c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a20e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a210:	2b00      	cmp	r3, #0
 800a212:	d1e5      	bne.n	800a1e0 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a214:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	3314      	adds	r3, #20
 800a21a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a21c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a21e:	e853 3f00 	ldrex	r3, [r3]
 800a222:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a226:	f023 0301 	bic.w	r3, r3, #1
 800a22a:	667b      	str	r3, [r7, #100]	; 0x64
 800a22c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	3314      	adds	r3, #20
 800a232:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a234:	647a      	str	r2, [r7, #68]	; 0x44
 800a236:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a238:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a23a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a23c:	e841 2300 	strex	r3, r2, [r1]
 800a240:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a244:	2b00      	cmp	r3, #0
 800a246:	d1e5      	bne.n	800a214 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a248:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	3314      	adds	r3, #20
 800a24e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a252:	e853 3f00 	ldrex	r3, [r3]
 800a256:	623b      	str	r3, [r7, #32]
   return(result);
 800a258:	6a3b      	ldr	r3, [r7, #32]
 800a25a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a25e:	663b      	str	r3, [r7, #96]	; 0x60
 800a260:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	3314      	adds	r3, #20
 800a266:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a268:	633a      	str	r2, [r7, #48]	; 0x30
 800a26a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a26c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a26e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a270:	e841 2300 	strex	r3, r2, [r1]
 800a274:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d1e5      	bne.n	800a248 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a27c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a27e:	2220      	movs	r2, #32
 800a280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a288:	2b01      	cmp	r3, #1
 800a28a:	d119      	bne.n	800a2c0 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a28c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	330c      	adds	r3, #12
 800a292:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a294:	693b      	ldr	r3, [r7, #16]
 800a296:	e853 3f00 	ldrex	r3, [r3]
 800a29a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	f023 0310 	bic.w	r3, r3, #16
 800a2a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a2a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	330c      	adds	r3, #12
 800a2aa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a2ac:	61fa      	str	r2, [r7, #28]
 800a2ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2b0:	69b9      	ldr	r1, [r7, #24]
 800a2b2:	69fa      	ldr	r2, [r7, #28]
 800a2b4:	e841 2300 	strex	r3, r2, [r1]
 800a2b8:	617b      	str	r3, [r7, #20]
   return(result);
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d1e5      	bne.n	800a28c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2c4:	2b01      	cmp	r3, #1
 800a2c6:	d106      	bne.n	800a2d6 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a2c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2ca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a2cc:	4619      	mov	r1, r3
 800a2ce:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a2d0:	f7ff ff0e 	bl	800a0f0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a2d4:	e002      	b.n	800a2dc <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800a2d6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a2d8:	f7f7 f984 	bl	80015e4 <HAL_UART_RxCpltCallback>
}
 800a2dc:	bf00      	nop
 800a2de:	3770      	adds	r7, #112	; 0x70
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}

0800a2e4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b084      	sub	sp, #16
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2f0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2f6:	2b01      	cmp	r3, #1
 800a2f8:	d108      	bne.n	800a30c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a2fe:	085b      	lsrs	r3, r3, #1
 800a300:	b29b      	uxth	r3, r3
 800a302:	4619      	mov	r1, r3
 800a304:	68f8      	ldr	r0, [r7, #12]
 800a306:	f7ff fef3 	bl	800a0f0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a30a:	e002      	b.n	800a312 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800a30c:	68f8      	ldr	r0, [r7, #12]
 800a30e:	f7ff fedb 	bl	800a0c8 <HAL_UART_RxHalfCpltCallback>
}
 800a312:	bf00      	nop
 800a314:	3710      	adds	r7, #16
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}

0800a31a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a31a:	b580      	push	{r7, lr}
 800a31c:	b084      	sub	sp, #16
 800a31e:	af00      	add	r7, sp, #0
 800a320:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a322:	2300      	movs	r3, #0
 800a324:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a32a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	695b      	ldr	r3, [r3, #20]
 800a332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a336:	2b80      	cmp	r3, #128	; 0x80
 800a338:	bf0c      	ite	eq
 800a33a:	2301      	moveq	r3, #1
 800a33c:	2300      	movne	r3, #0
 800a33e:	b2db      	uxtb	r3, r3
 800a340:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a348:	b2db      	uxtb	r3, r3
 800a34a:	2b21      	cmp	r3, #33	; 0x21
 800a34c:	d108      	bne.n	800a360 <UART_DMAError+0x46>
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d005      	beq.n	800a360 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	2200      	movs	r2, #0
 800a358:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a35a:	68b8      	ldr	r0, [r7, #8]
 800a35c:	f000 f930 	bl	800a5c0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	695b      	ldr	r3, [r3, #20]
 800a366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a36a:	2b40      	cmp	r3, #64	; 0x40
 800a36c:	bf0c      	ite	eq
 800a36e:	2301      	moveq	r3, #1
 800a370:	2300      	movne	r3, #0
 800a372:	b2db      	uxtb	r3, r3
 800a374:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a37c:	b2db      	uxtb	r3, r3
 800a37e:	2b22      	cmp	r3, #34	; 0x22
 800a380:	d108      	bne.n	800a394 <UART_DMAError+0x7a>
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d005      	beq.n	800a394 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	2200      	movs	r2, #0
 800a38c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a38e:	68b8      	ldr	r0, [r7, #8]
 800a390:	f000 f93e 	bl	800a610 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a398:	f043 0210 	orr.w	r2, r3, #16
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a3a0:	68b8      	ldr	r0, [r7, #8]
 800a3a2:	f7ff fe9b 	bl	800a0dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a3a6:	bf00      	nop
 800a3a8:	3710      	adds	r7, #16
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}

0800a3ae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a3ae:	b580      	push	{r7, lr}
 800a3b0:	b090      	sub	sp, #64	; 0x40
 800a3b2:	af00      	add	r7, sp, #0
 800a3b4:	60f8      	str	r0, [r7, #12]
 800a3b6:	60b9      	str	r1, [r7, #8]
 800a3b8:	603b      	str	r3, [r7, #0]
 800a3ba:	4613      	mov	r3, r2
 800a3bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a3be:	e050      	b.n	800a462 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a3c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3c6:	d04c      	beq.n	800a462 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a3c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d007      	beq.n	800a3de <UART_WaitOnFlagUntilTimeout+0x30>
 800a3ce:	f7fa f999 	bl	8004704 <HAL_GetTick>
 800a3d2:	4602      	mov	r2, r0
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	1ad3      	subs	r3, r2, r3
 800a3d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a3da:	429a      	cmp	r2, r3
 800a3dc:	d241      	bcs.n	800a462 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	330c      	adds	r3, #12
 800a3e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3e8:	e853 3f00 	ldrex	r3, [r3]
 800a3ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a3ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a3f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	330c      	adds	r3, #12
 800a3fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a3fe:	637a      	str	r2, [r7, #52]	; 0x34
 800a400:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a402:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a404:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a406:	e841 2300 	strex	r3, r2, [r1]
 800a40a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a40c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d1e5      	bne.n	800a3de <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	3314      	adds	r3, #20
 800a418:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	e853 3f00 	ldrex	r3, [r3]
 800a420:	613b      	str	r3, [r7, #16]
   return(result);
 800a422:	693b      	ldr	r3, [r7, #16]
 800a424:	f023 0301 	bic.w	r3, r3, #1
 800a428:	63bb      	str	r3, [r7, #56]	; 0x38
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	3314      	adds	r3, #20
 800a430:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a432:	623a      	str	r2, [r7, #32]
 800a434:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a436:	69f9      	ldr	r1, [r7, #28]
 800a438:	6a3a      	ldr	r2, [r7, #32]
 800a43a:	e841 2300 	strex	r3, r2, [r1]
 800a43e:	61bb      	str	r3, [r7, #24]
   return(result);
 800a440:	69bb      	ldr	r3, [r7, #24]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d1e5      	bne.n	800a412 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	2220      	movs	r2, #32
 800a44a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	2220      	movs	r2, #32
 800a452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	2200      	movs	r2, #0
 800a45a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a45e:	2303      	movs	r3, #3
 800a460:	e00f      	b.n	800a482 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	681a      	ldr	r2, [r3, #0]
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	4013      	ands	r3, r2
 800a46c:	68ba      	ldr	r2, [r7, #8]
 800a46e:	429a      	cmp	r2, r3
 800a470:	bf0c      	ite	eq
 800a472:	2301      	moveq	r3, #1
 800a474:	2300      	movne	r3, #0
 800a476:	b2db      	uxtb	r3, r3
 800a478:	461a      	mov	r2, r3
 800a47a:	79fb      	ldrb	r3, [r7, #7]
 800a47c:	429a      	cmp	r2, r3
 800a47e:	d09f      	beq.n	800a3c0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a480:	2300      	movs	r3, #0
}
 800a482:	4618      	mov	r0, r3
 800a484:	3740      	adds	r7, #64	; 0x40
 800a486:	46bd      	mov	sp, r7
 800a488:	bd80      	pop	{r7, pc}
	...

0800a48c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b098      	sub	sp, #96	; 0x60
 800a490:	af00      	add	r7, sp, #0
 800a492:	60f8      	str	r0, [r7, #12]
 800a494:	60b9      	str	r1, [r7, #8]
 800a496:	4613      	mov	r3, r2
 800a498:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a49a:	68ba      	ldr	r2, [r7, #8]
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	88fa      	ldrh	r2, [r7, #6]
 800a4a4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	2222      	movs	r2, #34	; 0x22
 800a4b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4b8:	4a3e      	ldr	r2, [pc, #248]	; (800a5b4 <UART_Start_Receive_DMA+0x128>)
 800a4ba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4c0:	4a3d      	ldr	r2, [pc, #244]	; (800a5b8 <UART_Start_Receive_DMA+0x12c>)
 800a4c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4c8:	4a3c      	ldr	r2, [pc, #240]	; (800a5bc <UART_Start_Receive_DMA+0x130>)
 800a4ca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a4d4:	f107 0308 	add.w	r3, r7, #8
 800a4d8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	3304      	adds	r3, #4
 800a4e4:	4619      	mov	r1, r3
 800a4e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a4e8:	681a      	ldr	r2, [r3, #0]
 800a4ea:	88fb      	ldrh	r3, [r7, #6]
 800a4ec:	f7fa fae6 	bl	8004abc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	613b      	str	r3, [r7, #16]
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	613b      	str	r3, [r7, #16]
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	685b      	ldr	r3, [r3, #4]
 800a502:	613b      	str	r3, [r7, #16]
 800a504:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	2200      	movs	r2, #0
 800a50a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	330c      	adds	r3, #12
 800a514:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a516:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a518:	e853 3f00 	ldrex	r3, [r3]
 800a51c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a51e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a524:	65bb      	str	r3, [r7, #88]	; 0x58
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	330c      	adds	r3, #12
 800a52c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a52e:	64fa      	str	r2, [r7, #76]	; 0x4c
 800a530:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a532:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a534:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a536:	e841 2300 	strex	r3, r2, [r1]
 800a53a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a53c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d1e5      	bne.n	800a50e <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	3314      	adds	r3, #20
 800a548:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a54a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a54c:	e853 3f00 	ldrex	r3, [r3]
 800a550:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a554:	f043 0301 	orr.w	r3, r3, #1
 800a558:	657b      	str	r3, [r7, #84]	; 0x54
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	3314      	adds	r3, #20
 800a560:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a562:	63ba      	str	r2, [r7, #56]	; 0x38
 800a564:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a566:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a568:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a56a:	e841 2300 	strex	r3, r2, [r1]
 800a56e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a572:	2b00      	cmp	r3, #0
 800a574:	d1e5      	bne.n	800a542 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	3314      	adds	r3, #20
 800a57c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a57e:	69bb      	ldr	r3, [r7, #24]
 800a580:	e853 3f00 	ldrex	r3, [r3]
 800a584:	617b      	str	r3, [r7, #20]
   return(result);
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a58c:	653b      	str	r3, [r7, #80]	; 0x50
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	3314      	adds	r3, #20
 800a594:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a596:	627a      	str	r2, [r7, #36]	; 0x24
 800a598:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a59a:	6a39      	ldr	r1, [r7, #32]
 800a59c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a59e:	e841 2300 	strex	r3, r2, [r1]
 800a5a2:	61fb      	str	r3, [r7, #28]
   return(result);
 800a5a4:	69fb      	ldr	r3, [r7, #28]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d1e5      	bne.n	800a576 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800a5aa:	2300      	movs	r3, #0
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	3760      	adds	r7, #96	; 0x60
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}
 800a5b4:	0800a1bf 	.word	0x0800a1bf
 800a5b8:	0800a2e5 	.word	0x0800a2e5
 800a5bc:	0800a31b 	.word	0x0800a31b

0800a5c0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	b089      	sub	sp, #36	; 0x24
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	330c      	adds	r3, #12
 800a5ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	e853 3f00 	ldrex	r3, [r3]
 800a5d6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a5de:	61fb      	str	r3, [r7, #28]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	330c      	adds	r3, #12
 800a5e6:	69fa      	ldr	r2, [r7, #28]
 800a5e8:	61ba      	str	r2, [r7, #24]
 800a5ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ec:	6979      	ldr	r1, [r7, #20]
 800a5ee:	69ba      	ldr	r2, [r7, #24]
 800a5f0:	e841 2300 	strex	r3, r2, [r1]
 800a5f4:	613b      	str	r3, [r7, #16]
   return(result);
 800a5f6:	693b      	ldr	r3, [r7, #16]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d1e5      	bne.n	800a5c8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2220      	movs	r2, #32
 800a600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800a604:	bf00      	nop
 800a606:	3724      	adds	r7, #36	; 0x24
 800a608:	46bd      	mov	sp, r7
 800a60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60e:	4770      	bx	lr

0800a610 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a610:	b480      	push	{r7}
 800a612:	b095      	sub	sp, #84	; 0x54
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	330c      	adds	r3, #12
 800a61e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a622:	e853 3f00 	ldrex	r3, [r3]
 800a626:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a62a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a62e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	330c      	adds	r3, #12
 800a636:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a638:	643a      	str	r2, [r7, #64]	; 0x40
 800a63a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a63c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a63e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a640:	e841 2300 	strex	r3, r2, [r1]
 800a644:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d1e5      	bne.n	800a618 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	3314      	adds	r3, #20
 800a652:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a654:	6a3b      	ldr	r3, [r7, #32]
 800a656:	e853 3f00 	ldrex	r3, [r3]
 800a65a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a65c:	69fb      	ldr	r3, [r7, #28]
 800a65e:	f023 0301 	bic.w	r3, r3, #1
 800a662:	64bb      	str	r3, [r7, #72]	; 0x48
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	3314      	adds	r3, #20
 800a66a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a66c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a66e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a670:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a672:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a674:	e841 2300 	strex	r3, r2, [r1]
 800a678:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d1e5      	bne.n	800a64c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a684:	2b01      	cmp	r3, #1
 800a686:	d119      	bne.n	800a6bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	330c      	adds	r3, #12
 800a68e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	e853 3f00 	ldrex	r3, [r3]
 800a696:	60bb      	str	r3, [r7, #8]
   return(result);
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	f023 0310 	bic.w	r3, r3, #16
 800a69e:	647b      	str	r3, [r7, #68]	; 0x44
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	330c      	adds	r3, #12
 800a6a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a6a8:	61ba      	str	r2, [r7, #24]
 800a6aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ac:	6979      	ldr	r1, [r7, #20]
 800a6ae:	69ba      	ldr	r2, [r7, #24]
 800a6b0:	e841 2300 	strex	r3, r2, [r1]
 800a6b4:	613b      	str	r3, [r7, #16]
   return(result);
 800a6b6:	693b      	ldr	r3, [r7, #16]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d1e5      	bne.n	800a688 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2220      	movs	r2, #32
 800a6c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a6ca:	bf00      	nop
 800a6cc:	3754      	adds	r7, #84	; 0x54
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d4:	4770      	bx	lr

0800a6d6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a6d6:	b580      	push	{r7, lr}
 800a6d8:	b084      	sub	sp, #16
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a6f0:	68f8      	ldr	r0, [r7, #12]
 800a6f2:	f7ff fcf3 	bl	800a0dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a6f6:	bf00      	nop
 800a6f8:	3710      	adds	r7, #16
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}

0800a6fe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a6fe:	b480      	push	{r7}
 800a700:	b085      	sub	sp, #20
 800a702:	af00      	add	r7, sp, #0
 800a704:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a70c:	b2db      	uxtb	r3, r3
 800a70e:	2b21      	cmp	r3, #33	; 0x21
 800a710:	d13e      	bne.n	800a790 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	689b      	ldr	r3, [r3, #8]
 800a716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a71a:	d114      	bne.n	800a746 <UART_Transmit_IT+0x48>
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	691b      	ldr	r3, [r3, #16]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d110      	bne.n	800a746 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6a1b      	ldr	r3, [r3, #32]
 800a728:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	881b      	ldrh	r3, [r3, #0]
 800a72e:	461a      	mov	r2, r3
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a738:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6a1b      	ldr	r3, [r3, #32]
 800a73e:	1c9a      	adds	r2, r3, #2
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	621a      	str	r2, [r3, #32]
 800a744:	e008      	b.n	800a758 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6a1b      	ldr	r3, [r3, #32]
 800a74a:	1c59      	adds	r1, r3, #1
 800a74c:	687a      	ldr	r2, [r7, #4]
 800a74e:	6211      	str	r1, [r2, #32]
 800a750:	781a      	ldrb	r2, [r3, #0]
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a75c:	b29b      	uxth	r3, r3
 800a75e:	3b01      	subs	r3, #1
 800a760:	b29b      	uxth	r3, r3
 800a762:	687a      	ldr	r2, [r7, #4]
 800a764:	4619      	mov	r1, r3
 800a766:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d10f      	bne.n	800a78c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	68da      	ldr	r2, [r3, #12]
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a77a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	68da      	ldr	r2, [r3, #12]
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a78a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a78c:	2300      	movs	r3, #0
 800a78e:	e000      	b.n	800a792 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a790:	2302      	movs	r3, #2
  }
}
 800a792:	4618      	mov	r0, r3
 800a794:	3714      	adds	r7, #20
 800a796:	46bd      	mov	sp, r7
 800a798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79c:	4770      	bx	lr

0800a79e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a79e:	b580      	push	{r7, lr}
 800a7a0:	b082      	sub	sp, #8
 800a7a2:	af00      	add	r7, sp, #0
 800a7a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	68da      	ldr	r2, [r3, #12]
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a7b4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2220      	movs	r2, #32
 800a7ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f7f6 ff26 	bl	8001610 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a7c4:	2300      	movs	r3, #0
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	3708      	adds	r7, #8
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}

0800a7ce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a7ce:	b580      	push	{r7, lr}
 800a7d0:	b08c      	sub	sp, #48	; 0x30
 800a7d2:	af00      	add	r7, sp, #0
 800a7d4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a7dc:	b2db      	uxtb	r3, r3
 800a7de:	2b22      	cmp	r3, #34	; 0x22
 800a7e0:	f040 80ab 	bne.w	800a93a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	689b      	ldr	r3, [r3, #8]
 800a7e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7ec:	d117      	bne.n	800a81e <UART_Receive_IT+0x50>
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	691b      	ldr	r3, [r3, #16]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d113      	bne.n	800a81e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7fe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	685b      	ldr	r3, [r3, #4]
 800a806:	b29b      	uxth	r3, r3
 800a808:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a80c:	b29a      	uxth	r2, r3
 800a80e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a810:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a816:	1c9a      	adds	r2, r3, #2
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	629a      	str	r2, [r3, #40]	; 0x28
 800a81c:	e026      	b.n	800a86c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a822:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a824:	2300      	movs	r3, #0
 800a826:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	689b      	ldr	r3, [r3, #8]
 800a82c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a830:	d007      	beq.n	800a842 <UART_Receive_IT+0x74>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	689b      	ldr	r3, [r3, #8]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d10a      	bne.n	800a850 <UART_Receive_IT+0x82>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	691b      	ldr	r3, [r3, #16]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d106      	bne.n	800a850 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	685b      	ldr	r3, [r3, #4]
 800a848:	b2da      	uxtb	r2, r3
 800a84a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a84c:	701a      	strb	r2, [r3, #0]
 800a84e:	e008      	b.n	800a862 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	685b      	ldr	r3, [r3, #4]
 800a856:	b2db      	uxtb	r3, r3
 800a858:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a85c:	b2da      	uxtb	r2, r3
 800a85e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a860:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a866:	1c5a      	adds	r2, r3, #1
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a870:	b29b      	uxth	r3, r3
 800a872:	3b01      	subs	r3, #1
 800a874:	b29b      	uxth	r3, r3
 800a876:	687a      	ldr	r2, [r7, #4]
 800a878:	4619      	mov	r1, r3
 800a87a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d15a      	bne.n	800a936 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	68da      	ldr	r2, [r3, #12]
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f022 0220 	bic.w	r2, r2, #32
 800a88e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	68da      	ldr	r2, [r3, #12]
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a89e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	695a      	ldr	r2, [r3, #20]
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f022 0201 	bic.w	r2, r2, #1
 800a8ae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2220      	movs	r2, #32
 800a8b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8bc:	2b01      	cmp	r3, #1
 800a8be:	d135      	bne.n	800a92c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	330c      	adds	r3, #12
 800a8cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	e853 3f00 	ldrex	r3, [r3]
 800a8d4:	613b      	str	r3, [r7, #16]
   return(result);
 800a8d6:	693b      	ldr	r3, [r7, #16]
 800a8d8:	f023 0310 	bic.w	r3, r3, #16
 800a8dc:	627b      	str	r3, [r7, #36]	; 0x24
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	330c      	adds	r3, #12
 800a8e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8e6:	623a      	str	r2, [r7, #32]
 800a8e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8ea:	69f9      	ldr	r1, [r7, #28]
 800a8ec:	6a3a      	ldr	r2, [r7, #32]
 800a8ee:	e841 2300 	strex	r3, r2, [r1]
 800a8f2:	61bb      	str	r3, [r7, #24]
   return(result);
 800a8f4:	69bb      	ldr	r3, [r7, #24]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d1e5      	bne.n	800a8c6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f003 0310 	and.w	r3, r3, #16
 800a904:	2b10      	cmp	r3, #16
 800a906:	d10a      	bne.n	800a91e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a908:	2300      	movs	r3, #0
 800a90a:	60fb      	str	r3, [r7, #12]
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	60fb      	str	r3, [r7, #12]
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	685b      	ldr	r3, [r3, #4]
 800a91a:	60fb      	str	r3, [r7, #12]
 800a91c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a922:	4619      	mov	r1, r3
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f7ff fbe3 	bl	800a0f0 <HAL_UARTEx_RxEventCallback>
 800a92a:	e002      	b.n	800a932 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f7f6 fe59 	bl	80015e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a932:	2300      	movs	r3, #0
 800a934:	e002      	b.n	800a93c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a936:	2300      	movs	r3, #0
 800a938:	e000      	b.n	800a93c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a93a:	2302      	movs	r3, #2
  }
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	3730      	adds	r7, #48	; 0x30
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}

0800a944 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a944:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a948:	b0c0      	sub	sp, #256	; 0x100
 800a94a:	af00      	add	r7, sp, #0
 800a94c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	691b      	ldr	r3, [r3, #16]
 800a958:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a95c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a960:	68d9      	ldr	r1, [r3, #12]
 800a962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a966:	681a      	ldr	r2, [r3, #0]
 800a968:	ea40 0301 	orr.w	r3, r0, r1
 800a96c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a96e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a972:	689a      	ldr	r2, [r3, #8]
 800a974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a978:	691b      	ldr	r3, [r3, #16]
 800a97a:	431a      	orrs	r2, r3
 800a97c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a980:	695b      	ldr	r3, [r3, #20]
 800a982:	431a      	orrs	r2, r3
 800a984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a988:	69db      	ldr	r3, [r3, #28]
 800a98a:	4313      	orrs	r3, r2
 800a98c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	68db      	ldr	r3, [r3, #12]
 800a998:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a99c:	f021 010c 	bic.w	r1, r1, #12
 800a9a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9a4:	681a      	ldr	r2, [r3, #0]
 800a9a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a9aa:	430b      	orrs	r3, r1
 800a9ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a9ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	695b      	ldr	r3, [r3, #20]
 800a9b6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a9ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9be:	6999      	ldr	r1, [r3, #24]
 800a9c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9c4:	681a      	ldr	r2, [r3, #0]
 800a9c6:	ea40 0301 	orr.w	r3, r0, r1
 800a9ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a9cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9d0:	681a      	ldr	r2, [r3, #0]
 800a9d2:	4b8f      	ldr	r3, [pc, #572]	; (800ac10 <UART_SetConfig+0x2cc>)
 800a9d4:	429a      	cmp	r2, r3
 800a9d6:	d005      	beq.n	800a9e4 <UART_SetConfig+0xa0>
 800a9d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9dc:	681a      	ldr	r2, [r3, #0]
 800a9de:	4b8d      	ldr	r3, [pc, #564]	; (800ac14 <UART_SetConfig+0x2d0>)
 800a9e0:	429a      	cmp	r2, r3
 800a9e2:	d104      	bne.n	800a9ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a9e4:	f7fd fb18 	bl	8008018 <HAL_RCC_GetPCLK2Freq>
 800a9e8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a9ec:	e003      	b.n	800a9f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a9ee:	f7fd faff 	bl	8007ff0 <HAL_RCC_GetPCLK1Freq>
 800a9f2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a9f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9fa:	69db      	ldr	r3, [r3, #28]
 800a9fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa00:	f040 810c 	bne.w	800ac1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800aa04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aa08:	2200      	movs	r2, #0
 800aa0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800aa0e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800aa12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800aa16:	4622      	mov	r2, r4
 800aa18:	462b      	mov	r3, r5
 800aa1a:	1891      	adds	r1, r2, r2
 800aa1c:	65b9      	str	r1, [r7, #88]	; 0x58
 800aa1e:	415b      	adcs	r3, r3
 800aa20:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aa22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800aa26:	4621      	mov	r1, r4
 800aa28:	eb12 0801 	adds.w	r8, r2, r1
 800aa2c:	4629      	mov	r1, r5
 800aa2e:	eb43 0901 	adc.w	r9, r3, r1
 800aa32:	f04f 0200 	mov.w	r2, #0
 800aa36:	f04f 0300 	mov.w	r3, #0
 800aa3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800aa3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800aa42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800aa46:	4690      	mov	r8, r2
 800aa48:	4699      	mov	r9, r3
 800aa4a:	4623      	mov	r3, r4
 800aa4c:	eb18 0303 	adds.w	r3, r8, r3
 800aa50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800aa54:	462b      	mov	r3, r5
 800aa56:	eb49 0303 	adc.w	r3, r9, r3
 800aa5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800aa5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa62:	685b      	ldr	r3, [r3, #4]
 800aa64:	2200      	movs	r2, #0
 800aa66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800aa6a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800aa6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800aa72:	460b      	mov	r3, r1
 800aa74:	18db      	adds	r3, r3, r3
 800aa76:	653b      	str	r3, [r7, #80]	; 0x50
 800aa78:	4613      	mov	r3, r2
 800aa7a:	eb42 0303 	adc.w	r3, r2, r3
 800aa7e:	657b      	str	r3, [r7, #84]	; 0x54
 800aa80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800aa84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800aa88:	f7f6 f838 	bl	8000afc <__aeabi_uldivmod>
 800aa8c:	4602      	mov	r2, r0
 800aa8e:	460b      	mov	r3, r1
 800aa90:	4b61      	ldr	r3, [pc, #388]	; (800ac18 <UART_SetConfig+0x2d4>)
 800aa92:	fba3 2302 	umull	r2, r3, r3, r2
 800aa96:	095b      	lsrs	r3, r3, #5
 800aa98:	011c      	lsls	r4, r3, #4
 800aa9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800aaa4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800aaa8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800aaac:	4642      	mov	r2, r8
 800aaae:	464b      	mov	r3, r9
 800aab0:	1891      	adds	r1, r2, r2
 800aab2:	64b9      	str	r1, [r7, #72]	; 0x48
 800aab4:	415b      	adcs	r3, r3
 800aab6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aab8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800aabc:	4641      	mov	r1, r8
 800aabe:	eb12 0a01 	adds.w	sl, r2, r1
 800aac2:	4649      	mov	r1, r9
 800aac4:	eb43 0b01 	adc.w	fp, r3, r1
 800aac8:	f04f 0200 	mov.w	r2, #0
 800aacc:	f04f 0300 	mov.w	r3, #0
 800aad0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800aad4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800aad8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aadc:	4692      	mov	sl, r2
 800aade:	469b      	mov	fp, r3
 800aae0:	4643      	mov	r3, r8
 800aae2:	eb1a 0303 	adds.w	r3, sl, r3
 800aae6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aaea:	464b      	mov	r3, r9
 800aaec:	eb4b 0303 	adc.w	r3, fp, r3
 800aaf0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800aaf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aaf8:	685b      	ldr	r3, [r3, #4]
 800aafa:	2200      	movs	r2, #0
 800aafc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ab00:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800ab04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800ab08:	460b      	mov	r3, r1
 800ab0a:	18db      	adds	r3, r3, r3
 800ab0c:	643b      	str	r3, [r7, #64]	; 0x40
 800ab0e:	4613      	mov	r3, r2
 800ab10:	eb42 0303 	adc.w	r3, r2, r3
 800ab14:	647b      	str	r3, [r7, #68]	; 0x44
 800ab16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ab1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800ab1e:	f7f5 ffed 	bl	8000afc <__aeabi_uldivmod>
 800ab22:	4602      	mov	r2, r0
 800ab24:	460b      	mov	r3, r1
 800ab26:	4611      	mov	r1, r2
 800ab28:	4b3b      	ldr	r3, [pc, #236]	; (800ac18 <UART_SetConfig+0x2d4>)
 800ab2a:	fba3 2301 	umull	r2, r3, r3, r1
 800ab2e:	095b      	lsrs	r3, r3, #5
 800ab30:	2264      	movs	r2, #100	; 0x64
 800ab32:	fb02 f303 	mul.w	r3, r2, r3
 800ab36:	1acb      	subs	r3, r1, r3
 800ab38:	00db      	lsls	r3, r3, #3
 800ab3a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800ab3e:	4b36      	ldr	r3, [pc, #216]	; (800ac18 <UART_SetConfig+0x2d4>)
 800ab40:	fba3 2302 	umull	r2, r3, r3, r2
 800ab44:	095b      	lsrs	r3, r3, #5
 800ab46:	005b      	lsls	r3, r3, #1
 800ab48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ab4c:	441c      	add	r4, r3
 800ab4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ab52:	2200      	movs	r2, #0
 800ab54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ab58:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800ab5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800ab60:	4642      	mov	r2, r8
 800ab62:	464b      	mov	r3, r9
 800ab64:	1891      	adds	r1, r2, r2
 800ab66:	63b9      	str	r1, [r7, #56]	; 0x38
 800ab68:	415b      	adcs	r3, r3
 800ab6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ab70:	4641      	mov	r1, r8
 800ab72:	1851      	adds	r1, r2, r1
 800ab74:	6339      	str	r1, [r7, #48]	; 0x30
 800ab76:	4649      	mov	r1, r9
 800ab78:	414b      	adcs	r3, r1
 800ab7a:	637b      	str	r3, [r7, #52]	; 0x34
 800ab7c:	f04f 0200 	mov.w	r2, #0
 800ab80:	f04f 0300 	mov.w	r3, #0
 800ab84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800ab88:	4659      	mov	r1, fp
 800ab8a:	00cb      	lsls	r3, r1, #3
 800ab8c:	4651      	mov	r1, sl
 800ab8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ab92:	4651      	mov	r1, sl
 800ab94:	00ca      	lsls	r2, r1, #3
 800ab96:	4610      	mov	r0, r2
 800ab98:	4619      	mov	r1, r3
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	4642      	mov	r2, r8
 800ab9e:	189b      	adds	r3, r3, r2
 800aba0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800aba4:	464b      	mov	r3, r9
 800aba6:	460a      	mov	r2, r1
 800aba8:	eb42 0303 	adc.w	r3, r2, r3
 800abac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800abb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abb4:	685b      	ldr	r3, [r3, #4]
 800abb6:	2200      	movs	r2, #0
 800abb8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800abbc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800abc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800abc4:	460b      	mov	r3, r1
 800abc6:	18db      	adds	r3, r3, r3
 800abc8:	62bb      	str	r3, [r7, #40]	; 0x28
 800abca:	4613      	mov	r3, r2
 800abcc:	eb42 0303 	adc.w	r3, r2, r3
 800abd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800abd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800abd6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800abda:	f7f5 ff8f 	bl	8000afc <__aeabi_uldivmod>
 800abde:	4602      	mov	r2, r0
 800abe0:	460b      	mov	r3, r1
 800abe2:	4b0d      	ldr	r3, [pc, #52]	; (800ac18 <UART_SetConfig+0x2d4>)
 800abe4:	fba3 1302 	umull	r1, r3, r3, r2
 800abe8:	095b      	lsrs	r3, r3, #5
 800abea:	2164      	movs	r1, #100	; 0x64
 800abec:	fb01 f303 	mul.w	r3, r1, r3
 800abf0:	1ad3      	subs	r3, r2, r3
 800abf2:	00db      	lsls	r3, r3, #3
 800abf4:	3332      	adds	r3, #50	; 0x32
 800abf6:	4a08      	ldr	r2, [pc, #32]	; (800ac18 <UART_SetConfig+0x2d4>)
 800abf8:	fba2 2303 	umull	r2, r3, r2, r3
 800abfc:	095b      	lsrs	r3, r3, #5
 800abfe:	f003 0207 	and.w	r2, r3, #7
 800ac02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	4422      	add	r2, r4
 800ac0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ac0c:	e105      	b.n	800ae1a <UART_SetConfig+0x4d6>
 800ac0e:	bf00      	nop
 800ac10:	40011000 	.word	0x40011000
 800ac14:	40011400 	.word	0x40011400
 800ac18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ac1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ac20:	2200      	movs	r2, #0
 800ac22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ac26:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ac2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800ac2e:	4642      	mov	r2, r8
 800ac30:	464b      	mov	r3, r9
 800ac32:	1891      	adds	r1, r2, r2
 800ac34:	6239      	str	r1, [r7, #32]
 800ac36:	415b      	adcs	r3, r3
 800ac38:	627b      	str	r3, [r7, #36]	; 0x24
 800ac3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ac3e:	4641      	mov	r1, r8
 800ac40:	1854      	adds	r4, r2, r1
 800ac42:	4649      	mov	r1, r9
 800ac44:	eb43 0501 	adc.w	r5, r3, r1
 800ac48:	f04f 0200 	mov.w	r2, #0
 800ac4c:	f04f 0300 	mov.w	r3, #0
 800ac50:	00eb      	lsls	r3, r5, #3
 800ac52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ac56:	00e2      	lsls	r2, r4, #3
 800ac58:	4614      	mov	r4, r2
 800ac5a:	461d      	mov	r5, r3
 800ac5c:	4643      	mov	r3, r8
 800ac5e:	18e3      	adds	r3, r4, r3
 800ac60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ac64:	464b      	mov	r3, r9
 800ac66:	eb45 0303 	adc.w	r3, r5, r3
 800ac6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ac6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	2200      	movs	r2, #0
 800ac76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ac7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ac7e:	f04f 0200 	mov.w	r2, #0
 800ac82:	f04f 0300 	mov.w	r3, #0
 800ac86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800ac8a:	4629      	mov	r1, r5
 800ac8c:	008b      	lsls	r3, r1, #2
 800ac8e:	4621      	mov	r1, r4
 800ac90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ac94:	4621      	mov	r1, r4
 800ac96:	008a      	lsls	r2, r1, #2
 800ac98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800ac9c:	f7f5 ff2e 	bl	8000afc <__aeabi_uldivmod>
 800aca0:	4602      	mov	r2, r0
 800aca2:	460b      	mov	r3, r1
 800aca4:	4b60      	ldr	r3, [pc, #384]	; (800ae28 <UART_SetConfig+0x4e4>)
 800aca6:	fba3 2302 	umull	r2, r3, r3, r2
 800acaa:	095b      	lsrs	r3, r3, #5
 800acac:	011c      	lsls	r4, r3, #4
 800acae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800acb2:	2200      	movs	r2, #0
 800acb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800acb8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800acbc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800acc0:	4642      	mov	r2, r8
 800acc2:	464b      	mov	r3, r9
 800acc4:	1891      	adds	r1, r2, r2
 800acc6:	61b9      	str	r1, [r7, #24]
 800acc8:	415b      	adcs	r3, r3
 800acca:	61fb      	str	r3, [r7, #28]
 800accc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800acd0:	4641      	mov	r1, r8
 800acd2:	1851      	adds	r1, r2, r1
 800acd4:	6139      	str	r1, [r7, #16]
 800acd6:	4649      	mov	r1, r9
 800acd8:	414b      	adcs	r3, r1
 800acda:	617b      	str	r3, [r7, #20]
 800acdc:	f04f 0200 	mov.w	r2, #0
 800ace0:	f04f 0300 	mov.w	r3, #0
 800ace4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ace8:	4659      	mov	r1, fp
 800acea:	00cb      	lsls	r3, r1, #3
 800acec:	4651      	mov	r1, sl
 800acee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800acf2:	4651      	mov	r1, sl
 800acf4:	00ca      	lsls	r2, r1, #3
 800acf6:	4610      	mov	r0, r2
 800acf8:	4619      	mov	r1, r3
 800acfa:	4603      	mov	r3, r0
 800acfc:	4642      	mov	r2, r8
 800acfe:	189b      	adds	r3, r3, r2
 800ad00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ad04:	464b      	mov	r3, r9
 800ad06:	460a      	mov	r2, r1
 800ad08:	eb42 0303 	adc.w	r3, r2, r3
 800ad0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ad10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad14:	685b      	ldr	r3, [r3, #4]
 800ad16:	2200      	movs	r2, #0
 800ad18:	67bb      	str	r3, [r7, #120]	; 0x78
 800ad1a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ad1c:	f04f 0200 	mov.w	r2, #0
 800ad20:	f04f 0300 	mov.w	r3, #0
 800ad24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800ad28:	4649      	mov	r1, r9
 800ad2a:	008b      	lsls	r3, r1, #2
 800ad2c:	4641      	mov	r1, r8
 800ad2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ad32:	4641      	mov	r1, r8
 800ad34:	008a      	lsls	r2, r1, #2
 800ad36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ad3a:	f7f5 fedf 	bl	8000afc <__aeabi_uldivmod>
 800ad3e:	4602      	mov	r2, r0
 800ad40:	460b      	mov	r3, r1
 800ad42:	4b39      	ldr	r3, [pc, #228]	; (800ae28 <UART_SetConfig+0x4e4>)
 800ad44:	fba3 1302 	umull	r1, r3, r3, r2
 800ad48:	095b      	lsrs	r3, r3, #5
 800ad4a:	2164      	movs	r1, #100	; 0x64
 800ad4c:	fb01 f303 	mul.w	r3, r1, r3
 800ad50:	1ad3      	subs	r3, r2, r3
 800ad52:	011b      	lsls	r3, r3, #4
 800ad54:	3332      	adds	r3, #50	; 0x32
 800ad56:	4a34      	ldr	r2, [pc, #208]	; (800ae28 <UART_SetConfig+0x4e4>)
 800ad58:	fba2 2303 	umull	r2, r3, r2, r3
 800ad5c:	095b      	lsrs	r3, r3, #5
 800ad5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ad62:	441c      	add	r4, r3
 800ad64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ad68:	2200      	movs	r2, #0
 800ad6a:	673b      	str	r3, [r7, #112]	; 0x70
 800ad6c:	677a      	str	r2, [r7, #116]	; 0x74
 800ad6e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800ad72:	4642      	mov	r2, r8
 800ad74:	464b      	mov	r3, r9
 800ad76:	1891      	adds	r1, r2, r2
 800ad78:	60b9      	str	r1, [r7, #8]
 800ad7a:	415b      	adcs	r3, r3
 800ad7c:	60fb      	str	r3, [r7, #12]
 800ad7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ad82:	4641      	mov	r1, r8
 800ad84:	1851      	adds	r1, r2, r1
 800ad86:	6039      	str	r1, [r7, #0]
 800ad88:	4649      	mov	r1, r9
 800ad8a:	414b      	adcs	r3, r1
 800ad8c:	607b      	str	r3, [r7, #4]
 800ad8e:	f04f 0200 	mov.w	r2, #0
 800ad92:	f04f 0300 	mov.w	r3, #0
 800ad96:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ad9a:	4659      	mov	r1, fp
 800ad9c:	00cb      	lsls	r3, r1, #3
 800ad9e:	4651      	mov	r1, sl
 800ada0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ada4:	4651      	mov	r1, sl
 800ada6:	00ca      	lsls	r2, r1, #3
 800ada8:	4610      	mov	r0, r2
 800adaa:	4619      	mov	r1, r3
 800adac:	4603      	mov	r3, r0
 800adae:	4642      	mov	r2, r8
 800adb0:	189b      	adds	r3, r3, r2
 800adb2:	66bb      	str	r3, [r7, #104]	; 0x68
 800adb4:	464b      	mov	r3, r9
 800adb6:	460a      	mov	r2, r1
 800adb8:	eb42 0303 	adc.w	r3, r2, r3
 800adbc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800adbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800adc2:	685b      	ldr	r3, [r3, #4]
 800adc4:	2200      	movs	r2, #0
 800adc6:	663b      	str	r3, [r7, #96]	; 0x60
 800adc8:	667a      	str	r2, [r7, #100]	; 0x64
 800adca:	f04f 0200 	mov.w	r2, #0
 800adce:	f04f 0300 	mov.w	r3, #0
 800add2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800add6:	4649      	mov	r1, r9
 800add8:	008b      	lsls	r3, r1, #2
 800adda:	4641      	mov	r1, r8
 800addc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ade0:	4641      	mov	r1, r8
 800ade2:	008a      	lsls	r2, r1, #2
 800ade4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800ade8:	f7f5 fe88 	bl	8000afc <__aeabi_uldivmod>
 800adec:	4602      	mov	r2, r0
 800adee:	460b      	mov	r3, r1
 800adf0:	4b0d      	ldr	r3, [pc, #52]	; (800ae28 <UART_SetConfig+0x4e4>)
 800adf2:	fba3 1302 	umull	r1, r3, r3, r2
 800adf6:	095b      	lsrs	r3, r3, #5
 800adf8:	2164      	movs	r1, #100	; 0x64
 800adfa:	fb01 f303 	mul.w	r3, r1, r3
 800adfe:	1ad3      	subs	r3, r2, r3
 800ae00:	011b      	lsls	r3, r3, #4
 800ae02:	3332      	adds	r3, #50	; 0x32
 800ae04:	4a08      	ldr	r2, [pc, #32]	; (800ae28 <UART_SetConfig+0x4e4>)
 800ae06:	fba2 2303 	umull	r2, r3, r2, r3
 800ae0a:	095b      	lsrs	r3, r3, #5
 800ae0c:	f003 020f 	and.w	r2, r3, #15
 800ae10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	4422      	add	r2, r4
 800ae18:	609a      	str	r2, [r3, #8]
}
 800ae1a:	bf00      	nop
 800ae1c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800ae20:	46bd      	mov	sp, r7
 800ae22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ae26:	bf00      	nop
 800ae28:	51eb851f 	.word	0x51eb851f

0800ae2c <__NVIC_SetPriority>:
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b083      	sub	sp, #12
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	4603      	mov	r3, r0
 800ae34:	6039      	str	r1, [r7, #0]
 800ae36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ae38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	db0a      	blt.n	800ae56 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	b2da      	uxtb	r2, r3
 800ae44:	490c      	ldr	r1, [pc, #48]	; (800ae78 <__NVIC_SetPriority+0x4c>)
 800ae46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae4a:	0112      	lsls	r2, r2, #4
 800ae4c:	b2d2      	uxtb	r2, r2
 800ae4e:	440b      	add	r3, r1
 800ae50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ae54:	e00a      	b.n	800ae6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	b2da      	uxtb	r2, r3
 800ae5a:	4908      	ldr	r1, [pc, #32]	; (800ae7c <__NVIC_SetPriority+0x50>)
 800ae5c:	79fb      	ldrb	r3, [r7, #7]
 800ae5e:	f003 030f 	and.w	r3, r3, #15
 800ae62:	3b04      	subs	r3, #4
 800ae64:	0112      	lsls	r2, r2, #4
 800ae66:	b2d2      	uxtb	r2, r2
 800ae68:	440b      	add	r3, r1
 800ae6a:	761a      	strb	r2, [r3, #24]
}
 800ae6c:	bf00      	nop
 800ae6e:	370c      	adds	r7, #12
 800ae70:	46bd      	mov	sp, r7
 800ae72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae76:	4770      	bx	lr
 800ae78:	e000e100 	.word	0xe000e100
 800ae7c:	e000ed00 	.word	0xe000ed00

0800ae80 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ae80:	b580      	push	{r7, lr}
 800ae82:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ae84:	4b05      	ldr	r3, [pc, #20]	; (800ae9c <SysTick_Handler+0x1c>)
 800ae86:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ae88:	f002 fe0a 	bl	800daa0 <xTaskGetSchedulerState>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	2b01      	cmp	r3, #1
 800ae90:	d001      	beq.n	800ae96 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ae92:	f003 fda9 	bl	800e9e8 <xPortSysTickHandler>
  }
}
 800ae96:	bf00      	nop
 800ae98:	bd80      	pop	{r7, pc}
 800ae9a:	bf00      	nop
 800ae9c:	e000e010 	.word	0xe000e010

0800aea0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800aea0:	b580      	push	{r7, lr}
 800aea2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800aea4:	2100      	movs	r1, #0
 800aea6:	f06f 0004 	mvn.w	r0, #4
 800aeaa:	f7ff ffbf 	bl	800ae2c <__NVIC_SetPriority>
#endif
}
 800aeae:	bf00      	nop
 800aeb0:	bd80      	pop	{r7, pc}
	...

0800aeb4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800aeb4:	b480      	push	{r7}
 800aeb6:	b083      	sub	sp, #12
 800aeb8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aeba:	f3ef 8305 	mrs	r3, IPSR
 800aebe:	603b      	str	r3, [r7, #0]
  return(result);
 800aec0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d003      	beq.n	800aece <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800aec6:	f06f 0305 	mvn.w	r3, #5
 800aeca:	607b      	str	r3, [r7, #4]
 800aecc:	e00c      	b.n	800aee8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800aece:	4b0a      	ldr	r3, [pc, #40]	; (800aef8 <osKernelInitialize+0x44>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d105      	bne.n	800aee2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800aed6:	4b08      	ldr	r3, [pc, #32]	; (800aef8 <osKernelInitialize+0x44>)
 800aed8:	2201      	movs	r2, #1
 800aeda:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800aedc:	2300      	movs	r3, #0
 800aede:	607b      	str	r3, [r7, #4]
 800aee0:	e002      	b.n	800aee8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800aee2:	f04f 33ff 	mov.w	r3, #4294967295
 800aee6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800aee8:	687b      	ldr	r3, [r7, #4]
}
 800aeea:	4618      	mov	r0, r3
 800aeec:	370c      	adds	r7, #12
 800aeee:	46bd      	mov	sp, r7
 800aef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef4:	4770      	bx	lr
 800aef6:	bf00      	nop
 800aef8:	200007fc 	.word	0x200007fc

0800aefc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b082      	sub	sp, #8
 800af00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af02:	f3ef 8305 	mrs	r3, IPSR
 800af06:	603b      	str	r3, [r7, #0]
  return(result);
 800af08:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d003      	beq.n	800af16 <osKernelStart+0x1a>
    stat = osErrorISR;
 800af0e:	f06f 0305 	mvn.w	r3, #5
 800af12:	607b      	str	r3, [r7, #4]
 800af14:	e010      	b.n	800af38 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800af16:	4b0b      	ldr	r3, [pc, #44]	; (800af44 <osKernelStart+0x48>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	2b01      	cmp	r3, #1
 800af1c:	d109      	bne.n	800af32 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800af1e:	f7ff ffbf 	bl	800aea0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800af22:	4b08      	ldr	r3, [pc, #32]	; (800af44 <osKernelStart+0x48>)
 800af24:	2202      	movs	r2, #2
 800af26:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800af28:	f002 f962 	bl	800d1f0 <vTaskStartScheduler>
      stat = osOK;
 800af2c:	2300      	movs	r3, #0
 800af2e:	607b      	str	r3, [r7, #4]
 800af30:	e002      	b.n	800af38 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800af32:	f04f 33ff 	mov.w	r3, #4294967295
 800af36:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800af38:	687b      	ldr	r3, [r7, #4]
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	3708      	adds	r7, #8
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}
 800af42:	bf00      	nop
 800af44:	200007fc 	.word	0x200007fc

0800af48 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800af48:	b580      	push	{r7, lr}
 800af4a:	b08e      	sub	sp, #56	; 0x38
 800af4c:	af04      	add	r7, sp, #16
 800af4e:	60f8      	str	r0, [r7, #12]
 800af50:	60b9      	str	r1, [r7, #8]
 800af52:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800af54:	2300      	movs	r3, #0
 800af56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af58:	f3ef 8305 	mrs	r3, IPSR
 800af5c:	617b      	str	r3, [r7, #20]
  return(result);
 800af5e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800af60:	2b00      	cmp	r3, #0
 800af62:	d17e      	bne.n	800b062 <osThreadNew+0x11a>
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d07b      	beq.n	800b062 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800af6a:	2380      	movs	r3, #128	; 0x80
 800af6c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800af6e:	2318      	movs	r3, #24
 800af70:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800af72:	2300      	movs	r3, #0
 800af74:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800af76:	f04f 33ff 	mov.w	r3, #4294967295
 800af7a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d045      	beq.n	800b00e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d002      	beq.n	800af90 <osThreadNew+0x48>
        name = attr->name;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	699b      	ldr	r3, [r3, #24]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d002      	beq.n	800af9e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	699b      	ldr	r3, [r3, #24]
 800af9c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800af9e:	69fb      	ldr	r3, [r7, #28]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d008      	beq.n	800afb6 <osThreadNew+0x6e>
 800afa4:	69fb      	ldr	r3, [r7, #28]
 800afa6:	2b38      	cmp	r3, #56	; 0x38
 800afa8:	d805      	bhi.n	800afb6 <osThreadNew+0x6e>
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	685b      	ldr	r3, [r3, #4]
 800afae:	f003 0301 	and.w	r3, r3, #1
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d001      	beq.n	800afba <osThreadNew+0x72>
        return (NULL);
 800afb6:	2300      	movs	r3, #0
 800afb8:	e054      	b.n	800b064 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	695b      	ldr	r3, [r3, #20]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d003      	beq.n	800afca <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	695b      	ldr	r3, [r3, #20]
 800afc6:	089b      	lsrs	r3, r3, #2
 800afc8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	689b      	ldr	r3, [r3, #8]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d00e      	beq.n	800aff0 <osThreadNew+0xa8>
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	68db      	ldr	r3, [r3, #12]
 800afd6:	2b5b      	cmp	r3, #91	; 0x5b
 800afd8:	d90a      	bls.n	800aff0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d006      	beq.n	800aff0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	695b      	ldr	r3, [r3, #20]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d002      	beq.n	800aff0 <osThreadNew+0xa8>
        mem = 1;
 800afea:	2301      	movs	r3, #1
 800afec:	61bb      	str	r3, [r7, #24]
 800afee:	e010      	b.n	800b012 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	689b      	ldr	r3, [r3, #8]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d10c      	bne.n	800b012 <osThreadNew+0xca>
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	68db      	ldr	r3, [r3, #12]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d108      	bne.n	800b012 <osThreadNew+0xca>
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	691b      	ldr	r3, [r3, #16]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d104      	bne.n	800b012 <osThreadNew+0xca>
          mem = 0;
 800b008:	2300      	movs	r3, #0
 800b00a:	61bb      	str	r3, [r7, #24]
 800b00c:	e001      	b.n	800b012 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b00e:	2300      	movs	r3, #0
 800b010:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b012:	69bb      	ldr	r3, [r7, #24]
 800b014:	2b01      	cmp	r3, #1
 800b016:	d110      	bne.n	800b03a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b01c:	687a      	ldr	r2, [r7, #4]
 800b01e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b020:	9202      	str	r2, [sp, #8]
 800b022:	9301      	str	r3, [sp, #4]
 800b024:	69fb      	ldr	r3, [r7, #28]
 800b026:	9300      	str	r3, [sp, #0]
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	6a3a      	ldr	r2, [r7, #32]
 800b02c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b02e:	68f8      	ldr	r0, [r7, #12]
 800b030:	f001 fe30 	bl	800cc94 <xTaskCreateStatic>
 800b034:	4603      	mov	r3, r0
 800b036:	613b      	str	r3, [r7, #16]
 800b038:	e013      	b.n	800b062 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b03a:	69bb      	ldr	r3, [r7, #24]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d110      	bne.n	800b062 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b040:	6a3b      	ldr	r3, [r7, #32]
 800b042:	b29a      	uxth	r2, r3
 800b044:	f107 0310 	add.w	r3, r7, #16
 800b048:	9301      	str	r3, [sp, #4]
 800b04a:	69fb      	ldr	r3, [r7, #28]
 800b04c:	9300      	str	r3, [sp, #0]
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b052:	68f8      	ldr	r0, [r7, #12]
 800b054:	f001 fe7b 	bl	800cd4e <xTaskCreate>
 800b058:	4603      	mov	r3, r0
 800b05a:	2b01      	cmp	r3, #1
 800b05c:	d001      	beq.n	800b062 <osThreadNew+0x11a>
            hTask = NULL;
 800b05e:	2300      	movs	r3, #0
 800b060:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b062:	693b      	ldr	r3, [r7, #16]
}
 800b064:	4618      	mov	r0, r3
 800b066:	3728      	adds	r7, #40	; 0x28
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}

0800b06c <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b086      	sub	sp, #24
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b078:	f3ef 8305 	mrs	r3, IPSR
 800b07c:	60bb      	str	r3, [r7, #8]
  return(result);
 800b07e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 800b080:	2b00      	cmp	r3, #0
 800b082:	d003      	beq.n	800b08c <osThreadTerminate+0x20>
    stat = osErrorISR;
 800b084:	f06f 0305 	mvn.w	r3, #5
 800b088:	617b      	str	r3, [r7, #20]
 800b08a:	e017      	b.n	800b0bc <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 800b08c:	693b      	ldr	r3, [r7, #16]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d103      	bne.n	800b09a <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 800b092:	f06f 0303 	mvn.w	r3, #3
 800b096:	617b      	str	r3, [r7, #20]
 800b098:	e010      	b.n	800b0bc <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 800b09a:	6938      	ldr	r0, [r7, #16]
 800b09c:	f002 f842 	bl	800d124 <eTaskGetState>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 800b0a4:	7bfb      	ldrb	r3, [r7, #15]
 800b0a6:	2b04      	cmp	r3, #4
 800b0a8:	d005      	beq.n	800b0b6 <osThreadTerminate+0x4a>
      stat = osOK;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 800b0ae:	6938      	ldr	r0, [r7, #16]
 800b0b0:	f001 ff92 	bl	800cfd8 <vTaskDelete>
 800b0b4:	e002      	b.n	800b0bc <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 800b0b6:	f06f 0302 	mvn.w	r3, #2
 800b0ba:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 800b0bc:	697b      	ldr	r3, [r7, #20]
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3718      	adds	r7, #24
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}

0800b0c6 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b0c6:	b580      	push	{r7, lr}
 800b0c8:	b084      	sub	sp, #16
 800b0ca:	af00      	add	r7, sp, #0
 800b0cc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b0ce:	f3ef 8305 	mrs	r3, IPSR
 800b0d2:	60bb      	str	r3, [r7, #8]
  return(result);
 800b0d4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d003      	beq.n	800b0e2 <osDelay+0x1c>
    stat = osErrorISR;
 800b0da:	f06f 0305 	mvn.w	r3, #5
 800b0de:	60fb      	str	r3, [r7, #12]
 800b0e0:	e007      	b.n	800b0f2 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d002      	beq.n	800b0f2 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b0ec:	6878      	ldr	r0, [r7, #4]
 800b0ee:	f001 ffe5 	bl	800d0bc <vTaskDelay>
    }
  }

  return (stat);
 800b0f2:	68fb      	ldr	r3, [r7, #12]
}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	3710      	adds	r7, #16
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}

0800b0fc <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b084      	sub	sp, #16
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f003 fa91 	bl	800e62c <pvTimerGetTimerID>
 800b10a:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d005      	beq.n	800b11e <TimerCallback+0x22>
    callb->func (callb->arg);
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	68fa      	ldr	r2, [r7, #12]
 800b118:	6852      	ldr	r2, [r2, #4]
 800b11a:	4610      	mov	r0, r2
 800b11c:	4798      	blx	r3
  }
}
 800b11e:	bf00      	nop
 800b120:	3710      	adds	r7, #16
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}
	...

0800b128 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800b128:	b580      	push	{r7, lr}
 800b12a:	b08c      	sub	sp, #48	; 0x30
 800b12c:	af02      	add	r7, sp, #8
 800b12e:	60f8      	str	r0, [r7, #12]
 800b130:	607a      	str	r2, [r7, #4]
 800b132:	603b      	str	r3, [r7, #0]
 800b134:	460b      	mov	r3, r1
 800b136:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800b138:	2300      	movs	r3, #0
 800b13a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b13c:	f3ef 8305 	mrs	r3, IPSR
 800b140:	613b      	str	r3, [r7, #16]
  return(result);
 800b142:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800b144:	2b00      	cmp	r3, #0
 800b146:	d163      	bne.n	800b210 <osTimerNew+0xe8>
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d060      	beq.n	800b210 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800b14e:	2008      	movs	r0, #8
 800b150:	f003 fcda 	bl	800eb08 <pvPortMalloc>
 800b154:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800b156:	697b      	ldr	r3, [r7, #20]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d059      	beq.n	800b210 <osTimerNew+0xe8>
      callb->func = func;
 800b15c:	697b      	ldr	r3, [r7, #20]
 800b15e:	68fa      	ldr	r2, [r7, #12]
 800b160:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800b162:	697b      	ldr	r3, [r7, #20]
 800b164:	687a      	ldr	r2, [r7, #4]
 800b166:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800b168:	7afb      	ldrb	r3, [r7, #11]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d102      	bne.n	800b174 <osTimerNew+0x4c>
        reload = pdFALSE;
 800b16e:	2300      	movs	r3, #0
 800b170:	61fb      	str	r3, [r7, #28]
 800b172:	e001      	b.n	800b178 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800b174:	2301      	movs	r3, #1
 800b176:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800b178:	f04f 33ff 	mov.w	r3, #4294967295
 800b17c:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800b17e:	2300      	movs	r3, #0
 800b180:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d01c      	beq.n	800b1c2 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d002      	beq.n	800b196 <osTimerNew+0x6e>
          name = attr->name;
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	689b      	ldr	r3, [r3, #8]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d006      	beq.n	800b1ac <osTimerNew+0x84>
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	68db      	ldr	r3, [r3, #12]
 800b1a2:	2b2b      	cmp	r3, #43	; 0x2b
 800b1a4:	d902      	bls.n	800b1ac <osTimerNew+0x84>
          mem = 1;
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	61bb      	str	r3, [r7, #24]
 800b1aa:	e00c      	b.n	800b1c6 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	689b      	ldr	r3, [r3, #8]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d108      	bne.n	800b1c6 <osTimerNew+0x9e>
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	68db      	ldr	r3, [r3, #12]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d104      	bne.n	800b1c6 <osTimerNew+0x9e>
            mem = 0;
 800b1bc:	2300      	movs	r3, #0
 800b1be:	61bb      	str	r3, [r7, #24]
 800b1c0:	e001      	b.n	800b1c6 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800b1c6:	69bb      	ldr	r3, [r7, #24]
 800b1c8:	2b01      	cmp	r3, #1
 800b1ca:	d10c      	bne.n	800b1e6 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	689b      	ldr	r3, [r3, #8]
 800b1d0:	9301      	str	r3, [sp, #4]
 800b1d2:	4b12      	ldr	r3, [pc, #72]	; (800b21c <osTimerNew+0xf4>)
 800b1d4:	9300      	str	r3, [sp, #0]
 800b1d6:	697b      	ldr	r3, [r7, #20]
 800b1d8:	69fa      	ldr	r2, [r7, #28]
 800b1da:	2101      	movs	r1, #1
 800b1dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b1de:	f002 fea6 	bl	800df2e <xTimerCreateStatic>
 800b1e2:	6238      	str	r0, [r7, #32]
 800b1e4:	e00b      	b.n	800b1fe <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800b1e6:	69bb      	ldr	r3, [r7, #24]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d108      	bne.n	800b1fe <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800b1ec:	4b0b      	ldr	r3, [pc, #44]	; (800b21c <osTimerNew+0xf4>)
 800b1ee:	9300      	str	r3, [sp, #0]
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	69fa      	ldr	r2, [r7, #28]
 800b1f4:	2101      	movs	r1, #1
 800b1f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b1f8:	f002 fe78 	bl	800deec <xTimerCreate>
 800b1fc:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800b1fe:	6a3b      	ldr	r3, [r7, #32]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d105      	bne.n	800b210 <osTimerNew+0xe8>
 800b204:	697b      	ldr	r3, [r7, #20]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d002      	beq.n	800b210 <osTimerNew+0xe8>
        vPortFree (callb);
 800b20a:	6978      	ldr	r0, [r7, #20]
 800b20c:	f003 fd48 	bl	800eca0 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800b210:	6a3b      	ldr	r3, [r7, #32]
}
 800b212:	4618      	mov	r0, r3
 800b214:	3728      	adds	r7, #40	; 0x28
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}
 800b21a:	bf00      	nop
 800b21c:	0800b0fd 	.word	0x0800b0fd

0800b220 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800b220:	b580      	push	{r7, lr}
 800b222:	b088      	sub	sp, #32
 800b224:	af02      	add	r7, sp, #8
 800b226:	6078      	str	r0, [r7, #4]
 800b228:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b22e:	f3ef 8305 	mrs	r3, IPSR
 800b232:	60fb      	str	r3, [r7, #12]
  return(result);
 800b234:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b236:	2b00      	cmp	r3, #0
 800b238:	d003      	beq.n	800b242 <osTimerStart+0x22>
    stat = osErrorISR;
 800b23a:	f06f 0305 	mvn.w	r3, #5
 800b23e:	617b      	str	r3, [r7, #20]
 800b240:	e017      	b.n	800b272 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800b242:	693b      	ldr	r3, [r7, #16]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d103      	bne.n	800b250 <osTimerStart+0x30>
    stat = osErrorParameter;
 800b248:	f06f 0303 	mvn.w	r3, #3
 800b24c:	617b      	str	r3, [r7, #20]
 800b24e:	e010      	b.n	800b272 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800b250:	2300      	movs	r3, #0
 800b252:	9300      	str	r3, [sp, #0]
 800b254:	2300      	movs	r3, #0
 800b256:	683a      	ldr	r2, [r7, #0]
 800b258:	2104      	movs	r1, #4
 800b25a:	6938      	ldr	r0, [r7, #16]
 800b25c:	f002 fee0 	bl	800e020 <xTimerGenericCommand>
 800b260:	4603      	mov	r3, r0
 800b262:	2b01      	cmp	r3, #1
 800b264:	d102      	bne.n	800b26c <osTimerStart+0x4c>
      stat = osOK;
 800b266:	2300      	movs	r3, #0
 800b268:	617b      	str	r3, [r7, #20]
 800b26a:	e002      	b.n	800b272 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800b26c:	f06f 0302 	mvn.w	r3, #2
 800b270:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800b272:	697b      	ldr	r3, [r7, #20]
}
 800b274:	4618      	mov	r0, r3
 800b276:	3718      	adds	r7, #24
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}

0800b27c <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b088      	sub	sp, #32
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800b284:	2300      	movs	r3, #0
 800b286:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b288:	f3ef 8305 	mrs	r3, IPSR
 800b28c:	60bb      	str	r3, [r7, #8]
  return(result);
 800b28e:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800b290:	2b00      	cmp	r3, #0
 800b292:	d174      	bne.n	800b37e <osMutexNew+0x102>
    if (attr != NULL) {
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d003      	beq.n	800b2a2 <osMutexNew+0x26>
      type = attr->attr_bits;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	685b      	ldr	r3, [r3, #4]
 800b29e:	61bb      	str	r3, [r7, #24]
 800b2a0:	e001      	b.n	800b2a6 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800b2a6:	69bb      	ldr	r3, [r7, #24]
 800b2a8:	f003 0301 	and.w	r3, r3, #1
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d002      	beq.n	800b2b6 <osMutexNew+0x3a>
      rmtx = 1U;
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	617b      	str	r3, [r7, #20]
 800b2b4:	e001      	b.n	800b2ba <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800b2ba:	69bb      	ldr	r3, [r7, #24]
 800b2bc:	f003 0308 	and.w	r3, r3, #8
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d15c      	bne.n	800b37e <osMutexNew+0x102>
      mem = -1;
 800b2c4:	f04f 33ff 	mov.w	r3, #4294967295
 800b2c8:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d015      	beq.n	800b2fc <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	689b      	ldr	r3, [r3, #8]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d006      	beq.n	800b2e6 <osMutexNew+0x6a>
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	68db      	ldr	r3, [r3, #12]
 800b2dc:	2b4f      	cmp	r3, #79	; 0x4f
 800b2de:	d902      	bls.n	800b2e6 <osMutexNew+0x6a>
          mem = 1;
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	613b      	str	r3, [r7, #16]
 800b2e4:	e00c      	b.n	800b300 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	689b      	ldr	r3, [r3, #8]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d108      	bne.n	800b300 <osMutexNew+0x84>
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	68db      	ldr	r3, [r3, #12]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d104      	bne.n	800b300 <osMutexNew+0x84>
            mem = 0;
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	613b      	str	r3, [r7, #16]
 800b2fa:	e001      	b.n	800b300 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800b300:	693b      	ldr	r3, [r7, #16]
 800b302:	2b01      	cmp	r3, #1
 800b304:	d112      	bne.n	800b32c <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800b306:	697b      	ldr	r3, [r7, #20]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d007      	beq.n	800b31c <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	689b      	ldr	r3, [r3, #8]
 800b310:	4619      	mov	r1, r3
 800b312:	2004      	movs	r0, #4
 800b314:	f000 fd69 	bl	800bdea <xQueueCreateMutexStatic>
 800b318:	61f8      	str	r0, [r7, #28]
 800b31a:	e016      	b.n	800b34a <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	689b      	ldr	r3, [r3, #8]
 800b320:	4619      	mov	r1, r3
 800b322:	2001      	movs	r0, #1
 800b324:	f000 fd61 	bl	800bdea <xQueueCreateMutexStatic>
 800b328:	61f8      	str	r0, [r7, #28]
 800b32a:	e00e      	b.n	800b34a <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800b32c:	693b      	ldr	r3, [r7, #16]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d10b      	bne.n	800b34a <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800b332:	697b      	ldr	r3, [r7, #20]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d004      	beq.n	800b342 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800b338:	2004      	movs	r0, #4
 800b33a:	f000 fd3e 	bl	800bdba <xQueueCreateMutex>
 800b33e:	61f8      	str	r0, [r7, #28]
 800b340:	e003      	b.n	800b34a <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800b342:	2001      	movs	r0, #1
 800b344:	f000 fd39 	bl	800bdba <xQueueCreateMutex>
 800b348:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800b34a:	69fb      	ldr	r3, [r7, #28]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d00c      	beq.n	800b36a <osMutexNew+0xee>
        if (attr != NULL) {
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d003      	beq.n	800b35e <osMutexNew+0xe2>
          name = attr->name;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	60fb      	str	r3, [r7, #12]
 800b35c:	e001      	b.n	800b362 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800b35e:	2300      	movs	r3, #0
 800b360:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800b362:	68f9      	ldr	r1, [r7, #12]
 800b364:	69f8      	ldr	r0, [r7, #28]
 800b366:	f001 fc0d 	bl	800cb84 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800b36a:	69fb      	ldr	r3, [r7, #28]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d006      	beq.n	800b37e <osMutexNew+0x102>
 800b370:	697b      	ldr	r3, [r7, #20]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d003      	beq.n	800b37e <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800b376:	69fb      	ldr	r3, [r7, #28]
 800b378:	f043 0301 	orr.w	r3, r3, #1
 800b37c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800b37e:	69fb      	ldr	r3, [r7, #28]
}
 800b380:	4618      	mov	r0, r3
 800b382:	3720      	adds	r7, #32
 800b384:	46bd      	mov	sp, r7
 800b386:	bd80      	pop	{r7, pc}

0800b388 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800b388:	b580      	push	{r7, lr}
 800b38a:	b086      	sub	sp, #24
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
 800b390:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f023 0301 	bic.w	r3, r3, #1
 800b398:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	f003 0301 	and.w	r3, r3, #1
 800b3a0:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b3a6:	f3ef 8305 	mrs	r3, IPSR
 800b3aa:	60bb      	str	r3, [r7, #8]
  return(result);
 800b3ac:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d003      	beq.n	800b3ba <osMutexAcquire+0x32>
    stat = osErrorISR;
 800b3b2:	f06f 0305 	mvn.w	r3, #5
 800b3b6:	617b      	str	r3, [r7, #20]
 800b3b8:	e02c      	b.n	800b414 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800b3ba:	693b      	ldr	r3, [r7, #16]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d103      	bne.n	800b3c8 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800b3c0:	f06f 0303 	mvn.w	r3, #3
 800b3c4:	617b      	str	r3, [r7, #20]
 800b3c6:	e025      	b.n	800b414 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d011      	beq.n	800b3f2 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800b3ce:	6839      	ldr	r1, [r7, #0]
 800b3d0:	6938      	ldr	r0, [r7, #16]
 800b3d2:	f000 fd59 	bl	800be88 <xQueueTakeMutexRecursive>
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	2b01      	cmp	r3, #1
 800b3da:	d01b      	beq.n	800b414 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d003      	beq.n	800b3ea <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800b3e2:	f06f 0301 	mvn.w	r3, #1
 800b3e6:	617b      	str	r3, [r7, #20]
 800b3e8:	e014      	b.n	800b414 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800b3ea:	f06f 0302 	mvn.w	r3, #2
 800b3ee:	617b      	str	r3, [r7, #20]
 800b3f0:	e010      	b.n	800b414 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800b3f2:	6839      	ldr	r1, [r7, #0]
 800b3f4:	6938      	ldr	r0, [r7, #16]
 800b3f6:	f001 f8ed 	bl	800c5d4 <xQueueSemaphoreTake>
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	2b01      	cmp	r3, #1
 800b3fe:	d009      	beq.n	800b414 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d003      	beq.n	800b40e <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800b406:	f06f 0301 	mvn.w	r3, #1
 800b40a:	617b      	str	r3, [r7, #20]
 800b40c:	e002      	b.n	800b414 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800b40e:	f06f 0302 	mvn.w	r3, #2
 800b412:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800b414:	697b      	ldr	r3, [r7, #20]
}
 800b416:	4618      	mov	r0, r3
 800b418:	3718      	adds	r7, #24
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}

0800b41e <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800b41e:	b580      	push	{r7, lr}
 800b420:	b086      	sub	sp, #24
 800b422:	af00      	add	r7, sp, #0
 800b424:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f023 0301 	bic.w	r3, r3, #1
 800b42c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	f003 0301 	and.w	r3, r3, #1
 800b434:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800b436:	2300      	movs	r3, #0
 800b438:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b43a:	f3ef 8305 	mrs	r3, IPSR
 800b43e:	60bb      	str	r3, [r7, #8]
  return(result);
 800b440:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800b442:	2b00      	cmp	r3, #0
 800b444:	d003      	beq.n	800b44e <osMutexRelease+0x30>
    stat = osErrorISR;
 800b446:	f06f 0305 	mvn.w	r3, #5
 800b44a:	617b      	str	r3, [r7, #20]
 800b44c:	e01f      	b.n	800b48e <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800b44e:	693b      	ldr	r3, [r7, #16]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d103      	bne.n	800b45c <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800b454:	f06f 0303 	mvn.w	r3, #3
 800b458:	617b      	str	r3, [r7, #20]
 800b45a:	e018      	b.n	800b48e <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d009      	beq.n	800b476 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800b462:	6938      	ldr	r0, [r7, #16]
 800b464:	f000 fcdc 	bl	800be20 <xQueueGiveMutexRecursive>
 800b468:	4603      	mov	r3, r0
 800b46a:	2b01      	cmp	r3, #1
 800b46c:	d00f      	beq.n	800b48e <osMutexRelease+0x70>
        stat = osErrorResource;
 800b46e:	f06f 0302 	mvn.w	r3, #2
 800b472:	617b      	str	r3, [r7, #20]
 800b474:	e00b      	b.n	800b48e <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800b476:	2300      	movs	r3, #0
 800b478:	2200      	movs	r2, #0
 800b47a:	2100      	movs	r1, #0
 800b47c:	6938      	ldr	r0, [r7, #16]
 800b47e:	f000 fda3 	bl	800bfc8 <xQueueGenericSend>
 800b482:	4603      	mov	r3, r0
 800b484:	2b01      	cmp	r3, #1
 800b486:	d002      	beq.n	800b48e <osMutexRelease+0x70>
        stat = osErrorResource;
 800b488:	f06f 0302 	mvn.w	r3, #2
 800b48c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b48e:	697b      	ldr	r3, [r7, #20]
}
 800b490:	4618      	mov	r0, r3
 800b492:	3718      	adds	r7, #24
 800b494:	46bd      	mov	sp, r7
 800b496:	bd80      	pop	{r7, pc}

0800b498 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800b498:	b580      	push	{r7, lr}
 800b49a:	b08a      	sub	sp, #40	; 0x28
 800b49c:	af02      	add	r7, sp, #8
 800b49e:	60f8      	str	r0, [r7, #12]
 800b4a0:	60b9      	str	r1, [r7, #8]
 800b4a2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b4a8:	f3ef 8305 	mrs	r3, IPSR
 800b4ac:	613b      	str	r3, [r7, #16]
  return(result);
 800b4ae:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d175      	bne.n	800b5a0 <osSemaphoreNew+0x108>
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d072      	beq.n	800b5a0 <osSemaphoreNew+0x108>
 800b4ba:	68ba      	ldr	r2, [r7, #8]
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	429a      	cmp	r2, r3
 800b4c0:	d86e      	bhi.n	800b5a0 <osSemaphoreNew+0x108>
    mem = -1;
 800b4c2:	f04f 33ff 	mov.w	r3, #4294967295
 800b4c6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d015      	beq.n	800b4fa <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	689b      	ldr	r3, [r3, #8]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d006      	beq.n	800b4e4 <osSemaphoreNew+0x4c>
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	68db      	ldr	r3, [r3, #12]
 800b4da:	2b4f      	cmp	r3, #79	; 0x4f
 800b4dc:	d902      	bls.n	800b4e4 <osSemaphoreNew+0x4c>
        mem = 1;
 800b4de:	2301      	movs	r3, #1
 800b4e0:	61bb      	str	r3, [r7, #24]
 800b4e2:	e00c      	b.n	800b4fe <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	689b      	ldr	r3, [r3, #8]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d108      	bne.n	800b4fe <osSemaphoreNew+0x66>
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	68db      	ldr	r3, [r3, #12]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d104      	bne.n	800b4fe <osSemaphoreNew+0x66>
          mem = 0;
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	61bb      	str	r3, [r7, #24]
 800b4f8:	e001      	b.n	800b4fe <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800b4fe:	69bb      	ldr	r3, [r7, #24]
 800b500:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b504:	d04c      	beq.n	800b5a0 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	2b01      	cmp	r3, #1
 800b50a:	d128      	bne.n	800b55e <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800b50c:	69bb      	ldr	r3, [r7, #24]
 800b50e:	2b01      	cmp	r3, #1
 800b510:	d10a      	bne.n	800b528 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	689b      	ldr	r3, [r3, #8]
 800b516:	2203      	movs	r2, #3
 800b518:	9200      	str	r2, [sp, #0]
 800b51a:	2200      	movs	r2, #0
 800b51c:	2100      	movs	r1, #0
 800b51e:	2001      	movs	r0, #1
 800b520:	f000 fb5c 	bl	800bbdc <xQueueGenericCreateStatic>
 800b524:	61f8      	str	r0, [r7, #28]
 800b526:	e005      	b.n	800b534 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800b528:	2203      	movs	r2, #3
 800b52a:	2100      	movs	r1, #0
 800b52c:	2001      	movs	r0, #1
 800b52e:	f000 fbcd 	bl	800bccc <xQueueGenericCreate>
 800b532:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800b534:	69fb      	ldr	r3, [r7, #28]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d022      	beq.n	800b580 <osSemaphoreNew+0xe8>
 800b53a:	68bb      	ldr	r3, [r7, #8]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d01f      	beq.n	800b580 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b540:	2300      	movs	r3, #0
 800b542:	2200      	movs	r2, #0
 800b544:	2100      	movs	r1, #0
 800b546:	69f8      	ldr	r0, [r7, #28]
 800b548:	f000 fd3e 	bl	800bfc8 <xQueueGenericSend>
 800b54c:	4603      	mov	r3, r0
 800b54e:	2b01      	cmp	r3, #1
 800b550:	d016      	beq.n	800b580 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800b552:	69f8      	ldr	r0, [r7, #28]
 800b554:	f001 f9ca 	bl	800c8ec <vQueueDelete>
            hSemaphore = NULL;
 800b558:	2300      	movs	r3, #0
 800b55a:	61fb      	str	r3, [r7, #28]
 800b55c:	e010      	b.n	800b580 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800b55e:	69bb      	ldr	r3, [r7, #24]
 800b560:	2b01      	cmp	r3, #1
 800b562:	d108      	bne.n	800b576 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	689b      	ldr	r3, [r3, #8]
 800b568:	461a      	mov	r2, r3
 800b56a:	68b9      	ldr	r1, [r7, #8]
 800b56c:	68f8      	ldr	r0, [r7, #12]
 800b56e:	f000 fcc1 	bl	800bef4 <xQueueCreateCountingSemaphoreStatic>
 800b572:	61f8      	str	r0, [r7, #28]
 800b574:	e004      	b.n	800b580 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800b576:	68b9      	ldr	r1, [r7, #8]
 800b578:	68f8      	ldr	r0, [r7, #12]
 800b57a:	f000 fcf2 	bl	800bf62 <xQueueCreateCountingSemaphore>
 800b57e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800b580:	69fb      	ldr	r3, [r7, #28]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d00c      	beq.n	800b5a0 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d003      	beq.n	800b594 <osSemaphoreNew+0xfc>
          name = attr->name;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	617b      	str	r3, [r7, #20]
 800b592:	e001      	b.n	800b598 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800b594:	2300      	movs	r3, #0
 800b596:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800b598:	6979      	ldr	r1, [r7, #20]
 800b59a:	69f8      	ldr	r0, [r7, #28]
 800b59c:	f001 faf2 	bl	800cb84 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800b5a0:	69fb      	ldr	r3, [r7, #28]
}
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	3720      	adds	r7, #32
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}
	...

0800b5ac <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b086      	sub	sp, #24
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
 800b5b4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b5be:	693b      	ldr	r3, [r7, #16]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d103      	bne.n	800b5cc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800b5c4:	f06f 0303 	mvn.w	r3, #3
 800b5c8:	617b      	str	r3, [r7, #20]
 800b5ca:	e039      	b.n	800b640 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b5cc:	f3ef 8305 	mrs	r3, IPSR
 800b5d0:	60fb      	str	r3, [r7, #12]
  return(result);
 800b5d2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d022      	beq.n	800b61e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d003      	beq.n	800b5e6 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800b5de:	f06f 0303 	mvn.w	r3, #3
 800b5e2:	617b      	str	r3, [r7, #20]
 800b5e4:	e02c      	b.n	800b640 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b5ea:	f107 0308 	add.w	r3, r7, #8
 800b5ee:	461a      	mov	r2, r3
 800b5f0:	2100      	movs	r1, #0
 800b5f2:	6938      	ldr	r0, [r7, #16]
 800b5f4:	f001 f8fa 	bl	800c7ec <xQueueReceiveFromISR>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	2b01      	cmp	r3, #1
 800b5fc:	d003      	beq.n	800b606 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800b5fe:	f06f 0302 	mvn.w	r3, #2
 800b602:	617b      	str	r3, [r7, #20]
 800b604:	e01c      	b.n	800b640 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800b606:	68bb      	ldr	r3, [r7, #8]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d019      	beq.n	800b640 <osSemaphoreAcquire+0x94>
 800b60c:	4b0f      	ldr	r3, [pc, #60]	; (800b64c <osSemaphoreAcquire+0xa0>)
 800b60e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b612:	601a      	str	r2, [r3, #0]
 800b614:	f3bf 8f4f 	dsb	sy
 800b618:	f3bf 8f6f 	isb	sy
 800b61c:	e010      	b.n	800b640 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800b61e:	6839      	ldr	r1, [r7, #0]
 800b620:	6938      	ldr	r0, [r7, #16]
 800b622:	f000 ffd7 	bl	800c5d4 <xQueueSemaphoreTake>
 800b626:	4603      	mov	r3, r0
 800b628:	2b01      	cmp	r3, #1
 800b62a:	d009      	beq.n	800b640 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d003      	beq.n	800b63a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800b632:	f06f 0301 	mvn.w	r3, #1
 800b636:	617b      	str	r3, [r7, #20]
 800b638:	e002      	b.n	800b640 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800b63a:	f06f 0302 	mvn.w	r3, #2
 800b63e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b640:	697b      	ldr	r3, [r7, #20]
}
 800b642:	4618      	mov	r0, r3
 800b644:	3718      	adds	r7, #24
 800b646:	46bd      	mov	sp, r7
 800b648:	bd80      	pop	{r7, pc}
 800b64a:	bf00      	nop
 800b64c:	e000ed04 	.word	0xe000ed04

0800b650 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800b650:	b580      	push	{r7, lr}
 800b652:	b086      	sub	sp, #24
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b65c:	2300      	movs	r3, #0
 800b65e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b660:	693b      	ldr	r3, [r7, #16]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d103      	bne.n	800b66e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800b666:	f06f 0303 	mvn.w	r3, #3
 800b66a:	617b      	str	r3, [r7, #20]
 800b66c:	e02c      	b.n	800b6c8 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b66e:	f3ef 8305 	mrs	r3, IPSR
 800b672:	60fb      	str	r3, [r7, #12]
  return(result);
 800b674:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b676:	2b00      	cmp	r3, #0
 800b678:	d01a      	beq.n	800b6b0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800b67a:	2300      	movs	r3, #0
 800b67c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b67e:	f107 0308 	add.w	r3, r7, #8
 800b682:	4619      	mov	r1, r3
 800b684:	6938      	ldr	r0, [r7, #16]
 800b686:	f000 fe38 	bl	800c2fa <xQueueGiveFromISR>
 800b68a:	4603      	mov	r3, r0
 800b68c:	2b01      	cmp	r3, #1
 800b68e:	d003      	beq.n	800b698 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800b690:	f06f 0302 	mvn.w	r3, #2
 800b694:	617b      	str	r3, [r7, #20]
 800b696:	e017      	b.n	800b6c8 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800b698:	68bb      	ldr	r3, [r7, #8]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d014      	beq.n	800b6c8 <osSemaphoreRelease+0x78>
 800b69e:	4b0d      	ldr	r3, [pc, #52]	; (800b6d4 <osSemaphoreRelease+0x84>)
 800b6a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6a4:	601a      	str	r2, [r3, #0]
 800b6a6:	f3bf 8f4f 	dsb	sy
 800b6aa:	f3bf 8f6f 	isb	sy
 800b6ae:	e00b      	b.n	800b6c8 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	2100      	movs	r1, #0
 800b6b6:	6938      	ldr	r0, [r7, #16]
 800b6b8:	f000 fc86 	bl	800bfc8 <xQueueGenericSend>
 800b6bc:	4603      	mov	r3, r0
 800b6be:	2b01      	cmp	r3, #1
 800b6c0:	d002      	beq.n	800b6c8 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800b6c2:	f06f 0302 	mvn.w	r3, #2
 800b6c6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800b6c8:	697b      	ldr	r3, [r7, #20]
}
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	3718      	adds	r7, #24
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd80      	pop	{r7, pc}
 800b6d2:	bf00      	nop
 800b6d4:	e000ed04 	.word	0xe000ed04

0800b6d8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b08a      	sub	sp, #40	; 0x28
 800b6dc:	af02      	add	r7, sp, #8
 800b6de:	60f8      	str	r0, [r7, #12]
 800b6e0:	60b9      	str	r1, [r7, #8]
 800b6e2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b6e8:	f3ef 8305 	mrs	r3, IPSR
 800b6ec:	613b      	str	r3, [r7, #16]
  return(result);
 800b6ee:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d15f      	bne.n	800b7b4 <osMessageQueueNew+0xdc>
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d05c      	beq.n	800b7b4 <osMessageQueueNew+0xdc>
 800b6fa:	68bb      	ldr	r3, [r7, #8]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d059      	beq.n	800b7b4 <osMessageQueueNew+0xdc>
    mem = -1;
 800b700:	f04f 33ff 	mov.w	r3, #4294967295
 800b704:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d029      	beq.n	800b760 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	689b      	ldr	r3, [r3, #8]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d012      	beq.n	800b73a <osMessageQueueNew+0x62>
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	68db      	ldr	r3, [r3, #12]
 800b718:	2b4f      	cmp	r3, #79	; 0x4f
 800b71a:	d90e      	bls.n	800b73a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b720:	2b00      	cmp	r3, #0
 800b722:	d00a      	beq.n	800b73a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	695a      	ldr	r2, [r3, #20]
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	68b9      	ldr	r1, [r7, #8]
 800b72c:	fb01 f303 	mul.w	r3, r1, r3
 800b730:	429a      	cmp	r2, r3
 800b732:	d302      	bcc.n	800b73a <osMessageQueueNew+0x62>
        mem = 1;
 800b734:	2301      	movs	r3, #1
 800b736:	61bb      	str	r3, [r7, #24]
 800b738:	e014      	b.n	800b764 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	689b      	ldr	r3, [r3, #8]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d110      	bne.n	800b764 <osMessageQueueNew+0x8c>
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	68db      	ldr	r3, [r3, #12]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d10c      	bne.n	800b764 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d108      	bne.n	800b764 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	695b      	ldr	r3, [r3, #20]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d104      	bne.n	800b764 <osMessageQueueNew+0x8c>
          mem = 0;
 800b75a:	2300      	movs	r3, #0
 800b75c:	61bb      	str	r3, [r7, #24]
 800b75e:	e001      	b.n	800b764 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800b760:	2300      	movs	r3, #0
 800b762:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b764:	69bb      	ldr	r3, [r7, #24]
 800b766:	2b01      	cmp	r3, #1
 800b768:	d10b      	bne.n	800b782 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	691a      	ldr	r2, [r3, #16]
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	689b      	ldr	r3, [r3, #8]
 800b772:	2100      	movs	r1, #0
 800b774:	9100      	str	r1, [sp, #0]
 800b776:	68b9      	ldr	r1, [r7, #8]
 800b778:	68f8      	ldr	r0, [r7, #12]
 800b77a:	f000 fa2f 	bl	800bbdc <xQueueGenericCreateStatic>
 800b77e:	61f8      	str	r0, [r7, #28]
 800b780:	e008      	b.n	800b794 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b782:	69bb      	ldr	r3, [r7, #24]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d105      	bne.n	800b794 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b788:	2200      	movs	r2, #0
 800b78a:	68b9      	ldr	r1, [r7, #8]
 800b78c:	68f8      	ldr	r0, [r7, #12]
 800b78e:	f000 fa9d 	bl	800bccc <xQueueGenericCreate>
 800b792:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b794:	69fb      	ldr	r3, [r7, #28]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d00c      	beq.n	800b7b4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d003      	beq.n	800b7a8 <osMessageQueueNew+0xd0>
        name = attr->name;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	617b      	str	r3, [r7, #20]
 800b7a6:	e001      	b.n	800b7ac <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800b7ac:	6979      	ldr	r1, [r7, #20]
 800b7ae:	69f8      	ldr	r0, [r7, #28]
 800b7b0:	f001 f9e8 	bl	800cb84 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b7b4:	69fb      	ldr	r3, [r7, #28]
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	3720      	adds	r7, #32
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}
	...

0800b7c0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b088      	sub	sp, #32
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	60f8      	str	r0, [r7, #12]
 800b7c8:	60b9      	str	r1, [r7, #8]
 800b7ca:	603b      	str	r3, [r7, #0]
 800b7cc:	4613      	mov	r3, r2
 800b7ce:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b7d8:	f3ef 8305 	mrs	r3, IPSR
 800b7dc:	617b      	str	r3, [r7, #20]
  return(result);
 800b7de:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d028      	beq.n	800b836 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b7e4:	69bb      	ldr	r3, [r7, #24]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d005      	beq.n	800b7f6 <osMessageQueuePut+0x36>
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d002      	beq.n	800b7f6 <osMessageQueuePut+0x36>
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d003      	beq.n	800b7fe <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800b7f6:	f06f 0303 	mvn.w	r3, #3
 800b7fa:	61fb      	str	r3, [r7, #28]
 800b7fc:	e038      	b.n	800b870 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800b7fe:	2300      	movs	r3, #0
 800b800:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b802:	f107 0210 	add.w	r2, r7, #16
 800b806:	2300      	movs	r3, #0
 800b808:	68b9      	ldr	r1, [r7, #8]
 800b80a:	69b8      	ldr	r0, [r7, #24]
 800b80c:	f000 fcda 	bl	800c1c4 <xQueueGenericSendFromISR>
 800b810:	4603      	mov	r3, r0
 800b812:	2b01      	cmp	r3, #1
 800b814:	d003      	beq.n	800b81e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800b816:	f06f 0302 	mvn.w	r3, #2
 800b81a:	61fb      	str	r3, [r7, #28]
 800b81c:	e028      	b.n	800b870 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800b81e:	693b      	ldr	r3, [r7, #16]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d025      	beq.n	800b870 <osMessageQueuePut+0xb0>
 800b824:	4b15      	ldr	r3, [pc, #84]	; (800b87c <osMessageQueuePut+0xbc>)
 800b826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b82a:	601a      	str	r2, [r3, #0]
 800b82c:	f3bf 8f4f 	dsb	sy
 800b830:	f3bf 8f6f 	isb	sy
 800b834:	e01c      	b.n	800b870 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b836:	69bb      	ldr	r3, [r7, #24]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d002      	beq.n	800b842 <osMessageQueuePut+0x82>
 800b83c:	68bb      	ldr	r3, [r7, #8]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d103      	bne.n	800b84a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800b842:	f06f 0303 	mvn.w	r3, #3
 800b846:	61fb      	str	r3, [r7, #28]
 800b848:	e012      	b.n	800b870 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b84a:	2300      	movs	r3, #0
 800b84c:	683a      	ldr	r2, [r7, #0]
 800b84e:	68b9      	ldr	r1, [r7, #8]
 800b850:	69b8      	ldr	r0, [r7, #24]
 800b852:	f000 fbb9 	bl	800bfc8 <xQueueGenericSend>
 800b856:	4603      	mov	r3, r0
 800b858:	2b01      	cmp	r3, #1
 800b85a:	d009      	beq.n	800b870 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d003      	beq.n	800b86a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800b862:	f06f 0301 	mvn.w	r3, #1
 800b866:	61fb      	str	r3, [r7, #28]
 800b868:	e002      	b.n	800b870 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800b86a:	f06f 0302 	mvn.w	r3, #2
 800b86e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b870:	69fb      	ldr	r3, [r7, #28]
}
 800b872:	4618      	mov	r0, r3
 800b874:	3720      	adds	r7, #32
 800b876:	46bd      	mov	sp, r7
 800b878:	bd80      	pop	{r7, pc}
 800b87a:	bf00      	nop
 800b87c:	e000ed04 	.word	0xe000ed04

0800b880 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b880:	b580      	push	{r7, lr}
 800b882:	b088      	sub	sp, #32
 800b884:	af00      	add	r7, sp, #0
 800b886:	60f8      	str	r0, [r7, #12]
 800b888:	60b9      	str	r1, [r7, #8]
 800b88a:	607a      	str	r2, [r7, #4]
 800b88c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b892:	2300      	movs	r3, #0
 800b894:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b896:	f3ef 8305 	mrs	r3, IPSR
 800b89a:	617b      	str	r3, [r7, #20]
  return(result);
 800b89c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d028      	beq.n	800b8f4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b8a2:	69bb      	ldr	r3, [r7, #24]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d005      	beq.n	800b8b4 <osMessageQueueGet+0x34>
 800b8a8:	68bb      	ldr	r3, [r7, #8]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d002      	beq.n	800b8b4 <osMessageQueueGet+0x34>
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d003      	beq.n	800b8bc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800b8b4:	f06f 0303 	mvn.w	r3, #3
 800b8b8:	61fb      	str	r3, [r7, #28]
 800b8ba:	e037      	b.n	800b92c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800b8bc:	2300      	movs	r3, #0
 800b8be:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b8c0:	f107 0310 	add.w	r3, r7, #16
 800b8c4:	461a      	mov	r2, r3
 800b8c6:	68b9      	ldr	r1, [r7, #8]
 800b8c8:	69b8      	ldr	r0, [r7, #24]
 800b8ca:	f000 ff8f 	bl	800c7ec <xQueueReceiveFromISR>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	2b01      	cmp	r3, #1
 800b8d2:	d003      	beq.n	800b8dc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800b8d4:	f06f 0302 	mvn.w	r3, #2
 800b8d8:	61fb      	str	r3, [r7, #28]
 800b8da:	e027      	b.n	800b92c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800b8dc:	693b      	ldr	r3, [r7, #16]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d024      	beq.n	800b92c <osMessageQueueGet+0xac>
 800b8e2:	4b15      	ldr	r3, [pc, #84]	; (800b938 <osMessageQueueGet+0xb8>)
 800b8e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8e8:	601a      	str	r2, [r3, #0]
 800b8ea:	f3bf 8f4f 	dsb	sy
 800b8ee:	f3bf 8f6f 	isb	sy
 800b8f2:	e01b      	b.n	800b92c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b8f4:	69bb      	ldr	r3, [r7, #24]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d002      	beq.n	800b900 <osMessageQueueGet+0x80>
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d103      	bne.n	800b908 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800b900:	f06f 0303 	mvn.w	r3, #3
 800b904:	61fb      	str	r3, [r7, #28]
 800b906:	e011      	b.n	800b92c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b908:	683a      	ldr	r2, [r7, #0]
 800b90a:	68b9      	ldr	r1, [r7, #8]
 800b90c:	69b8      	ldr	r0, [r7, #24]
 800b90e:	f000 fd81 	bl	800c414 <xQueueReceive>
 800b912:	4603      	mov	r3, r0
 800b914:	2b01      	cmp	r3, #1
 800b916:	d009      	beq.n	800b92c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d003      	beq.n	800b926 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800b91e:	f06f 0301 	mvn.w	r3, #1
 800b922:	61fb      	str	r3, [r7, #28]
 800b924:	e002      	b.n	800b92c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800b926:	f06f 0302 	mvn.w	r3, #2
 800b92a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b92c:	69fb      	ldr	r3, [r7, #28]
}
 800b92e:	4618      	mov	r0, r3
 800b930:	3720      	adds	r7, #32
 800b932:	46bd      	mov	sp, r7
 800b934:	bd80      	pop	{r7, pc}
 800b936:	bf00      	nop
 800b938:	e000ed04 	.word	0xe000ed04

0800b93c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b93c:	b480      	push	{r7}
 800b93e:	b085      	sub	sp, #20
 800b940:	af00      	add	r7, sp, #0
 800b942:	60f8      	str	r0, [r7, #12]
 800b944:	60b9      	str	r1, [r7, #8]
 800b946:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	4a07      	ldr	r2, [pc, #28]	; (800b968 <vApplicationGetIdleTaskMemory+0x2c>)
 800b94c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b94e:	68bb      	ldr	r3, [r7, #8]
 800b950:	4a06      	ldr	r2, [pc, #24]	; (800b96c <vApplicationGetIdleTaskMemory+0x30>)
 800b952:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2280      	movs	r2, #128	; 0x80
 800b958:	601a      	str	r2, [r3, #0]
}
 800b95a:	bf00      	nop
 800b95c:	3714      	adds	r7, #20
 800b95e:	46bd      	mov	sp, r7
 800b960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b964:	4770      	bx	lr
 800b966:	bf00      	nop
 800b968:	20000800 	.word	0x20000800
 800b96c:	2000085c 	.word	0x2000085c

0800b970 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b970:	b480      	push	{r7}
 800b972:	b085      	sub	sp, #20
 800b974:	af00      	add	r7, sp, #0
 800b976:	60f8      	str	r0, [r7, #12]
 800b978:	60b9      	str	r1, [r7, #8]
 800b97a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	4a07      	ldr	r2, [pc, #28]	; (800b99c <vApplicationGetTimerTaskMemory+0x2c>)
 800b980:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b982:	68bb      	ldr	r3, [r7, #8]
 800b984:	4a06      	ldr	r2, [pc, #24]	; (800b9a0 <vApplicationGetTimerTaskMemory+0x30>)
 800b986:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b98e:	601a      	str	r2, [r3, #0]
}
 800b990:	bf00      	nop
 800b992:	3714      	adds	r7, #20
 800b994:	46bd      	mov	sp, r7
 800b996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99a:	4770      	bx	lr
 800b99c:	20000a5c 	.word	0x20000a5c
 800b9a0:	20000ab8 	.word	0x20000ab8

0800b9a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b9a4:	b480      	push	{r7}
 800b9a6:	b083      	sub	sp, #12
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	f103 0208 	add.w	r2, r3, #8
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	f04f 32ff 	mov.w	r2, #4294967295
 800b9bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	f103 0208 	add.w	r2, r3, #8
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f103 0208 	add.w	r2, r3, #8
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b9d8:	bf00      	nop
 800b9da:	370c      	adds	r7, #12
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e2:	4770      	bx	lr

0800b9e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	b083      	sub	sp, #12
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b9f2:	bf00      	nop
 800b9f4:	370c      	adds	r7, #12
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fc:	4770      	bx	lr

0800b9fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b9fe:	b480      	push	{r7}
 800ba00:	b085      	sub	sp, #20
 800ba02:	af00      	add	r7, sp, #0
 800ba04:	6078      	str	r0, [r7, #4]
 800ba06:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	685b      	ldr	r3, [r3, #4]
 800ba0c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	68fa      	ldr	r2, [r7, #12]
 800ba12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	689a      	ldr	r2, [r3, #8]
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	689b      	ldr	r3, [r3, #8]
 800ba20:	683a      	ldr	r2, [r7, #0]
 800ba22:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	683a      	ldr	r2, [r7, #0]
 800ba28:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	687a      	ldr	r2, [r7, #4]
 800ba2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	1c5a      	adds	r2, r3, #1
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	601a      	str	r2, [r3, #0]
}
 800ba3a:	bf00      	nop
 800ba3c:	3714      	adds	r7, #20
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba44:	4770      	bx	lr

0800ba46 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ba46:	b480      	push	{r7}
 800ba48:	b085      	sub	sp, #20
 800ba4a:	af00      	add	r7, sp, #0
 800ba4c:	6078      	str	r0, [r7, #4]
 800ba4e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ba56:	68bb      	ldr	r3, [r7, #8]
 800ba58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba5c:	d103      	bne.n	800ba66 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	691b      	ldr	r3, [r3, #16]
 800ba62:	60fb      	str	r3, [r7, #12]
 800ba64:	e00c      	b.n	800ba80 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	3308      	adds	r3, #8
 800ba6a:	60fb      	str	r3, [r7, #12]
 800ba6c:	e002      	b.n	800ba74 <vListInsert+0x2e>
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	685b      	ldr	r3, [r3, #4]
 800ba72:	60fb      	str	r3, [r7, #12]
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	685b      	ldr	r3, [r3, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	68ba      	ldr	r2, [r7, #8]
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	d2f6      	bcs.n	800ba6e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	685a      	ldr	r2, [r3, #4]
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	685b      	ldr	r3, [r3, #4]
 800ba8c:	683a      	ldr	r2, [r7, #0]
 800ba8e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	68fa      	ldr	r2, [r7, #12]
 800ba94:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	683a      	ldr	r2, [r7, #0]
 800ba9a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	687a      	ldr	r2, [r7, #4]
 800baa0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	1c5a      	adds	r2, r3, #1
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	601a      	str	r2, [r3, #0]
}
 800baac:	bf00      	nop
 800baae:	3714      	adds	r7, #20
 800bab0:	46bd      	mov	sp, r7
 800bab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab6:	4770      	bx	lr

0800bab8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bab8:	b480      	push	{r7}
 800baba:	b085      	sub	sp, #20
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	691b      	ldr	r3, [r3, #16]
 800bac4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	685b      	ldr	r3, [r3, #4]
 800baca:	687a      	ldr	r2, [r7, #4]
 800bacc:	6892      	ldr	r2, [r2, #8]
 800bace:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	689b      	ldr	r3, [r3, #8]
 800bad4:	687a      	ldr	r2, [r7, #4]
 800bad6:	6852      	ldr	r2, [r2, #4]
 800bad8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	685b      	ldr	r3, [r3, #4]
 800bade:	687a      	ldr	r2, [r7, #4]
 800bae0:	429a      	cmp	r2, r3
 800bae2:	d103      	bne.n	800baec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	689a      	ldr	r2, [r3, #8]
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2200      	movs	r2, #0
 800baf0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	1e5a      	subs	r2, r3, #1
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	681b      	ldr	r3, [r3, #0]
}
 800bb00:	4618      	mov	r0, r3
 800bb02:	3714      	adds	r7, #20
 800bb04:	46bd      	mov	sp, r7
 800bb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0a:	4770      	bx	lr

0800bb0c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b084      	sub	sp, #16
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
 800bb14:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d10a      	bne.n	800bb36 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bb20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb24:	f383 8811 	msr	BASEPRI, r3
 800bb28:	f3bf 8f6f 	isb	sy
 800bb2c:	f3bf 8f4f 	dsb	sy
 800bb30:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bb32:	bf00      	nop
 800bb34:	e7fe      	b.n	800bb34 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bb36:	f002 fec5 	bl	800e8c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	681a      	ldr	r2, [r3, #0]
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb42:	68f9      	ldr	r1, [r7, #12]
 800bb44:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bb46:	fb01 f303 	mul.w	r3, r1, r3
 800bb4a:	441a      	add	r2, r3
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	2200      	movs	r2, #0
 800bb54:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	681a      	ldr	r2, [r3, #0]
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	681a      	ldr	r2, [r3, #0]
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb66:	3b01      	subs	r3, #1
 800bb68:	68f9      	ldr	r1, [r7, #12]
 800bb6a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bb6c:	fb01 f303 	mul.w	r3, r1, r3
 800bb70:	441a      	add	r2, r3
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	22ff      	movs	r2, #255	; 0xff
 800bb7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	22ff      	movs	r2, #255	; 0xff
 800bb82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d114      	bne.n	800bbb6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	691b      	ldr	r3, [r3, #16]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d01a      	beq.n	800bbca <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	3310      	adds	r3, #16
 800bb98:	4618      	mov	r0, r3
 800bb9a:	f001 fdb3 	bl	800d704 <xTaskRemoveFromEventList>
 800bb9e:	4603      	mov	r3, r0
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d012      	beq.n	800bbca <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bba4:	4b0c      	ldr	r3, [pc, #48]	; (800bbd8 <xQueueGenericReset+0xcc>)
 800bba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbaa:	601a      	str	r2, [r3, #0]
 800bbac:	f3bf 8f4f 	dsb	sy
 800bbb0:	f3bf 8f6f 	isb	sy
 800bbb4:	e009      	b.n	800bbca <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	3310      	adds	r3, #16
 800bbba:	4618      	mov	r0, r3
 800bbbc:	f7ff fef2 	bl	800b9a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	3324      	adds	r3, #36	; 0x24
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	f7ff feed 	bl	800b9a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bbca:	f002 feab 	bl	800e924 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bbce:	2301      	movs	r3, #1
}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	3710      	adds	r7, #16
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}
 800bbd8:	e000ed04 	.word	0xe000ed04

0800bbdc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b08e      	sub	sp, #56	; 0x38
 800bbe0:	af02      	add	r7, sp, #8
 800bbe2:	60f8      	str	r0, [r7, #12]
 800bbe4:	60b9      	str	r1, [r7, #8]
 800bbe6:	607a      	str	r2, [r7, #4]
 800bbe8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d10a      	bne.n	800bc06 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800bbf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbf4:	f383 8811 	msr	BASEPRI, r3
 800bbf8:	f3bf 8f6f 	isb	sy
 800bbfc:	f3bf 8f4f 	dsb	sy
 800bc00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bc02:	bf00      	nop
 800bc04:	e7fe      	b.n	800bc04 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d10a      	bne.n	800bc22 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800bc0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc10:	f383 8811 	msr	BASEPRI, r3
 800bc14:	f3bf 8f6f 	isb	sy
 800bc18:	f3bf 8f4f 	dsb	sy
 800bc1c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bc1e:	bf00      	nop
 800bc20:	e7fe      	b.n	800bc20 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d002      	beq.n	800bc2e <xQueueGenericCreateStatic+0x52>
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d001      	beq.n	800bc32 <xQueueGenericCreateStatic+0x56>
 800bc2e:	2301      	movs	r3, #1
 800bc30:	e000      	b.n	800bc34 <xQueueGenericCreateStatic+0x58>
 800bc32:	2300      	movs	r3, #0
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d10a      	bne.n	800bc4e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800bc38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc3c:	f383 8811 	msr	BASEPRI, r3
 800bc40:	f3bf 8f6f 	isb	sy
 800bc44:	f3bf 8f4f 	dsb	sy
 800bc48:	623b      	str	r3, [r7, #32]
}
 800bc4a:	bf00      	nop
 800bc4c:	e7fe      	b.n	800bc4c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d102      	bne.n	800bc5a <xQueueGenericCreateStatic+0x7e>
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d101      	bne.n	800bc5e <xQueueGenericCreateStatic+0x82>
 800bc5a:	2301      	movs	r3, #1
 800bc5c:	e000      	b.n	800bc60 <xQueueGenericCreateStatic+0x84>
 800bc5e:	2300      	movs	r3, #0
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d10a      	bne.n	800bc7a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800bc64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc68:	f383 8811 	msr	BASEPRI, r3
 800bc6c:	f3bf 8f6f 	isb	sy
 800bc70:	f3bf 8f4f 	dsb	sy
 800bc74:	61fb      	str	r3, [r7, #28]
}
 800bc76:	bf00      	nop
 800bc78:	e7fe      	b.n	800bc78 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bc7a:	2350      	movs	r3, #80	; 0x50
 800bc7c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bc7e:	697b      	ldr	r3, [r7, #20]
 800bc80:	2b50      	cmp	r3, #80	; 0x50
 800bc82:	d00a      	beq.n	800bc9a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800bc84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc88:	f383 8811 	msr	BASEPRI, r3
 800bc8c:	f3bf 8f6f 	isb	sy
 800bc90:	f3bf 8f4f 	dsb	sy
 800bc94:	61bb      	str	r3, [r7, #24]
}
 800bc96:	bf00      	nop
 800bc98:	e7fe      	b.n	800bc98 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bc9a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d00d      	beq.n	800bcc2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bca8:	2201      	movs	r2, #1
 800bcaa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bcae:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bcb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcb4:	9300      	str	r3, [sp, #0]
 800bcb6:	4613      	mov	r3, r2
 800bcb8:	687a      	ldr	r2, [r7, #4]
 800bcba:	68b9      	ldr	r1, [r7, #8]
 800bcbc:	68f8      	ldr	r0, [r7, #12]
 800bcbe:	f000 f83f 	bl	800bd40 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bcc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	3730      	adds	r7, #48	; 0x30
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bd80      	pop	{r7, pc}

0800bccc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b08a      	sub	sp, #40	; 0x28
 800bcd0:	af02      	add	r7, sp, #8
 800bcd2:	60f8      	str	r0, [r7, #12]
 800bcd4:	60b9      	str	r1, [r7, #8]
 800bcd6:	4613      	mov	r3, r2
 800bcd8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d10a      	bne.n	800bcf6 <xQueueGenericCreate+0x2a>
	__asm volatile
 800bce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bce4:	f383 8811 	msr	BASEPRI, r3
 800bce8:	f3bf 8f6f 	isb	sy
 800bcec:	f3bf 8f4f 	dsb	sy
 800bcf0:	613b      	str	r3, [r7, #16]
}
 800bcf2:	bf00      	nop
 800bcf4:	e7fe      	b.n	800bcf4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	68ba      	ldr	r2, [r7, #8]
 800bcfa:	fb02 f303 	mul.w	r3, r2, r3
 800bcfe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bd00:	69fb      	ldr	r3, [r7, #28]
 800bd02:	3350      	adds	r3, #80	; 0x50
 800bd04:	4618      	mov	r0, r3
 800bd06:	f002 feff 	bl	800eb08 <pvPortMalloc>
 800bd0a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bd0c:	69bb      	ldr	r3, [r7, #24]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d011      	beq.n	800bd36 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bd12:	69bb      	ldr	r3, [r7, #24]
 800bd14:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bd16:	697b      	ldr	r3, [r7, #20]
 800bd18:	3350      	adds	r3, #80	; 0x50
 800bd1a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bd1c:	69bb      	ldr	r3, [r7, #24]
 800bd1e:	2200      	movs	r2, #0
 800bd20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bd24:	79fa      	ldrb	r2, [r7, #7]
 800bd26:	69bb      	ldr	r3, [r7, #24]
 800bd28:	9300      	str	r3, [sp, #0]
 800bd2a:	4613      	mov	r3, r2
 800bd2c:	697a      	ldr	r2, [r7, #20]
 800bd2e:	68b9      	ldr	r1, [r7, #8]
 800bd30:	68f8      	ldr	r0, [r7, #12]
 800bd32:	f000 f805 	bl	800bd40 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bd36:	69bb      	ldr	r3, [r7, #24]
	}
 800bd38:	4618      	mov	r0, r3
 800bd3a:	3720      	adds	r7, #32
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd80      	pop	{r7, pc}

0800bd40 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b084      	sub	sp, #16
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	60f8      	str	r0, [r7, #12]
 800bd48:	60b9      	str	r1, [r7, #8]
 800bd4a:	607a      	str	r2, [r7, #4]
 800bd4c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d103      	bne.n	800bd5c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bd54:	69bb      	ldr	r3, [r7, #24]
 800bd56:	69ba      	ldr	r2, [r7, #24]
 800bd58:	601a      	str	r2, [r3, #0]
 800bd5a:	e002      	b.n	800bd62 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bd5c:	69bb      	ldr	r3, [r7, #24]
 800bd5e:	687a      	ldr	r2, [r7, #4]
 800bd60:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bd62:	69bb      	ldr	r3, [r7, #24]
 800bd64:	68fa      	ldr	r2, [r7, #12]
 800bd66:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bd68:	69bb      	ldr	r3, [r7, #24]
 800bd6a:	68ba      	ldr	r2, [r7, #8]
 800bd6c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bd6e:	2101      	movs	r1, #1
 800bd70:	69b8      	ldr	r0, [r7, #24]
 800bd72:	f7ff fecb 	bl	800bb0c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800bd76:	69bb      	ldr	r3, [r7, #24]
 800bd78:	78fa      	ldrb	r2, [r7, #3]
 800bd7a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bd7e:	bf00      	nop
 800bd80:	3710      	adds	r7, #16
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd80      	pop	{r7, pc}

0800bd86 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800bd86:	b580      	push	{r7, lr}
 800bd88:	b082      	sub	sp, #8
 800bd8a:	af00      	add	r7, sp, #0
 800bd8c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d00e      	beq.n	800bdb2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2200      	movs	r2, #0
 800bd98:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2200      	movs	r2, #0
 800bda4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800bda6:	2300      	movs	r3, #0
 800bda8:	2200      	movs	r2, #0
 800bdaa:	2100      	movs	r1, #0
 800bdac:	6878      	ldr	r0, [r7, #4]
 800bdae:	f000 f90b 	bl	800bfc8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800bdb2:	bf00      	nop
 800bdb4:	3708      	adds	r7, #8
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd80      	pop	{r7, pc}

0800bdba <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800bdba:	b580      	push	{r7, lr}
 800bdbc:	b086      	sub	sp, #24
 800bdbe:	af00      	add	r7, sp, #0
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bdc4:	2301      	movs	r3, #1
 800bdc6:	617b      	str	r3, [r7, #20]
 800bdc8:	2300      	movs	r3, #0
 800bdca:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800bdcc:	79fb      	ldrb	r3, [r7, #7]
 800bdce:	461a      	mov	r2, r3
 800bdd0:	6939      	ldr	r1, [r7, #16]
 800bdd2:	6978      	ldr	r0, [r7, #20]
 800bdd4:	f7ff ff7a 	bl	800bccc <xQueueGenericCreate>
 800bdd8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bdda:	68f8      	ldr	r0, [r7, #12]
 800bddc:	f7ff ffd3 	bl	800bd86 <prvInitialiseMutex>

		return xNewQueue;
 800bde0:	68fb      	ldr	r3, [r7, #12]
	}
 800bde2:	4618      	mov	r0, r3
 800bde4:	3718      	adds	r7, #24
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}

0800bdea <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800bdea:	b580      	push	{r7, lr}
 800bdec:	b088      	sub	sp, #32
 800bdee:	af02      	add	r7, sp, #8
 800bdf0:	4603      	mov	r3, r0
 800bdf2:	6039      	str	r1, [r7, #0]
 800bdf4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bdf6:	2301      	movs	r3, #1
 800bdf8:	617b      	str	r3, [r7, #20]
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800bdfe:	79fb      	ldrb	r3, [r7, #7]
 800be00:	9300      	str	r3, [sp, #0]
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	2200      	movs	r2, #0
 800be06:	6939      	ldr	r1, [r7, #16]
 800be08:	6978      	ldr	r0, [r7, #20]
 800be0a:	f7ff fee7 	bl	800bbdc <xQueueGenericCreateStatic>
 800be0e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800be10:	68f8      	ldr	r0, [r7, #12]
 800be12:	f7ff ffb8 	bl	800bd86 <prvInitialiseMutex>

		return xNewQueue;
 800be16:	68fb      	ldr	r3, [r7, #12]
	}
 800be18:	4618      	mov	r0, r3
 800be1a:	3718      	adds	r7, #24
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}

0800be20 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800be20:	b590      	push	{r4, r7, lr}
 800be22:	b087      	sub	sp, #28
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800be2c:	693b      	ldr	r3, [r7, #16]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d10a      	bne.n	800be48 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800be32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be36:	f383 8811 	msr	BASEPRI, r3
 800be3a:	f3bf 8f6f 	isb	sy
 800be3e:	f3bf 8f4f 	dsb	sy
 800be42:	60fb      	str	r3, [r7, #12]
}
 800be44:	bf00      	nop
 800be46:	e7fe      	b.n	800be46 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800be48:	693b      	ldr	r3, [r7, #16]
 800be4a:	689c      	ldr	r4, [r3, #8]
 800be4c:	f001 fe18 	bl	800da80 <xTaskGetCurrentTaskHandle>
 800be50:	4603      	mov	r3, r0
 800be52:	429c      	cmp	r4, r3
 800be54:	d111      	bne.n	800be7a <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800be56:	693b      	ldr	r3, [r7, #16]
 800be58:	68db      	ldr	r3, [r3, #12]
 800be5a:	1e5a      	subs	r2, r3, #1
 800be5c:	693b      	ldr	r3, [r7, #16]
 800be5e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800be60:	693b      	ldr	r3, [r7, #16]
 800be62:	68db      	ldr	r3, [r3, #12]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d105      	bne.n	800be74 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800be68:	2300      	movs	r3, #0
 800be6a:	2200      	movs	r2, #0
 800be6c:	2100      	movs	r1, #0
 800be6e:	6938      	ldr	r0, [r7, #16]
 800be70:	f000 f8aa 	bl	800bfc8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800be74:	2301      	movs	r3, #1
 800be76:	617b      	str	r3, [r7, #20]
 800be78:	e001      	b.n	800be7e <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800be7a:	2300      	movs	r3, #0
 800be7c:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800be7e:	697b      	ldr	r3, [r7, #20]
	}
 800be80:	4618      	mov	r0, r3
 800be82:	371c      	adds	r7, #28
 800be84:	46bd      	mov	sp, r7
 800be86:	bd90      	pop	{r4, r7, pc}

0800be88 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800be88:	b590      	push	{r4, r7, lr}
 800be8a:	b087      	sub	sp, #28
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
 800be90:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800be96:	693b      	ldr	r3, [r7, #16]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d10a      	bne.n	800beb2 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800be9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bea0:	f383 8811 	msr	BASEPRI, r3
 800bea4:	f3bf 8f6f 	isb	sy
 800bea8:	f3bf 8f4f 	dsb	sy
 800beac:	60fb      	str	r3, [r7, #12]
}
 800beae:	bf00      	nop
 800beb0:	e7fe      	b.n	800beb0 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800beb2:	693b      	ldr	r3, [r7, #16]
 800beb4:	689c      	ldr	r4, [r3, #8]
 800beb6:	f001 fde3 	bl	800da80 <xTaskGetCurrentTaskHandle>
 800beba:	4603      	mov	r3, r0
 800bebc:	429c      	cmp	r4, r3
 800bebe:	d107      	bne.n	800bed0 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800bec0:	693b      	ldr	r3, [r7, #16]
 800bec2:	68db      	ldr	r3, [r3, #12]
 800bec4:	1c5a      	adds	r2, r3, #1
 800bec6:	693b      	ldr	r3, [r7, #16]
 800bec8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800beca:	2301      	movs	r3, #1
 800becc:	617b      	str	r3, [r7, #20]
 800bece:	e00c      	b.n	800beea <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800bed0:	6839      	ldr	r1, [r7, #0]
 800bed2:	6938      	ldr	r0, [r7, #16]
 800bed4:	f000 fb7e 	bl	800c5d4 <xQueueSemaphoreTake>
 800bed8:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800beda:	697b      	ldr	r3, [r7, #20]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d004      	beq.n	800beea <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800bee0:	693b      	ldr	r3, [r7, #16]
 800bee2:	68db      	ldr	r3, [r3, #12]
 800bee4:	1c5a      	adds	r2, r3, #1
 800bee6:	693b      	ldr	r3, [r7, #16]
 800bee8:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800beea:	697b      	ldr	r3, [r7, #20]
	}
 800beec:	4618      	mov	r0, r3
 800beee:	371c      	adds	r7, #28
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd90      	pop	{r4, r7, pc}

0800bef4 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b08a      	sub	sp, #40	; 0x28
 800bef8:	af02      	add	r7, sp, #8
 800befa:	60f8      	str	r0, [r7, #12]
 800befc:	60b9      	str	r1, [r7, #8]
 800befe:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d10a      	bne.n	800bf1c <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800bf06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf0a:	f383 8811 	msr	BASEPRI, r3
 800bf0e:	f3bf 8f6f 	isb	sy
 800bf12:	f3bf 8f4f 	dsb	sy
 800bf16:	61bb      	str	r3, [r7, #24]
}
 800bf18:	bf00      	nop
 800bf1a:	e7fe      	b.n	800bf1a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800bf1c:	68ba      	ldr	r2, [r7, #8]
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	429a      	cmp	r2, r3
 800bf22:	d90a      	bls.n	800bf3a <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800bf24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf28:	f383 8811 	msr	BASEPRI, r3
 800bf2c:	f3bf 8f6f 	isb	sy
 800bf30:	f3bf 8f4f 	dsb	sy
 800bf34:	617b      	str	r3, [r7, #20]
}
 800bf36:	bf00      	nop
 800bf38:	e7fe      	b.n	800bf38 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bf3a:	2302      	movs	r3, #2
 800bf3c:	9300      	str	r3, [sp, #0]
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2200      	movs	r2, #0
 800bf42:	2100      	movs	r1, #0
 800bf44:	68f8      	ldr	r0, [r7, #12]
 800bf46:	f7ff fe49 	bl	800bbdc <xQueueGenericCreateStatic>
 800bf4a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800bf4c:	69fb      	ldr	r3, [r7, #28]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d002      	beq.n	800bf58 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800bf52:	69fb      	ldr	r3, [r7, #28]
 800bf54:	68ba      	ldr	r2, [r7, #8]
 800bf56:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800bf58:	69fb      	ldr	r3, [r7, #28]
	}
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	3720      	adds	r7, #32
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd80      	pop	{r7, pc}

0800bf62 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800bf62:	b580      	push	{r7, lr}
 800bf64:	b086      	sub	sp, #24
 800bf66:	af00      	add	r7, sp, #0
 800bf68:	6078      	str	r0, [r7, #4]
 800bf6a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d10a      	bne.n	800bf88 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800bf72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf76:	f383 8811 	msr	BASEPRI, r3
 800bf7a:	f3bf 8f6f 	isb	sy
 800bf7e:	f3bf 8f4f 	dsb	sy
 800bf82:	613b      	str	r3, [r7, #16]
}
 800bf84:	bf00      	nop
 800bf86:	e7fe      	b.n	800bf86 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800bf88:	683a      	ldr	r2, [r7, #0]
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	429a      	cmp	r2, r3
 800bf8e:	d90a      	bls.n	800bfa6 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800bf90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf94:	f383 8811 	msr	BASEPRI, r3
 800bf98:	f3bf 8f6f 	isb	sy
 800bf9c:	f3bf 8f4f 	dsb	sy
 800bfa0:	60fb      	str	r3, [r7, #12]
}
 800bfa2:	bf00      	nop
 800bfa4:	e7fe      	b.n	800bfa4 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bfa6:	2202      	movs	r2, #2
 800bfa8:	2100      	movs	r1, #0
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f7ff fe8e 	bl	800bccc <xQueueGenericCreate>
 800bfb0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800bfb2:	697b      	ldr	r3, [r7, #20]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d002      	beq.n	800bfbe <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800bfb8:	697b      	ldr	r3, [r7, #20]
 800bfba:	683a      	ldr	r2, [r7, #0]
 800bfbc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800bfbe:	697b      	ldr	r3, [r7, #20]
	}
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	3718      	adds	r7, #24
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd80      	pop	{r7, pc}

0800bfc8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b08e      	sub	sp, #56	; 0x38
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	60f8      	str	r0, [r7, #12]
 800bfd0:	60b9      	str	r1, [r7, #8]
 800bfd2:	607a      	str	r2, [r7, #4]
 800bfd4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bfde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d10a      	bne.n	800bffa <xQueueGenericSend+0x32>
	__asm volatile
 800bfe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfe8:	f383 8811 	msr	BASEPRI, r3
 800bfec:	f3bf 8f6f 	isb	sy
 800bff0:	f3bf 8f4f 	dsb	sy
 800bff4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bff6:	bf00      	nop
 800bff8:	e7fe      	b.n	800bff8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bffa:	68bb      	ldr	r3, [r7, #8]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d103      	bne.n	800c008 <xQueueGenericSend+0x40>
 800c000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c004:	2b00      	cmp	r3, #0
 800c006:	d101      	bne.n	800c00c <xQueueGenericSend+0x44>
 800c008:	2301      	movs	r3, #1
 800c00a:	e000      	b.n	800c00e <xQueueGenericSend+0x46>
 800c00c:	2300      	movs	r3, #0
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d10a      	bne.n	800c028 <xQueueGenericSend+0x60>
	__asm volatile
 800c012:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c016:	f383 8811 	msr	BASEPRI, r3
 800c01a:	f3bf 8f6f 	isb	sy
 800c01e:	f3bf 8f4f 	dsb	sy
 800c022:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c024:	bf00      	nop
 800c026:	e7fe      	b.n	800c026 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	2b02      	cmp	r3, #2
 800c02c:	d103      	bne.n	800c036 <xQueueGenericSend+0x6e>
 800c02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c032:	2b01      	cmp	r3, #1
 800c034:	d101      	bne.n	800c03a <xQueueGenericSend+0x72>
 800c036:	2301      	movs	r3, #1
 800c038:	e000      	b.n	800c03c <xQueueGenericSend+0x74>
 800c03a:	2300      	movs	r3, #0
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d10a      	bne.n	800c056 <xQueueGenericSend+0x8e>
	__asm volatile
 800c040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c044:	f383 8811 	msr	BASEPRI, r3
 800c048:	f3bf 8f6f 	isb	sy
 800c04c:	f3bf 8f4f 	dsb	sy
 800c050:	623b      	str	r3, [r7, #32]
}
 800c052:	bf00      	nop
 800c054:	e7fe      	b.n	800c054 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c056:	f001 fd23 	bl	800daa0 <xTaskGetSchedulerState>
 800c05a:	4603      	mov	r3, r0
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d102      	bne.n	800c066 <xQueueGenericSend+0x9e>
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d101      	bne.n	800c06a <xQueueGenericSend+0xa2>
 800c066:	2301      	movs	r3, #1
 800c068:	e000      	b.n	800c06c <xQueueGenericSend+0xa4>
 800c06a:	2300      	movs	r3, #0
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d10a      	bne.n	800c086 <xQueueGenericSend+0xbe>
	__asm volatile
 800c070:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c074:	f383 8811 	msr	BASEPRI, r3
 800c078:	f3bf 8f6f 	isb	sy
 800c07c:	f3bf 8f4f 	dsb	sy
 800c080:	61fb      	str	r3, [r7, #28]
}
 800c082:	bf00      	nop
 800c084:	e7fe      	b.n	800c084 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c086:	f002 fc1d 	bl	800e8c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c08c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c092:	429a      	cmp	r2, r3
 800c094:	d302      	bcc.n	800c09c <xQueueGenericSend+0xd4>
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	2b02      	cmp	r3, #2
 800c09a:	d129      	bne.n	800c0f0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c09c:	683a      	ldr	r2, [r7, #0]
 800c09e:	68b9      	ldr	r1, [r7, #8]
 800c0a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c0a2:	f000 fc5e 	bl	800c962 <prvCopyDataToQueue>
 800c0a6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c0a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d010      	beq.n	800c0d2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c0b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0b2:	3324      	adds	r3, #36	; 0x24
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	f001 fb25 	bl	800d704 <xTaskRemoveFromEventList>
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d013      	beq.n	800c0e8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c0c0:	4b3f      	ldr	r3, [pc, #252]	; (800c1c0 <xQueueGenericSend+0x1f8>)
 800c0c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0c6:	601a      	str	r2, [r3, #0]
 800c0c8:	f3bf 8f4f 	dsb	sy
 800c0cc:	f3bf 8f6f 	isb	sy
 800c0d0:	e00a      	b.n	800c0e8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c0d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d007      	beq.n	800c0e8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c0d8:	4b39      	ldr	r3, [pc, #228]	; (800c1c0 <xQueueGenericSend+0x1f8>)
 800c0da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0de:	601a      	str	r2, [r3, #0]
 800c0e0:	f3bf 8f4f 	dsb	sy
 800c0e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c0e8:	f002 fc1c 	bl	800e924 <vPortExitCritical>
				return pdPASS;
 800c0ec:	2301      	movs	r3, #1
 800c0ee:	e063      	b.n	800c1b8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d103      	bne.n	800c0fe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c0f6:	f002 fc15 	bl	800e924 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	e05c      	b.n	800c1b8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c0fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c100:	2b00      	cmp	r3, #0
 800c102:	d106      	bne.n	800c112 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c104:	f107 0314 	add.w	r3, r7, #20
 800c108:	4618      	mov	r0, r3
 800c10a:	f001 fb5f 	bl	800d7cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c10e:	2301      	movs	r3, #1
 800c110:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c112:	f002 fc07 	bl	800e924 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c116:	f001 f8d1 	bl	800d2bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c11a:	f002 fbd3 	bl	800e8c4 <vPortEnterCritical>
 800c11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c120:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c124:	b25b      	sxtb	r3, r3
 800c126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c12a:	d103      	bne.n	800c134 <xQueueGenericSend+0x16c>
 800c12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c12e:	2200      	movs	r2, #0
 800c130:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c136:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c13a:	b25b      	sxtb	r3, r3
 800c13c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c140:	d103      	bne.n	800c14a <xQueueGenericSend+0x182>
 800c142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c144:	2200      	movs	r2, #0
 800c146:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c14a:	f002 fbeb 	bl	800e924 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c14e:	1d3a      	adds	r2, r7, #4
 800c150:	f107 0314 	add.w	r3, r7, #20
 800c154:	4611      	mov	r1, r2
 800c156:	4618      	mov	r0, r3
 800c158:	f001 fb4e 	bl	800d7f8 <xTaskCheckForTimeOut>
 800c15c:	4603      	mov	r3, r0
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d124      	bne.n	800c1ac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c162:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c164:	f000 fcf5 	bl	800cb52 <prvIsQueueFull>
 800c168:	4603      	mov	r3, r0
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d018      	beq.n	800c1a0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c170:	3310      	adds	r3, #16
 800c172:	687a      	ldr	r2, [r7, #4]
 800c174:	4611      	mov	r1, r2
 800c176:	4618      	mov	r0, r3
 800c178:	f001 fa74 	bl	800d664 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c17c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c17e:	f000 fc80 	bl	800ca82 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c182:	f001 f8a9 	bl	800d2d8 <xTaskResumeAll>
 800c186:	4603      	mov	r3, r0
 800c188:	2b00      	cmp	r3, #0
 800c18a:	f47f af7c 	bne.w	800c086 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c18e:	4b0c      	ldr	r3, [pc, #48]	; (800c1c0 <xQueueGenericSend+0x1f8>)
 800c190:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c194:	601a      	str	r2, [r3, #0]
 800c196:	f3bf 8f4f 	dsb	sy
 800c19a:	f3bf 8f6f 	isb	sy
 800c19e:	e772      	b.n	800c086 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c1a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c1a2:	f000 fc6e 	bl	800ca82 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c1a6:	f001 f897 	bl	800d2d8 <xTaskResumeAll>
 800c1aa:	e76c      	b.n	800c086 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c1ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c1ae:	f000 fc68 	bl	800ca82 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c1b2:	f001 f891 	bl	800d2d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c1b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	3738      	adds	r7, #56	; 0x38
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bd80      	pop	{r7, pc}
 800c1c0:	e000ed04 	.word	0xe000ed04

0800c1c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b090      	sub	sp, #64	; 0x40
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	60f8      	str	r0, [r7, #12]
 800c1cc:	60b9      	str	r1, [r7, #8]
 800c1ce:	607a      	str	r2, [r7, #4]
 800c1d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c1d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d10a      	bne.n	800c1f2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c1dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1e0:	f383 8811 	msr	BASEPRI, r3
 800c1e4:	f3bf 8f6f 	isb	sy
 800c1e8:	f3bf 8f4f 	dsb	sy
 800c1ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c1ee:	bf00      	nop
 800c1f0:	e7fe      	b.n	800c1f0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c1f2:	68bb      	ldr	r3, [r7, #8]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d103      	bne.n	800c200 <xQueueGenericSendFromISR+0x3c>
 800c1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d101      	bne.n	800c204 <xQueueGenericSendFromISR+0x40>
 800c200:	2301      	movs	r3, #1
 800c202:	e000      	b.n	800c206 <xQueueGenericSendFromISR+0x42>
 800c204:	2300      	movs	r3, #0
 800c206:	2b00      	cmp	r3, #0
 800c208:	d10a      	bne.n	800c220 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c20a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c20e:	f383 8811 	msr	BASEPRI, r3
 800c212:	f3bf 8f6f 	isb	sy
 800c216:	f3bf 8f4f 	dsb	sy
 800c21a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c21c:	bf00      	nop
 800c21e:	e7fe      	b.n	800c21e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	2b02      	cmp	r3, #2
 800c224:	d103      	bne.n	800c22e <xQueueGenericSendFromISR+0x6a>
 800c226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c22a:	2b01      	cmp	r3, #1
 800c22c:	d101      	bne.n	800c232 <xQueueGenericSendFromISR+0x6e>
 800c22e:	2301      	movs	r3, #1
 800c230:	e000      	b.n	800c234 <xQueueGenericSendFromISR+0x70>
 800c232:	2300      	movs	r3, #0
 800c234:	2b00      	cmp	r3, #0
 800c236:	d10a      	bne.n	800c24e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c23c:	f383 8811 	msr	BASEPRI, r3
 800c240:	f3bf 8f6f 	isb	sy
 800c244:	f3bf 8f4f 	dsb	sy
 800c248:	623b      	str	r3, [r7, #32]
}
 800c24a:	bf00      	nop
 800c24c:	e7fe      	b.n	800c24c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c24e:	f002 fc1b 	bl	800ea88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c252:	f3ef 8211 	mrs	r2, BASEPRI
 800c256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c25a:	f383 8811 	msr	BASEPRI, r3
 800c25e:	f3bf 8f6f 	isb	sy
 800c262:	f3bf 8f4f 	dsb	sy
 800c266:	61fa      	str	r2, [r7, #28]
 800c268:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c26a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c26c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c26e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c270:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c276:	429a      	cmp	r2, r3
 800c278:	d302      	bcc.n	800c280 <xQueueGenericSendFromISR+0xbc>
 800c27a:	683b      	ldr	r3, [r7, #0]
 800c27c:	2b02      	cmp	r3, #2
 800c27e:	d12f      	bne.n	800c2e0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c282:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c286:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c28a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c28c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c28e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c290:	683a      	ldr	r2, [r7, #0]
 800c292:	68b9      	ldr	r1, [r7, #8]
 800c294:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c296:	f000 fb64 	bl	800c962 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c29a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c29e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2a2:	d112      	bne.n	800c2ca <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c2a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d016      	beq.n	800c2da <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c2ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ae:	3324      	adds	r3, #36	; 0x24
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	f001 fa27 	bl	800d704 <xTaskRemoveFromEventList>
 800c2b6:	4603      	mov	r3, r0
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d00e      	beq.n	800c2da <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d00b      	beq.n	800c2da <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	2201      	movs	r2, #1
 800c2c6:	601a      	str	r2, [r3, #0]
 800c2c8:	e007      	b.n	800c2da <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c2ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c2ce:	3301      	adds	r3, #1
 800c2d0:	b2db      	uxtb	r3, r3
 800c2d2:	b25a      	sxtb	r2, r3
 800c2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c2da:	2301      	movs	r3, #1
 800c2dc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c2de:	e001      	b.n	800c2e4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2e6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c2e8:	697b      	ldr	r3, [r7, #20]
 800c2ea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c2ee:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c2f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	3740      	adds	r7, #64	; 0x40
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bd80      	pop	{r7, pc}

0800c2fa <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c2fa:	b580      	push	{r7, lr}
 800c2fc:	b08e      	sub	sp, #56	; 0x38
 800c2fe:	af00      	add	r7, sp, #0
 800c300:	6078      	str	r0, [r7, #4]
 800c302:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d10a      	bne.n	800c324 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800c30e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c312:	f383 8811 	msr	BASEPRI, r3
 800c316:	f3bf 8f6f 	isb	sy
 800c31a:	f3bf 8f4f 	dsb	sy
 800c31e:	623b      	str	r3, [r7, #32]
}
 800c320:	bf00      	nop
 800c322:	e7fe      	b.n	800c322 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d00a      	beq.n	800c342 <xQueueGiveFromISR+0x48>
	__asm volatile
 800c32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c330:	f383 8811 	msr	BASEPRI, r3
 800c334:	f3bf 8f6f 	isb	sy
 800c338:	f3bf 8f4f 	dsb	sy
 800c33c:	61fb      	str	r3, [r7, #28]
}
 800c33e:	bf00      	nop
 800c340:	e7fe      	b.n	800c340 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d103      	bne.n	800c352 <xQueueGiveFromISR+0x58>
 800c34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c34c:	689b      	ldr	r3, [r3, #8]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d101      	bne.n	800c356 <xQueueGiveFromISR+0x5c>
 800c352:	2301      	movs	r3, #1
 800c354:	e000      	b.n	800c358 <xQueueGiveFromISR+0x5e>
 800c356:	2300      	movs	r3, #0
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d10a      	bne.n	800c372 <xQueueGiveFromISR+0x78>
	__asm volatile
 800c35c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c360:	f383 8811 	msr	BASEPRI, r3
 800c364:	f3bf 8f6f 	isb	sy
 800c368:	f3bf 8f4f 	dsb	sy
 800c36c:	61bb      	str	r3, [r7, #24]
}
 800c36e:	bf00      	nop
 800c370:	e7fe      	b.n	800c370 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c372:	f002 fb89 	bl	800ea88 <vPortValidateInterruptPriority>
	__asm volatile
 800c376:	f3ef 8211 	mrs	r2, BASEPRI
 800c37a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c37e:	f383 8811 	msr	BASEPRI, r3
 800c382:	f3bf 8f6f 	isb	sy
 800c386:	f3bf 8f4f 	dsb	sy
 800c38a:	617a      	str	r2, [r7, #20]
 800c38c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c38e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c390:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c396:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c39a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c39c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c39e:	429a      	cmp	r2, r3
 800c3a0:	d22b      	bcs.n	800c3fa <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c3a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c3a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ae:	1c5a      	adds	r2, r3, #1
 800c3b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3b2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c3b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c3b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3bc:	d112      	bne.n	800c3e4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d016      	beq.n	800c3f4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c3c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3c8:	3324      	adds	r3, #36	; 0x24
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	f001 f99a 	bl	800d704 <xTaskRemoveFromEventList>
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d00e      	beq.n	800c3f4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d00b      	beq.n	800c3f4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	2201      	movs	r2, #1
 800c3e0:	601a      	str	r2, [r3, #0]
 800c3e2:	e007      	b.n	800c3f4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c3e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c3e8:	3301      	adds	r3, #1
 800c3ea:	b2db      	uxtb	r3, r3
 800c3ec:	b25a      	sxtb	r2, r3
 800c3ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c3f4:	2301      	movs	r3, #1
 800c3f6:	637b      	str	r3, [r7, #52]	; 0x34
 800c3f8:	e001      	b.n	800c3fe <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	637b      	str	r3, [r7, #52]	; 0x34
 800c3fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c400:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	f383 8811 	msr	BASEPRI, r3
}
 800c408:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c40a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c40c:	4618      	mov	r0, r3
 800c40e:	3738      	adds	r7, #56	; 0x38
 800c410:	46bd      	mov	sp, r7
 800c412:	bd80      	pop	{r7, pc}

0800c414 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b08c      	sub	sp, #48	; 0x30
 800c418:	af00      	add	r7, sp, #0
 800c41a:	60f8      	str	r0, [r7, #12]
 800c41c:	60b9      	str	r1, [r7, #8]
 800c41e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c420:	2300      	movs	r3, #0
 800c422:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d10a      	bne.n	800c444 <xQueueReceive+0x30>
	__asm volatile
 800c42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c432:	f383 8811 	msr	BASEPRI, r3
 800c436:	f3bf 8f6f 	isb	sy
 800c43a:	f3bf 8f4f 	dsb	sy
 800c43e:	623b      	str	r3, [r7, #32]
}
 800c440:	bf00      	nop
 800c442:	e7fe      	b.n	800c442 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c444:	68bb      	ldr	r3, [r7, #8]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d103      	bne.n	800c452 <xQueueReceive+0x3e>
 800c44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c44c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d101      	bne.n	800c456 <xQueueReceive+0x42>
 800c452:	2301      	movs	r3, #1
 800c454:	e000      	b.n	800c458 <xQueueReceive+0x44>
 800c456:	2300      	movs	r3, #0
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d10a      	bne.n	800c472 <xQueueReceive+0x5e>
	__asm volatile
 800c45c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c460:	f383 8811 	msr	BASEPRI, r3
 800c464:	f3bf 8f6f 	isb	sy
 800c468:	f3bf 8f4f 	dsb	sy
 800c46c:	61fb      	str	r3, [r7, #28]
}
 800c46e:	bf00      	nop
 800c470:	e7fe      	b.n	800c470 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c472:	f001 fb15 	bl	800daa0 <xTaskGetSchedulerState>
 800c476:	4603      	mov	r3, r0
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d102      	bne.n	800c482 <xQueueReceive+0x6e>
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d101      	bne.n	800c486 <xQueueReceive+0x72>
 800c482:	2301      	movs	r3, #1
 800c484:	e000      	b.n	800c488 <xQueueReceive+0x74>
 800c486:	2300      	movs	r3, #0
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d10a      	bne.n	800c4a2 <xQueueReceive+0x8e>
	__asm volatile
 800c48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c490:	f383 8811 	msr	BASEPRI, r3
 800c494:	f3bf 8f6f 	isb	sy
 800c498:	f3bf 8f4f 	dsb	sy
 800c49c:	61bb      	str	r3, [r7, #24]
}
 800c49e:	bf00      	nop
 800c4a0:	e7fe      	b.n	800c4a0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c4a2:	f002 fa0f 	bl	800e8c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4aa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d01f      	beq.n	800c4f2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c4b2:	68b9      	ldr	r1, [r7, #8]
 800c4b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4b6:	f000 fabe 	bl	800ca36 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4bc:	1e5a      	subs	r2, r3, #1
 800c4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4c0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c4c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4c4:	691b      	ldr	r3, [r3, #16]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d00f      	beq.n	800c4ea <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c4ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4cc:	3310      	adds	r3, #16
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	f001 f918 	bl	800d704 <xTaskRemoveFromEventList>
 800c4d4:	4603      	mov	r3, r0
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d007      	beq.n	800c4ea <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c4da:	4b3d      	ldr	r3, [pc, #244]	; (800c5d0 <xQueueReceive+0x1bc>)
 800c4dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4e0:	601a      	str	r2, [r3, #0]
 800c4e2:	f3bf 8f4f 	dsb	sy
 800c4e6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c4ea:	f002 fa1b 	bl	800e924 <vPortExitCritical>
				return pdPASS;
 800c4ee:	2301      	movs	r3, #1
 800c4f0:	e069      	b.n	800c5c6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d103      	bne.n	800c500 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c4f8:	f002 fa14 	bl	800e924 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	e062      	b.n	800c5c6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c502:	2b00      	cmp	r3, #0
 800c504:	d106      	bne.n	800c514 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c506:	f107 0310 	add.w	r3, r7, #16
 800c50a:	4618      	mov	r0, r3
 800c50c:	f001 f95e 	bl	800d7cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c510:	2301      	movs	r3, #1
 800c512:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c514:	f002 fa06 	bl	800e924 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c518:	f000 fed0 	bl	800d2bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c51c:	f002 f9d2 	bl	800e8c4 <vPortEnterCritical>
 800c520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c522:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c526:	b25b      	sxtb	r3, r3
 800c528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c52c:	d103      	bne.n	800c536 <xQueueReceive+0x122>
 800c52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c530:	2200      	movs	r2, #0
 800c532:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c538:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c53c:	b25b      	sxtb	r3, r3
 800c53e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c542:	d103      	bne.n	800c54c <xQueueReceive+0x138>
 800c544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c546:	2200      	movs	r2, #0
 800c548:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c54c:	f002 f9ea 	bl	800e924 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c550:	1d3a      	adds	r2, r7, #4
 800c552:	f107 0310 	add.w	r3, r7, #16
 800c556:	4611      	mov	r1, r2
 800c558:	4618      	mov	r0, r3
 800c55a:	f001 f94d 	bl	800d7f8 <xTaskCheckForTimeOut>
 800c55e:	4603      	mov	r3, r0
 800c560:	2b00      	cmp	r3, #0
 800c562:	d123      	bne.n	800c5ac <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c564:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c566:	f000 fade 	bl	800cb26 <prvIsQueueEmpty>
 800c56a:	4603      	mov	r3, r0
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d017      	beq.n	800c5a0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c572:	3324      	adds	r3, #36	; 0x24
 800c574:	687a      	ldr	r2, [r7, #4]
 800c576:	4611      	mov	r1, r2
 800c578:	4618      	mov	r0, r3
 800c57a:	f001 f873 	bl	800d664 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c57e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c580:	f000 fa7f 	bl	800ca82 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c584:	f000 fea8 	bl	800d2d8 <xTaskResumeAll>
 800c588:	4603      	mov	r3, r0
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d189      	bne.n	800c4a2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c58e:	4b10      	ldr	r3, [pc, #64]	; (800c5d0 <xQueueReceive+0x1bc>)
 800c590:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c594:	601a      	str	r2, [r3, #0]
 800c596:	f3bf 8f4f 	dsb	sy
 800c59a:	f3bf 8f6f 	isb	sy
 800c59e:	e780      	b.n	800c4a2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c5a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c5a2:	f000 fa6e 	bl	800ca82 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c5a6:	f000 fe97 	bl	800d2d8 <xTaskResumeAll>
 800c5aa:	e77a      	b.n	800c4a2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c5ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c5ae:	f000 fa68 	bl	800ca82 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c5b2:	f000 fe91 	bl	800d2d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c5b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c5b8:	f000 fab5 	bl	800cb26 <prvIsQueueEmpty>
 800c5bc:	4603      	mov	r3, r0
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	f43f af6f 	beq.w	800c4a2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c5c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	3730      	adds	r7, #48	; 0x30
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	bd80      	pop	{r7, pc}
 800c5ce:	bf00      	nop
 800c5d0:	e000ed04 	.word	0xe000ed04

0800c5d4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b08e      	sub	sp, #56	; 0x38
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
 800c5dc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c5de:	2300      	movs	r3, #0
 800c5e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c5ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d10a      	bne.n	800c606 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800c5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5f4:	f383 8811 	msr	BASEPRI, r3
 800c5f8:	f3bf 8f6f 	isb	sy
 800c5fc:	f3bf 8f4f 	dsb	sy
 800c600:	623b      	str	r3, [r7, #32]
}
 800c602:	bf00      	nop
 800c604:	e7fe      	b.n	800c604 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d00a      	beq.n	800c624 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800c60e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c612:	f383 8811 	msr	BASEPRI, r3
 800c616:	f3bf 8f6f 	isb	sy
 800c61a:	f3bf 8f4f 	dsb	sy
 800c61e:	61fb      	str	r3, [r7, #28]
}
 800c620:	bf00      	nop
 800c622:	e7fe      	b.n	800c622 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c624:	f001 fa3c 	bl	800daa0 <xTaskGetSchedulerState>
 800c628:	4603      	mov	r3, r0
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d102      	bne.n	800c634 <xQueueSemaphoreTake+0x60>
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d101      	bne.n	800c638 <xQueueSemaphoreTake+0x64>
 800c634:	2301      	movs	r3, #1
 800c636:	e000      	b.n	800c63a <xQueueSemaphoreTake+0x66>
 800c638:	2300      	movs	r3, #0
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d10a      	bne.n	800c654 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c63e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c642:	f383 8811 	msr	BASEPRI, r3
 800c646:	f3bf 8f6f 	isb	sy
 800c64a:	f3bf 8f4f 	dsb	sy
 800c64e:	61bb      	str	r3, [r7, #24]
}
 800c650:	bf00      	nop
 800c652:	e7fe      	b.n	800c652 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c654:	f002 f936 	bl	800e8c4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c65a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c65c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c65e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c660:	2b00      	cmp	r3, #0
 800c662:	d024      	beq.n	800c6ae <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c666:	1e5a      	subs	r2, r3, #1
 800c668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c66a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c66c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d104      	bne.n	800c67e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c674:	f001 fb8a 	bl	800dd8c <pvTaskIncrementMutexHeldCount>
 800c678:	4602      	mov	r2, r0
 800c67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c67c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c67e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c680:	691b      	ldr	r3, [r3, #16]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d00f      	beq.n	800c6a6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c688:	3310      	adds	r3, #16
 800c68a:	4618      	mov	r0, r3
 800c68c:	f001 f83a 	bl	800d704 <xTaskRemoveFromEventList>
 800c690:	4603      	mov	r3, r0
 800c692:	2b00      	cmp	r3, #0
 800c694:	d007      	beq.n	800c6a6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c696:	4b54      	ldr	r3, [pc, #336]	; (800c7e8 <xQueueSemaphoreTake+0x214>)
 800c698:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c69c:	601a      	str	r2, [r3, #0]
 800c69e:	f3bf 8f4f 	dsb	sy
 800c6a2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c6a6:	f002 f93d 	bl	800e924 <vPortExitCritical>
				return pdPASS;
 800c6aa:	2301      	movs	r3, #1
 800c6ac:	e097      	b.n	800c7de <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d111      	bne.n	800c6d8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c6b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d00a      	beq.n	800c6d0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c6ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6be:	f383 8811 	msr	BASEPRI, r3
 800c6c2:	f3bf 8f6f 	isb	sy
 800c6c6:	f3bf 8f4f 	dsb	sy
 800c6ca:	617b      	str	r3, [r7, #20]
}
 800c6cc:	bf00      	nop
 800c6ce:	e7fe      	b.n	800c6ce <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c6d0:	f002 f928 	bl	800e924 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	e082      	b.n	800c7de <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c6d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d106      	bne.n	800c6ec <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c6de:	f107 030c 	add.w	r3, r7, #12
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	f001 f872 	bl	800d7cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c6e8:	2301      	movs	r3, #1
 800c6ea:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c6ec:	f002 f91a 	bl	800e924 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c6f0:	f000 fde4 	bl	800d2bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c6f4:	f002 f8e6 	bl	800e8c4 <vPortEnterCritical>
 800c6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c6fe:	b25b      	sxtb	r3, r3
 800c700:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c704:	d103      	bne.n	800c70e <xQueueSemaphoreTake+0x13a>
 800c706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c708:	2200      	movs	r2, #0
 800c70a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c70e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c710:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c714:	b25b      	sxtb	r3, r3
 800c716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c71a:	d103      	bne.n	800c724 <xQueueSemaphoreTake+0x150>
 800c71c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c71e:	2200      	movs	r2, #0
 800c720:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c724:	f002 f8fe 	bl	800e924 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c728:	463a      	mov	r2, r7
 800c72a:	f107 030c 	add.w	r3, r7, #12
 800c72e:	4611      	mov	r1, r2
 800c730:	4618      	mov	r0, r3
 800c732:	f001 f861 	bl	800d7f8 <xTaskCheckForTimeOut>
 800c736:	4603      	mov	r3, r0
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d132      	bne.n	800c7a2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c73c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c73e:	f000 f9f2 	bl	800cb26 <prvIsQueueEmpty>
 800c742:	4603      	mov	r3, r0
 800c744:	2b00      	cmp	r3, #0
 800c746:	d026      	beq.n	800c796 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d109      	bne.n	800c764 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c750:	f002 f8b8 	bl	800e8c4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c756:	689b      	ldr	r3, [r3, #8]
 800c758:	4618      	mov	r0, r3
 800c75a:	f001 f9bf 	bl	800dadc <xTaskPriorityInherit>
 800c75e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c760:	f002 f8e0 	bl	800e924 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c766:	3324      	adds	r3, #36	; 0x24
 800c768:	683a      	ldr	r2, [r7, #0]
 800c76a:	4611      	mov	r1, r2
 800c76c:	4618      	mov	r0, r3
 800c76e:	f000 ff79 	bl	800d664 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c772:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c774:	f000 f985 	bl	800ca82 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c778:	f000 fdae 	bl	800d2d8 <xTaskResumeAll>
 800c77c:	4603      	mov	r3, r0
 800c77e:	2b00      	cmp	r3, #0
 800c780:	f47f af68 	bne.w	800c654 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c784:	4b18      	ldr	r3, [pc, #96]	; (800c7e8 <xQueueSemaphoreTake+0x214>)
 800c786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c78a:	601a      	str	r2, [r3, #0]
 800c78c:	f3bf 8f4f 	dsb	sy
 800c790:	f3bf 8f6f 	isb	sy
 800c794:	e75e      	b.n	800c654 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c796:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c798:	f000 f973 	bl	800ca82 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c79c:	f000 fd9c 	bl	800d2d8 <xTaskResumeAll>
 800c7a0:	e758      	b.n	800c654 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c7a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c7a4:	f000 f96d 	bl	800ca82 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c7a8:	f000 fd96 	bl	800d2d8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c7ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c7ae:	f000 f9ba 	bl	800cb26 <prvIsQueueEmpty>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	f43f af4d 	beq.w	800c654 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d00d      	beq.n	800c7dc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c7c0:	f002 f880 	bl	800e8c4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c7c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c7c6:	f000 f8b4 	bl	800c932 <prvGetDisinheritPriorityAfterTimeout>
 800c7ca:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ce:	689b      	ldr	r3, [r3, #8]
 800c7d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	f001 fa58 	bl	800dc88 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c7d8:	f002 f8a4 	bl	800e924 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c7dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c7de:	4618      	mov	r0, r3
 800c7e0:	3738      	adds	r7, #56	; 0x38
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bd80      	pop	{r7, pc}
 800c7e6:	bf00      	nop
 800c7e8:	e000ed04 	.word	0xe000ed04

0800c7ec <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b08e      	sub	sp, #56	; 0x38
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	60f8      	str	r0, [r7, #12]
 800c7f4:	60b9      	str	r1, [r7, #8]
 800c7f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c7fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d10a      	bne.n	800c818 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c802:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c806:	f383 8811 	msr	BASEPRI, r3
 800c80a:	f3bf 8f6f 	isb	sy
 800c80e:	f3bf 8f4f 	dsb	sy
 800c812:	623b      	str	r3, [r7, #32]
}
 800c814:	bf00      	nop
 800c816:	e7fe      	b.n	800c816 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d103      	bne.n	800c826 <xQueueReceiveFromISR+0x3a>
 800c81e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c822:	2b00      	cmp	r3, #0
 800c824:	d101      	bne.n	800c82a <xQueueReceiveFromISR+0x3e>
 800c826:	2301      	movs	r3, #1
 800c828:	e000      	b.n	800c82c <xQueueReceiveFromISR+0x40>
 800c82a:	2300      	movs	r3, #0
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d10a      	bne.n	800c846 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c830:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c834:	f383 8811 	msr	BASEPRI, r3
 800c838:	f3bf 8f6f 	isb	sy
 800c83c:	f3bf 8f4f 	dsb	sy
 800c840:	61fb      	str	r3, [r7, #28]
}
 800c842:	bf00      	nop
 800c844:	e7fe      	b.n	800c844 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c846:	f002 f91f 	bl	800ea88 <vPortValidateInterruptPriority>
	__asm volatile
 800c84a:	f3ef 8211 	mrs	r2, BASEPRI
 800c84e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c852:	f383 8811 	msr	BASEPRI, r3
 800c856:	f3bf 8f6f 	isb	sy
 800c85a:	f3bf 8f4f 	dsb	sy
 800c85e:	61ba      	str	r2, [r7, #24]
 800c860:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c862:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c864:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c86a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c86c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d02f      	beq.n	800c8d2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c874:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c878:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c87c:	68b9      	ldr	r1, [r7, #8]
 800c87e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c880:	f000 f8d9 	bl	800ca36 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c886:	1e5a      	subs	r2, r3, #1
 800c888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c88a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c88c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c890:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c894:	d112      	bne.n	800c8bc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c898:	691b      	ldr	r3, [r3, #16]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d016      	beq.n	800c8cc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c89e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8a0:	3310      	adds	r3, #16
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f000 ff2e 	bl	800d704 <xTaskRemoveFromEventList>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d00e      	beq.n	800c8cc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d00b      	beq.n	800c8cc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2201      	movs	r2, #1
 800c8b8:	601a      	str	r2, [r3, #0]
 800c8ba:	e007      	b.n	800c8cc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c8bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8c0:	3301      	adds	r3, #1
 800c8c2:	b2db      	uxtb	r3, r3
 800c8c4:	b25a      	sxtb	r2, r3
 800c8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c8cc:	2301      	movs	r3, #1
 800c8ce:	637b      	str	r3, [r7, #52]	; 0x34
 800c8d0:	e001      	b.n	800c8d6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	637b      	str	r3, [r7, #52]	; 0x34
 800c8d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8d8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c8da:	693b      	ldr	r3, [r7, #16]
 800c8dc:	f383 8811 	msr	BASEPRI, r3
}
 800c8e0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c8e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	3738      	adds	r7, #56	; 0x38
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bd80      	pop	{r7, pc}

0800c8ec <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b084      	sub	sp, #16
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d10a      	bne.n	800c914 <vQueueDelete+0x28>
	__asm volatile
 800c8fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c902:	f383 8811 	msr	BASEPRI, r3
 800c906:	f3bf 8f6f 	isb	sy
 800c90a:	f3bf 8f4f 	dsb	sy
 800c90e:	60bb      	str	r3, [r7, #8]
}
 800c910:	bf00      	nop
 800c912:	e7fe      	b.n	800c912 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c914:	68f8      	ldr	r0, [r7, #12]
 800c916:	f000 f95f 	bl	800cbd8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c920:	2b00      	cmp	r3, #0
 800c922:	d102      	bne.n	800c92a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800c924:	68f8      	ldr	r0, [r7, #12]
 800c926:	f002 f9bb 	bl	800eca0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c92a:	bf00      	nop
 800c92c:	3710      	adds	r7, #16
 800c92e:	46bd      	mov	sp, r7
 800c930:	bd80      	pop	{r7, pc}

0800c932 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c932:	b480      	push	{r7}
 800c934:	b085      	sub	sp, #20
 800c936:	af00      	add	r7, sp, #0
 800c938:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d006      	beq.n	800c950 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800c94c:	60fb      	str	r3, [r7, #12]
 800c94e:	e001      	b.n	800c954 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c950:	2300      	movs	r3, #0
 800c952:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c954:	68fb      	ldr	r3, [r7, #12]
	}
 800c956:	4618      	mov	r0, r3
 800c958:	3714      	adds	r7, #20
 800c95a:	46bd      	mov	sp, r7
 800c95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c960:	4770      	bx	lr

0800c962 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c962:	b580      	push	{r7, lr}
 800c964:	b086      	sub	sp, #24
 800c966:	af00      	add	r7, sp, #0
 800c968:	60f8      	str	r0, [r7, #12]
 800c96a:	60b9      	str	r1, [r7, #8]
 800c96c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c96e:	2300      	movs	r3, #0
 800c970:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c976:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d10d      	bne.n	800c99c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d14d      	bne.n	800ca24 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	689b      	ldr	r3, [r3, #8]
 800c98c:	4618      	mov	r0, r3
 800c98e:	f001 f90d 	bl	800dbac <xTaskPriorityDisinherit>
 800c992:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	2200      	movs	r2, #0
 800c998:	609a      	str	r2, [r3, #8]
 800c99a:	e043      	b.n	800ca24 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d119      	bne.n	800c9d6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	6858      	ldr	r0, [r3, #4]
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9aa:	461a      	mov	r2, r3
 800c9ac:	68b9      	ldr	r1, [r7, #8]
 800c9ae:	f002 fabf 	bl	800ef30 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	685a      	ldr	r2, [r3, #4]
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9ba:	441a      	add	r2, r3
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	685a      	ldr	r2, [r3, #4]
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	689b      	ldr	r3, [r3, #8]
 800c9c8:	429a      	cmp	r2, r3
 800c9ca:	d32b      	bcc.n	800ca24 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	681a      	ldr	r2, [r3, #0]
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	605a      	str	r2, [r3, #4]
 800c9d4:	e026      	b.n	800ca24 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	68d8      	ldr	r0, [r3, #12]
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9de:	461a      	mov	r2, r3
 800c9e0:	68b9      	ldr	r1, [r7, #8]
 800c9e2:	f002 faa5 	bl	800ef30 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	68da      	ldr	r2, [r3, #12]
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9ee:	425b      	negs	r3, r3
 800c9f0:	441a      	add	r2, r3
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	68da      	ldr	r2, [r3, #12]
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	429a      	cmp	r2, r3
 800ca00:	d207      	bcs.n	800ca12 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	689a      	ldr	r2, [r3, #8]
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca0a:	425b      	negs	r3, r3
 800ca0c:	441a      	add	r2, r3
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	2b02      	cmp	r3, #2
 800ca16:	d105      	bne.n	800ca24 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ca18:	693b      	ldr	r3, [r7, #16]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d002      	beq.n	800ca24 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ca1e:	693b      	ldr	r3, [r7, #16]
 800ca20:	3b01      	subs	r3, #1
 800ca22:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ca24:	693b      	ldr	r3, [r7, #16]
 800ca26:	1c5a      	adds	r2, r3, #1
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ca2c:	697b      	ldr	r3, [r7, #20]
}
 800ca2e:	4618      	mov	r0, r3
 800ca30:	3718      	adds	r7, #24
 800ca32:	46bd      	mov	sp, r7
 800ca34:	bd80      	pop	{r7, pc}

0800ca36 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ca36:	b580      	push	{r7, lr}
 800ca38:	b082      	sub	sp, #8
 800ca3a:	af00      	add	r7, sp, #0
 800ca3c:	6078      	str	r0, [r7, #4]
 800ca3e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d018      	beq.n	800ca7a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	68da      	ldr	r2, [r3, #12]
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca50:	441a      	add	r2, r3
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	68da      	ldr	r2, [r3, #12]
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	689b      	ldr	r3, [r3, #8]
 800ca5e:	429a      	cmp	r2, r3
 800ca60:	d303      	bcc.n	800ca6a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681a      	ldr	r2, [r3, #0]
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	68d9      	ldr	r1, [r3, #12]
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca72:	461a      	mov	r2, r3
 800ca74:	6838      	ldr	r0, [r7, #0]
 800ca76:	f002 fa5b 	bl	800ef30 <memcpy>
	}
}
 800ca7a:	bf00      	nop
 800ca7c:	3708      	adds	r7, #8
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	bd80      	pop	{r7, pc}

0800ca82 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ca82:	b580      	push	{r7, lr}
 800ca84:	b084      	sub	sp, #16
 800ca86:	af00      	add	r7, sp, #0
 800ca88:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ca8a:	f001 ff1b 	bl	800e8c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ca94:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ca96:	e011      	b.n	800cabc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d012      	beq.n	800cac6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	3324      	adds	r3, #36	; 0x24
 800caa4:	4618      	mov	r0, r3
 800caa6:	f000 fe2d 	bl	800d704 <xTaskRemoveFromEventList>
 800caaa:	4603      	mov	r3, r0
 800caac:	2b00      	cmp	r3, #0
 800caae:	d001      	beq.n	800cab4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cab0:	f000 ff04 	bl	800d8bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cab4:	7bfb      	ldrb	r3, [r7, #15]
 800cab6:	3b01      	subs	r3, #1
 800cab8:	b2db      	uxtb	r3, r3
 800caba:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cabc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	dce9      	bgt.n	800ca98 <prvUnlockQueue+0x16>
 800cac4:	e000      	b.n	800cac8 <prvUnlockQueue+0x46>
					break;
 800cac6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	22ff      	movs	r2, #255	; 0xff
 800cacc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800cad0:	f001 ff28 	bl	800e924 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cad4:	f001 fef6 	bl	800e8c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cade:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cae0:	e011      	b.n	800cb06 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	691b      	ldr	r3, [r3, #16]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d012      	beq.n	800cb10 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	3310      	adds	r3, #16
 800caee:	4618      	mov	r0, r3
 800caf0:	f000 fe08 	bl	800d704 <xTaskRemoveFromEventList>
 800caf4:	4603      	mov	r3, r0
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d001      	beq.n	800cafe <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cafa:	f000 fedf 	bl	800d8bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cafe:	7bbb      	ldrb	r3, [r7, #14]
 800cb00:	3b01      	subs	r3, #1
 800cb02:	b2db      	uxtb	r3, r3
 800cb04:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cb06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	dce9      	bgt.n	800cae2 <prvUnlockQueue+0x60>
 800cb0e:	e000      	b.n	800cb12 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cb10:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	22ff      	movs	r2, #255	; 0xff
 800cb16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800cb1a:	f001 ff03 	bl	800e924 <vPortExitCritical>
}
 800cb1e:	bf00      	nop
 800cb20:	3710      	adds	r7, #16
 800cb22:	46bd      	mov	sp, r7
 800cb24:	bd80      	pop	{r7, pc}

0800cb26 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cb26:	b580      	push	{r7, lr}
 800cb28:	b084      	sub	sp, #16
 800cb2a:	af00      	add	r7, sp, #0
 800cb2c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cb2e:	f001 fec9 	bl	800e8c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d102      	bne.n	800cb40 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cb3a:	2301      	movs	r3, #1
 800cb3c:	60fb      	str	r3, [r7, #12]
 800cb3e:	e001      	b.n	800cb44 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cb40:	2300      	movs	r3, #0
 800cb42:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cb44:	f001 feee 	bl	800e924 <vPortExitCritical>

	return xReturn;
 800cb48:	68fb      	ldr	r3, [r7, #12]
}
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	3710      	adds	r7, #16
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bd80      	pop	{r7, pc}

0800cb52 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cb52:	b580      	push	{r7, lr}
 800cb54:	b084      	sub	sp, #16
 800cb56:	af00      	add	r7, sp, #0
 800cb58:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cb5a:	f001 feb3 	bl	800e8c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb66:	429a      	cmp	r2, r3
 800cb68:	d102      	bne.n	800cb70 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cb6a:	2301      	movs	r3, #1
 800cb6c:	60fb      	str	r3, [r7, #12]
 800cb6e:	e001      	b.n	800cb74 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cb70:	2300      	movs	r3, #0
 800cb72:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cb74:	f001 fed6 	bl	800e924 <vPortExitCritical>

	return xReturn;
 800cb78:	68fb      	ldr	r3, [r7, #12]
}
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	3710      	adds	r7, #16
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	bd80      	pop	{r7, pc}
	...

0800cb84 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800cb84:	b480      	push	{r7}
 800cb86:	b085      	sub	sp, #20
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
 800cb8c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cb8e:	2300      	movs	r3, #0
 800cb90:	60fb      	str	r3, [r7, #12]
 800cb92:	e014      	b.n	800cbbe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cb94:	4a0f      	ldr	r2, [pc, #60]	; (800cbd4 <vQueueAddToRegistry+0x50>)
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d10b      	bne.n	800cbb8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cba0:	490c      	ldr	r1, [pc, #48]	; (800cbd4 <vQueueAddToRegistry+0x50>)
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	683a      	ldr	r2, [r7, #0]
 800cba6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cbaa:	4a0a      	ldr	r2, [pc, #40]	; (800cbd4 <vQueueAddToRegistry+0x50>)
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	00db      	lsls	r3, r3, #3
 800cbb0:	4413      	add	r3, r2
 800cbb2:	687a      	ldr	r2, [r7, #4]
 800cbb4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cbb6:	e006      	b.n	800cbc6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	3301      	adds	r3, #1
 800cbbc:	60fb      	str	r3, [r7, #12]
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	2b07      	cmp	r3, #7
 800cbc2:	d9e7      	bls.n	800cb94 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cbc4:	bf00      	nop
 800cbc6:	bf00      	nop
 800cbc8:	3714      	adds	r7, #20
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd0:	4770      	bx	lr
 800cbd2:	bf00      	nop
 800cbd4:	20000eb8 	.word	0x20000eb8

0800cbd8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800cbd8:	b480      	push	{r7}
 800cbda:	b085      	sub	sp, #20
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	60fb      	str	r3, [r7, #12]
 800cbe4:	e016      	b.n	800cc14 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800cbe6:	4a10      	ldr	r2, [pc, #64]	; (800cc28 <vQueueUnregisterQueue+0x50>)
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	00db      	lsls	r3, r3, #3
 800cbec:	4413      	add	r3, r2
 800cbee:	685b      	ldr	r3, [r3, #4]
 800cbf0:	687a      	ldr	r2, [r7, #4]
 800cbf2:	429a      	cmp	r2, r3
 800cbf4:	d10b      	bne.n	800cc0e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800cbf6:	4a0c      	ldr	r2, [pc, #48]	; (800cc28 <vQueueUnregisterQueue+0x50>)
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	2100      	movs	r1, #0
 800cbfc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800cc00:	4a09      	ldr	r2, [pc, #36]	; (800cc28 <vQueueUnregisterQueue+0x50>)
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	00db      	lsls	r3, r3, #3
 800cc06:	4413      	add	r3, r2
 800cc08:	2200      	movs	r2, #0
 800cc0a:	605a      	str	r2, [r3, #4]
				break;
 800cc0c:	e006      	b.n	800cc1c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	3301      	adds	r3, #1
 800cc12:	60fb      	str	r3, [r7, #12]
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	2b07      	cmp	r3, #7
 800cc18:	d9e5      	bls.n	800cbe6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800cc1a:	bf00      	nop
 800cc1c:	bf00      	nop
 800cc1e:	3714      	adds	r7, #20
 800cc20:	46bd      	mov	sp, r7
 800cc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc26:	4770      	bx	lr
 800cc28:	20000eb8 	.word	0x20000eb8

0800cc2c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b086      	sub	sp, #24
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	60f8      	str	r0, [r7, #12]
 800cc34:	60b9      	str	r1, [r7, #8]
 800cc36:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800cc3c:	f001 fe42 	bl	800e8c4 <vPortEnterCritical>
 800cc40:	697b      	ldr	r3, [r7, #20]
 800cc42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cc46:	b25b      	sxtb	r3, r3
 800cc48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc4c:	d103      	bne.n	800cc56 <vQueueWaitForMessageRestricted+0x2a>
 800cc4e:	697b      	ldr	r3, [r7, #20]
 800cc50:	2200      	movs	r2, #0
 800cc52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cc56:	697b      	ldr	r3, [r7, #20]
 800cc58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cc5c:	b25b      	sxtb	r3, r3
 800cc5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc62:	d103      	bne.n	800cc6c <vQueueWaitForMessageRestricted+0x40>
 800cc64:	697b      	ldr	r3, [r7, #20]
 800cc66:	2200      	movs	r2, #0
 800cc68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cc6c:	f001 fe5a 	bl	800e924 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800cc70:	697b      	ldr	r3, [r7, #20]
 800cc72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d106      	bne.n	800cc86 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800cc78:	697b      	ldr	r3, [r7, #20]
 800cc7a:	3324      	adds	r3, #36	; 0x24
 800cc7c:	687a      	ldr	r2, [r7, #4]
 800cc7e:	68b9      	ldr	r1, [r7, #8]
 800cc80:	4618      	mov	r0, r3
 800cc82:	f000 fd13 	bl	800d6ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800cc86:	6978      	ldr	r0, [r7, #20]
 800cc88:	f7ff fefb 	bl	800ca82 <prvUnlockQueue>
	}
 800cc8c:	bf00      	nop
 800cc8e:	3718      	adds	r7, #24
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd80      	pop	{r7, pc}

0800cc94 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b08e      	sub	sp, #56	; 0x38
 800cc98:	af04      	add	r7, sp, #16
 800cc9a:	60f8      	str	r0, [r7, #12]
 800cc9c:	60b9      	str	r1, [r7, #8]
 800cc9e:	607a      	str	r2, [r7, #4]
 800cca0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d10a      	bne.n	800ccbe <xTaskCreateStatic+0x2a>
	__asm volatile
 800cca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccac:	f383 8811 	msr	BASEPRI, r3
 800ccb0:	f3bf 8f6f 	isb	sy
 800ccb4:	f3bf 8f4f 	dsb	sy
 800ccb8:	623b      	str	r3, [r7, #32]
}
 800ccba:	bf00      	nop
 800ccbc:	e7fe      	b.n	800ccbc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ccbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d10a      	bne.n	800ccda <xTaskCreateStatic+0x46>
	__asm volatile
 800ccc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccc8:	f383 8811 	msr	BASEPRI, r3
 800cccc:	f3bf 8f6f 	isb	sy
 800ccd0:	f3bf 8f4f 	dsb	sy
 800ccd4:	61fb      	str	r3, [r7, #28]
}
 800ccd6:	bf00      	nop
 800ccd8:	e7fe      	b.n	800ccd8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ccda:	235c      	movs	r3, #92	; 0x5c
 800ccdc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ccde:	693b      	ldr	r3, [r7, #16]
 800cce0:	2b5c      	cmp	r3, #92	; 0x5c
 800cce2:	d00a      	beq.n	800ccfa <xTaskCreateStatic+0x66>
	__asm volatile
 800cce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cce8:	f383 8811 	msr	BASEPRI, r3
 800ccec:	f3bf 8f6f 	isb	sy
 800ccf0:	f3bf 8f4f 	dsb	sy
 800ccf4:	61bb      	str	r3, [r7, #24]
}
 800ccf6:	bf00      	nop
 800ccf8:	e7fe      	b.n	800ccf8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ccfa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ccfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d01e      	beq.n	800cd40 <xTaskCreateStatic+0xac>
 800cd02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d01b      	beq.n	800cd40 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cd08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd0a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cd0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cd10:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cd12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd14:	2202      	movs	r2, #2
 800cd16:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	9303      	str	r3, [sp, #12]
 800cd1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd20:	9302      	str	r3, [sp, #8]
 800cd22:	f107 0314 	add.w	r3, r7, #20
 800cd26:	9301      	str	r3, [sp, #4]
 800cd28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd2a:	9300      	str	r3, [sp, #0]
 800cd2c:	683b      	ldr	r3, [r7, #0]
 800cd2e:	687a      	ldr	r2, [r7, #4]
 800cd30:	68b9      	ldr	r1, [r7, #8]
 800cd32:	68f8      	ldr	r0, [r7, #12]
 800cd34:	f000 f850 	bl	800cdd8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cd38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cd3a:	f000 f8dd 	bl	800cef8 <prvAddNewTaskToReadyList>
 800cd3e:	e001      	b.n	800cd44 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800cd40:	2300      	movs	r3, #0
 800cd42:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cd44:	697b      	ldr	r3, [r7, #20]
	}
 800cd46:	4618      	mov	r0, r3
 800cd48:	3728      	adds	r7, #40	; 0x28
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	bd80      	pop	{r7, pc}

0800cd4e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cd4e:	b580      	push	{r7, lr}
 800cd50:	b08c      	sub	sp, #48	; 0x30
 800cd52:	af04      	add	r7, sp, #16
 800cd54:	60f8      	str	r0, [r7, #12]
 800cd56:	60b9      	str	r1, [r7, #8]
 800cd58:	603b      	str	r3, [r7, #0]
 800cd5a:	4613      	mov	r3, r2
 800cd5c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cd5e:	88fb      	ldrh	r3, [r7, #6]
 800cd60:	009b      	lsls	r3, r3, #2
 800cd62:	4618      	mov	r0, r3
 800cd64:	f001 fed0 	bl	800eb08 <pvPortMalloc>
 800cd68:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cd6a:	697b      	ldr	r3, [r7, #20]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d00e      	beq.n	800cd8e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cd70:	205c      	movs	r0, #92	; 0x5c
 800cd72:	f001 fec9 	bl	800eb08 <pvPortMalloc>
 800cd76:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cd78:	69fb      	ldr	r3, [r7, #28]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d003      	beq.n	800cd86 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cd7e:	69fb      	ldr	r3, [r7, #28]
 800cd80:	697a      	ldr	r2, [r7, #20]
 800cd82:	631a      	str	r2, [r3, #48]	; 0x30
 800cd84:	e005      	b.n	800cd92 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cd86:	6978      	ldr	r0, [r7, #20]
 800cd88:	f001 ff8a 	bl	800eca0 <vPortFree>
 800cd8c:	e001      	b.n	800cd92 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cd8e:	2300      	movs	r3, #0
 800cd90:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cd92:	69fb      	ldr	r3, [r7, #28]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d017      	beq.n	800cdc8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cd98:	69fb      	ldr	r3, [r7, #28]
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cda0:	88fa      	ldrh	r2, [r7, #6]
 800cda2:	2300      	movs	r3, #0
 800cda4:	9303      	str	r3, [sp, #12]
 800cda6:	69fb      	ldr	r3, [r7, #28]
 800cda8:	9302      	str	r3, [sp, #8]
 800cdaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdac:	9301      	str	r3, [sp, #4]
 800cdae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdb0:	9300      	str	r3, [sp, #0]
 800cdb2:	683b      	ldr	r3, [r7, #0]
 800cdb4:	68b9      	ldr	r1, [r7, #8]
 800cdb6:	68f8      	ldr	r0, [r7, #12]
 800cdb8:	f000 f80e 	bl	800cdd8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cdbc:	69f8      	ldr	r0, [r7, #28]
 800cdbe:	f000 f89b 	bl	800cef8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cdc2:	2301      	movs	r3, #1
 800cdc4:	61bb      	str	r3, [r7, #24]
 800cdc6:	e002      	b.n	800cdce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cdc8:	f04f 33ff 	mov.w	r3, #4294967295
 800cdcc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cdce:	69bb      	ldr	r3, [r7, #24]
	}
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	3720      	adds	r7, #32
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	bd80      	pop	{r7, pc}

0800cdd8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b088      	sub	sp, #32
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	60f8      	str	r0, [r7, #12]
 800cde0:	60b9      	str	r1, [r7, #8]
 800cde2:	607a      	str	r2, [r7, #4]
 800cde4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cde6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cde8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	009b      	lsls	r3, r3, #2
 800cdee:	461a      	mov	r2, r3
 800cdf0:	21a5      	movs	r1, #165	; 0xa5
 800cdf2:	f002 f8ab 	bl	800ef4c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cdf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ce00:	3b01      	subs	r3, #1
 800ce02:	009b      	lsls	r3, r3, #2
 800ce04:	4413      	add	r3, r2
 800ce06:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ce08:	69bb      	ldr	r3, [r7, #24]
 800ce0a:	f023 0307 	bic.w	r3, r3, #7
 800ce0e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ce10:	69bb      	ldr	r3, [r7, #24]
 800ce12:	f003 0307 	and.w	r3, r3, #7
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d00a      	beq.n	800ce30 <prvInitialiseNewTask+0x58>
	__asm volatile
 800ce1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce1e:	f383 8811 	msr	BASEPRI, r3
 800ce22:	f3bf 8f6f 	isb	sy
 800ce26:	f3bf 8f4f 	dsb	sy
 800ce2a:	617b      	str	r3, [r7, #20]
}
 800ce2c:	bf00      	nop
 800ce2e:	e7fe      	b.n	800ce2e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ce30:	68bb      	ldr	r3, [r7, #8]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d01f      	beq.n	800ce76 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ce36:	2300      	movs	r3, #0
 800ce38:	61fb      	str	r3, [r7, #28]
 800ce3a:	e012      	b.n	800ce62 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ce3c:	68ba      	ldr	r2, [r7, #8]
 800ce3e:	69fb      	ldr	r3, [r7, #28]
 800ce40:	4413      	add	r3, r2
 800ce42:	7819      	ldrb	r1, [r3, #0]
 800ce44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce46:	69fb      	ldr	r3, [r7, #28]
 800ce48:	4413      	add	r3, r2
 800ce4a:	3334      	adds	r3, #52	; 0x34
 800ce4c:	460a      	mov	r2, r1
 800ce4e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ce50:	68ba      	ldr	r2, [r7, #8]
 800ce52:	69fb      	ldr	r3, [r7, #28]
 800ce54:	4413      	add	r3, r2
 800ce56:	781b      	ldrb	r3, [r3, #0]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d006      	beq.n	800ce6a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ce5c:	69fb      	ldr	r3, [r7, #28]
 800ce5e:	3301      	adds	r3, #1
 800ce60:	61fb      	str	r3, [r7, #28]
 800ce62:	69fb      	ldr	r3, [r7, #28]
 800ce64:	2b0f      	cmp	r3, #15
 800ce66:	d9e9      	bls.n	800ce3c <prvInitialiseNewTask+0x64>
 800ce68:	e000      	b.n	800ce6c <prvInitialiseNewTask+0x94>
			{
				break;
 800ce6a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ce6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce6e:	2200      	movs	r2, #0
 800ce70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ce74:	e003      	b.n	800ce7e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ce76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce78:	2200      	movs	r2, #0
 800ce7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ce7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce80:	2b37      	cmp	r3, #55	; 0x37
 800ce82:	d901      	bls.n	800ce88 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ce84:	2337      	movs	r3, #55	; 0x37
 800ce86:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ce88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce8c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ce8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce92:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ce94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce96:	2200      	movs	r2, #0
 800ce98:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ce9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce9c:	3304      	adds	r3, #4
 800ce9e:	4618      	mov	r0, r3
 800cea0:	f7fe fda0 	bl	800b9e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cea6:	3318      	adds	r3, #24
 800cea8:	4618      	mov	r0, r3
 800ceaa:	f7fe fd9b 	bl	800b9e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ceae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ceb2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ceb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceb6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ceba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cebc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cec0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cec2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cec6:	2200      	movs	r2, #0
 800cec8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ceca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cecc:	2200      	movs	r2, #0
 800cece:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ced2:	683a      	ldr	r2, [r7, #0]
 800ced4:	68f9      	ldr	r1, [r7, #12]
 800ced6:	69b8      	ldr	r0, [r7, #24]
 800ced8:	f001 fbc8 	bl	800e66c <pxPortInitialiseStack>
 800cedc:	4602      	mov	r2, r0
 800cede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cee0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d002      	beq.n	800ceee <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ceec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ceee:	bf00      	nop
 800cef0:	3720      	adds	r7, #32
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}
	...

0800cef8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b082      	sub	sp, #8
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cf00:	f001 fce0 	bl	800e8c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cf04:	4b2d      	ldr	r3, [pc, #180]	; (800cfbc <prvAddNewTaskToReadyList+0xc4>)
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	3301      	adds	r3, #1
 800cf0a:	4a2c      	ldr	r2, [pc, #176]	; (800cfbc <prvAddNewTaskToReadyList+0xc4>)
 800cf0c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cf0e:	4b2c      	ldr	r3, [pc, #176]	; (800cfc0 <prvAddNewTaskToReadyList+0xc8>)
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d109      	bne.n	800cf2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cf16:	4a2a      	ldr	r2, [pc, #168]	; (800cfc0 <prvAddNewTaskToReadyList+0xc8>)
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cf1c:	4b27      	ldr	r3, [pc, #156]	; (800cfbc <prvAddNewTaskToReadyList+0xc4>)
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	2b01      	cmp	r3, #1
 800cf22:	d110      	bne.n	800cf46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cf24:	f000 fcee 	bl	800d904 <prvInitialiseTaskLists>
 800cf28:	e00d      	b.n	800cf46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cf2a:	4b26      	ldr	r3, [pc, #152]	; (800cfc4 <prvAddNewTaskToReadyList+0xcc>)
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d109      	bne.n	800cf46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cf32:	4b23      	ldr	r3, [pc, #140]	; (800cfc0 <prvAddNewTaskToReadyList+0xc8>)
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf3c:	429a      	cmp	r2, r3
 800cf3e:	d802      	bhi.n	800cf46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cf40:	4a1f      	ldr	r2, [pc, #124]	; (800cfc0 <prvAddNewTaskToReadyList+0xc8>)
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cf46:	4b20      	ldr	r3, [pc, #128]	; (800cfc8 <prvAddNewTaskToReadyList+0xd0>)
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	3301      	adds	r3, #1
 800cf4c:	4a1e      	ldr	r2, [pc, #120]	; (800cfc8 <prvAddNewTaskToReadyList+0xd0>)
 800cf4e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cf50:	4b1d      	ldr	r3, [pc, #116]	; (800cfc8 <prvAddNewTaskToReadyList+0xd0>)
 800cf52:	681a      	ldr	r2, [r3, #0]
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf5c:	4b1b      	ldr	r3, [pc, #108]	; (800cfcc <prvAddNewTaskToReadyList+0xd4>)
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	429a      	cmp	r2, r3
 800cf62:	d903      	bls.n	800cf6c <prvAddNewTaskToReadyList+0x74>
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf68:	4a18      	ldr	r2, [pc, #96]	; (800cfcc <prvAddNewTaskToReadyList+0xd4>)
 800cf6a:	6013      	str	r3, [r2, #0]
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf70:	4613      	mov	r3, r2
 800cf72:	009b      	lsls	r3, r3, #2
 800cf74:	4413      	add	r3, r2
 800cf76:	009b      	lsls	r3, r3, #2
 800cf78:	4a15      	ldr	r2, [pc, #84]	; (800cfd0 <prvAddNewTaskToReadyList+0xd8>)
 800cf7a:	441a      	add	r2, r3
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	3304      	adds	r3, #4
 800cf80:	4619      	mov	r1, r3
 800cf82:	4610      	mov	r0, r2
 800cf84:	f7fe fd3b 	bl	800b9fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cf88:	f001 fccc 	bl	800e924 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cf8c:	4b0d      	ldr	r3, [pc, #52]	; (800cfc4 <prvAddNewTaskToReadyList+0xcc>)
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d00e      	beq.n	800cfb2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cf94:	4b0a      	ldr	r3, [pc, #40]	; (800cfc0 <prvAddNewTaskToReadyList+0xc8>)
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf9e:	429a      	cmp	r2, r3
 800cfa0:	d207      	bcs.n	800cfb2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cfa2:	4b0c      	ldr	r3, [pc, #48]	; (800cfd4 <prvAddNewTaskToReadyList+0xdc>)
 800cfa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfa8:	601a      	str	r2, [r3, #0]
 800cfaa:	f3bf 8f4f 	dsb	sy
 800cfae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cfb2:	bf00      	nop
 800cfb4:	3708      	adds	r7, #8
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	bd80      	pop	{r7, pc}
 800cfba:	bf00      	nop
 800cfbc:	200013cc 	.word	0x200013cc
 800cfc0:	20000ef8 	.word	0x20000ef8
 800cfc4:	200013d8 	.word	0x200013d8
 800cfc8:	200013e8 	.word	0x200013e8
 800cfcc:	200013d4 	.word	0x200013d4
 800cfd0:	20000efc 	.word	0x20000efc
 800cfd4:	e000ed04 	.word	0xe000ed04

0800cfd8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b084      	sub	sp, #16
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800cfe0:	f001 fc70 	bl	800e8c4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d102      	bne.n	800cff0 <vTaskDelete+0x18>
 800cfea:	4b2c      	ldr	r3, [pc, #176]	; (800d09c <vTaskDelete+0xc4>)
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	e000      	b.n	800cff2 <vTaskDelete+0x1a>
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	3304      	adds	r3, #4
 800cff8:	4618      	mov	r0, r3
 800cffa:	f7fe fd5d 	bl	800bab8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d002:	2b00      	cmp	r3, #0
 800d004:	d004      	beq.n	800d010 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	3318      	adds	r3, #24
 800d00a:	4618      	mov	r0, r3
 800d00c:	f7fe fd54 	bl	800bab8 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800d010:	4b23      	ldr	r3, [pc, #140]	; (800d0a0 <vTaskDelete+0xc8>)
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	3301      	adds	r3, #1
 800d016:	4a22      	ldr	r2, [pc, #136]	; (800d0a0 <vTaskDelete+0xc8>)
 800d018:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800d01a:	4b20      	ldr	r3, [pc, #128]	; (800d09c <vTaskDelete+0xc4>)
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	68fa      	ldr	r2, [r7, #12]
 800d020:	429a      	cmp	r2, r3
 800d022:	d10b      	bne.n	800d03c <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	3304      	adds	r3, #4
 800d028:	4619      	mov	r1, r3
 800d02a:	481e      	ldr	r0, [pc, #120]	; (800d0a4 <vTaskDelete+0xcc>)
 800d02c:	f7fe fce7 	bl	800b9fe <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800d030:	4b1d      	ldr	r3, [pc, #116]	; (800d0a8 <vTaskDelete+0xd0>)
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	3301      	adds	r3, #1
 800d036:	4a1c      	ldr	r2, [pc, #112]	; (800d0a8 <vTaskDelete+0xd0>)
 800d038:	6013      	str	r3, [r2, #0]
 800d03a:	e009      	b.n	800d050 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800d03c:	4b1b      	ldr	r3, [pc, #108]	; (800d0ac <vTaskDelete+0xd4>)
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	3b01      	subs	r3, #1
 800d042:	4a1a      	ldr	r2, [pc, #104]	; (800d0ac <vTaskDelete+0xd4>)
 800d044:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800d046:	68f8      	ldr	r0, [r7, #12]
 800d048:	f000 fcca 	bl	800d9e0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800d04c:	f000 fcf8 	bl	800da40 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800d050:	f001 fc68 	bl	800e924 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800d054:	4b16      	ldr	r3, [pc, #88]	; (800d0b0 <vTaskDelete+0xd8>)
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d01b      	beq.n	800d094 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 800d05c:	4b0f      	ldr	r3, [pc, #60]	; (800d09c <vTaskDelete+0xc4>)
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	68fa      	ldr	r2, [r7, #12]
 800d062:	429a      	cmp	r2, r3
 800d064:	d116      	bne.n	800d094 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800d066:	4b13      	ldr	r3, [pc, #76]	; (800d0b4 <vTaskDelete+0xdc>)
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d00a      	beq.n	800d084 <vTaskDelete+0xac>
	__asm volatile
 800d06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d072:	f383 8811 	msr	BASEPRI, r3
 800d076:	f3bf 8f6f 	isb	sy
 800d07a:	f3bf 8f4f 	dsb	sy
 800d07e:	60bb      	str	r3, [r7, #8]
}
 800d080:	bf00      	nop
 800d082:	e7fe      	b.n	800d082 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800d084:	4b0c      	ldr	r3, [pc, #48]	; (800d0b8 <vTaskDelete+0xe0>)
 800d086:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d08a:	601a      	str	r2, [r3, #0]
 800d08c:	f3bf 8f4f 	dsb	sy
 800d090:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d094:	bf00      	nop
 800d096:	3710      	adds	r7, #16
 800d098:	46bd      	mov	sp, r7
 800d09a:	bd80      	pop	{r7, pc}
 800d09c:	20000ef8 	.word	0x20000ef8
 800d0a0:	200013e8 	.word	0x200013e8
 800d0a4:	200013a0 	.word	0x200013a0
 800d0a8:	200013b4 	.word	0x200013b4
 800d0ac:	200013cc 	.word	0x200013cc
 800d0b0:	200013d8 	.word	0x200013d8
 800d0b4:	200013f4 	.word	0x200013f4
 800d0b8:	e000ed04 	.word	0xe000ed04

0800d0bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b084      	sub	sp, #16
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d017      	beq.n	800d0fe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d0ce:	4b13      	ldr	r3, [pc, #76]	; (800d11c <vTaskDelay+0x60>)
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d00a      	beq.n	800d0ec <vTaskDelay+0x30>
	__asm volatile
 800d0d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0da:	f383 8811 	msr	BASEPRI, r3
 800d0de:	f3bf 8f6f 	isb	sy
 800d0e2:	f3bf 8f4f 	dsb	sy
 800d0e6:	60bb      	str	r3, [r7, #8]
}
 800d0e8:	bf00      	nop
 800d0ea:	e7fe      	b.n	800d0ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d0ec:	f000 f8e6 	bl	800d2bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d0f0:	2100      	movs	r1, #0
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f000 fe5e 	bl	800ddb4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d0f8:	f000 f8ee 	bl	800d2d8 <xTaskResumeAll>
 800d0fc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d107      	bne.n	800d114 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d104:	4b06      	ldr	r3, [pc, #24]	; (800d120 <vTaskDelay+0x64>)
 800d106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d10a:	601a      	str	r2, [r3, #0]
 800d10c:	f3bf 8f4f 	dsb	sy
 800d110:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d114:	bf00      	nop
 800d116:	3710      	adds	r7, #16
 800d118:	46bd      	mov	sp, r7
 800d11a:	bd80      	pop	{r7, pc}
 800d11c:	200013f4 	.word	0x200013f4
 800d120:	e000ed04 	.word	0xe000ed04

0800d124 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800d124:	b580      	push	{r7, lr}
 800d126:	b088      	sub	sp, #32
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800d130:	69bb      	ldr	r3, [r7, #24]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d10a      	bne.n	800d14c <eTaskGetState+0x28>
	__asm volatile
 800d136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d13a:	f383 8811 	msr	BASEPRI, r3
 800d13e:	f3bf 8f6f 	isb	sy
 800d142:	f3bf 8f4f 	dsb	sy
 800d146:	60bb      	str	r3, [r7, #8]
}
 800d148:	bf00      	nop
 800d14a:	e7fe      	b.n	800d14a <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800d14c:	4b23      	ldr	r3, [pc, #140]	; (800d1dc <eTaskGetState+0xb8>)
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	69ba      	ldr	r2, [r7, #24]
 800d152:	429a      	cmp	r2, r3
 800d154:	d102      	bne.n	800d15c <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800d156:	2300      	movs	r3, #0
 800d158:	77fb      	strb	r3, [r7, #31]
 800d15a:	e03a      	b.n	800d1d2 <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 800d15c:	f001 fbb2 	bl	800e8c4 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800d160:	69bb      	ldr	r3, [r7, #24]
 800d162:	695b      	ldr	r3, [r3, #20]
 800d164:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800d166:	4b1e      	ldr	r3, [pc, #120]	; (800d1e0 <eTaskGetState+0xbc>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800d16c:	4b1d      	ldr	r3, [pc, #116]	; (800d1e4 <eTaskGetState+0xc0>)
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800d172:	f001 fbd7 	bl	800e924 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800d176:	697a      	ldr	r2, [r7, #20]
 800d178:	693b      	ldr	r3, [r7, #16]
 800d17a:	429a      	cmp	r2, r3
 800d17c:	d003      	beq.n	800d186 <eTaskGetState+0x62>
 800d17e:	697a      	ldr	r2, [r7, #20]
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	429a      	cmp	r2, r3
 800d184:	d102      	bne.n	800d18c <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800d186:	2302      	movs	r3, #2
 800d188:	77fb      	strb	r3, [r7, #31]
 800d18a:	e022      	b.n	800d1d2 <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800d18c:	697b      	ldr	r3, [r7, #20]
 800d18e:	4a16      	ldr	r2, [pc, #88]	; (800d1e8 <eTaskGetState+0xc4>)
 800d190:	4293      	cmp	r3, r2
 800d192:	d112      	bne.n	800d1ba <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800d194:	69bb      	ldr	r3, [r7, #24]
 800d196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d10b      	bne.n	800d1b4 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800d19c:	69bb      	ldr	r3, [r7, #24]
 800d19e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800d1a2:	b2db      	uxtb	r3, r3
 800d1a4:	2b01      	cmp	r3, #1
 800d1a6:	d102      	bne.n	800d1ae <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 800d1a8:	2302      	movs	r3, #2
 800d1aa:	77fb      	strb	r3, [r7, #31]
 800d1ac:	e011      	b.n	800d1d2 <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 800d1ae:	2303      	movs	r3, #3
 800d1b0:	77fb      	strb	r3, [r7, #31]
 800d1b2:	e00e      	b.n	800d1d2 <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800d1b4:	2302      	movs	r3, #2
 800d1b6:	77fb      	strb	r3, [r7, #31]
 800d1b8:	e00b      	b.n	800d1d2 <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800d1ba:	697b      	ldr	r3, [r7, #20]
 800d1bc:	4a0b      	ldr	r2, [pc, #44]	; (800d1ec <eTaskGetState+0xc8>)
 800d1be:	4293      	cmp	r3, r2
 800d1c0:	d002      	beq.n	800d1c8 <eTaskGetState+0xa4>
 800d1c2:	697b      	ldr	r3, [r7, #20]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d102      	bne.n	800d1ce <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800d1c8:	2304      	movs	r3, #4
 800d1ca:	77fb      	strb	r3, [r7, #31]
 800d1cc:	e001      	b.n	800d1d2 <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800d1ce:	2301      	movs	r3, #1
 800d1d0:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800d1d2:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	3720      	adds	r7, #32
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	bd80      	pop	{r7, pc}
 800d1dc:	20000ef8 	.word	0x20000ef8
 800d1e0:	20001384 	.word	0x20001384
 800d1e4:	20001388 	.word	0x20001388
 800d1e8:	200013b8 	.word	0x200013b8
 800d1ec:	200013a0 	.word	0x200013a0

0800d1f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b08a      	sub	sp, #40	; 0x28
 800d1f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d1fe:	463a      	mov	r2, r7
 800d200:	1d39      	adds	r1, r7, #4
 800d202:	f107 0308 	add.w	r3, r7, #8
 800d206:	4618      	mov	r0, r3
 800d208:	f7fe fb98 	bl	800b93c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d20c:	6839      	ldr	r1, [r7, #0]
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	68ba      	ldr	r2, [r7, #8]
 800d212:	9202      	str	r2, [sp, #8]
 800d214:	9301      	str	r3, [sp, #4]
 800d216:	2300      	movs	r3, #0
 800d218:	9300      	str	r3, [sp, #0]
 800d21a:	2300      	movs	r3, #0
 800d21c:	460a      	mov	r2, r1
 800d21e:	4921      	ldr	r1, [pc, #132]	; (800d2a4 <vTaskStartScheduler+0xb4>)
 800d220:	4821      	ldr	r0, [pc, #132]	; (800d2a8 <vTaskStartScheduler+0xb8>)
 800d222:	f7ff fd37 	bl	800cc94 <xTaskCreateStatic>
 800d226:	4603      	mov	r3, r0
 800d228:	4a20      	ldr	r2, [pc, #128]	; (800d2ac <vTaskStartScheduler+0xbc>)
 800d22a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d22c:	4b1f      	ldr	r3, [pc, #124]	; (800d2ac <vTaskStartScheduler+0xbc>)
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d002      	beq.n	800d23a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d234:	2301      	movs	r3, #1
 800d236:	617b      	str	r3, [r7, #20]
 800d238:	e001      	b.n	800d23e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d23a:	2300      	movs	r3, #0
 800d23c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d23e:	697b      	ldr	r3, [r7, #20]
 800d240:	2b01      	cmp	r3, #1
 800d242:	d102      	bne.n	800d24a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d244:	f000 fe0a 	bl	800de5c <xTimerCreateTimerTask>
 800d248:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d24a:	697b      	ldr	r3, [r7, #20]
 800d24c:	2b01      	cmp	r3, #1
 800d24e:	d116      	bne.n	800d27e <vTaskStartScheduler+0x8e>
	__asm volatile
 800d250:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d254:	f383 8811 	msr	BASEPRI, r3
 800d258:	f3bf 8f6f 	isb	sy
 800d25c:	f3bf 8f4f 	dsb	sy
 800d260:	613b      	str	r3, [r7, #16]
}
 800d262:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d264:	4b12      	ldr	r3, [pc, #72]	; (800d2b0 <vTaskStartScheduler+0xc0>)
 800d266:	f04f 32ff 	mov.w	r2, #4294967295
 800d26a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d26c:	4b11      	ldr	r3, [pc, #68]	; (800d2b4 <vTaskStartScheduler+0xc4>)
 800d26e:	2201      	movs	r2, #1
 800d270:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d272:	4b11      	ldr	r3, [pc, #68]	; (800d2b8 <vTaskStartScheduler+0xc8>)
 800d274:	2200      	movs	r2, #0
 800d276:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d278:	f001 fa82 	bl	800e780 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d27c:	e00e      	b.n	800d29c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d27e:	697b      	ldr	r3, [r7, #20]
 800d280:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d284:	d10a      	bne.n	800d29c <vTaskStartScheduler+0xac>
	__asm volatile
 800d286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d28a:	f383 8811 	msr	BASEPRI, r3
 800d28e:	f3bf 8f6f 	isb	sy
 800d292:	f3bf 8f4f 	dsb	sy
 800d296:	60fb      	str	r3, [r7, #12]
}
 800d298:	bf00      	nop
 800d29a:	e7fe      	b.n	800d29a <vTaskStartScheduler+0xaa>
}
 800d29c:	bf00      	nop
 800d29e:	3718      	adds	r7, #24
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	bd80      	pop	{r7, pc}
 800d2a4:	08010a5c 	.word	0x08010a5c
 800d2a8:	0800d8d5 	.word	0x0800d8d5
 800d2ac:	200013f0 	.word	0x200013f0
 800d2b0:	200013ec 	.word	0x200013ec
 800d2b4:	200013d8 	.word	0x200013d8
 800d2b8:	200013d0 	.word	0x200013d0

0800d2bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d2bc:	b480      	push	{r7}
 800d2be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d2c0:	4b04      	ldr	r3, [pc, #16]	; (800d2d4 <vTaskSuspendAll+0x18>)
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	3301      	adds	r3, #1
 800d2c6:	4a03      	ldr	r2, [pc, #12]	; (800d2d4 <vTaskSuspendAll+0x18>)
 800d2c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d2ca:	bf00      	nop
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d2:	4770      	bx	lr
 800d2d4:	200013f4 	.word	0x200013f4

0800d2d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b084      	sub	sp, #16
 800d2dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d2de:	2300      	movs	r3, #0
 800d2e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d2e6:	4b42      	ldr	r3, [pc, #264]	; (800d3f0 <xTaskResumeAll+0x118>)
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d10a      	bne.n	800d304 <xTaskResumeAll+0x2c>
	__asm volatile
 800d2ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2f2:	f383 8811 	msr	BASEPRI, r3
 800d2f6:	f3bf 8f6f 	isb	sy
 800d2fa:	f3bf 8f4f 	dsb	sy
 800d2fe:	603b      	str	r3, [r7, #0]
}
 800d300:	bf00      	nop
 800d302:	e7fe      	b.n	800d302 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d304:	f001 fade 	bl	800e8c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d308:	4b39      	ldr	r3, [pc, #228]	; (800d3f0 <xTaskResumeAll+0x118>)
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	3b01      	subs	r3, #1
 800d30e:	4a38      	ldr	r2, [pc, #224]	; (800d3f0 <xTaskResumeAll+0x118>)
 800d310:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d312:	4b37      	ldr	r3, [pc, #220]	; (800d3f0 <xTaskResumeAll+0x118>)
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d162      	bne.n	800d3e0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d31a:	4b36      	ldr	r3, [pc, #216]	; (800d3f4 <xTaskResumeAll+0x11c>)
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d05e      	beq.n	800d3e0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d322:	e02f      	b.n	800d384 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d324:	4b34      	ldr	r3, [pc, #208]	; (800d3f8 <xTaskResumeAll+0x120>)
 800d326:	68db      	ldr	r3, [r3, #12]
 800d328:	68db      	ldr	r3, [r3, #12]
 800d32a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	3318      	adds	r3, #24
 800d330:	4618      	mov	r0, r3
 800d332:	f7fe fbc1 	bl	800bab8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	3304      	adds	r3, #4
 800d33a:	4618      	mov	r0, r3
 800d33c:	f7fe fbbc 	bl	800bab8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d344:	4b2d      	ldr	r3, [pc, #180]	; (800d3fc <xTaskResumeAll+0x124>)
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	429a      	cmp	r2, r3
 800d34a:	d903      	bls.n	800d354 <xTaskResumeAll+0x7c>
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d350:	4a2a      	ldr	r2, [pc, #168]	; (800d3fc <xTaskResumeAll+0x124>)
 800d352:	6013      	str	r3, [r2, #0]
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d358:	4613      	mov	r3, r2
 800d35a:	009b      	lsls	r3, r3, #2
 800d35c:	4413      	add	r3, r2
 800d35e:	009b      	lsls	r3, r3, #2
 800d360:	4a27      	ldr	r2, [pc, #156]	; (800d400 <xTaskResumeAll+0x128>)
 800d362:	441a      	add	r2, r3
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	3304      	adds	r3, #4
 800d368:	4619      	mov	r1, r3
 800d36a:	4610      	mov	r0, r2
 800d36c:	f7fe fb47 	bl	800b9fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d374:	4b23      	ldr	r3, [pc, #140]	; (800d404 <xTaskResumeAll+0x12c>)
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d37a:	429a      	cmp	r2, r3
 800d37c:	d302      	bcc.n	800d384 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d37e:	4b22      	ldr	r3, [pc, #136]	; (800d408 <xTaskResumeAll+0x130>)
 800d380:	2201      	movs	r2, #1
 800d382:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d384:	4b1c      	ldr	r3, [pc, #112]	; (800d3f8 <xTaskResumeAll+0x120>)
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d1cb      	bne.n	800d324 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d001      	beq.n	800d396 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d392:	f000 fb55 	bl	800da40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d396:	4b1d      	ldr	r3, [pc, #116]	; (800d40c <xTaskResumeAll+0x134>)
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d010      	beq.n	800d3c4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d3a2:	f000 f847 	bl	800d434 <xTaskIncrementTick>
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d002      	beq.n	800d3b2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d3ac:	4b16      	ldr	r3, [pc, #88]	; (800d408 <xTaskResumeAll+0x130>)
 800d3ae:	2201      	movs	r2, #1
 800d3b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	3b01      	subs	r3, #1
 800d3b6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d1f1      	bne.n	800d3a2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d3be:	4b13      	ldr	r3, [pc, #76]	; (800d40c <xTaskResumeAll+0x134>)
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d3c4:	4b10      	ldr	r3, [pc, #64]	; (800d408 <xTaskResumeAll+0x130>)
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d009      	beq.n	800d3e0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d3cc:	2301      	movs	r3, #1
 800d3ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d3d0:	4b0f      	ldr	r3, [pc, #60]	; (800d410 <xTaskResumeAll+0x138>)
 800d3d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3d6:	601a      	str	r2, [r3, #0]
 800d3d8:	f3bf 8f4f 	dsb	sy
 800d3dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d3e0:	f001 faa0 	bl	800e924 <vPortExitCritical>

	return xAlreadyYielded;
 800d3e4:	68bb      	ldr	r3, [r7, #8]
}
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	3710      	adds	r7, #16
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	bd80      	pop	{r7, pc}
 800d3ee:	bf00      	nop
 800d3f0:	200013f4 	.word	0x200013f4
 800d3f4:	200013cc 	.word	0x200013cc
 800d3f8:	2000138c 	.word	0x2000138c
 800d3fc:	200013d4 	.word	0x200013d4
 800d400:	20000efc 	.word	0x20000efc
 800d404:	20000ef8 	.word	0x20000ef8
 800d408:	200013e0 	.word	0x200013e0
 800d40c:	200013dc 	.word	0x200013dc
 800d410:	e000ed04 	.word	0xe000ed04

0800d414 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d414:	b480      	push	{r7}
 800d416:	b083      	sub	sp, #12
 800d418:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d41a:	4b05      	ldr	r3, [pc, #20]	; (800d430 <xTaskGetTickCount+0x1c>)
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d420:	687b      	ldr	r3, [r7, #4]
}
 800d422:	4618      	mov	r0, r3
 800d424:	370c      	adds	r7, #12
 800d426:	46bd      	mov	sp, r7
 800d428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42c:	4770      	bx	lr
 800d42e:	bf00      	nop
 800d430:	200013d0 	.word	0x200013d0

0800d434 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b086      	sub	sp, #24
 800d438:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d43a:	2300      	movs	r3, #0
 800d43c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d43e:	4b4f      	ldr	r3, [pc, #316]	; (800d57c <xTaskIncrementTick+0x148>)
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	2b00      	cmp	r3, #0
 800d444:	f040 808f 	bne.w	800d566 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d448:	4b4d      	ldr	r3, [pc, #308]	; (800d580 <xTaskIncrementTick+0x14c>)
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	3301      	adds	r3, #1
 800d44e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d450:	4a4b      	ldr	r2, [pc, #300]	; (800d580 <xTaskIncrementTick+0x14c>)
 800d452:	693b      	ldr	r3, [r7, #16]
 800d454:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d456:	693b      	ldr	r3, [r7, #16]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d120      	bne.n	800d49e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d45c:	4b49      	ldr	r3, [pc, #292]	; (800d584 <xTaskIncrementTick+0x150>)
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d00a      	beq.n	800d47c <xTaskIncrementTick+0x48>
	__asm volatile
 800d466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d46a:	f383 8811 	msr	BASEPRI, r3
 800d46e:	f3bf 8f6f 	isb	sy
 800d472:	f3bf 8f4f 	dsb	sy
 800d476:	603b      	str	r3, [r7, #0]
}
 800d478:	bf00      	nop
 800d47a:	e7fe      	b.n	800d47a <xTaskIncrementTick+0x46>
 800d47c:	4b41      	ldr	r3, [pc, #260]	; (800d584 <xTaskIncrementTick+0x150>)
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	60fb      	str	r3, [r7, #12]
 800d482:	4b41      	ldr	r3, [pc, #260]	; (800d588 <xTaskIncrementTick+0x154>)
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	4a3f      	ldr	r2, [pc, #252]	; (800d584 <xTaskIncrementTick+0x150>)
 800d488:	6013      	str	r3, [r2, #0]
 800d48a:	4a3f      	ldr	r2, [pc, #252]	; (800d588 <xTaskIncrementTick+0x154>)
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	6013      	str	r3, [r2, #0]
 800d490:	4b3e      	ldr	r3, [pc, #248]	; (800d58c <xTaskIncrementTick+0x158>)
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	3301      	adds	r3, #1
 800d496:	4a3d      	ldr	r2, [pc, #244]	; (800d58c <xTaskIncrementTick+0x158>)
 800d498:	6013      	str	r3, [r2, #0]
 800d49a:	f000 fad1 	bl	800da40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d49e:	4b3c      	ldr	r3, [pc, #240]	; (800d590 <xTaskIncrementTick+0x15c>)
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	693a      	ldr	r2, [r7, #16]
 800d4a4:	429a      	cmp	r2, r3
 800d4a6:	d349      	bcc.n	800d53c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d4a8:	4b36      	ldr	r3, [pc, #216]	; (800d584 <xTaskIncrementTick+0x150>)
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d104      	bne.n	800d4bc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d4b2:	4b37      	ldr	r3, [pc, #220]	; (800d590 <xTaskIncrementTick+0x15c>)
 800d4b4:	f04f 32ff 	mov.w	r2, #4294967295
 800d4b8:	601a      	str	r2, [r3, #0]
					break;
 800d4ba:	e03f      	b.n	800d53c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d4bc:	4b31      	ldr	r3, [pc, #196]	; (800d584 <xTaskIncrementTick+0x150>)
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	68db      	ldr	r3, [r3, #12]
 800d4c2:	68db      	ldr	r3, [r3, #12]
 800d4c4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d4c6:	68bb      	ldr	r3, [r7, #8]
 800d4c8:	685b      	ldr	r3, [r3, #4]
 800d4ca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d4cc:	693a      	ldr	r2, [r7, #16]
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	429a      	cmp	r2, r3
 800d4d2:	d203      	bcs.n	800d4dc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d4d4:	4a2e      	ldr	r2, [pc, #184]	; (800d590 <xTaskIncrementTick+0x15c>)
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d4da:	e02f      	b.n	800d53c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d4dc:	68bb      	ldr	r3, [r7, #8]
 800d4de:	3304      	adds	r3, #4
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	f7fe fae9 	bl	800bab8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d4e6:	68bb      	ldr	r3, [r7, #8]
 800d4e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d004      	beq.n	800d4f8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d4ee:	68bb      	ldr	r3, [r7, #8]
 800d4f0:	3318      	adds	r3, #24
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	f7fe fae0 	bl	800bab8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d4f8:	68bb      	ldr	r3, [r7, #8]
 800d4fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4fc:	4b25      	ldr	r3, [pc, #148]	; (800d594 <xTaskIncrementTick+0x160>)
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	429a      	cmp	r2, r3
 800d502:	d903      	bls.n	800d50c <xTaskIncrementTick+0xd8>
 800d504:	68bb      	ldr	r3, [r7, #8]
 800d506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d508:	4a22      	ldr	r2, [pc, #136]	; (800d594 <xTaskIncrementTick+0x160>)
 800d50a:	6013      	str	r3, [r2, #0]
 800d50c:	68bb      	ldr	r3, [r7, #8]
 800d50e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d510:	4613      	mov	r3, r2
 800d512:	009b      	lsls	r3, r3, #2
 800d514:	4413      	add	r3, r2
 800d516:	009b      	lsls	r3, r3, #2
 800d518:	4a1f      	ldr	r2, [pc, #124]	; (800d598 <xTaskIncrementTick+0x164>)
 800d51a:	441a      	add	r2, r3
 800d51c:	68bb      	ldr	r3, [r7, #8]
 800d51e:	3304      	adds	r3, #4
 800d520:	4619      	mov	r1, r3
 800d522:	4610      	mov	r0, r2
 800d524:	f7fe fa6b 	bl	800b9fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d528:	68bb      	ldr	r3, [r7, #8]
 800d52a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d52c:	4b1b      	ldr	r3, [pc, #108]	; (800d59c <xTaskIncrementTick+0x168>)
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d532:	429a      	cmp	r2, r3
 800d534:	d3b8      	bcc.n	800d4a8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d536:	2301      	movs	r3, #1
 800d538:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d53a:	e7b5      	b.n	800d4a8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d53c:	4b17      	ldr	r3, [pc, #92]	; (800d59c <xTaskIncrementTick+0x168>)
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d542:	4915      	ldr	r1, [pc, #84]	; (800d598 <xTaskIncrementTick+0x164>)
 800d544:	4613      	mov	r3, r2
 800d546:	009b      	lsls	r3, r3, #2
 800d548:	4413      	add	r3, r2
 800d54a:	009b      	lsls	r3, r3, #2
 800d54c:	440b      	add	r3, r1
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	2b01      	cmp	r3, #1
 800d552:	d901      	bls.n	800d558 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d554:	2301      	movs	r3, #1
 800d556:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d558:	4b11      	ldr	r3, [pc, #68]	; (800d5a0 <xTaskIncrementTick+0x16c>)
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d007      	beq.n	800d570 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d560:	2301      	movs	r3, #1
 800d562:	617b      	str	r3, [r7, #20]
 800d564:	e004      	b.n	800d570 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d566:	4b0f      	ldr	r3, [pc, #60]	; (800d5a4 <xTaskIncrementTick+0x170>)
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	3301      	adds	r3, #1
 800d56c:	4a0d      	ldr	r2, [pc, #52]	; (800d5a4 <xTaskIncrementTick+0x170>)
 800d56e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d570:	697b      	ldr	r3, [r7, #20]
}
 800d572:	4618      	mov	r0, r3
 800d574:	3718      	adds	r7, #24
 800d576:	46bd      	mov	sp, r7
 800d578:	bd80      	pop	{r7, pc}
 800d57a:	bf00      	nop
 800d57c:	200013f4 	.word	0x200013f4
 800d580:	200013d0 	.word	0x200013d0
 800d584:	20001384 	.word	0x20001384
 800d588:	20001388 	.word	0x20001388
 800d58c:	200013e4 	.word	0x200013e4
 800d590:	200013ec 	.word	0x200013ec
 800d594:	200013d4 	.word	0x200013d4
 800d598:	20000efc 	.word	0x20000efc
 800d59c:	20000ef8 	.word	0x20000ef8
 800d5a0:	200013e0 	.word	0x200013e0
 800d5a4:	200013dc 	.word	0x200013dc

0800d5a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d5a8:	b480      	push	{r7}
 800d5aa:	b085      	sub	sp, #20
 800d5ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d5ae:	4b28      	ldr	r3, [pc, #160]	; (800d650 <vTaskSwitchContext+0xa8>)
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d003      	beq.n	800d5be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d5b6:	4b27      	ldr	r3, [pc, #156]	; (800d654 <vTaskSwitchContext+0xac>)
 800d5b8:	2201      	movs	r2, #1
 800d5ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d5bc:	e041      	b.n	800d642 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800d5be:	4b25      	ldr	r3, [pc, #148]	; (800d654 <vTaskSwitchContext+0xac>)
 800d5c0:	2200      	movs	r2, #0
 800d5c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d5c4:	4b24      	ldr	r3, [pc, #144]	; (800d658 <vTaskSwitchContext+0xb0>)
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	60fb      	str	r3, [r7, #12]
 800d5ca:	e010      	b.n	800d5ee <vTaskSwitchContext+0x46>
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d10a      	bne.n	800d5e8 <vTaskSwitchContext+0x40>
	__asm volatile
 800d5d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5d6:	f383 8811 	msr	BASEPRI, r3
 800d5da:	f3bf 8f6f 	isb	sy
 800d5de:	f3bf 8f4f 	dsb	sy
 800d5e2:	607b      	str	r3, [r7, #4]
}
 800d5e4:	bf00      	nop
 800d5e6:	e7fe      	b.n	800d5e6 <vTaskSwitchContext+0x3e>
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	3b01      	subs	r3, #1
 800d5ec:	60fb      	str	r3, [r7, #12]
 800d5ee:	491b      	ldr	r1, [pc, #108]	; (800d65c <vTaskSwitchContext+0xb4>)
 800d5f0:	68fa      	ldr	r2, [r7, #12]
 800d5f2:	4613      	mov	r3, r2
 800d5f4:	009b      	lsls	r3, r3, #2
 800d5f6:	4413      	add	r3, r2
 800d5f8:	009b      	lsls	r3, r3, #2
 800d5fa:	440b      	add	r3, r1
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d0e4      	beq.n	800d5cc <vTaskSwitchContext+0x24>
 800d602:	68fa      	ldr	r2, [r7, #12]
 800d604:	4613      	mov	r3, r2
 800d606:	009b      	lsls	r3, r3, #2
 800d608:	4413      	add	r3, r2
 800d60a:	009b      	lsls	r3, r3, #2
 800d60c:	4a13      	ldr	r2, [pc, #76]	; (800d65c <vTaskSwitchContext+0xb4>)
 800d60e:	4413      	add	r3, r2
 800d610:	60bb      	str	r3, [r7, #8]
 800d612:	68bb      	ldr	r3, [r7, #8]
 800d614:	685b      	ldr	r3, [r3, #4]
 800d616:	685a      	ldr	r2, [r3, #4]
 800d618:	68bb      	ldr	r3, [r7, #8]
 800d61a:	605a      	str	r2, [r3, #4]
 800d61c:	68bb      	ldr	r3, [r7, #8]
 800d61e:	685a      	ldr	r2, [r3, #4]
 800d620:	68bb      	ldr	r3, [r7, #8]
 800d622:	3308      	adds	r3, #8
 800d624:	429a      	cmp	r2, r3
 800d626:	d104      	bne.n	800d632 <vTaskSwitchContext+0x8a>
 800d628:	68bb      	ldr	r3, [r7, #8]
 800d62a:	685b      	ldr	r3, [r3, #4]
 800d62c:	685a      	ldr	r2, [r3, #4]
 800d62e:	68bb      	ldr	r3, [r7, #8]
 800d630:	605a      	str	r2, [r3, #4]
 800d632:	68bb      	ldr	r3, [r7, #8]
 800d634:	685b      	ldr	r3, [r3, #4]
 800d636:	68db      	ldr	r3, [r3, #12]
 800d638:	4a09      	ldr	r2, [pc, #36]	; (800d660 <vTaskSwitchContext+0xb8>)
 800d63a:	6013      	str	r3, [r2, #0]
 800d63c:	4a06      	ldr	r2, [pc, #24]	; (800d658 <vTaskSwitchContext+0xb0>)
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	6013      	str	r3, [r2, #0]
}
 800d642:	bf00      	nop
 800d644:	3714      	adds	r7, #20
 800d646:	46bd      	mov	sp, r7
 800d648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64c:	4770      	bx	lr
 800d64e:	bf00      	nop
 800d650:	200013f4 	.word	0x200013f4
 800d654:	200013e0 	.word	0x200013e0
 800d658:	200013d4 	.word	0x200013d4
 800d65c:	20000efc 	.word	0x20000efc
 800d660:	20000ef8 	.word	0x20000ef8

0800d664 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b084      	sub	sp, #16
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
 800d66c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d10a      	bne.n	800d68a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d674:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d678:	f383 8811 	msr	BASEPRI, r3
 800d67c:	f3bf 8f6f 	isb	sy
 800d680:	f3bf 8f4f 	dsb	sy
 800d684:	60fb      	str	r3, [r7, #12]
}
 800d686:	bf00      	nop
 800d688:	e7fe      	b.n	800d688 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d68a:	4b07      	ldr	r3, [pc, #28]	; (800d6a8 <vTaskPlaceOnEventList+0x44>)
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	3318      	adds	r3, #24
 800d690:	4619      	mov	r1, r3
 800d692:	6878      	ldr	r0, [r7, #4]
 800d694:	f7fe f9d7 	bl	800ba46 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d698:	2101      	movs	r1, #1
 800d69a:	6838      	ldr	r0, [r7, #0]
 800d69c:	f000 fb8a 	bl	800ddb4 <prvAddCurrentTaskToDelayedList>
}
 800d6a0:	bf00      	nop
 800d6a2:	3710      	adds	r7, #16
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	bd80      	pop	{r7, pc}
 800d6a8:	20000ef8 	.word	0x20000ef8

0800d6ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b086      	sub	sp, #24
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	60f8      	str	r0, [r7, #12]
 800d6b4:	60b9      	str	r1, [r7, #8]
 800d6b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d10a      	bne.n	800d6d4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6c2:	f383 8811 	msr	BASEPRI, r3
 800d6c6:	f3bf 8f6f 	isb	sy
 800d6ca:	f3bf 8f4f 	dsb	sy
 800d6ce:	617b      	str	r3, [r7, #20]
}
 800d6d0:	bf00      	nop
 800d6d2:	e7fe      	b.n	800d6d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d6d4:	4b0a      	ldr	r3, [pc, #40]	; (800d700 <vTaskPlaceOnEventListRestricted+0x54>)
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	3318      	adds	r3, #24
 800d6da:	4619      	mov	r1, r3
 800d6dc:	68f8      	ldr	r0, [r7, #12]
 800d6de:	f7fe f98e 	bl	800b9fe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d002      	beq.n	800d6ee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d6e8:	f04f 33ff 	mov.w	r3, #4294967295
 800d6ec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d6ee:	6879      	ldr	r1, [r7, #4]
 800d6f0:	68b8      	ldr	r0, [r7, #8]
 800d6f2:	f000 fb5f 	bl	800ddb4 <prvAddCurrentTaskToDelayedList>
	}
 800d6f6:	bf00      	nop
 800d6f8:	3718      	adds	r7, #24
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	bd80      	pop	{r7, pc}
 800d6fe:	bf00      	nop
 800d700:	20000ef8 	.word	0x20000ef8

0800d704 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b086      	sub	sp, #24
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	68db      	ldr	r3, [r3, #12]
 800d710:	68db      	ldr	r3, [r3, #12]
 800d712:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d714:	693b      	ldr	r3, [r7, #16]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d10a      	bne.n	800d730 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d71e:	f383 8811 	msr	BASEPRI, r3
 800d722:	f3bf 8f6f 	isb	sy
 800d726:	f3bf 8f4f 	dsb	sy
 800d72a:	60fb      	str	r3, [r7, #12]
}
 800d72c:	bf00      	nop
 800d72e:	e7fe      	b.n	800d72e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d730:	693b      	ldr	r3, [r7, #16]
 800d732:	3318      	adds	r3, #24
 800d734:	4618      	mov	r0, r3
 800d736:	f7fe f9bf 	bl	800bab8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d73a:	4b1e      	ldr	r3, [pc, #120]	; (800d7b4 <xTaskRemoveFromEventList+0xb0>)
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d11d      	bne.n	800d77e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d742:	693b      	ldr	r3, [r7, #16]
 800d744:	3304      	adds	r3, #4
 800d746:	4618      	mov	r0, r3
 800d748:	f7fe f9b6 	bl	800bab8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d74c:	693b      	ldr	r3, [r7, #16]
 800d74e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d750:	4b19      	ldr	r3, [pc, #100]	; (800d7b8 <xTaskRemoveFromEventList+0xb4>)
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	429a      	cmp	r2, r3
 800d756:	d903      	bls.n	800d760 <xTaskRemoveFromEventList+0x5c>
 800d758:	693b      	ldr	r3, [r7, #16]
 800d75a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d75c:	4a16      	ldr	r2, [pc, #88]	; (800d7b8 <xTaskRemoveFromEventList+0xb4>)
 800d75e:	6013      	str	r3, [r2, #0]
 800d760:	693b      	ldr	r3, [r7, #16]
 800d762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d764:	4613      	mov	r3, r2
 800d766:	009b      	lsls	r3, r3, #2
 800d768:	4413      	add	r3, r2
 800d76a:	009b      	lsls	r3, r3, #2
 800d76c:	4a13      	ldr	r2, [pc, #76]	; (800d7bc <xTaskRemoveFromEventList+0xb8>)
 800d76e:	441a      	add	r2, r3
 800d770:	693b      	ldr	r3, [r7, #16]
 800d772:	3304      	adds	r3, #4
 800d774:	4619      	mov	r1, r3
 800d776:	4610      	mov	r0, r2
 800d778:	f7fe f941 	bl	800b9fe <vListInsertEnd>
 800d77c:	e005      	b.n	800d78a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d77e:	693b      	ldr	r3, [r7, #16]
 800d780:	3318      	adds	r3, #24
 800d782:	4619      	mov	r1, r3
 800d784:	480e      	ldr	r0, [pc, #56]	; (800d7c0 <xTaskRemoveFromEventList+0xbc>)
 800d786:	f7fe f93a 	bl	800b9fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d78a:	693b      	ldr	r3, [r7, #16]
 800d78c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d78e:	4b0d      	ldr	r3, [pc, #52]	; (800d7c4 <xTaskRemoveFromEventList+0xc0>)
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d794:	429a      	cmp	r2, r3
 800d796:	d905      	bls.n	800d7a4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d798:	2301      	movs	r3, #1
 800d79a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d79c:	4b0a      	ldr	r3, [pc, #40]	; (800d7c8 <xTaskRemoveFromEventList+0xc4>)
 800d79e:	2201      	movs	r2, #1
 800d7a0:	601a      	str	r2, [r3, #0]
 800d7a2:	e001      	b.n	800d7a8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d7a8:	697b      	ldr	r3, [r7, #20]
}
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	3718      	adds	r7, #24
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bd80      	pop	{r7, pc}
 800d7b2:	bf00      	nop
 800d7b4:	200013f4 	.word	0x200013f4
 800d7b8:	200013d4 	.word	0x200013d4
 800d7bc:	20000efc 	.word	0x20000efc
 800d7c0:	2000138c 	.word	0x2000138c
 800d7c4:	20000ef8 	.word	0x20000ef8
 800d7c8:	200013e0 	.word	0x200013e0

0800d7cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d7cc:	b480      	push	{r7}
 800d7ce:	b083      	sub	sp, #12
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d7d4:	4b06      	ldr	r3, [pc, #24]	; (800d7f0 <vTaskInternalSetTimeOutState+0x24>)
 800d7d6:	681a      	ldr	r2, [r3, #0]
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d7dc:	4b05      	ldr	r3, [pc, #20]	; (800d7f4 <vTaskInternalSetTimeOutState+0x28>)
 800d7de:	681a      	ldr	r2, [r3, #0]
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	605a      	str	r2, [r3, #4]
}
 800d7e4:	bf00      	nop
 800d7e6:	370c      	adds	r7, #12
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ee:	4770      	bx	lr
 800d7f0:	200013e4 	.word	0x200013e4
 800d7f4:	200013d0 	.word	0x200013d0

0800d7f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b088      	sub	sp, #32
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
 800d800:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d10a      	bne.n	800d81e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d80c:	f383 8811 	msr	BASEPRI, r3
 800d810:	f3bf 8f6f 	isb	sy
 800d814:	f3bf 8f4f 	dsb	sy
 800d818:	613b      	str	r3, [r7, #16]
}
 800d81a:	bf00      	nop
 800d81c:	e7fe      	b.n	800d81c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d81e:	683b      	ldr	r3, [r7, #0]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d10a      	bne.n	800d83a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d824:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d828:	f383 8811 	msr	BASEPRI, r3
 800d82c:	f3bf 8f6f 	isb	sy
 800d830:	f3bf 8f4f 	dsb	sy
 800d834:	60fb      	str	r3, [r7, #12]
}
 800d836:	bf00      	nop
 800d838:	e7fe      	b.n	800d838 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d83a:	f001 f843 	bl	800e8c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d83e:	4b1d      	ldr	r3, [pc, #116]	; (800d8b4 <xTaskCheckForTimeOut+0xbc>)
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	685b      	ldr	r3, [r3, #4]
 800d848:	69ba      	ldr	r2, [r7, #24]
 800d84a:	1ad3      	subs	r3, r2, r3
 800d84c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d856:	d102      	bne.n	800d85e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d858:	2300      	movs	r3, #0
 800d85a:	61fb      	str	r3, [r7, #28]
 800d85c:	e023      	b.n	800d8a6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681a      	ldr	r2, [r3, #0]
 800d862:	4b15      	ldr	r3, [pc, #84]	; (800d8b8 <xTaskCheckForTimeOut+0xc0>)
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	429a      	cmp	r2, r3
 800d868:	d007      	beq.n	800d87a <xTaskCheckForTimeOut+0x82>
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	685b      	ldr	r3, [r3, #4]
 800d86e:	69ba      	ldr	r2, [r7, #24]
 800d870:	429a      	cmp	r2, r3
 800d872:	d302      	bcc.n	800d87a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d874:	2301      	movs	r3, #1
 800d876:	61fb      	str	r3, [r7, #28]
 800d878:	e015      	b.n	800d8a6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d87a:	683b      	ldr	r3, [r7, #0]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	697a      	ldr	r2, [r7, #20]
 800d880:	429a      	cmp	r2, r3
 800d882:	d20b      	bcs.n	800d89c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d884:	683b      	ldr	r3, [r7, #0]
 800d886:	681a      	ldr	r2, [r3, #0]
 800d888:	697b      	ldr	r3, [r7, #20]
 800d88a:	1ad2      	subs	r2, r2, r3
 800d88c:	683b      	ldr	r3, [r7, #0]
 800d88e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d890:	6878      	ldr	r0, [r7, #4]
 800d892:	f7ff ff9b 	bl	800d7cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d896:	2300      	movs	r3, #0
 800d898:	61fb      	str	r3, [r7, #28]
 800d89a:	e004      	b.n	800d8a6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	2200      	movs	r2, #0
 800d8a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d8a2:	2301      	movs	r3, #1
 800d8a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d8a6:	f001 f83d 	bl	800e924 <vPortExitCritical>

	return xReturn;
 800d8aa:	69fb      	ldr	r3, [r7, #28]
}
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	3720      	adds	r7, #32
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	bd80      	pop	{r7, pc}
 800d8b4:	200013d0 	.word	0x200013d0
 800d8b8:	200013e4 	.word	0x200013e4

0800d8bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d8bc:	b480      	push	{r7}
 800d8be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d8c0:	4b03      	ldr	r3, [pc, #12]	; (800d8d0 <vTaskMissedYield+0x14>)
 800d8c2:	2201      	movs	r2, #1
 800d8c4:	601a      	str	r2, [r3, #0]
}
 800d8c6:	bf00      	nop
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ce:	4770      	bx	lr
 800d8d0:	200013e0 	.word	0x200013e0

0800d8d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b082      	sub	sp, #8
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d8dc:	f000 f852 	bl	800d984 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d8e0:	4b06      	ldr	r3, [pc, #24]	; (800d8fc <prvIdleTask+0x28>)
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	2b01      	cmp	r3, #1
 800d8e6:	d9f9      	bls.n	800d8dc <prvIdleTask+0x8>
			{
				taskYIELD();
 800d8e8:	4b05      	ldr	r3, [pc, #20]	; (800d900 <prvIdleTask+0x2c>)
 800d8ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8ee:	601a      	str	r2, [r3, #0]
 800d8f0:	f3bf 8f4f 	dsb	sy
 800d8f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d8f8:	e7f0      	b.n	800d8dc <prvIdleTask+0x8>
 800d8fa:	bf00      	nop
 800d8fc:	20000efc 	.word	0x20000efc
 800d900:	e000ed04 	.word	0xe000ed04

0800d904 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d904:	b580      	push	{r7, lr}
 800d906:	b082      	sub	sp, #8
 800d908:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d90a:	2300      	movs	r3, #0
 800d90c:	607b      	str	r3, [r7, #4]
 800d90e:	e00c      	b.n	800d92a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d910:	687a      	ldr	r2, [r7, #4]
 800d912:	4613      	mov	r3, r2
 800d914:	009b      	lsls	r3, r3, #2
 800d916:	4413      	add	r3, r2
 800d918:	009b      	lsls	r3, r3, #2
 800d91a:	4a12      	ldr	r2, [pc, #72]	; (800d964 <prvInitialiseTaskLists+0x60>)
 800d91c:	4413      	add	r3, r2
 800d91e:	4618      	mov	r0, r3
 800d920:	f7fe f840 	bl	800b9a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	3301      	adds	r3, #1
 800d928:	607b      	str	r3, [r7, #4]
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	2b37      	cmp	r3, #55	; 0x37
 800d92e:	d9ef      	bls.n	800d910 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d930:	480d      	ldr	r0, [pc, #52]	; (800d968 <prvInitialiseTaskLists+0x64>)
 800d932:	f7fe f837 	bl	800b9a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d936:	480d      	ldr	r0, [pc, #52]	; (800d96c <prvInitialiseTaskLists+0x68>)
 800d938:	f7fe f834 	bl	800b9a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d93c:	480c      	ldr	r0, [pc, #48]	; (800d970 <prvInitialiseTaskLists+0x6c>)
 800d93e:	f7fe f831 	bl	800b9a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d942:	480c      	ldr	r0, [pc, #48]	; (800d974 <prvInitialiseTaskLists+0x70>)
 800d944:	f7fe f82e 	bl	800b9a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d948:	480b      	ldr	r0, [pc, #44]	; (800d978 <prvInitialiseTaskLists+0x74>)
 800d94a:	f7fe f82b 	bl	800b9a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d94e:	4b0b      	ldr	r3, [pc, #44]	; (800d97c <prvInitialiseTaskLists+0x78>)
 800d950:	4a05      	ldr	r2, [pc, #20]	; (800d968 <prvInitialiseTaskLists+0x64>)
 800d952:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d954:	4b0a      	ldr	r3, [pc, #40]	; (800d980 <prvInitialiseTaskLists+0x7c>)
 800d956:	4a05      	ldr	r2, [pc, #20]	; (800d96c <prvInitialiseTaskLists+0x68>)
 800d958:	601a      	str	r2, [r3, #0]
}
 800d95a:	bf00      	nop
 800d95c:	3708      	adds	r7, #8
 800d95e:	46bd      	mov	sp, r7
 800d960:	bd80      	pop	{r7, pc}
 800d962:	bf00      	nop
 800d964:	20000efc 	.word	0x20000efc
 800d968:	2000135c 	.word	0x2000135c
 800d96c:	20001370 	.word	0x20001370
 800d970:	2000138c 	.word	0x2000138c
 800d974:	200013a0 	.word	0x200013a0
 800d978:	200013b8 	.word	0x200013b8
 800d97c:	20001384 	.word	0x20001384
 800d980:	20001388 	.word	0x20001388

0800d984 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b082      	sub	sp, #8
 800d988:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d98a:	e019      	b.n	800d9c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d98c:	f000 ff9a 	bl	800e8c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d990:	4b10      	ldr	r3, [pc, #64]	; (800d9d4 <prvCheckTasksWaitingTermination+0x50>)
 800d992:	68db      	ldr	r3, [r3, #12]
 800d994:	68db      	ldr	r3, [r3, #12]
 800d996:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	3304      	adds	r3, #4
 800d99c:	4618      	mov	r0, r3
 800d99e:	f7fe f88b 	bl	800bab8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d9a2:	4b0d      	ldr	r3, [pc, #52]	; (800d9d8 <prvCheckTasksWaitingTermination+0x54>)
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	3b01      	subs	r3, #1
 800d9a8:	4a0b      	ldr	r2, [pc, #44]	; (800d9d8 <prvCheckTasksWaitingTermination+0x54>)
 800d9aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d9ac:	4b0b      	ldr	r3, [pc, #44]	; (800d9dc <prvCheckTasksWaitingTermination+0x58>)
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	3b01      	subs	r3, #1
 800d9b2:	4a0a      	ldr	r2, [pc, #40]	; (800d9dc <prvCheckTasksWaitingTermination+0x58>)
 800d9b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d9b6:	f000 ffb5 	bl	800e924 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d9ba:	6878      	ldr	r0, [r7, #4]
 800d9bc:	f000 f810 	bl	800d9e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d9c0:	4b06      	ldr	r3, [pc, #24]	; (800d9dc <prvCheckTasksWaitingTermination+0x58>)
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d1e1      	bne.n	800d98c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d9c8:	bf00      	nop
 800d9ca:	bf00      	nop
 800d9cc:	3708      	adds	r7, #8
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	bd80      	pop	{r7, pc}
 800d9d2:	bf00      	nop
 800d9d4:	200013a0 	.word	0x200013a0
 800d9d8:	200013cc 	.word	0x200013cc
 800d9dc:	200013b4 	.word	0x200013b4

0800d9e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b084      	sub	sp, #16
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d108      	bne.n	800da04 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	f001 f952 	bl	800eca0 <vPortFree>
				vPortFree( pxTCB );
 800d9fc:	6878      	ldr	r0, [r7, #4]
 800d9fe:	f001 f94f 	bl	800eca0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800da02:	e018      	b.n	800da36 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800da0a:	2b01      	cmp	r3, #1
 800da0c:	d103      	bne.n	800da16 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800da0e:	6878      	ldr	r0, [r7, #4]
 800da10:	f001 f946 	bl	800eca0 <vPortFree>
	}
 800da14:	e00f      	b.n	800da36 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800da1c:	2b02      	cmp	r3, #2
 800da1e:	d00a      	beq.n	800da36 <prvDeleteTCB+0x56>
	__asm volatile
 800da20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da24:	f383 8811 	msr	BASEPRI, r3
 800da28:	f3bf 8f6f 	isb	sy
 800da2c:	f3bf 8f4f 	dsb	sy
 800da30:	60fb      	str	r3, [r7, #12]
}
 800da32:	bf00      	nop
 800da34:	e7fe      	b.n	800da34 <prvDeleteTCB+0x54>
	}
 800da36:	bf00      	nop
 800da38:	3710      	adds	r7, #16
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bd80      	pop	{r7, pc}
	...

0800da40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800da40:	b480      	push	{r7}
 800da42:	b083      	sub	sp, #12
 800da44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800da46:	4b0c      	ldr	r3, [pc, #48]	; (800da78 <prvResetNextTaskUnblockTime+0x38>)
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d104      	bne.n	800da5a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800da50:	4b0a      	ldr	r3, [pc, #40]	; (800da7c <prvResetNextTaskUnblockTime+0x3c>)
 800da52:	f04f 32ff 	mov.w	r2, #4294967295
 800da56:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800da58:	e008      	b.n	800da6c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da5a:	4b07      	ldr	r3, [pc, #28]	; (800da78 <prvResetNextTaskUnblockTime+0x38>)
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	68db      	ldr	r3, [r3, #12]
 800da60:	68db      	ldr	r3, [r3, #12]
 800da62:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	685b      	ldr	r3, [r3, #4]
 800da68:	4a04      	ldr	r2, [pc, #16]	; (800da7c <prvResetNextTaskUnblockTime+0x3c>)
 800da6a:	6013      	str	r3, [r2, #0]
}
 800da6c:	bf00      	nop
 800da6e:	370c      	adds	r7, #12
 800da70:	46bd      	mov	sp, r7
 800da72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da76:	4770      	bx	lr
 800da78:	20001384 	.word	0x20001384
 800da7c:	200013ec 	.word	0x200013ec

0800da80 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800da80:	b480      	push	{r7}
 800da82:	b083      	sub	sp, #12
 800da84:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800da86:	4b05      	ldr	r3, [pc, #20]	; (800da9c <xTaskGetCurrentTaskHandle+0x1c>)
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800da8c:	687b      	ldr	r3, [r7, #4]
	}
 800da8e:	4618      	mov	r0, r3
 800da90:	370c      	adds	r7, #12
 800da92:	46bd      	mov	sp, r7
 800da94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da98:	4770      	bx	lr
 800da9a:	bf00      	nop
 800da9c:	20000ef8 	.word	0x20000ef8

0800daa0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800daa0:	b480      	push	{r7}
 800daa2:	b083      	sub	sp, #12
 800daa4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800daa6:	4b0b      	ldr	r3, [pc, #44]	; (800dad4 <xTaskGetSchedulerState+0x34>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d102      	bne.n	800dab4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800daae:	2301      	movs	r3, #1
 800dab0:	607b      	str	r3, [r7, #4]
 800dab2:	e008      	b.n	800dac6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dab4:	4b08      	ldr	r3, [pc, #32]	; (800dad8 <xTaskGetSchedulerState+0x38>)
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d102      	bne.n	800dac2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800dabc:	2302      	movs	r3, #2
 800dabe:	607b      	str	r3, [r7, #4]
 800dac0:	e001      	b.n	800dac6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800dac2:	2300      	movs	r3, #0
 800dac4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800dac6:	687b      	ldr	r3, [r7, #4]
	}
 800dac8:	4618      	mov	r0, r3
 800daca:	370c      	adds	r7, #12
 800dacc:	46bd      	mov	sp, r7
 800dace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad2:	4770      	bx	lr
 800dad4:	200013d8 	.word	0x200013d8
 800dad8:	200013f4 	.word	0x200013f4

0800dadc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800dadc:	b580      	push	{r7, lr}
 800dade:	b084      	sub	sp, #16
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800dae8:	2300      	movs	r3, #0
 800daea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d051      	beq.n	800db96 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800daf2:	68bb      	ldr	r3, [r7, #8]
 800daf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daf6:	4b2a      	ldr	r3, [pc, #168]	; (800dba0 <xTaskPriorityInherit+0xc4>)
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dafc:	429a      	cmp	r2, r3
 800dafe:	d241      	bcs.n	800db84 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800db00:	68bb      	ldr	r3, [r7, #8]
 800db02:	699b      	ldr	r3, [r3, #24]
 800db04:	2b00      	cmp	r3, #0
 800db06:	db06      	blt.n	800db16 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db08:	4b25      	ldr	r3, [pc, #148]	; (800dba0 <xTaskPriorityInherit+0xc4>)
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db0e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800db12:	68bb      	ldr	r3, [r7, #8]
 800db14:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800db16:	68bb      	ldr	r3, [r7, #8]
 800db18:	6959      	ldr	r1, [r3, #20]
 800db1a:	68bb      	ldr	r3, [r7, #8]
 800db1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db1e:	4613      	mov	r3, r2
 800db20:	009b      	lsls	r3, r3, #2
 800db22:	4413      	add	r3, r2
 800db24:	009b      	lsls	r3, r3, #2
 800db26:	4a1f      	ldr	r2, [pc, #124]	; (800dba4 <xTaskPriorityInherit+0xc8>)
 800db28:	4413      	add	r3, r2
 800db2a:	4299      	cmp	r1, r3
 800db2c:	d122      	bne.n	800db74 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800db2e:	68bb      	ldr	r3, [r7, #8]
 800db30:	3304      	adds	r3, #4
 800db32:	4618      	mov	r0, r3
 800db34:	f7fd ffc0 	bl	800bab8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800db38:	4b19      	ldr	r3, [pc, #100]	; (800dba0 <xTaskPriorityInherit+0xc4>)
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db3e:	68bb      	ldr	r3, [r7, #8]
 800db40:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800db42:	68bb      	ldr	r3, [r7, #8]
 800db44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db46:	4b18      	ldr	r3, [pc, #96]	; (800dba8 <xTaskPriorityInherit+0xcc>)
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	429a      	cmp	r2, r3
 800db4c:	d903      	bls.n	800db56 <xTaskPriorityInherit+0x7a>
 800db4e:	68bb      	ldr	r3, [r7, #8]
 800db50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db52:	4a15      	ldr	r2, [pc, #84]	; (800dba8 <xTaskPriorityInherit+0xcc>)
 800db54:	6013      	str	r3, [r2, #0]
 800db56:	68bb      	ldr	r3, [r7, #8]
 800db58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db5a:	4613      	mov	r3, r2
 800db5c:	009b      	lsls	r3, r3, #2
 800db5e:	4413      	add	r3, r2
 800db60:	009b      	lsls	r3, r3, #2
 800db62:	4a10      	ldr	r2, [pc, #64]	; (800dba4 <xTaskPriorityInherit+0xc8>)
 800db64:	441a      	add	r2, r3
 800db66:	68bb      	ldr	r3, [r7, #8]
 800db68:	3304      	adds	r3, #4
 800db6a:	4619      	mov	r1, r3
 800db6c:	4610      	mov	r0, r2
 800db6e:	f7fd ff46 	bl	800b9fe <vListInsertEnd>
 800db72:	e004      	b.n	800db7e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800db74:	4b0a      	ldr	r3, [pc, #40]	; (800dba0 <xTaskPriorityInherit+0xc4>)
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db7a:	68bb      	ldr	r3, [r7, #8]
 800db7c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800db7e:	2301      	movs	r3, #1
 800db80:	60fb      	str	r3, [r7, #12]
 800db82:	e008      	b.n	800db96 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800db84:	68bb      	ldr	r3, [r7, #8]
 800db86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800db88:	4b05      	ldr	r3, [pc, #20]	; (800dba0 <xTaskPriorityInherit+0xc4>)
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db8e:	429a      	cmp	r2, r3
 800db90:	d201      	bcs.n	800db96 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800db92:	2301      	movs	r3, #1
 800db94:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800db96:	68fb      	ldr	r3, [r7, #12]
	}
 800db98:	4618      	mov	r0, r3
 800db9a:	3710      	adds	r7, #16
 800db9c:	46bd      	mov	sp, r7
 800db9e:	bd80      	pop	{r7, pc}
 800dba0:	20000ef8 	.word	0x20000ef8
 800dba4:	20000efc 	.word	0x20000efc
 800dba8:	200013d4 	.word	0x200013d4

0800dbac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b086      	sub	sp, #24
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800dbb8:	2300      	movs	r3, #0
 800dbba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d056      	beq.n	800dc70 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800dbc2:	4b2e      	ldr	r3, [pc, #184]	; (800dc7c <xTaskPriorityDisinherit+0xd0>)
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	693a      	ldr	r2, [r7, #16]
 800dbc8:	429a      	cmp	r2, r3
 800dbca:	d00a      	beq.n	800dbe2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800dbcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbd0:	f383 8811 	msr	BASEPRI, r3
 800dbd4:	f3bf 8f6f 	isb	sy
 800dbd8:	f3bf 8f4f 	dsb	sy
 800dbdc:	60fb      	str	r3, [r7, #12]
}
 800dbde:	bf00      	nop
 800dbe0:	e7fe      	b.n	800dbe0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800dbe2:	693b      	ldr	r3, [r7, #16]
 800dbe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d10a      	bne.n	800dc00 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800dbea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbee:	f383 8811 	msr	BASEPRI, r3
 800dbf2:	f3bf 8f6f 	isb	sy
 800dbf6:	f3bf 8f4f 	dsb	sy
 800dbfa:	60bb      	str	r3, [r7, #8]
}
 800dbfc:	bf00      	nop
 800dbfe:	e7fe      	b.n	800dbfe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800dc00:	693b      	ldr	r3, [r7, #16]
 800dc02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc04:	1e5a      	subs	r2, r3, #1
 800dc06:	693b      	ldr	r3, [r7, #16]
 800dc08:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800dc0a:	693b      	ldr	r3, [r7, #16]
 800dc0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc0e:	693b      	ldr	r3, [r7, #16]
 800dc10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dc12:	429a      	cmp	r2, r3
 800dc14:	d02c      	beq.n	800dc70 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800dc16:	693b      	ldr	r3, [r7, #16]
 800dc18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d128      	bne.n	800dc70 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dc1e:	693b      	ldr	r3, [r7, #16]
 800dc20:	3304      	adds	r3, #4
 800dc22:	4618      	mov	r0, r3
 800dc24:	f7fd ff48 	bl	800bab8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800dc28:	693b      	ldr	r3, [r7, #16]
 800dc2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dc2c:	693b      	ldr	r3, [r7, #16]
 800dc2e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc30:	693b      	ldr	r3, [r7, #16]
 800dc32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc34:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dc38:	693b      	ldr	r3, [r7, #16]
 800dc3a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800dc3c:	693b      	ldr	r3, [r7, #16]
 800dc3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc40:	4b0f      	ldr	r3, [pc, #60]	; (800dc80 <xTaskPriorityDisinherit+0xd4>)
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	429a      	cmp	r2, r3
 800dc46:	d903      	bls.n	800dc50 <xTaskPriorityDisinherit+0xa4>
 800dc48:	693b      	ldr	r3, [r7, #16]
 800dc4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc4c:	4a0c      	ldr	r2, [pc, #48]	; (800dc80 <xTaskPriorityDisinherit+0xd4>)
 800dc4e:	6013      	str	r3, [r2, #0]
 800dc50:	693b      	ldr	r3, [r7, #16]
 800dc52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc54:	4613      	mov	r3, r2
 800dc56:	009b      	lsls	r3, r3, #2
 800dc58:	4413      	add	r3, r2
 800dc5a:	009b      	lsls	r3, r3, #2
 800dc5c:	4a09      	ldr	r2, [pc, #36]	; (800dc84 <xTaskPriorityDisinherit+0xd8>)
 800dc5e:	441a      	add	r2, r3
 800dc60:	693b      	ldr	r3, [r7, #16]
 800dc62:	3304      	adds	r3, #4
 800dc64:	4619      	mov	r1, r3
 800dc66:	4610      	mov	r0, r2
 800dc68:	f7fd fec9 	bl	800b9fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800dc6c:	2301      	movs	r3, #1
 800dc6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dc70:	697b      	ldr	r3, [r7, #20]
	}
 800dc72:	4618      	mov	r0, r3
 800dc74:	3718      	adds	r7, #24
 800dc76:	46bd      	mov	sp, r7
 800dc78:	bd80      	pop	{r7, pc}
 800dc7a:	bf00      	nop
 800dc7c:	20000ef8 	.word	0x20000ef8
 800dc80:	200013d4 	.word	0x200013d4
 800dc84:	20000efc 	.word	0x20000efc

0800dc88 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b088      	sub	sp, #32
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
 800dc90:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800dc96:	2301      	movs	r3, #1
 800dc98:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d06a      	beq.n	800dd76 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800dca0:	69bb      	ldr	r3, [r7, #24]
 800dca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d10a      	bne.n	800dcbe <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800dca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcac:	f383 8811 	msr	BASEPRI, r3
 800dcb0:	f3bf 8f6f 	isb	sy
 800dcb4:	f3bf 8f4f 	dsb	sy
 800dcb8:	60fb      	str	r3, [r7, #12]
}
 800dcba:	bf00      	nop
 800dcbc:	e7fe      	b.n	800dcbc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800dcbe:	69bb      	ldr	r3, [r7, #24]
 800dcc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dcc2:	683a      	ldr	r2, [r7, #0]
 800dcc4:	429a      	cmp	r2, r3
 800dcc6:	d902      	bls.n	800dcce <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	61fb      	str	r3, [r7, #28]
 800dccc:	e002      	b.n	800dcd4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800dcce:	69bb      	ldr	r3, [r7, #24]
 800dcd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dcd2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800dcd4:	69bb      	ldr	r3, [r7, #24]
 800dcd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcd8:	69fa      	ldr	r2, [r7, #28]
 800dcda:	429a      	cmp	r2, r3
 800dcdc:	d04b      	beq.n	800dd76 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800dcde:	69bb      	ldr	r3, [r7, #24]
 800dce0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dce2:	697a      	ldr	r2, [r7, #20]
 800dce4:	429a      	cmp	r2, r3
 800dce6:	d146      	bne.n	800dd76 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800dce8:	4b25      	ldr	r3, [pc, #148]	; (800dd80 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	69ba      	ldr	r2, [r7, #24]
 800dcee:	429a      	cmp	r2, r3
 800dcf0:	d10a      	bne.n	800dd08 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800dcf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcf6:	f383 8811 	msr	BASEPRI, r3
 800dcfa:	f3bf 8f6f 	isb	sy
 800dcfe:	f3bf 8f4f 	dsb	sy
 800dd02:	60bb      	str	r3, [r7, #8]
}
 800dd04:	bf00      	nop
 800dd06:	e7fe      	b.n	800dd06 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800dd08:	69bb      	ldr	r3, [r7, #24]
 800dd0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd0c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800dd0e:	69bb      	ldr	r3, [r7, #24]
 800dd10:	69fa      	ldr	r2, [r7, #28]
 800dd12:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dd14:	69bb      	ldr	r3, [r7, #24]
 800dd16:	699b      	ldr	r3, [r3, #24]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	db04      	blt.n	800dd26 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd1c:	69fb      	ldr	r3, [r7, #28]
 800dd1e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dd22:	69bb      	ldr	r3, [r7, #24]
 800dd24:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800dd26:	69bb      	ldr	r3, [r7, #24]
 800dd28:	6959      	ldr	r1, [r3, #20]
 800dd2a:	693a      	ldr	r2, [r7, #16]
 800dd2c:	4613      	mov	r3, r2
 800dd2e:	009b      	lsls	r3, r3, #2
 800dd30:	4413      	add	r3, r2
 800dd32:	009b      	lsls	r3, r3, #2
 800dd34:	4a13      	ldr	r2, [pc, #76]	; (800dd84 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800dd36:	4413      	add	r3, r2
 800dd38:	4299      	cmp	r1, r3
 800dd3a:	d11c      	bne.n	800dd76 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dd3c:	69bb      	ldr	r3, [r7, #24]
 800dd3e:	3304      	adds	r3, #4
 800dd40:	4618      	mov	r0, r3
 800dd42:	f7fd feb9 	bl	800bab8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800dd46:	69bb      	ldr	r3, [r7, #24]
 800dd48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd4a:	4b0f      	ldr	r3, [pc, #60]	; (800dd88 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	429a      	cmp	r2, r3
 800dd50:	d903      	bls.n	800dd5a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800dd52:	69bb      	ldr	r3, [r7, #24]
 800dd54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd56:	4a0c      	ldr	r2, [pc, #48]	; (800dd88 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800dd58:	6013      	str	r3, [r2, #0]
 800dd5a:	69bb      	ldr	r3, [r7, #24]
 800dd5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd5e:	4613      	mov	r3, r2
 800dd60:	009b      	lsls	r3, r3, #2
 800dd62:	4413      	add	r3, r2
 800dd64:	009b      	lsls	r3, r3, #2
 800dd66:	4a07      	ldr	r2, [pc, #28]	; (800dd84 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800dd68:	441a      	add	r2, r3
 800dd6a:	69bb      	ldr	r3, [r7, #24]
 800dd6c:	3304      	adds	r3, #4
 800dd6e:	4619      	mov	r1, r3
 800dd70:	4610      	mov	r0, r2
 800dd72:	f7fd fe44 	bl	800b9fe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dd76:	bf00      	nop
 800dd78:	3720      	adds	r7, #32
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	bd80      	pop	{r7, pc}
 800dd7e:	bf00      	nop
 800dd80:	20000ef8 	.word	0x20000ef8
 800dd84:	20000efc 	.word	0x20000efc
 800dd88:	200013d4 	.word	0x200013d4

0800dd8c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800dd8c:	b480      	push	{r7}
 800dd8e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800dd90:	4b07      	ldr	r3, [pc, #28]	; (800ddb0 <pvTaskIncrementMutexHeldCount+0x24>)
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d004      	beq.n	800dda2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800dd98:	4b05      	ldr	r3, [pc, #20]	; (800ddb0 <pvTaskIncrementMutexHeldCount+0x24>)
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dd9e:	3201      	adds	r2, #1
 800dda0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800dda2:	4b03      	ldr	r3, [pc, #12]	; (800ddb0 <pvTaskIncrementMutexHeldCount+0x24>)
 800dda4:	681b      	ldr	r3, [r3, #0]
	}
 800dda6:	4618      	mov	r0, r3
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddae:	4770      	bx	lr
 800ddb0:	20000ef8 	.word	0x20000ef8

0800ddb4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	b084      	sub	sp, #16
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]
 800ddbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ddbe:	4b21      	ldr	r3, [pc, #132]	; (800de44 <prvAddCurrentTaskToDelayedList+0x90>)
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ddc4:	4b20      	ldr	r3, [pc, #128]	; (800de48 <prvAddCurrentTaskToDelayedList+0x94>)
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	3304      	adds	r3, #4
 800ddca:	4618      	mov	r0, r3
 800ddcc:	f7fd fe74 	bl	800bab8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddd6:	d10a      	bne.n	800ddee <prvAddCurrentTaskToDelayedList+0x3a>
 800ddd8:	683b      	ldr	r3, [r7, #0]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d007      	beq.n	800ddee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ddde:	4b1a      	ldr	r3, [pc, #104]	; (800de48 <prvAddCurrentTaskToDelayedList+0x94>)
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	3304      	adds	r3, #4
 800dde4:	4619      	mov	r1, r3
 800dde6:	4819      	ldr	r0, [pc, #100]	; (800de4c <prvAddCurrentTaskToDelayedList+0x98>)
 800dde8:	f7fd fe09 	bl	800b9fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ddec:	e026      	b.n	800de3c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ddee:	68fa      	ldr	r2, [r7, #12]
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	4413      	add	r3, r2
 800ddf4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ddf6:	4b14      	ldr	r3, [pc, #80]	; (800de48 <prvAddCurrentTaskToDelayedList+0x94>)
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	68ba      	ldr	r2, [r7, #8]
 800ddfc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ddfe:	68ba      	ldr	r2, [r7, #8]
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	429a      	cmp	r2, r3
 800de04:	d209      	bcs.n	800de1a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800de06:	4b12      	ldr	r3, [pc, #72]	; (800de50 <prvAddCurrentTaskToDelayedList+0x9c>)
 800de08:	681a      	ldr	r2, [r3, #0]
 800de0a:	4b0f      	ldr	r3, [pc, #60]	; (800de48 <prvAddCurrentTaskToDelayedList+0x94>)
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	3304      	adds	r3, #4
 800de10:	4619      	mov	r1, r3
 800de12:	4610      	mov	r0, r2
 800de14:	f7fd fe17 	bl	800ba46 <vListInsert>
}
 800de18:	e010      	b.n	800de3c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800de1a:	4b0e      	ldr	r3, [pc, #56]	; (800de54 <prvAddCurrentTaskToDelayedList+0xa0>)
 800de1c:	681a      	ldr	r2, [r3, #0]
 800de1e:	4b0a      	ldr	r3, [pc, #40]	; (800de48 <prvAddCurrentTaskToDelayedList+0x94>)
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	3304      	adds	r3, #4
 800de24:	4619      	mov	r1, r3
 800de26:	4610      	mov	r0, r2
 800de28:	f7fd fe0d 	bl	800ba46 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800de2c:	4b0a      	ldr	r3, [pc, #40]	; (800de58 <prvAddCurrentTaskToDelayedList+0xa4>)
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	68ba      	ldr	r2, [r7, #8]
 800de32:	429a      	cmp	r2, r3
 800de34:	d202      	bcs.n	800de3c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800de36:	4a08      	ldr	r2, [pc, #32]	; (800de58 <prvAddCurrentTaskToDelayedList+0xa4>)
 800de38:	68bb      	ldr	r3, [r7, #8]
 800de3a:	6013      	str	r3, [r2, #0]
}
 800de3c:	bf00      	nop
 800de3e:	3710      	adds	r7, #16
 800de40:	46bd      	mov	sp, r7
 800de42:	bd80      	pop	{r7, pc}
 800de44:	200013d0 	.word	0x200013d0
 800de48:	20000ef8 	.word	0x20000ef8
 800de4c:	200013b8 	.word	0x200013b8
 800de50:	20001388 	.word	0x20001388
 800de54:	20001384 	.word	0x20001384
 800de58:	200013ec 	.word	0x200013ec

0800de5c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b08a      	sub	sp, #40	; 0x28
 800de60:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800de62:	2300      	movs	r3, #0
 800de64:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800de66:	f000 fba1 	bl	800e5ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800de6a:	4b1c      	ldr	r3, [pc, #112]	; (800dedc <xTimerCreateTimerTask+0x80>)
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d021      	beq.n	800deb6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800de72:	2300      	movs	r3, #0
 800de74:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800de76:	2300      	movs	r3, #0
 800de78:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800de7a:	1d3a      	adds	r2, r7, #4
 800de7c:	f107 0108 	add.w	r1, r7, #8
 800de80:	f107 030c 	add.w	r3, r7, #12
 800de84:	4618      	mov	r0, r3
 800de86:	f7fd fd73 	bl	800b970 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800de8a:	6879      	ldr	r1, [r7, #4]
 800de8c:	68bb      	ldr	r3, [r7, #8]
 800de8e:	68fa      	ldr	r2, [r7, #12]
 800de90:	9202      	str	r2, [sp, #8]
 800de92:	9301      	str	r3, [sp, #4]
 800de94:	2302      	movs	r3, #2
 800de96:	9300      	str	r3, [sp, #0]
 800de98:	2300      	movs	r3, #0
 800de9a:	460a      	mov	r2, r1
 800de9c:	4910      	ldr	r1, [pc, #64]	; (800dee0 <xTimerCreateTimerTask+0x84>)
 800de9e:	4811      	ldr	r0, [pc, #68]	; (800dee4 <xTimerCreateTimerTask+0x88>)
 800dea0:	f7fe fef8 	bl	800cc94 <xTaskCreateStatic>
 800dea4:	4603      	mov	r3, r0
 800dea6:	4a10      	ldr	r2, [pc, #64]	; (800dee8 <xTimerCreateTimerTask+0x8c>)
 800dea8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800deaa:	4b0f      	ldr	r3, [pc, #60]	; (800dee8 <xTimerCreateTimerTask+0x8c>)
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d001      	beq.n	800deb6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800deb2:	2301      	movs	r3, #1
 800deb4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800deb6:	697b      	ldr	r3, [r7, #20]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d10a      	bne.n	800ded2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800debc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dec0:	f383 8811 	msr	BASEPRI, r3
 800dec4:	f3bf 8f6f 	isb	sy
 800dec8:	f3bf 8f4f 	dsb	sy
 800decc:	613b      	str	r3, [r7, #16]
}
 800dece:	bf00      	nop
 800ded0:	e7fe      	b.n	800ded0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ded2:	697b      	ldr	r3, [r7, #20]
}
 800ded4:	4618      	mov	r0, r3
 800ded6:	3718      	adds	r7, #24
 800ded8:	46bd      	mov	sp, r7
 800deda:	bd80      	pop	{r7, pc}
 800dedc:	20001428 	.word	0x20001428
 800dee0:	08010a64 	.word	0x08010a64
 800dee4:	0800e155 	.word	0x0800e155
 800dee8:	2000142c 	.word	0x2000142c

0800deec <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800deec:	b580      	push	{r7, lr}
 800deee:	b088      	sub	sp, #32
 800def0:	af02      	add	r7, sp, #8
 800def2:	60f8      	str	r0, [r7, #12]
 800def4:	60b9      	str	r1, [r7, #8]
 800def6:	607a      	str	r2, [r7, #4]
 800def8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800defa:	202c      	movs	r0, #44	; 0x2c
 800defc:	f000 fe04 	bl	800eb08 <pvPortMalloc>
 800df00:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800df02:	697b      	ldr	r3, [r7, #20]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d00d      	beq.n	800df24 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800df08:	697b      	ldr	r3, [r7, #20]
 800df0a:	2200      	movs	r2, #0
 800df0c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800df10:	697b      	ldr	r3, [r7, #20]
 800df12:	9301      	str	r3, [sp, #4]
 800df14:	6a3b      	ldr	r3, [r7, #32]
 800df16:	9300      	str	r3, [sp, #0]
 800df18:	683b      	ldr	r3, [r7, #0]
 800df1a:	687a      	ldr	r2, [r7, #4]
 800df1c:	68b9      	ldr	r1, [r7, #8]
 800df1e:	68f8      	ldr	r0, [r7, #12]
 800df20:	f000 f843 	bl	800dfaa <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800df24:	697b      	ldr	r3, [r7, #20]
	}
 800df26:	4618      	mov	r0, r3
 800df28:	3718      	adds	r7, #24
 800df2a:	46bd      	mov	sp, r7
 800df2c:	bd80      	pop	{r7, pc}

0800df2e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800df2e:	b580      	push	{r7, lr}
 800df30:	b08a      	sub	sp, #40	; 0x28
 800df32:	af02      	add	r7, sp, #8
 800df34:	60f8      	str	r0, [r7, #12]
 800df36:	60b9      	str	r1, [r7, #8]
 800df38:	607a      	str	r2, [r7, #4]
 800df3a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800df3c:	232c      	movs	r3, #44	; 0x2c
 800df3e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800df40:	693b      	ldr	r3, [r7, #16]
 800df42:	2b2c      	cmp	r3, #44	; 0x2c
 800df44:	d00a      	beq.n	800df5c <xTimerCreateStatic+0x2e>
	__asm volatile
 800df46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df4a:	f383 8811 	msr	BASEPRI, r3
 800df4e:	f3bf 8f6f 	isb	sy
 800df52:	f3bf 8f4f 	dsb	sy
 800df56:	61bb      	str	r3, [r7, #24]
}
 800df58:	bf00      	nop
 800df5a:	e7fe      	b.n	800df5a <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800df5c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800df5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df60:	2b00      	cmp	r3, #0
 800df62:	d10a      	bne.n	800df7a <xTimerCreateStatic+0x4c>
	__asm volatile
 800df64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df68:	f383 8811 	msr	BASEPRI, r3
 800df6c:	f3bf 8f6f 	isb	sy
 800df70:	f3bf 8f4f 	dsb	sy
 800df74:	617b      	str	r3, [r7, #20]
}
 800df76:	bf00      	nop
 800df78:	e7fe      	b.n	800df78 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800df7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df7c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800df7e:	69fb      	ldr	r3, [r7, #28]
 800df80:	2b00      	cmp	r3, #0
 800df82:	d00d      	beq.n	800dfa0 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800df84:	69fb      	ldr	r3, [r7, #28]
 800df86:	2202      	movs	r2, #2
 800df88:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800df8c:	69fb      	ldr	r3, [r7, #28]
 800df8e:	9301      	str	r3, [sp, #4]
 800df90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df92:	9300      	str	r3, [sp, #0]
 800df94:	683b      	ldr	r3, [r7, #0]
 800df96:	687a      	ldr	r2, [r7, #4]
 800df98:	68b9      	ldr	r1, [r7, #8]
 800df9a:	68f8      	ldr	r0, [r7, #12]
 800df9c:	f000 f805 	bl	800dfaa <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800dfa0:	69fb      	ldr	r3, [r7, #28]
	}
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	3720      	adds	r7, #32
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	bd80      	pop	{r7, pc}

0800dfaa <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800dfaa:	b580      	push	{r7, lr}
 800dfac:	b086      	sub	sp, #24
 800dfae:	af00      	add	r7, sp, #0
 800dfb0:	60f8      	str	r0, [r7, #12]
 800dfb2:	60b9      	str	r1, [r7, #8]
 800dfb4:	607a      	str	r2, [r7, #4]
 800dfb6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800dfb8:	68bb      	ldr	r3, [r7, #8]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d10a      	bne.n	800dfd4 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800dfbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfc2:	f383 8811 	msr	BASEPRI, r3
 800dfc6:	f3bf 8f6f 	isb	sy
 800dfca:	f3bf 8f4f 	dsb	sy
 800dfce:	617b      	str	r3, [r7, #20]
}
 800dfd0:	bf00      	nop
 800dfd2:	e7fe      	b.n	800dfd2 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800dfd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d01e      	beq.n	800e018 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800dfda:	f000 fae7 	bl	800e5ac <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800dfde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfe0:	68fa      	ldr	r2, [r7, #12]
 800dfe2:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800dfe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfe6:	68ba      	ldr	r2, [r7, #8]
 800dfe8:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800dfea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfec:	683a      	ldr	r2, [r7, #0]
 800dfee:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800dff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dff2:	6a3a      	ldr	r2, [r7, #32]
 800dff4:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800dff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dff8:	3304      	adds	r3, #4
 800dffa:	4618      	mov	r0, r3
 800dffc:	f7fd fcf2 	bl	800b9e4 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d008      	beq.n	800e018 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800e006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e008:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e00c:	f043 0304 	orr.w	r3, r3, #4
 800e010:	b2da      	uxtb	r2, r3
 800e012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e014:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800e018:	bf00      	nop
 800e01a:	3718      	adds	r7, #24
 800e01c:	46bd      	mov	sp, r7
 800e01e:	bd80      	pop	{r7, pc}

0800e020 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e020:	b580      	push	{r7, lr}
 800e022:	b08a      	sub	sp, #40	; 0x28
 800e024:	af00      	add	r7, sp, #0
 800e026:	60f8      	str	r0, [r7, #12]
 800e028:	60b9      	str	r1, [r7, #8]
 800e02a:	607a      	str	r2, [r7, #4]
 800e02c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e02e:	2300      	movs	r3, #0
 800e030:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d10a      	bne.n	800e04e <xTimerGenericCommand+0x2e>
	__asm volatile
 800e038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e03c:	f383 8811 	msr	BASEPRI, r3
 800e040:	f3bf 8f6f 	isb	sy
 800e044:	f3bf 8f4f 	dsb	sy
 800e048:	623b      	str	r3, [r7, #32]
}
 800e04a:	bf00      	nop
 800e04c:	e7fe      	b.n	800e04c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e04e:	4b1a      	ldr	r3, [pc, #104]	; (800e0b8 <xTimerGenericCommand+0x98>)
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d02a      	beq.n	800e0ac <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e056:	68bb      	ldr	r3, [r7, #8]
 800e058:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e062:	68bb      	ldr	r3, [r7, #8]
 800e064:	2b05      	cmp	r3, #5
 800e066:	dc18      	bgt.n	800e09a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e068:	f7ff fd1a 	bl	800daa0 <xTaskGetSchedulerState>
 800e06c:	4603      	mov	r3, r0
 800e06e:	2b02      	cmp	r3, #2
 800e070:	d109      	bne.n	800e086 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e072:	4b11      	ldr	r3, [pc, #68]	; (800e0b8 <xTimerGenericCommand+0x98>)
 800e074:	6818      	ldr	r0, [r3, #0]
 800e076:	f107 0110 	add.w	r1, r7, #16
 800e07a:	2300      	movs	r3, #0
 800e07c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e07e:	f7fd ffa3 	bl	800bfc8 <xQueueGenericSend>
 800e082:	6278      	str	r0, [r7, #36]	; 0x24
 800e084:	e012      	b.n	800e0ac <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e086:	4b0c      	ldr	r3, [pc, #48]	; (800e0b8 <xTimerGenericCommand+0x98>)
 800e088:	6818      	ldr	r0, [r3, #0]
 800e08a:	f107 0110 	add.w	r1, r7, #16
 800e08e:	2300      	movs	r3, #0
 800e090:	2200      	movs	r2, #0
 800e092:	f7fd ff99 	bl	800bfc8 <xQueueGenericSend>
 800e096:	6278      	str	r0, [r7, #36]	; 0x24
 800e098:	e008      	b.n	800e0ac <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e09a:	4b07      	ldr	r3, [pc, #28]	; (800e0b8 <xTimerGenericCommand+0x98>)
 800e09c:	6818      	ldr	r0, [r3, #0]
 800e09e:	f107 0110 	add.w	r1, r7, #16
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	683a      	ldr	r2, [r7, #0]
 800e0a6:	f7fe f88d 	bl	800c1c4 <xQueueGenericSendFromISR>
 800e0aa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	3728      	adds	r7, #40	; 0x28
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	bd80      	pop	{r7, pc}
 800e0b6:	bf00      	nop
 800e0b8:	20001428 	.word	0x20001428

0800e0bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	b088      	sub	sp, #32
 800e0c0:	af02      	add	r7, sp, #8
 800e0c2:	6078      	str	r0, [r7, #4]
 800e0c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0c6:	4b22      	ldr	r3, [pc, #136]	; (800e150 <prvProcessExpiredTimer+0x94>)
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	68db      	ldr	r3, [r3, #12]
 800e0cc:	68db      	ldr	r3, [r3, #12]
 800e0ce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e0d0:	697b      	ldr	r3, [r7, #20]
 800e0d2:	3304      	adds	r3, #4
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	f7fd fcef 	bl	800bab8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e0da:	697b      	ldr	r3, [r7, #20]
 800e0dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e0e0:	f003 0304 	and.w	r3, r3, #4
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d022      	beq.n	800e12e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e0e8:	697b      	ldr	r3, [r7, #20]
 800e0ea:	699a      	ldr	r2, [r3, #24]
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	18d1      	adds	r1, r2, r3
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	683a      	ldr	r2, [r7, #0]
 800e0f4:	6978      	ldr	r0, [r7, #20]
 800e0f6:	f000 f8d1 	bl	800e29c <prvInsertTimerInActiveList>
 800e0fa:	4603      	mov	r3, r0
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d01f      	beq.n	800e140 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e100:	2300      	movs	r3, #0
 800e102:	9300      	str	r3, [sp, #0]
 800e104:	2300      	movs	r3, #0
 800e106:	687a      	ldr	r2, [r7, #4]
 800e108:	2100      	movs	r1, #0
 800e10a:	6978      	ldr	r0, [r7, #20]
 800e10c:	f7ff ff88 	bl	800e020 <xTimerGenericCommand>
 800e110:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e112:	693b      	ldr	r3, [r7, #16]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d113      	bne.n	800e140 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e11c:	f383 8811 	msr	BASEPRI, r3
 800e120:	f3bf 8f6f 	isb	sy
 800e124:	f3bf 8f4f 	dsb	sy
 800e128:	60fb      	str	r3, [r7, #12]
}
 800e12a:	bf00      	nop
 800e12c:	e7fe      	b.n	800e12c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e12e:	697b      	ldr	r3, [r7, #20]
 800e130:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e134:	f023 0301 	bic.w	r3, r3, #1
 800e138:	b2da      	uxtb	r2, r3
 800e13a:	697b      	ldr	r3, [r7, #20]
 800e13c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e140:	697b      	ldr	r3, [r7, #20]
 800e142:	6a1b      	ldr	r3, [r3, #32]
 800e144:	6978      	ldr	r0, [r7, #20]
 800e146:	4798      	blx	r3
}
 800e148:	bf00      	nop
 800e14a:	3718      	adds	r7, #24
 800e14c:	46bd      	mov	sp, r7
 800e14e:	bd80      	pop	{r7, pc}
 800e150:	20001420 	.word	0x20001420

0800e154 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b084      	sub	sp, #16
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e15c:	f107 0308 	add.w	r3, r7, #8
 800e160:	4618      	mov	r0, r3
 800e162:	f000 f857 	bl	800e214 <prvGetNextExpireTime>
 800e166:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e168:	68bb      	ldr	r3, [r7, #8]
 800e16a:	4619      	mov	r1, r3
 800e16c:	68f8      	ldr	r0, [r7, #12]
 800e16e:	f000 f803 	bl	800e178 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e172:	f000 f8d5 	bl	800e320 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e176:	e7f1      	b.n	800e15c <prvTimerTask+0x8>

0800e178 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	b084      	sub	sp, #16
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
 800e180:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e182:	f7ff f89b 	bl	800d2bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e186:	f107 0308 	add.w	r3, r7, #8
 800e18a:	4618      	mov	r0, r3
 800e18c:	f000 f866 	bl	800e25c <prvSampleTimeNow>
 800e190:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e192:	68bb      	ldr	r3, [r7, #8]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d130      	bne.n	800e1fa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e198:	683b      	ldr	r3, [r7, #0]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d10a      	bne.n	800e1b4 <prvProcessTimerOrBlockTask+0x3c>
 800e19e:	687a      	ldr	r2, [r7, #4]
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	429a      	cmp	r2, r3
 800e1a4:	d806      	bhi.n	800e1b4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e1a6:	f7ff f897 	bl	800d2d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e1aa:	68f9      	ldr	r1, [r7, #12]
 800e1ac:	6878      	ldr	r0, [r7, #4]
 800e1ae:	f7ff ff85 	bl	800e0bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e1b2:	e024      	b.n	800e1fe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e1b4:	683b      	ldr	r3, [r7, #0]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d008      	beq.n	800e1cc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e1ba:	4b13      	ldr	r3, [pc, #76]	; (800e208 <prvProcessTimerOrBlockTask+0x90>)
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d101      	bne.n	800e1c8 <prvProcessTimerOrBlockTask+0x50>
 800e1c4:	2301      	movs	r3, #1
 800e1c6:	e000      	b.n	800e1ca <prvProcessTimerOrBlockTask+0x52>
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e1cc:	4b0f      	ldr	r3, [pc, #60]	; (800e20c <prvProcessTimerOrBlockTask+0x94>)
 800e1ce:	6818      	ldr	r0, [r3, #0]
 800e1d0:	687a      	ldr	r2, [r7, #4]
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	1ad3      	subs	r3, r2, r3
 800e1d6:	683a      	ldr	r2, [r7, #0]
 800e1d8:	4619      	mov	r1, r3
 800e1da:	f7fe fd27 	bl	800cc2c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e1de:	f7ff f87b 	bl	800d2d8 <xTaskResumeAll>
 800e1e2:	4603      	mov	r3, r0
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d10a      	bne.n	800e1fe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e1e8:	4b09      	ldr	r3, [pc, #36]	; (800e210 <prvProcessTimerOrBlockTask+0x98>)
 800e1ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1ee:	601a      	str	r2, [r3, #0]
 800e1f0:	f3bf 8f4f 	dsb	sy
 800e1f4:	f3bf 8f6f 	isb	sy
}
 800e1f8:	e001      	b.n	800e1fe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e1fa:	f7ff f86d 	bl	800d2d8 <xTaskResumeAll>
}
 800e1fe:	bf00      	nop
 800e200:	3710      	adds	r7, #16
 800e202:	46bd      	mov	sp, r7
 800e204:	bd80      	pop	{r7, pc}
 800e206:	bf00      	nop
 800e208:	20001424 	.word	0x20001424
 800e20c:	20001428 	.word	0x20001428
 800e210:	e000ed04 	.word	0xe000ed04

0800e214 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e214:	b480      	push	{r7}
 800e216:	b085      	sub	sp, #20
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e21c:	4b0e      	ldr	r3, [pc, #56]	; (800e258 <prvGetNextExpireTime+0x44>)
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d101      	bne.n	800e22a <prvGetNextExpireTime+0x16>
 800e226:	2201      	movs	r2, #1
 800e228:	e000      	b.n	800e22c <prvGetNextExpireTime+0x18>
 800e22a:	2200      	movs	r2, #0
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d105      	bne.n	800e244 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e238:	4b07      	ldr	r3, [pc, #28]	; (800e258 <prvGetNextExpireTime+0x44>)
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	68db      	ldr	r3, [r3, #12]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	60fb      	str	r3, [r7, #12]
 800e242:	e001      	b.n	800e248 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e244:	2300      	movs	r3, #0
 800e246:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e248:	68fb      	ldr	r3, [r7, #12]
}
 800e24a:	4618      	mov	r0, r3
 800e24c:	3714      	adds	r7, #20
 800e24e:	46bd      	mov	sp, r7
 800e250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e254:	4770      	bx	lr
 800e256:	bf00      	nop
 800e258:	20001420 	.word	0x20001420

0800e25c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e25c:	b580      	push	{r7, lr}
 800e25e:	b084      	sub	sp, #16
 800e260:	af00      	add	r7, sp, #0
 800e262:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e264:	f7ff f8d6 	bl	800d414 <xTaskGetTickCount>
 800e268:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e26a:	4b0b      	ldr	r3, [pc, #44]	; (800e298 <prvSampleTimeNow+0x3c>)
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	68fa      	ldr	r2, [r7, #12]
 800e270:	429a      	cmp	r2, r3
 800e272:	d205      	bcs.n	800e280 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e274:	f000 f936 	bl	800e4e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	2201      	movs	r2, #1
 800e27c:	601a      	str	r2, [r3, #0]
 800e27e:	e002      	b.n	800e286 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	2200      	movs	r2, #0
 800e284:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e286:	4a04      	ldr	r2, [pc, #16]	; (800e298 <prvSampleTimeNow+0x3c>)
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e28c:	68fb      	ldr	r3, [r7, #12]
}
 800e28e:	4618      	mov	r0, r3
 800e290:	3710      	adds	r7, #16
 800e292:	46bd      	mov	sp, r7
 800e294:	bd80      	pop	{r7, pc}
 800e296:	bf00      	nop
 800e298:	20001430 	.word	0x20001430

0800e29c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b086      	sub	sp, #24
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	60f8      	str	r0, [r7, #12]
 800e2a4:	60b9      	str	r1, [r7, #8]
 800e2a6:	607a      	str	r2, [r7, #4]
 800e2a8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	68ba      	ldr	r2, [r7, #8]
 800e2b2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	68fa      	ldr	r2, [r7, #12]
 800e2b8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e2ba:	68ba      	ldr	r2, [r7, #8]
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	429a      	cmp	r2, r3
 800e2c0:	d812      	bhi.n	800e2e8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e2c2:	687a      	ldr	r2, [r7, #4]
 800e2c4:	683b      	ldr	r3, [r7, #0]
 800e2c6:	1ad2      	subs	r2, r2, r3
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	699b      	ldr	r3, [r3, #24]
 800e2cc:	429a      	cmp	r2, r3
 800e2ce:	d302      	bcc.n	800e2d6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e2d0:	2301      	movs	r3, #1
 800e2d2:	617b      	str	r3, [r7, #20]
 800e2d4:	e01b      	b.n	800e30e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e2d6:	4b10      	ldr	r3, [pc, #64]	; (800e318 <prvInsertTimerInActiveList+0x7c>)
 800e2d8:	681a      	ldr	r2, [r3, #0]
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	3304      	adds	r3, #4
 800e2de:	4619      	mov	r1, r3
 800e2e0:	4610      	mov	r0, r2
 800e2e2:	f7fd fbb0 	bl	800ba46 <vListInsert>
 800e2e6:	e012      	b.n	800e30e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e2e8:	687a      	ldr	r2, [r7, #4]
 800e2ea:	683b      	ldr	r3, [r7, #0]
 800e2ec:	429a      	cmp	r2, r3
 800e2ee:	d206      	bcs.n	800e2fe <prvInsertTimerInActiveList+0x62>
 800e2f0:	68ba      	ldr	r2, [r7, #8]
 800e2f2:	683b      	ldr	r3, [r7, #0]
 800e2f4:	429a      	cmp	r2, r3
 800e2f6:	d302      	bcc.n	800e2fe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e2f8:	2301      	movs	r3, #1
 800e2fa:	617b      	str	r3, [r7, #20]
 800e2fc:	e007      	b.n	800e30e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e2fe:	4b07      	ldr	r3, [pc, #28]	; (800e31c <prvInsertTimerInActiveList+0x80>)
 800e300:	681a      	ldr	r2, [r3, #0]
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	3304      	adds	r3, #4
 800e306:	4619      	mov	r1, r3
 800e308:	4610      	mov	r0, r2
 800e30a:	f7fd fb9c 	bl	800ba46 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e30e:	697b      	ldr	r3, [r7, #20]
}
 800e310:	4618      	mov	r0, r3
 800e312:	3718      	adds	r7, #24
 800e314:	46bd      	mov	sp, r7
 800e316:	bd80      	pop	{r7, pc}
 800e318:	20001424 	.word	0x20001424
 800e31c:	20001420 	.word	0x20001420

0800e320 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e320:	b580      	push	{r7, lr}
 800e322:	b08e      	sub	sp, #56	; 0x38
 800e324:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e326:	e0ca      	b.n	800e4be <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	da18      	bge.n	800e360 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e32e:	1d3b      	adds	r3, r7, #4
 800e330:	3304      	adds	r3, #4
 800e332:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e336:	2b00      	cmp	r3, #0
 800e338:	d10a      	bne.n	800e350 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e33a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e33e:	f383 8811 	msr	BASEPRI, r3
 800e342:	f3bf 8f6f 	isb	sy
 800e346:	f3bf 8f4f 	dsb	sy
 800e34a:	61fb      	str	r3, [r7, #28]
}
 800e34c:	bf00      	nop
 800e34e:	e7fe      	b.n	800e34e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e356:	6850      	ldr	r0, [r2, #4]
 800e358:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e35a:	6892      	ldr	r2, [r2, #8]
 800e35c:	4611      	mov	r1, r2
 800e35e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	2b00      	cmp	r3, #0
 800e364:	f2c0 80aa 	blt.w	800e4bc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e36e:	695b      	ldr	r3, [r3, #20]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d004      	beq.n	800e37e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e376:	3304      	adds	r3, #4
 800e378:	4618      	mov	r0, r3
 800e37a:	f7fd fb9d 	bl	800bab8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e37e:	463b      	mov	r3, r7
 800e380:	4618      	mov	r0, r3
 800e382:	f7ff ff6b 	bl	800e25c <prvSampleTimeNow>
 800e386:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	2b09      	cmp	r3, #9
 800e38c:	f200 8097 	bhi.w	800e4be <prvProcessReceivedCommands+0x19e>
 800e390:	a201      	add	r2, pc, #4	; (adr r2, 800e398 <prvProcessReceivedCommands+0x78>)
 800e392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e396:	bf00      	nop
 800e398:	0800e3c1 	.word	0x0800e3c1
 800e39c:	0800e3c1 	.word	0x0800e3c1
 800e3a0:	0800e3c1 	.word	0x0800e3c1
 800e3a4:	0800e435 	.word	0x0800e435
 800e3a8:	0800e449 	.word	0x0800e449
 800e3ac:	0800e493 	.word	0x0800e493
 800e3b0:	0800e3c1 	.word	0x0800e3c1
 800e3b4:	0800e3c1 	.word	0x0800e3c1
 800e3b8:	0800e435 	.word	0x0800e435
 800e3bc:	0800e449 	.word	0x0800e449
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e3c6:	f043 0301 	orr.w	r3, r3, #1
 800e3ca:	b2da      	uxtb	r2, r3
 800e3cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e3d2:	68ba      	ldr	r2, [r7, #8]
 800e3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3d6:	699b      	ldr	r3, [r3, #24]
 800e3d8:	18d1      	adds	r1, r2, r3
 800e3da:	68bb      	ldr	r3, [r7, #8]
 800e3dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e3e0:	f7ff ff5c 	bl	800e29c <prvInsertTimerInActiveList>
 800e3e4:	4603      	mov	r3, r0
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d069      	beq.n	800e4be <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e3ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ec:	6a1b      	ldr	r3, [r3, #32]
 800e3ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e3f0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e3f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e3f8:	f003 0304 	and.w	r3, r3, #4
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d05e      	beq.n	800e4be <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e400:	68ba      	ldr	r2, [r7, #8]
 800e402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e404:	699b      	ldr	r3, [r3, #24]
 800e406:	441a      	add	r2, r3
 800e408:	2300      	movs	r3, #0
 800e40a:	9300      	str	r3, [sp, #0]
 800e40c:	2300      	movs	r3, #0
 800e40e:	2100      	movs	r1, #0
 800e410:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e412:	f7ff fe05 	bl	800e020 <xTimerGenericCommand>
 800e416:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e418:	6a3b      	ldr	r3, [r7, #32]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d14f      	bne.n	800e4be <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e422:	f383 8811 	msr	BASEPRI, r3
 800e426:	f3bf 8f6f 	isb	sy
 800e42a:	f3bf 8f4f 	dsb	sy
 800e42e:	61bb      	str	r3, [r7, #24]
}
 800e430:	bf00      	nop
 800e432:	e7fe      	b.n	800e432 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e436:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e43a:	f023 0301 	bic.w	r3, r3, #1
 800e43e:	b2da      	uxtb	r2, r3
 800e440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e442:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e446:	e03a      	b.n	800e4be <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e44a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e44e:	f043 0301 	orr.w	r3, r3, #1
 800e452:	b2da      	uxtb	r2, r3
 800e454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e456:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e45a:	68ba      	ldr	r2, [r7, #8]
 800e45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e45e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e462:	699b      	ldr	r3, [r3, #24]
 800e464:	2b00      	cmp	r3, #0
 800e466:	d10a      	bne.n	800e47e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e46c:	f383 8811 	msr	BASEPRI, r3
 800e470:	f3bf 8f6f 	isb	sy
 800e474:	f3bf 8f4f 	dsb	sy
 800e478:	617b      	str	r3, [r7, #20]
}
 800e47a:	bf00      	nop
 800e47c:	e7fe      	b.n	800e47c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e480:	699a      	ldr	r2, [r3, #24]
 800e482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e484:	18d1      	adds	r1, r2, r3
 800e486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e48a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e48c:	f7ff ff06 	bl	800e29c <prvInsertTimerInActiveList>
					break;
 800e490:	e015      	b.n	800e4be <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e494:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e498:	f003 0302 	and.w	r3, r3, #2
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d103      	bne.n	800e4a8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e4a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e4a2:	f000 fbfd 	bl	800eca0 <vPortFree>
 800e4a6:	e00a      	b.n	800e4be <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e4ae:	f023 0301 	bic.w	r3, r3, #1
 800e4b2:	b2da      	uxtb	r2, r3
 800e4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e4ba:	e000      	b.n	800e4be <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e4bc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e4be:	4b08      	ldr	r3, [pc, #32]	; (800e4e0 <prvProcessReceivedCommands+0x1c0>)
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	1d39      	adds	r1, r7, #4
 800e4c4:	2200      	movs	r2, #0
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	f7fd ffa4 	bl	800c414 <xQueueReceive>
 800e4cc:	4603      	mov	r3, r0
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	f47f af2a 	bne.w	800e328 <prvProcessReceivedCommands+0x8>
	}
}
 800e4d4:	bf00      	nop
 800e4d6:	bf00      	nop
 800e4d8:	3730      	adds	r7, #48	; 0x30
 800e4da:	46bd      	mov	sp, r7
 800e4dc:	bd80      	pop	{r7, pc}
 800e4de:	bf00      	nop
 800e4e0:	20001428 	.word	0x20001428

0800e4e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b088      	sub	sp, #32
 800e4e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e4ea:	e048      	b.n	800e57e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e4ec:	4b2d      	ldr	r3, [pc, #180]	; (800e5a4 <prvSwitchTimerLists+0xc0>)
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	68db      	ldr	r3, [r3, #12]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4f6:	4b2b      	ldr	r3, [pc, #172]	; (800e5a4 <prvSwitchTimerLists+0xc0>)
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	68db      	ldr	r3, [r3, #12]
 800e4fc:	68db      	ldr	r3, [r3, #12]
 800e4fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	3304      	adds	r3, #4
 800e504:	4618      	mov	r0, r3
 800e506:	f7fd fad7 	bl	800bab8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	6a1b      	ldr	r3, [r3, #32]
 800e50e:	68f8      	ldr	r0, [r7, #12]
 800e510:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e518:	f003 0304 	and.w	r3, r3, #4
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d02e      	beq.n	800e57e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	699b      	ldr	r3, [r3, #24]
 800e524:	693a      	ldr	r2, [r7, #16]
 800e526:	4413      	add	r3, r2
 800e528:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e52a:	68ba      	ldr	r2, [r7, #8]
 800e52c:	693b      	ldr	r3, [r7, #16]
 800e52e:	429a      	cmp	r2, r3
 800e530:	d90e      	bls.n	800e550 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	68ba      	ldr	r2, [r7, #8]
 800e536:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	68fa      	ldr	r2, [r7, #12]
 800e53c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e53e:	4b19      	ldr	r3, [pc, #100]	; (800e5a4 <prvSwitchTimerLists+0xc0>)
 800e540:	681a      	ldr	r2, [r3, #0]
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	3304      	adds	r3, #4
 800e546:	4619      	mov	r1, r3
 800e548:	4610      	mov	r0, r2
 800e54a:	f7fd fa7c 	bl	800ba46 <vListInsert>
 800e54e:	e016      	b.n	800e57e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e550:	2300      	movs	r3, #0
 800e552:	9300      	str	r3, [sp, #0]
 800e554:	2300      	movs	r3, #0
 800e556:	693a      	ldr	r2, [r7, #16]
 800e558:	2100      	movs	r1, #0
 800e55a:	68f8      	ldr	r0, [r7, #12]
 800e55c:	f7ff fd60 	bl	800e020 <xTimerGenericCommand>
 800e560:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d10a      	bne.n	800e57e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e56c:	f383 8811 	msr	BASEPRI, r3
 800e570:	f3bf 8f6f 	isb	sy
 800e574:	f3bf 8f4f 	dsb	sy
 800e578:	603b      	str	r3, [r7, #0]
}
 800e57a:	bf00      	nop
 800e57c:	e7fe      	b.n	800e57c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e57e:	4b09      	ldr	r3, [pc, #36]	; (800e5a4 <prvSwitchTimerLists+0xc0>)
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d1b1      	bne.n	800e4ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e588:	4b06      	ldr	r3, [pc, #24]	; (800e5a4 <prvSwitchTimerLists+0xc0>)
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e58e:	4b06      	ldr	r3, [pc, #24]	; (800e5a8 <prvSwitchTimerLists+0xc4>)
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	4a04      	ldr	r2, [pc, #16]	; (800e5a4 <prvSwitchTimerLists+0xc0>)
 800e594:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e596:	4a04      	ldr	r2, [pc, #16]	; (800e5a8 <prvSwitchTimerLists+0xc4>)
 800e598:	697b      	ldr	r3, [r7, #20]
 800e59a:	6013      	str	r3, [r2, #0]
}
 800e59c:	bf00      	nop
 800e59e:	3718      	adds	r7, #24
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	bd80      	pop	{r7, pc}
 800e5a4:	20001420 	.word	0x20001420
 800e5a8:	20001424 	.word	0x20001424

0800e5ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	b082      	sub	sp, #8
 800e5b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e5b2:	f000 f987 	bl	800e8c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e5b6:	4b15      	ldr	r3, [pc, #84]	; (800e60c <prvCheckForValidListAndQueue+0x60>)
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d120      	bne.n	800e600 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e5be:	4814      	ldr	r0, [pc, #80]	; (800e610 <prvCheckForValidListAndQueue+0x64>)
 800e5c0:	f7fd f9f0 	bl	800b9a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e5c4:	4813      	ldr	r0, [pc, #76]	; (800e614 <prvCheckForValidListAndQueue+0x68>)
 800e5c6:	f7fd f9ed 	bl	800b9a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e5ca:	4b13      	ldr	r3, [pc, #76]	; (800e618 <prvCheckForValidListAndQueue+0x6c>)
 800e5cc:	4a10      	ldr	r2, [pc, #64]	; (800e610 <prvCheckForValidListAndQueue+0x64>)
 800e5ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e5d0:	4b12      	ldr	r3, [pc, #72]	; (800e61c <prvCheckForValidListAndQueue+0x70>)
 800e5d2:	4a10      	ldr	r2, [pc, #64]	; (800e614 <prvCheckForValidListAndQueue+0x68>)
 800e5d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	9300      	str	r3, [sp, #0]
 800e5da:	4b11      	ldr	r3, [pc, #68]	; (800e620 <prvCheckForValidListAndQueue+0x74>)
 800e5dc:	4a11      	ldr	r2, [pc, #68]	; (800e624 <prvCheckForValidListAndQueue+0x78>)
 800e5de:	2110      	movs	r1, #16
 800e5e0:	200a      	movs	r0, #10
 800e5e2:	f7fd fafb 	bl	800bbdc <xQueueGenericCreateStatic>
 800e5e6:	4603      	mov	r3, r0
 800e5e8:	4a08      	ldr	r2, [pc, #32]	; (800e60c <prvCheckForValidListAndQueue+0x60>)
 800e5ea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e5ec:	4b07      	ldr	r3, [pc, #28]	; (800e60c <prvCheckForValidListAndQueue+0x60>)
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d005      	beq.n	800e600 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e5f4:	4b05      	ldr	r3, [pc, #20]	; (800e60c <prvCheckForValidListAndQueue+0x60>)
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	490b      	ldr	r1, [pc, #44]	; (800e628 <prvCheckForValidListAndQueue+0x7c>)
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	f7fe fac2 	bl	800cb84 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e600:	f000 f990 	bl	800e924 <vPortExitCritical>
}
 800e604:	bf00      	nop
 800e606:	46bd      	mov	sp, r7
 800e608:	bd80      	pop	{r7, pc}
 800e60a:	bf00      	nop
 800e60c:	20001428 	.word	0x20001428
 800e610:	200013f8 	.word	0x200013f8
 800e614:	2000140c 	.word	0x2000140c
 800e618:	20001420 	.word	0x20001420
 800e61c:	20001424 	.word	0x20001424
 800e620:	200014d4 	.word	0x200014d4
 800e624:	20001434 	.word	0x20001434
 800e628:	08010a6c 	.word	0x08010a6c

0800e62c <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b086      	sub	sp, #24
 800e630:	af00      	add	r7, sp, #0
 800e632:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d10a      	bne.n	800e654 <pvTimerGetTimerID+0x28>
	__asm volatile
 800e63e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e642:	f383 8811 	msr	BASEPRI, r3
 800e646:	f3bf 8f6f 	isb	sy
 800e64a:	f3bf 8f4f 	dsb	sy
 800e64e:	60fb      	str	r3, [r7, #12]
}
 800e650:	bf00      	nop
 800e652:	e7fe      	b.n	800e652 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800e654:	f000 f936 	bl	800e8c4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800e658:	697b      	ldr	r3, [r7, #20]
 800e65a:	69db      	ldr	r3, [r3, #28]
 800e65c:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800e65e:	f000 f961 	bl	800e924 <vPortExitCritical>

	return pvReturn;
 800e662:	693b      	ldr	r3, [r7, #16]
}
 800e664:	4618      	mov	r0, r3
 800e666:	3718      	adds	r7, #24
 800e668:	46bd      	mov	sp, r7
 800e66a:	bd80      	pop	{r7, pc}

0800e66c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e66c:	b480      	push	{r7}
 800e66e:	b085      	sub	sp, #20
 800e670:	af00      	add	r7, sp, #0
 800e672:	60f8      	str	r0, [r7, #12]
 800e674:	60b9      	str	r1, [r7, #8]
 800e676:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	3b04      	subs	r3, #4
 800e67c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e684:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	3b04      	subs	r3, #4
 800e68a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e68c:	68bb      	ldr	r3, [r7, #8]
 800e68e:	f023 0201 	bic.w	r2, r3, #1
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	3b04      	subs	r3, #4
 800e69a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e69c:	4a0c      	ldr	r2, [pc, #48]	; (800e6d0 <pxPortInitialiseStack+0x64>)
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	3b14      	subs	r3, #20
 800e6a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e6a8:	687a      	ldr	r2, [r7, #4]
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	3b04      	subs	r3, #4
 800e6b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	f06f 0202 	mvn.w	r2, #2
 800e6ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	3b20      	subs	r3, #32
 800e6c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e6c2:	68fb      	ldr	r3, [r7, #12]
}
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	3714      	adds	r7, #20
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ce:	4770      	bx	lr
 800e6d0:	0800e6d5 	.word	0x0800e6d5

0800e6d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e6d4:	b480      	push	{r7}
 800e6d6:	b085      	sub	sp, #20
 800e6d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e6da:	2300      	movs	r3, #0
 800e6dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e6de:	4b12      	ldr	r3, [pc, #72]	; (800e728 <prvTaskExitError+0x54>)
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6e6:	d00a      	beq.n	800e6fe <prvTaskExitError+0x2a>
	__asm volatile
 800e6e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6ec:	f383 8811 	msr	BASEPRI, r3
 800e6f0:	f3bf 8f6f 	isb	sy
 800e6f4:	f3bf 8f4f 	dsb	sy
 800e6f8:	60fb      	str	r3, [r7, #12]
}
 800e6fa:	bf00      	nop
 800e6fc:	e7fe      	b.n	800e6fc <prvTaskExitError+0x28>
	__asm volatile
 800e6fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e702:	f383 8811 	msr	BASEPRI, r3
 800e706:	f3bf 8f6f 	isb	sy
 800e70a:	f3bf 8f4f 	dsb	sy
 800e70e:	60bb      	str	r3, [r7, #8]
}
 800e710:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e712:	bf00      	nop
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d0fc      	beq.n	800e714 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e71a:	bf00      	nop
 800e71c:	bf00      	nop
 800e71e:	3714      	adds	r7, #20
 800e720:	46bd      	mov	sp, r7
 800e722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e726:	4770      	bx	lr
 800e728:	20000034 	.word	0x20000034
 800e72c:	00000000 	.word	0x00000000

0800e730 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e730:	4b07      	ldr	r3, [pc, #28]	; (800e750 <pxCurrentTCBConst2>)
 800e732:	6819      	ldr	r1, [r3, #0]
 800e734:	6808      	ldr	r0, [r1, #0]
 800e736:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e73a:	f380 8809 	msr	PSP, r0
 800e73e:	f3bf 8f6f 	isb	sy
 800e742:	f04f 0000 	mov.w	r0, #0
 800e746:	f380 8811 	msr	BASEPRI, r0
 800e74a:	4770      	bx	lr
 800e74c:	f3af 8000 	nop.w

0800e750 <pxCurrentTCBConst2>:
 800e750:	20000ef8 	.word	0x20000ef8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e754:	bf00      	nop
 800e756:	bf00      	nop

0800e758 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e758:	4808      	ldr	r0, [pc, #32]	; (800e77c <prvPortStartFirstTask+0x24>)
 800e75a:	6800      	ldr	r0, [r0, #0]
 800e75c:	6800      	ldr	r0, [r0, #0]
 800e75e:	f380 8808 	msr	MSP, r0
 800e762:	f04f 0000 	mov.w	r0, #0
 800e766:	f380 8814 	msr	CONTROL, r0
 800e76a:	b662      	cpsie	i
 800e76c:	b661      	cpsie	f
 800e76e:	f3bf 8f4f 	dsb	sy
 800e772:	f3bf 8f6f 	isb	sy
 800e776:	df00      	svc	0
 800e778:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e77a:	bf00      	nop
 800e77c:	e000ed08 	.word	0xe000ed08

0800e780 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b086      	sub	sp, #24
 800e784:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e786:	4b46      	ldr	r3, [pc, #280]	; (800e8a0 <xPortStartScheduler+0x120>)
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	4a46      	ldr	r2, [pc, #280]	; (800e8a4 <xPortStartScheduler+0x124>)
 800e78c:	4293      	cmp	r3, r2
 800e78e:	d10a      	bne.n	800e7a6 <xPortStartScheduler+0x26>
	__asm volatile
 800e790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e794:	f383 8811 	msr	BASEPRI, r3
 800e798:	f3bf 8f6f 	isb	sy
 800e79c:	f3bf 8f4f 	dsb	sy
 800e7a0:	613b      	str	r3, [r7, #16]
}
 800e7a2:	bf00      	nop
 800e7a4:	e7fe      	b.n	800e7a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e7a6:	4b3e      	ldr	r3, [pc, #248]	; (800e8a0 <xPortStartScheduler+0x120>)
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	4a3f      	ldr	r2, [pc, #252]	; (800e8a8 <xPortStartScheduler+0x128>)
 800e7ac:	4293      	cmp	r3, r2
 800e7ae:	d10a      	bne.n	800e7c6 <xPortStartScheduler+0x46>
	__asm volatile
 800e7b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7b4:	f383 8811 	msr	BASEPRI, r3
 800e7b8:	f3bf 8f6f 	isb	sy
 800e7bc:	f3bf 8f4f 	dsb	sy
 800e7c0:	60fb      	str	r3, [r7, #12]
}
 800e7c2:	bf00      	nop
 800e7c4:	e7fe      	b.n	800e7c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e7c6:	4b39      	ldr	r3, [pc, #228]	; (800e8ac <xPortStartScheduler+0x12c>)
 800e7c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e7ca:	697b      	ldr	r3, [r7, #20]
 800e7cc:	781b      	ldrb	r3, [r3, #0]
 800e7ce:	b2db      	uxtb	r3, r3
 800e7d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e7d2:	697b      	ldr	r3, [r7, #20]
 800e7d4:	22ff      	movs	r2, #255	; 0xff
 800e7d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e7d8:	697b      	ldr	r3, [r7, #20]
 800e7da:	781b      	ldrb	r3, [r3, #0]
 800e7dc:	b2db      	uxtb	r3, r3
 800e7de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e7e0:	78fb      	ldrb	r3, [r7, #3]
 800e7e2:	b2db      	uxtb	r3, r3
 800e7e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e7e8:	b2da      	uxtb	r2, r3
 800e7ea:	4b31      	ldr	r3, [pc, #196]	; (800e8b0 <xPortStartScheduler+0x130>)
 800e7ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e7ee:	4b31      	ldr	r3, [pc, #196]	; (800e8b4 <xPortStartScheduler+0x134>)
 800e7f0:	2207      	movs	r2, #7
 800e7f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e7f4:	e009      	b.n	800e80a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e7f6:	4b2f      	ldr	r3, [pc, #188]	; (800e8b4 <xPortStartScheduler+0x134>)
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	3b01      	subs	r3, #1
 800e7fc:	4a2d      	ldr	r2, [pc, #180]	; (800e8b4 <xPortStartScheduler+0x134>)
 800e7fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e800:	78fb      	ldrb	r3, [r7, #3]
 800e802:	b2db      	uxtb	r3, r3
 800e804:	005b      	lsls	r3, r3, #1
 800e806:	b2db      	uxtb	r3, r3
 800e808:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e80a:	78fb      	ldrb	r3, [r7, #3]
 800e80c:	b2db      	uxtb	r3, r3
 800e80e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e812:	2b80      	cmp	r3, #128	; 0x80
 800e814:	d0ef      	beq.n	800e7f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e816:	4b27      	ldr	r3, [pc, #156]	; (800e8b4 <xPortStartScheduler+0x134>)
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	f1c3 0307 	rsb	r3, r3, #7
 800e81e:	2b04      	cmp	r3, #4
 800e820:	d00a      	beq.n	800e838 <xPortStartScheduler+0xb8>
	__asm volatile
 800e822:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e826:	f383 8811 	msr	BASEPRI, r3
 800e82a:	f3bf 8f6f 	isb	sy
 800e82e:	f3bf 8f4f 	dsb	sy
 800e832:	60bb      	str	r3, [r7, #8]
}
 800e834:	bf00      	nop
 800e836:	e7fe      	b.n	800e836 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e838:	4b1e      	ldr	r3, [pc, #120]	; (800e8b4 <xPortStartScheduler+0x134>)
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	021b      	lsls	r3, r3, #8
 800e83e:	4a1d      	ldr	r2, [pc, #116]	; (800e8b4 <xPortStartScheduler+0x134>)
 800e840:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e842:	4b1c      	ldr	r3, [pc, #112]	; (800e8b4 <xPortStartScheduler+0x134>)
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e84a:	4a1a      	ldr	r2, [pc, #104]	; (800e8b4 <xPortStartScheduler+0x134>)
 800e84c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	b2da      	uxtb	r2, r3
 800e852:	697b      	ldr	r3, [r7, #20]
 800e854:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e856:	4b18      	ldr	r3, [pc, #96]	; (800e8b8 <xPortStartScheduler+0x138>)
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	4a17      	ldr	r2, [pc, #92]	; (800e8b8 <xPortStartScheduler+0x138>)
 800e85c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e860:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e862:	4b15      	ldr	r3, [pc, #84]	; (800e8b8 <xPortStartScheduler+0x138>)
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	4a14      	ldr	r2, [pc, #80]	; (800e8b8 <xPortStartScheduler+0x138>)
 800e868:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e86c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e86e:	f000 f8dd 	bl	800ea2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e872:	4b12      	ldr	r3, [pc, #72]	; (800e8bc <xPortStartScheduler+0x13c>)
 800e874:	2200      	movs	r2, #0
 800e876:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e878:	f000 f8fc 	bl	800ea74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e87c:	4b10      	ldr	r3, [pc, #64]	; (800e8c0 <xPortStartScheduler+0x140>)
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	4a0f      	ldr	r2, [pc, #60]	; (800e8c0 <xPortStartScheduler+0x140>)
 800e882:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e886:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e888:	f7ff ff66 	bl	800e758 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e88c:	f7fe fe8c 	bl	800d5a8 <vTaskSwitchContext>
	prvTaskExitError();
 800e890:	f7ff ff20 	bl	800e6d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e894:	2300      	movs	r3, #0
}
 800e896:	4618      	mov	r0, r3
 800e898:	3718      	adds	r7, #24
 800e89a:	46bd      	mov	sp, r7
 800e89c:	bd80      	pop	{r7, pc}
 800e89e:	bf00      	nop
 800e8a0:	e000ed00 	.word	0xe000ed00
 800e8a4:	410fc271 	.word	0x410fc271
 800e8a8:	410fc270 	.word	0x410fc270
 800e8ac:	e000e400 	.word	0xe000e400
 800e8b0:	20001524 	.word	0x20001524
 800e8b4:	20001528 	.word	0x20001528
 800e8b8:	e000ed20 	.word	0xe000ed20
 800e8bc:	20000034 	.word	0x20000034
 800e8c0:	e000ef34 	.word	0xe000ef34

0800e8c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e8c4:	b480      	push	{r7}
 800e8c6:	b083      	sub	sp, #12
 800e8c8:	af00      	add	r7, sp, #0
	__asm volatile
 800e8ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8ce:	f383 8811 	msr	BASEPRI, r3
 800e8d2:	f3bf 8f6f 	isb	sy
 800e8d6:	f3bf 8f4f 	dsb	sy
 800e8da:	607b      	str	r3, [r7, #4]
}
 800e8dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e8de:	4b0f      	ldr	r3, [pc, #60]	; (800e91c <vPortEnterCritical+0x58>)
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	3301      	adds	r3, #1
 800e8e4:	4a0d      	ldr	r2, [pc, #52]	; (800e91c <vPortEnterCritical+0x58>)
 800e8e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e8e8:	4b0c      	ldr	r3, [pc, #48]	; (800e91c <vPortEnterCritical+0x58>)
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	2b01      	cmp	r3, #1
 800e8ee:	d10f      	bne.n	800e910 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e8f0:	4b0b      	ldr	r3, [pc, #44]	; (800e920 <vPortEnterCritical+0x5c>)
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	b2db      	uxtb	r3, r3
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d00a      	beq.n	800e910 <vPortEnterCritical+0x4c>
	__asm volatile
 800e8fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8fe:	f383 8811 	msr	BASEPRI, r3
 800e902:	f3bf 8f6f 	isb	sy
 800e906:	f3bf 8f4f 	dsb	sy
 800e90a:	603b      	str	r3, [r7, #0]
}
 800e90c:	bf00      	nop
 800e90e:	e7fe      	b.n	800e90e <vPortEnterCritical+0x4a>
	}
}
 800e910:	bf00      	nop
 800e912:	370c      	adds	r7, #12
 800e914:	46bd      	mov	sp, r7
 800e916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e91a:	4770      	bx	lr
 800e91c:	20000034 	.word	0x20000034
 800e920:	e000ed04 	.word	0xe000ed04

0800e924 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e924:	b480      	push	{r7}
 800e926:	b083      	sub	sp, #12
 800e928:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e92a:	4b12      	ldr	r3, [pc, #72]	; (800e974 <vPortExitCritical+0x50>)
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d10a      	bne.n	800e948 <vPortExitCritical+0x24>
	__asm volatile
 800e932:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e936:	f383 8811 	msr	BASEPRI, r3
 800e93a:	f3bf 8f6f 	isb	sy
 800e93e:	f3bf 8f4f 	dsb	sy
 800e942:	607b      	str	r3, [r7, #4]
}
 800e944:	bf00      	nop
 800e946:	e7fe      	b.n	800e946 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e948:	4b0a      	ldr	r3, [pc, #40]	; (800e974 <vPortExitCritical+0x50>)
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	3b01      	subs	r3, #1
 800e94e:	4a09      	ldr	r2, [pc, #36]	; (800e974 <vPortExitCritical+0x50>)
 800e950:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e952:	4b08      	ldr	r3, [pc, #32]	; (800e974 <vPortExitCritical+0x50>)
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d105      	bne.n	800e966 <vPortExitCritical+0x42>
 800e95a:	2300      	movs	r3, #0
 800e95c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e95e:	683b      	ldr	r3, [r7, #0]
 800e960:	f383 8811 	msr	BASEPRI, r3
}
 800e964:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e966:	bf00      	nop
 800e968:	370c      	adds	r7, #12
 800e96a:	46bd      	mov	sp, r7
 800e96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e970:	4770      	bx	lr
 800e972:	bf00      	nop
 800e974:	20000034 	.word	0x20000034
	...

0800e980 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e980:	f3ef 8009 	mrs	r0, PSP
 800e984:	f3bf 8f6f 	isb	sy
 800e988:	4b15      	ldr	r3, [pc, #84]	; (800e9e0 <pxCurrentTCBConst>)
 800e98a:	681a      	ldr	r2, [r3, #0]
 800e98c:	f01e 0f10 	tst.w	lr, #16
 800e990:	bf08      	it	eq
 800e992:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e996:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e99a:	6010      	str	r0, [r2, #0]
 800e99c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e9a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e9a4:	f380 8811 	msr	BASEPRI, r0
 800e9a8:	f3bf 8f4f 	dsb	sy
 800e9ac:	f3bf 8f6f 	isb	sy
 800e9b0:	f7fe fdfa 	bl	800d5a8 <vTaskSwitchContext>
 800e9b4:	f04f 0000 	mov.w	r0, #0
 800e9b8:	f380 8811 	msr	BASEPRI, r0
 800e9bc:	bc09      	pop	{r0, r3}
 800e9be:	6819      	ldr	r1, [r3, #0]
 800e9c0:	6808      	ldr	r0, [r1, #0]
 800e9c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9c6:	f01e 0f10 	tst.w	lr, #16
 800e9ca:	bf08      	it	eq
 800e9cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e9d0:	f380 8809 	msr	PSP, r0
 800e9d4:	f3bf 8f6f 	isb	sy
 800e9d8:	4770      	bx	lr
 800e9da:	bf00      	nop
 800e9dc:	f3af 8000 	nop.w

0800e9e0 <pxCurrentTCBConst>:
 800e9e0:	20000ef8 	.word	0x20000ef8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e9e4:	bf00      	nop
 800e9e6:	bf00      	nop

0800e9e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b082      	sub	sp, #8
 800e9ec:	af00      	add	r7, sp, #0
	__asm volatile
 800e9ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9f2:	f383 8811 	msr	BASEPRI, r3
 800e9f6:	f3bf 8f6f 	isb	sy
 800e9fa:	f3bf 8f4f 	dsb	sy
 800e9fe:	607b      	str	r3, [r7, #4]
}
 800ea00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ea02:	f7fe fd17 	bl	800d434 <xTaskIncrementTick>
 800ea06:	4603      	mov	r3, r0
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d003      	beq.n	800ea14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ea0c:	4b06      	ldr	r3, [pc, #24]	; (800ea28 <xPortSysTickHandler+0x40>)
 800ea0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea12:	601a      	str	r2, [r3, #0]
 800ea14:	2300      	movs	r3, #0
 800ea16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ea18:	683b      	ldr	r3, [r7, #0]
 800ea1a:	f383 8811 	msr	BASEPRI, r3
}
 800ea1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ea20:	bf00      	nop
 800ea22:	3708      	adds	r7, #8
 800ea24:	46bd      	mov	sp, r7
 800ea26:	bd80      	pop	{r7, pc}
 800ea28:	e000ed04 	.word	0xe000ed04

0800ea2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ea2c:	b480      	push	{r7}
 800ea2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ea30:	4b0b      	ldr	r3, [pc, #44]	; (800ea60 <vPortSetupTimerInterrupt+0x34>)
 800ea32:	2200      	movs	r2, #0
 800ea34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ea36:	4b0b      	ldr	r3, [pc, #44]	; (800ea64 <vPortSetupTimerInterrupt+0x38>)
 800ea38:	2200      	movs	r2, #0
 800ea3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ea3c:	4b0a      	ldr	r3, [pc, #40]	; (800ea68 <vPortSetupTimerInterrupt+0x3c>)
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	4a0a      	ldr	r2, [pc, #40]	; (800ea6c <vPortSetupTimerInterrupt+0x40>)
 800ea42:	fba2 2303 	umull	r2, r3, r2, r3
 800ea46:	099b      	lsrs	r3, r3, #6
 800ea48:	4a09      	ldr	r2, [pc, #36]	; (800ea70 <vPortSetupTimerInterrupt+0x44>)
 800ea4a:	3b01      	subs	r3, #1
 800ea4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ea4e:	4b04      	ldr	r3, [pc, #16]	; (800ea60 <vPortSetupTimerInterrupt+0x34>)
 800ea50:	2207      	movs	r2, #7
 800ea52:	601a      	str	r2, [r3, #0]
}
 800ea54:	bf00      	nop
 800ea56:	46bd      	mov	sp, r7
 800ea58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5c:	4770      	bx	lr
 800ea5e:	bf00      	nop
 800ea60:	e000e010 	.word	0xe000e010
 800ea64:	e000e018 	.word	0xe000e018
 800ea68:	20000028 	.word	0x20000028
 800ea6c:	10624dd3 	.word	0x10624dd3
 800ea70:	e000e014 	.word	0xe000e014

0800ea74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ea74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ea84 <vPortEnableVFP+0x10>
 800ea78:	6801      	ldr	r1, [r0, #0]
 800ea7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ea7e:	6001      	str	r1, [r0, #0]
 800ea80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ea82:	bf00      	nop
 800ea84:	e000ed88 	.word	0xe000ed88

0800ea88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ea88:	b480      	push	{r7}
 800ea8a:	b085      	sub	sp, #20
 800ea8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ea8e:	f3ef 8305 	mrs	r3, IPSR
 800ea92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	2b0f      	cmp	r3, #15
 800ea98:	d914      	bls.n	800eac4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ea9a:	4a17      	ldr	r2, [pc, #92]	; (800eaf8 <vPortValidateInterruptPriority+0x70>)
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	4413      	add	r3, r2
 800eaa0:	781b      	ldrb	r3, [r3, #0]
 800eaa2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800eaa4:	4b15      	ldr	r3, [pc, #84]	; (800eafc <vPortValidateInterruptPriority+0x74>)
 800eaa6:	781b      	ldrb	r3, [r3, #0]
 800eaa8:	7afa      	ldrb	r2, [r7, #11]
 800eaaa:	429a      	cmp	r2, r3
 800eaac:	d20a      	bcs.n	800eac4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800eaae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eab2:	f383 8811 	msr	BASEPRI, r3
 800eab6:	f3bf 8f6f 	isb	sy
 800eaba:	f3bf 8f4f 	dsb	sy
 800eabe:	607b      	str	r3, [r7, #4]
}
 800eac0:	bf00      	nop
 800eac2:	e7fe      	b.n	800eac2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800eac4:	4b0e      	ldr	r3, [pc, #56]	; (800eb00 <vPortValidateInterruptPriority+0x78>)
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800eacc:	4b0d      	ldr	r3, [pc, #52]	; (800eb04 <vPortValidateInterruptPriority+0x7c>)
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	429a      	cmp	r2, r3
 800ead2:	d90a      	bls.n	800eaea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ead4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ead8:	f383 8811 	msr	BASEPRI, r3
 800eadc:	f3bf 8f6f 	isb	sy
 800eae0:	f3bf 8f4f 	dsb	sy
 800eae4:	603b      	str	r3, [r7, #0]
}
 800eae6:	bf00      	nop
 800eae8:	e7fe      	b.n	800eae8 <vPortValidateInterruptPriority+0x60>
	}
 800eaea:	bf00      	nop
 800eaec:	3714      	adds	r7, #20
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf4:	4770      	bx	lr
 800eaf6:	bf00      	nop
 800eaf8:	e000e3f0 	.word	0xe000e3f0
 800eafc:	20001524 	.word	0x20001524
 800eb00:	e000ed0c 	.word	0xe000ed0c
 800eb04:	20001528 	.word	0x20001528

0800eb08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	b08a      	sub	sp, #40	; 0x28
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800eb10:	2300      	movs	r3, #0
 800eb12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800eb14:	f7fe fbd2 	bl	800d2bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800eb18:	4b5b      	ldr	r3, [pc, #364]	; (800ec88 <pvPortMalloc+0x180>)
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d101      	bne.n	800eb24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800eb20:	f000 f920 	bl	800ed64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800eb24:	4b59      	ldr	r3, [pc, #356]	; (800ec8c <pvPortMalloc+0x184>)
 800eb26:	681a      	ldr	r2, [r3, #0]
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	4013      	ands	r3, r2
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	f040 8093 	bne.w	800ec58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d01d      	beq.n	800eb74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800eb38:	2208      	movs	r2, #8
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	4413      	add	r3, r2
 800eb3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	f003 0307 	and.w	r3, r3, #7
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d014      	beq.n	800eb74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	f023 0307 	bic.w	r3, r3, #7
 800eb50:	3308      	adds	r3, #8
 800eb52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	f003 0307 	and.w	r3, r3, #7
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d00a      	beq.n	800eb74 <pvPortMalloc+0x6c>
	__asm volatile
 800eb5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb62:	f383 8811 	msr	BASEPRI, r3
 800eb66:	f3bf 8f6f 	isb	sy
 800eb6a:	f3bf 8f4f 	dsb	sy
 800eb6e:	617b      	str	r3, [r7, #20]
}
 800eb70:	bf00      	nop
 800eb72:	e7fe      	b.n	800eb72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d06e      	beq.n	800ec58 <pvPortMalloc+0x150>
 800eb7a:	4b45      	ldr	r3, [pc, #276]	; (800ec90 <pvPortMalloc+0x188>)
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	687a      	ldr	r2, [r7, #4]
 800eb80:	429a      	cmp	r2, r3
 800eb82:	d869      	bhi.n	800ec58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800eb84:	4b43      	ldr	r3, [pc, #268]	; (800ec94 <pvPortMalloc+0x18c>)
 800eb86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800eb88:	4b42      	ldr	r3, [pc, #264]	; (800ec94 <pvPortMalloc+0x18c>)
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eb8e:	e004      	b.n	800eb9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800eb90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800eb94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eb9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb9c:	685b      	ldr	r3, [r3, #4]
 800eb9e:	687a      	ldr	r2, [r7, #4]
 800eba0:	429a      	cmp	r2, r3
 800eba2:	d903      	bls.n	800ebac <pvPortMalloc+0xa4>
 800eba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d1f1      	bne.n	800eb90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ebac:	4b36      	ldr	r3, [pc, #216]	; (800ec88 <pvPortMalloc+0x180>)
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ebb2:	429a      	cmp	r2, r3
 800ebb4:	d050      	beq.n	800ec58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ebb6:	6a3b      	ldr	r3, [r7, #32]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	2208      	movs	r2, #8
 800ebbc:	4413      	add	r3, r2
 800ebbe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ebc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebc2:	681a      	ldr	r2, [r3, #0]
 800ebc4:	6a3b      	ldr	r3, [r7, #32]
 800ebc6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ebc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebca:	685a      	ldr	r2, [r3, #4]
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	1ad2      	subs	r2, r2, r3
 800ebd0:	2308      	movs	r3, #8
 800ebd2:	005b      	lsls	r3, r3, #1
 800ebd4:	429a      	cmp	r2, r3
 800ebd6:	d91f      	bls.n	800ec18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ebd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	4413      	add	r3, r2
 800ebde:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ebe0:	69bb      	ldr	r3, [r7, #24]
 800ebe2:	f003 0307 	and.w	r3, r3, #7
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d00a      	beq.n	800ec00 <pvPortMalloc+0xf8>
	__asm volatile
 800ebea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebee:	f383 8811 	msr	BASEPRI, r3
 800ebf2:	f3bf 8f6f 	isb	sy
 800ebf6:	f3bf 8f4f 	dsb	sy
 800ebfa:	613b      	str	r3, [r7, #16]
}
 800ebfc:	bf00      	nop
 800ebfe:	e7fe      	b.n	800ebfe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ec00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec02:	685a      	ldr	r2, [r3, #4]
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	1ad2      	subs	r2, r2, r3
 800ec08:	69bb      	ldr	r3, [r7, #24]
 800ec0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ec0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec0e:	687a      	ldr	r2, [r7, #4]
 800ec10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ec12:	69b8      	ldr	r0, [r7, #24]
 800ec14:	f000 f908 	bl	800ee28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ec18:	4b1d      	ldr	r3, [pc, #116]	; (800ec90 <pvPortMalloc+0x188>)
 800ec1a:	681a      	ldr	r2, [r3, #0]
 800ec1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec1e:	685b      	ldr	r3, [r3, #4]
 800ec20:	1ad3      	subs	r3, r2, r3
 800ec22:	4a1b      	ldr	r2, [pc, #108]	; (800ec90 <pvPortMalloc+0x188>)
 800ec24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ec26:	4b1a      	ldr	r3, [pc, #104]	; (800ec90 <pvPortMalloc+0x188>)
 800ec28:	681a      	ldr	r2, [r3, #0]
 800ec2a:	4b1b      	ldr	r3, [pc, #108]	; (800ec98 <pvPortMalloc+0x190>)
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	429a      	cmp	r2, r3
 800ec30:	d203      	bcs.n	800ec3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ec32:	4b17      	ldr	r3, [pc, #92]	; (800ec90 <pvPortMalloc+0x188>)
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	4a18      	ldr	r2, [pc, #96]	; (800ec98 <pvPortMalloc+0x190>)
 800ec38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ec3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec3c:	685a      	ldr	r2, [r3, #4]
 800ec3e:	4b13      	ldr	r3, [pc, #76]	; (800ec8c <pvPortMalloc+0x184>)
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	431a      	orrs	r2, r3
 800ec44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ec48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec4a:	2200      	movs	r2, #0
 800ec4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ec4e:	4b13      	ldr	r3, [pc, #76]	; (800ec9c <pvPortMalloc+0x194>)
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	3301      	adds	r3, #1
 800ec54:	4a11      	ldr	r2, [pc, #68]	; (800ec9c <pvPortMalloc+0x194>)
 800ec56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ec58:	f7fe fb3e 	bl	800d2d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ec5c:	69fb      	ldr	r3, [r7, #28]
 800ec5e:	f003 0307 	and.w	r3, r3, #7
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d00a      	beq.n	800ec7c <pvPortMalloc+0x174>
	__asm volatile
 800ec66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec6a:	f383 8811 	msr	BASEPRI, r3
 800ec6e:	f3bf 8f6f 	isb	sy
 800ec72:	f3bf 8f4f 	dsb	sy
 800ec76:	60fb      	str	r3, [r7, #12]
}
 800ec78:	bf00      	nop
 800ec7a:	e7fe      	b.n	800ec7a <pvPortMalloc+0x172>
	return pvReturn;
 800ec7c:	69fb      	ldr	r3, [r7, #28]
}
 800ec7e:	4618      	mov	r0, r3
 800ec80:	3728      	adds	r7, #40	; 0x28
 800ec82:	46bd      	mov	sp, r7
 800ec84:	bd80      	pop	{r7, pc}
 800ec86:	bf00      	nop
 800ec88:	20005134 	.word	0x20005134
 800ec8c:	20005148 	.word	0x20005148
 800ec90:	20005138 	.word	0x20005138
 800ec94:	2000512c 	.word	0x2000512c
 800ec98:	2000513c 	.word	0x2000513c
 800ec9c:	20005140 	.word	0x20005140

0800eca0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b086      	sub	sp, #24
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d04d      	beq.n	800ed4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ecb2:	2308      	movs	r3, #8
 800ecb4:	425b      	negs	r3, r3
 800ecb6:	697a      	ldr	r2, [r7, #20]
 800ecb8:	4413      	add	r3, r2
 800ecba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ecbc:	697b      	ldr	r3, [r7, #20]
 800ecbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ecc0:	693b      	ldr	r3, [r7, #16]
 800ecc2:	685a      	ldr	r2, [r3, #4]
 800ecc4:	4b24      	ldr	r3, [pc, #144]	; (800ed58 <vPortFree+0xb8>)
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	4013      	ands	r3, r2
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d10a      	bne.n	800ece4 <vPortFree+0x44>
	__asm volatile
 800ecce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecd2:	f383 8811 	msr	BASEPRI, r3
 800ecd6:	f3bf 8f6f 	isb	sy
 800ecda:	f3bf 8f4f 	dsb	sy
 800ecde:	60fb      	str	r3, [r7, #12]
}
 800ece0:	bf00      	nop
 800ece2:	e7fe      	b.n	800ece2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ece4:	693b      	ldr	r3, [r7, #16]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d00a      	beq.n	800ed02 <vPortFree+0x62>
	__asm volatile
 800ecec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecf0:	f383 8811 	msr	BASEPRI, r3
 800ecf4:	f3bf 8f6f 	isb	sy
 800ecf8:	f3bf 8f4f 	dsb	sy
 800ecfc:	60bb      	str	r3, [r7, #8]
}
 800ecfe:	bf00      	nop
 800ed00:	e7fe      	b.n	800ed00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ed02:	693b      	ldr	r3, [r7, #16]
 800ed04:	685a      	ldr	r2, [r3, #4]
 800ed06:	4b14      	ldr	r3, [pc, #80]	; (800ed58 <vPortFree+0xb8>)
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	4013      	ands	r3, r2
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d01e      	beq.n	800ed4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ed10:	693b      	ldr	r3, [r7, #16]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d11a      	bne.n	800ed4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ed18:	693b      	ldr	r3, [r7, #16]
 800ed1a:	685a      	ldr	r2, [r3, #4]
 800ed1c:	4b0e      	ldr	r3, [pc, #56]	; (800ed58 <vPortFree+0xb8>)
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	43db      	mvns	r3, r3
 800ed22:	401a      	ands	r2, r3
 800ed24:	693b      	ldr	r3, [r7, #16]
 800ed26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ed28:	f7fe fac8 	bl	800d2bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ed2c:	693b      	ldr	r3, [r7, #16]
 800ed2e:	685a      	ldr	r2, [r3, #4]
 800ed30:	4b0a      	ldr	r3, [pc, #40]	; (800ed5c <vPortFree+0xbc>)
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	4413      	add	r3, r2
 800ed36:	4a09      	ldr	r2, [pc, #36]	; (800ed5c <vPortFree+0xbc>)
 800ed38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ed3a:	6938      	ldr	r0, [r7, #16]
 800ed3c:	f000 f874 	bl	800ee28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ed40:	4b07      	ldr	r3, [pc, #28]	; (800ed60 <vPortFree+0xc0>)
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	3301      	adds	r3, #1
 800ed46:	4a06      	ldr	r2, [pc, #24]	; (800ed60 <vPortFree+0xc0>)
 800ed48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ed4a:	f7fe fac5 	bl	800d2d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ed4e:	bf00      	nop
 800ed50:	3718      	adds	r7, #24
 800ed52:	46bd      	mov	sp, r7
 800ed54:	bd80      	pop	{r7, pc}
 800ed56:	bf00      	nop
 800ed58:	20005148 	.word	0x20005148
 800ed5c:	20005138 	.word	0x20005138
 800ed60:	20005144 	.word	0x20005144

0800ed64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ed64:	b480      	push	{r7}
 800ed66:	b085      	sub	sp, #20
 800ed68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ed6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ed6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ed70:	4b27      	ldr	r3, [pc, #156]	; (800ee10 <prvHeapInit+0xac>)
 800ed72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	f003 0307 	and.w	r3, r3, #7
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d00c      	beq.n	800ed98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	3307      	adds	r3, #7
 800ed82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	f023 0307 	bic.w	r3, r3, #7
 800ed8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ed8c:	68ba      	ldr	r2, [r7, #8]
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	1ad3      	subs	r3, r2, r3
 800ed92:	4a1f      	ldr	r2, [pc, #124]	; (800ee10 <prvHeapInit+0xac>)
 800ed94:	4413      	add	r3, r2
 800ed96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ed9c:	4a1d      	ldr	r2, [pc, #116]	; (800ee14 <prvHeapInit+0xb0>)
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800eda2:	4b1c      	ldr	r3, [pc, #112]	; (800ee14 <prvHeapInit+0xb0>)
 800eda4:	2200      	movs	r2, #0
 800eda6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	68ba      	ldr	r2, [r7, #8]
 800edac:	4413      	add	r3, r2
 800edae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800edb0:	2208      	movs	r2, #8
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	1a9b      	subs	r3, r3, r2
 800edb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	f023 0307 	bic.w	r3, r3, #7
 800edbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	4a15      	ldr	r2, [pc, #84]	; (800ee18 <prvHeapInit+0xb4>)
 800edc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800edc6:	4b14      	ldr	r3, [pc, #80]	; (800ee18 <prvHeapInit+0xb4>)
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	2200      	movs	r2, #0
 800edcc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800edce:	4b12      	ldr	r3, [pc, #72]	; (800ee18 <prvHeapInit+0xb4>)
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	2200      	movs	r2, #0
 800edd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800edda:	683b      	ldr	r3, [r7, #0]
 800eddc:	68fa      	ldr	r2, [r7, #12]
 800edde:	1ad2      	subs	r2, r2, r3
 800ede0:	683b      	ldr	r3, [r7, #0]
 800ede2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ede4:	4b0c      	ldr	r3, [pc, #48]	; (800ee18 <prvHeapInit+0xb4>)
 800ede6:	681a      	ldr	r2, [r3, #0]
 800ede8:	683b      	ldr	r3, [r7, #0]
 800edea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800edec:	683b      	ldr	r3, [r7, #0]
 800edee:	685b      	ldr	r3, [r3, #4]
 800edf0:	4a0a      	ldr	r2, [pc, #40]	; (800ee1c <prvHeapInit+0xb8>)
 800edf2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800edf4:	683b      	ldr	r3, [r7, #0]
 800edf6:	685b      	ldr	r3, [r3, #4]
 800edf8:	4a09      	ldr	r2, [pc, #36]	; (800ee20 <prvHeapInit+0xbc>)
 800edfa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800edfc:	4b09      	ldr	r3, [pc, #36]	; (800ee24 <prvHeapInit+0xc0>)
 800edfe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ee02:	601a      	str	r2, [r3, #0]
}
 800ee04:	bf00      	nop
 800ee06:	3714      	adds	r7, #20
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0e:	4770      	bx	lr
 800ee10:	2000152c 	.word	0x2000152c
 800ee14:	2000512c 	.word	0x2000512c
 800ee18:	20005134 	.word	0x20005134
 800ee1c:	2000513c 	.word	0x2000513c
 800ee20:	20005138 	.word	0x20005138
 800ee24:	20005148 	.word	0x20005148

0800ee28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ee28:	b480      	push	{r7}
 800ee2a:	b085      	sub	sp, #20
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ee30:	4b28      	ldr	r3, [pc, #160]	; (800eed4 <prvInsertBlockIntoFreeList+0xac>)
 800ee32:	60fb      	str	r3, [r7, #12]
 800ee34:	e002      	b.n	800ee3c <prvInsertBlockIntoFreeList+0x14>
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	60fb      	str	r3, [r7, #12]
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	687a      	ldr	r2, [r7, #4]
 800ee42:	429a      	cmp	r2, r3
 800ee44:	d8f7      	bhi.n	800ee36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	685b      	ldr	r3, [r3, #4]
 800ee4e:	68ba      	ldr	r2, [r7, #8]
 800ee50:	4413      	add	r3, r2
 800ee52:	687a      	ldr	r2, [r7, #4]
 800ee54:	429a      	cmp	r2, r3
 800ee56:	d108      	bne.n	800ee6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	685a      	ldr	r2, [r3, #4]
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	685b      	ldr	r3, [r3, #4]
 800ee60:	441a      	add	r2, r3
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	685b      	ldr	r3, [r3, #4]
 800ee72:	68ba      	ldr	r2, [r7, #8]
 800ee74:	441a      	add	r2, r3
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	429a      	cmp	r2, r3
 800ee7c:	d118      	bne.n	800eeb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	681a      	ldr	r2, [r3, #0]
 800ee82:	4b15      	ldr	r3, [pc, #84]	; (800eed8 <prvInsertBlockIntoFreeList+0xb0>)
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	429a      	cmp	r2, r3
 800ee88:	d00d      	beq.n	800eea6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	685a      	ldr	r2, [r3, #4]
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	685b      	ldr	r3, [r3, #4]
 800ee94:	441a      	add	r2, r3
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	681a      	ldr	r2, [r3, #0]
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	601a      	str	r2, [r3, #0]
 800eea4:	e008      	b.n	800eeb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800eea6:	4b0c      	ldr	r3, [pc, #48]	; (800eed8 <prvInsertBlockIntoFreeList+0xb0>)
 800eea8:	681a      	ldr	r2, [r3, #0]
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	601a      	str	r2, [r3, #0]
 800eeae:	e003      	b.n	800eeb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	681a      	ldr	r2, [r3, #0]
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800eeb8:	68fa      	ldr	r2, [r7, #12]
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	429a      	cmp	r2, r3
 800eebe:	d002      	beq.n	800eec6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	687a      	ldr	r2, [r7, #4]
 800eec4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eec6:	bf00      	nop
 800eec8:	3714      	adds	r7, #20
 800eeca:	46bd      	mov	sp, r7
 800eecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed0:	4770      	bx	lr
 800eed2:	bf00      	nop
 800eed4:	2000512c 	.word	0x2000512c
 800eed8:	20005134 	.word	0x20005134

0800eedc <__errno>:
 800eedc:	4b01      	ldr	r3, [pc, #4]	; (800eee4 <__errno+0x8>)
 800eede:	6818      	ldr	r0, [r3, #0]
 800eee0:	4770      	bx	lr
 800eee2:	bf00      	nop
 800eee4:	20000038 	.word	0x20000038

0800eee8 <__libc_init_array>:
 800eee8:	b570      	push	{r4, r5, r6, lr}
 800eeea:	4d0d      	ldr	r5, [pc, #52]	; (800ef20 <__libc_init_array+0x38>)
 800eeec:	4c0d      	ldr	r4, [pc, #52]	; (800ef24 <__libc_init_array+0x3c>)
 800eeee:	1b64      	subs	r4, r4, r5
 800eef0:	10a4      	asrs	r4, r4, #2
 800eef2:	2600      	movs	r6, #0
 800eef4:	42a6      	cmp	r6, r4
 800eef6:	d109      	bne.n	800ef0c <__libc_init_array+0x24>
 800eef8:	4d0b      	ldr	r5, [pc, #44]	; (800ef28 <__libc_init_array+0x40>)
 800eefa:	4c0c      	ldr	r4, [pc, #48]	; (800ef2c <__libc_init_array+0x44>)
 800eefc:	f001 f97e 	bl	80101fc <_init>
 800ef00:	1b64      	subs	r4, r4, r5
 800ef02:	10a4      	asrs	r4, r4, #2
 800ef04:	2600      	movs	r6, #0
 800ef06:	42a6      	cmp	r6, r4
 800ef08:	d105      	bne.n	800ef16 <__libc_init_array+0x2e>
 800ef0a:	bd70      	pop	{r4, r5, r6, pc}
 800ef0c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef10:	4798      	blx	r3
 800ef12:	3601      	adds	r6, #1
 800ef14:	e7ee      	b.n	800eef4 <__libc_init_array+0xc>
 800ef16:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef1a:	4798      	blx	r3
 800ef1c:	3601      	adds	r6, #1
 800ef1e:	e7f2      	b.n	800ef06 <__libc_init_array+0x1e>
 800ef20:	08011034 	.word	0x08011034
 800ef24:	08011034 	.word	0x08011034
 800ef28:	08011034 	.word	0x08011034
 800ef2c:	08011038 	.word	0x08011038

0800ef30 <memcpy>:
 800ef30:	440a      	add	r2, r1
 800ef32:	4291      	cmp	r1, r2
 800ef34:	f100 33ff 	add.w	r3, r0, #4294967295
 800ef38:	d100      	bne.n	800ef3c <memcpy+0xc>
 800ef3a:	4770      	bx	lr
 800ef3c:	b510      	push	{r4, lr}
 800ef3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef42:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ef46:	4291      	cmp	r1, r2
 800ef48:	d1f9      	bne.n	800ef3e <memcpy+0xe>
 800ef4a:	bd10      	pop	{r4, pc}

0800ef4c <memset>:
 800ef4c:	4402      	add	r2, r0
 800ef4e:	4603      	mov	r3, r0
 800ef50:	4293      	cmp	r3, r2
 800ef52:	d100      	bne.n	800ef56 <memset+0xa>
 800ef54:	4770      	bx	lr
 800ef56:	f803 1b01 	strb.w	r1, [r3], #1
 800ef5a:	e7f9      	b.n	800ef50 <memset+0x4>

0800ef5c <sniprintf>:
 800ef5c:	b40c      	push	{r2, r3}
 800ef5e:	b530      	push	{r4, r5, lr}
 800ef60:	4b17      	ldr	r3, [pc, #92]	; (800efc0 <sniprintf+0x64>)
 800ef62:	1e0c      	subs	r4, r1, #0
 800ef64:	681d      	ldr	r5, [r3, #0]
 800ef66:	b09d      	sub	sp, #116	; 0x74
 800ef68:	da08      	bge.n	800ef7c <sniprintf+0x20>
 800ef6a:	238b      	movs	r3, #139	; 0x8b
 800ef6c:	602b      	str	r3, [r5, #0]
 800ef6e:	f04f 30ff 	mov.w	r0, #4294967295
 800ef72:	b01d      	add	sp, #116	; 0x74
 800ef74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ef78:	b002      	add	sp, #8
 800ef7a:	4770      	bx	lr
 800ef7c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ef80:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ef84:	bf14      	ite	ne
 800ef86:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ef8a:	4623      	moveq	r3, r4
 800ef8c:	9304      	str	r3, [sp, #16]
 800ef8e:	9307      	str	r3, [sp, #28]
 800ef90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ef94:	9002      	str	r0, [sp, #8]
 800ef96:	9006      	str	r0, [sp, #24]
 800ef98:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ef9c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ef9e:	ab21      	add	r3, sp, #132	; 0x84
 800efa0:	a902      	add	r1, sp, #8
 800efa2:	4628      	mov	r0, r5
 800efa4:	9301      	str	r3, [sp, #4]
 800efa6:	f000 f8b7 	bl	800f118 <_svfiprintf_r>
 800efaa:	1c43      	adds	r3, r0, #1
 800efac:	bfbc      	itt	lt
 800efae:	238b      	movlt	r3, #139	; 0x8b
 800efb0:	602b      	strlt	r3, [r5, #0]
 800efb2:	2c00      	cmp	r4, #0
 800efb4:	d0dd      	beq.n	800ef72 <sniprintf+0x16>
 800efb6:	9b02      	ldr	r3, [sp, #8]
 800efb8:	2200      	movs	r2, #0
 800efba:	701a      	strb	r2, [r3, #0]
 800efbc:	e7d9      	b.n	800ef72 <sniprintf+0x16>
 800efbe:	bf00      	nop
 800efc0:	20000038 	.word	0x20000038

0800efc4 <siprintf>:
 800efc4:	b40e      	push	{r1, r2, r3}
 800efc6:	b500      	push	{lr}
 800efc8:	b09c      	sub	sp, #112	; 0x70
 800efca:	ab1d      	add	r3, sp, #116	; 0x74
 800efcc:	9002      	str	r0, [sp, #8]
 800efce:	9006      	str	r0, [sp, #24]
 800efd0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800efd4:	4809      	ldr	r0, [pc, #36]	; (800effc <siprintf+0x38>)
 800efd6:	9107      	str	r1, [sp, #28]
 800efd8:	9104      	str	r1, [sp, #16]
 800efda:	4909      	ldr	r1, [pc, #36]	; (800f000 <siprintf+0x3c>)
 800efdc:	f853 2b04 	ldr.w	r2, [r3], #4
 800efe0:	9105      	str	r1, [sp, #20]
 800efe2:	6800      	ldr	r0, [r0, #0]
 800efe4:	9301      	str	r3, [sp, #4]
 800efe6:	a902      	add	r1, sp, #8
 800efe8:	f000 f896 	bl	800f118 <_svfiprintf_r>
 800efec:	9b02      	ldr	r3, [sp, #8]
 800efee:	2200      	movs	r2, #0
 800eff0:	701a      	strb	r2, [r3, #0]
 800eff2:	b01c      	add	sp, #112	; 0x70
 800eff4:	f85d eb04 	ldr.w	lr, [sp], #4
 800eff8:	b003      	add	sp, #12
 800effa:	4770      	bx	lr
 800effc:	20000038 	.word	0x20000038
 800f000:	ffff0208 	.word	0xffff0208

0800f004 <siscanf>:
 800f004:	b40e      	push	{r1, r2, r3}
 800f006:	b510      	push	{r4, lr}
 800f008:	b09f      	sub	sp, #124	; 0x7c
 800f00a:	ac21      	add	r4, sp, #132	; 0x84
 800f00c:	f44f 7101 	mov.w	r1, #516	; 0x204
 800f010:	f854 2b04 	ldr.w	r2, [r4], #4
 800f014:	9201      	str	r2, [sp, #4]
 800f016:	f8ad 101c 	strh.w	r1, [sp, #28]
 800f01a:	9004      	str	r0, [sp, #16]
 800f01c:	9008      	str	r0, [sp, #32]
 800f01e:	f7f1 f8f7 	bl	8000210 <strlen>
 800f022:	4b0c      	ldr	r3, [pc, #48]	; (800f054 <siscanf+0x50>)
 800f024:	9005      	str	r0, [sp, #20]
 800f026:	9009      	str	r0, [sp, #36]	; 0x24
 800f028:	930d      	str	r3, [sp, #52]	; 0x34
 800f02a:	480b      	ldr	r0, [pc, #44]	; (800f058 <siscanf+0x54>)
 800f02c:	9a01      	ldr	r2, [sp, #4]
 800f02e:	6800      	ldr	r0, [r0, #0]
 800f030:	9403      	str	r4, [sp, #12]
 800f032:	2300      	movs	r3, #0
 800f034:	9311      	str	r3, [sp, #68]	; 0x44
 800f036:	9316      	str	r3, [sp, #88]	; 0x58
 800f038:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f03c:	f8ad 301e 	strh.w	r3, [sp, #30]
 800f040:	a904      	add	r1, sp, #16
 800f042:	4623      	mov	r3, r4
 800f044:	f000 f9c2 	bl	800f3cc <__ssvfiscanf_r>
 800f048:	b01f      	add	sp, #124	; 0x7c
 800f04a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f04e:	b003      	add	sp, #12
 800f050:	4770      	bx	lr
 800f052:	bf00      	nop
 800f054:	0800f05d 	.word	0x0800f05d
 800f058:	20000038 	.word	0x20000038

0800f05c <__seofread>:
 800f05c:	2000      	movs	r0, #0
 800f05e:	4770      	bx	lr

0800f060 <__ssputs_r>:
 800f060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f064:	688e      	ldr	r6, [r1, #8]
 800f066:	429e      	cmp	r6, r3
 800f068:	4682      	mov	sl, r0
 800f06a:	460c      	mov	r4, r1
 800f06c:	4690      	mov	r8, r2
 800f06e:	461f      	mov	r7, r3
 800f070:	d838      	bhi.n	800f0e4 <__ssputs_r+0x84>
 800f072:	898a      	ldrh	r2, [r1, #12]
 800f074:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f078:	d032      	beq.n	800f0e0 <__ssputs_r+0x80>
 800f07a:	6825      	ldr	r5, [r4, #0]
 800f07c:	6909      	ldr	r1, [r1, #16]
 800f07e:	eba5 0901 	sub.w	r9, r5, r1
 800f082:	6965      	ldr	r5, [r4, #20]
 800f084:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f088:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f08c:	3301      	adds	r3, #1
 800f08e:	444b      	add	r3, r9
 800f090:	106d      	asrs	r5, r5, #1
 800f092:	429d      	cmp	r5, r3
 800f094:	bf38      	it	cc
 800f096:	461d      	movcc	r5, r3
 800f098:	0553      	lsls	r3, r2, #21
 800f09a:	d531      	bpl.n	800f100 <__ssputs_r+0xa0>
 800f09c:	4629      	mov	r1, r5
 800f09e:	f000 ffe5 	bl	801006c <_malloc_r>
 800f0a2:	4606      	mov	r6, r0
 800f0a4:	b950      	cbnz	r0, 800f0bc <__ssputs_r+0x5c>
 800f0a6:	230c      	movs	r3, #12
 800f0a8:	f8ca 3000 	str.w	r3, [sl]
 800f0ac:	89a3      	ldrh	r3, [r4, #12]
 800f0ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f0b2:	81a3      	strh	r3, [r4, #12]
 800f0b4:	f04f 30ff 	mov.w	r0, #4294967295
 800f0b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0bc:	6921      	ldr	r1, [r4, #16]
 800f0be:	464a      	mov	r2, r9
 800f0c0:	f7ff ff36 	bl	800ef30 <memcpy>
 800f0c4:	89a3      	ldrh	r3, [r4, #12]
 800f0c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f0ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f0ce:	81a3      	strh	r3, [r4, #12]
 800f0d0:	6126      	str	r6, [r4, #16]
 800f0d2:	6165      	str	r5, [r4, #20]
 800f0d4:	444e      	add	r6, r9
 800f0d6:	eba5 0509 	sub.w	r5, r5, r9
 800f0da:	6026      	str	r6, [r4, #0]
 800f0dc:	60a5      	str	r5, [r4, #8]
 800f0de:	463e      	mov	r6, r7
 800f0e0:	42be      	cmp	r6, r7
 800f0e2:	d900      	bls.n	800f0e6 <__ssputs_r+0x86>
 800f0e4:	463e      	mov	r6, r7
 800f0e6:	6820      	ldr	r0, [r4, #0]
 800f0e8:	4632      	mov	r2, r6
 800f0ea:	4641      	mov	r1, r8
 800f0ec:	f000 ff38 	bl	800ff60 <memmove>
 800f0f0:	68a3      	ldr	r3, [r4, #8]
 800f0f2:	1b9b      	subs	r3, r3, r6
 800f0f4:	60a3      	str	r3, [r4, #8]
 800f0f6:	6823      	ldr	r3, [r4, #0]
 800f0f8:	4433      	add	r3, r6
 800f0fa:	6023      	str	r3, [r4, #0]
 800f0fc:	2000      	movs	r0, #0
 800f0fe:	e7db      	b.n	800f0b8 <__ssputs_r+0x58>
 800f100:	462a      	mov	r2, r5
 800f102:	f001 f827 	bl	8010154 <_realloc_r>
 800f106:	4606      	mov	r6, r0
 800f108:	2800      	cmp	r0, #0
 800f10a:	d1e1      	bne.n	800f0d0 <__ssputs_r+0x70>
 800f10c:	6921      	ldr	r1, [r4, #16]
 800f10e:	4650      	mov	r0, sl
 800f110:	f000 ff40 	bl	800ff94 <_free_r>
 800f114:	e7c7      	b.n	800f0a6 <__ssputs_r+0x46>
	...

0800f118 <_svfiprintf_r>:
 800f118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f11c:	4698      	mov	r8, r3
 800f11e:	898b      	ldrh	r3, [r1, #12]
 800f120:	061b      	lsls	r3, r3, #24
 800f122:	b09d      	sub	sp, #116	; 0x74
 800f124:	4607      	mov	r7, r0
 800f126:	460d      	mov	r5, r1
 800f128:	4614      	mov	r4, r2
 800f12a:	d50e      	bpl.n	800f14a <_svfiprintf_r+0x32>
 800f12c:	690b      	ldr	r3, [r1, #16]
 800f12e:	b963      	cbnz	r3, 800f14a <_svfiprintf_r+0x32>
 800f130:	2140      	movs	r1, #64	; 0x40
 800f132:	f000 ff9b 	bl	801006c <_malloc_r>
 800f136:	6028      	str	r0, [r5, #0]
 800f138:	6128      	str	r0, [r5, #16]
 800f13a:	b920      	cbnz	r0, 800f146 <_svfiprintf_r+0x2e>
 800f13c:	230c      	movs	r3, #12
 800f13e:	603b      	str	r3, [r7, #0]
 800f140:	f04f 30ff 	mov.w	r0, #4294967295
 800f144:	e0d1      	b.n	800f2ea <_svfiprintf_r+0x1d2>
 800f146:	2340      	movs	r3, #64	; 0x40
 800f148:	616b      	str	r3, [r5, #20]
 800f14a:	2300      	movs	r3, #0
 800f14c:	9309      	str	r3, [sp, #36]	; 0x24
 800f14e:	2320      	movs	r3, #32
 800f150:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f154:	f8cd 800c 	str.w	r8, [sp, #12]
 800f158:	2330      	movs	r3, #48	; 0x30
 800f15a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f304 <_svfiprintf_r+0x1ec>
 800f15e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f162:	f04f 0901 	mov.w	r9, #1
 800f166:	4623      	mov	r3, r4
 800f168:	469a      	mov	sl, r3
 800f16a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f16e:	b10a      	cbz	r2, 800f174 <_svfiprintf_r+0x5c>
 800f170:	2a25      	cmp	r2, #37	; 0x25
 800f172:	d1f9      	bne.n	800f168 <_svfiprintf_r+0x50>
 800f174:	ebba 0b04 	subs.w	fp, sl, r4
 800f178:	d00b      	beq.n	800f192 <_svfiprintf_r+0x7a>
 800f17a:	465b      	mov	r3, fp
 800f17c:	4622      	mov	r2, r4
 800f17e:	4629      	mov	r1, r5
 800f180:	4638      	mov	r0, r7
 800f182:	f7ff ff6d 	bl	800f060 <__ssputs_r>
 800f186:	3001      	adds	r0, #1
 800f188:	f000 80aa 	beq.w	800f2e0 <_svfiprintf_r+0x1c8>
 800f18c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f18e:	445a      	add	r2, fp
 800f190:	9209      	str	r2, [sp, #36]	; 0x24
 800f192:	f89a 3000 	ldrb.w	r3, [sl]
 800f196:	2b00      	cmp	r3, #0
 800f198:	f000 80a2 	beq.w	800f2e0 <_svfiprintf_r+0x1c8>
 800f19c:	2300      	movs	r3, #0
 800f19e:	f04f 32ff 	mov.w	r2, #4294967295
 800f1a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f1a6:	f10a 0a01 	add.w	sl, sl, #1
 800f1aa:	9304      	str	r3, [sp, #16]
 800f1ac:	9307      	str	r3, [sp, #28]
 800f1ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f1b2:	931a      	str	r3, [sp, #104]	; 0x68
 800f1b4:	4654      	mov	r4, sl
 800f1b6:	2205      	movs	r2, #5
 800f1b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1bc:	4851      	ldr	r0, [pc, #324]	; (800f304 <_svfiprintf_r+0x1ec>)
 800f1be:	f7f1 f82f 	bl	8000220 <memchr>
 800f1c2:	9a04      	ldr	r2, [sp, #16]
 800f1c4:	b9d8      	cbnz	r0, 800f1fe <_svfiprintf_r+0xe6>
 800f1c6:	06d0      	lsls	r0, r2, #27
 800f1c8:	bf44      	itt	mi
 800f1ca:	2320      	movmi	r3, #32
 800f1cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f1d0:	0711      	lsls	r1, r2, #28
 800f1d2:	bf44      	itt	mi
 800f1d4:	232b      	movmi	r3, #43	; 0x2b
 800f1d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f1da:	f89a 3000 	ldrb.w	r3, [sl]
 800f1de:	2b2a      	cmp	r3, #42	; 0x2a
 800f1e0:	d015      	beq.n	800f20e <_svfiprintf_r+0xf6>
 800f1e2:	9a07      	ldr	r2, [sp, #28]
 800f1e4:	4654      	mov	r4, sl
 800f1e6:	2000      	movs	r0, #0
 800f1e8:	f04f 0c0a 	mov.w	ip, #10
 800f1ec:	4621      	mov	r1, r4
 800f1ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f1f2:	3b30      	subs	r3, #48	; 0x30
 800f1f4:	2b09      	cmp	r3, #9
 800f1f6:	d94e      	bls.n	800f296 <_svfiprintf_r+0x17e>
 800f1f8:	b1b0      	cbz	r0, 800f228 <_svfiprintf_r+0x110>
 800f1fa:	9207      	str	r2, [sp, #28]
 800f1fc:	e014      	b.n	800f228 <_svfiprintf_r+0x110>
 800f1fe:	eba0 0308 	sub.w	r3, r0, r8
 800f202:	fa09 f303 	lsl.w	r3, r9, r3
 800f206:	4313      	orrs	r3, r2
 800f208:	9304      	str	r3, [sp, #16]
 800f20a:	46a2      	mov	sl, r4
 800f20c:	e7d2      	b.n	800f1b4 <_svfiprintf_r+0x9c>
 800f20e:	9b03      	ldr	r3, [sp, #12]
 800f210:	1d19      	adds	r1, r3, #4
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	9103      	str	r1, [sp, #12]
 800f216:	2b00      	cmp	r3, #0
 800f218:	bfbb      	ittet	lt
 800f21a:	425b      	neglt	r3, r3
 800f21c:	f042 0202 	orrlt.w	r2, r2, #2
 800f220:	9307      	strge	r3, [sp, #28]
 800f222:	9307      	strlt	r3, [sp, #28]
 800f224:	bfb8      	it	lt
 800f226:	9204      	strlt	r2, [sp, #16]
 800f228:	7823      	ldrb	r3, [r4, #0]
 800f22a:	2b2e      	cmp	r3, #46	; 0x2e
 800f22c:	d10c      	bne.n	800f248 <_svfiprintf_r+0x130>
 800f22e:	7863      	ldrb	r3, [r4, #1]
 800f230:	2b2a      	cmp	r3, #42	; 0x2a
 800f232:	d135      	bne.n	800f2a0 <_svfiprintf_r+0x188>
 800f234:	9b03      	ldr	r3, [sp, #12]
 800f236:	1d1a      	adds	r2, r3, #4
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	9203      	str	r2, [sp, #12]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	bfb8      	it	lt
 800f240:	f04f 33ff 	movlt.w	r3, #4294967295
 800f244:	3402      	adds	r4, #2
 800f246:	9305      	str	r3, [sp, #20]
 800f248:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f314 <_svfiprintf_r+0x1fc>
 800f24c:	7821      	ldrb	r1, [r4, #0]
 800f24e:	2203      	movs	r2, #3
 800f250:	4650      	mov	r0, sl
 800f252:	f7f0 ffe5 	bl	8000220 <memchr>
 800f256:	b140      	cbz	r0, 800f26a <_svfiprintf_r+0x152>
 800f258:	2340      	movs	r3, #64	; 0x40
 800f25a:	eba0 000a 	sub.w	r0, r0, sl
 800f25e:	fa03 f000 	lsl.w	r0, r3, r0
 800f262:	9b04      	ldr	r3, [sp, #16]
 800f264:	4303      	orrs	r3, r0
 800f266:	3401      	adds	r4, #1
 800f268:	9304      	str	r3, [sp, #16]
 800f26a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f26e:	4826      	ldr	r0, [pc, #152]	; (800f308 <_svfiprintf_r+0x1f0>)
 800f270:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f274:	2206      	movs	r2, #6
 800f276:	f7f0 ffd3 	bl	8000220 <memchr>
 800f27a:	2800      	cmp	r0, #0
 800f27c:	d038      	beq.n	800f2f0 <_svfiprintf_r+0x1d8>
 800f27e:	4b23      	ldr	r3, [pc, #140]	; (800f30c <_svfiprintf_r+0x1f4>)
 800f280:	bb1b      	cbnz	r3, 800f2ca <_svfiprintf_r+0x1b2>
 800f282:	9b03      	ldr	r3, [sp, #12]
 800f284:	3307      	adds	r3, #7
 800f286:	f023 0307 	bic.w	r3, r3, #7
 800f28a:	3308      	adds	r3, #8
 800f28c:	9303      	str	r3, [sp, #12]
 800f28e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f290:	4433      	add	r3, r6
 800f292:	9309      	str	r3, [sp, #36]	; 0x24
 800f294:	e767      	b.n	800f166 <_svfiprintf_r+0x4e>
 800f296:	fb0c 3202 	mla	r2, ip, r2, r3
 800f29a:	460c      	mov	r4, r1
 800f29c:	2001      	movs	r0, #1
 800f29e:	e7a5      	b.n	800f1ec <_svfiprintf_r+0xd4>
 800f2a0:	2300      	movs	r3, #0
 800f2a2:	3401      	adds	r4, #1
 800f2a4:	9305      	str	r3, [sp, #20]
 800f2a6:	4619      	mov	r1, r3
 800f2a8:	f04f 0c0a 	mov.w	ip, #10
 800f2ac:	4620      	mov	r0, r4
 800f2ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f2b2:	3a30      	subs	r2, #48	; 0x30
 800f2b4:	2a09      	cmp	r2, #9
 800f2b6:	d903      	bls.n	800f2c0 <_svfiprintf_r+0x1a8>
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d0c5      	beq.n	800f248 <_svfiprintf_r+0x130>
 800f2bc:	9105      	str	r1, [sp, #20]
 800f2be:	e7c3      	b.n	800f248 <_svfiprintf_r+0x130>
 800f2c0:	fb0c 2101 	mla	r1, ip, r1, r2
 800f2c4:	4604      	mov	r4, r0
 800f2c6:	2301      	movs	r3, #1
 800f2c8:	e7f0      	b.n	800f2ac <_svfiprintf_r+0x194>
 800f2ca:	ab03      	add	r3, sp, #12
 800f2cc:	9300      	str	r3, [sp, #0]
 800f2ce:	462a      	mov	r2, r5
 800f2d0:	4b0f      	ldr	r3, [pc, #60]	; (800f310 <_svfiprintf_r+0x1f8>)
 800f2d2:	a904      	add	r1, sp, #16
 800f2d4:	4638      	mov	r0, r7
 800f2d6:	f3af 8000 	nop.w
 800f2da:	1c42      	adds	r2, r0, #1
 800f2dc:	4606      	mov	r6, r0
 800f2de:	d1d6      	bne.n	800f28e <_svfiprintf_r+0x176>
 800f2e0:	89ab      	ldrh	r3, [r5, #12]
 800f2e2:	065b      	lsls	r3, r3, #25
 800f2e4:	f53f af2c 	bmi.w	800f140 <_svfiprintf_r+0x28>
 800f2e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f2ea:	b01d      	add	sp, #116	; 0x74
 800f2ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2f0:	ab03      	add	r3, sp, #12
 800f2f2:	9300      	str	r3, [sp, #0]
 800f2f4:	462a      	mov	r2, r5
 800f2f6:	4b06      	ldr	r3, [pc, #24]	; (800f310 <_svfiprintf_r+0x1f8>)
 800f2f8:	a904      	add	r1, sp, #16
 800f2fa:	4638      	mov	r0, r7
 800f2fc:	f000 fa4c 	bl	800f798 <_printf_i>
 800f300:	e7eb      	b.n	800f2da <_svfiprintf_r+0x1c2>
 800f302:	bf00      	nop
 800f304:	08010e7c 	.word	0x08010e7c
 800f308:	08010e86 	.word	0x08010e86
 800f30c:	00000000 	.word	0x00000000
 800f310:	0800f061 	.word	0x0800f061
 800f314:	08010e82 	.word	0x08010e82

0800f318 <_sungetc_r>:
 800f318:	b538      	push	{r3, r4, r5, lr}
 800f31a:	1c4b      	adds	r3, r1, #1
 800f31c:	4614      	mov	r4, r2
 800f31e:	d103      	bne.n	800f328 <_sungetc_r+0x10>
 800f320:	f04f 35ff 	mov.w	r5, #4294967295
 800f324:	4628      	mov	r0, r5
 800f326:	bd38      	pop	{r3, r4, r5, pc}
 800f328:	8993      	ldrh	r3, [r2, #12]
 800f32a:	f023 0320 	bic.w	r3, r3, #32
 800f32e:	8193      	strh	r3, [r2, #12]
 800f330:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f332:	6852      	ldr	r2, [r2, #4]
 800f334:	b2cd      	uxtb	r5, r1
 800f336:	b18b      	cbz	r3, 800f35c <_sungetc_r+0x44>
 800f338:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f33a:	4293      	cmp	r3, r2
 800f33c:	dd08      	ble.n	800f350 <_sungetc_r+0x38>
 800f33e:	6823      	ldr	r3, [r4, #0]
 800f340:	1e5a      	subs	r2, r3, #1
 800f342:	6022      	str	r2, [r4, #0]
 800f344:	f803 5c01 	strb.w	r5, [r3, #-1]
 800f348:	6863      	ldr	r3, [r4, #4]
 800f34a:	3301      	adds	r3, #1
 800f34c:	6063      	str	r3, [r4, #4]
 800f34e:	e7e9      	b.n	800f324 <_sungetc_r+0xc>
 800f350:	4621      	mov	r1, r4
 800f352:	f000 fdc9 	bl	800fee8 <__submore>
 800f356:	2800      	cmp	r0, #0
 800f358:	d0f1      	beq.n	800f33e <_sungetc_r+0x26>
 800f35a:	e7e1      	b.n	800f320 <_sungetc_r+0x8>
 800f35c:	6921      	ldr	r1, [r4, #16]
 800f35e:	6823      	ldr	r3, [r4, #0]
 800f360:	b151      	cbz	r1, 800f378 <_sungetc_r+0x60>
 800f362:	4299      	cmp	r1, r3
 800f364:	d208      	bcs.n	800f378 <_sungetc_r+0x60>
 800f366:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800f36a:	42a9      	cmp	r1, r5
 800f36c:	d104      	bne.n	800f378 <_sungetc_r+0x60>
 800f36e:	3b01      	subs	r3, #1
 800f370:	3201      	adds	r2, #1
 800f372:	6023      	str	r3, [r4, #0]
 800f374:	6062      	str	r2, [r4, #4]
 800f376:	e7d5      	b.n	800f324 <_sungetc_r+0xc>
 800f378:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800f37c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f380:	6363      	str	r3, [r4, #52]	; 0x34
 800f382:	2303      	movs	r3, #3
 800f384:	63a3      	str	r3, [r4, #56]	; 0x38
 800f386:	4623      	mov	r3, r4
 800f388:	f803 5f46 	strb.w	r5, [r3, #70]!
 800f38c:	6023      	str	r3, [r4, #0]
 800f38e:	2301      	movs	r3, #1
 800f390:	e7dc      	b.n	800f34c <_sungetc_r+0x34>

0800f392 <__ssrefill_r>:
 800f392:	b510      	push	{r4, lr}
 800f394:	460c      	mov	r4, r1
 800f396:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800f398:	b169      	cbz	r1, 800f3b6 <__ssrefill_r+0x24>
 800f39a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f39e:	4299      	cmp	r1, r3
 800f3a0:	d001      	beq.n	800f3a6 <__ssrefill_r+0x14>
 800f3a2:	f000 fdf7 	bl	800ff94 <_free_r>
 800f3a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f3a8:	6063      	str	r3, [r4, #4]
 800f3aa:	2000      	movs	r0, #0
 800f3ac:	6360      	str	r0, [r4, #52]	; 0x34
 800f3ae:	b113      	cbz	r3, 800f3b6 <__ssrefill_r+0x24>
 800f3b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f3b2:	6023      	str	r3, [r4, #0]
 800f3b4:	bd10      	pop	{r4, pc}
 800f3b6:	6923      	ldr	r3, [r4, #16]
 800f3b8:	6023      	str	r3, [r4, #0]
 800f3ba:	2300      	movs	r3, #0
 800f3bc:	6063      	str	r3, [r4, #4]
 800f3be:	89a3      	ldrh	r3, [r4, #12]
 800f3c0:	f043 0320 	orr.w	r3, r3, #32
 800f3c4:	81a3      	strh	r3, [r4, #12]
 800f3c6:	f04f 30ff 	mov.w	r0, #4294967295
 800f3ca:	e7f3      	b.n	800f3b4 <__ssrefill_r+0x22>

0800f3cc <__ssvfiscanf_r>:
 800f3cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f3d0:	460c      	mov	r4, r1
 800f3d2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800f3d6:	2100      	movs	r1, #0
 800f3d8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800f3dc:	49a6      	ldr	r1, [pc, #664]	; (800f678 <__ssvfiscanf_r+0x2ac>)
 800f3de:	91a0      	str	r1, [sp, #640]	; 0x280
 800f3e0:	f10d 0804 	add.w	r8, sp, #4
 800f3e4:	49a5      	ldr	r1, [pc, #660]	; (800f67c <__ssvfiscanf_r+0x2b0>)
 800f3e6:	4fa6      	ldr	r7, [pc, #664]	; (800f680 <__ssvfiscanf_r+0x2b4>)
 800f3e8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800f684 <__ssvfiscanf_r+0x2b8>
 800f3ec:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800f3f0:	4606      	mov	r6, r0
 800f3f2:	91a1      	str	r1, [sp, #644]	; 0x284
 800f3f4:	9300      	str	r3, [sp, #0]
 800f3f6:	7813      	ldrb	r3, [r2, #0]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	f000 815a 	beq.w	800f6b2 <__ssvfiscanf_r+0x2e6>
 800f3fe:	5dd9      	ldrb	r1, [r3, r7]
 800f400:	f011 0108 	ands.w	r1, r1, #8
 800f404:	f102 0501 	add.w	r5, r2, #1
 800f408:	d019      	beq.n	800f43e <__ssvfiscanf_r+0x72>
 800f40a:	6863      	ldr	r3, [r4, #4]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	dd0f      	ble.n	800f430 <__ssvfiscanf_r+0x64>
 800f410:	6823      	ldr	r3, [r4, #0]
 800f412:	781a      	ldrb	r2, [r3, #0]
 800f414:	5cba      	ldrb	r2, [r7, r2]
 800f416:	0712      	lsls	r2, r2, #28
 800f418:	d401      	bmi.n	800f41e <__ssvfiscanf_r+0x52>
 800f41a:	462a      	mov	r2, r5
 800f41c:	e7eb      	b.n	800f3f6 <__ssvfiscanf_r+0x2a>
 800f41e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f420:	3201      	adds	r2, #1
 800f422:	9245      	str	r2, [sp, #276]	; 0x114
 800f424:	6862      	ldr	r2, [r4, #4]
 800f426:	3301      	adds	r3, #1
 800f428:	3a01      	subs	r2, #1
 800f42a:	6062      	str	r2, [r4, #4]
 800f42c:	6023      	str	r3, [r4, #0]
 800f42e:	e7ec      	b.n	800f40a <__ssvfiscanf_r+0x3e>
 800f430:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f432:	4621      	mov	r1, r4
 800f434:	4630      	mov	r0, r6
 800f436:	4798      	blx	r3
 800f438:	2800      	cmp	r0, #0
 800f43a:	d0e9      	beq.n	800f410 <__ssvfiscanf_r+0x44>
 800f43c:	e7ed      	b.n	800f41a <__ssvfiscanf_r+0x4e>
 800f43e:	2b25      	cmp	r3, #37	; 0x25
 800f440:	d012      	beq.n	800f468 <__ssvfiscanf_r+0x9c>
 800f442:	469a      	mov	sl, r3
 800f444:	6863      	ldr	r3, [r4, #4]
 800f446:	2b00      	cmp	r3, #0
 800f448:	f340 8091 	ble.w	800f56e <__ssvfiscanf_r+0x1a2>
 800f44c:	6822      	ldr	r2, [r4, #0]
 800f44e:	7813      	ldrb	r3, [r2, #0]
 800f450:	4553      	cmp	r3, sl
 800f452:	f040 812e 	bne.w	800f6b2 <__ssvfiscanf_r+0x2e6>
 800f456:	6863      	ldr	r3, [r4, #4]
 800f458:	3b01      	subs	r3, #1
 800f45a:	6063      	str	r3, [r4, #4]
 800f45c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800f45e:	3201      	adds	r2, #1
 800f460:	3301      	adds	r3, #1
 800f462:	6022      	str	r2, [r4, #0]
 800f464:	9345      	str	r3, [sp, #276]	; 0x114
 800f466:	e7d8      	b.n	800f41a <__ssvfiscanf_r+0x4e>
 800f468:	9141      	str	r1, [sp, #260]	; 0x104
 800f46a:	9143      	str	r1, [sp, #268]	; 0x10c
 800f46c:	7853      	ldrb	r3, [r2, #1]
 800f46e:	2b2a      	cmp	r3, #42	; 0x2a
 800f470:	bf02      	ittt	eq
 800f472:	2310      	moveq	r3, #16
 800f474:	1c95      	addeq	r5, r2, #2
 800f476:	9341      	streq	r3, [sp, #260]	; 0x104
 800f478:	220a      	movs	r2, #10
 800f47a:	46aa      	mov	sl, r5
 800f47c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800f480:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800f484:	2b09      	cmp	r3, #9
 800f486:	d91d      	bls.n	800f4c4 <__ssvfiscanf_r+0xf8>
 800f488:	487e      	ldr	r0, [pc, #504]	; (800f684 <__ssvfiscanf_r+0x2b8>)
 800f48a:	2203      	movs	r2, #3
 800f48c:	f7f0 fec8 	bl	8000220 <memchr>
 800f490:	b140      	cbz	r0, 800f4a4 <__ssvfiscanf_r+0xd8>
 800f492:	2301      	movs	r3, #1
 800f494:	eba0 0009 	sub.w	r0, r0, r9
 800f498:	fa03 f000 	lsl.w	r0, r3, r0
 800f49c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f49e:	4318      	orrs	r0, r3
 800f4a0:	9041      	str	r0, [sp, #260]	; 0x104
 800f4a2:	4655      	mov	r5, sl
 800f4a4:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f4a8:	2b78      	cmp	r3, #120	; 0x78
 800f4aa:	d806      	bhi.n	800f4ba <__ssvfiscanf_r+0xee>
 800f4ac:	2b57      	cmp	r3, #87	; 0x57
 800f4ae:	d810      	bhi.n	800f4d2 <__ssvfiscanf_r+0x106>
 800f4b0:	2b25      	cmp	r3, #37	; 0x25
 800f4b2:	d0c6      	beq.n	800f442 <__ssvfiscanf_r+0x76>
 800f4b4:	d856      	bhi.n	800f564 <__ssvfiscanf_r+0x198>
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d064      	beq.n	800f584 <__ssvfiscanf_r+0x1b8>
 800f4ba:	2303      	movs	r3, #3
 800f4bc:	9347      	str	r3, [sp, #284]	; 0x11c
 800f4be:	230a      	movs	r3, #10
 800f4c0:	9342      	str	r3, [sp, #264]	; 0x108
 800f4c2:	e071      	b.n	800f5a8 <__ssvfiscanf_r+0x1dc>
 800f4c4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800f4c6:	fb02 1103 	mla	r1, r2, r3, r1
 800f4ca:	3930      	subs	r1, #48	; 0x30
 800f4cc:	9143      	str	r1, [sp, #268]	; 0x10c
 800f4ce:	4655      	mov	r5, sl
 800f4d0:	e7d3      	b.n	800f47a <__ssvfiscanf_r+0xae>
 800f4d2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800f4d6:	2a20      	cmp	r2, #32
 800f4d8:	d8ef      	bhi.n	800f4ba <__ssvfiscanf_r+0xee>
 800f4da:	a101      	add	r1, pc, #4	; (adr r1, 800f4e0 <__ssvfiscanf_r+0x114>)
 800f4dc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f4e0:	0800f593 	.word	0x0800f593
 800f4e4:	0800f4bb 	.word	0x0800f4bb
 800f4e8:	0800f4bb 	.word	0x0800f4bb
 800f4ec:	0800f5f1 	.word	0x0800f5f1
 800f4f0:	0800f4bb 	.word	0x0800f4bb
 800f4f4:	0800f4bb 	.word	0x0800f4bb
 800f4f8:	0800f4bb 	.word	0x0800f4bb
 800f4fc:	0800f4bb 	.word	0x0800f4bb
 800f500:	0800f4bb 	.word	0x0800f4bb
 800f504:	0800f4bb 	.word	0x0800f4bb
 800f508:	0800f4bb 	.word	0x0800f4bb
 800f50c:	0800f607 	.word	0x0800f607
 800f510:	0800f5dd 	.word	0x0800f5dd
 800f514:	0800f56b 	.word	0x0800f56b
 800f518:	0800f56b 	.word	0x0800f56b
 800f51c:	0800f56b 	.word	0x0800f56b
 800f520:	0800f4bb 	.word	0x0800f4bb
 800f524:	0800f5e1 	.word	0x0800f5e1
 800f528:	0800f4bb 	.word	0x0800f4bb
 800f52c:	0800f4bb 	.word	0x0800f4bb
 800f530:	0800f4bb 	.word	0x0800f4bb
 800f534:	0800f4bb 	.word	0x0800f4bb
 800f538:	0800f617 	.word	0x0800f617
 800f53c:	0800f5e9 	.word	0x0800f5e9
 800f540:	0800f58b 	.word	0x0800f58b
 800f544:	0800f4bb 	.word	0x0800f4bb
 800f548:	0800f4bb 	.word	0x0800f4bb
 800f54c:	0800f613 	.word	0x0800f613
 800f550:	0800f4bb 	.word	0x0800f4bb
 800f554:	0800f5dd 	.word	0x0800f5dd
 800f558:	0800f4bb 	.word	0x0800f4bb
 800f55c:	0800f4bb 	.word	0x0800f4bb
 800f560:	0800f593 	.word	0x0800f593
 800f564:	3b45      	subs	r3, #69	; 0x45
 800f566:	2b02      	cmp	r3, #2
 800f568:	d8a7      	bhi.n	800f4ba <__ssvfiscanf_r+0xee>
 800f56a:	2305      	movs	r3, #5
 800f56c:	e01b      	b.n	800f5a6 <__ssvfiscanf_r+0x1da>
 800f56e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f570:	4621      	mov	r1, r4
 800f572:	4630      	mov	r0, r6
 800f574:	4798      	blx	r3
 800f576:	2800      	cmp	r0, #0
 800f578:	f43f af68 	beq.w	800f44c <__ssvfiscanf_r+0x80>
 800f57c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800f57e:	2800      	cmp	r0, #0
 800f580:	f040 808d 	bne.w	800f69e <__ssvfiscanf_r+0x2d2>
 800f584:	f04f 30ff 	mov.w	r0, #4294967295
 800f588:	e08f      	b.n	800f6aa <__ssvfiscanf_r+0x2de>
 800f58a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f58c:	f042 0220 	orr.w	r2, r2, #32
 800f590:	9241      	str	r2, [sp, #260]	; 0x104
 800f592:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f594:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f598:	9241      	str	r2, [sp, #260]	; 0x104
 800f59a:	2210      	movs	r2, #16
 800f59c:	2b6f      	cmp	r3, #111	; 0x6f
 800f59e:	9242      	str	r2, [sp, #264]	; 0x108
 800f5a0:	bf34      	ite	cc
 800f5a2:	2303      	movcc	r3, #3
 800f5a4:	2304      	movcs	r3, #4
 800f5a6:	9347      	str	r3, [sp, #284]	; 0x11c
 800f5a8:	6863      	ldr	r3, [r4, #4]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	dd42      	ble.n	800f634 <__ssvfiscanf_r+0x268>
 800f5ae:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f5b0:	0659      	lsls	r1, r3, #25
 800f5b2:	d404      	bmi.n	800f5be <__ssvfiscanf_r+0x1f2>
 800f5b4:	6823      	ldr	r3, [r4, #0]
 800f5b6:	781a      	ldrb	r2, [r3, #0]
 800f5b8:	5cba      	ldrb	r2, [r7, r2]
 800f5ba:	0712      	lsls	r2, r2, #28
 800f5bc:	d441      	bmi.n	800f642 <__ssvfiscanf_r+0x276>
 800f5be:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800f5c0:	2b02      	cmp	r3, #2
 800f5c2:	dc50      	bgt.n	800f666 <__ssvfiscanf_r+0x29a>
 800f5c4:	466b      	mov	r3, sp
 800f5c6:	4622      	mov	r2, r4
 800f5c8:	a941      	add	r1, sp, #260	; 0x104
 800f5ca:	4630      	mov	r0, r6
 800f5cc:	f000 fa0a 	bl	800f9e4 <_scanf_chars>
 800f5d0:	2801      	cmp	r0, #1
 800f5d2:	d06e      	beq.n	800f6b2 <__ssvfiscanf_r+0x2e6>
 800f5d4:	2802      	cmp	r0, #2
 800f5d6:	f47f af20 	bne.w	800f41a <__ssvfiscanf_r+0x4e>
 800f5da:	e7cf      	b.n	800f57c <__ssvfiscanf_r+0x1b0>
 800f5dc:	220a      	movs	r2, #10
 800f5de:	e7dd      	b.n	800f59c <__ssvfiscanf_r+0x1d0>
 800f5e0:	2300      	movs	r3, #0
 800f5e2:	9342      	str	r3, [sp, #264]	; 0x108
 800f5e4:	2303      	movs	r3, #3
 800f5e6:	e7de      	b.n	800f5a6 <__ssvfiscanf_r+0x1da>
 800f5e8:	2308      	movs	r3, #8
 800f5ea:	9342      	str	r3, [sp, #264]	; 0x108
 800f5ec:	2304      	movs	r3, #4
 800f5ee:	e7da      	b.n	800f5a6 <__ssvfiscanf_r+0x1da>
 800f5f0:	4629      	mov	r1, r5
 800f5f2:	4640      	mov	r0, r8
 800f5f4:	f000 fb48 	bl	800fc88 <__sccl>
 800f5f8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f5fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f5fe:	9341      	str	r3, [sp, #260]	; 0x104
 800f600:	4605      	mov	r5, r0
 800f602:	2301      	movs	r3, #1
 800f604:	e7cf      	b.n	800f5a6 <__ssvfiscanf_r+0x1da>
 800f606:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f608:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f60c:	9341      	str	r3, [sp, #260]	; 0x104
 800f60e:	2300      	movs	r3, #0
 800f610:	e7c9      	b.n	800f5a6 <__ssvfiscanf_r+0x1da>
 800f612:	2302      	movs	r3, #2
 800f614:	e7c7      	b.n	800f5a6 <__ssvfiscanf_r+0x1da>
 800f616:	9841      	ldr	r0, [sp, #260]	; 0x104
 800f618:	06c3      	lsls	r3, r0, #27
 800f61a:	f53f aefe 	bmi.w	800f41a <__ssvfiscanf_r+0x4e>
 800f61e:	9b00      	ldr	r3, [sp, #0]
 800f620:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f622:	1d19      	adds	r1, r3, #4
 800f624:	9100      	str	r1, [sp, #0]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	f010 0f01 	tst.w	r0, #1
 800f62c:	bf14      	ite	ne
 800f62e:	801a      	strhne	r2, [r3, #0]
 800f630:	601a      	streq	r2, [r3, #0]
 800f632:	e6f2      	b.n	800f41a <__ssvfiscanf_r+0x4e>
 800f634:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f636:	4621      	mov	r1, r4
 800f638:	4630      	mov	r0, r6
 800f63a:	4798      	blx	r3
 800f63c:	2800      	cmp	r0, #0
 800f63e:	d0b6      	beq.n	800f5ae <__ssvfiscanf_r+0x1e2>
 800f640:	e79c      	b.n	800f57c <__ssvfiscanf_r+0x1b0>
 800f642:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f644:	3201      	adds	r2, #1
 800f646:	9245      	str	r2, [sp, #276]	; 0x114
 800f648:	6862      	ldr	r2, [r4, #4]
 800f64a:	3a01      	subs	r2, #1
 800f64c:	2a00      	cmp	r2, #0
 800f64e:	6062      	str	r2, [r4, #4]
 800f650:	dd02      	ble.n	800f658 <__ssvfiscanf_r+0x28c>
 800f652:	3301      	adds	r3, #1
 800f654:	6023      	str	r3, [r4, #0]
 800f656:	e7ad      	b.n	800f5b4 <__ssvfiscanf_r+0x1e8>
 800f658:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f65a:	4621      	mov	r1, r4
 800f65c:	4630      	mov	r0, r6
 800f65e:	4798      	blx	r3
 800f660:	2800      	cmp	r0, #0
 800f662:	d0a7      	beq.n	800f5b4 <__ssvfiscanf_r+0x1e8>
 800f664:	e78a      	b.n	800f57c <__ssvfiscanf_r+0x1b0>
 800f666:	2b04      	cmp	r3, #4
 800f668:	dc0e      	bgt.n	800f688 <__ssvfiscanf_r+0x2bc>
 800f66a:	466b      	mov	r3, sp
 800f66c:	4622      	mov	r2, r4
 800f66e:	a941      	add	r1, sp, #260	; 0x104
 800f670:	4630      	mov	r0, r6
 800f672:	f000 fa11 	bl	800fa98 <_scanf_i>
 800f676:	e7ab      	b.n	800f5d0 <__ssvfiscanf_r+0x204>
 800f678:	0800f319 	.word	0x0800f319
 800f67c:	0800f393 	.word	0x0800f393
 800f680:	08010ecb 	.word	0x08010ecb
 800f684:	08010e82 	.word	0x08010e82
 800f688:	4b0b      	ldr	r3, [pc, #44]	; (800f6b8 <__ssvfiscanf_r+0x2ec>)
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	f43f aec5 	beq.w	800f41a <__ssvfiscanf_r+0x4e>
 800f690:	466b      	mov	r3, sp
 800f692:	4622      	mov	r2, r4
 800f694:	a941      	add	r1, sp, #260	; 0x104
 800f696:	4630      	mov	r0, r6
 800f698:	f3af 8000 	nop.w
 800f69c:	e798      	b.n	800f5d0 <__ssvfiscanf_r+0x204>
 800f69e:	89a3      	ldrh	r3, [r4, #12]
 800f6a0:	f013 0f40 	tst.w	r3, #64	; 0x40
 800f6a4:	bf18      	it	ne
 800f6a6:	f04f 30ff 	movne.w	r0, #4294967295
 800f6aa:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800f6ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f6b2:	9844      	ldr	r0, [sp, #272]	; 0x110
 800f6b4:	e7f9      	b.n	800f6aa <__ssvfiscanf_r+0x2de>
 800f6b6:	bf00      	nop
 800f6b8:	00000000 	.word	0x00000000

0800f6bc <_printf_common>:
 800f6bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f6c0:	4616      	mov	r6, r2
 800f6c2:	4699      	mov	r9, r3
 800f6c4:	688a      	ldr	r2, [r1, #8]
 800f6c6:	690b      	ldr	r3, [r1, #16]
 800f6c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f6cc:	4293      	cmp	r3, r2
 800f6ce:	bfb8      	it	lt
 800f6d0:	4613      	movlt	r3, r2
 800f6d2:	6033      	str	r3, [r6, #0]
 800f6d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f6d8:	4607      	mov	r7, r0
 800f6da:	460c      	mov	r4, r1
 800f6dc:	b10a      	cbz	r2, 800f6e2 <_printf_common+0x26>
 800f6de:	3301      	adds	r3, #1
 800f6e0:	6033      	str	r3, [r6, #0]
 800f6e2:	6823      	ldr	r3, [r4, #0]
 800f6e4:	0699      	lsls	r1, r3, #26
 800f6e6:	bf42      	ittt	mi
 800f6e8:	6833      	ldrmi	r3, [r6, #0]
 800f6ea:	3302      	addmi	r3, #2
 800f6ec:	6033      	strmi	r3, [r6, #0]
 800f6ee:	6825      	ldr	r5, [r4, #0]
 800f6f0:	f015 0506 	ands.w	r5, r5, #6
 800f6f4:	d106      	bne.n	800f704 <_printf_common+0x48>
 800f6f6:	f104 0a19 	add.w	sl, r4, #25
 800f6fa:	68e3      	ldr	r3, [r4, #12]
 800f6fc:	6832      	ldr	r2, [r6, #0]
 800f6fe:	1a9b      	subs	r3, r3, r2
 800f700:	42ab      	cmp	r3, r5
 800f702:	dc26      	bgt.n	800f752 <_printf_common+0x96>
 800f704:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f708:	1e13      	subs	r3, r2, #0
 800f70a:	6822      	ldr	r2, [r4, #0]
 800f70c:	bf18      	it	ne
 800f70e:	2301      	movne	r3, #1
 800f710:	0692      	lsls	r2, r2, #26
 800f712:	d42b      	bmi.n	800f76c <_printf_common+0xb0>
 800f714:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f718:	4649      	mov	r1, r9
 800f71a:	4638      	mov	r0, r7
 800f71c:	47c0      	blx	r8
 800f71e:	3001      	adds	r0, #1
 800f720:	d01e      	beq.n	800f760 <_printf_common+0xa4>
 800f722:	6823      	ldr	r3, [r4, #0]
 800f724:	68e5      	ldr	r5, [r4, #12]
 800f726:	6832      	ldr	r2, [r6, #0]
 800f728:	f003 0306 	and.w	r3, r3, #6
 800f72c:	2b04      	cmp	r3, #4
 800f72e:	bf08      	it	eq
 800f730:	1aad      	subeq	r5, r5, r2
 800f732:	68a3      	ldr	r3, [r4, #8]
 800f734:	6922      	ldr	r2, [r4, #16]
 800f736:	bf0c      	ite	eq
 800f738:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f73c:	2500      	movne	r5, #0
 800f73e:	4293      	cmp	r3, r2
 800f740:	bfc4      	itt	gt
 800f742:	1a9b      	subgt	r3, r3, r2
 800f744:	18ed      	addgt	r5, r5, r3
 800f746:	2600      	movs	r6, #0
 800f748:	341a      	adds	r4, #26
 800f74a:	42b5      	cmp	r5, r6
 800f74c:	d11a      	bne.n	800f784 <_printf_common+0xc8>
 800f74e:	2000      	movs	r0, #0
 800f750:	e008      	b.n	800f764 <_printf_common+0xa8>
 800f752:	2301      	movs	r3, #1
 800f754:	4652      	mov	r2, sl
 800f756:	4649      	mov	r1, r9
 800f758:	4638      	mov	r0, r7
 800f75a:	47c0      	blx	r8
 800f75c:	3001      	adds	r0, #1
 800f75e:	d103      	bne.n	800f768 <_printf_common+0xac>
 800f760:	f04f 30ff 	mov.w	r0, #4294967295
 800f764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f768:	3501      	adds	r5, #1
 800f76a:	e7c6      	b.n	800f6fa <_printf_common+0x3e>
 800f76c:	18e1      	adds	r1, r4, r3
 800f76e:	1c5a      	adds	r2, r3, #1
 800f770:	2030      	movs	r0, #48	; 0x30
 800f772:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f776:	4422      	add	r2, r4
 800f778:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f77c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f780:	3302      	adds	r3, #2
 800f782:	e7c7      	b.n	800f714 <_printf_common+0x58>
 800f784:	2301      	movs	r3, #1
 800f786:	4622      	mov	r2, r4
 800f788:	4649      	mov	r1, r9
 800f78a:	4638      	mov	r0, r7
 800f78c:	47c0      	blx	r8
 800f78e:	3001      	adds	r0, #1
 800f790:	d0e6      	beq.n	800f760 <_printf_common+0xa4>
 800f792:	3601      	adds	r6, #1
 800f794:	e7d9      	b.n	800f74a <_printf_common+0x8e>
	...

0800f798 <_printf_i>:
 800f798:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f79c:	7e0f      	ldrb	r7, [r1, #24]
 800f79e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f7a0:	2f78      	cmp	r7, #120	; 0x78
 800f7a2:	4691      	mov	r9, r2
 800f7a4:	4680      	mov	r8, r0
 800f7a6:	460c      	mov	r4, r1
 800f7a8:	469a      	mov	sl, r3
 800f7aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f7ae:	d807      	bhi.n	800f7c0 <_printf_i+0x28>
 800f7b0:	2f62      	cmp	r7, #98	; 0x62
 800f7b2:	d80a      	bhi.n	800f7ca <_printf_i+0x32>
 800f7b4:	2f00      	cmp	r7, #0
 800f7b6:	f000 80d8 	beq.w	800f96a <_printf_i+0x1d2>
 800f7ba:	2f58      	cmp	r7, #88	; 0x58
 800f7bc:	f000 80a3 	beq.w	800f906 <_printf_i+0x16e>
 800f7c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f7c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f7c8:	e03a      	b.n	800f840 <_printf_i+0xa8>
 800f7ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f7ce:	2b15      	cmp	r3, #21
 800f7d0:	d8f6      	bhi.n	800f7c0 <_printf_i+0x28>
 800f7d2:	a101      	add	r1, pc, #4	; (adr r1, 800f7d8 <_printf_i+0x40>)
 800f7d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f7d8:	0800f831 	.word	0x0800f831
 800f7dc:	0800f845 	.word	0x0800f845
 800f7e0:	0800f7c1 	.word	0x0800f7c1
 800f7e4:	0800f7c1 	.word	0x0800f7c1
 800f7e8:	0800f7c1 	.word	0x0800f7c1
 800f7ec:	0800f7c1 	.word	0x0800f7c1
 800f7f0:	0800f845 	.word	0x0800f845
 800f7f4:	0800f7c1 	.word	0x0800f7c1
 800f7f8:	0800f7c1 	.word	0x0800f7c1
 800f7fc:	0800f7c1 	.word	0x0800f7c1
 800f800:	0800f7c1 	.word	0x0800f7c1
 800f804:	0800f951 	.word	0x0800f951
 800f808:	0800f875 	.word	0x0800f875
 800f80c:	0800f933 	.word	0x0800f933
 800f810:	0800f7c1 	.word	0x0800f7c1
 800f814:	0800f7c1 	.word	0x0800f7c1
 800f818:	0800f973 	.word	0x0800f973
 800f81c:	0800f7c1 	.word	0x0800f7c1
 800f820:	0800f875 	.word	0x0800f875
 800f824:	0800f7c1 	.word	0x0800f7c1
 800f828:	0800f7c1 	.word	0x0800f7c1
 800f82c:	0800f93b 	.word	0x0800f93b
 800f830:	682b      	ldr	r3, [r5, #0]
 800f832:	1d1a      	adds	r2, r3, #4
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	602a      	str	r2, [r5, #0]
 800f838:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f83c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f840:	2301      	movs	r3, #1
 800f842:	e0a3      	b.n	800f98c <_printf_i+0x1f4>
 800f844:	6820      	ldr	r0, [r4, #0]
 800f846:	6829      	ldr	r1, [r5, #0]
 800f848:	0606      	lsls	r6, r0, #24
 800f84a:	f101 0304 	add.w	r3, r1, #4
 800f84e:	d50a      	bpl.n	800f866 <_printf_i+0xce>
 800f850:	680e      	ldr	r6, [r1, #0]
 800f852:	602b      	str	r3, [r5, #0]
 800f854:	2e00      	cmp	r6, #0
 800f856:	da03      	bge.n	800f860 <_printf_i+0xc8>
 800f858:	232d      	movs	r3, #45	; 0x2d
 800f85a:	4276      	negs	r6, r6
 800f85c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f860:	485e      	ldr	r0, [pc, #376]	; (800f9dc <_printf_i+0x244>)
 800f862:	230a      	movs	r3, #10
 800f864:	e019      	b.n	800f89a <_printf_i+0x102>
 800f866:	680e      	ldr	r6, [r1, #0]
 800f868:	602b      	str	r3, [r5, #0]
 800f86a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f86e:	bf18      	it	ne
 800f870:	b236      	sxthne	r6, r6
 800f872:	e7ef      	b.n	800f854 <_printf_i+0xbc>
 800f874:	682b      	ldr	r3, [r5, #0]
 800f876:	6820      	ldr	r0, [r4, #0]
 800f878:	1d19      	adds	r1, r3, #4
 800f87a:	6029      	str	r1, [r5, #0]
 800f87c:	0601      	lsls	r1, r0, #24
 800f87e:	d501      	bpl.n	800f884 <_printf_i+0xec>
 800f880:	681e      	ldr	r6, [r3, #0]
 800f882:	e002      	b.n	800f88a <_printf_i+0xf2>
 800f884:	0646      	lsls	r6, r0, #25
 800f886:	d5fb      	bpl.n	800f880 <_printf_i+0xe8>
 800f888:	881e      	ldrh	r6, [r3, #0]
 800f88a:	4854      	ldr	r0, [pc, #336]	; (800f9dc <_printf_i+0x244>)
 800f88c:	2f6f      	cmp	r7, #111	; 0x6f
 800f88e:	bf0c      	ite	eq
 800f890:	2308      	moveq	r3, #8
 800f892:	230a      	movne	r3, #10
 800f894:	2100      	movs	r1, #0
 800f896:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f89a:	6865      	ldr	r5, [r4, #4]
 800f89c:	60a5      	str	r5, [r4, #8]
 800f89e:	2d00      	cmp	r5, #0
 800f8a0:	bfa2      	ittt	ge
 800f8a2:	6821      	ldrge	r1, [r4, #0]
 800f8a4:	f021 0104 	bicge.w	r1, r1, #4
 800f8a8:	6021      	strge	r1, [r4, #0]
 800f8aa:	b90e      	cbnz	r6, 800f8b0 <_printf_i+0x118>
 800f8ac:	2d00      	cmp	r5, #0
 800f8ae:	d04d      	beq.n	800f94c <_printf_i+0x1b4>
 800f8b0:	4615      	mov	r5, r2
 800f8b2:	fbb6 f1f3 	udiv	r1, r6, r3
 800f8b6:	fb03 6711 	mls	r7, r3, r1, r6
 800f8ba:	5dc7      	ldrb	r7, [r0, r7]
 800f8bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f8c0:	4637      	mov	r7, r6
 800f8c2:	42bb      	cmp	r3, r7
 800f8c4:	460e      	mov	r6, r1
 800f8c6:	d9f4      	bls.n	800f8b2 <_printf_i+0x11a>
 800f8c8:	2b08      	cmp	r3, #8
 800f8ca:	d10b      	bne.n	800f8e4 <_printf_i+0x14c>
 800f8cc:	6823      	ldr	r3, [r4, #0]
 800f8ce:	07de      	lsls	r6, r3, #31
 800f8d0:	d508      	bpl.n	800f8e4 <_printf_i+0x14c>
 800f8d2:	6923      	ldr	r3, [r4, #16]
 800f8d4:	6861      	ldr	r1, [r4, #4]
 800f8d6:	4299      	cmp	r1, r3
 800f8d8:	bfde      	ittt	le
 800f8da:	2330      	movle	r3, #48	; 0x30
 800f8dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f8e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f8e4:	1b52      	subs	r2, r2, r5
 800f8e6:	6122      	str	r2, [r4, #16]
 800f8e8:	f8cd a000 	str.w	sl, [sp]
 800f8ec:	464b      	mov	r3, r9
 800f8ee:	aa03      	add	r2, sp, #12
 800f8f0:	4621      	mov	r1, r4
 800f8f2:	4640      	mov	r0, r8
 800f8f4:	f7ff fee2 	bl	800f6bc <_printf_common>
 800f8f8:	3001      	adds	r0, #1
 800f8fa:	d14c      	bne.n	800f996 <_printf_i+0x1fe>
 800f8fc:	f04f 30ff 	mov.w	r0, #4294967295
 800f900:	b004      	add	sp, #16
 800f902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f906:	4835      	ldr	r0, [pc, #212]	; (800f9dc <_printf_i+0x244>)
 800f908:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f90c:	6829      	ldr	r1, [r5, #0]
 800f90e:	6823      	ldr	r3, [r4, #0]
 800f910:	f851 6b04 	ldr.w	r6, [r1], #4
 800f914:	6029      	str	r1, [r5, #0]
 800f916:	061d      	lsls	r5, r3, #24
 800f918:	d514      	bpl.n	800f944 <_printf_i+0x1ac>
 800f91a:	07df      	lsls	r7, r3, #31
 800f91c:	bf44      	itt	mi
 800f91e:	f043 0320 	orrmi.w	r3, r3, #32
 800f922:	6023      	strmi	r3, [r4, #0]
 800f924:	b91e      	cbnz	r6, 800f92e <_printf_i+0x196>
 800f926:	6823      	ldr	r3, [r4, #0]
 800f928:	f023 0320 	bic.w	r3, r3, #32
 800f92c:	6023      	str	r3, [r4, #0]
 800f92e:	2310      	movs	r3, #16
 800f930:	e7b0      	b.n	800f894 <_printf_i+0xfc>
 800f932:	6823      	ldr	r3, [r4, #0]
 800f934:	f043 0320 	orr.w	r3, r3, #32
 800f938:	6023      	str	r3, [r4, #0]
 800f93a:	2378      	movs	r3, #120	; 0x78
 800f93c:	4828      	ldr	r0, [pc, #160]	; (800f9e0 <_printf_i+0x248>)
 800f93e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f942:	e7e3      	b.n	800f90c <_printf_i+0x174>
 800f944:	0659      	lsls	r1, r3, #25
 800f946:	bf48      	it	mi
 800f948:	b2b6      	uxthmi	r6, r6
 800f94a:	e7e6      	b.n	800f91a <_printf_i+0x182>
 800f94c:	4615      	mov	r5, r2
 800f94e:	e7bb      	b.n	800f8c8 <_printf_i+0x130>
 800f950:	682b      	ldr	r3, [r5, #0]
 800f952:	6826      	ldr	r6, [r4, #0]
 800f954:	6961      	ldr	r1, [r4, #20]
 800f956:	1d18      	adds	r0, r3, #4
 800f958:	6028      	str	r0, [r5, #0]
 800f95a:	0635      	lsls	r5, r6, #24
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	d501      	bpl.n	800f964 <_printf_i+0x1cc>
 800f960:	6019      	str	r1, [r3, #0]
 800f962:	e002      	b.n	800f96a <_printf_i+0x1d2>
 800f964:	0670      	lsls	r0, r6, #25
 800f966:	d5fb      	bpl.n	800f960 <_printf_i+0x1c8>
 800f968:	8019      	strh	r1, [r3, #0]
 800f96a:	2300      	movs	r3, #0
 800f96c:	6123      	str	r3, [r4, #16]
 800f96e:	4615      	mov	r5, r2
 800f970:	e7ba      	b.n	800f8e8 <_printf_i+0x150>
 800f972:	682b      	ldr	r3, [r5, #0]
 800f974:	1d1a      	adds	r2, r3, #4
 800f976:	602a      	str	r2, [r5, #0]
 800f978:	681d      	ldr	r5, [r3, #0]
 800f97a:	6862      	ldr	r2, [r4, #4]
 800f97c:	2100      	movs	r1, #0
 800f97e:	4628      	mov	r0, r5
 800f980:	f7f0 fc4e 	bl	8000220 <memchr>
 800f984:	b108      	cbz	r0, 800f98a <_printf_i+0x1f2>
 800f986:	1b40      	subs	r0, r0, r5
 800f988:	6060      	str	r0, [r4, #4]
 800f98a:	6863      	ldr	r3, [r4, #4]
 800f98c:	6123      	str	r3, [r4, #16]
 800f98e:	2300      	movs	r3, #0
 800f990:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f994:	e7a8      	b.n	800f8e8 <_printf_i+0x150>
 800f996:	6923      	ldr	r3, [r4, #16]
 800f998:	462a      	mov	r2, r5
 800f99a:	4649      	mov	r1, r9
 800f99c:	4640      	mov	r0, r8
 800f99e:	47d0      	blx	sl
 800f9a0:	3001      	adds	r0, #1
 800f9a2:	d0ab      	beq.n	800f8fc <_printf_i+0x164>
 800f9a4:	6823      	ldr	r3, [r4, #0]
 800f9a6:	079b      	lsls	r3, r3, #30
 800f9a8:	d413      	bmi.n	800f9d2 <_printf_i+0x23a>
 800f9aa:	68e0      	ldr	r0, [r4, #12]
 800f9ac:	9b03      	ldr	r3, [sp, #12]
 800f9ae:	4298      	cmp	r0, r3
 800f9b0:	bfb8      	it	lt
 800f9b2:	4618      	movlt	r0, r3
 800f9b4:	e7a4      	b.n	800f900 <_printf_i+0x168>
 800f9b6:	2301      	movs	r3, #1
 800f9b8:	4632      	mov	r2, r6
 800f9ba:	4649      	mov	r1, r9
 800f9bc:	4640      	mov	r0, r8
 800f9be:	47d0      	blx	sl
 800f9c0:	3001      	adds	r0, #1
 800f9c2:	d09b      	beq.n	800f8fc <_printf_i+0x164>
 800f9c4:	3501      	adds	r5, #1
 800f9c6:	68e3      	ldr	r3, [r4, #12]
 800f9c8:	9903      	ldr	r1, [sp, #12]
 800f9ca:	1a5b      	subs	r3, r3, r1
 800f9cc:	42ab      	cmp	r3, r5
 800f9ce:	dcf2      	bgt.n	800f9b6 <_printf_i+0x21e>
 800f9d0:	e7eb      	b.n	800f9aa <_printf_i+0x212>
 800f9d2:	2500      	movs	r5, #0
 800f9d4:	f104 0619 	add.w	r6, r4, #25
 800f9d8:	e7f5      	b.n	800f9c6 <_printf_i+0x22e>
 800f9da:	bf00      	nop
 800f9dc:	08010e8d 	.word	0x08010e8d
 800f9e0:	08010e9e 	.word	0x08010e9e

0800f9e4 <_scanf_chars>:
 800f9e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f9e8:	4615      	mov	r5, r2
 800f9ea:	688a      	ldr	r2, [r1, #8]
 800f9ec:	4680      	mov	r8, r0
 800f9ee:	460c      	mov	r4, r1
 800f9f0:	b932      	cbnz	r2, 800fa00 <_scanf_chars+0x1c>
 800f9f2:	698a      	ldr	r2, [r1, #24]
 800f9f4:	2a00      	cmp	r2, #0
 800f9f6:	bf0c      	ite	eq
 800f9f8:	2201      	moveq	r2, #1
 800f9fa:	f04f 32ff 	movne.w	r2, #4294967295
 800f9fe:	608a      	str	r2, [r1, #8]
 800fa00:	6822      	ldr	r2, [r4, #0]
 800fa02:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800fa94 <_scanf_chars+0xb0>
 800fa06:	06d1      	lsls	r1, r2, #27
 800fa08:	bf5f      	itttt	pl
 800fa0a:	681a      	ldrpl	r2, [r3, #0]
 800fa0c:	1d11      	addpl	r1, r2, #4
 800fa0e:	6019      	strpl	r1, [r3, #0]
 800fa10:	6816      	ldrpl	r6, [r2, #0]
 800fa12:	2700      	movs	r7, #0
 800fa14:	69a0      	ldr	r0, [r4, #24]
 800fa16:	b188      	cbz	r0, 800fa3c <_scanf_chars+0x58>
 800fa18:	2801      	cmp	r0, #1
 800fa1a:	d107      	bne.n	800fa2c <_scanf_chars+0x48>
 800fa1c:	682a      	ldr	r2, [r5, #0]
 800fa1e:	7811      	ldrb	r1, [r2, #0]
 800fa20:	6962      	ldr	r2, [r4, #20]
 800fa22:	5c52      	ldrb	r2, [r2, r1]
 800fa24:	b952      	cbnz	r2, 800fa3c <_scanf_chars+0x58>
 800fa26:	2f00      	cmp	r7, #0
 800fa28:	d031      	beq.n	800fa8e <_scanf_chars+0xaa>
 800fa2a:	e022      	b.n	800fa72 <_scanf_chars+0x8e>
 800fa2c:	2802      	cmp	r0, #2
 800fa2e:	d120      	bne.n	800fa72 <_scanf_chars+0x8e>
 800fa30:	682b      	ldr	r3, [r5, #0]
 800fa32:	781b      	ldrb	r3, [r3, #0]
 800fa34:	f813 3009 	ldrb.w	r3, [r3, r9]
 800fa38:	071b      	lsls	r3, r3, #28
 800fa3a:	d41a      	bmi.n	800fa72 <_scanf_chars+0x8e>
 800fa3c:	6823      	ldr	r3, [r4, #0]
 800fa3e:	06da      	lsls	r2, r3, #27
 800fa40:	bf5e      	ittt	pl
 800fa42:	682b      	ldrpl	r3, [r5, #0]
 800fa44:	781b      	ldrbpl	r3, [r3, #0]
 800fa46:	f806 3b01 	strbpl.w	r3, [r6], #1
 800fa4a:	682a      	ldr	r2, [r5, #0]
 800fa4c:	686b      	ldr	r3, [r5, #4]
 800fa4e:	3201      	adds	r2, #1
 800fa50:	602a      	str	r2, [r5, #0]
 800fa52:	68a2      	ldr	r2, [r4, #8]
 800fa54:	3b01      	subs	r3, #1
 800fa56:	3a01      	subs	r2, #1
 800fa58:	606b      	str	r3, [r5, #4]
 800fa5a:	3701      	adds	r7, #1
 800fa5c:	60a2      	str	r2, [r4, #8]
 800fa5e:	b142      	cbz	r2, 800fa72 <_scanf_chars+0x8e>
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	dcd7      	bgt.n	800fa14 <_scanf_chars+0x30>
 800fa64:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800fa68:	4629      	mov	r1, r5
 800fa6a:	4640      	mov	r0, r8
 800fa6c:	4798      	blx	r3
 800fa6e:	2800      	cmp	r0, #0
 800fa70:	d0d0      	beq.n	800fa14 <_scanf_chars+0x30>
 800fa72:	6823      	ldr	r3, [r4, #0]
 800fa74:	f013 0310 	ands.w	r3, r3, #16
 800fa78:	d105      	bne.n	800fa86 <_scanf_chars+0xa2>
 800fa7a:	68e2      	ldr	r2, [r4, #12]
 800fa7c:	3201      	adds	r2, #1
 800fa7e:	60e2      	str	r2, [r4, #12]
 800fa80:	69a2      	ldr	r2, [r4, #24]
 800fa82:	b102      	cbz	r2, 800fa86 <_scanf_chars+0xa2>
 800fa84:	7033      	strb	r3, [r6, #0]
 800fa86:	6923      	ldr	r3, [r4, #16]
 800fa88:	443b      	add	r3, r7
 800fa8a:	6123      	str	r3, [r4, #16]
 800fa8c:	2000      	movs	r0, #0
 800fa8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa92:	bf00      	nop
 800fa94:	08010ecb 	.word	0x08010ecb

0800fa98 <_scanf_i>:
 800fa98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa9c:	4698      	mov	r8, r3
 800fa9e:	4b76      	ldr	r3, [pc, #472]	; (800fc78 <_scanf_i+0x1e0>)
 800faa0:	460c      	mov	r4, r1
 800faa2:	4682      	mov	sl, r0
 800faa4:	4616      	mov	r6, r2
 800faa6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800faaa:	b087      	sub	sp, #28
 800faac:	ab03      	add	r3, sp, #12
 800faae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fab2:	4b72      	ldr	r3, [pc, #456]	; (800fc7c <_scanf_i+0x1e4>)
 800fab4:	69a1      	ldr	r1, [r4, #24]
 800fab6:	4a72      	ldr	r2, [pc, #456]	; (800fc80 <_scanf_i+0x1e8>)
 800fab8:	2903      	cmp	r1, #3
 800faba:	bf18      	it	ne
 800fabc:	461a      	movne	r2, r3
 800fabe:	68a3      	ldr	r3, [r4, #8]
 800fac0:	9201      	str	r2, [sp, #4]
 800fac2:	1e5a      	subs	r2, r3, #1
 800fac4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800fac8:	bf88      	it	hi
 800faca:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800face:	4627      	mov	r7, r4
 800fad0:	bf82      	ittt	hi
 800fad2:	eb03 0905 	addhi.w	r9, r3, r5
 800fad6:	f240 135d 	movwhi	r3, #349	; 0x15d
 800fada:	60a3      	strhi	r3, [r4, #8]
 800fadc:	f857 3b1c 	ldr.w	r3, [r7], #28
 800fae0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800fae4:	bf98      	it	ls
 800fae6:	f04f 0900 	movls.w	r9, #0
 800faea:	6023      	str	r3, [r4, #0]
 800faec:	463d      	mov	r5, r7
 800faee:	f04f 0b00 	mov.w	fp, #0
 800faf2:	6831      	ldr	r1, [r6, #0]
 800faf4:	ab03      	add	r3, sp, #12
 800faf6:	7809      	ldrb	r1, [r1, #0]
 800faf8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800fafc:	2202      	movs	r2, #2
 800fafe:	f7f0 fb8f 	bl	8000220 <memchr>
 800fb02:	b328      	cbz	r0, 800fb50 <_scanf_i+0xb8>
 800fb04:	f1bb 0f01 	cmp.w	fp, #1
 800fb08:	d159      	bne.n	800fbbe <_scanf_i+0x126>
 800fb0a:	6862      	ldr	r2, [r4, #4]
 800fb0c:	b92a      	cbnz	r2, 800fb1a <_scanf_i+0x82>
 800fb0e:	6822      	ldr	r2, [r4, #0]
 800fb10:	2308      	movs	r3, #8
 800fb12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fb16:	6063      	str	r3, [r4, #4]
 800fb18:	6022      	str	r2, [r4, #0]
 800fb1a:	6822      	ldr	r2, [r4, #0]
 800fb1c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800fb20:	6022      	str	r2, [r4, #0]
 800fb22:	68a2      	ldr	r2, [r4, #8]
 800fb24:	1e51      	subs	r1, r2, #1
 800fb26:	60a1      	str	r1, [r4, #8]
 800fb28:	b192      	cbz	r2, 800fb50 <_scanf_i+0xb8>
 800fb2a:	6832      	ldr	r2, [r6, #0]
 800fb2c:	1c51      	adds	r1, r2, #1
 800fb2e:	6031      	str	r1, [r6, #0]
 800fb30:	7812      	ldrb	r2, [r2, #0]
 800fb32:	f805 2b01 	strb.w	r2, [r5], #1
 800fb36:	6872      	ldr	r2, [r6, #4]
 800fb38:	3a01      	subs	r2, #1
 800fb3a:	2a00      	cmp	r2, #0
 800fb3c:	6072      	str	r2, [r6, #4]
 800fb3e:	dc07      	bgt.n	800fb50 <_scanf_i+0xb8>
 800fb40:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800fb44:	4631      	mov	r1, r6
 800fb46:	4650      	mov	r0, sl
 800fb48:	4790      	blx	r2
 800fb4a:	2800      	cmp	r0, #0
 800fb4c:	f040 8085 	bne.w	800fc5a <_scanf_i+0x1c2>
 800fb50:	f10b 0b01 	add.w	fp, fp, #1
 800fb54:	f1bb 0f03 	cmp.w	fp, #3
 800fb58:	d1cb      	bne.n	800faf2 <_scanf_i+0x5a>
 800fb5a:	6863      	ldr	r3, [r4, #4]
 800fb5c:	b90b      	cbnz	r3, 800fb62 <_scanf_i+0xca>
 800fb5e:	230a      	movs	r3, #10
 800fb60:	6063      	str	r3, [r4, #4]
 800fb62:	6863      	ldr	r3, [r4, #4]
 800fb64:	4947      	ldr	r1, [pc, #284]	; (800fc84 <_scanf_i+0x1ec>)
 800fb66:	6960      	ldr	r0, [r4, #20]
 800fb68:	1ac9      	subs	r1, r1, r3
 800fb6a:	f000 f88d 	bl	800fc88 <__sccl>
 800fb6e:	f04f 0b00 	mov.w	fp, #0
 800fb72:	68a3      	ldr	r3, [r4, #8]
 800fb74:	6822      	ldr	r2, [r4, #0]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d03d      	beq.n	800fbf6 <_scanf_i+0x15e>
 800fb7a:	6831      	ldr	r1, [r6, #0]
 800fb7c:	6960      	ldr	r0, [r4, #20]
 800fb7e:	f891 c000 	ldrb.w	ip, [r1]
 800fb82:	f810 000c 	ldrb.w	r0, [r0, ip]
 800fb86:	2800      	cmp	r0, #0
 800fb88:	d035      	beq.n	800fbf6 <_scanf_i+0x15e>
 800fb8a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800fb8e:	d124      	bne.n	800fbda <_scanf_i+0x142>
 800fb90:	0510      	lsls	r0, r2, #20
 800fb92:	d522      	bpl.n	800fbda <_scanf_i+0x142>
 800fb94:	f10b 0b01 	add.w	fp, fp, #1
 800fb98:	f1b9 0f00 	cmp.w	r9, #0
 800fb9c:	d003      	beq.n	800fba6 <_scanf_i+0x10e>
 800fb9e:	3301      	adds	r3, #1
 800fba0:	f109 39ff 	add.w	r9, r9, #4294967295
 800fba4:	60a3      	str	r3, [r4, #8]
 800fba6:	6873      	ldr	r3, [r6, #4]
 800fba8:	3b01      	subs	r3, #1
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	6073      	str	r3, [r6, #4]
 800fbae:	dd1b      	ble.n	800fbe8 <_scanf_i+0x150>
 800fbb0:	6833      	ldr	r3, [r6, #0]
 800fbb2:	3301      	adds	r3, #1
 800fbb4:	6033      	str	r3, [r6, #0]
 800fbb6:	68a3      	ldr	r3, [r4, #8]
 800fbb8:	3b01      	subs	r3, #1
 800fbba:	60a3      	str	r3, [r4, #8]
 800fbbc:	e7d9      	b.n	800fb72 <_scanf_i+0xda>
 800fbbe:	f1bb 0f02 	cmp.w	fp, #2
 800fbc2:	d1ae      	bne.n	800fb22 <_scanf_i+0x8a>
 800fbc4:	6822      	ldr	r2, [r4, #0]
 800fbc6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800fbca:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800fbce:	d1bf      	bne.n	800fb50 <_scanf_i+0xb8>
 800fbd0:	2310      	movs	r3, #16
 800fbd2:	6063      	str	r3, [r4, #4]
 800fbd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fbd8:	e7a2      	b.n	800fb20 <_scanf_i+0x88>
 800fbda:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800fbde:	6022      	str	r2, [r4, #0]
 800fbe0:	780b      	ldrb	r3, [r1, #0]
 800fbe2:	f805 3b01 	strb.w	r3, [r5], #1
 800fbe6:	e7de      	b.n	800fba6 <_scanf_i+0x10e>
 800fbe8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800fbec:	4631      	mov	r1, r6
 800fbee:	4650      	mov	r0, sl
 800fbf0:	4798      	blx	r3
 800fbf2:	2800      	cmp	r0, #0
 800fbf4:	d0df      	beq.n	800fbb6 <_scanf_i+0x11e>
 800fbf6:	6823      	ldr	r3, [r4, #0]
 800fbf8:	05db      	lsls	r3, r3, #23
 800fbfa:	d50d      	bpl.n	800fc18 <_scanf_i+0x180>
 800fbfc:	42bd      	cmp	r5, r7
 800fbfe:	d909      	bls.n	800fc14 <_scanf_i+0x17c>
 800fc00:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800fc04:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fc08:	4632      	mov	r2, r6
 800fc0a:	4650      	mov	r0, sl
 800fc0c:	4798      	blx	r3
 800fc0e:	f105 39ff 	add.w	r9, r5, #4294967295
 800fc12:	464d      	mov	r5, r9
 800fc14:	42bd      	cmp	r5, r7
 800fc16:	d02d      	beq.n	800fc74 <_scanf_i+0x1dc>
 800fc18:	6822      	ldr	r2, [r4, #0]
 800fc1a:	f012 0210 	ands.w	r2, r2, #16
 800fc1e:	d113      	bne.n	800fc48 <_scanf_i+0x1b0>
 800fc20:	702a      	strb	r2, [r5, #0]
 800fc22:	6863      	ldr	r3, [r4, #4]
 800fc24:	9e01      	ldr	r6, [sp, #4]
 800fc26:	4639      	mov	r1, r7
 800fc28:	4650      	mov	r0, sl
 800fc2a:	47b0      	blx	r6
 800fc2c:	6821      	ldr	r1, [r4, #0]
 800fc2e:	f8d8 3000 	ldr.w	r3, [r8]
 800fc32:	f011 0f20 	tst.w	r1, #32
 800fc36:	d013      	beq.n	800fc60 <_scanf_i+0x1c8>
 800fc38:	1d1a      	adds	r2, r3, #4
 800fc3a:	f8c8 2000 	str.w	r2, [r8]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	6018      	str	r0, [r3, #0]
 800fc42:	68e3      	ldr	r3, [r4, #12]
 800fc44:	3301      	adds	r3, #1
 800fc46:	60e3      	str	r3, [r4, #12]
 800fc48:	1bed      	subs	r5, r5, r7
 800fc4a:	44ab      	add	fp, r5
 800fc4c:	6925      	ldr	r5, [r4, #16]
 800fc4e:	445d      	add	r5, fp
 800fc50:	6125      	str	r5, [r4, #16]
 800fc52:	2000      	movs	r0, #0
 800fc54:	b007      	add	sp, #28
 800fc56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc5a:	f04f 0b00 	mov.w	fp, #0
 800fc5e:	e7ca      	b.n	800fbf6 <_scanf_i+0x15e>
 800fc60:	1d1a      	adds	r2, r3, #4
 800fc62:	f8c8 2000 	str.w	r2, [r8]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	f011 0f01 	tst.w	r1, #1
 800fc6c:	bf14      	ite	ne
 800fc6e:	8018      	strhne	r0, [r3, #0]
 800fc70:	6018      	streq	r0, [r3, #0]
 800fc72:	e7e6      	b.n	800fc42 <_scanf_i+0x1aa>
 800fc74:	2001      	movs	r0, #1
 800fc76:	e7ed      	b.n	800fc54 <_scanf_i+0x1bc>
 800fc78:	08010a74 	.word	0x08010a74
 800fc7c:	0800fee5 	.word	0x0800fee5
 800fc80:	0800fdfd 	.word	0x0800fdfd
 800fc84:	08010ec8 	.word	0x08010ec8

0800fc88 <__sccl>:
 800fc88:	b570      	push	{r4, r5, r6, lr}
 800fc8a:	780b      	ldrb	r3, [r1, #0]
 800fc8c:	4604      	mov	r4, r0
 800fc8e:	2b5e      	cmp	r3, #94	; 0x5e
 800fc90:	bf0b      	itete	eq
 800fc92:	784b      	ldrbeq	r3, [r1, #1]
 800fc94:	1c48      	addne	r0, r1, #1
 800fc96:	1c88      	addeq	r0, r1, #2
 800fc98:	2200      	movne	r2, #0
 800fc9a:	bf08      	it	eq
 800fc9c:	2201      	moveq	r2, #1
 800fc9e:	1e61      	subs	r1, r4, #1
 800fca0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800fca4:	f801 2f01 	strb.w	r2, [r1, #1]!
 800fca8:	42a9      	cmp	r1, r5
 800fcaa:	d1fb      	bne.n	800fca4 <__sccl+0x1c>
 800fcac:	b90b      	cbnz	r3, 800fcb2 <__sccl+0x2a>
 800fcae:	3801      	subs	r0, #1
 800fcb0:	bd70      	pop	{r4, r5, r6, pc}
 800fcb2:	f082 0201 	eor.w	r2, r2, #1
 800fcb6:	54e2      	strb	r2, [r4, r3]
 800fcb8:	4605      	mov	r5, r0
 800fcba:	4628      	mov	r0, r5
 800fcbc:	f810 1b01 	ldrb.w	r1, [r0], #1
 800fcc0:	292d      	cmp	r1, #45	; 0x2d
 800fcc2:	d006      	beq.n	800fcd2 <__sccl+0x4a>
 800fcc4:	295d      	cmp	r1, #93	; 0x5d
 800fcc6:	d0f3      	beq.n	800fcb0 <__sccl+0x28>
 800fcc8:	b909      	cbnz	r1, 800fcce <__sccl+0x46>
 800fcca:	4628      	mov	r0, r5
 800fccc:	e7f0      	b.n	800fcb0 <__sccl+0x28>
 800fcce:	460b      	mov	r3, r1
 800fcd0:	e7f1      	b.n	800fcb6 <__sccl+0x2e>
 800fcd2:	786e      	ldrb	r6, [r5, #1]
 800fcd4:	2e5d      	cmp	r6, #93	; 0x5d
 800fcd6:	d0fa      	beq.n	800fcce <__sccl+0x46>
 800fcd8:	42b3      	cmp	r3, r6
 800fcda:	dcf8      	bgt.n	800fcce <__sccl+0x46>
 800fcdc:	3502      	adds	r5, #2
 800fcde:	4619      	mov	r1, r3
 800fce0:	3101      	adds	r1, #1
 800fce2:	428e      	cmp	r6, r1
 800fce4:	5462      	strb	r2, [r4, r1]
 800fce6:	dcfb      	bgt.n	800fce0 <__sccl+0x58>
 800fce8:	1af1      	subs	r1, r6, r3
 800fcea:	3901      	subs	r1, #1
 800fcec:	1c58      	adds	r0, r3, #1
 800fcee:	42b3      	cmp	r3, r6
 800fcf0:	bfa8      	it	ge
 800fcf2:	2100      	movge	r1, #0
 800fcf4:	1843      	adds	r3, r0, r1
 800fcf6:	e7e0      	b.n	800fcba <__sccl+0x32>

0800fcf8 <_strtol_l.constprop.0>:
 800fcf8:	2b01      	cmp	r3, #1
 800fcfa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fcfe:	d001      	beq.n	800fd04 <_strtol_l.constprop.0+0xc>
 800fd00:	2b24      	cmp	r3, #36	; 0x24
 800fd02:	d906      	bls.n	800fd12 <_strtol_l.constprop.0+0x1a>
 800fd04:	f7ff f8ea 	bl	800eedc <__errno>
 800fd08:	2316      	movs	r3, #22
 800fd0a:	6003      	str	r3, [r0, #0]
 800fd0c:	2000      	movs	r0, #0
 800fd0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd12:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800fdf8 <_strtol_l.constprop.0+0x100>
 800fd16:	460d      	mov	r5, r1
 800fd18:	462e      	mov	r6, r5
 800fd1a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fd1e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800fd22:	f017 0708 	ands.w	r7, r7, #8
 800fd26:	d1f7      	bne.n	800fd18 <_strtol_l.constprop.0+0x20>
 800fd28:	2c2d      	cmp	r4, #45	; 0x2d
 800fd2a:	d132      	bne.n	800fd92 <_strtol_l.constprop.0+0x9a>
 800fd2c:	782c      	ldrb	r4, [r5, #0]
 800fd2e:	2701      	movs	r7, #1
 800fd30:	1cb5      	adds	r5, r6, #2
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d05b      	beq.n	800fdee <_strtol_l.constprop.0+0xf6>
 800fd36:	2b10      	cmp	r3, #16
 800fd38:	d109      	bne.n	800fd4e <_strtol_l.constprop.0+0x56>
 800fd3a:	2c30      	cmp	r4, #48	; 0x30
 800fd3c:	d107      	bne.n	800fd4e <_strtol_l.constprop.0+0x56>
 800fd3e:	782c      	ldrb	r4, [r5, #0]
 800fd40:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800fd44:	2c58      	cmp	r4, #88	; 0x58
 800fd46:	d14d      	bne.n	800fde4 <_strtol_l.constprop.0+0xec>
 800fd48:	786c      	ldrb	r4, [r5, #1]
 800fd4a:	2310      	movs	r3, #16
 800fd4c:	3502      	adds	r5, #2
 800fd4e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800fd52:	f108 38ff 	add.w	r8, r8, #4294967295
 800fd56:	f04f 0c00 	mov.w	ip, #0
 800fd5a:	fbb8 f9f3 	udiv	r9, r8, r3
 800fd5e:	4666      	mov	r6, ip
 800fd60:	fb03 8a19 	mls	sl, r3, r9, r8
 800fd64:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800fd68:	f1be 0f09 	cmp.w	lr, #9
 800fd6c:	d816      	bhi.n	800fd9c <_strtol_l.constprop.0+0xa4>
 800fd6e:	4674      	mov	r4, lr
 800fd70:	42a3      	cmp	r3, r4
 800fd72:	dd24      	ble.n	800fdbe <_strtol_l.constprop.0+0xc6>
 800fd74:	f1bc 0f00 	cmp.w	ip, #0
 800fd78:	db1e      	blt.n	800fdb8 <_strtol_l.constprop.0+0xc0>
 800fd7a:	45b1      	cmp	r9, r6
 800fd7c:	d31c      	bcc.n	800fdb8 <_strtol_l.constprop.0+0xc0>
 800fd7e:	d101      	bne.n	800fd84 <_strtol_l.constprop.0+0x8c>
 800fd80:	45a2      	cmp	sl, r4
 800fd82:	db19      	blt.n	800fdb8 <_strtol_l.constprop.0+0xc0>
 800fd84:	fb06 4603 	mla	r6, r6, r3, r4
 800fd88:	f04f 0c01 	mov.w	ip, #1
 800fd8c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fd90:	e7e8      	b.n	800fd64 <_strtol_l.constprop.0+0x6c>
 800fd92:	2c2b      	cmp	r4, #43	; 0x2b
 800fd94:	bf04      	itt	eq
 800fd96:	782c      	ldrbeq	r4, [r5, #0]
 800fd98:	1cb5      	addeq	r5, r6, #2
 800fd9a:	e7ca      	b.n	800fd32 <_strtol_l.constprop.0+0x3a>
 800fd9c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800fda0:	f1be 0f19 	cmp.w	lr, #25
 800fda4:	d801      	bhi.n	800fdaa <_strtol_l.constprop.0+0xb2>
 800fda6:	3c37      	subs	r4, #55	; 0x37
 800fda8:	e7e2      	b.n	800fd70 <_strtol_l.constprop.0+0x78>
 800fdaa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800fdae:	f1be 0f19 	cmp.w	lr, #25
 800fdb2:	d804      	bhi.n	800fdbe <_strtol_l.constprop.0+0xc6>
 800fdb4:	3c57      	subs	r4, #87	; 0x57
 800fdb6:	e7db      	b.n	800fd70 <_strtol_l.constprop.0+0x78>
 800fdb8:	f04f 3cff 	mov.w	ip, #4294967295
 800fdbc:	e7e6      	b.n	800fd8c <_strtol_l.constprop.0+0x94>
 800fdbe:	f1bc 0f00 	cmp.w	ip, #0
 800fdc2:	da05      	bge.n	800fdd0 <_strtol_l.constprop.0+0xd8>
 800fdc4:	2322      	movs	r3, #34	; 0x22
 800fdc6:	6003      	str	r3, [r0, #0]
 800fdc8:	4646      	mov	r6, r8
 800fdca:	b942      	cbnz	r2, 800fdde <_strtol_l.constprop.0+0xe6>
 800fdcc:	4630      	mov	r0, r6
 800fdce:	e79e      	b.n	800fd0e <_strtol_l.constprop.0+0x16>
 800fdd0:	b107      	cbz	r7, 800fdd4 <_strtol_l.constprop.0+0xdc>
 800fdd2:	4276      	negs	r6, r6
 800fdd4:	2a00      	cmp	r2, #0
 800fdd6:	d0f9      	beq.n	800fdcc <_strtol_l.constprop.0+0xd4>
 800fdd8:	f1bc 0f00 	cmp.w	ip, #0
 800fddc:	d000      	beq.n	800fde0 <_strtol_l.constprop.0+0xe8>
 800fdde:	1e69      	subs	r1, r5, #1
 800fde0:	6011      	str	r1, [r2, #0]
 800fde2:	e7f3      	b.n	800fdcc <_strtol_l.constprop.0+0xd4>
 800fde4:	2430      	movs	r4, #48	; 0x30
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d1b1      	bne.n	800fd4e <_strtol_l.constprop.0+0x56>
 800fdea:	2308      	movs	r3, #8
 800fdec:	e7af      	b.n	800fd4e <_strtol_l.constprop.0+0x56>
 800fdee:	2c30      	cmp	r4, #48	; 0x30
 800fdf0:	d0a5      	beq.n	800fd3e <_strtol_l.constprop.0+0x46>
 800fdf2:	230a      	movs	r3, #10
 800fdf4:	e7ab      	b.n	800fd4e <_strtol_l.constprop.0+0x56>
 800fdf6:	bf00      	nop
 800fdf8:	08010ecb 	.word	0x08010ecb

0800fdfc <_strtol_r>:
 800fdfc:	f7ff bf7c 	b.w	800fcf8 <_strtol_l.constprop.0>

0800fe00 <_strtoul_l.constprop.0>:
 800fe00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fe04:	4f36      	ldr	r7, [pc, #216]	; (800fee0 <_strtoul_l.constprop.0+0xe0>)
 800fe06:	4686      	mov	lr, r0
 800fe08:	460d      	mov	r5, r1
 800fe0a:	4628      	mov	r0, r5
 800fe0c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fe10:	5de6      	ldrb	r6, [r4, r7]
 800fe12:	f016 0608 	ands.w	r6, r6, #8
 800fe16:	d1f8      	bne.n	800fe0a <_strtoul_l.constprop.0+0xa>
 800fe18:	2c2d      	cmp	r4, #45	; 0x2d
 800fe1a:	d12f      	bne.n	800fe7c <_strtoul_l.constprop.0+0x7c>
 800fe1c:	782c      	ldrb	r4, [r5, #0]
 800fe1e:	2601      	movs	r6, #1
 800fe20:	1c85      	adds	r5, r0, #2
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d057      	beq.n	800fed6 <_strtoul_l.constprop.0+0xd6>
 800fe26:	2b10      	cmp	r3, #16
 800fe28:	d109      	bne.n	800fe3e <_strtoul_l.constprop.0+0x3e>
 800fe2a:	2c30      	cmp	r4, #48	; 0x30
 800fe2c:	d107      	bne.n	800fe3e <_strtoul_l.constprop.0+0x3e>
 800fe2e:	7828      	ldrb	r0, [r5, #0]
 800fe30:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800fe34:	2858      	cmp	r0, #88	; 0x58
 800fe36:	d149      	bne.n	800fecc <_strtoul_l.constprop.0+0xcc>
 800fe38:	786c      	ldrb	r4, [r5, #1]
 800fe3a:	2310      	movs	r3, #16
 800fe3c:	3502      	adds	r5, #2
 800fe3e:	f04f 38ff 	mov.w	r8, #4294967295
 800fe42:	2700      	movs	r7, #0
 800fe44:	fbb8 f8f3 	udiv	r8, r8, r3
 800fe48:	fb03 f908 	mul.w	r9, r3, r8
 800fe4c:	ea6f 0909 	mvn.w	r9, r9
 800fe50:	4638      	mov	r0, r7
 800fe52:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800fe56:	f1bc 0f09 	cmp.w	ip, #9
 800fe5a:	d814      	bhi.n	800fe86 <_strtoul_l.constprop.0+0x86>
 800fe5c:	4664      	mov	r4, ip
 800fe5e:	42a3      	cmp	r3, r4
 800fe60:	dd22      	ble.n	800fea8 <_strtoul_l.constprop.0+0xa8>
 800fe62:	2f00      	cmp	r7, #0
 800fe64:	db1d      	blt.n	800fea2 <_strtoul_l.constprop.0+0xa2>
 800fe66:	4580      	cmp	r8, r0
 800fe68:	d31b      	bcc.n	800fea2 <_strtoul_l.constprop.0+0xa2>
 800fe6a:	d101      	bne.n	800fe70 <_strtoul_l.constprop.0+0x70>
 800fe6c:	45a1      	cmp	r9, r4
 800fe6e:	db18      	blt.n	800fea2 <_strtoul_l.constprop.0+0xa2>
 800fe70:	fb00 4003 	mla	r0, r0, r3, r4
 800fe74:	2701      	movs	r7, #1
 800fe76:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fe7a:	e7ea      	b.n	800fe52 <_strtoul_l.constprop.0+0x52>
 800fe7c:	2c2b      	cmp	r4, #43	; 0x2b
 800fe7e:	bf04      	itt	eq
 800fe80:	782c      	ldrbeq	r4, [r5, #0]
 800fe82:	1c85      	addeq	r5, r0, #2
 800fe84:	e7cd      	b.n	800fe22 <_strtoul_l.constprop.0+0x22>
 800fe86:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800fe8a:	f1bc 0f19 	cmp.w	ip, #25
 800fe8e:	d801      	bhi.n	800fe94 <_strtoul_l.constprop.0+0x94>
 800fe90:	3c37      	subs	r4, #55	; 0x37
 800fe92:	e7e4      	b.n	800fe5e <_strtoul_l.constprop.0+0x5e>
 800fe94:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800fe98:	f1bc 0f19 	cmp.w	ip, #25
 800fe9c:	d804      	bhi.n	800fea8 <_strtoul_l.constprop.0+0xa8>
 800fe9e:	3c57      	subs	r4, #87	; 0x57
 800fea0:	e7dd      	b.n	800fe5e <_strtoul_l.constprop.0+0x5e>
 800fea2:	f04f 37ff 	mov.w	r7, #4294967295
 800fea6:	e7e6      	b.n	800fe76 <_strtoul_l.constprop.0+0x76>
 800fea8:	2f00      	cmp	r7, #0
 800feaa:	da07      	bge.n	800febc <_strtoul_l.constprop.0+0xbc>
 800feac:	2322      	movs	r3, #34	; 0x22
 800feae:	f8ce 3000 	str.w	r3, [lr]
 800feb2:	f04f 30ff 	mov.w	r0, #4294967295
 800feb6:	b932      	cbnz	r2, 800fec6 <_strtoul_l.constprop.0+0xc6>
 800feb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800febc:	b106      	cbz	r6, 800fec0 <_strtoul_l.constprop.0+0xc0>
 800febe:	4240      	negs	r0, r0
 800fec0:	2a00      	cmp	r2, #0
 800fec2:	d0f9      	beq.n	800feb8 <_strtoul_l.constprop.0+0xb8>
 800fec4:	b107      	cbz	r7, 800fec8 <_strtoul_l.constprop.0+0xc8>
 800fec6:	1e69      	subs	r1, r5, #1
 800fec8:	6011      	str	r1, [r2, #0]
 800feca:	e7f5      	b.n	800feb8 <_strtoul_l.constprop.0+0xb8>
 800fecc:	2430      	movs	r4, #48	; 0x30
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d1b5      	bne.n	800fe3e <_strtoul_l.constprop.0+0x3e>
 800fed2:	2308      	movs	r3, #8
 800fed4:	e7b3      	b.n	800fe3e <_strtoul_l.constprop.0+0x3e>
 800fed6:	2c30      	cmp	r4, #48	; 0x30
 800fed8:	d0a9      	beq.n	800fe2e <_strtoul_l.constprop.0+0x2e>
 800feda:	230a      	movs	r3, #10
 800fedc:	e7af      	b.n	800fe3e <_strtoul_l.constprop.0+0x3e>
 800fede:	bf00      	nop
 800fee0:	08010ecb 	.word	0x08010ecb

0800fee4 <_strtoul_r>:
 800fee4:	f7ff bf8c 	b.w	800fe00 <_strtoul_l.constprop.0>

0800fee8 <__submore>:
 800fee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800feec:	460c      	mov	r4, r1
 800feee:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800fef0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fef4:	4299      	cmp	r1, r3
 800fef6:	d11d      	bne.n	800ff34 <__submore+0x4c>
 800fef8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800fefc:	f000 f8b6 	bl	801006c <_malloc_r>
 800ff00:	b918      	cbnz	r0, 800ff0a <__submore+0x22>
 800ff02:	f04f 30ff 	mov.w	r0, #4294967295
 800ff06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ff0e:	63a3      	str	r3, [r4, #56]	; 0x38
 800ff10:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ff14:	6360      	str	r0, [r4, #52]	; 0x34
 800ff16:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800ff1a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ff1e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800ff22:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ff26:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800ff2a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800ff2e:	6020      	str	r0, [r4, #0]
 800ff30:	2000      	movs	r0, #0
 800ff32:	e7e8      	b.n	800ff06 <__submore+0x1e>
 800ff34:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800ff36:	0077      	lsls	r7, r6, #1
 800ff38:	463a      	mov	r2, r7
 800ff3a:	f000 f90b 	bl	8010154 <_realloc_r>
 800ff3e:	4605      	mov	r5, r0
 800ff40:	2800      	cmp	r0, #0
 800ff42:	d0de      	beq.n	800ff02 <__submore+0x1a>
 800ff44:	eb00 0806 	add.w	r8, r0, r6
 800ff48:	4601      	mov	r1, r0
 800ff4a:	4632      	mov	r2, r6
 800ff4c:	4640      	mov	r0, r8
 800ff4e:	f7fe ffef 	bl	800ef30 <memcpy>
 800ff52:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800ff56:	f8c4 8000 	str.w	r8, [r4]
 800ff5a:	e7e9      	b.n	800ff30 <__submore+0x48>

0800ff5c <__retarget_lock_acquire_recursive>:
 800ff5c:	4770      	bx	lr

0800ff5e <__retarget_lock_release_recursive>:
 800ff5e:	4770      	bx	lr

0800ff60 <memmove>:
 800ff60:	4288      	cmp	r0, r1
 800ff62:	b510      	push	{r4, lr}
 800ff64:	eb01 0402 	add.w	r4, r1, r2
 800ff68:	d902      	bls.n	800ff70 <memmove+0x10>
 800ff6a:	4284      	cmp	r4, r0
 800ff6c:	4623      	mov	r3, r4
 800ff6e:	d807      	bhi.n	800ff80 <memmove+0x20>
 800ff70:	1e43      	subs	r3, r0, #1
 800ff72:	42a1      	cmp	r1, r4
 800ff74:	d008      	beq.n	800ff88 <memmove+0x28>
 800ff76:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ff7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ff7e:	e7f8      	b.n	800ff72 <memmove+0x12>
 800ff80:	4402      	add	r2, r0
 800ff82:	4601      	mov	r1, r0
 800ff84:	428a      	cmp	r2, r1
 800ff86:	d100      	bne.n	800ff8a <memmove+0x2a>
 800ff88:	bd10      	pop	{r4, pc}
 800ff8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ff8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ff92:	e7f7      	b.n	800ff84 <memmove+0x24>

0800ff94 <_free_r>:
 800ff94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ff96:	2900      	cmp	r1, #0
 800ff98:	d044      	beq.n	8010024 <_free_r+0x90>
 800ff9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ff9e:	9001      	str	r0, [sp, #4]
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	f1a1 0404 	sub.w	r4, r1, #4
 800ffa6:	bfb8      	it	lt
 800ffa8:	18e4      	addlt	r4, r4, r3
 800ffaa:	f000 f913 	bl	80101d4 <__malloc_lock>
 800ffae:	4a1e      	ldr	r2, [pc, #120]	; (8010028 <_free_r+0x94>)
 800ffb0:	9801      	ldr	r0, [sp, #4]
 800ffb2:	6813      	ldr	r3, [r2, #0]
 800ffb4:	b933      	cbnz	r3, 800ffc4 <_free_r+0x30>
 800ffb6:	6063      	str	r3, [r4, #4]
 800ffb8:	6014      	str	r4, [r2, #0]
 800ffba:	b003      	add	sp, #12
 800ffbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ffc0:	f000 b90e 	b.w	80101e0 <__malloc_unlock>
 800ffc4:	42a3      	cmp	r3, r4
 800ffc6:	d908      	bls.n	800ffda <_free_r+0x46>
 800ffc8:	6825      	ldr	r5, [r4, #0]
 800ffca:	1961      	adds	r1, r4, r5
 800ffcc:	428b      	cmp	r3, r1
 800ffce:	bf01      	itttt	eq
 800ffd0:	6819      	ldreq	r1, [r3, #0]
 800ffd2:	685b      	ldreq	r3, [r3, #4]
 800ffd4:	1949      	addeq	r1, r1, r5
 800ffd6:	6021      	streq	r1, [r4, #0]
 800ffd8:	e7ed      	b.n	800ffb6 <_free_r+0x22>
 800ffda:	461a      	mov	r2, r3
 800ffdc:	685b      	ldr	r3, [r3, #4]
 800ffde:	b10b      	cbz	r3, 800ffe4 <_free_r+0x50>
 800ffe0:	42a3      	cmp	r3, r4
 800ffe2:	d9fa      	bls.n	800ffda <_free_r+0x46>
 800ffe4:	6811      	ldr	r1, [r2, #0]
 800ffe6:	1855      	adds	r5, r2, r1
 800ffe8:	42a5      	cmp	r5, r4
 800ffea:	d10b      	bne.n	8010004 <_free_r+0x70>
 800ffec:	6824      	ldr	r4, [r4, #0]
 800ffee:	4421      	add	r1, r4
 800fff0:	1854      	adds	r4, r2, r1
 800fff2:	42a3      	cmp	r3, r4
 800fff4:	6011      	str	r1, [r2, #0]
 800fff6:	d1e0      	bne.n	800ffba <_free_r+0x26>
 800fff8:	681c      	ldr	r4, [r3, #0]
 800fffa:	685b      	ldr	r3, [r3, #4]
 800fffc:	6053      	str	r3, [r2, #4]
 800fffe:	4421      	add	r1, r4
 8010000:	6011      	str	r1, [r2, #0]
 8010002:	e7da      	b.n	800ffba <_free_r+0x26>
 8010004:	d902      	bls.n	801000c <_free_r+0x78>
 8010006:	230c      	movs	r3, #12
 8010008:	6003      	str	r3, [r0, #0]
 801000a:	e7d6      	b.n	800ffba <_free_r+0x26>
 801000c:	6825      	ldr	r5, [r4, #0]
 801000e:	1961      	adds	r1, r4, r5
 8010010:	428b      	cmp	r3, r1
 8010012:	bf04      	itt	eq
 8010014:	6819      	ldreq	r1, [r3, #0]
 8010016:	685b      	ldreq	r3, [r3, #4]
 8010018:	6063      	str	r3, [r4, #4]
 801001a:	bf04      	itt	eq
 801001c:	1949      	addeq	r1, r1, r5
 801001e:	6021      	streq	r1, [r4, #0]
 8010020:	6054      	str	r4, [r2, #4]
 8010022:	e7ca      	b.n	800ffba <_free_r+0x26>
 8010024:	b003      	add	sp, #12
 8010026:	bd30      	pop	{r4, r5, pc}
 8010028:	20005154 	.word	0x20005154

0801002c <sbrk_aligned>:
 801002c:	b570      	push	{r4, r5, r6, lr}
 801002e:	4e0e      	ldr	r6, [pc, #56]	; (8010068 <sbrk_aligned+0x3c>)
 8010030:	460c      	mov	r4, r1
 8010032:	6831      	ldr	r1, [r6, #0]
 8010034:	4605      	mov	r5, r0
 8010036:	b911      	cbnz	r1, 801003e <sbrk_aligned+0x12>
 8010038:	f000 f8bc 	bl	80101b4 <_sbrk_r>
 801003c:	6030      	str	r0, [r6, #0]
 801003e:	4621      	mov	r1, r4
 8010040:	4628      	mov	r0, r5
 8010042:	f000 f8b7 	bl	80101b4 <_sbrk_r>
 8010046:	1c43      	adds	r3, r0, #1
 8010048:	d00a      	beq.n	8010060 <sbrk_aligned+0x34>
 801004a:	1cc4      	adds	r4, r0, #3
 801004c:	f024 0403 	bic.w	r4, r4, #3
 8010050:	42a0      	cmp	r0, r4
 8010052:	d007      	beq.n	8010064 <sbrk_aligned+0x38>
 8010054:	1a21      	subs	r1, r4, r0
 8010056:	4628      	mov	r0, r5
 8010058:	f000 f8ac 	bl	80101b4 <_sbrk_r>
 801005c:	3001      	adds	r0, #1
 801005e:	d101      	bne.n	8010064 <sbrk_aligned+0x38>
 8010060:	f04f 34ff 	mov.w	r4, #4294967295
 8010064:	4620      	mov	r0, r4
 8010066:	bd70      	pop	{r4, r5, r6, pc}
 8010068:	20005158 	.word	0x20005158

0801006c <_malloc_r>:
 801006c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010070:	1ccd      	adds	r5, r1, #3
 8010072:	f025 0503 	bic.w	r5, r5, #3
 8010076:	3508      	adds	r5, #8
 8010078:	2d0c      	cmp	r5, #12
 801007a:	bf38      	it	cc
 801007c:	250c      	movcc	r5, #12
 801007e:	2d00      	cmp	r5, #0
 8010080:	4607      	mov	r7, r0
 8010082:	db01      	blt.n	8010088 <_malloc_r+0x1c>
 8010084:	42a9      	cmp	r1, r5
 8010086:	d905      	bls.n	8010094 <_malloc_r+0x28>
 8010088:	230c      	movs	r3, #12
 801008a:	603b      	str	r3, [r7, #0]
 801008c:	2600      	movs	r6, #0
 801008e:	4630      	mov	r0, r6
 8010090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010094:	4e2e      	ldr	r6, [pc, #184]	; (8010150 <_malloc_r+0xe4>)
 8010096:	f000 f89d 	bl	80101d4 <__malloc_lock>
 801009a:	6833      	ldr	r3, [r6, #0]
 801009c:	461c      	mov	r4, r3
 801009e:	bb34      	cbnz	r4, 80100ee <_malloc_r+0x82>
 80100a0:	4629      	mov	r1, r5
 80100a2:	4638      	mov	r0, r7
 80100a4:	f7ff ffc2 	bl	801002c <sbrk_aligned>
 80100a8:	1c43      	adds	r3, r0, #1
 80100aa:	4604      	mov	r4, r0
 80100ac:	d14d      	bne.n	801014a <_malloc_r+0xde>
 80100ae:	6834      	ldr	r4, [r6, #0]
 80100b0:	4626      	mov	r6, r4
 80100b2:	2e00      	cmp	r6, #0
 80100b4:	d140      	bne.n	8010138 <_malloc_r+0xcc>
 80100b6:	6823      	ldr	r3, [r4, #0]
 80100b8:	4631      	mov	r1, r6
 80100ba:	4638      	mov	r0, r7
 80100bc:	eb04 0803 	add.w	r8, r4, r3
 80100c0:	f000 f878 	bl	80101b4 <_sbrk_r>
 80100c4:	4580      	cmp	r8, r0
 80100c6:	d13a      	bne.n	801013e <_malloc_r+0xd2>
 80100c8:	6821      	ldr	r1, [r4, #0]
 80100ca:	3503      	adds	r5, #3
 80100cc:	1a6d      	subs	r5, r5, r1
 80100ce:	f025 0503 	bic.w	r5, r5, #3
 80100d2:	3508      	adds	r5, #8
 80100d4:	2d0c      	cmp	r5, #12
 80100d6:	bf38      	it	cc
 80100d8:	250c      	movcc	r5, #12
 80100da:	4629      	mov	r1, r5
 80100dc:	4638      	mov	r0, r7
 80100de:	f7ff ffa5 	bl	801002c <sbrk_aligned>
 80100e2:	3001      	adds	r0, #1
 80100e4:	d02b      	beq.n	801013e <_malloc_r+0xd2>
 80100e6:	6823      	ldr	r3, [r4, #0]
 80100e8:	442b      	add	r3, r5
 80100ea:	6023      	str	r3, [r4, #0]
 80100ec:	e00e      	b.n	801010c <_malloc_r+0xa0>
 80100ee:	6822      	ldr	r2, [r4, #0]
 80100f0:	1b52      	subs	r2, r2, r5
 80100f2:	d41e      	bmi.n	8010132 <_malloc_r+0xc6>
 80100f4:	2a0b      	cmp	r2, #11
 80100f6:	d916      	bls.n	8010126 <_malloc_r+0xba>
 80100f8:	1961      	adds	r1, r4, r5
 80100fa:	42a3      	cmp	r3, r4
 80100fc:	6025      	str	r5, [r4, #0]
 80100fe:	bf18      	it	ne
 8010100:	6059      	strne	r1, [r3, #4]
 8010102:	6863      	ldr	r3, [r4, #4]
 8010104:	bf08      	it	eq
 8010106:	6031      	streq	r1, [r6, #0]
 8010108:	5162      	str	r2, [r4, r5]
 801010a:	604b      	str	r3, [r1, #4]
 801010c:	4638      	mov	r0, r7
 801010e:	f104 060b 	add.w	r6, r4, #11
 8010112:	f000 f865 	bl	80101e0 <__malloc_unlock>
 8010116:	f026 0607 	bic.w	r6, r6, #7
 801011a:	1d23      	adds	r3, r4, #4
 801011c:	1af2      	subs	r2, r6, r3
 801011e:	d0b6      	beq.n	801008e <_malloc_r+0x22>
 8010120:	1b9b      	subs	r3, r3, r6
 8010122:	50a3      	str	r3, [r4, r2]
 8010124:	e7b3      	b.n	801008e <_malloc_r+0x22>
 8010126:	6862      	ldr	r2, [r4, #4]
 8010128:	42a3      	cmp	r3, r4
 801012a:	bf0c      	ite	eq
 801012c:	6032      	streq	r2, [r6, #0]
 801012e:	605a      	strne	r2, [r3, #4]
 8010130:	e7ec      	b.n	801010c <_malloc_r+0xa0>
 8010132:	4623      	mov	r3, r4
 8010134:	6864      	ldr	r4, [r4, #4]
 8010136:	e7b2      	b.n	801009e <_malloc_r+0x32>
 8010138:	4634      	mov	r4, r6
 801013a:	6876      	ldr	r6, [r6, #4]
 801013c:	e7b9      	b.n	80100b2 <_malloc_r+0x46>
 801013e:	230c      	movs	r3, #12
 8010140:	603b      	str	r3, [r7, #0]
 8010142:	4638      	mov	r0, r7
 8010144:	f000 f84c 	bl	80101e0 <__malloc_unlock>
 8010148:	e7a1      	b.n	801008e <_malloc_r+0x22>
 801014a:	6025      	str	r5, [r4, #0]
 801014c:	e7de      	b.n	801010c <_malloc_r+0xa0>
 801014e:	bf00      	nop
 8010150:	20005154 	.word	0x20005154

08010154 <_realloc_r>:
 8010154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010158:	4680      	mov	r8, r0
 801015a:	4614      	mov	r4, r2
 801015c:	460e      	mov	r6, r1
 801015e:	b921      	cbnz	r1, 801016a <_realloc_r+0x16>
 8010160:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010164:	4611      	mov	r1, r2
 8010166:	f7ff bf81 	b.w	801006c <_malloc_r>
 801016a:	b92a      	cbnz	r2, 8010178 <_realloc_r+0x24>
 801016c:	f7ff ff12 	bl	800ff94 <_free_r>
 8010170:	4625      	mov	r5, r4
 8010172:	4628      	mov	r0, r5
 8010174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010178:	f000 f838 	bl	80101ec <_malloc_usable_size_r>
 801017c:	4284      	cmp	r4, r0
 801017e:	4607      	mov	r7, r0
 8010180:	d802      	bhi.n	8010188 <_realloc_r+0x34>
 8010182:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010186:	d812      	bhi.n	80101ae <_realloc_r+0x5a>
 8010188:	4621      	mov	r1, r4
 801018a:	4640      	mov	r0, r8
 801018c:	f7ff ff6e 	bl	801006c <_malloc_r>
 8010190:	4605      	mov	r5, r0
 8010192:	2800      	cmp	r0, #0
 8010194:	d0ed      	beq.n	8010172 <_realloc_r+0x1e>
 8010196:	42bc      	cmp	r4, r7
 8010198:	4622      	mov	r2, r4
 801019a:	4631      	mov	r1, r6
 801019c:	bf28      	it	cs
 801019e:	463a      	movcs	r2, r7
 80101a0:	f7fe fec6 	bl	800ef30 <memcpy>
 80101a4:	4631      	mov	r1, r6
 80101a6:	4640      	mov	r0, r8
 80101a8:	f7ff fef4 	bl	800ff94 <_free_r>
 80101ac:	e7e1      	b.n	8010172 <_realloc_r+0x1e>
 80101ae:	4635      	mov	r5, r6
 80101b0:	e7df      	b.n	8010172 <_realloc_r+0x1e>
	...

080101b4 <_sbrk_r>:
 80101b4:	b538      	push	{r3, r4, r5, lr}
 80101b6:	4d06      	ldr	r5, [pc, #24]	; (80101d0 <_sbrk_r+0x1c>)
 80101b8:	2300      	movs	r3, #0
 80101ba:	4604      	mov	r4, r0
 80101bc:	4608      	mov	r0, r1
 80101be:	602b      	str	r3, [r5, #0]
 80101c0:	f7f3 fe34 	bl	8003e2c <_sbrk>
 80101c4:	1c43      	adds	r3, r0, #1
 80101c6:	d102      	bne.n	80101ce <_sbrk_r+0x1a>
 80101c8:	682b      	ldr	r3, [r5, #0]
 80101ca:	b103      	cbz	r3, 80101ce <_sbrk_r+0x1a>
 80101cc:	6023      	str	r3, [r4, #0]
 80101ce:	bd38      	pop	{r3, r4, r5, pc}
 80101d0:	2000514c 	.word	0x2000514c

080101d4 <__malloc_lock>:
 80101d4:	4801      	ldr	r0, [pc, #4]	; (80101dc <__malloc_lock+0x8>)
 80101d6:	f7ff bec1 	b.w	800ff5c <__retarget_lock_acquire_recursive>
 80101da:	bf00      	nop
 80101dc:	20005150 	.word	0x20005150

080101e0 <__malloc_unlock>:
 80101e0:	4801      	ldr	r0, [pc, #4]	; (80101e8 <__malloc_unlock+0x8>)
 80101e2:	f7ff bebc 	b.w	800ff5e <__retarget_lock_release_recursive>
 80101e6:	bf00      	nop
 80101e8:	20005150 	.word	0x20005150

080101ec <_malloc_usable_size_r>:
 80101ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80101f0:	1f18      	subs	r0, r3, #4
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	bfbc      	itt	lt
 80101f6:	580b      	ldrlt	r3, [r1, r0]
 80101f8:	18c0      	addlt	r0, r0, r3
 80101fa:	4770      	bx	lr

080101fc <_init>:
 80101fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101fe:	bf00      	nop
 8010200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010202:	bc08      	pop	{r3}
 8010204:	469e      	mov	lr, r3
 8010206:	4770      	bx	lr

08010208 <_fini>:
 8010208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801020a:	bf00      	nop
 801020c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801020e:	bc08      	pop	{r3}
 8010210:	469e      	mov	lr, r3
 8010212:	4770      	bx	lr
