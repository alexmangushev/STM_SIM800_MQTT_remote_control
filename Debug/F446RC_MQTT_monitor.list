
F446RC_MQTT_monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e4c4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e18  0800e694  0800e694  0001e694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f4ac  0800f4ac  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  0800f4ac  0800f4ac  0001f4ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f4b4  0800f4b4  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f4b4  0800f4b4  0001f4b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f4b8  0800f4b8  0001f4b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0800f4bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005000  2000009c  0800f558  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000509c  0800f558  0002509c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020e2f  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fb8  00000000  00000000  00040efb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bc8  00000000  00000000  00044eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a68  00000000  00000000  00046a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004f66  00000000  00000000  000484e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020161  00000000  00000000  0004d44e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e107b  00000000  00000000  0006d5af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014e62a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008050  00000000  00000000  0014e67c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000009c 	.word	0x2000009c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e67c 	.word	0x0800e67c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a0 	.word	0x200000a0
 800020c:	0800e67c 	.word	0x0800e67c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b10:	f000 b974 	b.w	8000dfc <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9d08      	ldr	r5, [sp, #32]
 8000b32:	4604      	mov	r4, r0
 8000b34:	468e      	mov	lr, r1
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d14d      	bne.n	8000bd6 <__udivmoddi4+0xaa>
 8000b3a:	428a      	cmp	r2, r1
 8000b3c:	4694      	mov	ip, r2
 8000b3e:	d969      	bls.n	8000c14 <__udivmoddi4+0xe8>
 8000b40:	fab2 f282 	clz	r2, r2
 8000b44:	b152      	cbz	r2, 8000b5c <__udivmoddi4+0x30>
 8000b46:	fa01 f302 	lsl.w	r3, r1, r2
 8000b4a:	f1c2 0120 	rsb	r1, r2, #32
 8000b4e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b52:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b56:	ea41 0e03 	orr.w	lr, r1, r3
 8000b5a:	4094      	lsls	r4, r2
 8000b5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b60:	0c21      	lsrs	r1, r4, #16
 8000b62:	fbbe f6f8 	udiv	r6, lr, r8
 8000b66:	fa1f f78c 	uxth.w	r7, ip
 8000b6a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b6e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b72:	fb06 f107 	mul.w	r1, r6, r7
 8000b76:	4299      	cmp	r1, r3
 8000b78:	d90a      	bls.n	8000b90 <__udivmoddi4+0x64>
 8000b7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b7e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b82:	f080 811f 	bcs.w	8000dc4 <__udivmoddi4+0x298>
 8000b86:	4299      	cmp	r1, r3
 8000b88:	f240 811c 	bls.w	8000dc4 <__udivmoddi4+0x298>
 8000b8c:	3e02      	subs	r6, #2
 8000b8e:	4463      	add	r3, ip
 8000b90:	1a5b      	subs	r3, r3, r1
 8000b92:	b2a4      	uxth	r4, r4
 8000b94:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b98:	fb08 3310 	mls	r3, r8, r0, r3
 8000b9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba0:	fb00 f707 	mul.w	r7, r0, r7
 8000ba4:	42a7      	cmp	r7, r4
 8000ba6:	d90a      	bls.n	8000bbe <__udivmoddi4+0x92>
 8000ba8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bac:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bb0:	f080 810a 	bcs.w	8000dc8 <__udivmoddi4+0x29c>
 8000bb4:	42a7      	cmp	r7, r4
 8000bb6:	f240 8107 	bls.w	8000dc8 <__udivmoddi4+0x29c>
 8000bba:	4464      	add	r4, ip
 8000bbc:	3802      	subs	r0, #2
 8000bbe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bc2:	1be4      	subs	r4, r4, r7
 8000bc4:	2600      	movs	r6, #0
 8000bc6:	b11d      	cbz	r5, 8000bd0 <__udivmoddi4+0xa4>
 8000bc8:	40d4      	lsrs	r4, r2
 8000bca:	2300      	movs	r3, #0
 8000bcc:	e9c5 4300 	strd	r4, r3, [r5]
 8000bd0:	4631      	mov	r1, r6
 8000bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d909      	bls.n	8000bee <__udivmoddi4+0xc2>
 8000bda:	2d00      	cmp	r5, #0
 8000bdc:	f000 80ef 	beq.w	8000dbe <__udivmoddi4+0x292>
 8000be0:	2600      	movs	r6, #0
 8000be2:	e9c5 0100 	strd	r0, r1, [r5]
 8000be6:	4630      	mov	r0, r6
 8000be8:	4631      	mov	r1, r6
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	fab3 f683 	clz	r6, r3
 8000bf2:	2e00      	cmp	r6, #0
 8000bf4:	d14a      	bne.n	8000c8c <__udivmoddi4+0x160>
 8000bf6:	428b      	cmp	r3, r1
 8000bf8:	d302      	bcc.n	8000c00 <__udivmoddi4+0xd4>
 8000bfa:	4282      	cmp	r2, r0
 8000bfc:	f200 80f9 	bhi.w	8000df2 <__udivmoddi4+0x2c6>
 8000c00:	1a84      	subs	r4, r0, r2
 8000c02:	eb61 0303 	sbc.w	r3, r1, r3
 8000c06:	2001      	movs	r0, #1
 8000c08:	469e      	mov	lr, r3
 8000c0a:	2d00      	cmp	r5, #0
 8000c0c:	d0e0      	beq.n	8000bd0 <__udivmoddi4+0xa4>
 8000c0e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c12:	e7dd      	b.n	8000bd0 <__udivmoddi4+0xa4>
 8000c14:	b902      	cbnz	r2, 8000c18 <__udivmoddi4+0xec>
 8000c16:	deff      	udf	#255	; 0xff
 8000c18:	fab2 f282 	clz	r2, r2
 8000c1c:	2a00      	cmp	r2, #0
 8000c1e:	f040 8092 	bne.w	8000d46 <__udivmoddi4+0x21a>
 8000c22:	eba1 010c 	sub.w	r1, r1, ip
 8000c26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2a:	fa1f fe8c 	uxth.w	lr, ip
 8000c2e:	2601      	movs	r6, #1
 8000c30:	0c20      	lsrs	r0, r4, #16
 8000c32:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c36:	fb07 1113 	mls	r1, r7, r3, r1
 8000c3a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c3e:	fb0e f003 	mul.w	r0, lr, r3
 8000c42:	4288      	cmp	r0, r1
 8000c44:	d908      	bls.n	8000c58 <__udivmoddi4+0x12c>
 8000c46:	eb1c 0101 	adds.w	r1, ip, r1
 8000c4a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0x12a>
 8000c50:	4288      	cmp	r0, r1
 8000c52:	f200 80cb 	bhi.w	8000dec <__udivmoddi4+0x2c0>
 8000c56:	4643      	mov	r3, r8
 8000c58:	1a09      	subs	r1, r1, r0
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c60:	fb07 1110 	mls	r1, r7, r0, r1
 8000c64:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c68:	fb0e fe00 	mul.w	lr, lr, r0
 8000c6c:	45a6      	cmp	lr, r4
 8000c6e:	d908      	bls.n	8000c82 <__udivmoddi4+0x156>
 8000c70:	eb1c 0404 	adds.w	r4, ip, r4
 8000c74:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c78:	d202      	bcs.n	8000c80 <__udivmoddi4+0x154>
 8000c7a:	45a6      	cmp	lr, r4
 8000c7c:	f200 80bb 	bhi.w	8000df6 <__udivmoddi4+0x2ca>
 8000c80:	4608      	mov	r0, r1
 8000c82:	eba4 040e 	sub.w	r4, r4, lr
 8000c86:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c8a:	e79c      	b.n	8000bc6 <__udivmoddi4+0x9a>
 8000c8c:	f1c6 0720 	rsb	r7, r6, #32
 8000c90:	40b3      	lsls	r3, r6
 8000c92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c9a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c9e:	fa01 f306 	lsl.w	r3, r1, r6
 8000ca2:	431c      	orrs	r4, r3
 8000ca4:	40f9      	lsrs	r1, r7
 8000ca6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000caa:	fa00 f306 	lsl.w	r3, r0, r6
 8000cae:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cb2:	0c20      	lsrs	r0, r4, #16
 8000cb4:	fa1f fe8c 	uxth.w	lr, ip
 8000cb8:	fb09 1118 	mls	r1, r9, r8, r1
 8000cbc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cc0:	fb08 f00e 	mul.w	r0, r8, lr
 8000cc4:	4288      	cmp	r0, r1
 8000cc6:	fa02 f206 	lsl.w	r2, r2, r6
 8000cca:	d90b      	bls.n	8000ce4 <__udivmoddi4+0x1b8>
 8000ccc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cd4:	f080 8088 	bcs.w	8000de8 <__udivmoddi4+0x2bc>
 8000cd8:	4288      	cmp	r0, r1
 8000cda:	f240 8085 	bls.w	8000de8 <__udivmoddi4+0x2bc>
 8000cde:	f1a8 0802 	sub.w	r8, r8, #2
 8000ce2:	4461      	add	r1, ip
 8000ce4:	1a09      	subs	r1, r1, r0
 8000ce6:	b2a4      	uxth	r4, r4
 8000ce8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cec:	fb09 1110 	mls	r1, r9, r0, r1
 8000cf0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cf4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cf8:	458e      	cmp	lr, r1
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x1e2>
 8000cfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000d00:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d04:	d26c      	bcs.n	8000de0 <__udivmoddi4+0x2b4>
 8000d06:	458e      	cmp	lr, r1
 8000d08:	d96a      	bls.n	8000de0 <__udivmoddi4+0x2b4>
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	4461      	add	r1, ip
 8000d0e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d12:	fba0 9402 	umull	r9, r4, r0, r2
 8000d16:	eba1 010e 	sub.w	r1, r1, lr
 8000d1a:	42a1      	cmp	r1, r4
 8000d1c:	46c8      	mov	r8, r9
 8000d1e:	46a6      	mov	lr, r4
 8000d20:	d356      	bcc.n	8000dd0 <__udivmoddi4+0x2a4>
 8000d22:	d053      	beq.n	8000dcc <__udivmoddi4+0x2a0>
 8000d24:	b15d      	cbz	r5, 8000d3e <__udivmoddi4+0x212>
 8000d26:	ebb3 0208 	subs.w	r2, r3, r8
 8000d2a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d2e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d32:	fa22 f306 	lsr.w	r3, r2, r6
 8000d36:	40f1      	lsrs	r1, r6
 8000d38:	431f      	orrs	r7, r3
 8000d3a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d3e:	2600      	movs	r6, #0
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	f1c2 0320 	rsb	r3, r2, #32
 8000d4a:	40d8      	lsrs	r0, r3
 8000d4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d50:	fa21 f303 	lsr.w	r3, r1, r3
 8000d54:	4091      	lsls	r1, r2
 8000d56:	4301      	orrs	r1, r0
 8000d58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d5c:	fa1f fe8c 	uxth.w	lr, ip
 8000d60:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d64:	fb07 3610 	mls	r6, r7, r0, r3
 8000d68:	0c0b      	lsrs	r3, r1, #16
 8000d6a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d6e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d72:	429e      	cmp	r6, r3
 8000d74:	fa04 f402 	lsl.w	r4, r4, r2
 8000d78:	d908      	bls.n	8000d8c <__udivmoddi4+0x260>
 8000d7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d82:	d22f      	bcs.n	8000de4 <__udivmoddi4+0x2b8>
 8000d84:	429e      	cmp	r6, r3
 8000d86:	d92d      	bls.n	8000de4 <__udivmoddi4+0x2b8>
 8000d88:	3802      	subs	r0, #2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	1b9b      	subs	r3, r3, r6
 8000d8e:	b289      	uxth	r1, r1
 8000d90:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d94:	fb07 3316 	mls	r3, r7, r6, r3
 8000d98:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d9c:	fb06 f30e 	mul.w	r3, r6, lr
 8000da0:	428b      	cmp	r3, r1
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x28a>
 8000da4:	eb1c 0101 	adds.w	r1, ip, r1
 8000da8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000dac:	d216      	bcs.n	8000ddc <__udivmoddi4+0x2b0>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d914      	bls.n	8000ddc <__udivmoddi4+0x2b0>
 8000db2:	3e02      	subs	r6, #2
 8000db4:	4461      	add	r1, ip
 8000db6:	1ac9      	subs	r1, r1, r3
 8000db8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dbc:	e738      	b.n	8000c30 <__udivmoddi4+0x104>
 8000dbe:	462e      	mov	r6, r5
 8000dc0:	4628      	mov	r0, r5
 8000dc2:	e705      	b.n	8000bd0 <__udivmoddi4+0xa4>
 8000dc4:	4606      	mov	r6, r0
 8000dc6:	e6e3      	b.n	8000b90 <__udivmoddi4+0x64>
 8000dc8:	4618      	mov	r0, r3
 8000dca:	e6f8      	b.n	8000bbe <__udivmoddi4+0x92>
 8000dcc:	454b      	cmp	r3, r9
 8000dce:	d2a9      	bcs.n	8000d24 <__udivmoddi4+0x1f8>
 8000dd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000dd4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000dd8:	3801      	subs	r0, #1
 8000dda:	e7a3      	b.n	8000d24 <__udivmoddi4+0x1f8>
 8000ddc:	4646      	mov	r6, r8
 8000dde:	e7ea      	b.n	8000db6 <__udivmoddi4+0x28a>
 8000de0:	4620      	mov	r0, r4
 8000de2:	e794      	b.n	8000d0e <__udivmoddi4+0x1e2>
 8000de4:	4640      	mov	r0, r8
 8000de6:	e7d1      	b.n	8000d8c <__udivmoddi4+0x260>
 8000de8:	46d0      	mov	r8, sl
 8000dea:	e77b      	b.n	8000ce4 <__udivmoddi4+0x1b8>
 8000dec:	3b02      	subs	r3, #2
 8000dee:	4461      	add	r1, ip
 8000df0:	e732      	b.n	8000c58 <__udivmoddi4+0x12c>
 8000df2:	4630      	mov	r0, r6
 8000df4:	e709      	b.n	8000c0a <__udivmoddi4+0xde>
 8000df6:	4464      	add	r4, ip
 8000df8:	3802      	subs	r0, #2
 8000dfa:	e742      	b.n	8000c82 <__udivmoddi4+0x156>

08000dfc <__aeabi_idiv0>:
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop

08000e00 <INA226_getBusV>:
	*/
	
#include "INA226.h"
#include "main.h"
	
float INA226_getBusV(I2C_HandleTypeDef *I2CHandler, uint16_t DevAddress) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	460b      	mov	r3, r1
 8000e0a:	807b      	strh	r3, [r7, #2]
	return (INA226_getBusVReg(I2CHandler, DevAddress) * INA226_LSB);
 8000e0c:	887b      	ldrh	r3, [r7, #2]
 8000e0e:	4619      	mov	r1, r3
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f000 f845 	bl	8000ea0 <INA226_getBusVReg>
 8000e16:	4603      	mov	r3, r0
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff fba3 	bl	8000564 <__aeabi_i2d>
 8000e1e:	a30a      	add	r3, pc, #40	; (adr r3, 8000e48 <INA226_getBusV+0x48>)
 8000e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e24:	f7ff fc08 	bl	8000638 <__aeabi_dmul>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	460b      	mov	r3, r1
 8000e2c:	4610      	mov	r0, r2
 8000e2e:	4619      	mov	r1, r3
 8000e30:	f7ff fe14 	bl	8000a5c <__aeabi_d2f>
 8000e34:	4603      	mov	r3, r0
 8000e36:	ee07 3a90 	vmov	s15, r3
}
 8000e3a:	eeb0 0a67 	vmov.f32	s0, s15
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	f3af 8000 	nop.w
 8000e48:	47ae147b 	.word	0x47ae147b
 8000e4c:	3f547ae1 	.word	0x3f547ae1

08000e50 <INA226_getCurrent>:

float INA226_getCurrent(I2C_HandleTypeDef *I2CHandler, uint16_t DevAddress) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	460b      	mov	r3, r1
 8000e5a:	807b      	strh	r3, [r7, #2]
	return (INA226_getCurrentReg(I2CHandler, DevAddress) * INA226_CURRENTLSB);
 8000e5c:	887b      	ldrh	r3, [r7, #2]
 8000e5e:	4619      	mov	r1, r3
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f000 f848 	bl	8000ef6 <INA226_getCurrentReg>
 8000e66:	4603      	mov	r3, r0
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff fb7b 	bl	8000564 <__aeabi_i2d>
 8000e6e:	a30a      	add	r3, pc, #40	; (adr r3, 8000e98 <INA226_getCurrent+0x48>)
 8000e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e74:	f7ff fbe0 	bl	8000638 <__aeabi_dmul>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	4619      	mov	r1, r3
 8000e80:	f7ff fdec 	bl	8000a5c <__aeabi_d2f>
 8000e84:	4603      	mov	r3, r0
 8000e86:	ee07 3a90 	vmov	s15, r3
}
 8000e8a:	eeb0 0a67 	vmov.f32	s0, s15
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	f3af 8000 	nop.w
 8000e98:	9999999a 	.word	0x9999999a
 8000e9c:	3fa99999 	.word	0x3fa99999

08000ea0 <INA226_getBusVReg>:
	HAL_I2C_Master_Transmit(I2CHandler,DevAddress, SentTable, 1, INA226_I2CTIMEOUT);
	if (HAL_I2C_Master_Receive(I2CHandler,DevAddress, ReceivedTable, 2, INA226_I2CTIMEOUT) != HAL_OK) return 0xFF;
	else return ((uint16_t)ReceivedTable[0]<<8 | ReceivedTable[1]);
}

uint16_t INA226_getBusVReg(I2C_HandleTypeDef *I2CHandler, uint16_t DevAddress) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af02      	add	r7, sp, #8
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	807b      	strh	r3, [r7, #2]
	uint8_t SentTable[1] = {INA226_BUSV};
 8000eac:	2302      	movs	r3, #2
 8000eae:	733b      	strb	r3, [r7, #12]
	uint8_t ReceivedTable[2];
	HAL_I2C_Master_Transmit(I2CHandler,DevAddress, SentTable, 1, INA226_I2CTIMEOUT);
 8000eb0:	f107 020c 	add.w	r2, r7, #12
 8000eb4:	8879      	ldrh	r1, [r7, #2]
 8000eb6:	230a      	movs	r3, #10
 8000eb8:	9300      	str	r3, [sp, #0]
 8000eba:	2301      	movs	r3, #1
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f004 fb91 	bl	80055e4 <HAL_I2C_Master_Transmit>
	if (HAL_I2C_Master_Receive(I2CHandler,DevAddress, ReceivedTable, 2, INA226_I2CTIMEOUT) != HAL_OK) return 0xFF;
 8000ec2:	f107 0208 	add.w	r2, r7, #8
 8000ec6:	8879      	ldrh	r1, [r7, #2]
 8000ec8:	230a      	movs	r3, #10
 8000eca:	9300      	str	r3, [sp, #0]
 8000ecc:	2302      	movs	r3, #2
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f004 fc86 	bl	80057e0 <HAL_I2C_Master_Receive>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <INA226_getBusVReg+0x3e>
 8000eda:	23ff      	movs	r3, #255	; 0xff
 8000edc:	e007      	b.n	8000eee <INA226_getBusVReg+0x4e>
	else return ((uint16_t)ReceivedTable[0]<<8 | ReceivedTable[1]);
 8000ede:	7a3b      	ldrb	r3, [r7, #8]
 8000ee0:	021b      	lsls	r3, r3, #8
 8000ee2:	b21a      	sxth	r2, r3
 8000ee4:	7a7b      	ldrb	r3, [r7, #9]
 8000ee6:	b21b      	sxth	r3, r3
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	b21b      	sxth	r3, r3
 8000eec:	b29b      	uxth	r3, r3

}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <INA226_getCurrentReg>:
	HAL_I2C_Master_Transmit(I2CHandler,DevAddress, SentTable, 1, INA226_I2CTIMEOUT);
	if (HAL_I2C_Master_Receive(I2CHandler,DevAddress, ReceivedTable, 2, INA226_I2CTIMEOUT) != HAL_OK) return 0xFF;
	else return ((uint16_t)ReceivedTable[0]<<8 | ReceivedTable[1]);
}

uint16_t INA226_getCurrentReg(I2C_HandleTypeDef *I2CHandler, uint16_t DevAddress) {
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b086      	sub	sp, #24
 8000efa:	af02      	add	r7, sp, #8
 8000efc:	6078      	str	r0, [r7, #4]
 8000efe:	460b      	mov	r3, r1
 8000f00:	807b      	strh	r3, [r7, #2]
	uint8_t SentTable[1] = {INA226_CURRENT};
 8000f02:	2304      	movs	r3, #4
 8000f04:	733b      	strb	r3, [r7, #12]
	uint8_t ReceivedTable[2];
	HAL_I2C_Master_Transmit(I2CHandler,DevAddress, SentTable, 1, INA226_I2CTIMEOUT);
 8000f06:	f107 020c 	add.w	r2, r7, #12
 8000f0a:	8879      	ldrh	r1, [r7, #2]
 8000f0c:	230a      	movs	r3, #10
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	2301      	movs	r3, #1
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f004 fb66 	bl	80055e4 <HAL_I2C_Master_Transmit>
	if (HAL_I2C_Master_Receive(I2CHandler,DevAddress, ReceivedTable, 2, INA226_I2CTIMEOUT) != HAL_OK) return 0xFF;
 8000f18:	f107 0208 	add.w	r2, r7, #8
 8000f1c:	8879      	ldrh	r1, [r7, #2]
 8000f1e:	230a      	movs	r3, #10
 8000f20:	9300      	str	r3, [sp, #0]
 8000f22:	2302      	movs	r3, #2
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f004 fc5b 	bl	80057e0 <HAL_I2C_Master_Receive>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <INA226_getCurrentReg+0x3e>
 8000f30:	23ff      	movs	r3, #255	; 0xff
 8000f32:	e007      	b.n	8000f44 <INA226_getCurrentReg+0x4e>
	else return ((uint16_t)ReceivedTable[0]<<8 | ReceivedTable[1]);
 8000f34:	7a3b      	ldrb	r3, [r7, #8]
 8000f36:	021b      	lsls	r3, r3, #8
 8000f38:	b21a      	sxth	r2, r3
 8000f3a:	7a7b      	ldrb	r3, [r7, #9]
 8000f3c:	b21b      	sxth	r3, r3
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	b21b      	sxth	r3, r3
 8000f42:	b29b      	uxth	r3, r3
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3710      	adds	r7, #16
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <usMBCRC16>:
 */

#include "ModBusCRC.h"

uint16_t usMBCRC16(uint8_t * pucFrame, uint16_t usLen)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	460b      	mov	r3, r1
 8000f56:	807b      	strh	r3, [r7, #2]
	uint8_t           ucCRCHi = 0xFF;
 8000f58:	23ff      	movs	r3, #255	; 0xff
 8000f5a:	73fb      	strb	r3, [r7, #15]
	uint8_t           ucCRCLo = 0xFF;
 8000f5c:	23ff      	movs	r3, #255	; 0xff
 8000f5e:	73bb      	strb	r3, [r7, #14]
    int             iIndex;

    while( usLen-- )
 8000f60:	e013      	b.n	8000f8a <usMBCRC16+0x3e>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	1c5a      	adds	r2, r3, #1
 8000f66:	607a      	str	r2, [r7, #4]
 8000f68:	781a      	ldrb	r2, [r3, #0]
 8000f6a:	7bbb      	ldrb	r3, [r7, #14]
 8000f6c:	4053      	eors	r3, r2
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	60bb      	str	r3, [r7, #8]
        ucCRCLo = ( uint8_t )( ucCRCHi ^ aucCRCHi[iIndex] );
 8000f72:	4a0f      	ldr	r2, [pc, #60]	; (8000fb0 <usMBCRC16+0x64>)
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	4413      	add	r3, r2
 8000f78:	781a      	ldrb	r2, [r3, #0]
 8000f7a:	7bfb      	ldrb	r3, [r7, #15]
 8000f7c:	4053      	eors	r3, r2
 8000f7e:	73bb      	strb	r3, [r7, #14]
        ucCRCHi = aucCRCLo[iIndex];
 8000f80:	4a0c      	ldr	r2, [pc, #48]	; (8000fb4 <usMBCRC16+0x68>)
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	4413      	add	r3, r2
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	73fb      	strb	r3, [r7, #15]
    while( usLen-- )
 8000f8a:	887b      	ldrh	r3, [r7, #2]
 8000f8c:	1e5a      	subs	r2, r3, #1
 8000f8e:	807a      	strh	r2, [r7, #2]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d1e6      	bne.n	8000f62 <usMBCRC16+0x16>
    }
    return ( uint16_t )( ucCRCHi << 8 | ucCRCLo );
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
 8000f96:	021b      	lsls	r3, r3, #8
 8000f98:	b21a      	sxth	r2, r3
 8000f9a:	7bbb      	ldrb	r3, [r7, #14]
 8000f9c:	b21b      	sxth	r3, r3
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	b21b      	sxth	r3, r3
 8000fa2:	b29b      	uxth	r3, r3
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3714      	adds	r7, #20
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	0800ef00 	.word	0x0800ef00
 8000fb4:	0800f000 	.word	0x0800f000

08000fb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fbc:	f003 fa88 	bl	80044d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fc0:	f000 f8ca 	bl	8001158 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fc4:	f000 fa34 	bl	8001430 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fc8:	f000 f9ec 	bl	80013a4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000fcc:	f000 f996 	bl	80012fc <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000fd0:	f000 f95e 	bl	8001290 <MX_SPI2_Init>
  MX_I2C1_Init();
 8000fd4:	f000 f92e 	bl	8001234 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 8000fd8:	f000 f9ba 	bl	8001350 <MX_USART6_UART_Init>
  //INA226_setConfig(&hi2c1, INA226_ADDRESS, INA226_MODE_CONT_SHUNT_AND_BUS | INA226_AVG_1024);
  //INA226_setCalibrationReg(&hi2c1, INA226_ADDRESS, INA226_CALIB_VAL);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000fdc:	f008 f9a8 	bl	8009330 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of UART1Mutex */
  UART1MutexHandle = osMutexNew(&UART1Mutex_attributes);
 8000fe0:	4839      	ldr	r0, [pc, #228]	; (80010c8 <main+0x110>)
 8000fe2:	f008 fb89 	bl	80096f8 <osMutexNew>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	4a38      	ldr	r2, [pc, #224]	; (80010cc <main+0x114>)
 8000fea:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of PINGSem */
  PINGSemHandle = osSemaphoreNew(1, 0, &PINGSem_attributes);
 8000fec:	4a38      	ldr	r2, [pc, #224]	; (80010d0 <main+0x118>)
 8000fee:	2100      	movs	r1, #0
 8000ff0:	2001      	movs	r0, #1
 8000ff2:	f008 fc8f 	bl	8009914 <osSemaphoreNew>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	4a36      	ldr	r2, [pc, #216]	; (80010d4 <main+0x11c>)
 8000ffa:	6013      	str	r3, [r2, #0]

  /* creation of SemGetData */
  SemGetDataHandle = osSemaphoreNew(1, 0, &SemGetData_attributes);
 8000ffc:	4a36      	ldr	r2, [pc, #216]	; (80010d8 <main+0x120>)
 8000ffe:	2100      	movs	r1, #0
 8001000:	2001      	movs	r0, #1
 8001002:	f008 fc87 	bl	8009914 <osSemaphoreNew>
 8001006:	4603      	mov	r3, r0
 8001008:	4a34      	ldr	r2, [pc, #208]	; (80010dc <main+0x124>)
 800100a:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of PingTimer */
  PingTimerHandle = osTimerNew(CallbackPingTimer, osTimerPeriodic, NULL, &PingTimer_attributes);
 800100c:	4b34      	ldr	r3, [pc, #208]	; (80010e0 <main+0x128>)
 800100e:	2200      	movs	r2, #0
 8001010:	2101      	movs	r1, #1
 8001012:	4834      	ldr	r0, [pc, #208]	; (80010e4 <main+0x12c>)
 8001014:	f008 fac6 	bl	80095a4 <osTimerNew>
 8001018:	4603      	mov	r3, r0
 800101a:	4a33      	ldr	r2, [pc, #204]	; (80010e8 <main+0x130>)
 800101c:	6013      	str	r3, [r2, #0]

  /* creation of DataTimer */
  DataTimerHandle = osTimerNew(CallbackDataTimer, osTimerPeriodic, NULL, &DataTimer_attributes);
 800101e:	4b33      	ldr	r3, [pc, #204]	; (80010ec <main+0x134>)
 8001020:	2200      	movs	r2, #0
 8001022:	2101      	movs	r1, #1
 8001024:	4832      	ldr	r0, [pc, #200]	; (80010f0 <main+0x138>)
 8001026:	f008 fabd 	bl	80095a4 <osTimerNew>
 800102a:	4603      	mov	r3, r0
 800102c:	4a31      	ldr	r2, [pc, #196]	; (80010f4 <main+0x13c>)
 800102e:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of debugQueue */
  debugQueueHandle = osMessageQueueNew (10, sizeof(message_type), &debugQueue_attributes);
 8001030:	4a31      	ldr	r2, [pc, #196]	; (80010f8 <main+0x140>)
 8001032:	2146      	movs	r1, #70	; 0x46
 8001034:	200a      	movs	r0, #10
 8001036:	f008 fd8d 	bl	8009b54 <osMessageQueueNew>
 800103a:	4603      	mov	r3, r0
 800103c:	4a2f      	ldr	r2, [pc, #188]	; (80010fc <main+0x144>)
 800103e:	6013      	str	r3, [r2, #0]

  /* creation of SIM800SendQueue */
  SIM800SendQueueHandle = osMessageQueueNew (10, sizeof(message_type), &SIM800SendQueue_attributes);
 8001040:	4a2f      	ldr	r2, [pc, #188]	; (8001100 <main+0x148>)
 8001042:	2146      	movs	r1, #70	; 0x46
 8001044:	200a      	movs	r0, #10
 8001046:	f008 fd85 	bl	8009b54 <osMessageQueueNew>
 800104a:	4603      	mov	r3, r0
 800104c:	4a2d      	ldr	r2, [pc, #180]	; (8001104 <main+0x14c>)
 800104e:	6013      	str	r3, [r2, #0]

  /* creation of RxSIM800Queue */
  RxSIM800QueueHandle = osMessageQueueNew (10, sizeof(message_type), &RxSIM800Queue_attributes);
 8001050:	4a2d      	ldr	r2, [pc, #180]	; (8001108 <main+0x150>)
 8001052:	2146      	movs	r1, #70	; 0x46
 8001054:	200a      	movs	r0, #10
 8001056:	f008 fd7d 	bl	8009b54 <osMessageQueueNew>
 800105a:	4603      	mov	r3, r0
 800105c:	4a2b      	ldr	r2, [pc, #172]	; (800110c <main+0x154>)
 800105e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001060:	4a2b      	ldr	r2, [pc, #172]	; (8001110 <main+0x158>)
 8001062:	2100      	movs	r1, #0
 8001064:	482b      	ldr	r0, [pc, #172]	; (8001114 <main+0x15c>)
 8001066:	f008 f9ad 	bl	80093c4 <osThreadNew>
 800106a:	4603      	mov	r3, r0
 800106c:	4a2a      	ldr	r2, [pc, #168]	; (8001118 <main+0x160>)
 800106e:	6013      	str	r3, [r2, #0]

  /* creation of GetDataTask */
  GetDataTaskHandle = osThreadNew(StartGetDataTask, NULL, &GetDataTask_attributes);
 8001070:	4a2a      	ldr	r2, [pc, #168]	; (800111c <main+0x164>)
 8001072:	2100      	movs	r1, #0
 8001074:	482a      	ldr	r0, [pc, #168]	; (8001120 <main+0x168>)
 8001076:	f008 f9a5 	bl	80093c4 <osThreadNew>
 800107a:	4603      	mov	r3, r0
 800107c:	4a29      	ldr	r2, [pc, #164]	; (8001124 <main+0x16c>)
 800107e:	6013      	str	r3, [r2, #0]

  /* creation of DebugTask */
  DebugTaskHandle = osThreadNew(StartDebugTask, NULL, &DebugTask_attributes);
 8001080:	4a29      	ldr	r2, [pc, #164]	; (8001128 <main+0x170>)
 8001082:	2100      	movs	r1, #0
 8001084:	4829      	ldr	r0, [pc, #164]	; (800112c <main+0x174>)
 8001086:	f008 f99d 	bl	80093c4 <osThreadNew>
 800108a:	4603      	mov	r3, r0
 800108c:	4a28      	ldr	r2, [pc, #160]	; (8001130 <main+0x178>)
 800108e:	6013      	str	r3, [r2, #0]

  /* creation of SIM800SendTask */
  SIM800SendTaskHandle = osThreadNew(StartSIM800SendTask, NULL, &SIM800SendTask_attributes);
 8001090:	4a28      	ldr	r2, [pc, #160]	; (8001134 <main+0x17c>)
 8001092:	2100      	movs	r1, #0
 8001094:	4828      	ldr	r0, [pc, #160]	; (8001138 <main+0x180>)
 8001096:	f008 f995 	bl	80093c4 <osThreadNew>
 800109a:	4603      	mov	r3, r0
 800109c:	4a27      	ldr	r2, [pc, #156]	; (800113c <main+0x184>)
 800109e:	6013      	str	r3, [r2, #0]

  /* creation of PINGTask */
  //PINGTaskHandle = osThreadNew(PINGStartTask, NULL, &PINGTask_attributes);

  /* creation of SIM800StartTask */
  SIM800StartTaskHandle = osThreadNew(StartSIM800Task, NULL, &SIM800StartTask_attributes);
 80010a0:	4a27      	ldr	r2, [pc, #156]	; (8001140 <main+0x188>)
 80010a2:	2100      	movs	r1, #0
 80010a4:	4827      	ldr	r0, [pc, #156]	; (8001144 <main+0x18c>)
 80010a6:	f008 f98d 	bl	80093c4 <osThreadNew>
 80010aa:	4603      	mov	r3, r0
 80010ac:	4a26      	ldr	r2, [pc, #152]	; (8001148 <main+0x190>)
 80010ae:	6013      	str	r3, [r2, #0]

  /* creation of MQTTConnectTask */
  //MQTTConnectTaskHandle = osThreadNew(StartMQTTConnectTask, NULL, &MQTTConnectTask_attributes);

  /* creation of MessHandlerTask */
  MessHandlerTaskHandle = osThreadNew(StartMessHandlerTask, NULL, &MessHandlerTask_attributes);
 80010b0:	4a26      	ldr	r2, [pc, #152]	; (800114c <main+0x194>)
 80010b2:	2100      	movs	r1, #0
 80010b4:	4826      	ldr	r0, [pc, #152]	; (8001150 <main+0x198>)
 80010b6:	f008 f985 	bl	80093c4 <osThreadNew>
 80010ba:	4603      	mov	r3, r0
 80010bc:	4a25      	ldr	r2, [pc, #148]	; (8001154 <main+0x19c>)
 80010be:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80010c0:	f008 f95a 	bl	8009378 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010c4:	e7fe      	b.n	80010c4 <main+0x10c>
 80010c6:	bf00      	nop
 80010c8:	0800f2ac 	.word	0x0800f2ac
 80010cc:	200003a4 	.word	0x200003a4
 80010d0:	0800f2bc 	.word	0x0800f2bc
 80010d4:	200003a8 	.word	0x200003a8
 80010d8:	0800f2cc 	.word	0x0800f2cc
 80010dc:	200003ac 	.word	0x200003ac
 80010e0:	0800f28c 	.word	0x0800f28c
 80010e4:	08003645 	.word	0x08003645
 80010e8:	2000039c 	.word	0x2000039c
 80010ec:	0800f29c 	.word	0x0800f29c
 80010f0:	08003665 	.word	0x08003665
 80010f4:	200003a0 	.word	0x200003a0
 80010f8:	0800f244 	.word	0x0800f244
 80010fc:	20000390 	.word	0x20000390
 8001100:	0800f25c 	.word	0x0800f25c
 8001104:	20000394 	.word	0x20000394
 8001108:	0800f274 	.word	0x0800f274
 800110c:	20000398 	.word	0x20000398
 8001110:	0800f100 	.word	0x0800f100
 8001114:	08001949 	.word	0x08001949
 8001118:	2000036c 	.word	0x2000036c
 800111c:	0800f124 	.word	0x0800f124
 8001120:	080019cd 	.word	0x080019cd
 8001124:	20000370 	.word	0x20000370
 8001128:	0800f148 	.word	0x0800f148
 800112c:	08001c71 	.word	0x08001c71
 8001130:	20000374 	.word	0x20000374
 8001134:	0800f16c 	.word	0x0800f16c
 8001138:	08001c91 	.word	0x08001c91
 800113c:	20000378 	.word	0x20000378
 8001140:	0800f1b4 	.word	0x0800f1b4
 8001144:	0800208d 	.word	0x0800208d
 8001148:	20000380 	.word	0x20000380
 800114c:	0800f1fc 	.word	0x0800f1fc
 8001150:	08002b91 	.word	0x08002b91
 8001154:	20000388 	.word	0x20000388

08001158 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b094      	sub	sp, #80	; 0x50
 800115c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800115e:	f107 031c 	add.w	r3, r7, #28
 8001162:	2234      	movs	r2, #52	; 0x34
 8001164:	2100      	movs	r1, #0
 8001166:	4618      	mov	r0, r3
 8001168:	f00c f930 	bl	800d3cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800116c:	f107 0308 	add.w	r3, r7, #8
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800117c:	2300      	movs	r3, #0
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	4b2a      	ldr	r3, [pc, #168]	; (800122c <SystemClock_Config+0xd4>)
 8001182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001184:	4a29      	ldr	r2, [pc, #164]	; (800122c <SystemClock_Config+0xd4>)
 8001186:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800118a:	6413      	str	r3, [r2, #64]	; 0x40
 800118c:	4b27      	ldr	r3, [pc, #156]	; (800122c <SystemClock_Config+0xd4>)
 800118e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001194:	607b      	str	r3, [r7, #4]
 8001196:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001198:	2300      	movs	r3, #0
 800119a:	603b      	str	r3, [r7, #0]
 800119c:	4b24      	ldr	r3, [pc, #144]	; (8001230 <SystemClock_Config+0xd8>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80011a4:	4a22      	ldr	r2, [pc, #136]	; (8001230 <SystemClock_Config+0xd8>)
 80011a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011aa:	6013      	str	r3, [r2, #0]
 80011ac:	4b20      	ldr	r3, [pc, #128]	; (8001230 <SystemClock_Config+0xd8>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011b4:	603b      	str	r3, [r7, #0]
 80011b6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011b8:	2302      	movs	r3, #2
 80011ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011bc:	2301      	movs	r3, #1
 80011be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011c0:	2310      	movs	r3, #16
 80011c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011c4:	2302      	movs	r3, #2
 80011c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011c8:	2300      	movs	r3, #0
 80011ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80011cc:	2310      	movs	r3, #16
 80011ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 80011d0:	23c0      	movs	r3, #192	; 0xc0
 80011d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011d4:	2302      	movs	r3, #2
 80011d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011d8:	2302      	movs	r3, #2
 80011da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011dc:	2302      	movs	r3, #2
 80011de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e0:	f107 031c 	add.w	r3, r7, #28
 80011e4:	4618      	mov	r0, r3
 80011e6:	f005 fb45 	bl	8006874 <HAL_RCC_OscConfig>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80011f0:	f002 fa5a 	bl	80036a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011f4:	230f      	movs	r3, #15
 80011f6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011f8:	2302      	movs	r3, #2
 80011fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011fc:	2300      	movs	r3, #0
 80011fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001200:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001204:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001206:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800120a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800120c:	f107 0308 	add.w	r3, r7, #8
 8001210:	2103      	movs	r1, #3
 8001212:	4618      	mov	r0, r3
 8001214:	f005 f838 	bl	8006288 <HAL_RCC_ClockConfig>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800121e:	f002 fa43 	bl	80036a8 <Error_Handler>
  }
}
 8001222:	bf00      	nop
 8001224:	3750      	adds	r7, #80	; 0x50
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40023800 	.word	0x40023800
 8001230:	40007000 	.word	0x40007000

08001234 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001238:	4b12      	ldr	r3, [pc, #72]	; (8001284 <MX_I2C1_Init+0x50>)
 800123a:	4a13      	ldr	r2, [pc, #76]	; (8001288 <MX_I2C1_Init+0x54>)
 800123c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800123e:	4b11      	ldr	r3, [pc, #68]	; (8001284 <MX_I2C1_Init+0x50>)
 8001240:	4a12      	ldr	r2, [pc, #72]	; (800128c <MX_I2C1_Init+0x58>)
 8001242:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001244:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <MX_I2C1_Init+0x50>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800124a:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <MX_I2C1_Init+0x50>)
 800124c:	2200      	movs	r2, #0
 800124e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001250:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <MX_I2C1_Init+0x50>)
 8001252:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001256:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001258:	4b0a      	ldr	r3, [pc, #40]	; (8001284 <MX_I2C1_Init+0x50>)
 800125a:	2200      	movs	r2, #0
 800125c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800125e:	4b09      	ldr	r3, [pc, #36]	; (8001284 <MX_I2C1_Init+0x50>)
 8001260:	2200      	movs	r2, #0
 8001262:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001264:	4b07      	ldr	r3, [pc, #28]	; (8001284 <MX_I2C1_Init+0x50>)
 8001266:	2200      	movs	r2, #0
 8001268:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800126a:	4b06      	ldr	r3, [pc, #24]	; (8001284 <MX_I2C1_Init+0x50>)
 800126c:	2200      	movs	r2, #0
 800126e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001270:	4804      	ldr	r0, [pc, #16]	; (8001284 <MX_I2C1_Init+0x50>)
 8001272:	f004 f873 	bl	800535c <HAL_I2C_Init>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800127c:	f002 fa14 	bl	80036a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}
 8001284:	200000b8 	.word	0x200000b8
 8001288:	40005400 	.word	0x40005400
 800128c:	000186a0 	.word	0x000186a0

08001290 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001294:	4b17      	ldr	r3, [pc, #92]	; (80012f4 <MX_SPI2_Init+0x64>)
 8001296:	4a18      	ldr	r2, [pc, #96]	; (80012f8 <MX_SPI2_Init+0x68>)
 8001298:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800129a:	4b16      	ldr	r3, [pc, #88]	; (80012f4 <MX_SPI2_Init+0x64>)
 800129c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012a0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80012a2:	4b14      	ldr	r3, [pc, #80]	; (80012f4 <MX_SPI2_Init+0x64>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80012a8:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <MX_SPI2_Init+0x64>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012ae:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <MX_SPI2_Init+0x64>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012b4:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <MX_SPI2_Init+0x64>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80012ba:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <MX_SPI2_Init+0x64>)
 80012bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012c0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012c2:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <MX_SPI2_Init+0x64>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012c8:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <MX_SPI2_Init+0x64>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80012ce:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <MX_SPI2_Init+0x64>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012d4:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <MX_SPI2_Init+0x64>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80012da:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <MX_SPI2_Init+0x64>)
 80012dc:	220a      	movs	r2, #10
 80012de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80012e0:	4804      	ldr	r0, [pc, #16]	; (80012f4 <MX_SPI2_Init+0x64>)
 80012e2:	f005 fd65 	bl	8006db0 <HAL_SPI_Init>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80012ec:	f002 f9dc 	bl	80036a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	2000010c 	.word	0x2000010c
 80012f8:	40003800 	.word	0x40003800

080012fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001300:	4b11      	ldr	r3, [pc, #68]	; (8001348 <MX_USART2_UART_Init+0x4c>)
 8001302:	4a12      	ldr	r2, [pc, #72]	; (800134c <MX_USART2_UART_Init+0x50>)
 8001304:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001306:	4b10      	ldr	r3, [pc, #64]	; (8001348 <MX_USART2_UART_Init+0x4c>)
 8001308:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800130c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800130e:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <MX_USART2_UART_Init+0x4c>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001314:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <MX_USART2_UART_Init+0x4c>)
 8001316:	2200      	movs	r2, #0
 8001318:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800131a:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <MX_USART2_UART_Init+0x4c>)
 800131c:	2200      	movs	r2, #0
 800131e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001320:	4b09      	ldr	r3, [pc, #36]	; (8001348 <MX_USART2_UART_Init+0x4c>)
 8001322:	220c      	movs	r2, #12
 8001324:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001326:	4b08      	ldr	r3, [pc, #32]	; (8001348 <MX_USART2_UART_Init+0x4c>)
 8001328:	2200      	movs	r2, #0
 800132a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800132c:	4b06      	ldr	r3, [pc, #24]	; (8001348 <MX_USART2_UART_Init+0x4c>)
 800132e:	2200      	movs	r2, #0
 8001330:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001332:	4805      	ldr	r0, [pc, #20]	; (8001348 <MX_USART2_UART_Init+0x4c>)
 8001334:	f006 fc1c 	bl	8007b70 <HAL_UART_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800133e:	f002 f9b3 	bl	80036a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000164 	.word	0x20000164
 800134c:	40004400 	.word	0x40004400

08001350 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001354:	4b11      	ldr	r3, [pc, #68]	; (800139c <MX_USART6_UART_Init+0x4c>)
 8001356:	4a12      	ldr	r2, [pc, #72]	; (80013a0 <MX_USART6_UART_Init+0x50>)
 8001358:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 19200;
 800135a:	4b10      	ldr	r3, [pc, #64]	; (800139c <MX_USART6_UART_Init+0x4c>)
 800135c:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001360:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001362:	4b0e      	ldr	r3, [pc, #56]	; (800139c <MX_USART6_UART_Init+0x4c>)
 8001364:	2200      	movs	r2, #0
 8001366:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001368:	4b0c      	ldr	r3, [pc, #48]	; (800139c <MX_USART6_UART_Init+0x4c>)
 800136a:	2200      	movs	r2, #0
 800136c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800136e:	4b0b      	ldr	r3, [pc, #44]	; (800139c <MX_USART6_UART_Init+0x4c>)
 8001370:	2200      	movs	r2, #0
 8001372:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001374:	4b09      	ldr	r3, [pc, #36]	; (800139c <MX_USART6_UART_Init+0x4c>)
 8001376:	220c      	movs	r2, #12
 8001378:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800137a:	4b08      	ldr	r3, [pc, #32]	; (800139c <MX_USART6_UART_Init+0x4c>)
 800137c:	2200      	movs	r2, #0
 800137e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <MX_USART6_UART_Init+0x4c>)
 8001382:	2200      	movs	r2, #0
 8001384:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001386:	4805      	ldr	r0, [pc, #20]	; (800139c <MX_USART6_UART_Init+0x4c>)
 8001388:	f006 fbf2 	bl	8007b70 <HAL_UART_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001392:	f002 f989 	bl	80036a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	200001a8 	.word	0x200001a8
 80013a0:	40011400 	.word	0x40011400

080013a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	607b      	str	r3, [r7, #4]
 80013ae:	4b1f      	ldr	r3, [pc, #124]	; (800142c <MX_DMA_Init+0x88>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	4a1e      	ldr	r2, [pc, #120]	; (800142c <MX_DMA_Init+0x88>)
 80013b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013b8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ba:	4b1c      	ldr	r3, [pc, #112]	; (800142c <MX_DMA_Init+0x88>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	603b      	str	r3, [r7, #0]
 80013ca:	4b18      	ldr	r3, [pc, #96]	; (800142c <MX_DMA_Init+0x88>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	4a17      	ldr	r2, [pc, #92]	; (800142c <MX_DMA_Init+0x88>)
 80013d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013d4:	6313      	str	r3, [r2, #48]	; 0x30
 80013d6:	4b15      	ldr	r3, [pc, #84]	; (800142c <MX_DMA_Init+0x88>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013de:	603b      	str	r3, [r7, #0]
 80013e0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80013e2:	2200      	movs	r2, #0
 80013e4:	2105      	movs	r1, #5
 80013e6:	2010      	movs	r0, #16
 80013e8:	f003 f9a7 	bl	800473a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80013ec:	2010      	movs	r0, #16
 80013ee:	f003 f9c0 	bl	8004772 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80013f2:	2200      	movs	r2, #0
 80013f4:	2105      	movs	r1, #5
 80013f6:	2011      	movs	r0, #17
 80013f8:	f003 f99f 	bl	800473a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80013fc:	2011      	movs	r0, #17
 80013fe:	f003 f9b8 	bl	8004772 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001402:	2200      	movs	r2, #0
 8001404:	2105      	movs	r1, #5
 8001406:	2039      	movs	r0, #57	; 0x39
 8001408:	f003 f997 	bl	800473a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800140c:	2039      	movs	r0, #57	; 0x39
 800140e:	f003 f9b0 	bl	8004772 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8001412:	2200      	movs	r2, #0
 8001414:	2105      	movs	r1, #5
 8001416:	2045      	movs	r0, #69	; 0x45
 8001418:	f003 f98f 	bl	800473a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800141c:	2045      	movs	r0, #69	; 0x45
 800141e:	f003 f9a8 	bl	8004772 <HAL_NVIC_EnableIRQ>

}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40023800 	.word	0x40023800

08001430 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b088      	sub	sp, #32
 8001434:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001436:	f107 030c 	add.w	r3, r7, #12
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	60da      	str	r2, [r3, #12]
 8001444:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	4b43      	ldr	r3, [pc, #268]	; (8001558 <MX_GPIO_Init+0x128>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a42      	ldr	r2, [pc, #264]	; (8001558 <MX_GPIO_Init+0x128>)
 8001450:	f043 0304 	orr.w	r3, r3, #4
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b40      	ldr	r3, [pc, #256]	; (8001558 <MX_GPIO_Init+0x128>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0304 	and.w	r3, r3, #4
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	607b      	str	r3, [r7, #4]
 8001466:	4b3c      	ldr	r3, [pc, #240]	; (8001558 <MX_GPIO_Init+0x128>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	4a3b      	ldr	r2, [pc, #236]	; (8001558 <MX_GPIO_Init+0x128>)
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
 8001472:	4b39      	ldr	r3, [pc, #228]	; (8001558 <MX_GPIO_Init+0x128>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	603b      	str	r3, [r7, #0]
 8001482:	4b35      	ldr	r3, [pc, #212]	; (8001558 <MX_GPIO_Init+0x128>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a34      	ldr	r2, [pc, #208]	; (8001558 <MX_GPIO_Init+0x128>)
 8001488:	f043 0302 	orr.w	r3, r3, #2
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b32      	ldr	r3, [pc, #200]	; (8001558 <MX_GPIO_Init+0x128>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	603b      	str	r3, [r7, #0]
 8001498:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_2_Pin|GPIO_PIN_1|GPIO_PIN_3|LED_3_Pin
 800149a:	2201      	movs	r2, #1
 800149c:	f242 013a 	movw	r1, #8250	; 0x203a
 80014a0:	482e      	ldr	r0, [pc, #184]	; (800155c <MX_GPIO_Init+0x12c>)
 80014a2:	f003 ff27 	bl	80052f4 <HAL_GPIO_WritePin>
                          |LED_1_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SIM_POWER_GPIO_Port, SIM_POWER_Pin, GPIO_PIN_RESET);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2101      	movs	r1, #1
 80014aa:	482c      	ldr	r0, [pc, #176]	; (800155c <MX_GPIO_Init+0x12c>)
 80014ac:	f003 ff22 	bl	80052f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 80014b0:	2201      	movs	r2, #1
 80014b2:	2110      	movs	r1, #16
 80014b4:	482a      	ldr	r0, [pc, #168]	; (8001560 <MX_GPIO_Init+0x130>)
 80014b6:	f003 ff1d 	bl	80052f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(temp_GPIO_Port, temp_Pin, GPIO_PIN_RESET);
 80014ba:	2200      	movs	r2, #0
 80014bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014c0:	4828      	ldr	r0, [pc, #160]	; (8001564 <MX_GPIO_Init+0x134>)
 80014c2:	f003 ff17 	bl	80052f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 80014c6:	2201      	movs	r2, #1
 80014c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014cc:	4825      	ldr	r0, [pc, #148]	; (8001564 <MX_GPIO_Init+0x134>)
 80014ce:	f003 ff11 	bl	80052f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SIM_RESET_Pin|SIM_START_Pin, GPIO_PIN_RESET);
 80014d2:	2200      	movs	r2, #0
 80014d4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80014d8:	4821      	ldr	r0, [pc, #132]	; (8001560 <MX_GPIO_Init+0x130>)
 80014da:	f003 ff0b 	bl	80052f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_2_Pin SIM_POWER_Pin PC1 PC3
                           LED_3_Pin LED_1_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin|SIM_POWER_Pin|GPIO_PIN_1|GPIO_PIN_3
 80014de:	f242 033b 	movw	r3, #8251	; 0x203b
 80014e2:	60fb      	str	r3, [r7, #12]
                          |LED_3_Pin|LED_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e4:	2301      	movs	r3, #1
 80014e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ec:	2300      	movs	r3, #0
 80014ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014f0:	f107 030c 	add.w	r3, r7, #12
 80014f4:	4619      	mov	r1, r3
 80014f6:	4819      	ldr	r0, [pc, #100]	; (800155c <MX_GPIO_Init+0x12c>)
 80014f8:	f003 fd50 	bl	8004f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014fc:	2304      	movs	r3, #4
 80014fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001500:	2300      	movs	r3, #0
 8001502:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001508:	f107 030c 	add.w	r3, r7, #12
 800150c:	4619      	mov	r1, r3
 800150e:	4813      	ldr	r0, [pc, #76]	; (800155c <MX_GPIO_Init+0x12c>)
 8001510:	f003 fd44 	bl	8004f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_4_Pin SIM_RESET_Pin SIM_START_Pin */
  GPIO_InitStruct.Pin = LED_4_Pin|SIM_RESET_Pin|SIM_START_Pin;
 8001514:	f641 0310 	movw	r3, #6160	; 0x1810
 8001518:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151a:	2301      	movs	r3, #1
 800151c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001522:	2300      	movs	r3, #0
 8001524:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001526:	f107 030c 	add.w	r3, r7, #12
 800152a:	4619      	mov	r1, r3
 800152c:	480c      	ldr	r0, [pc, #48]	; (8001560 <MX_GPIO_Init+0x130>)
 800152e:	f003 fd35 	bl	8004f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : temp_Pin FLASH_CS_Pin */
  GPIO_InitStruct.Pin = temp_Pin|FLASH_CS_Pin;
 8001532:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001536:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001538:	2301      	movs	r3, #1
 800153a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001540:	2300      	movs	r3, #0
 8001542:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001544:	f107 030c 	add.w	r3, r7, #12
 8001548:	4619      	mov	r1, r3
 800154a:	4806      	ldr	r0, [pc, #24]	; (8001564 <MX_GPIO_Init+0x134>)
 800154c:	f003 fd26 	bl	8004f9c <HAL_GPIO_Init>

}
 8001550:	bf00      	nop
 8001552:	3720      	adds	r7, #32
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40023800 	.word	0x40023800
 800155c:	40020800 	.word	0x40020800
 8001560:	40020000 	.word	0x40020000
 8001564:	40020400 	.word	0x40020400

08001568 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4a06      	ldr	r2, [pc, #24]	; (800158c <HAL_UART_RxCpltCallback+0x24>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d102      	bne.n	800157e <HAL_UART_RxCpltCallback+0x16>
	{
		UART2_RX_finish = 1;
 8001578:	4b05      	ldr	r3, [pc, #20]	; (8001590 <HAL_UART_RxCpltCallback+0x28>)
 800157a:	2201      	movs	r2, #1
 800157c:	701a      	strb	r2, [r3, #0]
	}
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	20000164 	.word	0x20000164
 8001590:	200003b8 	.word	0x200003b8

08001594 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	4a06      	ldr	r2, [pc, #24]	; (80015b8 <HAL_UART_TxCpltCallback+0x24>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d102      	bne.n	80015aa <HAL_UART_TxCpltCallback+0x16>
	{
		UART2_TX_finish = 1;
 80015a4:	4b05      	ldr	r3, [pc, #20]	; (80015bc <HAL_UART_TxCpltCallback+0x28>)
 80015a6:	2201      	movs	r2, #1
 80015a8:	701a      	strb	r2, [r3, #0]
	}
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	20000164 	.word	0x20000164
 80015bc:	200003b7 	.word	0x200003b7

080015c0 <SPI2_Init_Master>:

void SPI2_Init_Master(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c6:	1d3b      	adds	r3, r7, #4
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 80015d4:	2201      	movs	r2, #1
 80015d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015da:	4810      	ldr	r0, [pc, #64]	; (800161c <SPI2_Init_Master+0x5c>)
 80015dc:	f003 fe8a 	bl	80052f4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : FLASH_CS_Pin */
	GPIO_InitStruct.Pin = FLASH_CS_Pin;
 80015e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015e4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e6:	2301      	movs	r3, #1
 80015e8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ee:	2300      	movs	r3, #0
 80015f0:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 80015f2:	1d3b      	adds	r3, r7, #4
 80015f4:	4619      	mov	r1, r3
 80015f6:	4809      	ldr	r0, [pc, #36]	; (800161c <SPI2_Init_Master+0x5c>)
 80015f8:	f003 fcd0 	bl	8004f9c <HAL_GPIO_Init>

	hspi2.Init.Mode = SPI_MODE_MASTER;
 80015fc:	4b08      	ldr	r3, [pc, #32]	; (8001620 <SPI2_Init_Master+0x60>)
 80015fe:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001602:	605a      	str	r2, [r3, #4]
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001604:	4806      	ldr	r0, [pc, #24]	; (8001620 <SPI2_Init_Master+0x60>)
 8001606:	f005 fbd3 	bl	8006db0 <HAL_SPI_Init>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <SPI2_Init_Master+0x54>
	{
		Error_Handler();
 8001610:	f002 f84a 	bl	80036a8 <Error_Handler>
	}
}
 8001614:	bf00      	nop
 8001616:	3718      	adds	r7, #24
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40020400 	.word	0x40020400
 8001620:	2000010c 	.word	0x2000010c

08001624 <Make_MQTT_send_string>:
  * @param  send_MQTT_message[] String, where will be result.
  * @param  msg[] struct with message for sending with MQTT.
 */

void Make_MQTT_send_string(uint8_t send_MQTT_message[], message_type msg)
{
 8001624:	b084      	sub	sp, #16
 8001626:	b590      	push	{r4, r7, lr}
 8001628:	b083      	sub	sp, #12
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
 800162e:	f107 001c 	add.w	r0, r7, #28
 8001632:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	send_MQTT_message[0] = 0x30;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2230      	movs	r2, #48	; 0x30
 800163a:	701a      	strb	r2, [r3, #0]
    send_MQTT_message[1] = strlen(msg.str) + strlen(TOPIC) + 2;
 800163c:	f107 031c 	add.w	r3, r7, #28
 8001640:	4618      	mov	r0, r3
 8001642:	f7fe fde5 	bl	8000210 <strlen>
 8001646:	4603      	mov	r3, r0
 8001648:	b2dc      	uxtb	r4, r3
 800164a:	4819      	ldr	r0, [pc, #100]	; (80016b0 <Make_MQTT_send_string+0x8c>)
 800164c:	f7fe fde0 	bl	8000210 <strlen>
 8001650:	4603      	mov	r3, r0
 8001652:	b2db      	uxtb	r3, r3
 8001654:	4423      	add	r3, r4
 8001656:	b2da      	uxtb	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3301      	adds	r3, #1
 800165c:	3202      	adds	r2, #2
 800165e:	b2d2      	uxtb	r2, r2
 8001660:	701a      	strb	r2, [r3, #0]
    send_MQTT_message[2] = 0;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	3302      	adds	r3, #2
 8001666:	2200      	movs	r2, #0
 8001668:	701a      	strb	r2, [r3, #0]
    send_MQTT_message[3] = strlen(TOPIC);
 800166a:	4811      	ldr	r0, [pc, #68]	; (80016b0 <Make_MQTT_send_string+0x8c>)
 800166c:	f7fe fdd0 	bl	8000210 <strlen>
 8001670:	4602      	mov	r2, r0
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	3303      	adds	r3, #3
 8001676:	b2d2      	uxtb	r2, r2
 8001678:	701a      	strb	r2, [r3, #0]
    sprintf(send_MQTT_message + 4,"%s",TOPIC);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	3304      	adds	r3, #4
 800167e:	4a0c      	ldr	r2, [pc, #48]	; (80016b0 <Make_MQTT_send_string+0x8c>)
 8001680:	490c      	ldr	r1, [pc, #48]	; (80016b4 <Make_MQTT_send_string+0x90>)
 8001682:	4618      	mov	r0, r3
 8001684:	f00b fede 	bl	800d444 <siprintf>
    sprintf(send_MQTT_message + 4 + strlen(TOPIC),"%s",msg.str);
 8001688:	4809      	ldr	r0, [pc, #36]	; (80016b0 <Make_MQTT_send_string+0x8c>)
 800168a:	f7fe fdc1 	bl	8000210 <strlen>
 800168e:	4603      	mov	r3, r0
 8001690:	3304      	adds	r3, #4
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	4413      	add	r3, r2
 8001696:	f107 021c 	add.w	r2, r7, #28
 800169a:	4906      	ldr	r1, [pc, #24]	; (80016b4 <Make_MQTT_send_string+0x90>)
 800169c:	4618      	mov	r0, r3
 800169e:	f00b fed1 	bl	800d444 <siprintf>
}
 80016a2:	bf00      	nop
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80016ac:	b004      	add	sp, #16
 80016ae:	4770      	bx	lr
 80016b0:	20000010 	.word	0x20000010
 80016b4:	0800e778 	.word	0x0800e778

080016b8 <String_in_SIM800BuffRx>:
  * @param  exm[] String, that we search in Receive buffer SIM800.
  * @retval Is string in Receive buffer SIM800.
 */

uint8_t String_in_SIM800BuffRx(uint8_t exm[])
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(exm);
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f7fe fda5 	bl	8000210 <strlen>
 80016c6:	4603      	mov	r3, r0
 80016c8:	733b      	strb	r3, [r7, #12]
	uint8_t ans = 0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < BUFF_SIM_SIZE - len; i++)
 80016ce:	2300      	movs	r3, #0
 80016d0:	73bb      	strb	r3, [r7, #14]
 80016d2:	e025      	b.n	8001720 <String_in_SIM800BuffRx+0x68>
	{
		if (SIM800BuffRx[i] == exm[0])
 80016d4:	7bbb      	ldrb	r3, [r7, #14]
 80016d6:	4a19      	ldr	r2, [pc, #100]	; (800173c <String_in_SIM800BuffRx+0x84>)
 80016d8:	5cd2      	ldrb	r2, [r2, r3]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d11b      	bne.n	800171a <String_in_SIM800BuffRx+0x62>
		{
			ans = 1;
 80016e2:	2301      	movs	r3, #1
 80016e4:	73fb      	strb	r3, [r7, #15]
			for (uint8_t k = 0; k < len; k++)
 80016e6:	2300      	movs	r3, #0
 80016e8:	737b      	strb	r3, [r7, #13]
 80016ea:	e00f      	b.n	800170c <String_in_SIM800BuffRx+0x54>
			{
				if (SIM800BuffRx[i+k] != exm[k])
 80016ec:	7bba      	ldrb	r2, [r7, #14]
 80016ee:	7b7b      	ldrb	r3, [r7, #13]
 80016f0:	4413      	add	r3, r2
 80016f2:	4a12      	ldr	r2, [pc, #72]	; (800173c <String_in_SIM800BuffRx+0x84>)
 80016f4:	5cd2      	ldrb	r2, [r2, r3]
 80016f6:	7b7b      	ldrb	r3, [r7, #13]
 80016f8:	6879      	ldr	r1, [r7, #4]
 80016fa:	440b      	add	r3, r1
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d001      	beq.n	8001706 <String_in_SIM800BuffRx+0x4e>
				{
					ans = 0;
 8001702:	2300      	movs	r3, #0
 8001704:	73fb      	strb	r3, [r7, #15]
			for (uint8_t k = 0; k < len; k++)
 8001706:	7b7b      	ldrb	r3, [r7, #13]
 8001708:	3301      	adds	r3, #1
 800170a:	737b      	strb	r3, [r7, #13]
 800170c:	7b7a      	ldrb	r2, [r7, #13]
 800170e:	7b3b      	ldrb	r3, [r7, #12]
 8001710:	429a      	cmp	r2, r3
 8001712:	d3eb      	bcc.n	80016ec <String_in_SIM800BuffRx+0x34>
				}
			}
			if (ans)
 8001714:	7bfb      	ldrb	r3, [r7, #15]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d109      	bne.n	800172e <String_in_SIM800BuffRx+0x76>
	for (uint8_t i = 0; i < BUFF_SIM_SIZE - len; i++)
 800171a:	7bbb      	ldrb	r3, [r7, #14]
 800171c:	3301      	adds	r3, #1
 800171e:	73bb      	strb	r3, [r7, #14]
 8001720:	7bba      	ldrb	r2, [r7, #14]
 8001722:	7b3b      	ldrb	r3, [r7, #12]
 8001724:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8001728:	429a      	cmp	r2, r3
 800172a:	dbd3      	blt.n	80016d4 <String_in_SIM800BuffRx+0x1c>
 800172c:	e000      	b.n	8001730 <String_in_SIM800BuffRx+0x78>
				break;
 800172e:	bf00      	nop
		}
	}
	return ans;
 8001730:	7bfb      	ldrb	r3, [r7, #15]
}
 8001732:	4618      	mov	r0, r3
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20000434 	.word	0x20000434

08001740 <String_in_String>:

uint8_t String_in_String(uint8_t str[], uint8_t size, uint8_t exm[])
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	460b      	mov	r3, r1
 800174a:	607a      	str	r2, [r7, #4]
 800174c:	72fb      	strb	r3, [r7, #11]
	uint8_t len = strlen(exm);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7fe fd5e 	bl	8000210 <strlen>
 8001754:	4603      	mov	r3, r0
 8001756:	753b      	strb	r3, [r7, #20]
	uint8_t ans = 0;
 8001758:	2300      	movs	r3, #0
 800175a:	75fb      	strb	r3, [r7, #23]
	for (uint8_t i = 0; i < size - len; i++)
 800175c:	2300      	movs	r3, #0
 800175e:	75bb      	strb	r3, [r7, #22]
 8001760:	e028      	b.n	80017b4 <String_in_String+0x74>
	{
		if (str[i] == exm[0])
 8001762:	7dbb      	ldrb	r3, [r7, #22]
 8001764:	68fa      	ldr	r2, [r7, #12]
 8001766:	4413      	add	r3, r2
 8001768:	781a      	ldrb	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	429a      	cmp	r2, r3
 8001770:	d11d      	bne.n	80017ae <String_in_String+0x6e>
		{
			ans = 1;
 8001772:	2301      	movs	r3, #1
 8001774:	75fb      	strb	r3, [r7, #23]
			for (uint8_t k = 0; k < len; k++)
 8001776:	2300      	movs	r3, #0
 8001778:	757b      	strb	r3, [r7, #21]
 800177a:	e011      	b.n	80017a0 <String_in_String+0x60>
			{
				if (str[i+k] != exm[k])
 800177c:	7dba      	ldrb	r2, [r7, #22]
 800177e:	7d7b      	ldrb	r3, [r7, #21]
 8001780:	4413      	add	r3, r2
 8001782:	461a      	mov	r2, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	4413      	add	r3, r2
 8001788:	781a      	ldrb	r2, [r3, #0]
 800178a:	7d7b      	ldrb	r3, [r7, #21]
 800178c:	6879      	ldr	r1, [r7, #4]
 800178e:	440b      	add	r3, r1
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	429a      	cmp	r2, r3
 8001794:	d001      	beq.n	800179a <String_in_String+0x5a>
				{
					ans = 0;
 8001796:	2300      	movs	r3, #0
 8001798:	75fb      	strb	r3, [r7, #23]
			for (uint8_t k = 0; k < len; k++)
 800179a:	7d7b      	ldrb	r3, [r7, #21]
 800179c:	3301      	adds	r3, #1
 800179e:	757b      	strb	r3, [r7, #21]
 80017a0:	7d7a      	ldrb	r2, [r7, #21]
 80017a2:	7d3b      	ldrb	r3, [r7, #20]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d3e9      	bcc.n	800177c <String_in_String+0x3c>
				}
			}
			if (ans)
 80017a8:	7dfb      	ldrb	r3, [r7, #23]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d109      	bne.n	80017c2 <String_in_String+0x82>
	for (uint8_t i = 0; i < size - len; i++)
 80017ae:	7dbb      	ldrb	r3, [r7, #22]
 80017b0:	3301      	adds	r3, #1
 80017b2:	75bb      	strb	r3, [r7, #22]
 80017b4:	7dba      	ldrb	r2, [r7, #22]
 80017b6:	7af9      	ldrb	r1, [r7, #11]
 80017b8:	7d3b      	ldrb	r3, [r7, #20]
 80017ba:	1acb      	subs	r3, r1, r3
 80017bc:	429a      	cmp	r2, r3
 80017be:	dbd0      	blt.n	8001762 <String_in_String+0x22>
 80017c0:	e000      	b.n	80017c4 <String_in_String+0x84>
				break;
 80017c2:	bf00      	nop
		}
	}
	return ans;
 80017c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3718      	adds	r7, #24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
	...

080017d0 <USER_UART_IRQHandler>:

void USER_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
	// file stm32f1xx_hal_uart.c
	// comment
	// Set the UART DMA Half transfer complete callback
	// huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt

	if(huart == &huart6) //Determine whether it is serial port 1
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	4a28      	ldr	r2, [pc, #160]	; (800187c <USER_UART_IRQHandler+0xac>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d148      	bne.n	8001872 <USER_UART_IRQHandler+0xa2>
	{
		if(RESET != __HAL_UART_GET_FLAG(&huart6, UART_FLAG_IDLE))   //Judging whether it is idle interruption
 80017e0:	4b26      	ldr	r3, [pc, #152]	; (800187c <USER_UART_IRQHandler+0xac>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0310 	and.w	r3, r3, #16
 80017ea:	2b10      	cmp	r3, #16
 80017ec:	d141      	bne.n	8001872 <USER_UART_IRQHandler+0xa2>
		{
			HAL_UART_DMAStop(&huart6);
 80017ee:	4823      	ldr	r0, [pc, #140]	; (800187c <USER_UART_IRQHandler+0xac>)
 80017f0:	f006 fb90 	bl	8007f14 <HAL_UART_DMAStop>
			__HAL_UART_CLEAR_IDLEFLAG(&huart6); //Clear idle interrupt sign (otherwise it will continue to enter interrupt)
 80017f4:	2300      	movs	r3, #0
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	4b20      	ldr	r3, [pc, #128]	; (800187c <USER_UART_IRQHandler+0xac>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	4b1e      	ldr	r3, [pc, #120]	; (800187c <USER_UART_IRQHandler+0xac>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]
			RX = 1;
 800180a:	4b1d      	ldr	r3, [pc, #116]	; (8001880 <USER_UART_IRQHandler+0xb0>)
 800180c:	2201      	movs	r2, #1
 800180e:	701a      	strb	r2, [r3, #0]
			if (Broker_connect)
 8001810:	4b1c      	ldr	r3, [pc, #112]	; (8001884 <USER_UART_IRQHandler+0xb4>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d02c      	beq.n	8001872 <USER_UART_IRQHandler+0xa2>
			{

				if (String_in_SIM800BuffRx(";;"))
 8001818:	481b      	ldr	r0, [pc, #108]	; (8001888 <USER_UART_IRQHandler+0xb8>)
 800181a:	f7ff ff4d 	bl	80016b8 <String_in_SIM800BuffRx>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d018      	beq.n	8001856 <USER_UART_IRQHandler+0x86>
				{
					memcpy(&(Data_Queue.str), SIM800BuffRx, MESSAGE_TYPE_BUFF_SIZE);
 8001824:	4a19      	ldr	r2, [pc, #100]	; (800188c <USER_UART_IRQHandler+0xbc>)
 8001826:	4b1a      	ldr	r3, [pc, #104]	; (8001890 <USER_UART_IRQHandler+0xc0>)
 8001828:	4610      	mov	r0, r2
 800182a:	4619      	mov	r1, r3
 800182c:	2346      	movs	r3, #70	; 0x46
 800182e:	461a      	mov	r2, r3
 8001830:	f00b fdbe 	bl	800d3b0 <memcpy>
					memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001834:	2264      	movs	r2, #100	; 0x64
 8001836:	2100      	movs	r1, #0
 8001838:	4815      	ldr	r0, [pc, #84]	; (8001890 <USER_UART_IRQHandler+0xc0>)
 800183a:	f00b fdc7 	bl	800d3cc <memset>
					osMessageQueuePut(RxSIM800QueueHandle, &Data_Queue, 0, NULL);
 800183e:	4b15      	ldr	r3, [pc, #84]	; (8001894 <USER_UART_IRQHandler+0xc4>)
 8001840:	6818      	ldr	r0, [r3, #0]
 8001842:	2300      	movs	r3, #0
 8001844:	2200      	movs	r2, #0
 8001846:	4911      	ldr	r1, [pc, #68]	; (800188c <USER_UART_IRQHandler+0xbc>)
 8001848:	f008 f9f8 	bl	8009c3c <osMessageQueuePut>
					HAL_UART_Receive_DMA(&huart6, SIM800BuffRx, BUFF_SIM_SIZE);
 800184c:	2264      	movs	r2, #100	; 0x64
 800184e:	4910      	ldr	r1, [pc, #64]	; (8001890 <USER_UART_IRQHandler+0xc0>)
 8001850:	480a      	ldr	r0, [pc, #40]	; (800187c <USER_UART_IRQHandler+0xac>)
 8001852:	f006 fb2f 	bl	8007eb4 <HAL_UART_Receive_DMA>
				}

				if (!Tech_ans_wait)
 8001856:	4b10      	ldr	r3, [pc, #64]	; (8001898 <USER_UART_IRQHandler+0xc8>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d109      	bne.n	8001872 <USER_UART_IRQHandler+0xa2>
				{
					memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 800185e:	2264      	movs	r2, #100	; 0x64
 8001860:	2100      	movs	r1, #0
 8001862:	480b      	ldr	r0, [pc, #44]	; (8001890 <USER_UART_IRQHandler+0xc0>)
 8001864:	f00b fdb2 	bl	800d3cc <memset>
					HAL_UART_Receive_DMA(&huart6, SIM800BuffRx, BUFF_SIM_SIZE);
 8001868:	2264      	movs	r2, #100	; 0x64
 800186a:	4909      	ldr	r1, [pc, #36]	; (8001890 <USER_UART_IRQHandler+0xc0>)
 800186c:	4803      	ldr	r0, [pc, #12]	; (800187c <USER_UART_IRQHandler+0xac>)
 800186e:	f006 fb21 	bl	8007eb4 <HAL_UART_Receive_DMA>

			}
			//HAL_UART_DMAStop(&huart1);
		}
	}
}
 8001872:	bf00      	nop
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	200001a8 	.word	0x200001a8
 8001880:	200003b3 	.word	0x200003b3
 8001884:	200003b4 	.word	0x200003b4
 8001888:	0800e77c 	.word	0x0800e77c
 800188c:	20000628 	.word	0x20000628
 8001890:	20000434 	.word	0x20000434
 8001894:	20000398 	.word	0x20000398
 8001898:	200003b5 	.word	0x200003b5

0800189c <SIM800_Ans>:
  * @brief  Waiting special answer from SIM800.
  * @param  exm[] String, that we expect.
  * @retval Is special answer in Receive buffer SIM800.
  */
uint8_t SIM800_Ans(uint8_t exm[])
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
	RX = 0;
 80018a4:	4b20      	ldr	r3, [pc, #128]	; (8001928 <SIM800_Ans+0x8c>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	701a      	strb	r2, [r3, #0]
	Tech_ans_wait = 1;
 80018aa:	4b20      	ldr	r3, [pc, #128]	; (800192c <SIM800_Ans+0x90>)
 80018ac:	2201      	movs	r2, #1
 80018ae:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart6, SIM800BuffRx, BUFF_SIM_SIZE);
 80018b0:	2264      	movs	r2, #100	; 0x64
 80018b2:	491f      	ldr	r1, [pc, #124]	; (8001930 <SIM800_Ans+0x94>)
 80018b4:	481f      	ldr	r0, [pc, #124]	; (8001934 <SIM800_Ans+0x98>)
 80018b6:	f006 fafd 	bl	8007eb4 <HAL_UART_Receive_DMA>

	SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // permission counter
 80018ba:	4b1f      	ldr	r3, [pc, #124]	; (8001938 <SIM800_Ans+0x9c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a1e      	ldr	r2, [pc, #120]	; (8001938 <SIM800_Ans+0x9c>)
 80018c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018c4:	6013      	str	r3, [r2, #0]
	DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;   // start counter
 80018c6:	4b1d      	ldr	r3, [pc, #116]	; (800193c <SIM800_Ans+0xa0>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a1c      	ldr	r2, [pc, #112]	; (800193c <SIM800_Ans+0xa0>)
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	6013      	str	r3, [r2, #0]

	uint32_t tacts = HAL_RCC_GetSysClockFreq() / 1000000;
 80018d2:	f004 fe25 	bl	8006520 <HAL_RCC_GetSysClockFreq>
 80018d6:	4603      	mov	r3, r0
 80018d8:	4a19      	ldr	r2, [pc, #100]	; (8001940 <SIM800_Ans+0xa4>)
 80018da:	fba2 2303 	umull	r2, r3, r2, r3
 80018de:	0c9b      	lsrs	r3, r3, #18
 80018e0:	60fb      	str	r3, [r7, #12]
	tacts *= 6000000; //timeout - 6s
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	4a17      	ldr	r2, [pc, #92]	; (8001944 <SIM800_Ans+0xa8>)
 80018e6:	fb02 f303 	mul.w	r3, r2, r3
 80018ea:	60fb      	str	r3, [r7, #12]
	DWT->CYCCNT = 0; // clear counter
 80018ec:	4b13      	ldr	r3, [pc, #76]	; (800193c <SIM800_Ans+0xa0>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	605a      	str	r2, [r3, #4]
	while (RX != 1 && DWT->CYCCNT < tacts) {};
 80018f2:	bf00      	nop
 80018f4:	4b0c      	ldr	r3, [pc, #48]	; (8001928 <SIM800_Ans+0x8c>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d004      	beq.n	8001906 <SIM800_Ans+0x6a>
 80018fc:	4b0f      	ldr	r3, [pc, #60]	; (800193c <SIM800_Ans+0xa0>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	68fa      	ldr	r2, [r7, #12]
 8001902:	429a      	cmp	r2, r3
 8001904:	d8f6      	bhi.n	80018f4 <SIM800_Ans+0x58>
	Tech_ans_wait = 0;
 8001906:	4b09      	ldr	r3, [pc, #36]	; (800192c <SIM800_Ans+0x90>)
 8001908:	2200      	movs	r2, #0
 800190a:	701a      	strb	r2, [r3, #0]
	if (!String_in_SIM800BuffRx(exm))
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f7ff fed3 	bl	80016b8 <String_in_SIM800BuffRx>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d101      	bne.n	800191c <SIM800_Ans+0x80>
	{
		return 0;
 8001918:	2300      	movs	r3, #0
 800191a:	e000      	b.n	800191e <SIM800_Ans+0x82>
	}
	else
	{
		return 1;
 800191c:	2301      	movs	r3, #1
	}
}
 800191e:	4618      	mov	r0, r3
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	200003b3 	.word	0x200003b3
 800192c:	200003b5 	.word	0x200003b5
 8001930:	20000434 	.word	0x20000434
 8001934:	200001a8 	.word	0x200001a8
 8001938:	e000edfc 	.word	0xe000edfc
 800193c:	e0001000 	.word	0xe0001000
 8001940:	431bde83 	.word	0x431bde83
 8001944:	005b8d80 	.word	0x005b8d80

08001948 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if (!Start_SIM800 && Error_init) //if we have problems with SIM800, restart it
 8001950:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <StartDefaultTask+0x60>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d10e      	bne.n	8001976 <StartDefaultTask+0x2e>
 8001958:	4b14      	ldr	r3, [pc, #80]	; (80019ac <StartDefaultTask+0x64>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d00a      	beq.n	8001976 <StartDefaultTask+0x2e>
	  {
		  Error_init = 0;
 8001960:	4b12      	ldr	r3, [pc, #72]	; (80019ac <StartDefaultTask+0x64>)
 8001962:	2200      	movs	r2, #0
 8001964:	701a      	strb	r2, [r3, #0]
		  SIM800StartTaskHandle = osThreadNew(StartSIM800Task, NULL, &SIM800StartTask_attributes);
 8001966:	4a12      	ldr	r2, [pc, #72]	; (80019b0 <StartDefaultTask+0x68>)
 8001968:	2100      	movs	r1, #0
 800196a:	4812      	ldr	r0, [pc, #72]	; (80019b4 <StartDefaultTask+0x6c>)
 800196c:	f007 fd2a 	bl	80093c4 <osThreadNew>
 8001970:	4603      	mov	r3, r0
 8001972:	4a11      	ldr	r2, [pc, #68]	; (80019b8 <StartDefaultTask+0x70>)
 8001974:	6013      	str	r3, [r2, #0]
	  }

	  //show that program works
	  HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 8001976:	2120      	movs	r1, #32
 8001978:	4810      	ldr	r0, [pc, #64]	; (80019bc <StartDefaultTask+0x74>)
 800197a:	f003 fcd4 	bl	8005326 <HAL_GPIO_TogglePin>
	  osDelay(500);
 800197e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001982:	f007 fdde 	bl	8009542 <osDelay>

	  //if we have flag, start getting data
	  if (Get_data && Broker_connect)
 8001986:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <StartDefaultTask+0x78>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d0e0      	beq.n	8001950 <StartDefaultTask+0x8>
 800198e:	4b0d      	ldr	r3, [pc, #52]	; (80019c4 <StartDefaultTask+0x7c>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d0dc      	beq.n	8001950 <StartDefaultTask+0x8>
	  {
		osSemaphoreRelease(SemGetDataHandle);
 8001996:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <StartDefaultTask+0x80>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f008 f896 	bl	8009acc <osSemaphoreRelease>
		Get_data = 0;
 80019a0:	4b07      	ldr	r3, [pc, #28]	; (80019c0 <StartDefaultTask+0x78>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	701a      	strb	r2, [r3, #0]
	  if (!Start_SIM800 && Error_init) //if we have problems with SIM800, restart it
 80019a6:	e7d3      	b.n	8001950 <StartDefaultTask+0x8>
 80019a8:	200003b2 	.word	0x200003b2
 80019ac:	200003b0 	.word	0x200003b0
 80019b0:	0800f1b4 	.word	0x0800f1b4
 80019b4:	0800208d 	.word	0x0800208d
 80019b8:	20000380 	.word	0x20000380
 80019bc:	40020800 	.word	0x40020800
 80019c0:	200003b6 	.word	0x200003b6
 80019c4:	200003b4 	.word	0x200003b4
 80019c8:	200003ac 	.word	0x200003ac

080019cc <StartGetDataTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGetDataTask */
void StartGetDataTask(void *argument)
{
 80019cc:	b5b0      	push	{r4, r5, r7, lr}
 80019ce:	b0a0      	sub	sp, #128	; 0x80
 80019d0:	af04      	add	r7, sp, #16
 80019d2:	6078      	str	r0, [r7, #4]
	uint16_t RS485CRC;
  /* Infinite loop */
  for(;;)
  {
	  // wait semaphore for measuring temperature
	  if (osSemaphoreAcquire(SemGetDataHandle, osWaitForever) == osOK)
 80019d4:	4b98      	ldr	r3, [pc, #608]	; (8001c38 <StartGetDataTask+0x26c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f04f 31ff 	mov.w	r1, #4294967295
 80019dc:	4618      	mov	r0, r3
 80019de:	f008 f823 	bl	8009a28 <osSemaphoreAcquire>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1f5      	bne.n	80019d4 <StartGetDataTask+0x8>
	  {


		  SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // permission counter
 80019e8:	4b94      	ldr	r3, [pc, #592]	; (8001c3c <StartGetDataTask+0x270>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a93      	ldr	r2, [pc, #588]	; (8001c3c <StartGetDataTask+0x270>)
 80019ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019f2:	6013      	str	r3, [r2, #0]
		  DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;   // start counter
 80019f4:	4b92      	ldr	r3, [pc, #584]	; (8001c40 <StartGetDataTask+0x274>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a91      	ldr	r2, [pc, #580]	; (8001c40 <StartGetDataTask+0x274>)
 80019fa:	f043 0301 	orr.w	r3, r3, #1
 80019fe:	6013      	str	r3, [r2, #0]

		  // get temp and humidity
		  // make string
		  RS485_buf[0] = 0x01; //slave address
 8001a00:	4b90      	ldr	r3, [pc, #576]	; (8001c44 <StartGetDataTask+0x278>)
 8001a02:	2201      	movs	r2, #1
 8001a04:	701a      	strb	r2, [r3, #0]
		  RS485_buf[1] = 0x04; //function code
 8001a06:	4b8f      	ldr	r3, [pc, #572]	; (8001c44 <StartGetDataTask+0x278>)
 8001a08:	2204      	movs	r2, #4
 8001a0a:	705a      	strb	r2, [r3, #1]
		  RS485_buf[2] = 0x00; //
 8001a0c:	4b8d      	ldr	r3, [pc, #564]	; (8001c44 <StartGetDataTask+0x278>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	709a      	strb	r2, [r3, #2]
		  RS485_buf[3] = 0x01; // starting address
 8001a12:	4b8c      	ldr	r3, [pc, #560]	; (8001c44 <StartGetDataTask+0x278>)
 8001a14:	2201      	movs	r2, #1
 8001a16:	70da      	strb	r2, [r3, #3]
		  RS485_buf[4] = 0x00; //
 8001a18:	4b8a      	ldr	r3, [pc, #552]	; (8001c44 <StartGetDataTask+0x278>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	711a      	strb	r2, [r3, #4]
		  RS485_buf[5] = 0x02; // count of register
 8001a1e:	4b89      	ldr	r3, [pc, #548]	; (8001c44 <StartGetDataTask+0x278>)
 8001a20:	2202      	movs	r2, #2
 8001a22:	715a      	strb	r2, [r3, #5]

		  // calculate CRC
		  RS485CRC = usMBCRC16(RS485_buf, 6);
 8001a24:	2106      	movs	r1, #6
 8001a26:	4887      	ldr	r0, [pc, #540]	; (8001c44 <StartGetDataTask+0x278>)
 8001a28:	f7ff fa90 	bl	8000f4c <usMBCRC16>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
		  RS485_buf[6] = RS485CRC;
 8001a32:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001a36:	b2da      	uxtb	r2, r3
 8001a38:	4b82      	ldr	r3, [pc, #520]	; (8001c44 <StartGetDataTask+0x278>)
 8001a3a:	719a      	strb	r2, [r3, #6]
		  RS485CRC >>= 8;
 8001a3c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001a40:	0a1b      	lsrs	r3, r3, #8
 8001a42:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
		  RS485_buf[7] = RS485CRC;
 8001a46:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001a4a:	b2da      	uxtb	r2, r3
 8001a4c:	4b7d      	ldr	r3, [pc, #500]	; (8001c44 <StartGetDataTask+0x278>)
 8001a4e:	71da      	strb	r2, [r3, #7]

		  // send request
		  UART2_TX_finish = 0;
 8001a50:	4b7d      	ldr	r3, [pc, #500]	; (8001c48 <StartGetDataTask+0x27c>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
 8001a56:	2201      	movs	r2, #1
 8001a58:	2108      	movs	r1, #8
 8001a5a:	487c      	ldr	r0, [pc, #496]	; (8001c4c <StartGetDataTask+0x280>)
 8001a5c:	f003 fc4a 	bl	80052f4 <HAL_GPIO_WritePin>
		  HAL_UART_Transmit_DMA(&huart2, RS485_buf, 8);
 8001a60:	2208      	movs	r2, #8
 8001a62:	4978      	ldr	r1, [pc, #480]	; (8001c44 <StartGetDataTask+0x278>)
 8001a64:	487a      	ldr	r0, [pc, #488]	; (8001c50 <StartGetDataTask+0x284>)
 8001a66:	f006 f9a7 	bl	8007db8 <HAL_UART_Transmit_DMA>

		  uint32_t tacts = HAL_RCC_GetSysClockFreq() / 1000000;
 8001a6a:	f004 fd59 	bl	8006520 <HAL_RCC_GetSysClockFreq>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	4a78      	ldr	r2, [pc, #480]	; (8001c54 <StartGetDataTask+0x288>)
 8001a72:	fba2 2303 	umull	r2, r3, r2, r3
 8001a76:	0c9b      	lsrs	r3, r3, #18
 8001a78:	667b      	str	r3, [r7, #100]	; 0x64
		  tacts *= 3000000; //timeout - 3s
 8001a7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a7c:	4a76      	ldr	r2, [pc, #472]	; (8001c58 <StartGetDataTask+0x28c>)
 8001a7e:	fb02 f303 	mul.w	r3, r2, r3
 8001a82:	667b      	str	r3, [r7, #100]	; 0x64
		  DWT->CYCCNT = 0; // clear counter
 8001a84:	4b6e      	ldr	r3, [pc, #440]	; (8001c40 <StartGetDataTask+0x274>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	605a      	str	r2, [r3, #4]
		  while (!UART2_TX_finish && DWT->CYCCNT < tacts) {}
 8001a8a:	bf00      	nop
 8001a8c:	4b6e      	ldr	r3, [pc, #440]	; (8001c48 <StartGetDataTask+0x27c>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d104      	bne.n	8001a9e <StartGetDataTask+0xd2>
 8001a94:	4b6a      	ldr	r3, [pc, #424]	; (8001c40 <StartGetDataTask+0x274>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d8f6      	bhi.n	8001a8c <StartGetDataTask+0xc0>

		  // get ans
		  UART2_RX_finish = 0;
 8001a9e:	4b6f      	ldr	r3, [pc, #444]	; (8001c5c <StartGetDataTask+0x290>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	2108      	movs	r1, #8
 8001aa8:	4868      	ldr	r0, [pc, #416]	; (8001c4c <StartGetDataTask+0x280>)
 8001aaa:	f003 fc23 	bl	80052f4 <HAL_GPIO_WritePin>
		  HAL_UART_Receive_DMA(&huart2, RS485_buf, 9);
 8001aae:	2209      	movs	r2, #9
 8001ab0:	4964      	ldr	r1, [pc, #400]	; (8001c44 <StartGetDataTask+0x278>)
 8001ab2:	4867      	ldr	r0, [pc, #412]	; (8001c50 <StartGetDataTask+0x284>)
 8001ab4:	f006 f9fe 	bl	8007eb4 <HAL_UART_Receive_DMA>
		  tacts = HAL_RCC_GetSysClockFreq() / 1000000;
 8001ab8:	f004 fd32 	bl	8006520 <HAL_RCC_GetSysClockFreq>
 8001abc:	4603      	mov	r3, r0
 8001abe:	4a65      	ldr	r2, [pc, #404]	; (8001c54 <StartGetDataTask+0x288>)
 8001ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac4:	0c9b      	lsrs	r3, r3, #18
 8001ac6:	667b      	str	r3, [r7, #100]	; 0x64
		  tacts *= 3000000; //timeout - 3s
 8001ac8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001aca:	4a63      	ldr	r2, [pc, #396]	; (8001c58 <StartGetDataTask+0x28c>)
 8001acc:	fb02 f303 	mul.w	r3, r2, r3
 8001ad0:	667b      	str	r3, [r7, #100]	; 0x64
		  DWT->CYCCNT = 0; // clear counter
 8001ad2:	4b5b      	ldr	r3, [pc, #364]	; (8001c40 <StartGetDataTask+0x274>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	605a      	str	r2, [r3, #4]
		  while (!UART2_RX_finish && DWT->CYCCNT < tacts) {}
 8001ad8:	bf00      	nop
 8001ada:	4b60      	ldr	r3, [pc, #384]	; (8001c5c <StartGetDataTask+0x290>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d104      	bne.n	8001aec <StartGetDataTask+0x120>
 8001ae2:	4b57      	ldr	r3, [pc, #348]	; (8001c40 <StartGetDataTask+0x274>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d8f6      	bhi.n	8001ada <StartGetDataTask+0x10e>

		  // calculate CRC
		  RS485CRC = usMBCRC16(RS485_buf, 7);
 8001aec:	2107      	movs	r1, #7
 8001aee:	4855      	ldr	r0, [pc, #340]	; (8001c44 <StartGetDataTask+0x278>)
 8001af0:	f7ff fa2c 	bl	8000f4c <usMBCRC16>
 8001af4:	4603      	mov	r3, r0
 8001af6:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
		  uint16_t RS485CRC1 = (uint16_t)( RS485_buf[8] << 8 | RS485_buf[7] );
 8001afa:	4b52      	ldr	r3, [pc, #328]	; (8001c44 <StartGetDataTask+0x278>)
 8001afc:	7a1b      	ldrb	r3, [r3, #8]
 8001afe:	021b      	lsls	r3, r3, #8
 8001b00:	b21a      	sxth	r2, r3
 8001b02:	4b50      	ldr	r3, [pc, #320]	; (8001c44 <StartGetDataTask+0x278>)
 8001b04:	79db      	ldrb	r3, [r3, #7]
 8001b06:	b21b      	sxth	r3, r3
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	b21b      	sxth	r3, r3
 8001b0c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
		  uint8_t ok = (RS485CRC1 == RS485CRC) ? 1 : 0;
 8001b10:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8001b14:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	bf0c      	ite	eq
 8001b1c:	2301      	moveq	r3, #1
 8001b1e:	2300      	movne	r3, #0
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61

		  if (ok)
 8001b26:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d026      	beq.n	8001b7c <StartGetDataTask+0x1b0>
		  {
			  temp = (uint16_t)( RS485_buf[3] << 8 | RS485_buf[4] );
 8001b2e:	4b45      	ldr	r3, [pc, #276]	; (8001c44 <StartGetDataTask+0x278>)
 8001b30:	78db      	ldrb	r3, [r3, #3]
 8001b32:	021b      	lsls	r3, r3, #8
 8001b34:	b21a      	sxth	r2, r3
 8001b36:	4b43      	ldr	r3, [pc, #268]	; (8001c44 <StartGetDataTask+0x278>)
 8001b38:	791b      	ldrb	r3, [r3, #4]
 8001b3a:	b21b      	sxth	r3, r3
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	b21b      	sxth	r3, r3
 8001b40:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
			  humidity = (uint16_t)( RS485_buf[5] << 8 | RS485_buf[6] );
 8001b44:	4b3f      	ldr	r3, [pc, #252]	; (8001c44 <StartGetDataTask+0x278>)
 8001b46:	795b      	ldrb	r3, [r3, #5]
 8001b48:	021b      	lsls	r3, r3, #8
 8001b4a:	b21a      	sxth	r2, r3
 8001b4c:	4b3d      	ldr	r3, [pc, #244]	; (8001c44 <StartGetDataTask+0x278>)
 8001b4e:	799b      	ldrb	r3, [r3, #6]
 8001b50:	b21b      	sxth	r3, r3
 8001b52:	4313      	orrs	r3, r2
 8001b54:	b21b      	sxth	r3, r3
 8001b56:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

			  temp /= 10;
 8001b5a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8001b5e:	4a40      	ldr	r2, [pc, #256]	; (8001c60 <StartGetDataTask+0x294>)
 8001b60:	fba2 2303 	umull	r2, r3, r2, r3
 8001b64:	08db      	lsrs	r3, r3, #3
 8001b66:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
			  humidity /= 10;
 8001b6a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8001b6e:	4a3c      	ldr	r2, [pc, #240]	; (8001c60 <StartGetDataTask+0x294>)
 8001b70:	fba2 2303 	umull	r2, r3, r2, r3
 8001b74:	08db      	lsrs	r3, r3, #3
 8001b76:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8001b7a:	e005      	b.n	8001b88 <StartGetDataTask+0x1bc>
		  }
		  else
		  {
			  temp = 146;
 8001b7c:	2392      	movs	r3, #146	; 0x92
 8001b7e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
			  humidity = 146;
 8001b82:	2392      	movs	r3, #146	; 0x92
 8001b84:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
		  }


		  // get smoke and move
		  V = INA226_getBusV(&hi2c1, INA226_ADDRESS);
 8001b88:	2180      	movs	r1, #128	; 0x80
 8001b8a:	4836      	ldr	r0, [pc, #216]	; (8001c64 <StartGetDataTask+0x298>)
 8001b8c:	f7ff f938 	bl	8000e00 <INA226_getBusV>
 8001b90:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		  osDelay(100);
 8001b94:	2064      	movs	r0, #100	; 0x64
 8001b96:	f007 fcd4 	bl	8009542 <osDelay>
		  I = INA226_getCurrent(&hi2c1, INA226_ADDRESS);
 8001b9a:	2180      	movs	r1, #128	; 0x80
 8001b9c:	4831      	ldr	r0, [pc, #196]	; (8001c64 <StartGetDataTask+0x298>)
 8001b9e:	f7ff f957 	bl	8000e50 <INA226_getCurrent>
 8001ba2:	ed87 0a16 	vstr	s0, [r7, #88]	; 0x58
		  osDelay(100);
 8001ba6:	2064      	movs	r0, #100	; 0x64
 8001ba8:	f007 fccb 	bl	8009542 <osDelay>

		  people = (V > (float)6.0) ? 1 : 0;
 8001bac:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001bb0:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8001bb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bbc:	bfcc      	ite	gt
 8001bbe:	2301      	movgt	r3, #1
 8001bc0:	2300      	movle	r3, #0
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		  smoke = (I > (float)0.5) ? 1 : 0;
 8001bc8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001bcc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001bd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd8:	bfcc      	ite	gt
 8001bda:	2301      	movgt	r3, #1
 8001bdc:	2300      	movle	r3, #0
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

		  // get power
		  power = !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);
 8001be4:	2104      	movs	r1, #4
 8001be6:	4819      	ldr	r0, [pc, #100]	; (8001c4c <StartGetDataTask+0x280>)
 8001be8:	f003 fb6c 	bl	80052c4 <HAL_GPIO_ReadPin>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	bf0c      	ite	eq
 8001bf2:	2301      	moveq	r3, #1
 8001bf4:	2300      	movne	r3, #0
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

		  // put string with data to queue
		  sprintf(&(msg.str), "{\"temp\":%d,\"humidity\":%d,\"power\":%d,\"people\":%d,\"smoke\":%d}\r\n\0",temp, humidity, power, people, smoke);
 8001bfc:	f8b7 406e 	ldrh.w	r4, [r7, #110]	; 0x6e
 8001c00:	f8b7 506c 	ldrh.w	r5, [r7, #108]	; 0x6c
 8001c04:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001c08:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8001c0c:	f897 1056 	ldrb.w	r1, [r7, #86]	; 0x56
 8001c10:	f107 000c 	add.w	r0, r7, #12
 8001c14:	9102      	str	r1, [sp, #8]
 8001c16:	9201      	str	r2, [sp, #4]
 8001c18:	9300      	str	r3, [sp, #0]
 8001c1a:	462b      	mov	r3, r5
 8001c1c:	4622      	mov	r2, r4
 8001c1e:	4912      	ldr	r1, [pc, #72]	; (8001c68 <StartGetDataTask+0x29c>)
 8001c20:	f00b fc10 	bl	800d444 <siprintf>
		  osMessageQueuePut(SIM800SendQueueHandle, &msg, 0, osWaitForever);
 8001c24:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <StartGetDataTask+0x2a0>)
 8001c26:	6818      	ldr	r0, [r3, #0]
 8001c28:	f107 010c 	add.w	r1, r7, #12
 8001c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c30:	2200      	movs	r2, #0
 8001c32:	f008 f803 	bl	8009c3c <osMessageQueuePut>
	  if (osSemaphoreAcquire(SemGetDataHandle, osWaitForever) == osOK)
 8001c36:	e6cd      	b.n	80019d4 <StartGetDataTask+0x8>
 8001c38:	200003ac 	.word	0x200003ac
 8001c3c:	e000edfc 	.word	0xe000edfc
 8001c40:	e0001000 	.word	0xe0001000
 8001c44:	200003bc 	.word	0x200003bc
 8001c48:	200003b7 	.word	0x200003b7
 8001c4c:	40020800 	.word	0x40020800
 8001c50:	20000164 	.word	0x20000164
 8001c54:	431bde83 	.word	0x431bde83
 8001c58:	002dc6c0 	.word	0x002dc6c0
 8001c5c:	200003b8 	.word	0x200003b8
 8001c60:	cccccccd 	.word	0xcccccccd
 8001c64:	200000b8 	.word	0x200000b8
 8001c68:	0800e780 	.word	0x0800e780
 8001c6c:	20000394 	.word	0x20000394

08001c70 <StartDebugTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDebugTask */
void StartDebugTask(void *argument)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b094      	sub	sp, #80	; 0x50
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDebugTask */
	message_type msg;
  /* Infinite loop */
  for(;;)
  {
	  if (osMessageQueueGet(debugQueueHandle, &msg, 0, osWaitForever) == osOK)
 8001c78:	4b04      	ldr	r3, [pc, #16]	; (8001c8c <StartDebugTask+0x1c>)
 8001c7a:	6818      	ldr	r0, [r3, #0]
 8001c7c:	f107 0108 	add.w	r1, r7, #8
 8001c80:	f04f 33ff 	mov.w	r3, #4294967295
 8001c84:	2200      	movs	r2, #0
 8001c86:	f008 f839 	bl	8009cfc <osMessageQueueGet>
 8001c8a:	e7f5      	b.n	8001c78 <StartDebugTask+0x8>
 8001c8c:	20000390 	.word	0x20000390

08001c90 <StartSIM800SendTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSIM800SendTask */
void StartSIM800SendTask(void *argument)
{
 8001c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c92:	b0bf      	sub	sp, #252	; 0xfc
 8001c94:	af10      	add	r7, sp, #64	; 0x40
 8001c96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSIM800SendTask */
	message_type msg;

	//+ message_len(1 byte) + topic_len(2 bytes) + topic + message
    uint8_t send_MQTT_message[BUFF_SIM_SIZE] = {};
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	f107 0310 	add.w	r3, r7, #16
 8001ca0:	2260      	movs	r2, #96	; 0x60
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f00b fb91 	bl	800d3cc <memset>
    uint8_t ans;
  /* Infinite loop */
  for(;;)
  {
	  if (osMessageQueueGet(SIM800SendQueueHandle, &msg, 0, osWaitForever) == osOK)
 8001caa:	4b50      	ldr	r3, [pc, #320]	; (8001dec <StartSIM800SendTask+0x15c>)
 8001cac:	6818      	ldr	r0, [r3, #0]
 8001cae:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8001cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f008 f820 	bl	8009cfc <osMessageQueueGet>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1f3      	bne.n	8001caa <StartSIM800SendTask+0x1a>
	  {
		  if (osMutexAcquire(UART1MutexHandle, osWaitForever) == osOK)
 8001cc2:	4b4b      	ldr	r3, [pc, #300]	; (8001df0 <StartSIM800SendTask+0x160>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f04f 31ff 	mov.w	r1, #4294967295
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f007 fd9a 	bl	8009804 <osMutexAcquire>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1e9      	bne.n	8001caa <StartSIM800SendTask+0x1a>
		  {
			  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 8001cd6:	4b47      	ldr	r3, [pc, #284]	; (8001df4 <StartSIM800SendTask+0x164>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68da      	ldr	r2, [r3, #12]
 8001cdc:	4b45      	ldr	r3, [pc, #276]	; (8001df4 <StartSIM800SendTask+0x164>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f042 0210 	orr.w	r2, r2, #16
 8001ce4:	60da      	str	r2, [r3, #12]

			  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001ce6:	2264      	movs	r2, #100	; 0x64
 8001ce8:	2100      	movs	r1, #0
 8001cea:	4843      	ldr	r0, [pc, #268]	; (8001df8 <StartSIM800SendTask+0x168>)
 8001cec:	f00b fb6e 	bl	800d3cc <memset>
			  sprintf(send_MQTT_message,"AT+CIPSEND=%d\r\n\0",strlen(msg.str) + strlen(TOPIC) + 4);
 8001cf0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7fe fa8b 	bl	8000210 <strlen>
 8001cfa:	4604      	mov	r4, r0
 8001cfc:	483f      	ldr	r0, [pc, #252]	; (8001dfc <StartSIM800SendTask+0x16c>)
 8001cfe:	f7fe fa87 	bl	8000210 <strlen>
 8001d02:	4603      	mov	r3, r0
 8001d04:	4423      	add	r3, r4
 8001d06:	1d1a      	adds	r2, r3, #4
 8001d08:	f107 030c 	add.w	r3, r7, #12
 8001d0c:	493c      	ldr	r1, [pc, #240]	; (8001e00 <StartSIM800SendTask+0x170>)
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f00b fb98 	bl	800d444 <siprintf>
			  HAL_UART_Transmit_DMA(&huart6, send_MQTT_message, strlen(send_MQTT_message));
 8001d14:	f107 030c 	add.w	r3, r7, #12
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7fe fa79 	bl	8000210 <strlen>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	f107 030c 	add.w	r3, r7, #12
 8001d26:	4619      	mov	r1, r3
 8001d28:	4832      	ldr	r0, [pc, #200]	; (8001df4 <StartSIM800SendTask+0x164>)
 8001d2a:	f006 f845 	bl	8007db8 <HAL_UART_Transmit_DMA>
			  ans = SIM800_Ans(">");
 8001d2e:	4835      	ldr	r0, [pc, #212]	; (8001e04 <StartSIM800SendTask+0x174>)
 8001d30:	f7ff fdb4 	bl	800189c <SIM800_Ans>
 8001d34:	4603      	mov	r3, r0
 8001d36:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
			  if (!ans)
			  {

			  }
			  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001d3a:	2264      	movs	r2, #100	; 0x64
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	482e      	ldr	r0, [pc, #184]	; (8001df8 <StartSIM800SendTask+0x168>)
 8001d40:	f00b fb44 	bl	800d3cc <memset>
			  osDelay(100);
 8001d44:	2064      	movs	r0, #100	; 0x64
 8001d46:	f007 fbfc 	bl	8009542 <osDelay>

			  //make string for transmit
			  Make_MQTT_send_string(send_MQTT_message, msg);
 8001d4a:	f107 060c 	add.w	r6, r7, #12
 8001d4e:	466c      	mov	r4, sp
 8001d50:	f107 057c 	add.w	r5, r7, #124	; 0x7c
 8001d54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d60:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d64:	c403      	stmia	r4!, {r0, r1}
 8001d66:	8022      	strh	r2, [r4, #0]
 8001d68:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001d6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d6e:	4630      	mov	r0, r6
 8001d70:	f7ff fc58 	bl	8001624 <Make_MQTT_send_string>
			  HAL_UART_Transmit_DMA(&huart6, send_MQTT_message, strlen(msg.str) + strlen(TOPIC) + 4);
 8001d74:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7fe fa49 	bl	8000210 <strlen>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	b29c      	uxth	r4, r3
 8001d82:	481e      	ldr	r0, [pc, #120]	; (8001dfc <StartSIM800SendTask+0x16c>)
 8001d84:	f7fe fa44 	bl	8000210 <strlen>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	4423      	add	r3, r4
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	3304      	adds	r3, #4
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	f107 030c 	add.w	r3, r7, #12
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4816      	ldr	r0, [pc, #88]	; (8001df4 <StartSIM800SendTask+0x164>)
 8001d9c:	f006 f80c 	bl	8007db8 <HAL_UART_Transmit_DMA>

			  ans = SIM800_Ans("\x30"); //our transmited message
 8001da0:	4819      	ldr	r0, [pc, #100]	; (8001e08 <StartSIM800SendTask+0x178>)
 8001da2:	f7ff fd7b 	bl	800189c <SIM800_Ans>
 8001da6:	4603      	mov	r3, r0
 8001da8:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
			  if (!ans)
 8001dac:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d10a      	bne.n	8001dca <StartSIM800SendTask+0x13a>
			  {
				  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001db4:	2264      	movs	r2, #100	; 0x64
 8001db6:	2100      	movs	r1, #0
 8001db8:	480f      	ldr	r0, [pc, #60]	; (8001df8 <StartSIM800SendTask+0x168>)
 8001dba:	f00b fb07 	bl	800d3cc <memset>
				  ans = SIM800_Ans("\x30"); //our transmited message
 8001dbe:	4812      	ldr	r0, [pc, #72]	; (8001e08 <StartSIM800SendTask+0x178>)
 8001dc0:	f7ff fd6c 	bl	800189c <SIM800_Ans>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
				  {

				  }
			  }

			  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001dca:	2264      	movs	r2, #100	; 0x64
 8001dcc:	2100      	movs	r1, #0
 8001dce:	480a      	ldr	r0, [pc, #40]	; (8001df8 <StartSIM800SendTask+0x168>)
 8001dd0:	f00b fafc 	bl	800d3cc <memset>
			  HAL_UART_Receive_DMA(&huart6, SIM800BuffRx, BUFF_SIM_SIZE);
 8001dd4:	2264      	movs	r2, #100	; 0x64
 8001dd6:	4908      	ldr	r1, [pc, #32]	; (8001df8 <StartSIM800SendTask+0x168>)
 8001dd8:	4806      	ldr	r0, [pc, #24]	; (8001df4 <StartSIM800SendTask+0x164>)
 8001dda:	f006 f86b 	bl	8007eb4 <HAL_UART_Receive_DMA>
			  osMutexRelease(UART1MutexHandle); //release UART for SIM800
 8001dde:	4b04      	ldr	r3, [pc, #16]	; (8001df0 <StartSIM800SendTask+0x160>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f007 fd59 	bl	800989a <osMutexRelease>
	  if (osMessageQueueGet(SIM800SendQueueHandle, &msg, 0, osWaitForever) == osOK)
 8001de8:	e75f      	b.n	8001caa <StartSIM800SendTask+0x1a>
 8001dea:	bf00      	nop
 8001dec:	20000394 	.word	0x20000394
 8001df0:	200003a4 	.word	0x200003a4
 8001df4:	200001a8 	.word	0x200001a8
 8001df8:	20000434 	.word	0x20000434
 8001dfc:	20000010 	.word	0x20000010
 8001e00:	0800e7c0 	.word	0x0800e7c0
 8001e04:	0800e7d4 	.word	0x0800e7d4
 8001e08:	0800e7d8 	.word	0x0800e7d8

08001e0c <PINGStartTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_PINGStartTask */
void PINGStartTask(void *argument)
{
 8001e0c:	b5b0      	push	{r4, r5, r7, lr}
 8001e0e:	b0ae      	sub	sp, #184	; 0xb8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PINGStartTask */
	message_type msg;
	uint8_t send_MQTT_message[BUFF_SIM_SIZE] = {};
 8001e14:	2300      	movs	r3, #0
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	f107 0310 	add.w	r3, r7, #16
 8001e1c:	2260      	movs	r2, #96	; 0x60
 8001e1e:	2100      	movs	r1, #0
 8001e20:	4618      	mov	r0, r3
 8001e22:	f00b fad3 	bl	800d3cc <memset>
	uint8_t ans = 0;
 8001e26:	2300      	movs	r3, #0
 8001e28:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
  /* Infinite loop */
  for(;;)
  {
	  if (osSemaphoreAcquire(PINGSemHandle, osWaitForever) == osOK)
 8001e2c:	4b85      	ldr	r3, [pc, #532]	; (8002044 <PINGStartTask+0x238>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f04f 31ff 	mov.w	r1, #4294967295
 8001e34:	4618      	mov	r0, r3
 8001e36:	f007 fdf7 	bl	8009a28 <osSemaphoreAcquire>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d1f5      	bne.n	8001e2c <PINGStartTask+0x20>
	  {
		  if (osMutexAcquire(UART1MutexHandle, osWaitForever) == osOK)
 8001e40:	4b81      	ldr	r3, [pc, #516]	; (8002048 <PINGStartTask+0x23c>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f04f 31ff 	mov.w	r1, #4294967295
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f007 fcdb 	bl	8009804 <osMutexAcquire>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1eb      	bne.n	8001e2c <PINGStartTask+0x20>
		  {

			  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001e54:	2264      	movs	r2, #100	; 0x64
 8001e56:	2100      	movs	r1, #0
 8001e58:	487c      	ldr	r0, [pc, #496]	; (800204c <PINGStartTask+0x240>)
 8001e5a:	f00b fab7 	bl	800d3cc <memset>
			  sprintf(send_MQTT_message,"AT+CIPSEND=2\r\n\0");
 8001e5e:	f107 030c 	add.w	r3, r7, #12
 8001e62:	497b      	ldr	r1, [pc, #492]	; (8002050 <PINGStartTask+0x244>)
 8001e64:	4618      	mov	r0, r3
 8001e66:	f00b faed 	bl	800d444 <siprintf>
			  HAL_UART_Transmit_DMA(&huart6, send_MQTT_message, strlen(send_MQTT_message));
 8001e6a:	f107 030c 	add.w	r3, r7, #12
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7fe f9ce 	bl	8000210 <strlen>
 8001e74:	4603      	mov	r3, r0
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	f107 030c 	add.w	r3, r7, #12
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4875      	ldr	r0, [pc, #468]	; (8002054 <PINGStartTask+0x248>)
 8001e80:	f005 ff9a 	bl	8007db8 <HAL_UART_Transmit_DMA>
			  ans = SIM800_Ans(">");
 8001e84:	4874      	ldr	r0, [pc, #464]	; (8002058 <PINGStartTask+0x24c>)
 8001e86:	f7ff fd09 	bl	800189c <SIM800_Ans>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
			  if (!ans)
 8001e90:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d12a      	bne.n	8001eee <PINGStartTask+0xe2>
			  {
				  strcpy(&(msg.str), "FAILE_send_PING1\r\n\0");
 8001e98:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001e9c:	4a6f      	ldr	r2, [pc, #444]	; (800205c <PINGStartTask+0x250>)
 8001e9e:	461c      	mov	r4, r3
 8001ea0:	4615      	mov	r5, r2
 8001ea2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ea4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ea6:	682b      	ldr	r3, [r5, #0]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	8022      	strh	r2, [r4, #0]
 8001eac:	3402      	adds	r4, #2
 8001eae:	0c1b      	lsrs	r3, r3, #16
 8001eb0:	7023      	strb	r3, [r4, #0]
				  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001eb2:	4b6b      	ldr	r3, [pc, #428]	; (8002060 <PINGStartTask+0x254>)
 8001eb4:	6818      	ldr	r0, [r3, #0]
 8001eb6:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8001eba:	f04f 33ff 	mov.w	r3, #4294967295
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f007 febc 	bl	8009c3c <osMessageQueuePut>
				  Error_ping = 1;
 8001ec4:	4b67      	ldr	r3, [pc, #412]	; (8002064 <PINGStartTask+0x258>)
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	701a      	strb	r2, [r3, #0]
				  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1); //signal for error
				  osMutexRelease(UART1MutexHandle); //release UART for SIM800
 8001eca:	4b5f      	ldr	r3, [pc, #380]	; (8002048 <PINGStartTask+0x23c>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f007 fce3 	bl	800989a <osMutexRelease>
				  //start task to try reconnect
				  MQTTConnectTaskHandle = osThreadNew(StartMQTTConnectTask, NULL, &MQTTConnectTask_attributes);
 8001ed4:	4a64      	ldr	r2, [pc, #400]	; (8002068 <PINGStartTask+0x25c>)
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	4864      	ldr	r0, [pc, #400]	; (800206c <PINGStartTask+0x260>)
 8001eda:	f007 fa73 	bl	80093c4 <osThreadNew>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	4a63      	ldr	r2, [pc, #396]	; (8002070 <PINGStartTask+0x264>)
 8001ee2:	6013      	str	r3, [r2, #0]
				  //delete this thread
				  osThreadTerminate(PINGTaskHandle);
 8001ee4:	4b63      	ldr	r3, [pc, #396]	; (8002074 <PINGStartTask+0x268>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f007 fafd 	bl	80094e8 <osThreadTerminate>
			  }
			  osDelay(200);
 8001eee:	20c8      	movs	r0, #200	; 0xc8
 8001ef0:	f007 fb27 	bl	8009542 <osDelay>
			  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001ef4:	2264      	movs	r2, #100	; 0x64
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	4854      	ldr	r0, [pc, #336]	; (800204c <PINGStartTask+0x240>)
 8001efa:	f00b fa67 	bl	800d3cc <memset>
			  HAL_UART_Transmit_DMA(&huart6, PING, 2);
 8001efe:	2202      	movs	r2, #2
 8001f00:	495d      	ldr	r1, [pc, #372]	; (8002078 <PINGStartTask+0x26c>)
 8001f02:	4854      	ldr	r0, [pc, #336]	; (8002054 <PINGStartTask+0x248>)
 8001f04:	f005 ff58 	bl	8007db8 <HAL_UART_Transmit_DMA>
			  ans = SIM800_Ans(PING);
 8001f08:	485b      	ldr	r0, [pc, #364]	; (8002078 <PINGStartTask+0x26c>)
 8001f0a:	f7ff fcc7 	bl	800189c <SIM800_Ans>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
			  if (!ans)
 8001f14:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d12a      	bne.n	8001f72 <PINGStartTask+0x166>
			  {
				  strcpy(&(msg.str), "FAILE_send_PING2\r\n\0");
 8001f1c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001f20:	4a56      	ldr	r2, [pc, #344]	; (800207c <PINGStartTask+0x270>)
 8001f22:	461c      	mov	r4, r3
 8001f24:	4615      	mov	r5, r2
 8001f26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f2a:	682b      	ldr	r3, [r5, #0]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	8022      	strh	r2, [r4, #0]
 8001f30:	3402      	adds	r4, #2
 8001f32:	0c1b      	lsrs	r3, r3, #16
 8001f34:	7023      	strb	r3, [r4, #0]
				  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001f36:	4b4a      	ldr	r3, [pc, #296]	; (8002060 <PINGStartTask+0x254>)
 8001f38:	6818      	ldr	r0, [r3, #0]
 8001f3a:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8001f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f42:	2200      	movs	r2, #0
 8001f44:	f007 fe7a 	bl	8009c3c <osMessageQueuePut>
				  Error_ping = 1;
 8001f48:	4b46      	ldr	r3, [pc, #280]	; (8002064 <PINGStartTask+0x258>)
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	701a      	strb	r2, [r3, #0]
				  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
				  osMutexRelease(UART1MutexHandle);
 8001f4e:	4b3e      	ldr	r3, [pc, #248]	; (8002048 <PINGStartTask+0x23c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f007 fca1 	bl	800989a <osMutexRelease>
				  MQTTConnectTaskHandle = osThreadNew(StartMQTTConnectTask, NULL, &MQTTConnectTask_attributes);
 8001f58:	4a43      	ldr	r2, [pc, #268]	; (8002068 <PINGStartTask+0x25c>)
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	4843      	ldr	r0, [pc, #268]	; (800206c <PINGStartTask+0x260>)
 8001f5e:	f007 fa31 	bl	80093c4 <osThreadNew>
 8001f62:	4603      	mov	r3, r0
 8001f64:	4a42      	ldr	r2, [pc, #264]	; (8002070 <PINGStartTask+0x264>)
 8001f66:	6013      	str	r3, [r2, #0]
				  osThreadTerminate(PINGTaskHandle);
 8001f68:	4b42      	ldr	r3, [pc, #264]	; (8002074 <PINGStartTask+0x268>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f007 fabb 	bl	80094e8 <osThreadTerminate>
			  }
			  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001f72:	2264      	movs	r2, #100	; 0x64
 8001f74:	2100      	movs	r1, #0
 8001f76:	4835      	ldr	r0, [pc, #212]	; (800204c <PINGStartTask+0x240>)
 8001f78:	f00b fa28 	bl	800d3cc <memset>
			  ans = SIM800_Ans(PING_ASK);
 8001f7c:	4840      	ldr	r0, [pc, #256]	; (8002080 <PINGStartTask+0x274>)
 8001f7e:	f7ff fc8d 	bl	800189c <SIM800_Ans>
 8001f82:	4603      	mov	r3, r0
 8001f84:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
			  if (!ans)
 8001f88:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d139      	bne.n	8002004 <PINGStartTask+0x1f8>
			  {
				  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001f90:	2264      	movs	r2, #100	; 0x64
 8001f92:	2100      	movs	r1, #0
 8001f94:	482d      	ldr	r0, [pc, #180]	; (800204c <PINGStartTask+0x240>)
 8001f96:	f00b fa19 	bl	800d3cc <memset>
				  ans = SIM800_Ans(PING_ASK);
 8001f9a:	4839      	ldr	r0, [pc, #228]	; (8002080 <PINGStartTask+0x274>)
 8001f9c:	f7ff fc7e 	bl	800189c <SIM800_Ans>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
				  if (!ans)
 8001fa6:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d12a      	bne.n	8002004 <PINGStartTask+0x1f8>
				  {
					  strcpy(&(msg.str), "FAILE_send_PING3\r\n\0");
 8001fae:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001fb2:	4a34      	ldr	r2, [pc, #208]	; (8002084 <PINGStartTask+0x278>)
 8001fb4:	461c      	mov	r4, r3
 8001fb6:	4615      	mov	r5, r2
 8001fb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fbc:	682b      	ldr	r3, [r5, #0]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	8022      	strh	r2, [r4, #0]
 8001fc2:	3402      	adds	r4, #2
 8001fc4:	0c1b      	lsrs	r3, r3, #16
 8001fc6:	7023      	strb	r3, [r4, #0]
					  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001fc8:	4b25      	ldr	r3, [pc, #148]	; (8002060 <PINGStartTask+0x254>)
 8001fca:	6818      	ldr	r0, [r3, #0]
 8001fcc:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8001fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f007 fe31 	bl	8009c3c <osMessageQueuePut>
					  Error_ping = 1;
 8001fda:	4b22      	ldr	r3, [pc, #136]	; (8002064 <PINGStartTask+0x258>)
 8001fdc:	2201      	movs	r2, #1
 8001fde:	701a      	strb	r2, [r3, #0]
					  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
					  osMutexRelease(UART1MutexHandle);
 8001fe0:	4b19      	ldr	r3, [pc, #100]	; (8002048 <PINGStartTask+0x23c>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f007 fc58 	bl	800989a <osMutexRelease>
					  MQTTConnectTaskHandle = osThreadNew(StartMQTTConnectTask, NULL, &MQTTConnectTask_attributes);
 8001fea:	4a1f      	ldr	r2, [pc, #124]	; (8002068 <PINGStartTask+0x25c>)
 8001fec:	2100      	movs	r1, #0
 8001fee:	481f      	ldr	r0, [pc, #124]	; (800206c <PINGStartTask+0x260>)
 8001ff0:	f007 f9e8 	bl	80093c4 <osThreadNew>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	4a1e      	ldr	r2, [pc, #120]	; (8002070 <PINGStartTask+0x264>)
 8001ff8:	6013      	str	r3, [r2, #0]
					  osThreadTerminate(PINGTaskHandle);
 8001ffa:	4b1e      	ldr	r3, [pc, #120]	; (8002074 <PINGStartTask+0x268>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f007 fa72 	bl	80094e8 <osThreadTerminate>
				  }
			  }

			  strcpy(&(msg.str), "PING_SEND_OK\r\n\0");
 8002004:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002008:	4a1f      	ldr	r2, [pc, #124]	; (8002088 <PINGStartTask+0x27c>)
 800200a:	461c      	mov	r4, r3
 800200c:	4613      	mov	r3, r2
 800200e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002010:	c407      	stmia	r4!, {r0, r1, r2}
 8002012:	8023      	strh	r3, [r4, #0]
 8002014:	3402      	adds	r4, #2
 8002016:	0c1b      	lsrs	r3, r3, #16
 8002018:	7023      	strb	r3, [r4, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 800201a:	4b11      	ldr	r3, [pc, #68]	; (8002060 <PINGStartTask+0x254>)
 800201c:	6818      	ldr	r0, [r3, #0]
 800201e:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8002022:	f04f 33ff 	mov.w	r3, #4294967295
 8002026:	2200      	movs	r2, #0
 8002028:	f007 fe08 	bl	8009c3c <osMessageQueuePut>

			  HAL_UART_Receive_DMA(&huart6, SIM800BuffRx, BUFF_SIM_SIZE);
 800202c:	2264      	movs	r2, #100	; 0x64
 800202e:	4907      	ldr	r1, [pc, #28]	; (800204c <PINGStartTask+0x240>)
 8002030:	4808      	ldr	r0, [pc, #32]	; (8002054 <PINGStartTask+0x248>)
 8002032:	f005 ff3f 	bl	8007eb4 <HAL_UART_Receive_DMA>
			  osMutexRelease(UART1MutexHandle);
 8002036:	4b04      	ldr	r3, [pc, #16]	; (8002048 <PINGStartTask+0x23c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f007 fc2d 	bl	800989a <osMutexRelease>
	  if (osSemaphoreAcquire(PINGSemHandle, osWaitForever) == osOK)
 8002040:	e6f4      	b.n	8001e2c <PINGStartTask+0x20>
 8002042:	bf00      	nop
 8002044:	200003a8 	.word	0x200003a8
 8002048:	200003a4 	.word	0x200003a4
 800204c:	20000434 	.word	0x20000434
 8002050:	0800e7dc 	.word	0x0800e7dc
 8002054:	200001a8 	.word	0x200001a8
 8002058:	0800e7d4 	.word	0x0800e7d4
 800205c:	0800e7ec 	.word	0x0800e7ec
 8002060:	20000390 	.word	0x20000390
 8002064:	200003b1 	.word	0x200003b1
 8002068:	0800f1d8 	.word	0x0800f1d8
 800206c:	080025f5 	.word	0x080025f5
 8002070:	20000384 	.word	0x20000384
 8002074:	2000037c 	.word	0x2000037c
 8002078:	20000000 	.word	0x20000000
 800207c:	0800e800 	.word	0x0800e800
 8002080:	20000004 	.word	0x20000004
 8002084:	0800e814 	.word	0x0800e814
 8002088:	0800e828 	.word	0x0800e828

0800208c <StartSIM800Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSIM800Task */
void StartSIM800Task(void *argument)
{
 800208c:	b5b0      	push	{r4, r5, r7, lr}
 800208e:	b094      	sub	sp, #80	; 0x50
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSIM800Task */

	message_type msg; // string for debug message
	uint8_t ans = 0; //is one string in another
 8002094:	2300      	movs	r3, #0
 8002096:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  /* Infinite loop */
  for(;;)
  {
	  Error_init = 0;
 800209a:	4bb2      	ldr	r3, [pc, #712]	; (8002364 <StartSIM800Task+0x2d8>)
 800209c:	2200      	movs	r2, #0
 800209e:	701a      	strb	r2, [r3, #0]
	  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 80020a0:	4bb1      	ldr	r3, [pc, #708]	; (8002368 <StartSIM800Task+0x2dc>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68da      	ldr	r2, [r3, #12]
 80020a6:	4bb0      	ldr	r3, [pc, #704]	; (8002368 <StartSIM800Task+0x2dc>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f042 0210 	orr.w	r2, r2, #16
 80020ae:	60da      	str	r2, [r3, #12]

start:

		//Hardware reset of module

		HAL_GPIO_WritePin(SIM_START_GPIO_Port, SIM_START_Pin, RESET);
 80020b0:	2200      	movs	r2, #0
 80020b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020b6:	48ad      	ldr	r0, [pc, #692]	; (800236c <StartSIM800Task+0x2e0>)
 80020b8:	f003 f91c 	bl	80052f4 <HAL_GPIO_WritePin>
		osDelay(500);
 80020bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80020c0:	f007 fa3f 	bl	8009542 <osDelay>
		HAL_GPIO_WritePin(SIM_START_GPIO_Port, SIM_START_Pin, SET);
 80020c4:	2201      	movs	r2, #1
 80020c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020ca:	48a8      	ldr	r0, [pc, #672]	; (800236c <StartSIM800Task+0x2e0>)
 80020cc:	f003 f912 	bl	80052f4 <HAL_GPIO_WritePin>
		osDelay(8000);
 80020d0:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80020d4:	f007 fa35 	bl	8009542 <osDelay>

	  	//send initializing data

	  	sprintf(str_SIM800,"ATZ\r\n\0");
 80020d8:	49a5      	ldr	r1, [pc, #660]	; (8002370 <StartSIM800Task+0x2e4>)
 80020da:	48a6      	ldr	r0, [pc, #664]	; (8002374 <StartSIM800Task+0x2e8>)
 80020dc:	f00b f9b2 	bl	800d444 <siprintf>
	  	HAL_UART_Transmit_IT(&huart6, str_SIM800, strlen(str_SIM800));
 80020e0:	48a4      	ldr	r0, [pc, #656]	; (8002374 <StartSIM800Task+0x2e8>)
 80020e2:	f7fe f895 	bl	8000210 <strlen>
 80020e6:	4603      	mov	r3, r0
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	461a      	mov	r2, r3
 80020ec:	49a1      	ldr	r1, [pc, #644]	; (8002374 <StartSIM800Task+0x2e8>)
 80020ee:	489e      	ldr	r0, [pc, #632]	; (8002368 <StartSIM800Task+0x2dc>)
 80020f0:	f005 fe1d 	bl	8007d2e <HAL_UART_Transmit_IT>
	  	osDelay(6000);
 80020f4:	f241 7070 	movw	r0, #6000	; 0x1770
 80020f8:	f007 fa23 	bl	8009542 <osDelay>

	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE); //clear receive buffer
 80020fc:	2264      	movs	r2, #100	; 0x64
 80020fe:	2100      	movs	r1, #0
 8002100:	489d      	ldr	r0, [pc, #628]	; (8002378 <StartSIM800Task+0x2ec>)
 8002102:	f00b f963 	bl	800d3cc <memset>
	  	sprintf(str_SIM800,"AT+CIPMODE=0\r\n\0"); //make string for send
 8002106:	499d      	ldr	r1, [pc, #628]	; (800237c <StartSIM800Task+0x2f0>)
 8002108:	489a      	ldr	r0, [pc, #616]	; (8002374 <StartSIM800Task+0x2e8>)
 800210a:	f00b f99b 	bl	800d444 <siprintf>
	  	HAL_UART_Transmit_IT(&huart6, str_SIM800, strlen(str_SIM800)); //send string
 800210e:	4899      	ldr	r0, [pc, #612]	; (8002374 <StartSIM800Task+0x2e8>)
 8002110:	f7fe f87e 	bl	8000210 <strlen>
 8002114:	4603      	mov	r3, r0
 8002116:	b29b      	uxth	r3, r3
 8002118:	461a      	mov	r2, r3
 800211a:	4996      	ldr	r1, [pc, #600]	; (8002374 <StartSIM800Task+0x2e8>)
 800211c:	4892      	ldr	r0, [pc, #584]	; (8002368 <StartSIM800Task+0x2dc>)
 800211e:	f005 fe06 	bl	8007d2e <HAL_UART_Transmit_IT>
	  	ans = SIM800_Ans("OK"); //waiting answer, that we transmit in function
 8002122:	4897      	ldr	r0, [pc, #604]	; (8002380 <StartSIM800Task+0x2f4>)
 8002124:	f7ff fbba 	bl	800189c <SIM800_Ans>
 8002128:	4603      	mov	r3, r0
 800212a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  	if (!ans)
 800212e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002132:	2b00      	cmp	r3, #0
 8002134:	d111      	bne.n	800215a <StartSIM800Task+0xce>
	  	{
	  		strcpy(&(msg.str), "FAILE_CIPMODE\r\n\0");
 8002136:	f107 0308 	add.w	r3, r7, #8
 800213a:	4a92      	ldr	r2, [pc, #584]	; (8002384 <StartSIM800Task+0x2f8>)
 800213c:	461c      	mov	r4, r3
 800213e:	4613      	mov	r3, r2
 8002140:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002142:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  		osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8002146:	4b90      	ldr	r3, [pc, #576]	; (8002388 <StartSIM800Task+0x2fc>)
 8002148:	6818      	ldr	r0, [r3, #0]
 800214a:	f107 0108 	add.w	r1, r7, #8
 800214e:	f04f 33ff 	mov.w	r3, #4294967295
 8002152:	2200      	movs	r2, #0
 8002154:	f007 fd72 	bl	8009c3c <osMessageQueuePut>
	  		goto start;
 8002158:	e7aa      	b.n	80020b0 <StartSIM800Task+0x24>
	  	}
	  	osDelay(300);
 800215a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800215e:	f007 f9f0 	bl	8009542 <osDelay>

	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002162:	2264      	movs	r2, #100	; 0x64
 8002164:	2100      	movs	r1, #0
 8002166:	4884      	ldr	r0, [pc, #528]	; (8002378 <StartSIM800Task+0x2ec>)
 8002168:	f00b f930 	bl	800d3cc <memset>
	  	sprintf(str_SIM800,"AT+CIPMUX=0\r\n\0");
 800216c:	4987      	ldr	r1, [pc, #540]	; (800238c <StartSIM800Task+0x300>)
 800216e:	4881      	ldr	r0, [pc, #516]	; (8002374 <StartSIM800Task+0x2e8>)
 8002170:	f00b f968 	bl	800d444 <siprintf>
	  	HAL_UART_Transmit_IT(&huart6, str_SIM800, strlen(str_SIM800));
 8002174:	487f      	ldr	r0, [pc, #508]	; (8002374 <StartSIM800Task+0x2e8>)
 8002176:	f7fe f84b 	bl	8000210 <strlen>
 800217a:	4603      	mov	r3, r0
 800217c:	b29b      	uxth	r3, r3
 800217e:	461a      	mov	r2, r3
 8002180:	497c      	ldr	r1, [pc, #496]	; (8002374 <StartSIM800Task+0x2e8>)
 8002182:	4879      	ldr	r0, [pc, #484]	; (8002368 <StartSIM800Task+0x2dc>)
 8002184:	f005 fdd3 	bl	8007d2e <HAL_UART_Transmit_IT>
	  	ans = SIM800_Ans("OK");
 8002188:	487d      	ldr	r0, [pc, #500]	; (8002380 <StartSIM800Task+0x2f4>)
 800218a:	f7ff fb87 	bl	800189c <SIM800_Ans>
 800218e:	4603      	mov	r3, r0
 8002190:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  	if (!ans)
 8002194:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002198:	2b00      	cmp	r3, #0
 800219a:	d114      	bne.n	80021c6 <StartSIM800Task+0x13a>
		{
			strcpy(&(msg.str), "FAILE_CIPMUX\r\n\0");
 800219c:	f107 0308 	add.w	r3, r7, #8
 80021a0:	4a7b      	ldr	r2, [pc, #492]	; (8002390 <StartSIM800Task+0x304>)
 80021a2:	461c      	mov	r4, r3
 80021a4:	4613      	mov	r3, r2
 80021a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021a8:	c407      	stmia	r4!, {r0, r1, r2}
 80021aa:	8023      	strh	r3, [r4, #0]
 80021ac:	3402      	adds	r4, #2
 80021ae:	0c1b      	lsrs	r3, r3, #16
 80021b0:	7023      	strb	r3, [r4, #0]
			osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 80021b2:	4b75      	ldr	r3, [pc, #468]	; (8002388 <StartSIM800Task+0x2fc>)
 80021b4:	6818      	ldr	r0, [r3, #0]
 80021b6:	f107 0108 	add.w	r1, r7, #8
 80021ba:	f04f 33ff 	mov.w	r3, #4294967295
 80021be:	2200      	movs	r2, #0
 80021c0:	f007 fd3c 	bl	8009c3c <osMessageQueuePut>
			goto start;
 80021c4:	e774      	b.n	80020b0 <StartSIM800Task+0x24>
		}
		osDelay(300);
 80021c6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80021ca:	f007 f9ba 	bl	8009542 <osDelay>

	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80021ce:	2264      	movs	r2, #100	; 0x64
 80021d0:	2100      	movs	r1, #0
 80021d2:	4869      	ldr	r0, [pc, #420]	; (8002378 <StartSIM800Task+0x2ec>)
 80021d4:	f00b f8fa 	bl	800d3cc <memset>
	  	sprintf(str_SIM800,"AT+CIPSTATUS\r\n\0");
 80021d8:	496e      	ldr	r1, [pc, #440]	; (8002394 <StartSIM800Task+0x308>)
 80021da:	4866      	ldr	r0, [pc, #408]	; (8002374 <StartSIM800Task+0x2e8>)
 80021dc:	f00b f932 	bl	800d444 <siprintf>
	  	HAL_UART_Transmit_IT(&huart6, str_SIM800, strlen(str_SIM800));
 80021e0:	4864      	ldr	r0, [pc, #400]	; (8002374 <StartSIM800Task+0x2e8>)
 80021e2:	f7fe f815 	bl	8000210 <strlen>
 80021e6:	4603      	mov	r3, r0
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	461a      	mov	r2, r3
 80021ec:	4961      	ldr	r1, [pc, #388]	; (8002374 <StartSIM800Task+0x2e8>)
 80021ee:	485e      	ldr	r0, [pc, #376]	; (8002368 <StartSIM800Task+0x2dc>)
 80021f0:	f005 fd9d 	bl	8007d2e <HAL_UART_Transmit_IT>
	  	ans = SIM800_Ans("OK");
 80021f4:	4862      	ldr	r0, [pc, #392]	; (8002380 <StartSIM800Task+0x2f4>)
 80021f6:	f7ff fb51 	bl	800189c <SIM800_Ans>
 80021fa:	4603      	mov	r3, r0
 80021fc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  	if (!ans)
 8002200:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002204:	2b00      	cmp	r3, #0
 8002206:	d112      	bne.n	800222e <StartSIM800Task+0x1a2>
		{
			strcpy(&(msg.str), "FAILE_CIPSTATUS\r\n\0");
 8002208:	f107 0308 	add.w	r3, r7, #8
 800220c:	4a62      	ldr	r2, [pc, #392]	; (8002398 <StartSIM800Task+0x30c>)
 800220e:	461c      	mov	r4, r3
 8002210:	4615      	mov	r5, r2
 8002212:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002214:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002216:	682b      	ldr	r3, [r5, #0]
 8002218:	8023      	strh	r3, [r4, #0]
			osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 800221a:	4b5b      	ldr	r3, [pc, #364]	; (8002388 <StartSIM800Task+0x2fc>)
 800221c:	6818      	ldr	r0, [r3, #0]
 800221e:	f107 0108 	add.w	r1, r7, #8
 8002222:	f04f 33ff 	mov.w	r3, #4294967295
 8002226:	2200      	movs	r2, #0
 8002228:	f007 fd08 	bl	8009c3c <osMessageQueuePut>
			goto start;
 800222c:	e740      	b.n	80020b0 <StartSIM800Task+0x24>
		}
		osDelay(300);
 800222e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002232:	f007 f986 	bl	8009542 <osDelay>

	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002236:	2264      	movs	r2, #100	; 0x64
 8002238:	2100      	movs	r1, #0
 800223a:	484f      	ldr	r0, [pc, #316]	; (8002378 <StartSIM800Task+0x2ec>)
 800223c:	f00b f8c6 	bl	800d3cc <memset>
	  	sprintf(str_SIM800,"AT+CIPRXGET=0\r\n\0");
 8002240:	4956      	ldr	r1, [pc, #344]	; (800239c <StartSIM800Task+0x310>)
 8002242:	484c      	ldr	r0, [pc, #304]	; (8002374 <StartSIM800Task+0x2e8>)
 8002244:	f00b f8fe 	bl	800d444 <siprintf>
	  	HAL_UART_Transmit_IT(&huart6, str_SIM800, strlen(str_SIM800));
 8002248:	484a      	ldr	r0, [pc, #296]	; (8002374 <StartSIM800Task+0x2e8>)
 800224a:	f7fd ffe1 	bl	8000210 <strlen>
 800224e:	4603      	mov	r3, r0
 8002250:	b29b      	uxth	r3, r3
 8002252:	461a      	mov	r2, r3
 8002254:	4947      	ldr	r1, [pc, #284]	; (8002374 <StartSIM800Task+0x2e8>)
 8002256:	4844      	ldr	r0, [pc, #272]	; (8002368 <StartSIM800Task+0x2dc>)
 8002258:	f005 fd69 	bl	8007d2e <HAL_UART_Transmit_IT>
	  	ans = SIM800_Ans("OK");
 800225c:	4848      	ldr	r0, [pc, #288]	; (8002380 <StartSIM800Task+0x2f4>)
 800225e:	f7ff fb1d 	bl	800189c <SIM800_Ans>
 8002262:	4603      	mov	r3, r0
 8002264:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  	if (!ans)
 8002268:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800226c:	2b00      	cmp	r3, #0
 800226e:	d112      	bne.n	8002296 <StartSIM800Task+0x20a>
		{
			strcpy(&(msg.str), "FAILE_CIPRXGET\r\n\0");
 8002270:	f107 0308 	add.w	r3, r7, #8
 8002274:	4a4a      	ldr	r2, [pc, #296]	; (80023a0 <StartSIM800Task+0x314>)
 8002276:	461c      	mov	r4, r3
 8002278:	4615      	mov	r5, r2
 800227a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800227c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800227e:	682b      	ldr	r3, [r5, #0]
 8002280:	7023      	strb	r3, [r4, #0]
			osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8002282:	4b41      	ldr	r3, [pc, #260]	; (8002388 <StartSIM800Task+0x2fc>)
 8002284:	6818      	ldr	r0, [r3, #0]
 8002286:	f107 0108 	add.w	r1, r7, #8
 800228a:	f04f 33ff 	mov.w	r3, #4294967295
 800228e:	2200      	movs	r2, #0
 8002290:	f007 fcd4 	bl	8009c3c <osMessageQueuePut>
			goto start;
 8002294:	e70c      	b.n	80020b0 <StartSIM800Task+0x24>
		}
		osDelay(300);
 8002296:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800229a:	f007 f952 	bl	8009542 <osDelay>

	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 800229e:	2264      	movs	r2, #100	; 0x64
 80022a0:	2100      	movs	r1, #0
 80022a2:	4835      	ldr	r0, [pc, #212]	; (8002378 <StartSIM800Task+0x2ec>)
 80022a4:	f00b f892 	bl	800d3cc <memset>
	  	sprintf(str_SIM800,"AT+CSTT=\"internet.beeline.ru\",\"beeline\",\"beeline\"\r\n\0");
 80022a8:	493e      	ldr	r1, [pc, #248]	; (80023a4 <StartSIM800Task+0x318>)
 80022aa:	4832      	ldr	r0, [pc, #200]	; (8002374 <StartSIM800Task+0x2e8>)
 80022ac:	f00b f8ca 	bl	800d444 <siprintf>
	  	HAL_UART_Transmit_IT(&huart6, str_SIM800, strlen(str_SIM800));
 80022b0:	4830      	ldr	r0, [pc, #192]	; (8002374 <StartSIM800Task+0x2e8>)
 80022b2:	f7fd ffad 	bl	8000210 <strlen>
 80022b6:	4603      	mov	r3, r0
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	461a      	mov	r2, r3
 80022bc:	492d      	ldr	r1, [pc, #180]	; (8002374 <StartSIM800Task+0x2e8>)
 80022be:	482a      	ldr	r0, [pc, #168]	; (8002368 <StartSIM800Task+0x2dc>)
 80022c0:	f005 fd35 	bl	8007d2e <HAL_UART_Transmit_IT>
	  	ans = SIM800_Ans("OK");
 80022c4:	482e      	ldr	r0, [pc, #184]	; (8002380 <StartSIM800Task+0x2f4>)
 80022c6:	f7ff fae9 	bl	800189c <SIM800_Ans>
 80022ca:	4603      	mov	r3, r0
 80022cc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  	if (!ans)
 80022d0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d111      	bne.n	80022fc <StartSIM800Task+0x270>
		{
			strcpy(&(msg.str), "FAILE_CSTT\r\n\0");
 80022d8:	f107 0308 	add.w	r3, r7, #8
 80022dc:	4a32      	ldr	r2, [pc, #200]	; (80023a8 <StartSIM800Task+0x31c>)
 80022de:	461c      	mov	r4, r3
 80022e0:	4613      	mov	r3, r2
 80022e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022e4:	c407      	stmia	r4!, {r0, r1, r2}
 80022e6:	7023      	strb	r3, [r4, #0]
			osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 80022e8:	4b27      	ldr	r3, [pc, #156]	; (8002388 <StartSIM800Task+0x2fc>)
 80022ea:	6818      	ldr	r0, [r3, #0]
 80022ec:	f107 0108 	add.w	r1, r7, #8
 80022f0:	f04f 33ff 	mov.w	r3, #4294967295
 80022f4:	2200      	movs	r2, #0
 80022f6:	f007 fca1 	bl	8009c3c <osMessageQueuePut>
			goto start;
 80022fa:	e6d9      	b.n	80020b0 <StartSIM800Task+0x24>
		}
		osDelay(300);
 80022fc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002300:	f007 f91f 	bl	8009542 <osDelay>

	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002304:	2264      	movs	r2, #100	; 0x64
 8002306:	2100      	movs	r1, #0
 8002308:	481b      	ldr	r0, [pc, #108]	; (8002378 <StartSIM800Task+0x2ec>)
 800230a:	f00b f85f 	bl	800d3cc <memset>
	  	sprintf(str_SIM800,"AT+CIPSTATUS\r\n\0");
 800230e:	4921      	ldr	r1, [pc, #132]	; (8002394 <StartSIM800Task+0x308>)
 8002310:	4818      	ldr	r0, [pc, #96]	; (8002374 <StartSIM800Task+0x2e8>)
 8002312:	f00b f897 	bl	800d444 <siprintf>
	  	HAL_UART_Transmit_IT(&huart6, str_SIM800, strlen(str_SIM800));
 8002316:	4817      	ldr	r0, [pc, #92]	; (8002374 <StartSIM800Task+0x2e8>)
 8002318:	f7fd ff7a 	bl	8000210 <strlen>
 800231c:	4603      	mov	r3, r0
 800231e:	b29b      	uxth	r3, r3
 8002320:	461a      	mov	r2, r3
 8002322:	4914      	ldr	r1, [pc, #80]	; (8002374 <StartSIM800Task+0x2e8>)
 8002324:	4810      	ldr	r0, [pc, #64]	; (8002368 <StartSIM800Task+0x2dc>)
 8002326:	f005 fd02 	bl	8007d2e <HAL_UART_Transmit_IT>
	  	ans = SIM800_Ans("OK");
 800232a:	4815      	ldr	r0, [pc, #84]	; (8002380 <StartSIM800Task+0x2f4>)
 800232c:	f7ff fab6 	bl	800189c <SIM800_Ans>
 8002330:	4603      	mov	r3, r0
 8002332:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  	if (!ans)
 8002336:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800233a:	2b00      	cmp	r3, #0
 800233c:	d136      	bne.n	80023ac <StartSIM800Task+0x320>
		{
			strcpy(&(msg.str), "FAILE_CIPSTATUS\r\n\0");
 800233e:	f107 0308 	add.w	r3, r7, #8
 8002342:	4a15      	ldr	r2, [pc, #84]	; (8002398 <StartSIM800Task+0x30c>)
 8002344:	461c      	mov	r4, r3
 8002346:	4615      	mov	r5, r2
 8002348:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800234a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800234c:	682b      	ldr	r3, [r5, #0]
 800234e:	8023      	strh	r3, [r4, #0]
			osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8002350:	4b0d      	ldr	r3, [pc, #52]	; (8002388 <StartSIM800Task+0x2fc>)
 8002352:	6818      	ldr	r0, [r3, #0]
 8002354:	f107 0108 	add.w	r1, r7, #8
 8002358:	f04f 33ff 	mov.w	r3, #4294967295
 800235c:	2200      	movs	r2, #0
 800235e:	f007 fc6d 	bl	8009c3c <osMessageQueuePut>
			goto start;
 8002362:	e6a5      	b.n	80020b0 <StartSIM800Task+0x24>
 8002364:	200003b0 	.word	0x200003b0
 8002368:	200001a8 	.word	0x200001a8
 800236c:	40020000 	.word	0x40020000
 8002370:	0800e838 	.word	0x0800e838
 8002374:	200003d0 	.word	0x200003d0
 8002378:	20000434 	.word	0x20000434
 800237c:	0800e840 	.word	0x0800e840
 8002380:	0800e850 	.word	0x0800e850
 8002384:	0800e854 	.word	0x0800e854
 8002388:	20000390 	.word	0x20000390
 800238c:	0800e868 	.word	0x0800e868
 8002390:	0800e878 	.word	0x0800e878
 8002394:	0800e888 	.word	0x0800e888
 8002398:	0800e898 	.word	0x0800e898
 800239c:	0800e8ac 	.word	0x0800e8ac
 80023a0:	0800e8c0 	.word	0x0800e8c0
 80023a4:	0800e8d4 	.word	0x0800e8d4
 80023a8:	0800e90c 	.word	0x0800e90c
		}
		osDelay(300);
 80023ac:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80023b0:	f007 f8c7 	bl	8009542 <osDelay>

	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80023b4:	2264      	movs	r2, #100	; 0x64
 80023b6:	2100      	movs	r1, #0
 80023b8:	487a      	ldr	r0, [pc, #488]	; (80025a4 <StartSIM800Task+0x518>)
 80023ba:	f00b f807 	bl	800d3cc <memset>
	  	sprintf(str_SIM800,"AT+CIICR\r\n\0");
 80023be:	497a      	ldr	r1, [pc, #488]	; (80025a8 <StartSIM800Task+0x51c>)
 80023c0:	487a      	ldr	r0, [pc, #488]	; (80025ac <StartSIM800Task+0x520>)
 80023c2:	f00b f83f 	bl	800d444 <siprintf>
	  	HAL_UART_Transmit_IT(&huart6, str_SIM800, strlen(str_SIM800));
 80023c6:	4879      	ldr	r0, [pc, #484]	; (80025ac <StartSIM800Task+0x520>)
 80023c8:	f7fd ff22 	bl	8000210 <strlen>
 80023cc:	4603      	mov	r3, r0
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	461a      	mov	r2, r3
 80023d2:	4976      	ldr	r1, [pc, #472]	; (80025ac <StartSIM800Task+0x520>)
 80023d4:	4876      	ldr	r0, [pc, #472]	; (80025b0 <StartSIM800Task+0x524>)
 80023d6:	f005 fcaa 	bl	8007d2e <HAL_UART_Transmit_IT>
	  	ans = SIM800_Ans("AT+CIICR");
 80023da:	4876      	ldr	r0, [pc, #472]	; (80025b4 <StartSIM800Task+0x528>)
 80023dc:	f7ff fa5e 	bl	800189c <SIM800_Ans>
 80023e0:	4603      	mov	r3, r0
 80023e2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80023e6:	2264      	movs	r2, #100	; 0x64
 80023e8:	2100      	movs	r1, #0
 80023ea:	486e      	ldr	r0, [pc, #440]	; (80025a4 <StartSIM800Task+0x518>)
 80023ec:	f00a ffee 	bl	800d3cc <memset>
	  	ans = SIM800_Ans("OK");
 80023f0:	4871      	ldr	r0, [pc, #452]	; (80025b8 <StartSIM800Task+0x52c>)
 80023f2:	f7ff fa53 	bl	800189c <SIM800_Ans>
 80023f6:	4603      	mov	r3, r0
 80023f8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  	if (!ans)
 80023fc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002400:	2b00      	cmp	r3, #0
 8002402:	d111      	bne.n	8002428 <StartSIM800Task+0x39c>
		{
			strcpy(&(msg.str), "FAILE_CIICR\r\n\0");
 8002404:	f107 0308 	add.w	r3, r7, #8
 8002408:	4a6c      	ldr	r2, [pc, #432]	; (80025bc <StartSIM800Task+0x530>)
 800240a:	461c      	mov	r4, r3
 800240c:	4613      	mov	r3, r2
 800240e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002410:	c407      	stmia	r4!, {r0, r1, r2}
 8002412:	8023      	strh	r3, [r4, #0]
			osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8002414:	4b6a      	ldr	r3, [pc, #424]	; (80025c0 <StartSIM800Task+0x534>)
 8002416:	6818      	ldr	r0, [r3, #0]
 8002418:	f107 0108 	add.w	r1, r7, #8
 800241c:	f04f 33ff 	mov.w	r3, #4294967295
 8002420:	2200      	movs	r2, #0
 8002422:	f007 fc0b 	bl	8009c3c <osMessageQueuePut>
			goto start;
 8002426:	e643      	b.n	80020b0 <StartSIM800Task+0x24>
		}
		osDelay(500);
 8002428:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800242c:	f007 f889 	bl	8009542 <osDelay>

	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002430:	2264      	movs	r2, #100	; 0x64
 8002432:	2100      	movs	r1, #0
 8002434:	485b      	ldr	r0, [pc, #364]	; (80025a4 <StartSIM800Task+0x518>)
 8002436:	f00a ffc9 	bl	800d3cc <memset>
	  	sprintf(str_SIM800,"AT+CIPSTATUS\r\n\0");
 800243a:	4962      	ldr	r1, [pc, #392]	; (80025c4 <StartSIM800Task+0x538>)
 800243c:	485b      	ldr	r0, [pc, #364]	; (80025ac <StartSIM800Task+0x520>)
 800243e:	f00b f801 	bl	800d444 <siprintf>
	  	HAL_UART_Transmit_IT(&huart6, str_SIM800, strlen(str_SIM800));
 8002442:	485a      	ldr	r0, [pc, #360]	; (80025ac <StartSIM800Task+0x520>)
 8002444:	f7fd fee4 	bl	8000210 <strlen>
 8002448:	4603      	mov	r3, r0
 800244a:	b29b      	uxth	r3, r3
 800244c:	461a      	mov	r2, r3
 800244e:	4957      	ldr	r1, [pc, #348]	; (80025ac <StartSIM800Task+0x520>)
 8002450:	4857      	ldr	r0, [pc, #348]	; (80025b0 <StartSIM800Task+0x524>)
 8002452:	f005 fc6c 	bl	8007d2e <HAL_UART_Transmit_IT>
	  	ans = SIM800_Ans("OK");
 8002456:	4858      	ldr	r0, [pc, #352]	; (80025b8 <StartSIM800Task+0x52c>)
 8002458:	f7ff fa20 	bl	800189c <SIM800_Ans>
 800245c:	4603      	mov	r3, r0
 800245e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  	if (!ans)
 8002462:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002466:	2b00      	cmp	r3, #0
 8002468:	d112      	bne.n	8002490 <StartSIM800Task+0x404>
		{
			strcpy(&(msg.str), "FAILE_CIPSTATUS\r\n\0");
 800246a:	f107 0308 	add.w	r3, r7, #8
 800246e:	4a56      	ldr	r2, [pc, #344]	; (80025c8 <StartSIM800Task+0x53c>)
 8002470:	461c      	mov	r4, r3
 8002472:	4615      	mov	r5, r2
 8002474:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002476:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002478:	682b      	ldr	r3, [r5, #0]
 800247a:	8023      	strh	r3, [r4, #0]
			osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 800247c:	4b50      	ldr	r3, [pc, #320]	; (80025c0 <StartSIM800Task+0x534>)
 800247e:	6818      	ldr	r0, [r3, #0]
 8002480:	f107 0108 	add.w	r1, r7, #8
 8002484:	f04f 33ff 	mov.w	r3, #4294967295
 8002488:	2200      	movs	r2, #0
 800248a:	f007 fbd7 	bl	8009c3c <osMessageQueuePut>
			goto start;
 800248e:	e60f      	b.n	80020b0 <StartSIM800Task+0x24>
		}
		osDelay(300);
 8002490:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002494:	f007 f855 	bl	8009542 <osDelay>

	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002498:	2264      	movs	r2, #100	; 0x64
 800249a:	2100      	movs	r1, #0
 800249c:	4841      	ldr	r0, [pc, #260]	; (80025a4 <StartSIM800Task+0x518>)
 800249e:	f00a ff95 	bl	800d3cc <memset>
	  	sprintf(str_SIM800,"AT+CIFSR\r\n\0");
 80024a2:	494a      	ldr	r1, [pc, #296]	; (80025cc <StartSIM800Task+0x540>)
 80024a4:	4841      	ldr	r0, [pc, #260]	; (80025ac <StartSIM800Task+0x520>)
 80024a6:	f00a ffcd 	bl	800d444 <siprintf>
	  	HAL_UART_Transmit_IT(&huart6, str_SIM800, strlen(str_SIM800));
 80024aa:	4840      	ldr	r0, [pc, #256]	; (80025ac <StartSIM800Task+0x520>)
 80024ac:	f7fd feb0 	bl	8000210 <strlen>
 80024b0:	4603      	mov	r3, r0
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	461a      	mov	r2, r3
 80024b6:	493d      	ldr	r1, [pc, #244]	; (80025ac <StartSIM800Task+0x520>)
 80024b8:	483d      	ldr	r0, [pc, #244]	; (80025b0 <StartSIM800Task+0x524>)
 80024ba:	f005 fc38 	bl	8007d2e <HAL_UART_Transmit_IT>
	  	RX = 0;
 80024be:	4b44      	ldr	r3, [pc, #272]	; (80025d0 <StartSIM800Task+0x544>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	701a      	strb	r2, [r3, #0]
	  	HAL_UART_Receive_DMA(&huart6, SIM800BuffRx, BUFF_SIM_SIZE);
 80024c4:	2264      	movs	r2, #100	; 0x64
 80024c6:	4937      	ldr	r1, [pc, #220]	; (80025a4 <StartSIM800Task+0x518>)
 80024c8:	4839      	ldr	r0, [pc, #228]	; (80025b0 <StartSIM800Task+0x524>)
 80024ca:	f005 fcf3 	bl	8007eb4 <HAL_UART_Receive_DMA>
	  	while (RX < 1) {};
 80024ce:	bf00      	nop
 80024d0:	4b3f      	ldr	r3, [pc, #252]	; (80025d0 <StartSIM800Task+0x544>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d0fb      	beq.n	80024d0 <StartSIM800Task+0x444>
	  	osDelay(300);
 80024d8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80024dc:	f007 f831 	bl	8009542 <osDelay>

	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80024e0:	2264      	movs	r2, #100	; 0x64
 80024e2:	2100      	movs	r1, #0
 80024e4:	482f      	ldr	r0, [pc, #188]	; (80025a4 <StartSIM800Task+0x518>)
 80024e6:	f00a ff71 	bl	800d3cc <memset>
	  	sprintf(str_SIM800,"AT+CIPSTATUS\r\n\0");
 80024ea:	4936      	ldr	r1, [pc, #216]	; (80025c4 <StartSIM800Task+0x538>)
 80024ec:	482f      	ldr	r0, [pc, #188]	; (80025ac <StartSIM800Task+0x520>)
 80024ee:	f00a ffa9 	bl	800d444 <siprintf>
	  	HAL_UART_Transmit_IT(&huart6, str_SIM800, strlen(str_SIM800));
 80024f2:	482e      	ldr	r0, [pc, #184]	; (80025ac <StartSIM800Task+0x520>)
 80024f4:	f7fd fe8c 	bl	8000210 <strlen>
 80024f8:	4603      	mov	r3, r0
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	461a      	mov	r2, r3
 80024fe:	492b      	ldr	r1, [pc, #172]	; (80025ac <StartSIM800Task+0x520>)
 8002500:	482b      	ldr	r0, [pc, #172]	; (80025b0 <StartSIM800Task+0x524>)
 8002502:	f005 fc14 	bl	8007d2e <HAL_UART_Transmit_IT>
	  	ans = SIM800_Ans("OK");
 8002506:	482c      	ldr	r0, [pc, #176]	; (80025b8 <StartSIM800Task+0x52c>)
 8002508:	f7ff f9c8 	bl	800189c <SIM800_Ans>
 800250c:	4603      	mov	r3, r0
 800250e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  	if (!ans)
 8002512:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002516:	2b00      	cmp	r3, #0
 8002518:	d112      	bne.n	8002540 <StartSIM800Task+0x4b4>
		{
			strcpy(&(msg.str), "FAILE_CIPSTATUS\r\n\0");
 800251a:	f107 0308 	add.w	r3, r7, #8
 800251e:	4a2a      	ldr	r2, [pc, #168]	; (80025c8 <StartSIM800Task+0x53c>)
 8002520:	461c      	mov	r4, r3
 8002522:	4615      	mov	r5, r2
 8002524:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002526:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002528:	682b      	ldr	r3, [r5, #0]
 800252a:	8023      	strh	r3, [r4, #0]
			osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 800252c:	4b24      	ldr	r3, [pc, #144]	; (80025c0 <StartSIM800Task+0x534>)
 800252e:	6818      	ldr	r0, [r3, #0]
 8002530:	f107 0108 	add.w	r1, r7, #8
 8002534:	f04f 33ff 	mov.w	r3, #4294967295
 8002538:	2200      	movs	r2, #0
 800253a:	f007 fb7f 	bl	8009c3c <osMessageQueuePut>
			goto start;
 800253e:	e5b7      	b.n	80020b0 <StartSIM800Task+0x24>
		}
		osDelay(300);
 8002540:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002544:	f006 fffd 	bl	8009542 <osDelay>

		strcpy(&(msg.str), "START_SIM800_OK\r\n\0");
 8002548:	f107 0308 	add.w	r3, r7, #8
 800254c:	4a21      	ldr	r2, [pc, #132]	; (80025d4 <StartSIM800Task+0x548>)
 800254e:	461c      	mov	r4, r3
 8002550:	4615      	mov	r5, r2
 8002552:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002554:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002556:	682b      	ldr	r3, [r5, #0]
 8002558:	8023      	strh	r3, [r4, #0]
		osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 800255a:	4b19      	ldr	r3, [pc, #100]	; (80025c0 <StartSIM800Task+0x534>)
 800255c:	6818      	ldr	r0, [r3, #0]
 800255e:	f107 0108 	add.w	r1, r7, #8
 8002562:	f04f 33ff 	mov.w	r3, #4294967295
 8002566:	2200      	movs	r2, #0
 8002568:	f007 fb68 	bl	8009c3c <osMessageQueuePut>

	  	Start_SIM800 = 1; //module starting good
 800256c:	4b1a      	ldr	r3, [pc, #104]	; (80025d8 <StartSIM800Task+0x54c>)
 800256e:	2201      	movs	r2, #1
 8002570:	701a      	strb	r2, [r3, #0]
	  	osMutexRelease(UART1MutexHandle); //release UART1
 8002572:	4b1a      	ldr	r3, [pc, #104]	; (80025dc <StartSIM800Task+0x550>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4618      	mov	r0, r3
 8002578:	f007 f98f 	bl	800989a <osMutexRelease>
	  	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 0);
 800257c:	2200      	movs	r2, #0
 800257e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002582:	4817      	ldr	r0, [pc, #92]	; (80025e0 <StartSIM800Task+0x554>)
 8002584:	f002 feb6 	bl	80052f4 <HAL_GPIO_WritePin>
	  	//start thread to connect to broker
	  	MQTTConnectTaskHandle = osThreadNew(StartMQTTConnectTask, NULL, &MQTTConnectTask_attributes);
 8002588:	4a16      	ldr	r2, [pc, #88]	; (80025e4 <StartSIM800Task+0x558>)
 800258a:	2100      	movs	r1, #0
 800258c:	4816      	ldr	r0, [pc, #88]	; (80025e8 <StartSIM800Task+0x55c>)
 800258e:	f006 ff19 	bl	80093c4 <osThreadNew>
 8002592:	4603      	mov	r3, r0
 8002594:	4a15      	ldr	r2, [pc, #84]	; (80025ec <StartSIM800Task+0x560>)
 8002596:	6013      	str	r3, [r2, #0]
	  	osThreadTerminate(SIM800StartTaskHandle); //execute this thread
 8002598:	4b15      	ldr	r3, [pc, #84]	; (80025f0 <StartSIM800Task+0x564>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4618      	mov	r0, r3
 800259e:	f006 ffa3 	bl	80094e8 <osThreadTerminate>
  {
 80025a2:	e57a      	b.n	800209a <StartSIM800Task+0xe>
 80025a4:	20000434 	.word	0x20000434
 80025a8:	0800e91c 	.word	0x0800e91c
 80025ac:	200003d0 	.word	0x200003d0
 80025b0:	200001a8 	.word	0x200001a8
 80025b4:	0800e928 	.word	0x0800e928
 80025b8:	0800e850 	.word	0x0800e850
 80025bc:	0800e934 	.word	0x0800e934
 80025c0:	20000390 	.word	0x20000390
 80025c4:	0800e888 	.word	0x0800e888
 80025c8:	0800e898 	.word	0x0800e898
 80025cc:	0800e944 	.word	0x0800e944
 80025d0:	200003b3 	.word	0x200003b3
 80025d4:	0800e950 	.word	0x0800e950
 80025d8:	200003b2 	.word	0x200003b2
 80025dc:	200003a4 	.word	0x200003a4
 80025e0:	40020800 	.word	0x40020800
 80025e4:	0800f1d8 	.word	0x0800f1d8
 80025e8:	080025f5 	.word	0x080025f5
 80025ec:	20000384 	.word	0x20000384
 80025f0:	20000380 	.word	0x20000380

080025f4 <StartMQTTConnectTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMQTTConnectTask */
void StartMQTTConnectTask(void *argument)
{
 80025f4:	b5b0      	push	{r4, r5, r7, lr}
 80025f6:	b0ba      	sub	sp, #232	; 0xe8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMQTTConnectTask */

	message_type msg; // string for debug message
	uint8_t ans; //is one string in another
	uint8_t send_MQTT_message[BUFF_SIM_SIZE] = {}; //message to SIM800
 80025fc:	2300      	movs	r3, #0
 80025fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002600:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002604:	2260      	movs	r2, #96	; 0x60
 8002606:	2100      	movs	r1, #0
 8002608:	4618      	mov	r0, r3
 800260a:	f00a fedf 	bl	800d3cc <memset>
	uint8_t counter = 0; //counter of bad trying to connect to broker
 800260e:	2300      	movs	r3, #0
 8002610:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
  /* Infinite loop */
  for(;;)
  {

	  // waiting mutex
	  if (osMutexAcquire(UART1MutexHandle, osWaitForever) == osOK)
 8002614:	4bc0      	ldr	r3, [pc, #768]	; (8002918 <StartMQTTConnectTask+0x324>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f04f 31ff 	mov.w	r1, #4294967295
 800261c:	4618      	mov	r0, r3
 800261e:	f007 f8f1 	bl	8009804 <osMutexAcquire>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1f5      	bne.n	8002614 <StartMQTTConnectTask+0x20>
	  {
	  start:
 8002628:	bf00      	nop
		  if (counter > 5)
 800262a:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 800262e:	2b05      	cmp	r3, #5
 8002630:	d90f      	bls.n	8002652 <StartMQTTConnectTask+0x5e>
		  {
			  Error_init = 1;
 8002632:	4bba      	ldr	r3, [pc, #744]	; (800291c <StartMQTTConnectTask+0x328>)
 8002634:	2201      	movs	r2, #1
 8002636:	701a      	strb	r2, [r3, #0]
			  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 1);
			  Start_SIM800 = 0;
 8002638:	4bb9      	ldr	r3, [pc, #740]	; (8002920 <StartMQTTConnectTask+0x32c>)
 800263a:	2200      	movs	r2, #0
 800263c:	701a      	strb	r2, [r3, #0]
			  osMutexRelease(UART1MutexHandle);
 800263e:	4bb6      	ldr	r3, [pc, #728]	; (8002918 <StartMQTTConnectTask+0x324>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f007 f929 	bl	800989a <osMutexRelease>
			  osThreadTerminate(MQTTConnectTaskHandle);
 8002648:	4bb6      	ldr	r3, [pc, #728]	; (8002924 <StartMQTTConnectTask+0x330>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4618      	mov	r0, r3
 800264e:	f006 ff4b 	bl	80094e8 <osThreadTerminate>
		  }

		  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 8002652:	4bb5      	ldr	r3, [pc, #724]	; (8002928 <StartMQTTConnectTask+0x334>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	68da      	ldr	r2, [r3, #12]
 8002658:	4bb3      	ldr	r3, [pc, #716]	; (8002928 <StartMQTTConnectTask+0x334>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f042 0210 	orr.w	r2, r2, #16
 8002660:	60da      	str	r2, [r3, #12]
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002662:	2264      	movs	r2, #100	; 0x64
 8002664:	2100      	movs	r1, #0
 8002666:	48b1      	ldr	r0, [pc, #708]	; (800292c <StartMQTTConnectTask+0x338>)
 8002668:	f00a feb0 	bl	800d3cc <memset>
		  //sprintf(str_SIM800,"AT+CIPSTART=\"TCP\",\"broker.hivemq.com\",1883\r\0");
		  sprintf(str_SIM800,"AT+CIPSTART=\"TCP\",\"broker.emqx.io\",1883\r\n\0");
 800266c:	49b0      	ldr	r1, [pc, #704]	; (8002930 <StartMQTTConnectTask+0x33c>)
 800266e:	48b1      	ldr	r0, [pc, #708]	; (8002934 <StartMQTTConnectTask+0x340>)
 8002670:	f00a fee8 	bl	800d444 <siprintf>
		  HAL_UART_Transmit_DMA(&huart6, str_SIM800, strlen(str_SIM800));
 8002674:	48af      	ldr	r0, [pc, #700]	; (8002934 <StartMQTTConnectTask+0x340>)
 8002676:	f7fd fdcb 	bl	8000210 <strlen>
 800267a:	4603      	mov	r3, r0
 800267c:	b29b      	uxth	r3, r3
 800267e:	461a      	mov	r2, r3
 8002680:	49ac      	ldr	r1, [pc, #688]	; (8002934 <StartMQTTConnectTask+0x340>)
 8002682:	48a9      	ldr	r0, [pc, #676]	; (8002928 <StartMQTTConnectTask+0x334>)
 8002684:	f005 fb98 	bl	8007db8 <HAL_UART_Transmit_DMA>
		  ans = SIM800_Ans("OK");
 8002688:	48ab      	ldr	r0, [pc, #684]	; (8002938 <StartMQTTConnectTask+0x344>)
 800268a:	f7ff f907 	bl	800189c <SIM800_Ans>
 800268e:	4603      	mov	r3, r0
 8002690:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
		  if (!ans)
 8002694:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8002698:	2b00      	cmp	r3, #0
 800269a:	d117      	bne.n	80026cc <StartMQTTConnectTask+0xd8>
		  {
			  strcpy(&(msg.str), "FAILE_connect1\r\n\0");
 800269c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80026a0:	4aa6      	ldr	r2, [pc, #664]	; (800293c <StartMQTTConnectTask+0x348>)
 80026a2:	461c      	mov	r4, r3
 80026a4:	4615      	mov	r5, r2
 80026a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026aa:	682b      	ldr	r3, [r5, #0]
 80026ac:	7023      	strb	r3, [r4, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 80026ae:	4ba4      	ldr	r3, [pc, #656]	; (8002940 <StartMQTTConnectTask+0x34c>)
 80026b0:	6818      	ldr	r0, [r3, #0]
 80026b2:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80026b6:	f04f 33ff 	mov.w	r3, #4294967295
 80026ba:	2200      	movs	r2, #0
 80026bc:	f007 fabe 	bl	8009c3c <osMessageQueuePut>
			  counter++;
 80026c0:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 80026c4:	3301      	adds	r3, #1
 80026c6:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
			  goto start;
 80026ca:	e7ae      	b.n	800262a <StartMQTTConnectTask+0x36>
		  }
		  osDelay(300);
 80026cc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80026d0:	f006 ff37 	bl	8009542 <osDelay>

		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80026d4:	2264      	movs	r2, #100	; 0x64
 80026d6:	2100      	movs	r1, #0
 80026d8:	4894      	ldr	r0, [pc, #592]	; (800292c <StartMQTTConnectTask+0x338>)
 80026da:	f00a fe77 	bl	800d3cc <memset>
		  ans = SIM800_Ans("OK");
 80026de:	4896      	ldr	r0, [pc, #600]	; (8002938 <StartMQTTConnectTask+0x344>)
 80026e0:	f7ff f8dc 	bl	800189c <SIM800_Ans>
 80026e4:	4603      	mov	r3, r0
 80026e6:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
		  if (!ans)
 80026ea:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d117      	bne.n	8002722 <StartMQTTConnectTask+0x12e>
		  {
			  strcpy(&(msg.str), "FAILE_connect2\r\n\0");
 80026f2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80026f6:	4a93      	ldr	r2, [pc, #588]	; (8002944 <StartMQTTConnectTask+0x350>)
 80026f8:	461c      	mov	r4, r3
 80026fa:	4615      	mov	r5, r2
 80026fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002700:	682b      	ldr	r3, [r5, #0]
 8002702:	7023      	strb	r3, [r4, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8002704:	4b8e      	ldr	r3, [pc, #568]	; (8002940 <StartMQTTConnectTask+0x34c>)
 8002706:	6818      	ldr	r0, [r3, #0]
 8002708:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800270c:	f04f 33ff 	mov.w	r3, #4294967295
 8002710:	2200      	movs	r2, #0
 8002712:	f007 fa93 	bl	8009c3c <osMessageQueuePut>
			  counter++;
 8002716:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 800271a:	3301      	adds	r3, #1
 800271c:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
			  goto start;
 8002720:	e783      	b.n	800262a <StartMQTTConnectTask+0x36>
		  }
		  osDelay(300);
 8002722:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002726:	f006 ff0c 	bl	8009542 <osDelay>

		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 800272a:	2264      	movs	r2, #100	; 0x64
 800272c:	2100      	movs	r1, #0
 800272e:	487f      	ldr	r0, [pc, #508]	; (800292c <StartMQTTConnectTask+0x338>)
 8002730:	f00a fe4c 	bl	800d3cc <memset>
		  sprintf(str_SIM800,"AT+CIPSEND=14\r\n\0");
 8002734:	4984      	ldr	r1, [pc, #528]	; (8002948 <StartMQTTConnectTask+0x354>)
 8002736:	487f      	ldr	r0, [pc, #508]	; (8002934 <StartMQTTConnectTask+0x340>)
 8002738:	f00a fe84 	bl	800d444 <siprintf>
		  //sprintf(str_SIM800,"AT+CIPSEND=24\r\0");
		  HAL_UART_Transmit_DMA(&huart6, str_SIM800, strlen(str_SIM800));
 800273c:	487d      	ldr	r0, [pc, #500]	; (8002934 <StartMQTTConnectTask+0x340>)
 800273e:	f7fd fd67 	bl	8000210 <strlen>
 8002742:	4603      	mov	r3, r0
 8002744:	b29b      	uxth	r3, r3
 8002746:	461a      	mov	r2, r3
 8002748:	497a      	ldr	r1, [pc, #488]	; (8002934 <StartMQTTConnectTask+0x340>)
 800274a:	4877      	ldr	r0, [pc, #476]	; (8002928 <StartMQTTConnectTask+0x334>)
 800274c:	f005 fb34 	bl	8007db8 <HAL_UART_Transmit_DMA>
		  ans = SIM800_Ans(">");
 8002750:	487e      	ldr	r0, [pc, #504]	; (800294c <StartMQTTConnectTask+0x358>)
 8002752:	f7ff f8a3 	bl	800189c <SIM800_Ans>
 8002756:	4603      	mov	r3, r0
 8002758:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
		  if (!ans)
 800275c:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8002760:	2b00      	cmp	r3, #0
 8002762:	d116      	bne.n	8002792 <StartMQTTConnectTask+0x19e>
		  {
			  strcpy(&(msg.str), "FAILE_send\r\n\0");
 8002764:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002768:	4a79      	ldr	r2, [pc, #484]	; (8002950 <StartMQTTConnectTask+0x35c>)
 800276a:	461c      	mov	r4, r3
 800276c:	4613      	mov	r3, r2
 800276e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002770:	c407      	stmia	r4!, {r0, r1, r2}
 8002772:	7023      	strb	r3, [r4, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8002774:	4b72      	ldr	r3, [pc, #456]	; (8002940 <StartMQTTConnectTask+0x34c>)
 8002776:	6818      	ldr	r0, [r3, #0]
 8002778:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800277c:	f04f 33ff 	mov.w	r3, #4294967295
 8002780:	2200      	movs	r2, #0
 8002782:	f007 fa5b 	bl	8009c3c <osMessageQueuePut>
			  counter++;
 8002786:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 800278a:	3301      	adds	r3, #1
 800278c:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
			  goto start;
 8002790:	e74b      	b.n	800262a <StartMQTTConnectTask+0x36>
		  }
		  osDelay(300);
 8002792:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002796:	f006 fed4 	bl	8009542 <osDelay>

		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 800279a:	2264      	movs	r2, #100	; 0x64
 800279c:	2100      	movs	r1, #0
 800279e:	4863      	ldr	r0, [pc, #396]	; (800292c <StartMQTTConnectTask+0x338>)
 80027a0:	f00a fe14 	bl	800d3cc <memset>
		  uint8_t send_MQTT_init[50] = "\x10\x0C\0\x04MQTT\x04\x02\0\x3C\0\0\0";
 80027a4:	4b6b      	ldr	r3, [pc, #428]	; (8002954 <StartMQTTConnectTask+0x360>)
 80027a6:	f107 0408 	add.w	r4, r7, #8
 80027aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80027b0:	f107 0318 	add.w	r3, r7, #24
 80027b4:	2222      	movs	r2, #34	; 0x22
 80027b6:	2100      	movs	r1, #0
 80027b8:	4618      	mov	r0, r3
 80027ba:	f00a fe07 	bl	800d3cc <memset>
		  HAL_UART_Transmit_DMA(&huart6, send_MQTT_init, 14);
 80027be:	f107 0308 	add.w	r3, r7, #8
 80027c2:	220e      	movs	r2, #14
 80027c4:	4619      	mov	r1, r3
 80027c6:	4858      	ldr	r0, [pc, #352]	; (8002928 <StartMQTTConnectTask+0x334>)
 80027c8:	f005 faf6 	bl	8007db8 <HAL_UART_Transmit_DMA>
		  //uint8_t send_MQTT_init[50] = "\x10\x16\0\x04MQTT\x04\x02\0\x3C\0\x0A\x34\x62\x58\x34\x56\x66\x47\x42\x51\x75\0";
		  //HAL_UART_Transmit_DMA(&huart1, send_MQTT_init, 24);
		  //osDelay(2000);

		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80027cc:	2264      	movs	r2, #100	; 0x64
 80027ce:	2100      	movs	r1, #0
 80027d0:	4856      	ldr	r0, [pc, #344]	; (800292c <StartMQTTConnectTask+0x338>)
 80027d2:	f00a fdfb 	bl	800d3cc <memset>
		  ans = SIM800_Ans("\x10\x0C\0\x04MQTT\x04\x02\0\x3C\0\0\0");
 80027d6:	4860      	ldr	r0, [pc, #384]	; (8002958 <StartMQTTConnectTask+0x364>)
 80027d8:	f7ff f860 	bl	800189c <SIM800_Ans>
 80027dc:	4603      	mov	r3, r0
 80027de:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
		  if (!ans)
 80027e2:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d11b      	bne.n	8002822 <StartMQTTConnectTask+0x22e>
		  {
			  strcpy(&(msg.str), "FAILE_init_mqtt1\r\n\0");
 80027ea:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80027ee:	4a5b      	ldr	r2, [pc, #364]	; (800295c <StartMQTTConnectTask+0x368>)
 80027f0:	461c      	mov	r4, r3
 80027f2:	4615      	mov	r5, r2
 80027f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027f8:	682b      	ldr	r3, [r5, #0]
 80027fa:	461a      	mov	r2, r3
 80027fc:	8022      	strh	r2, [r4, #0]
 80027fe:	3402      	adds	r4, #2
 8002800:	0c1b      	lsrs	r3, r3, #16
 8002802:	7023      	strb	r3, [r4, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8002804:	4b4e      	ldr	r3, [pc, #312]	; (8002940 <StartMQTTConnectTask+0x34c>)
 8002806:	6818      	ldr	r0, [r3, #0]
 8002808:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800280c:	f04f 33ff 	mov.w	r3, #4294967295
 8002810:	2200      	movs	r2, #0
 8002812:	f007 fa13 	bl	8009c3c <osMessageQueuePut>
			  counter++;
 8002816:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 800281a:	3301      	adds	r3, #1
 800281c:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
			  goto start;
 8002820:	e703      	b.n	800262a <StartMQTTConnectTask+0x36>
		  }

		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002822:	2264      	movs	r2, #100	; 0x64
 8002824:	2100      	movs	r1, #0
 8002826:	4841      	ldr	r0, [pc, #260]	; (800292c <StartMQTTConnectTask+0x338>)
 8002828:	f00a fdd0 	bl	800d3cc <memset>
		  ans = SIM800_Ans(MQTT_CONNECT_ASK);
 800282c:	484c      	ldr	r0, [pc, #304]	; (8002960 <StartMQTTConnectTask+0x36c>)
 800282e:	f7ff f835 	bl	800189c <SIM800_Ans>
 8002832:	4603      	mov	r3, r0
 8002834:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
		  if (!ans)
 8002838:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 800283c:	2b00      	cmp	r3, #0
 800283e:	d12a      	bne.n	8002896 <StartMQTTConnectTask+0x2a2>
		  {
			  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002840:	2264      	movs	r2, #100	; 0x64
 8002842:	2100      	movs	r1, #0
 8002844:	4839      	ldr	r0, [pc, #228]	; (800292c <StartMQTTConnectTask+0x338>)
 8002846:	f00a fdc1 	bl	800d3cc <memset>
			  ans = SIM800_Ans(MQTT_CONNECT_ASK);
 800284a:	4845      	ldr	r0, [pc, #276]	; (8002960 <StartMQTTConnectTask+0x36c>)
 800284c:	f7ff f826 	bl	800189c <SIM800_Ans>
 8002850:	4603      	mov	r3, r0
 8002852:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
			  if (!ans)
 8002856:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 800285a:	2b00      	cmp	r3, #0
 800285c:	d11b      	bne.n	8002896 <StartMQTTConnectTask+0x2a2>
			  {
				  strcpy(&(msg.str), "FAILE_init_mqtt2\r\n\0");
 800285e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002862:	4a40      	ldr	r2, [pc, #256]	; (8002964 <StartMQTTConnectTask+0x370>)
 8002864:	461c      	mov	r4, r3
 8002866:	4615      	mov	r5, r2
 8002868:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800286a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800286c:	682b      	ldr	r3, [r5, #0]
 800286e:	461a      	mov	r2, r3
 8002870:	8022      	strh	r2, [r4, #0]
 8002872:	3402      	adds	r4, #2
 8002874:	0c1b      	lsrs	r3, r3, #16
 8002876:	7023      	strb	r3, [r4, #0]
				  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8002878:	4b31      	ldr	r3, [pc, #196]	; (8002940 <StartMQTTConnectTask+0x34c>)
 800287a:	6818      	ldr	r0, [r3, #0]
 800287c:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002880:	f04f 33ff 	mov.w	r3, #4294967295
 8002884:	2200      	movs	r2, #0
 8002886:	f007 f9d9 	bl	8009c3c <osMessageQueuePut>
				  counter++;
 800288a:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 800288e:	3301      	adds	r3, #1
 8002890:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
				  goto start;
 8002894:	e6c9      	b.n	800262a <StartMQTTConnectTask+0x36>
			  }
		  }
		  osDelay(100);
 8002896:	2064      	movs	r0, #100	; 0x64
 8002898:	f006 fe53 	bl	8009542 <osDelay>

		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 800289c:	2264      	movs	r2, #100	; 0x64
 800289e:	2100      	movs	r1, #0
 80028a0:	4822      	ldr	r0, [pc, #136]	; (800292c <StartMQTTConnectTask+0x338>)
 80028a2:	f00a fd93 	bl	800d3cc <memset>
		  sprintf(send_MQTT_message,"AT+CIPSEND=%d\r\n\0", strlen(TOPIC) + 7);
 80028a6:	4830      	ldr	r0, [pc, #192]	; (8002968 <StartMQTTConnectTask+0x374>)
 80028a8:	f7fd fcb2 	bl	8000210 <strlen>
 80028ac:	4603      	mov	r3, r0
 80028ae:	1dda      	adds	r2, r3, #7
 80028b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80028b4:	492d      	ldr	r1, [pc, #180]	; (800296c <StartMQTTConnectTask+0x378>)
 80028b6:	4618      	mov	r0, r3
 80028b8:	f00a fdc4 	bl	800d444 <siprintf>
		  HAL_UART_Transmit_DMA(&huart6, send_MQTT_message, strlen(send_MQTT_message));
 80028bc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7fd fca5 	bl	8000210 <strlen>
 80028c6:	4603      	mov	r3, r0
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80028ce:	4619      	mov	r1, r3
 80028d0:	4815      	ldr	r0, [pc, #84]	; (8002928 <StartMQTTConnectTask+0x334>)
 80028d2:	f005 fa71 	bl	8007db8 <HAL_UART_Transmit_DMA>
		  ans = SIM800_Ans(">");
 80028d6:	481d      	ldr	r0, [pc, #116]	; (800294c <StartMQTTConnectTask+0x358>)
 80028d8:	f7fe ffe0 	bl	800189c <SIM800_Ans>
 80028dc:	4603      	mov	r3, r0
 80028de:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
		  if (!ans)
 80028e2:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d144      	bne.n	8002974 <StartMQTTConnectTask+0x380>
		  {
			  strcpy(&(msg.str), "FAILE_send1\r\n\0");
 80028ea:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80028ee:	4a20      	ldr	r2, [pc, #128]	; (8002970 <StartMQTTConnectTask+0x37c>)
 80028f0:	461c      	mov	r4, r3
 80028f2:	4613      	mov	r3, r2
 80028f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028f6:	c407      	stmia	r4!, {r0, r1, r2}
 80028f8:	8023      	strh	r3, [r4, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 80028fa:	4b11      	ldr	r3, [pc, #68]	; (8002940 <StartMQTTConnectTask+0x34c>)
 80028fc:	6818      	ldr	r0, [r3, #0]
 80028fe:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002902:	f04f 33ff 	mov.w	r3, #4294967295
 8002906:	2200      	movs	r2, #0
 8002908:	f007 f998 	bl	8009c3c <osMessageQueuePut>
			  counter++;
 800290c:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8002910:	3301      	adds	r3, #1
 8002912:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
			  goto start;
 8002916:	e688      	b.n	800262a <StartMQTTConnectTask+0x36>
 8002918:	200003a4 	.word	0x200003a4
 800291c:	200003b0 	.word	0x200003b0
 8002920:	200003b2 	.word	0x200003b2
 8002924:	20000384 	.word	0x20000384
 8002928:	200001a8 	.word	0x200001a8
 800292c:	20000434 	.word	0x20000434
 8002930:	0800e964 	.word	0x0800e964
 8002934:	200003d0 	.word	0x200003d0
 8002938:	0800e850 	.word	0x0800e850
 800293c:	0800e990 	.word	0x0800e990
 8002940:	20000390 	.word	0x20000390
 8002944:	0800e9a4 	.word	0x0800e9a4
 8002948:	0800e9b8 	.word	0x0800e9b8
 800294c:	0800e7d4 	.word	0x0800e7d4
 8002950:	0800e9cc 	.word	0x0800e9cc
 8002954:	0800ea7c 	.word	0x0800ea7c
 8002958:	0800e9dc 	.word	0x0800e9dc
 800295c:	0800e9ec 	.word	0x0800e9ec
 8002960:	20000008 	.word	0x20000008
 8002964:	0800ea00 	.word	0x0800ea00
 8002968:	20000010 	.word	0x20000010
 800296c:	0800e7c0 	.word	0x0800e7c0
 8002970:	0800ea14 	.word	0x0800ea14
		  }
		  osDelay(100);
 8002974:	2064      	movs	r0, #100	; 0x64
 8002976:	f006 fde4 	bl	8009542 <osDelay>
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 800297a:	2264      	movs	r2, #100	; 0x64
 800297c:	2100      	movs	r1, #0
 800297e:	486f      	ldr	r0, [pc, #444]	; (8002b3c <StartMQTTConnectTask+0x548>)
 8002980:	f00a fd24 	bl	800d3cc <memset>

		  //create packet to subscribe on topic
		  send_MQTT_message[0] = 0x82;
 8002984:	2382      	movs	r3, #130	; 0x82
 8002986:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
		  send_MQTT_message[1] = strlen(TOPIC) + 5;
 800298a:	486d      	ldr	r0, [pc, #436]	; (8002b40 <StartMQTTConnectTask+0x54c>)
 800298c:	f7fd fc40 	bl	8000210 <strlen>
 8002990:	4603      	mov	r3, r0
 8002992:	b2db      	uxtb	r3, r3
 8002994:	3305      	adds	r3, #5
 8002996:	b2db      	uxtb	r3, r3
 8002998:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
		  send_MQTT_message[2] = 0;
 800299c:	2300      	movs	r3, #0
 800299e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		  send_MQTT_message[3] = 1;
 80029a2:	2301      	movs	r3, #1
 80029a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		  send_MQTT_message[4] = 0;
 80029a8:	2300      	movs	r3, #0
 80029aa:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
		  send_MQTT_message[5] = strlen(TOPIC);
 80029ae:	4864      	ldr	r0, [pc, #400]	; (8002b40 <StartMQTTConnectTask+0x54c>)
 80029b0:	f7fd fc2e 	bl	8000210 <strlen>
 80029b4:	4603      	mov	r3, r0
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
		  sprintf(send_MQTT_message + 6,"%s\0",TOPIC);
 80029bc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80029c0:	3306      	adds	r3, #6
 80029c2:	4a5f      	ldr	r2, [pc, #380]	; (8002b40 <StartMQTTConnectTask+0x54c>)
 80029c4:	495f      	ldr	r1, [pc, #380]	; (8002b44 <StartMQTTConnectTask+0x550>)
 80029c6:	4618      	mov	r0, r3
 80029c8:	f00a fd3c 	bl	800d444 <siprintf>
		  HAL_UART_Transmit_DMA(&huart6, send_MQTT_message, strlen(TOPIC) + 7);
 80029cc:	485c      	ldr	r0, [pc, #368]	; (8002b40 <StartMQTTConnectTask+0x54c>)
 80029ce:	f7fd fc1f 	bl	8000210 <strlen>
 80029d2:	4603      	mov	r3, r0
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	3307      	adds	r3, #7
 80029d8:	b29a      	uxth	r2, r3
 80029da:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80029de:	4619      	mov	r1, r3
 80029e0:	4859      	ldr	r0, [pc, #356]	; (8002b48 <StartMQTTConnectTask+0x554>)
 80029e2:	f005 f9e9 	bl	8007db8 <HAL_UART_Transmit_DMA>
		  ans = SIM800_Ans(send_MQTT_message);
 80029e6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7fe ff56 	bl	800189c <SIM800_Ans>
 80029f0:	4603      	mov	r3, r0
 80029f2:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
		  if (!ans)
 80029f6:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d116      	bne.n	8002a2c <StartMQTTConnectTask+0x438>
		  {
			  strcpy(&(msg.str), "FAILE_send2\r\n\0");
 80029fe:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002a02:	4a52      	ldr	r2, [pc, #328]	; (8002b4c <StartMQTTConnectTask+0x558>)
 8002a04:	461c      	mov	r4, r3
 8002a06:	4613      	mov	r3, r2
 8002a08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a0a:	c407      	stmia	r4!, {r0, r1, r2}
 8002a0c:	8023      	strh	r3, [r4, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8002a0e:	4b50      	ldr	r3, [pc, #320]	; (8002b50 <StartMQTTConnectTask+0x55c>)
 8002a10:	6818      	ldr	r0, [r3, #0]
 8002a12:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002a16:	f04f 33ff 	mov.w	r3, #4294967295
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f007 f90e 	bl	8009c3c <osMessageQueuePut>
			  counter++;
 8002a20:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8002a24:	3301      	adds	r3, #1
 8002a26:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
			  goto start;
 8002a2a:	e5fe      	b.n	800262a <StartMQTTConnectTask+0x36>
		  }
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002a2c:	2264      	movs	r2, #100	; 0x64
 8002a2e:	2100      	movs	r1, #0
 8002a30:	4842      	ldr	r0, [pc, #264]	; (8002b3c <StartMQTTConnectTask+0x548>)
 8002a32:	f00a fccb 	bl	800d3cc <memset>
		  ans = SIM800_Ans(TOPIC_ASK);
 8002a36:	4847      	ldr	r0, [pc, #284]	; (8002b54 <StartMQTTConnectTask+0x560>)
 8002a38:	f7fe ff30 	bl	800189c <SIM800_Ans>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
		  if (!ans)
 8002a42:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d125      	bne.n	8002a96 <StartMQTTConnectTask+0x4a2>
		  {
			  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002a4a:	2264      	movs	r2, #100	; 0x64
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	483b      	ldr	r0, [pc, #236]	; (8002b3c <StartMQTTConnectTask+0x548>)
 8002a50:	f00a fcbc 	bl	800d3cc <memset>
			  ans = SIM800_Ans(TOPIC_ASK);
 8002a54:	483f      	ldr	r0, [pc, #252]	; (8002b54 <StartMQTTConnectTask+0x560>)
 8002a56:	f7fe ff21 	bl	800189c <SIM800_Ans>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
			  if (!ans)
 8002a60:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d116      	bne.n	8002a96 <StartMQTTConnectTask+0x4a2>
			  {
				  strcpy(&(msg.str), "FAILE_send3\r\n\0");
 8002a68:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002a6c:	4a3a      	ldr	r2, [pc, #232]	; (8002b58 <StartMQTTConnectTask+0x564>)
 8002a6e:	461c      	mov	r4, r3
 8002a70:	4613      	mov	r3, r2
 8002a72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a74:	c407      	stmia	r4!, {r0, r1, r2}
 8002a76:	8023      	strh	r3, [r4, #0]
				  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8002a78:	4b35      	ldr	r3, [pc, #212]	; (8002b50 <StartMQTTConnectTask+0x55c>)
 8002a7a:	6818      	ldr	r0, [r3, #0]
 8002a7c:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002a80:	f04f 33ff 	mov.w	r3, #4294967295
 8002a84:	2200      	movs	r2, #0
 8002a86:	f007 f8d9 	bl	8009c3c <osMessageQueuePut>
				  counter++;
 8002a8a:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8002a8e:	3301      	adds	r3, #1
 8002a90:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
				  goto start;
 8002a94:	e5c9      	b.n	800262a <StartMQTTConnectTask+0x36>
			  }
		  }


		  strcpy(&(msg.str), "MQTT_connect_OK\r\n\0");
 8002a96:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002a9a:	4a30      	ldr	r2, [pc, #192]	; (8002b5c <StartMQTTConnectTask+0x568>)
 8002a9c:	461c      	mov	r4, r3
 8002a9e:	4615      	mov	r5, r2
 8002aa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002aa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002aa4:	682b      	ldr	r3, [r5, #0]
 8002aa6:	8023      	strh	r3, [r4, #0]
		  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8002aa8:	4b29      	ldr	r3, [pc, #164]	; (8002b50 <StartMQTTConnectTask+0x55c>)
 8002aaa:	6818      	ldr	r0, [r3, #0]
 8002aac:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f007 f8c1 	bl	8009c3c <osMessageQueuePut>

		  Broker_connect = 1;
 8002aba:	4b29      	ldr	r3, [pc, #164]	; (8002b60 <StartMQTTConnectTask+0x56c>)
 8002abc:	2201      	movs	r2, #1
 8002abe:	701a      	strb	r2, [r3, #0]
		  osTimerStart(PingTimerHandle, PING_TIME); //start ping timer
 8002ac0:	4b28      	ldr	r3, [pc, #160]	; (8002b64 <StartMQTTConnectTask+0x570>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f24c 3150 	movw	r1, #50000	; 0xc350
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f006 fde7 	bl	800969c <osTimerStart>
		  osTimerStart(DataTimerHandle, GET_DATA_PERIOD); //start ping timer
 8002ace:	4b26      	ldr	r3, [pc, #152]	; (8002b68 <StartMQTTConnectTask+0x574>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f64e 2160 	movw	r1, #60000	; 0xea60
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f006 fde0 	bl	800969c <osTimerStart>
		  HAL_UART_Receive_DMA(&huart6, SIM800BuffRx, BUFF_SIM_SIZE); //start receive messages
 8002adc:	2264      	movs	r2, #100	; 0x64
 8002ade:	4917      	ldr	r1, [pc, #92]	; (8002b3c <StartMQTTConnectTask+0x548>)
 8002ae0:	4819      	ldr	r0, [pc, #100]	; (8002b48 <StartMQTTConnectTask+0x554>)
 8002ae2:	f005 f9e7 	bl	8007eb4 <HAL_UART_Receive_DMA>
		  Tech_ans_wait = 0;
 8002ae6:	4b21      	ldr	r3, [pc, #132]	; (8002b6c <StartMQTTConnectTask+0x578>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	701a      	strb	r2, [r3, #0]

		  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 0);
 8002aec:	2200      	movs	r2, #0
 8002aee:	2110      	movs	r1, #16
 8002af0:	481f      	ldr	r0, [pc, #124]	; (8002b70 <StartMQTTConnectTask+0x57c>)
 8002af2:	f002 fbff 	bl	80052f4 <HAL_GPIO_WritePin>
		  //start receiving data from broker
		  osMutexRelease(UART1MutexHandle);
 8002af6:	4b1f      	ldr	r3, [pc, #124]	; (8002b74 <StartMQTTConnectTask+0x580>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f006 fecd 	bl	800989a <osMutexRelease>
		  PINGTaskHandle = osThreadNew(PINGStartTask, NULL, &PINGTask_attributes);
 8002b00:	4a1d      	ldr	r2, [pc, #116]	; (8002b78 <StartMQTTConnectTask+0x584>)
 8002b02:	2100      	movs	r1, #0
 8002b04:	481d      	ldr	r0, [pc, #116]	; (8002b7c <StartMQTTConnectTask+0x588>)
 8002b06:	f006 fc5d 	bl	80093c4 <osThreadNew>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	4a1c      	ldr	r2, [pc, #112]	; (8002b80 <StartMQTTConnectTask+0x58c>)
 8002b0e:	6013      	str	r3, [r2, #0]
		  sprintf(&(msg.str), "On the line, Firmware V0.94\r\n\0");
 8002b10:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002b14:	491b      	ldr	r1, [pc, #108]	; (8002b84 <StartMQTTConnectTask+0x590>)
 8002b16:	4618      	mov	r0, r3
 8002b18:	f00a fc94 	bl	800d444 <siprintf>
		  osMessageQueuePut(SIM800SendQueueHandle, &msg, 0, osWaitForever);
 8002b1c:	4b1a      	ldr	r3, [pc, #104]	; (8002b88 <StartMQTTConnectTask+0x594>)
 8002b1e:	6818      	ldr	r0, [r3, #0]
 8002b20:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002b24:	f04f 33ff 	mov.w	r3, #4294967295
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f007 f887 	bl	8009c3c <osMessageQueuePut>
		  //HAL_UART_Receive_DMA(&huart1, SIM800BuffRx, BUFF_SIM_SIZE); //start receive messages
		  osThreadTerminate(MQTTConnectTaskHandle);
 8002b2e:	4b17      	ldr	r3, [pc, #92]	; (8002b8c <StartMQTTConnectTask+0x598>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f006 fcd8 	bl	80094e8 <osThreadTerminate>
	  if (osMutexAcquire(UART1MutexHandle, osWaitForever) == osOK)
 8002b38:	e56c      	b.n	8002614 <StartMQTTConnectTask+0x20>
 8002b3a:	bf00      	nop
 8002b3c:	20000434 	.word	0x20000434
 8002b40:	20000010 	.word	0x20000010
 8002b44:	0800ea24 	.word	0x0800ea24
 8002b48:	200001a8 	.word	0x200001a8
 8002b4c:	0800ea28 	.word	0x0800ea28
 8002b50:	20000390 	.word	0x20000390
 8002b54:	20000024 	.word	0x20000024
 8002b58:	0800ea38 	.word	0x0800ea38
 8002b5c:	0800ea48 	.word	0x0800ea48
 8002b60:	200003b4 	.word	0x200003b4
 8002b64:	2000039c 	.word	0x2000039c
 8002b68:	200003a0 	.word	0x200003a0
 8002b6c:	200003b5 	.word	0x200003b5
 8002b70:	40020800 	.word	0x40020800
 8002b74:	200003a4 	.word	0x200003a4
 8002b78:	0800f190 	.word	0x0800f190
 8002b7c:	08001e0d 	.word	0x08001e0d
 8002b80:	2000037c 	.word	0x2000037c
 8002b84:	0800ea5c 	.word	0x0800ea5c
 8002b88:	20000394 	.word	0x20000394
 8002b8c:	20000384 	.word	0x20000384

08002b90 <StartMessHandlerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMessHandlerTask */
void StartMessHandlerTask(void *argument)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b0a6      	sub	sp, #152	; 0x98
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
	message_type msg;
	message_type msg2;
  /* Infinite loop */
  for(;;)
  {
	  if (osMessageQueueGet(RxSIM800QueueHandle, &msg, 0, osWaitForever) == osOK)
 8002b98:	4b48      	ldr	r3, [pc, #288]	; (8002cbc <StartMessHandlerTask+0x12c>)
 8002b9a:	6818      	ldr	r0, [r3, #0]
 8002b9c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f007 f8a9 	bl	8009cfc <osMessageQueueGet>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1f3      	bne.n	8002b98 <StartMessHandlerTask+0x8>
	  {

		sprintf(&(msg2.str), "RX\r\n\0");
 8002bb0:	f107 0308 	add.w	r3, r7, #8
 8002bb4:	4942      	ldr	r1, [pc, #264]	; (8002cc0 <StartMessHandlerTask+0x130>)
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f00a fc44 	bl	800d444 <siprintf>
		osMessageQueuePut(SIM800SendQueueHandle, &msg2, 0, osWaitForever);
 8002bbc:	4b41      	ldr	r3, [pc, #260]	; (8002cc4 <StartMessHandlerTask+0x134>)
 8002bbe:	6818      	ldr	r0, [r3, #0]
 8002bc0:	f107 0108 	add.w	r1, r7, #8
 8002bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f007 f837 	bl	8009c3c <osMessageQueuePut>
		if (String_in_String(msg.str,MESSAGE_TYPE_BUFF_SIZE,";;on"))
 8002bce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002bd2:	4a3d      	ldr	r2, [pc, #244]	; (8002cc8 <StartMessHandlerTask+0x138>)
 8002bd4:	2146      	movs	r1, #70	; 0x46
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7fe fdb2 	bl	8001740 <String_in_String>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d005      	beq.n	8002bee <StartMessHandlerTask+0x5e>
		{
			HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, 0);
 8002be2:	2200      	movs	r2, #0
 8002be4:	2110      	movs	r1, #16
 8002be6:	4839      	ldr	r0, [pc, #228]	; (8002ccc <StartMessHandlerTask+0x13c>)
 8002be8:	f002 fb84 	bl	80052f4 <HAL_GPIO_WritePin>
 8002bec:	e7d4      	b.n	8002b98 <StartMessHandlerTask+0x8>
		}
		else if (String_in_String(msg.str,MESSAGE_TYPE_BUFF_SIZE,";;off"))
 8002bee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002bf2:	4a37      	ldr	r2, [pc, #220]	; (8002cd0 <StartMessHandlerTask+0x140>)
 8002bf4:	2146      	movs	r1, #70	; 0x46
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fe fda2 	bl	8001740 <String_in_String>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d005      	beq.n	8002c0e <StartMessHandlerTask+0x7e>
		{
			HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, 1);
 8002c02:	2201      	movs	r2, #1
 8002c04:	2110      	movs	r1, #16
 8002c06:	4831      	ldr	r0, [pc, #196]	; (8002ccc <StartMessHandlerTask+0x13c>)
 8002c08:	f002 fb74 	bl	80052f4 <HAL_GPIO_WritePin>
 8002c0c:	e7c4      	b.n	8002b98 <StartMessHandlerTask+0x8>
		}
		else if (String_in_String(msg.str,MESSAGE_TYPE_BUFF_SIZE,";;data"))
 8002c0e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002c12:	4a30      	ldr	r2, [pc, #192]	; (8002cd4 <StartMessHandlerTask+0x144>)
 8002c14:	2146      	movs	r1, #70	; 0x46
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7fe fd92 	bl	8001740 <String_in_String>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d003      	beq.n	8002c2a <StartMessHandlerTask+0x9a>
		{
			Get_data = 1;
 8002c22:	4b2d      	ldr	r3, [pc, #180]	; (8002cd8 <StartMessHandlerTask+0x148>)
 8002c24:	2201      	movs	r2, #1
 8002c26:	701a      	strb	r2, [r3, #0]
 8002c28:	e7b6      	b.n	8002b98 <StartMessHandlerTask+0x8>
		}
		else if (String_in_String(msg.str,MESSAGE_TYPE_BUFF_SIZE,";;updt"))
 8002c2a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002c2e:	4a2b      	ldr	r2, [pc, #172]	; (8002cdc <StartMessHandlerTask+0x14c>)
 8002c30:	2146      	movs	r1, #70	; 0x46
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7fe fd84 	bl	8001740 <String_in_String>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d0ac      	beq.n	8002b98 <StartMessHandlerTask+0x8>
		{
			if (osMutexAcquire(UART1MutexHandle, osWaitForever) == osOK)
 8002c3e:	4b28      	ldr	r3, [pc, #160]	; (8002ce0 <StartMessHandlerTask+0x150>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f04f 31ff 	mov.w	r1, #4294967295
 8002c46:	4618      	mov	r0, r3
 8002c48:	f006 fddc 	bl	8009804 <osMutexAcquire>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1a2      	bne.n	8002b98 <StartMessHandlerTask+0x8>
		    {
				memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002c52:	2264      	movs	r2, #100	; 0x64
 8002c54:	2100      	movs	r1, #0
 8002c56:	4823      	ldr	r0, [pc, #140]	; (8002ce4 <StartMessHandlerTask+0x154>)
 8002c58:	f00a fbb8 	bl	800d3cc <memset>
				sprintf(str_SIM800,"AT+CIPCLOSE\r\n\0");
 8002c5c:	4922      	ldr	r1, [pc, #136]	; (8002ce8 <StartMessHandlerTask+0x158>)
 8002c5e:	4823      	ldr	r0, [pc, #140]	; (8002cec <StartMessHandlerTask+0x15c>)
 8002c60:	f00a fbf0 	bl	800d444 <siprintf>
				HAL_UART_Transmit_DMA(&huart6, str_SIM800, strlen(str_SIM800));
 8002c64:	4821      	ldr	r0, [pc, #132]	; (8002cec <StartMessHandlerTask+0x15c>)
 8002c66:	f7fd fad3 	bl	8000210 <strlen>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	461a      	mov	r2, r3
 8002c70:	491e      	ldr	r1, [pc, #120]	; (8002cec <StartMessHandlerTask+0x15c>)
 8002c72:	481f      	ldr	r0, [pc, #124]	; (8002cf0 <StartMessHandlerTask+0x160>)
 8002c74:	f005 f8a0 	bl	8007db8 <HAL_UART_Transmit_DMA>
				osDelay(1000);
 8002c78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c7c:	f006 fc61 	bl	8009542 <osDelay>
				osThreadTerminate(PINGTaskHandle);
 8002c80:	4b1c      	ldr	r3, [pc, #112]	; (8002cf4 <StartMessHandlerTask+0x164>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f006 fc2f 	bl	80094e8 <osThreadTerminate>
				osThreadTerminate(SIM800SendTaskHandle);
 8002c8a:	4b1b      	ldr	r3, [pc, #108]	; (8002cf8 <StartMessHandlerTask+0x168>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f006 fc2a 	bl	80094e8 <osThreadTerminate>
				osThreadTerminate(defaultTaskHandle);
 8002c94:	4b19      	ldr	r3, [pc, #100]	; (8002cfc <StartMessHandlerTask+0x16c>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f006 fc25 	bl	80094e8 <osThreadTerminate>
				osMutexRelease(UART1MutexHandle); //release UART for SIM800
 8002c9e:	4b10      	ldr	r3, [pc, #64]	; (8002ce0 <StartMessHandlerTask+0x150>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f006 fdf9 	bl	800989a <osMutexRelease>
				myTaskGetFirmHandle = osThreadNew(StartGetFirmware, NULL, &myTaskGetFirm_attributes);
 8002ca8:	4a15      	ldr	r2, [pc, #84]	; (8002d00 <StartMessHandlerTask+0x170>)
 8002caa:	2100      	movs	r1, #0
 8002cac:	4815      	ldr	r0, [pc, #84]	; (8002d04 <StartMessHandlerTask+0x174>)
 8002cae:	f006 fb89 	bl	80093c4 <osThreadNew>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	4a14      	ldr	r2, [pc, #80]	; (8002d08 <StartMessHandlerTask+0x178>)
 8002cb6:	6013      	str	r3, [r2, #0]
	  if (osMessageQueueGet(RxSIM800QueueHandle, &msg, 0, osWaitForever) == osOK)
 8002cb8:	e76e      	b.n	8002b98 <StartMessHandlerTask+0x8>
 8002cba:	bf00      	nop
 8002cbc:	20000398 	.word	0x20000398
 8002cc0:	0800eab0 	.word	0x0800eab0
 8002cc4:	20000394 	.word	0x20000394
 8002cc8:	0800eab8 	.word	0x0800eab8
 8002ccc:	40020000 	.word	0x40020000
 8002cd0:	0800eac0 	.word	0x0800eac0
 8002cd4:	0800eac8 	.word	0x0800eac8
 8002cd8:	200003b6 	.word	0x200003b6
 8002cdc:	0800ead0 	.word	0x0800ead0
 8002ce0:	200003a4 	.word	0x200003a4
 8002ce4:	20000434 	.word	0x20000434
 8002ce8:	0800ead8 	.word	0x0800ead8
 8002cec:	200003d0 	.word	0x200003d0
 8002cf0:	200001a8 	.word	0x200001a8
 8002cf4:	2000037c 	.word	0x2000037c
 8002cf8:	20000378 	.word	0x20000378
 8002cfc:	2000036c 	.word	0x2000036c
 8002d00:	0800f220 	.word	0x0800f220
 8002d04:	08002d0d 	.word	0x08002d0d
 8002d08:	2000038c 	.word	0x2000038c

08002d0c <StartGetFirmware>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGetFirmware */
void StartGetFirmware(void *argument)
{
 8002d0c:	b590      	push	{r4, r7, lr}
 8002d0e:	b0cb      	sub	sp, #300	; 0x12c
 8002d10:	af02      	add	r7, sp, #8
 8002d12:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002d16:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002d1a:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartGetFirmware */
	message_type msg; // string for debug message
	uint8_t ans; //is one string in another
	uint8_t send_MQTT_message[BUFF_SIM_SIZE] = {}; //message to SIM800
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d20:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002d24:	2260      	movs	r2, #96	; 0x60
 8002d26:	2100      	movs	r1, #0
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f00a fb4f 	bl	800d3cc <memset>
	uint32_t sector_of_firmware = 30;
 8002d2e:	231e      	movs	r3, #30
 8002d30:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	uint8_t tmp2[30];
	uint8_t tmp3[30];
  /* Infinite loop */
  for(;;)
  {
	  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 8002d34:	4bc0      	ldr	r3, [pc, #768]	; (8003038 <StartGetFirmware+0x32c>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68da      	ldr	r2, [r3, #12]
 8002d3a:	4bbf      	ldr	r3, [pc, #764]	; (8003038 <StartGetFirmware+0x32c>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f042 0210 	orr.w	r2, r2, #16
 8002d42:	60da      	str	r2, [r3, #12]
	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002d44:	2264      	movs	r2, #100	; 0x64
 8002d46:	2100      	movs	r1, #0
 8002d48:	48bc      	ldr	r0, [pc, #752]	; (800303c <StartGetFirmware+0x330>)
 8002d4a:	f00a fb3f 	bl	800d3cc <memset>
	  sprintf(str_SIM800,"AT+FTPMODE=1\r\n\0");
 8002d4e:	49bc      	ldr	r1, [pc, #752]	; (8003040 <StartGetFirmware+0x334>)
 8002d50:	48bc      	ldr	r0, [pc, #752]	; (8003044 <StartGetFirmware+0x338>)
 8002d52:	f00a fb77 	bl	800d444 <siprintf>
	  HAL_UART_Transmit_DMA(&huart6, str_SIM800, strlen(str_SIM800));
 8002d56:	48bb      	ldr	r0, [pc, #748]	; (8003044 <StartGetFirmware+0x338>)
 8002d58:	f7fd fa5a 	bl	8000210 <strlen>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	461a      	mov	r2, r3
 8002d62:	49b8      	ldr	r1, [pc, #736]	; (8003044 <StartGetFirmware+0x338>)
 8002d64:	48b4      	ldr	r0, [pc, #720]	; (8003038 <StartGetFirmware+0x32c>)
 8002d66:	f005 f827 	bl	8007db8 <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 8002d6a:	48b7      	ldr	r0, [pc, #732]	; (8003048 <StartGetFirmware+0x33c>)
 8002d6c:	f7fe fd96 	bl	800189c <SIM800_Ans>
 8002d70:	4603      	mov	r3, r0
 8002d72:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
	  if (!ans)
 8002d76:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d11d      	bne.n	8002dba <StartGetFirmware+0xae>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002d7e:	2264      	movs	r2, #100	; 0x64
 8002d80:	2100      	movs	r1, #0
 8002d82:	48ae      	ldr	r0, [pc, #696]	; (800303c <StartGetFirmware+0x330>)
 8002d84:	f00a fb22 	bl	800d3cc <memset>
		  ans = SIM800_Ans("OK");
 8002d88:	48af      	ldr	r0, [pc, #700]	; (8003048 <StartGetFirmware+0x33c>)
 8002d8a:	f7fe fd87 	bl	800189c <SIM800_Ans>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
		  if (!ans)
 8002d94:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d10e      	bne.n	8002dba <StartGetFirmware+0xae>
		  {
			  strcpy(&(msg.str), "FTPMODE\r\n\0");
 8002d9c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002da0:	4aaa      	ldr	r2, [pc, #680]	; (800304c <StartGetFirmware+0x340>)
 8002da2:	ca07      	ldmia	r2, {r0, r1, r2}
 8002da4:	c303      	stmia	r3!, {r0, r1}
 8002da6:	801a      	strh	r2, [r3, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8002da8:	4ba9      	ldr	r3, [pc, #676]	; (8003050 <StartGetFirmware+0x344>)
 8002daa:	6818      	ldr	r0, [r3, #0]
 8002dac:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8002db0:	f04f 33ff 	mov.w	r3, #4294967295
 8002db4:	2200      	movs	r2, #0
 8002db6:	f006 ff41 	bl	8009c3c <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 8002dba:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002dbe:	f006 fbc0 	bl	8009542 <osDelay>
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
		  }
	  }
	  osDelay(300);*/

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002dc2:	2264      	movs	r2, #100	; 0x64
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	489d      	ldr	r0, [pc, #628]	; (800303c <StartGetFirmware+0x330>)
 8002dc8:	f00a fb00 	bl	800d3cc <memset>
	  sprintf(str_SIM800,"AT+FTPTYPE=I\r\n\0");
 8002dcc:	49a1      	ldr	r1, [pc, #644]	; (8003054 <StartGetFirmware+0x348>)
 8002dce:	489d      	ldr	r0, [pc, #628]	; (8003044 <StartGetFirmware+0x338>)
 8002dd0:	f00a fb38 	bl	800d444 <siprintf>
	  HAL_UART_Transmit_DMA(&huart6, str_SIM800, strlen(str_SIM800));
 8002dd4:	489b      	ldr	r0, [pc, #620]	; (8003044 <StartGetFirmware+0x338>)
 8002dd6:	f7fd fa1b 	bl	8000210 <strlen>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	461a      	mov	r2, r3
 8002de0:	4998      	ldr	r1, [pc, #608]	; (8003044 <StartGetFirmware+0x338>)
 8002de2:	4895      	ldr	r0, [pc, #596]	; (8003038 <StartGetFirmware+0x32c>)
 8002de4:	f004 ffe8 	bl	8007db8 <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 8002de8:	4897      	ldr	r0, [pc, #604]	; (8003048 <StartGetFirmware+0x33c>)
 8002dea:	f7fe fd57 	bl	800189c <SIM800_Ans>
 8002dee:	4603      	mov	r3, r0
 8002df0:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
	  if (!ans)
 8002df4:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d11d      	bne.n	8002e38 <StartGetFirmware+0x12c>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002dfc:	2264      	movs	r2, #100	; 0x64
 8002dfe:	2100      	movs	r1, #0
 8002e00:	488e      	ldr	r0, [pc, #568]	; (800303c <StartGetFirmware+0x330>)
 8002e02:	f00a fae3 	bl	800d3cc <memset>
		  ans = SIM800_Ans("OK");
 8002e06:	4890      	ldr	r0, [pc, #576]	; (8003048 <StartGetFirmware+0x33c>)
 8002e08:	f7fe fd48 	bl	800189c <SIM800_Ans>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
		  if (!ans)
 8002e12:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d10e      	bne.n	8002e38 <StartGetFirmware+0x12c>
		  {
			  strcpy(&(msg.str), "FTPTYPE\r\n\0");
 8002e1a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002e1e:	4a8e      	ldr	r2, [pc, #568]	; (8003058 <StartGetFirmware+0x34c>)
 8002e20:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e22:	c303      	stmia	r3!, {r0, r1}
 8002e24:	801a      	strh	r2, [r3, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8002e26:	4b8a      	ldr	r3, [pc, #552]	; (8003050 <StartGetFirmware+0x344>)
 8002e28:	6818      	ldr	r0, [r3, #0]
 8002e2a:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8002e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e32:	2200      	movs	r2, #0
 8002e34:	f006 ff02 	bl	8009c3c <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 8002e38:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002e3c:	f006 fb81 	bl	8009542 <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002e40:	2264      	movs	r2, #100	; 0x64
 8002e42:	2100      	movs	r1, #0
 8002e44:	487d      	ldr	r0, [pc, #500]	; (800303c <StartGetFirmware+0x330>)
 8002e46:	f00a fac1 	bl	800d3cc <memset>
	  sprintf(str_SIM800,"AT+SAPBR=3,1,CONTYPE,GPRS\r\n\0");
 8002e4a:	4984      	ldr	r1, [pc, #528]	; (800305c <StartGetFirmware+0x350>)
 8002e4c:	487d      	ldr	r0, [pc, #500]	; (8003044 <StartGetFirmware+0x338>)
 8002e4e:	f00a faf9 	bl	800d444 <siprintf>
	  HAL_UART_Transmit_DMA(&huart6, str_SIM800, strlen(str_SIM800));
 8002e52:	487c      	ldr	r0, [pc, #496]	; (8003044 <StartGetFirmware+0x338>)
 8002e54:	f7fd f9dc 	bl	8000210 <strlen>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	4979      	ldr	r1, [pc, #484]	; (8003044 <StartGetFirmware+0x338>)
 8002e60:	4875      	ldr	r0, [pc, #468]	; (8003038 <StartGetFirmware+0x32c>)
 8002e62:	f004 ffa9 	bl	8007db8 <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 8002e66:	4878      	ldr	r0, [pc, #480]	; (8003048 <StartGetFirmware+0x33c>)
 8002e68:	f7fe fd18 	bl	800189c <SIM800_Ans>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
	  if (!ans)
 8002e72:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d11e      	bne.n	8002eb8 <StartGetFirmware+0x1ac>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002e7a:	2264      	movs	r2, #100	; 0x64
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	486f      	ldr	r0, [pc, #444]	; (800303c <StartGetFirmware+0x330>)
 8002e80:	f00a faa4 	bl	800d3cc <memset>
		  ans = SIM800_Ans("OK");
 8002e84:	4870      	ldr	r0, [pc, #448]	; (8003048 <StartGetFirmware+0x33c>)
 8002e86:	f7fe fd09 	bl	800189c <SIM800_Ans>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
		  if (!ans)
 8002e90:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d10f      	bne.n	8002eb8 <StartGetFirmware+0x1ac>
		  {
			  strcpy(&(msg.str), "SAPBR\r\n\0");
 8002e98:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002e9c:	4a70      	ldr	r2, [pc, #448]	; (8003060 <StartGetFirmware+0x354>)
 8002e9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ea2:	e883 0003 	stmia.w	r3, {r0, r1}
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8002ea6:	4b6a      	ldr	r3, [pc, #424]	; (8003050 <StartGetFirmware+0x344>)
 8002ea8:	6818      	ldr	r0, [r3, #0]
 8002eaa:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8002eae:	f04f 33ff 	mov.w	r3, #4294967295
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f006 fec2 	bl	8009c3c <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 8002eb8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002ebc:	f006 fb41 	bl	8009542 <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002ec0:	2264      	movs	r2, #100	; 0x64
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	485d      	ldr	r0, [pc, #372]	; (800303c <StartGetFirmware+0x330>)
 8002ec6:	f00a fa81 	bl	800d3cc <memset>
	  sprintf(str_SIM800,"AT+SAPBR=3,1,APN,internet.beeline.ru\r\n\0");
 8002eca:	4966      	ldr	r1, [pc, #408]	; (8003064 <StartGetFirmware+0x358>)
 8002ecc:	485d      	ldr	r0, [pc, #372]	; (8003044 <StartGetFirmware+0x338>)
 8002ece:	f00a fab9 	bl	800d444 <siprintf>
	  HAL_UART_Transmit_DMA(&huart6, str_SIM800, strlen(str_SIM800));
 8002ed2:	485c      	ldr	r0, [pc, #368]	; (8003044 <StartGetFirmware+0x338>)
 8002ed4:	f7fd f99c 	bl	8000210 <strlen>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	461a      	mov	r2, r3
 8002ede:	4959      	ldr	r1, [pc, #356]	; (8003044 <StartGetFirmware+0x338>)
 8002ee0:	4855      	ldr	r0, [pc, #340]	; (8003038 <StartGetFirmware+0x32c>)
 8002ee2:	f004 ff69 	bl	8007db8 <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 8002ee6:	4858      	ldr	r0, [pc, #352]	; (8003048 <StartGetFirmware+0x33c>)
 8002ee8:	f7fe fcd8 	bl	800189c <SIM800_Ans>
 8002eec:	4603      	mov	r3, r0
 8002eee:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
	  if (!ans)
 8002ef2:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d11e      	bne.n	8002f38 <StartGetFirmware+0x22c>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002efa:	2264      	movs	r2, #100	; 0x64
 8002efc:	2100      	movs	r1, #0
 8002efe:	484f      	ldr	r0, [pc, #316]	; (800303c <StartGetFirmware+0x330>)
 8002f00:	f00a fa64 	bl	800d3cc <memset>
		  ans = SIM800_Ans("OK");
 8002f04:	4850      	ldr	r0, [pc, #320]	; (8003048 <StartGetFirmware+0x33c>)
 8002f06:	f7fe fcc9 	bl	800189c <SIM800_Ans>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
		  if (!ans)
 8002f10:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d10f      	bne.n	8002f38 <StartGetFirmware+0x22c>
		  {
			  strcpy(&(msg.str), "SAPBR\r\n\0");
 8002f18:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002f1c:	4a50      	ldr	r2, [pc, #320]	; (8003060 <StartGetFirmware+0x354>)
 8002f1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f22:	e883 0003 	stmia.w	r3, {r0, r1}
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8002f26:	4b4a      	ldr	r3, [pc, #296]	; (8003050 <StartGetFirmware+0x344>)
 8002f28:	6818      	ldr	r0, [r3, #0]
 8002f2a:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8002f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f32:	2200      	movs	r2, #0
 8002f34:	f006 fe82 	bl	8009c3c <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 8002f38:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002f3c:	f006 fb01 	bl	8009542 <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002f40:	2264      	movs	r2, #100	; 0x64
 8002f42:	2100      	movs	r1, #0
 8002f44:	483d      	ldr	r0, [pc, #244]	; (800303c <StartGetFirmware+0x330>)
 8002f46:	f00a fa41 	bl	800d3cc <memset>
	  sprintf(str_SIM800,"AT+SAPBR=1,1\r\n\0");
 8002f4a:	4947      	ldr	r1, [pc, #284]	; (8003068 <StartGetFirmware+0x35c>)
 8002f4c:	483d      	ldr	r0, [pc, #244]	; (8003044 <StartGetFirmware+0x338>)
 8002f4e:	f00a fa79 	bl	800d444 <siprintf>
	  HAL_UART_Transmit_DMA(&huart6, str_SIM800, strlen(str_SIM800));
 8002f52:	483c      	ldr	r0, [pc, #240]	; (8003044 <StartGetFirmware+0x338>)
 8002f54:	f7fd f95c 	bl	8000210 <strlen>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	4939      	ldr	r1, [pc, #228]	; (8003044 <StartGetFirmware+0x338>)
 8002f60:	4835      	ldr	r0, [pc, #212]	; (8003038 <StartGetFirmware+0x32c>)
 8002f62:	f004 ff29 	bl	8007db8 <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 8002f66:	4838      	ldr	r0, [pc, #224]	; (8003048 <StartGetFirmware+0x33c>)
 8002f68:	f7fe fc98 	bl	800189c <SIM800_Ans>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
	  if (!ans)
 8002f72:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d11e      	bne.n	8002fb8 <StartGetFirmware+0x2ac>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002f7a:	2264      	movs	r2, #100	; 0x64
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	482f      	ldr	r0, [pc, #188]	; (800303c <StartGetFirmware+0x330>)
 8002f80:	f00a fa24 	bl	800d3cc <memset>
		  ans = SIM800_Ans("OK");
 8002f84:	4830      	ldr	r0, [pc, #192]	; (8003048 <StartGetFirmware+0x33c>)
 8002f86:	f7fe fc89 	bl	800189c <SIM800_Ans>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
		  if (!ans)
 8002f90:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d10f      	bne.n	8002fb8 <StartGetFirmware+0x2ac>
		  {
			  strcpy(&(msg.str), "SAPBR\r\n\0");
 8002f98:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002f9c:	4a30      	ldr	r2, [pc, #192]	; (8003060 <StartGetFirmware+0x354>)
 8002f9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002fa2:	e883 0003 	stmia.w	r3, {r0, r1}
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8002fa6:	4b2a      	ldr	r3, [pc, #168]	; (8003050 <StartGetFirmware+0x344>)
 8002fa8:	6818      	ldr	r0, [r3, #0]
 8002faa:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8002fae:	f04f 33ff 	mov.w	r3, #4294967295
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f006 fe42 	bl	8009c3c <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 8002fb8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002fbc:	f006 fac1 	bl	8009542 <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002fc0:	2264      	movs	r2, #100	; 0x64
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	481d      	ldr	r0, [pc, #116]	; (800303c <StartGetFirmware+0x330>)
 8002fc6:	f00a fa01 	bl	800d3cc <memset>
	  sprintf(str_SIM800,"AT+FTPCID=1\r\n\0");
 8002fca:	4928      	ldr	r1, [pc, #160]	; (800306c <StartGetFirmware+0x360>)
 8002fcc:	481d      	ldr	r0, [pc, #116]	; (8003044 <StartGetFirmware+0x338>)
 8002fce:	f00a fa39 	bl	800d444 <siprintf>
	  HAL_UART_Transmit_DMA(&huart6, str_SIM800, strlen(str_SIM800));
 8002fd2:	481c      	ldr	r0, [pc, #112]	; (8003044 <StartGetFirmware+0x338>)
 8002fd4:	f7fd f91c 	bl	8000210 <strlen>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	461a      	mov	r2, r3
 8002fde:	4919      	ldr	r1, [pc, #100]	; (8003044 <StartGetFirmware+0x338>)
 8002fe0:	4815      	ldr	r0, [pc, #84]	; (8003038 <StartGetFirmware+0x32c>)
 8002fe2:	f004 fee9 	bl	8007db8 <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 8002fe6:	4818      	ldr	r0, [pc, #96]	; (8003048 <StartGetFirmware+0x33c>)
 8002fe8:	f7fe fc58 	bl	800189c <SIM800_Ans>
 8002fec:	4603      	mov	r3, r0
 8002fee:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
	  if (!ans)
 8002ff2:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d13c      	bne.n	8003074 <StartGetFirmware+0x368>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002ffa:	2264      	movs	r2, #100	; 0x64
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	480f      	ldr	r0, [pc, #60]	; (800303c <StartGetFirmware+0x330>)
 8003000:	f00a f9e4 	bl	800d3cc <memset>
		  ans = SIM800_Ans("OK");
 8003004:	4810      	ldr	r0, [pc, #64]	; (8003048 <StartGetFirmware+0x33c>)
 8003006:	f7fe fc49 	bl	800189c <SIM800_Ans>
 800300a:	4603      	mov	r3, r0
 800300c:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
		  if (!ans)
 8003010:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8003014:	2b00      	cmp	r3, #0
 8003016:	d12d      	bne.n	8003074 <StartGetFirmware+0x368>
		  {
			  strcpy(&(msg.str), "FTPCID\r\n\0");
 8003018:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800301c:	4a14      	ldr	r2, [pc, #80]	; (8003070 <StartGetFirmware+0x364>)
 800301e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003020:	c303      	stmia	r3!, {r0, r1}
 8003022:	701a      	strb	r2, [r3, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8003024:	4b0a      	ldr	r3, [pc, #40]	; (8003050 <StartGetFirmware+0x344>)
 8003026:	6818      	ldr	r0, [r3, #0]
 8003028:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 800302c:	f04f 33ff 	mov.w	r3, #4294967295
 8003030:	2200      	movs	r2, #0
 8003032:	f006 fe03 	bl	8009c3c <osMessageQueuePut>
 8003036:	e01d      	b.n	8003074 <StartGetFirmware+0x368>
 8003038:	200001a8 	.word	0x200001a8
 800303c:	20000434 	.word	0x20000434
 8003040:	0800eae8 	.word	0x0800eae8
 8003044:	200003d0 	.word	0x200003d0
 8003048:	0800e850 	.word	0x0800e850
 800304c:	0800eaf8 	.word	0x0800eaf8
 8003050:	20000390 	.word	0x20000390
 8003054:	0800eb04 	.word	0x0800eb04
 8003058:	0800eb14 	.word	0x0800eb14
 800305c:	0800eb20 	.word	0x0800eb20
 8003060:	0800eb40 	.word	0x0800eb40
 8003064:	0800eb4c 	.word	0x0800eb4c
 8003068:	0800eb74 	.word	0x0800eb74
 800306c:	0800eb84 	.word	0x0800eb84
 8003070:	0800eb94 	.word	0x0800eb94
		  }
	  }
	  osDelay(300);
 8003074:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003078:	f006 fa63 	bl	8009542 <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 800307c:	2264      	movs	r2, #100	; 0x64
 800307e:	2100      	movs	r1, #0
 8003080:	48c4      	ldr	r0, [pc, #784]	; (8003394 <StartGetFirmware+0x688>)
 8003082:	f00a f9a3 	bl	800d3cc <memset>
	  sprintf(str_SIM800,"AT+FTPSERV=%s\r\n\0", DEF_IP_FTP);
 8003086:	4ac4      	ldr	r2, [pc, #784]	; (8003398 <StartGetFirmware+0x68c>)
 8003088:	49c4      	ldr	r1, [pc, #784]	; (800339c <StartGetFirmware+0x690>)
 800308a:	48c5      	ldr	r0, [pc, #788]	; (80033a0 <StartGetFirmware+0x694>)
 800308c:	f00a f9da 	bl	800d444 <siprintf>
	  HAL_UART_Transmit_DMA(&huart6, str_SIM800, strlen(str_SIM800));
 8003090:	48c3      	ldr	r0, [pc, #780]	; (80033a0 <StartGetFirmware+0x694>)
 8003092:	f7fd f8bd 	bl	8000210 <strlen>
 8003096:	4603      	mov	r3, r0
 8003098:	b29b      	uxth	r3, r3
 800309a:	461a      	mov	r2, r3
 800309c:	49c0      	ldr	r1, [pc, #768]	; (80033a0 <StartGetFirmware+0x694>)
 800309e:	48c1      	ldr	r0, [pc, #772]	; (80033a4 <StartGetFirmware+0x698>)
 80030a0:	f004 fe8a 	bl	8007db8 <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 80030a4:	48c0      	ldr	r0, [pc, #768]	; (80033a8 <StartGetFirmware+0x69c>)
 80030a6:	f7fe fbf9 	bl	800189c <SIM800_Ans>
 80030aa:	4603      	mov	r3, r0
 80030ac:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
	  if (!ans)
 80030b0:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d11d      	bne.n	80030f4 <StartGetFirmware+0x3e8>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80030b8:	2264      	movs	r2, #100	; 0x64
 80030ba:	2100      	movs	r1, #0
 80030bc:	48b5      	ldr	r0, [pc, #724]	; (8003394 <StartGetFirmware+0x688>)
 80030be:	f00a f985 	bl	800d3cc <memset>
		  ans = SIM800_Ans("OK");
 80030c2:	48b9      	ldr	r0, [pc, #740]	; (80033a8 <StartGetFirmware+0x69c>)
 80030c4:	f7fe fbea 	bl	800189c <SIM800_Ans>
 80030c8:	4603      	mov	r3, r0
 80030ca:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
		  if (!ans)
 80030ce:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10e      	bne.n	80030f4 <StartGetFirmware+0x3e8>
		  {
			  strcpy(&(msg.str), "FTPSERV\r\n\0");
 80030d6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80030da:	4ab4      	ldr	r2, [pc, #720]	; (80033ac <StartGetFirmware+0x6a0>)
 80030dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80030de:	c303      	stmia	r3!, {r0, r1}
 80030e0:	801a      	strh	r2, [r3, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 80030e2:	4bb3      	ldr	r3, [pc, #716]	; (80033b0 <StartGetFirmware+0x6a4>)
 80030e4:	6818      	ldr	r0, [r3, #0]
 80030e6:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 80030ea:	f04f 33ff 	mov.w	r3, #4294967295
 80030ee:	2200      	movs	r2, #0
 80030f0:	f006 fda4 	bl	8009c3c <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 80030f4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80030f8:	f006 fa23 	bl	8009542 <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80030fc:	2264      	movs	r2, #100	; 0x64
 80030fe:	2100      	movs	r1, #0
 8003100:	48a4      	ldr	r0, [pc, #656]	; (8003394 <StartGetFirmware+0x688>)
 8003102:	f00a f963 	bl	800d3cc <memset>
	  sprintf(str_SIM800,"AT+FTPUN=%s\r\n\0", DEF_USER_FTP);
 8003106:	4aab      	ldr	r2, [pc, #684]	; (80033b4 <StartGetFirmware+0x6a8>)
 8003108:	49ab      	ldr	r1, [pc, #684]	; (80033b8 <StartGetFirmware+0x6ac>)
 800310a:	48a5      	ldr	r0, [pc, #660]	; (80033a0 <StartGetFirmware+0x694>)
 800310c:	f00a f99a 	bl	800d444 <siprintf>
	  HAL_UART_Transmit_DMA(&huart6, str_SIM800, strlen(str_SIM800));
 8003110:	48a3      	ldr	r0, [pc, #652]	; (80033a0 <StartGetFirmware+0x694>)
 8003112:	f7fd f87d 	bl	8000210 <strlen>
 8003116:	4603      	mov	r3, r0
 8003118:	b29b      	uxth	r3, r3
 800311a:	461a      	mov	r2, r3
 800311c:	49a0      	ldr	r1, [pc, #640]	; (80033a0 <StartGetFirmware+0x694>)
 800311e:	48a1      	ldr	r0, [pc, #644]	; (80033a4 <StartGetFirmware+0x698>)
 8003120:	f004 fe4a 	bl	8007db8 <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 8003124:	48a0      	ldr	r0, [pc, #640]	; (80033a8 <StartGetFirmware+0x69c>)
 8003126:	f7fe fbb9 	bl	800189c <SIM800_Ans>
 800312a:	4603      	mov	r3, r0
 800312c:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
	  if (!ans)
 8003130:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8003134:	2b00      	cmp	r3, #0
 8003136:	d11e      	bne.n	8003176 <StartGetFirmware+0x46a>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8003138:	2264      	movs	r2, #100	; 0x64
 800313a:	2100      	movs	r1, #0
 800313c:	4895      	ldr	r0, [pc, #596]	; (8003394 <StartGetFirmware+0x688>)
 800313e:	f00a f945 	bl	800d3cc <memset>
		  ans = SIM800_Ans("OK");
 8003142:	4899      	ldr	r0, [pc, #612]	; (80033a8 <StartGetFirmware+0x69c>)
 8003144:	f7fe fbaa 	bl	800189c <SIM800_Ans>
 8003148:	4603      	mov	r3, r0
 800314a:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
		  if (!ans)
 800314e:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10f      	bne.n	8003176 <StartGetFirmware+0x46a>
		  {
			  strcpy(&(msg.str), "FTPUN\r\n\0");
 8003156:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800315a:	4a98      	ldr	r2, [pc, #608]	; (80033bc <StartGetFirmware+0x6b0>)
 800315c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003160:	e883 0003 	stmia.w	r3, {r0, r1}
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8003164:	4b92      	ldr	r3, [pc, #584]	; (80033b0 <StartGetFirmware+0x6a4>)
 8003166:	6818      	ldr	r0, [r3, #0]
 8003168:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 800316c:	f04f 33ff 	mov.w	r3, #4294967295
 8003170:	2200      	movs	r2, #0
 8003172:	f006 fd63 	bl	8009c3c <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 8003176:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800317a:	f006 f9e2 	bl	8009542 <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 800317e:	2264      	movs	r2, #100	; 0x64
 8003180:	2100      	movs	r1, #0
 8003182:	4884      	ldr	r0, [pc, #528]	; (8003394 <StartGetFirmware+0x688>)
 8003184:	f00a f922 	bl	800d3cc <memset>
	  sprintf(str_SIM800,"AT+FTPPW=%s\r\n\0", DEF_PASSWORD_FTP);
 8003188:	4a8d      	ldr	r2, [pc, #564]	; (80033c0 <StartGetFirmware+0x6b4>)
 800318a:	498e      	ldr	r1, [pc, #568]	; (80033c4 <StartGetFirmware+0x6b8>)
 800318c:	4884      	ldr	r0, [pc, #528]	; (80033a0 <StartGetFirmware+0x694>)
 800318e:	f00a f959 	bl	800d444 <siprintf>
	  HAL_UART_Transmit_DMA(&huart6, str_SIM800, strlen(str_SIM800));
 8003192:	4883      	ldr	r0, [pc, #524]	; (80033a0 <StartGetFirmware+0x694>)
 8003194:	f7fd f83c 	bl	8000210 <strlen>
 8003198:	4603      	mov	r3, r0
 800319a:	b29b      	uxth	r3, r3
 800319c:	461a      	mov	r2, r3
 800319e:	4980      	ldr	r1, [pc, #512]	; (80033a0 <StartGetFirmware+0x694>)
 80031a0:	4880      	ldr	r0, [pc, #512]	; (80033a4 <StartGetFirmware+0x698>)
 80031a2:	f004 fe09 	bl	8007db8 <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 80031a6:	4880      	ldr	r0, [pc, #512]	; (80033a8 <StartGetFirmware+0x69c>)
 80031a8:	f7fe fb78 	bl	800189c <SIM800_Ans>
 80031ac:	4603      	mov	r3, r0
 80031ae:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
	  if (!ans)
 80031b2:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d11e      	bne.n	80031f8 <StartGetFirmware+0x4ec>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80031ba:	2264      	movs	r2, #100	; 0x64
 80031bc:	2100      	movs	r1, #0
 80031be:	4875      	ldr	r0, [pc, #468]	; (8003394 <StartGetFirmware+0x688>)
 80031c0:	f00a f904 	bl	800d3cc <memset>
		  ans = SIM800_Ans("OK");
 80031c4:	4878      	ldr	r0, [pc, #480]	; (80033a8 <StartGetFirmware+0x69c>)
 80031c6:	f7fe fb69 	bl	800189c <SIM800_Ans>
 80031ca:	4603      	mov	r3, r0
 80031cc:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
		  if (!ans)
 80031d0:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d10f      	bne.n	80031f8 <StartGetFirmware+0x4ec>
		  {
			  strcpy(&(msg.str), "FTPPW\r\n\0");
 80031d8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80031dc:	4a7a      	ldr	r2, [pc, #488]	; (80033c8 <StartGetFirmware+0x6bc>)
 80031de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80031e2:	e883 0003 	stmia.w	r3, {r0, r1}
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 80031e6:	4b72      	ldr	r3, [pc, #456]	; (80033b0 <StartGetFirmware+0x6a4>)
 80031e8:	6818      	ldr	r0, [r3, #0]
 80031ea:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 80031ee:	f04f 33ff 	mov.w	r3, #4294967295
 80031f2:	2200      	movs	r2, #0
 80031f4:	f006 fd22 	bl	8009c3c <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 80031f8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80031fc:	f006 f9a1 	bl	8009542 <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8003200:	2264      	movs	r2, #100	; 0x64
 8003202:	2100      	movs	r1, #0
 8003204:	4863      	ldr	r0, [pc, #396]	; (8003394 <StartGetFirmware+0x688>)
 8003206:	f00a f8e1 	bl	800d3cc <memset>
	  sprintf(str_SIM800,"AT+FTPGETPATH=/firmware/\r\n\0");
 800320a:	4970      	ldr	r1, [pc, #448]	; (80033cc <StartGetFirmware+0x6c0>)
 800320c:	4864      	ldr	r0, [pc, #400]	; (80033a0 <StartGetFirmware+0x694>)
 800320e:	f00a f919 	bl	800d444 <siprintf>
	  HAL_UART_Transmit_DMA(&huart6, str_SIM800, strlen(str_SIM800));
 8003212:	4863      	ldr	r0, [pc, #396]	; (80033a0 <StartGetFirmware+0x694>)
 8003214:	f7fc fffc 	bl	8000210 <strlen>
 8003218:	4603      	mov	r3, r0
 800321a:	b29b      	uxth	r3, r3
 800321c:	461a      	mov	r2, r3
 800321e:	4960      	ldr	r1, [pc, #384]	; (80033a0 <StartGetFirmware+0x694>)
 8003220:	4860      	ldr	r0, [pc, #384]	; (80033a4 <StartGetFirmware+0x698>)
 8003222:	f004 fdc9 	bl	8007db8 <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 8003226:	4860      	ldr	r0, [pc, #384]	; (80033a8 <StartGetFirmware+0x69c>)
 8003228:	f7fe fb38 	bl	800189c <SIM800_Ans>
 800322c:	4603      	mov	r3, r0
 800322e:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
	  if (!ans)
 8003232:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8003236:	2b00      	cmp	r3, #0
 8003238:	d11f      	bne.n	800327a <StartGetFirmware+0x56e>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 800323a:	2264      	movs	r2, #100	; 0x64
 800323c:	2100      	movs	r1, #0
 800323e:	4855      	ldr	r0, [pc, #340]	; (8003394 <StartGetFirmware+0x688>)
 8003240:	f00a f8c4 	bl	800d3cc <memset>
		  ans = SIM800_Ans("OK");
 8003244:	4858      	ldr	r0, [pc, #352]	; (80033a8 <StartGetFirmware+0x69c>)
 8003246:	f7fe fb29 	bl	800189c <SIM800_Ans>
 800324a:	4603      	mov	r3, r0
 800324c:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
		  if (!ans)
 8003250:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8003254:	2b00      	cmp	r3, #0
 8003256:	d110      	bne.n	800327a <StartGetFirmware+0x56e>
		  {
			  strcpy(&(msg.str), "FTPGETPATH\r\n\0");
 8003258:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800325c:	4a5c      	ldr	r2, [pc, #368]	; (80033d0 <StartGetFirmware+0x6c4>)
 800325e:	461c      	mov	r4, r3
 8003260:	4613      	mov	r3, r2
 8003262:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003264:	c407      	stmia	r4!, {r0, r1, r2}
 8003266:	7023      	strb	r3, [r4, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8003268:	4b51      	ldr	r3, [pc, #324]	; (80033b0 <StartGetFirmware+0x6a4>)
 800326a:	6818      	ldr	r0, [r3, #0]
 800326c:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003270:	f04f 33ff 	mov.w	r3, #4294967295
 8003274:	2200      	movs	r2, #0
 8003276:	f006 fce1 	bl	8009c3c <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 800327a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800327e:	f006 f960 	bl	8009542 <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8003282:	2264      	movs	r2, #100	; 0x64
 8003284:	2100      	movs	r1, #0
 8003286:	4843      	ldr	r0, [pc, #268]	; (8003394 <StartGetFirmware+0x688>)
 8003288:	f00a f8a0 	bl	800d3cc <memset>
	  sprintf(str_SIM800,"AT+FTPGETNAME=Firmware.txt\r\n\0");
 800328c:	4951      	ldr	r1, [pc, #324]	; (80033d4 <StartGetFirmware+0x6c8>)
 800328e:	4844      	ldr	r0, [pc, #272]	; (80033a0 <StartGetFirmware+0x694>)
 8003290:	f00a f8d8 	bl	800d444 <siprintf>
	  HAL_UART_Transmit_DMA(&huart6, str_SIM800, strlen(str_SIM800));
 8003294:	4842      	ldr	r0, [pc, #264]	; (80033a0 <StartGetFirmware+0x694>)
 8003296:	f7fc ffbb 	bl	8000210 <strlen>
 800329a:	4603      	mov	r3, r0
 800329c:	b29b      	uxth	r3, r3
 800329e:	461a      	mov	r2, r3
 80032a0:	493f      	ldr	r1, [pc, #252]	; (80033a0 <StartGetFirmware+0x694>)
 80032a2:	4840      	ldr	r0, [pc, #256]	; (80033a4 <StartGetFirmware+0x698>)
 80032a4:	f004 fd88 	bl	8007db8 <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 80032a8:	483f      	ldr	r0, [pc, #252]	; (80033a8 <StartGetFirmware+0x69c>)
 80032aa:	f7fe faf7 	bl	800189c <SIM800_Ans>
 80032ae:	4603      	mov	r3, r0
 80032b0:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
	  if (!ans)
 80032b4:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d11f      	bne.n	80032fc <StartGetFirmware+0x5f0>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80032bc:	2264      	movs	r2, #100	; 0x64
 80032be:	2100      	movs	r1, #0
 80032c0:	4834      	ldr	r0, [pc, #208]	; (8003394 <StartGetFirmware+0x688>)
 80032c2:	f00a f883 	bl	800d3cc <memset>
		  ans = SIM800_Ans("OK");
 80032c6:	4838      	ldr	r0, [pc, #224]	; (80033a8 <StartGetFirmware+0x69c>)
 80032c8:	f7fe fae8 	bl	800189c <SIM800_Ans>
 80032cc:	4603      	mov	r3, r0
 80032ce:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
		  if (!ans)
 80032d2:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d110      	bne.n	80032fc <StartGetFirmware+0x5f0>
		  {
			  strcpy(&(msg.str), "FTPGETNAME\r\n\0");
 80032da:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80032de:	4a3e      	ldr	r2, [pc, #248]	; (80033d8 <StartGetFirmware+0x6cc>)
 80032e0:	461c      	mov	r4, r3
 80032e2:	4613      	mov	r3, r2
 80032e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032e6:	c407      	stmia	r4!, {r0, r1, r2}
 80032e8:	7023      	strb	r3, [r4, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 80032ea:	4b31      	ldr	r3, [pc, #196]	; (80033b0 <StartGetFirmware+0x6a4>)
 80032ec:	6818      	ldr	r0, [r3, #0]
 80032ee:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 80032f2:	f04f 33ff 	mov.w	r3, #4294967295
 80032f6:	2200      	movs	r2, #0
 80032f8:	f006 fca0 	bl	8009c3c <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 80032fc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003300:	f006 f91f 	bl	8009542 <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8003304:	2264      	movs	r2, #100	; 0x64
 8003306:	2100      	movs	r1, #0
 8003308:	4822      	ldr	r0, [pc, #136]	; (8003394 <StartGetFirmware+0x688>)
 800330a:	f00a f85f 	bl	800d3cc <memset>
	  sprintf(str_SIM800,"AT+FTPGETTOFS=0,Firmware.txt\r\n\0");
 800330e:	4933      	ldr	r1, [pc, #204]	; (80033dc <StartGetFirmware+0x6d0>)
 8003310:	4823      	ldr	r0, [pc, #140]	; (80033a0 <StartGetFirmware+0x694>)
 8003312:	f00a f897 	bl	800d444 <siprintf>
	  HAL_UART_Transmit_DMA(&huart6, str_SIM800, strlen(str_SIM800));
 8003316:	4822      	ldr	r0, [pc, #136]	; (80033a0 <StartGetFirmware+0x694>)
 8003318:	f7fc ff7a 	bl	8000210 <strlen>
 800331c:	4603      	mov	r3, r0
 800331e:	b29b      	uxth	r3, r3
 8003320:	461a      	mov	r2, r3
 8003322:	491f      	ldr	r1, [pc, #124]	; (80033a0 <StartGetFirmware+0x694>)
 8003324:	481f      	ldr	r0, [pc, #124]	; (80033a4 <StartGetFirmware+0x698>)
 8003326:	f004 fd47 	bl	8007db8 <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 800332a:	481f      	ldr	r0, [pc, #124]	; (80033a8 <StartGetFirmware+0x69c>)
 800332c:	f7fe fab6 	bl	800189c <SIM800_Ans>
 8003330:	4603      	mov	r3, r0
 8003332:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
	  if (!ans)
 8003336:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 800333a:	2b00      	cmp	r3, #0
 800333c:	d11f      	bne.n	800337e <StartGetFirmware+0x672>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 800333e:	2264      	movs	r2, #100	; 0x64
 8003340:	2100      	movs	r1, #0
 8003342:	4814      	ldr	r0, [pc, #80]	; (8003394 <StartGetFirmware+0x688>)
 8003344:	f00a f842 	bl	800d3cc <memset>
		  ans = SIM800_Ans("OK");
 8003348:	4817      	ldr	r0, [pc, #92]	; (80033a8 <StartGetFirmware+0x69c>)
 800334a:	f7fe faa7 	bl	800189c <SIM800_Ans>
 800334e:	4603      	mov	r3, r0
 8003350:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
		  if (!ans)
 8003354:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8003358:	2b00      	cmp	r3, #0
 800335a:	d110      	bne.n	800337e <StartGetFirmware+0x672>
		  {
			  strcpy(&(msg.str), "FTPGETTOFS\r\n\0");
 800335c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003360:	4a1f      	ldr	r2, [pc, #124]	; (80033e0 <StartGetFirmware+0x6d4>)
 8003362:	461c      	mov	r4, r3
 8003364:	4613      	mov	r3, r2
 8003366:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003368:	c407      	stmia	r4!, {r0, r1, r2}
 800336a:	7023      	strb	r3, [r4, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 800336c:	4b10      	ldr	r3, [pc, #64]	; (80033b0 <StartGetFirmware+0x6a4>)
 800336e:	6818      	ldr	r0, [r3, #0]
 8003370:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003374:	f04f 33ff 	mov.w	r3, #4294967295
 8003378:	2200      	movs	r2, #0
 800337a:	f006 fc5f 	bl	8009c3c <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 800337e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003382:	f006 f8de 	bl	8009542 <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8003386:	2264      	movs	r2, #100	; 0x64
 8003388:	2100      	movs	r1, #0
 800338a:	4802      	ldr	r0, [pc, #8]	; (8003394 <StartGetFirmware+0x688>)
 800338c:	f00a f81e 	bl	800d3cc <memset>
 8003390:	e028      	b.n	80033e4 <StartGetFirmware+0x6d8>
 8003392:	bf00      	nop
 8003394:	20000434 	.word	0x20000434
 8003398:	0800eba0 	.word	0x0800eba0
 800339c:	0800ebb0 	.word	0x0800ebb0
 80033a0:	200003d0 	.word	0x200003d0
 80033a4:	200001a8 	.word	0x200001a8
 80033a8:	0800e850 	.word	0x0800e850
 80033ac:	0800ebc4 	.word	0x0800ebc4
 80033b0:	20000390 	.word	0x20000390
 80033b4:	0800ebd0 	.word	0x0800ebd0
 80033b8:	0800ebdc 	.word	0x0800ebdc
 80033bc:	0800ebec 	.word	0x0800ebec
 80033c0:	0800ebf8 	.word	0x0800ebf8
 80033c4:	0800ec04 	.word	0x0800ec04
 80033c8:	0800ec14 	.word	0x0800ec14
 80033cc:	0800ec20 	.word	0x0800ec20
 80033d0:	0800ec3c 	.word	0x0800ec3c
 80033d4:	0800ec4c 	.word	0x0800ec4c
 80033d8:	0800ec6c 	.word	0x0800ec6c
 80033dc:	0800ec7c 	.word	0x0800ec7c
 80033e0:	0800ec9c 	.word	0x0800ec9c
	  RX = 0;
 80033e4:	4b88      	ldr	r3, [pc, #544]	; (8003608 <StartGetFirmware+0x8fc>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	701a      	strb	r2, [r3, #0]
	  Tech_ans_wait = 1;
 80033ea:	4b88      	ldr	r3, [pc, #544]	; (800360c <StartGetFirmware+0x900>)
 80033ec:	2201      	movs	r2, #1
 80033ee:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Receive_DMA(&huart6, SIM800BuffRx, BUFF_SIM_SIZE);
 80033f0:	2264      	movs	r2, #100	; 0x64
 80033f2:	4987      	ldr	r1, [pc, #540]	; (8003610 <StartGetFirmware+0x904>)
 80033f4:	4887      	ldr	r0, [pc, #540]	; (8003614 <StartGetFirmware+0x908>)
 80033f6:	f004 fd5d 	bl	8007eb4 <HAL_UART_Receive_DMA>
	  while (RX != 1) {};
 80033fa:	bf00      	nop
 80033fc:	4b82      	ldr	r3, [pc, #520]	; (8003608 <StartGetFirmware+0x8fc>)
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d1fb      	bne.n	80033fc <StartGetFirmware+0x6f0>
	  Tech_ans_wait = 0;
 8003404:	4b81      	ldr	r3, [pc, #516]	; (800360c <StartGetFirmware+0x900>)
 8003406:	2200      	movs	r2, #0
 8003408:	701a      	strb	r2, [r3, #0]



	  //good download
	  if (String_in_SIM800BuffRx("+FTPGETTOFS: "))
 800340a:	4883      	ldr	r0, [pc, #524]	; (8003618 <StartGetFirmware+0x90c>)
 800340c:	f7fe f954 	bl	80016b8 <String_in_SIM800BuffRx>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	f43f ac8e 	beq.w	8002d34 <StartGetFirmware+0x28>
	  {
		  sscanf(SIM800BuffRx, "%s%2s%d", tmp2, tmp3, &firmware_count_bytes);
 8003418:	f107 0108 	add.w	r1, r7, #8
 800341c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003420:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003424:	9300      	str	r3, [sp, #0]
 8003426:	460b      	mov	r3, r1
 8003428:	497c      	ldr	r1, [pc, #496]	; (800361c <StartGetFirmware+0x910>)
 800342a:	4879      	ldr	r0, [pc, #484]	; (8003610 <StartGetFirmware+0x904>)
 800342c:	f00a f82a 	bl	800d484 <siscanf>

		  SPI2_Init_Master();
 8003430:	f7fe f8c6 	bl	80015c0 <SPI2_Init_Master>
		  HAL_Delay(200);
 8003434:	20c8      	movs	r0, #200	; 0xc8
 8003436:	f001 f88d 	bl	8004554 <HAL_Delay>

		  W25qxx_Init();
 800343a:	f000 fce3 	bl	8003e04 <W25qxx_Init>

		  uint32_t count_of_pages = (firmware_count_bytes / 256) + ((firmware_count_bytes % 256) ? 1 : 0);
 800343e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003440:	0a1b      	lsrs	r3, r3, #8
 8003442:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003444:	b2d2      	uxtb	r2, r2
 8003446:	2a00      	cmp	r2, #0
 8003448:	d001      	beq.n	800344e <StartGetFirmware+0x742>
 800344a:	2201      	movs	r2, #1
 800344c:	e000      	b.n	8003450 <StartGetFirmware+0x744>
 800344e:	2200      	movs	r2, #0
 8003450:	4413      	add	r3, r2
 8003452:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		  uint32_t count_of_sectors = (firmware_count_bytes / 4096) + ((firmware_count_bytes % 4096) ? 1 : 0);
 8003456:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003458:	0b1b      	lsrs	r3, r3, #12
 800345a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800345c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8003460:	2a00      	cmp	r2, #0
 8003462:	d001      	beq.n	8003468 <StartGetFirmware+0x75c>
 8003464:	2201      	movs	r2, #1
 8003466:	e000      	b.n	800346a <StartGetFirmware+0x75e>
 8003468:	2200      	movs	r2, #0
 800346a:	4413      	add	r3, r2
 800346c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		  count_of_sectors++;
 8003470:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003474:	3301      	adds	r3, #1
 8003476:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

		  //start write from 30 sector
		  for (uint32_t i = 0; i <= count_of_sectors; i++)
 800347a:	2300      	movs	r3, #0
 800347c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003480:	e010      	b.n	80034a4 <StartGetFirmware+0x798>
		  {
			  // sectors for clear
			  uint32_t tmp = i + sector_of_firmware - 1;
 8003482:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003486:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800348a:	4413      	add	r3, r2
 800348c:	3b01      	subs	r3, #1
 800348e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
			  W25qxx_EraseSector(tmp);
 8003492:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8003496:	f000 ff19 	bl	80042cc <W25qxx_EraseSector>
		  for (uint32_t i = 0; i <= count_of_sectors; i++)
 800349a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800349e:	3301      	adds	r3, #1
 80034a0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80034a4:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80034a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d9e8      	bls.n	8003482 <StartGetFirmware+0x776>
		  }

		  //writes size of firmware
		  tmp4 = (firmware_count_bytes & 0xFF0000) >> 16;
 80034b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034b2:	0c1b      	lsrs	r3, r3, #16
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	4a5a      	ldr	r2, [pc, #360]	; (8003620 <StartGetFirmware+0x914>)
 80034b8:	6013      	str	r3, [r2, #0]
		  tmp5 = (firmware_count_bytes & 0xFF00) >> 8;
 80034ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034bc:	0a1b      	lsrs	r3, r3, #8
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	4a58      	ldr	r2, [pc, #352]	; (8003624 <StartGetFirmware+0x918>)
 80034c2:	6013      	str	r3, [r2, #0]
		  tmp6 = (firmware_count_bytes & 0xFF);
 80034c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	4a57      	ldr	r2, [pc, #348]	; (8003628 <StartGetFirmware+0x91c>)
 80034ca:	6013      	str	r3, [r2, #0]
		  Size_of_firmwware[0] = tmp4;
 80034cc:	4b54      	ldr	r3, [pc, #336]	; (8003620 <StartGetFirmware+0x914>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	b2da      	uxtb	r2, r3
 80034d2:	4b56      	ldr	r3, [pc, #344]	; (800362c <StartGetFirmware+0x920>)
 80034d4:	701a      	strb	r2, [r3, #0]
		  Size_of_firmwware[1] = tmp5;
 80034d6:	4b53      	ldr	r3, [pc, #332]	; (8003624 <StartGetFirmware+0x918>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	b2da      	uxtb	r2, r3
 80034dc:	4b53      	ldr	r3, [pc, #332]	; (800362c <StartGetFirmware+0x920>)
 80034de:	705a      	strb	r2, [r3, #1]
		  Size_of_firmwware[2] = tmp6;
 80034e0:	4b51      	ldr	r3, [pc, #324]	; (8003628 <StartGetFirmware+0x91c>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	b2da      	uxtb	r2, r3
 80034e6:	4b51      	ldr	r3, [pc, #324]	; (800362c <StartGetFirmware+0x920>)
 80034e8:	709a      	strb	r2, [r3, #2]

		  int32_t page_start1 = 16 * (sector_of_firmware - 1);
 80034ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034ee:	3b01      	subs	r3, #1
 80034f0:	011b      	lsls	r3, r3, #4
 80034f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

		  W25qxx_WritePage(Size_of_firmwware, page_start1, 0, 3);
 80034f6:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 80034fa:	2303      	movs	r3, #3
 80034fc:	2200      	movs	r2, #0
 80034fe:	484b      	ldr	r0, [pc, #300]	; (800362c <StartGetFirmware+0x920>)
 8003500:	f000 ff3a 	bl	8004378 <W25qxx_WritePage>

		  for (uint32_t i = 0; i < count_of_pages; i++)
 8003504:	2300      	movs	r3, #0
 8003506:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800350a:	e054      	b.n	80035b6 <StartGetFirmware+0x8aa>
		  {
			  int32_t start = i * 256;
 800350c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003510:	021b      	lsls	r3, r3, #8
 8003512:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
			  //start += (i > 0) ? 1 : 0;

			  memset(firmware_buf, 0, 399);
 8003516:	f240 128f 	movw	r2, #399	; 0x18f
 800351a:	2100      	movs	r1, #0
 800351c:	4844      	ldr	r0, [pc, #272]	; (8003630 <StartGetFirmware+0x924>)
 800351e:	f009 ff55 	bl	800d3cc <memset>
			  sprintf(str_SIM800,"AT+FSREAD=C:\\User\\FTP\\Firmware.txt,1,256,%d\r\n\0", start);
 8003522:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8003526:	4943      	ldr	r1, [pc, #268]	; (8003634 <StartGetFirmware+0x928>)
 8003528:	4843      	ldr	r0, [pc, #268]	; (8003638 <StartGetFirmware+0x92c>)
 800352a:	f009 ff8b 	bl	800d444 <siprintf>
			  HAL_UART_Transmit_DMA(&huart6, str_SIM800, strlen(str_SIM800));
 800352e:	4842      	ldr	r0, [pc, #264]	; (8003638 <StartGetFirmware+0x92c>)
 8003530:	f7fc fe6e 	bl	8000210 <strlen>
 8003534:	4603      	mov	r3, r0
 8003536:	b29b      	uxth	r3, r3
 8003538:	461a      	mov	r2, r3
 800353a:	493f      	ldr	r1, [pc, #252]	; (8003638 <StartGetFirmware+0x92c>)
 800353c:	4835      	ldr	r0, [pc, #212]	; (8003614 <StartGetFirmware+0x908>)
 800353e:	f004 fc3b 	bl	8007db8 <HAL_UART_Transmit_DMA>
			  RX = 0;
 8003542:	4b31      	ldr	r3, [pc, #196]	; (8003608 <StartGetFirmware+0x8fc>)
 8003544:	2200      	movs	r2, #0
 8003546:	701a      	strb	r2, [r3, #0]
			  Tech_ans_wait = 1;
 8003548:	4b30      	ldr	r3, [pc, #192]	; (800360c <StartGetFirmware+0x900>)
 800354a:	2201      	movs	r2, #1
 800354c:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Receive_DMA(&huart6, firmware_buf, 390);
 800354e:	f44f 72c3 	mov.w	r2, #390	; 0x186
 8003552:	4937      	ldr	r1, [pc, #220]	; (8003630 <StartGetFirmware+0x924>)
 8003554:	482f      	ldr	r0, [pc, #188]	; (8003614 <StartGetFirmware+0x908>)
 8003556:	f004 fcad 	bl	8007eb4 <HAL_UART_Receive_DMA>
			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 800355a:	2140      	movs	r1, #64	; 0x40
 800355c:	4837      	ldr	r0, [pc, #220]	; (800363c <StartGetFirmware+0x930>)
 800355e:	f001 fee2 	bl	8005326 <HAL_GPIO_TogglePin>
			  while (RX != 1) {};
 8003562:	bf00      	nop
 8003564:	4b28      	ldr	r3, [pc, #160]	; (8003608 <StartGetFirmware+0x8fc>)
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d1fb      	bne.n	8003564 <StartGetFirmware+0x858>
			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 800356c:	2140      	movs	r1, #64	; 0x40
 800356e:	4833      	ldr	r0, [pc, #204]	; (800363c <StartGetFirmware+0x930>)
 8003570:	f001 fed9 	bl	8005326 <HAL_GPIO_TogglePin>
			  Tech_ans_wait = 0;
 8003574:	4b25      	ldr	r3, [pc, #148]	; (800360c <StartGetFirmware+0x900>)
 8003576:	2200      	movs	r2, #0
 8003578:	701a      	strb	r2, [r3, #0]

			  int32_t page_start =  i + 16 * sector_of_firmware; // number of start page
 800357a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800357e:	011a      	lsls	r2, r3, #4
 8003580:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003584:	4413      	add	r3, r2
 8003586:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
			  W25qxx_WritePage(firmware_buf + strlen(str_SIM800) + 1, page_start, 0, 256);
 800358a:	482b      	ldr	r0, [pc, #172]	; (8003638 <StartGetFirmware+0x92c>)
 800358c:	f7fc fe40 	bl	8000210 <strlen>
 8003590:	4603      	mov	r3, r0
 8003592:	3301      	adds	r3, #1
 8003594:	4a26      	ldr	r2, [pc, #152]	; (8003630 <StartGetFirmware+0x924>)
 8003596:	1898      	adds	r0, r3, r2
 8003598:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 800359c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035a0:	2200      	movs	r2, #0
 80035a2:	f000 fee9 	bl	8004378 <W25qxx_WritePage>
			  osDelay(10); //importent!!!
 80035a6:	200a      	movs	r0, #10
 80035a8:	f005 ffcb 	bl	8009542 <osDelay>
		  for (uint32_t i = 0; i < count_of_pages; i++)
 80035ac:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80035b0:	3301      	adds	r3, #1
 80035b2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80035b6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80035ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035be:	429a      	cmp	r2, r3
 80035c0:	d3a4      	bcc.n	800350c <StartGetFirmware+0x800>
		  }
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 80035c2:	2140      	movs	r1, #64	; 0x40
 80035c4:	481d      	ldr	r0, [pc, #116]	; (800363c <StartGetFirmware+0x930>)
 80035c6:	f001 feae 	bl	8005326 <HAL_GPIO_TogglePin>
		  osDelay(2000);
 80035ca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80035ce:	f005 ffb8 	bl	8009542 <osDelay>
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 80035d2:	2140      	movs	r1, #64	; 0x40
 80035d4:	4819      	ldr	r0, [pc, #100]	; (800363c <StartGetFirmware+0x930>)
 80035d6:	f001 fea6 	bl	8005326 <HAL_GPIO_TogglePin>

		  HAL_Delay(200);
 80035da:	20c8      	movs	r0, #200	; 0xc8
 80035dc:	f000 ffba 	bl	8004554 <HAL_Delay>
		  //";start"
		  strcpy(&(msg.str), ";start");
 80035e0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80035e4:	4a16      	ldr	r2, [pc, #88]	; (8003640 <StartGetFirmware+0x934>)
 80035e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80035ea:	6018      	str	r0, [r3, #0]
 80035ec:	3304      	adds	r3, #4
 80035ee:	8019      	strh	r1, [r3, #0]
 80035f0:	3302      	adds	r3, #2
 80035f2:	0c0a      	lsrs	r2, r1, #16
 80035f4:	701a      	strb	r2, [r3, #0]
		  //HAL_UART_Transmit_DMA(&huart2, msg.str, MESSAGE_TYPE_BUFF_SIZE);
		  HAL_Delay(1000);
 80035f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80035fa:	f000 ffab 	bl	8004554 <HAL_Delay>
		  HAL_NVIC_SystemReset();
 80035fe:	f001 f8c6 	bl	800478e <HAL_NVIC_SystemReset>
  {
 8003602:	f7ff bb97 	b.w	8002d34 <StartGetFirmware+0x28>
 8003606:	bf00      	nop
 8003608:	200003b3 	.word	0x200003b3
 800360c:	200003b5 	.word	0x200003b5
 8003610:	20000434 	.word	0x20000434
 8003614:	200001a8 	.word	0x200001a8
 8003618:	0800ecac 	.word	0x0800ecac
 800361c:	0800ecbc 	.word	0x0800ecbc
 8003620:	20000670 	.word	0x20000670
 8003624:	20000674 	.word	0x20000674
 8003628:	20000678 	.word	0x20000678
 800362c:	2000067c 	.word	0x2000067c
 8003630:	20000498 	.word	0x20000498
 8003634:	0800ecc4 	.word	0x0800ecc4
 8003638:	200003d0 	.word	0x200003d0
 800363c:	40020000 	.word	0x40020000
 8003640:	0800ecf4 	.word	0x0800ecf4

08003644 <CallbackPingTimer>:
  /* USER CODE END StartGetFirmware */
}

/* CallbackPingTimer function */
void CallbackPingTimer(void *argument)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackPingTimer */
	osSemaphoreRelease(PINGSemHandle);
 800364c:	4b04      	ldr	r3, [pc, #16]	; (8003660 <CallbackPingTimer+0x1c>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4618      	mov	r0, r3
 8003652:	f006 fa3b 	bl	8009acc <osSemaphoreRelease>
  /* USER CODE END CallbackPingTimer */
}
 8003656:	bf00      	nop
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	200003a8 	.word	0x200003a8

08003664 <CallbackDataTimer>:

/* CallbackDataTimer function */
void CallbackDataTimer(void *argument)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackDataTimer */
	Get_data = 1;
 800366c:	4b04      	ldr	r3, [pc, #16]	; (8003680 <CallbackDataTimer+0x1c>)
 800366e:	2201      	movs	r2, #1
 8003670:	701a      	strb	r2, [r3, #0]
  /* USER CODE END CallbackDataTimer */
}
 8003672:	bf00      	nop
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	200003b6 	.word	0x200003b6

08003684 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a04      	ldr	r2, [pc, #16]	; (80036a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d101      	bne.n	800369a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003696:	f000 ff3d 	bl	8004514 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800369a:	bf00      	nop
 800369c:	3708      	adds	r7, #8
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	40010000 	.word	0x40010000

080036a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80036ac:	b672      	cpsid	i
}
 80036ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80036b0:	e7fe      	b.n	80036b0 <Error_Handler+0x8>
	...

080036b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036ba:	2300      	movs	r3, #0
 80036bc:	607b      	str	r3, [r7, #4]
 80036be:	4b12      	ldr	r3, [pc, #72]	; (8003708 <HAL_MspInit+0x54>)
 80036c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c2:	4a11      	ldr	r2, [pc, #68]	; (8003708 <HAL_MspInit+0x54>)
 80036c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036c8:	6453      	str	r3, [r2, #68]	; 0x44
 80036ca:	4b0f      	ldr	r3, [pc, #60]	; (8003708 <HAL_MspInit+0x54>)
 80036cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036d2:	607b      	str	r3, [r7, #4]
 80036d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036d6:	2300      	movs	r3, #0
 80036d8:	603b      	str	r3, [r7, #0]
 80036da:	4b0b      	ldr	r3, [pc, #44]	; (8003708 <HAL_MspInit+0x54>)
 80036dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036de:	4a0a      	ldr	r2, [pc, #40]	; (8003708 <HAL_MspInit+0x54>)
 80036e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036e4:	6413      	str	r3, [r2, #64]	; 0x40
 80036e6:	4b08      	ldr	r3, [pc, #32]	; (8003708 <HAL_MspInit+0x54>)
 80036e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ee:	603b      	str	r3, [r7, #0]
 80036f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80036f2:	2200      	movs	r2, #0
 80036f4:	210f      	movs	r1, #15
 80036f6:	f06f 0001 	mvn.w	r0, #1
 80036fa:	f001 f81e 	bl	800473a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036fe:	bf00      	nop
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	40023800 	.word	0x40023800

0800370c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b08a      	sub	sp, #40	; 0x28
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003714:	f107 0314 	add.w	r3, r7, #20
 8003718:	2200      	movs	r2, #0
 800371a:	601a      	str	r2, [r3, #0]
 800371c:	605a      	str	r2, [r3, #4]
 800371e:	609a      	str	r2, [r3, #8]
 8003720:	60da      	str	r2, [r3, #12]
 8003722:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a19      	ldr	r2, [pc, #100]	; (8003790 <HAL_I2C_MspInit+0x84>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d12b      	bne.n	8003786 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800372e:	2300      	movs	r3, #0
 8003730:	613b      	str	r3, [r7, #16]
 8003732:	4b18      	ldr	r3, [pc, #96]	; (8003794 <HAL_I2C_MspInit+0x88>)
 8003734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003736:	4a17      	ldr	r2, [pc, #92]	; (8003794 <HAL_I2C_MspInit+0x88>)
 8003738:	f043 0302 	orr.w	r3, r3, #2
 800373c:	6313      	str	r3, [r2, #48]	; 0x30
 800373e:	4b15      	ldr	r3, [pc, #84]	; (8003794 <HAL_I2C_MspInit+0x88>)
 8003740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	613b      	str	r3, [r7, #16]
 8003748:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800374a:	23c0      	movs	r3, #192	; 0xc0
 800374c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800374e:	2312      	movs	r3, #18
 8003750:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003752:	2301      	movs	r3, #1
 8003754:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003756:	2303      	movs	r3, #3
 8003758:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800375a:	2304      	movs	r3, #4
 800375c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800375e:	f107 0314 	add.w	r3, r7, #20
 8003762:	4619      	mov	r1, r3
 8003764:	480c      	ldr	r0, [pc, #48]	; (8003798 <HAL_I2C_MspInit+0x8c>)
 8003766:	f001 fc19 	bl	8004f9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800376a:	2300      	movs	r3, #0
 800376c:	60fb      	str	r3, [r7, #12]
 800376e:	4b09      	ldr	r3, [pc, #36]	; (8003794 <HAL_I2C_MspInit+0x88>)
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	4a08      	ldr	r2, [pc, #32]	; (8003794 <HAL_I2C_MspInit+0x88>)
 8003774:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003778:	6413      	str	r3, [r2, #64]	; 0x40
 800377a:	4b06      	ldr	r3, [pc, #24]	; (8003794 <HAL_I2C_MspInit+0x88>)
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003782:	60fb      	str	r3, [r7, #12]
 8003784:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003786:	bf00      	nop
 8003788:	3728      	adds	r7, #40	; 0x28
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	40005400 	.word	0x40005400
 8003794:	40023800 	.word	0x40023800
 8003798:	40020400 	.word	0x40020400

0800379c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b08a      	sub	sp, #40	; 0x28
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037a4:	f107 0314 	add.w	r3, r7, #20
 80037a8:	2200      	movs	r2, #0
 80037aa:	601a      	str	r2, [r3, #0]
 80037ac:	605a      	str	r2, [r3, #4]
 80037ae:	609a      	str	r2, [r3, #8]
 80037b0:	60da      	str	r2, [r3, #12]
 80037b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a19      	ldr	r2, [pc, #100]	; (8003820 <HAL_SPI_MspInit+0x84>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d12c      	bne.n	8003818 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80037be:	2300      	movs	r3, #0
 80037c0:	613b      	str	r3, [r7, #16]
 80037c2:	4b18      	ldr	r3, [pc, #96]	; (8003824 <HAL_SPI_MspInit+0x88>)
 80037c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c6:	4a17      	ldr	r2, [pc, #92]	; (8003824 <HAL_SPI_MspInit+0x88>)
 80037c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037cc:	6413      	str	r3, [r2, #64]	; 0x40
 80037ce:	4b15      	ldr	r3, [pc, #84]	; (8003824 <HAL_SPI_MspInit+0x88>)
 80037d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037d6:	613b      	str	r3, [r7, #16]
 80037d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037da:	2300      	movs	r3, #0
 80037dc:	60fb      	str	r3, [r7, #12]
 80037de:	4b11      	ldr	r3, [pc, #68]	; (8003824 <HAL_SPI_MspInit+0x88>)
 80037e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e2:	4a10      	ldr	r2, [pc, #64]	; (8003824 <HAL_SPI_MspInit+0x88>)
 80037e4:	f043 0302 	orr.w	r3, r3, #2
 80037e8:	6313      	str	r3, [r2, #48]	; 0x30
 80037ea:	4b0e      	ldr	r3, [pc, #56]	; (8003824 <HAL_SPI_MspInit+0x88>)
 80037ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	60fb      	str	r3, [r7, #12]
 80037f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 80037f6:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 80037fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037fc:	2302      	movs	r3, #2
 80037fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003800:	2300      	movs	r3, #0
 8003802:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003804:	2303      	movs	r3, #3
 8003806:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003808:	2305      	movs	r3, #5
 800380a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800380c:	f107 0314 	add.w	r3, r7, #20
 8003810:	4619      	mov	r1, r3
 8003812:	4805      	ldr	r0, [pc, #20]	; (8003828 <HAL_SPI_MspInit+0x8c>)
 8003814:	f001 fbc2 	bl	8004f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003818:	bf00      	nop
 800381a:	3728      	adds	r7, #40	; 0x28
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	40003800 	.word	0x40003800
 8003824:	40023800 	.word	0x40023800
 8003828:	40020400 	.word	0x40020400

0800382c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b08c      	sub	sp, #48	; 0x30
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003834:	f107 031c 	add.w	r3, r7, #28
 8003838:	2200      	movs	r2, #0
 800383a:	601a      	str	r2, [r3, #0]
 800383c:	605a      	str	r2, [r3, #4]
 800383e:	609a      	str	r2, [r3, #8]
 8003840:	60da      	str	r2, [r3, #12]
 8003842:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a97      	ldr	r2, [pc, #604]	; (8003aa8 <HAL_UART_MspInit+0x27c>)
 800384a:	4293      	cmp	r3, r2
 800384c:	f040 8091 	bne.w	8003972 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003850:	2300      	movs	r3, #0
 8003852:	61bb      	str	r3, [r7, #24]
 8003854:	4b95      	ldr	r3, [pc, #596]	; (8003aac <HAL_UART_MspInit+0x280>)
 8003856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003858:	4a94      	ldr	r2, [pc, #592]	; (8003aac <HAL_UART_MspInit+0x280>)
 800385a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800385e:	6413      	str	r3, [r2, #64]	; 0x40
 8003860:	4b92      	ldr	r3, [pc, #584]	; (8003aac <HAL_UART_MspInit+0x280>)
 8003862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003868:	61bb      	str	r3, [r7, #24]
 800386a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800386c:	2300      	movs	r3, #0
 800386e:	617b      	str	r3, [r7, #20]
 8003870:	4b8e      	ldr	r3, [pc, #568]	; (8003aac <HAL_UART_MspInit+0x280>)
 8003872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003874:	4a8d      	ldr	r2, [pc, #564]	; (8003aac <HAL_UART_MspInit+0x280>)
 8003876:	f043 0301 	orr.w	r3, r3, #1
 800387a:	6313      	str	r3, [r2, #48]	; 0x30
 800387c:	4b8b      	ldr	r3, [pc, #556]	; (8003aac <HAL_UART_MspInit+0x280>)
 800387e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003880:	f003 0301 	and.w	r3, r3, #1
 8003884:	617b      	str	r3, [r7, #20]
 8003886:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003888:	230c      	movs	r3, #12
 800388a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800388c:	2302      	movs	r3, #2
 800388e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003890:	2300      	movs	r3, #0
 8003892:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003894:	2303      	movs	r3, #3
 8003896:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003898:	2307      	movs	r3, #7
 800389a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800389c:	f107 031c 	add.w	r3, r7, #28
 80038a0:	4619      	mov	r1, r3
 80038a2:	4883      	ldr	r0, [pc, #524]	; (8003ab0 <HAL_UART_MspInit+0x284>)
 80038a4:	f001 fb7a 	bl	8004f9c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80038a8:	4b82      	ldr	r3, [pc, #520]	; (8003ab4 <HAL_UART_MspInit+0x288>)
 80038aa:	4a83      	ldr	r2, [pc, #524]	; (8003ab8 <HAL_UART_MspInit+0x28c>)
 80038ac:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80038ae:	4b81      	ldr	r3, [pc, #516]	; (8003ab4 <HAL_UART_MspInit+0x288>)
 80038b0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80038b4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80038b6:	4b7f      	ldr	r3, [pc, #508]	; (8003ab4 <HAL_UART_MspInit+0x288>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80038bc:	4b7d      	ldr	r3, [pc, #500]	; (8003ab4 <HAL_UART_MspInit+0x288>)
 80038be:	2200      	movs	r2, #0
 80038c0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80038c2:	4b7c      	ldr	r3, [pc, #496]	; (8003ab4 <HAL_UART_MspInit+0x288>)
 80038c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038c8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80038ca:	4b7a      	ldr	r3, [pc, #488]	; (8003ab4 <HAL_UART_MspInit+0x288>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80038d0:	4b78      	ldr	r3, [pc, #480]	; (8003ab4 <HAL_UART_MspInit+0x288>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80038d6:	4b77      	ldr	r3, [pc, #476]	; (8003ab4 <HAL_UART_MspInit+0x288>)
 80038d8:	2200      	movs	r2, #0
 80038da:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80038dc:	4b75      	ldr	r3, [pc, #468]	; (8003ab4 <HAL_UART_MspInit+0x288>)
 80038de:	2200      	movs	r2, #0
 80038e0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80038e2:	4b74      	ldr	r3, [pc, #464]	; (8003ab4 <HAL_UART_MspInit+0x288>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80038e8:	4872      	ldr	r0, [pc, #456]	; (8003ab4 <HAL_UART_MspInit+0x288>)
 80038ea:	f000 ff55 	bl	8004798 <HAL_DMA_Init>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80038f4:	f7ff fed8 	bl	80036a8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a6e      	ldr	r2, [pc, #440]	; (8003ab4 <HAL_UART_MspInit+0x288>)
 80038fc:	639a      	str	r2, [r3, #56]	; 0x38
 80038fe:	4a6d      	ldr	r2, [pc, #436]	; (8003ab4 <HAL_UART_MspInit+0x288>)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003904:	4b6d      	ldr	r3, [pc, #436]	; (8003abc <HAL_UART_MspInit+0x290>)
 8003906:	4a6e      	ldr	r2, [pc, #440]	; (8003ac0 <HAL_UART_MspInit+0x294>)
 8003908:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800390a:	4b6c      	ldr	r3, [pc, #432]	; (8003abc <HAL_UART_MspInit+0x290>)
 800390c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003910:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003912:	4b6a      	ldr	r3, [pc, #424]	; (8003abc <HAL_UART_MspInit+0x290>)
 8003914:	2240      	movs	r2, #64	; 0x40
 8003916:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003918:	4b68      	ldr	r3, [pc, #416]	; (8003abc <HAL_UART_MspInit+0x290>)
 800391a:	2200      	movs	r2, #0
 800391c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800391e:	4b67      	ldr	r3, [pc, #412]	; (8003abc <HAL_UART_MspInit+0x290>)
 8003920:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003924:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003926:	4b65      	ldr	r3, [pc, #404]	; (8003abc <HAL_UART_MspInit+0x290>)
 8003928:	2200      	movs	r2, #0
 800392a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800392c:	4b63      	ldr	r3, [pc, #396]	; (8003abc <HAL_UART_MspInit+0x290>)
 800392e:	2200      	movs	r2, #0
 8003930:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003932:	4b62      	ldr	r3, [pc, #392]	; (8003abc <HAL_UART_MspInit+0x290>)
 8003934:	2200      	movs	r2, #0
 8003936:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003938:	4b60      	ldr	r3, [pc, #384]	; (8003abc <HAL_UART_MspInit+0x290>)
 800393a:	2200      	movs	r2, #0
 800393c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800393e:	4b5f      	ldr	r3, [pc, #380]	; (8003abc <HAL_UART_MspInit+0x290>)
 8003940:	2200      	movs	r2, #0
 8003942:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003944:	485d      	ldr	r0, [pc, #372]	; (8003abc <HAL_UART_MspInit+0x290>)
 8003946:	f000 ff27 	bl	8004798 <HAL_DMA_Init>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d001      	beq.n	8003954 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8003950:	f7ff feaa 	bl	80036a8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a59      	ldr	r2, [pc, #356]	; (8003abc <HAL_UART_MspInit+0x290>)
 8003958:	635a      	str	r2, [r3, #52]	; 0x34
 800395a:	4a58      	ldr	r2, [pc, #352]	; (8003abc <HAL_UART_MspInit+0x290>)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003960:	2200      	movs	r2, #0
 8003962:	2105      	movs	r1, #5
 8003964:	2026      	movs	r0, #38	; 0x26
 8003966:	f000 fee8 	bl	800473a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800396a:	2026      	movs	r0, #38	; 0x26
 800396c:	f000 ff01 	bl	8004772 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003970:	e095      	b.n	8003a9e <HAL_UART_MspInit+0x272>
  else if(huart->Instance==USART6)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a53      	ldr	r2, [pc, #332]	; (8003ac4 <HAL_UART_MspInit+0x298>)
 8003978:	4293      	cmp	r3, r2
 800397a:	f040 8090 	bne.w	8003a9e <HAL_UART_MspInit+0x272>
    __HAL_RCC_USART6_CLK_ENABLE();
 800397e:	2300      	movs	r3, #0
 8003980:	613b      	str	r3, [r7, #16]
 8003982:	4b4a      	ldr	r3, [pc, #296]	; (8003aac <HAL_UART_MspInit+0x280>)
 8003984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003986:	4a49      	ldr	r2, [pc, #292]	; (8003aac <HAL_UART_MspInit+0x280>)
 8003988:	f043 0320 	orr.w	r3, r3, #32
 800398c:	6453      	str	r3, [r2, #68]	; 0x44
 800398e:	4b47      	ldr	r3, [pc, #284]	; (8003aac <HAL_UART_MspInit+0x280>)
 8003990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003992:	f003 0320 	and.w	r3, r3, #32
 8003996:	613b      	str	r3, [r7, #16]
 8003998:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800399a:	2300      	movs	r3, #0
 800399c:	60fb      	str	r3, [r7, #12]
 800399e:	4b43      	ldr	r3, [pc, #268]	; (8003aac <HAL_UART_MspInit+0x280>)
 80039a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a2:	4a42      	ldr	r2, [pc, #264]	; (8003aac <HAL_UART_MspInit+0x280>)
 80039a4:	f043 0304 	orr.w	r3, r3, #4
 80039a8:	6313      	str	r3, [r2, #48]	; 0x30
 80039aa:	4b40      	ldr	r3, [pc, #256]	; (8003aac <HAL_UART_MspInit+0x280>)
 80039ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ae:	f003 0304 	and.w	r3, r3, #4
 80039b2:	60fb      	str	r3, [r7, #12]
 80039b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80039b6:	23c0      	movs	r3, #192	; 0xc0
 80039b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ba:	2302      	movs	r3, #2
 80039bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039be:	2300      	movs	r3, #0
 80039c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039c2:	2303      	movs	r3, #3
 80039c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80039c6:	2308      	movs	r3, #8
 80039c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039ca:	f107 031c 	add.w	r3, r7, #28
 80039ce:	4619      	mov	r1, r3
 80039d0:	483d      	ldr	r0, [pc, #244]	; (8003ac8 <HAL_UART_MspInit+0x29c>)
 80039d2:	f001 fae3 	bl	8004f9c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80039d6:	4b3d      	ldr	r3, [pc, #244]	; (8003acc <HAL_UART_MspInit+0x2a0>)
 80039d8:	4a3d      	ldr	r2, [pc, #244]	; (8003ad0 <HAL_UART_MspInit+0x2a4>)
 80039da:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80039dc:	4b3b      	ldr	r3, [pc, #236]	; (8003acc <HAL_UART_MspInit+0x2a0>)
 80039de:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80039e2:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80039e4:	4b39      	ldr	r3, [pc, #228]	; (8003acc <HAL_UART_MspInit+0x2a0>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039ea:	4b38      	ldr	r3, [pc, #224]	; (8003acc <HAL_UART_MspInit+0x2a0>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80039f0:	4b36      	ldr	r3, [pc, #216]	; (8003acc <HAL_UART_MspInit+0x2a0>)
 80039f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039f6:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039f8:	4b34      	ldr	r3, [pc, #208]	; (8003acc <HAL_UART_MspInit+0x2a0>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039fe:	4b33      	ldr	r3, [pc, #204]	; (8003acc <HAL_UART_MspInit+0x2a0>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8003a04:	4b31      	ldr	r3, [pc, #196]	; (8003acc <HAL_UART_MspInit+0x2a0>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003a0a:	4b30      	ldr	r3, [pc, #192]	; (8003acc <HAL_UART_MspInit+0x2a0>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a10:	4b2e      	ldr	r3, [pc, #184]	; (8003acc <HAL_UART_MspInit+0x2a0>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8003a16:	482d      	ldr	r0, [pc, #180]	; (8003acc <HAL_UART_MspInit+0x2a0>)
 8003a18:	f000 febe 	bl	8004798 <HAL_DMA_Init>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <HAL_UART_MspInit+0x1fa>
      Error_Handler();
 8003a22:	f7ff fe41 	bl	80036a8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a28      	ldr	r2, [pc, #160]	; (8003acc <HAL_UART_MspInit+0x2a0>)
 8003a2a:	639a      	str	r2, [r3, #56]	; 0x38
 8003a2c:	4a27      	ldr	r2, [pc, #156]	; (8003acc <HAL_UART_MspInit+0x2a0>)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8003a32:	4b28      	ldr	r3, [pc, #160]	; (8003ad4 <HAL_UART_MspInit+0x2a8>)
 8003a34:	4a28      	ldr	r2, [pc, #160]	; (8003ad8 <HAL_UART_MspInit+0x2ac>)
 8003a36:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8003a38:	4b26      	ldr	r3, [pc, #152]	; (8003ad4 <HAL_UART_MspInit+0x2a8>)
 8003a3a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8003a3e:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a40:	4b24      	ldr	r3, [pc, #144]	; (8003ad4 <HAL_UART_MspInit+0x2a8>)
 8003a42:	2240      	movs	r2, #64	; 0x40
 8003a44:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a46:	4b23      	ldr	r3, [pc, #140]	; (8003ad4 <HAL_UART_MspInit+0x2a8>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003a4c:	4b21      	ldr	r3, [pc, #132]	; (8003ad4 <HAL_UART_MspInit+0x2a8>)
 8003a4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a52:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a54:	4b1f      	ldr	r3, [pc, #124]	; (8003ad4 <HAL_UART_MspInit+0x2a8>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a5a:	4b1e      	ldr	r3, [pc, #120]	; (8003ad4 <HAL_UART_MspInit+0x2a8>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8003a60:	4b1c      	ldr	r3, [pc, #112]	; (8003ad4 <HAL_UART_MspInit+0x2a8>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003a66:	4b1b      	ldr	r3, [pc, #108]	; (8003ad4 <HAL_UART_MspInit+0x2a8>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a6c:	4b19      	ldr	r3, [pc, #100]	; (8003ad4 <HAL_UART_MspInit+0x2a8>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8003a72:	4818      	ldr	r0, [pc, #96]	; (8003ad4 <HAL_UART_MspInit+0x2a8>)
 8003a74:	f000 fe90 	bl	8004798 <HAL_DMA_Init>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d001      	beq.n	8003a82 <HAL_UART_MspInit+0x256>
      Error_Handler();
 8003a7e:	f7ff fe13 	bl	80036a8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a13      	ldr	r2, [pc, #76]	; (8003ad4 <HAL_UART_MspInit+0x2a8>)
 8003a86:	635a      	str	r2, [r3, #52]	; 0x34
 8003a88:	4a12      	ldr	r2, [pc, #72]	; (8003ad4 <HAL_UART_MspInit+0x2a8>)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8003a8e:	2200      	movs	r2, #0
 8003a90:	2105      	movs	r1, #5
 8003a92:	2047      	movs	r0, #71	; 0x47
 8003a94:	f000 fe51 	bl	800473a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003a98:	2047      	movs	r0, #71	; 0x47
 8003a9a:	f000 fe6a 	bl	8004772 <HAL_NVIC_EnableIRQ>
}
 8003a9e:	bf00      	nop
 8003aa0:	3730      	adds	r7, #48	; 0x30
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	40004400 	.word	0x40004400
 8003aac:	40023800 	.word	0x40023800
 8003ab0:	40020000 	.word	0x40020000
 8003ab4:	200001ec 	.word	0x200001ec
 8003ab8:	40026088 	.word	0x40026088
 8003abc:	2000024c 	.word	0x2000024c
 8003ac0:	400260a0 	.word	0x400260a0
 8003ac4:	40011400 	.word	0x40011400
 8003ac8:	40020800 	.word	0x40020800
 8003acc:	200002ac 	.word	0x200002ac
 8003ad0:	40026428 	.word	0x40026428
 8003ad4:	2000030c 	.word	0x2000030c
 8003ad8:	400264a0 	.word	0x400264a0

08003adc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b08c      	sub	sp, #48	; 0x30
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8003aec:	2200      	movs	r2, #0
 8003aee:	6879      	ldr	r1, [r7, #4]
 8003af0:	2019      	movs	r0, #25
 8003af2:	f000 fe22 	bl	800473a <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003af6:	2019      	movs	r0, #25
 8003af8:	f000 fe3b 	bl	8004772 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003afc:	2300      	movs	r3, #0
 8003afe:	60fb      	str	r3, [r7, #12]
 8003b00:	4b1f      	ldr	r3, [pc, #124]	; (8003b80 <HAL_InitTick+0xa4>)
 8003b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b04:	4a1e      	ldr	r2, [pc, #120]	; (8003b80 <HAL_InitTick+0xa4>)
 8003b06:	f043 0301 	orr.w	r3, r3, #1
 8003b0a:	6453      	str	r3, [r2, #68]	; 0x44
 8003b0c:	4b1c      	ldr	r3, [pc, #112]	; (8003b80 <HAL_InitTick+0xa4>)
 8003b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b10:	f003 0301 	and.w	r3, r3, #1
 8003b14:	60fb      	str	r3, [r7, #12]
 8003b16:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003b18:	f107 0210 	add.w	r2, r7, #16
 8003b1c:	f107 0314 	add.w	r3, r7, #20
 8003b20:	4611      	mov	r1, r2
 8003b22:	4618      	mov	r0, r3
 8003b24:	f002 fcca 	bl	80064bc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003b28:	f002 fcb4 	bl	8006494 <HAL_RCC_GetPCLK2Freq>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	005b      	lsls	r3, r3, #1
 8003b30:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b34:	4a13      	ldr	r2, [pc, #76]	; (8003b84 <HAL_InitTick+0xa8>)
 8003b36:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3a:	0c9b      	lsrs	r3, r3, #18
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003b40:	4b11      	ldr	r3, [pc, #68]	; (8003b88 <HAL_InitTick+0xac>)
 8003b42:	4a12      	ldr	r2, [pc, #72]	; (8003b8c <HAL_InitTick+0xb0>)
 8003b44:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003b46:	4b10      	ldr	r3, [pc, #64]	; (8003b88 <HAL_InitTick+0xac>)
 8003b48:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003b4c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003b4e:	4a0e      	ldr	r2, [pc, #56]	; (8003b88 <HAL_InitTick+0xac>)
 8003b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b52:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003b54:	4b0c      	ldr	r3, [pc, #48]	; (8003b88 <HAL_InitTick+0xac>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b5a:	4b0b      	ldr	r3, [pc, #44]	; (8003b88 <HAL_InitTick+0xac>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003b60:	4809      	ldr	r0, [pc, #36]	; (8003b88 <HAL_InitTick+0xac>)
 8003b62:	f003 fd57 	bl	8007614 <HAL_TIM_Base_Init>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d104      	bne.n	8003b76 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003b6c:	4806      	ldr	r0, [pc, #24]	; (8003b88 <HAL_InitTick+0xac>)
 8003b6e:	f003 fdab 	bl	80076c8 <HAL_TIM_Base_Start_IT>
 8003b72:	4603      	mov	r3, r0
 8003b74:	e000      	b.n	8003b78 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3730      	adds	r7, #48	; 0x30
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	40023800 	.word	0x40023800
 8003b84:	431bde83 	.word	0x431bde83
 8003b88:	20000684 	.word	0x20000684
 8003b8c:	40010000 	.word	0x40010000

08003b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b90:	b480      	push	{r7}
 8003b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b94:	e7fe      	b.n	8003b94 <NMI_Handler+0x4>

08003b96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b96:	b480      	push	{r7}
 8003b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b9a:	e7fe      	b.n	8003b9a <HardFault_Handler+0x4>

08003b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ba0:	e7fe      	b.n	8003ba0 <MemManage_Handler+0x4>

08003ba2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ba6:	e7fe      	b.n	8003ba6 <BusFault_Handler+0x4>

08003ba8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003bac:	e7fe      	b.n	8003bac <UsageFault_Handler+0x4>

08003bae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003bae:	b480      	push	{r7}
 8003bb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003bb2:	bf00      	nop
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003bc0:	4802      	ldr	r0, [pc, #8]	; (8003bcc <DMA1_Stream5_IRQHandler+0x10>)
 8003bc2:	f000 ff81 	bl	8004ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003bc6:	bf00      	nop
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	200001ec 	.word	0x200001ec

08003bd0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003bd4:	4802      	ldr	r0, [pc, #8]	; (8003be0 <DMA1_Stream6_IRQHandler+0x10>)
 8003bd6:	f000 ff77 	bl	8004ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003bda:	bf00      	nop
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	2000024c 	.word	0x2000024c

08003be4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003be8:	4802      	ldr	r0, [pc, #8]	; (8003bf4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003bea:	f003 fddd 	bl	80077a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003bee:	bf00      	nop
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	20000684 	.word	0x20000684

08003bf8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003bfc:	4803      	ldr	r0, [pc, #12]	; (8003c0c <USART2_IRQHandler+0x14>)
 8003bfe:	f004 fa09 	bl	8008014 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  USER_UART_IRQHandler(&huart2);
 8003c02:	4802      	ldr	r0, [pc, #8]	; (8003c0c <USART2_IRQHandler+0x14>)
 8003c04:	f7fd fde4 	bl	80017d0 <USER_UART_IRQHandler>
  /* USER CODE END USART2_IRQn 1 */
}
 8003c08:	bf00      	nop
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	20000164 	.word	0x20000164

08003c10 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8003c14:	4802      	ldr	r0, [pc, #8]	; (8003c20 <DMA2_Stream1_IRQHandler+0x10>)
 8003c16:	f000 ff57 	bl	8004ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003c1a:	bf00      	nop
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	200002ac 	.word	0x200002ac

08003c24 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8003c28:	4802      	ldr	r0, [pc, #8]	; (8003c34 <DMA2_Stream6_IRQHandler+0x10>)
 8003c2a:	f000 ff4d 	bl	8004ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8003c2e:	bf00      	nop
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	2000030c 	.word	0x2000030c

08003c38 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003c3c:	4803      	ldr	r0, [pc, #12]	; (8003c4c <USART6_IRQHandler+0x14>)
 8003c3e:	f004 f9e9 	bl	8008014 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */
  USER_UART_IRQHandler(&huart6);
 8003c42:	4802      	ldr	r0, [pc, #8]	; (8003c4c <USART6_IRQHandler+0x14>)
 8003c44:	f7fd fdc4 	bl	80017d0 <USER_UART_IRQHandler>
  /* USER CODE END USART6_IRQn 1 */
}
 8003c48:	bf00      	nop
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	200001a8 	.word	0x200001a8

08003c50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b086      	sub	sp, #24
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c58:	4a14      	ldr	r2, [pc, #80]	; (8003cac <_sbrk+0x5c>)
 8003c5a:	4b15      	ldr	r3, [pc, #84]	; (8003cb0 <_sbrk+0x60>)
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c64:	4b13      	ldr	r3, [pc, #76]	; (8003cb4 <_sbrk+0x64>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d102      	bne.n	8003c72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c6c:	4b11      	ldr	r3, [pc, #68]	; (8003cb4 <_sbrk+0x64>)
 8003c6e:	4a12      	ldr	r2, [pc, #72]	; (8003cb8 <_sbrk+0x68>)
 8003c70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c72:	4b10      	ldr	r3, [pc, #64]	; (8003cb4 <_sbrk+0x64>)
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4413      	add	r3, r2
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d207      	bcs.n	8003c90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c80:	f009 fb6c 	bl	800d35c <__errno>
 8003c84:	4603      	mov	r3, r0
 8003c86:	220c      	movs	r2, #12
 8003c88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c8e:	e009      	b.n	8003ca4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c90:	4b08      	ldr	r3, [pc, #32]	; (8003cb4 <_sbrk+0x64>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c96:	4b07      	ldr	r3, [pc, #28]	; (8003cb4 <_sbrk+0x64>)
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	4a05      	ldr	r2, [pc, #20]	; (8003cb4 <_sbrk+0x64>)
 8003ca0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3718      	adds	r7, #24
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	20020000 	.word	0x20020000
 8003cb0:	00000400 	.word	0x00000400
 8003cb4:	200006cc 	.word	0x200006cc
 8003cb8:	200050a0 	.word	0x200050a0

08003cbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003cc0:	4b06      	ldr	r3, [pc, #24]	; (8003cdc <SystemInit+0x20>)
 8003cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc6:	4a05      	ldr	r2, [pc, #20]	; (8003cdc <SystemInit+0x20>)
 8003cc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ccc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003cd0:	bf00      	nop
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	e000ed00 	.word	0xe000ed00

08003ce0 <W25qxx_Spi>:



//###################################################################################################################
uint8_t	W25qxx_Spi(uint8_t	Data)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b086      	sub	sp, #24
 8003ce4:	af02      	add	r7, sp, #8
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	71fb      	strb	r3, [r7, #7]
	uint8_t	ret;

	HAL_SPI_TransmitReceive(W25QXX_SPI_PTR, &Data, &ret, 1, 100); // spi2
 8003cea:	f107 020f 	add.w	r2, r7, #15
 8003cee:	1df9      	adds	r1, r7, #7
 8003cf0:	2364      	movs	r3, #100	; 0x64
 8003cf2:	9300      	str	r3, [sp, #0]
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	4804      	ldr	r0, [pc, #16]	; (8003d08 <W25qxx_Spi+0x28>)
 8003cf8:	f003 fa1f 	bl	800713a <HAL_SPI_TransmitReceive>
	ret = W25QXX_SPI->DR;*/

	//while((W25QXX_SPI->SR & SPI_SR_BSY));
	//__HAL_SPI_CLEAR_OVRFLAG(&hspi2);

	return ret;
 8003cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	2000010c 	.word	0x2000010c

08003d0c <W25qxx_ReadID>:

//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8003d12:	2300      	movs	r3, #0
 8003d14:	60fb      	str	r3, [r7, #12]
 8003d16:	2300      	movs	r3, #0
 8003d18:	60bb      	str	r3, [r7, #8]
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	607b      	str	r3, [r7, #4]
 8003d1e:	2300      	movs	r3, #0
 8003d20:	603b      	str	r3, [r7, #0]

	W25QFLASH_CS_SELECT;
 8003d22:	2200      	movs	r2, #0
 8003d24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d28:	4813      	ldr	r0, [pc, #76]	; (8003d78 <W25qxx_ReadID+0x6c>)
 8003d2a:	f001 fae3 	bl	80052f4 <HAL_GPIO_WritePin>

	W25qxx_Spi(W25_GET_JEDEC_ID);
 8003d2e:	209f      	movs	r0, #159	; 0x9f
 8003d30:	f7ff ffd6 	bl	8003ce0 <W25qxx_Spi>

	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003d34:	20a5      	movs	r0, #165	; 0xa5
 8003d36:	f7ff ffd3 	bl	8003ce0 <W25qxx_Spi>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003d3e:	20a5      	movs	r0, #165	; 0xa5
 8003d40:	f7ff ffce 	bl	8003ce0 <W25qxx_Spi>
 8003d44:	4603      	mov	r3, r0
 8003d46:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003d48:	20a5      	movs	r0, #165	; 0xa5
 8003d4a:	f7ff ffc9 	bl	8003ce0 <W25qxx_Spi>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	603b      	str	r3, [r7, #0]

	W25QFLASH_CS_UNSELECT;
 8003d52:	2201      	movs	r2, #1
 8003d54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d58:	4807      	ldr	r0, [pc, #28]	; (8003d78 <W25qxx_ReadID+0x6c>)
 8003d5a:	f001 facb 	bl	80052f4 <HAL_GPIO_WritePin>

	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	041a      	lsls	r2, r3, #16
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	021b      	lsls	r3, r3, #8
 8003d66:	4313      	orrs	r3, r2
 8003d68:	683a      	ldr	r2, [r7, #0]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	60fb      	str	r3, [r7, #12]

	return Temp;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3710      	adds	r7, #16
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	40020400 	.word	0x40020400

08003d7c <W25qxx_WriteEnable>:
	W25QFLASH_CS_UNSELECT;
}*/

//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
	W25QFLASH_CS_SELECT;
 8003d80:	2200      	movs	r2, #0
 8003d82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d86:	4808      	ldr	r0, [pc, #32]	; (8003da8 <W25qxx_WriteEnable+0x2c>)
 8003d88:	f001 fab4 	bl	80052f4 <HAL_GPIO_WritePin>
	W25qxx_Spi(W25_WRITE_ENABLE);
 8003d8c:	2006      	movs	r0, #6
 8003d8e:	f7ff ffa7 	bl	8003ce0 <W25qxx_Spi>
	W25QFLASH_CS_UNSELECT;
 8003d92:	2201      	movs	r2, #1
 8003d94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d98:	4803      	ldr	r0, [pc, #12]	; (8003da8 <W25qxx_WriteEnable+0x2c>)
 8003d9a:	f001 faab 	bl	80052f4 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8003d9e:	2001      	movs	r0, #1
 8003da0:	f000 fbd8 	bl	8004554 <HAL_Delay>
}
 8003da4:	bf00      	nop
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	40020400 	.word	0x40020400

08003dac <W25qxx_WaitForWriteEnd>:
	W25QFLASH_CS_UNSELECT;
}*/

//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8003db0:	2001      	movs	r0, #1
 8003db2:	f000 fbcf 	bl	8004554 <HAL_Delay>
	W25QFLASH_CS_SELECT;
 8003db6:	2200      	movs	r2, #0
 8003db8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003dbc:	480f      	ldr	r0, [pc, #60]	; (8003dfc <W25qxx_WaitForWriteEnd+0x50>)
 8003dbe:	f001 fa99 	bl	80052f4 <HAL_GPIO_WritePin>
	W25qxx_Spi(W25_READ_STATUS_1);
 8003dc2:	2005      	movs	r0, #5
 8003dc4:	f7ff ff8c 	bl	8003ce0 <W25qxx_Spi>

	do{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003dc8:	20a5      	movs	r0, #165	; 0xa5
 8003dca:	f7ff ff89 	bl	8003ce0 <W25qxx_Spi>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	4b0b      	ldr	r3, [pc, #44]	; (8003e00 <W25qxx_WaitForWriteEnd+0x54>)
 8003dd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8003dd8:	2001      	movs	r0, #1
 8003dda:	f000 fbbb 	bl	8004554 <HAL_Delay>
	}
	while((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8003dde:	4b08      	ldr	r3, [pc, #32]	; (8003e00 <W25qxx_WaitForWriteEnd+0x54>)
 8003de0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003de4:	f003 0301 	and.w	r3, r3, #1
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1ed      	bne.n	8003dc8 <W25qxx_WaitForWriteEnd+0x1c>

	W25QFLASH_CS_UNSELECT;
 8003dec:	2201      	movs	r2, #1
 8003dee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003df2:	4802      	ldr	r0, [pc, #8]	; (8003dfc <W25qxx_WaitForWriteEnd+0x50>)
 8003df4:	f001 fa7e 	bl	80052f4 <HAL_GPIO_WritePin>
}
 8003df8:	bf00      	nop
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	40020400 	.word	0x40020400
 8003e00:	20000710 	.word	0x20000710

08003e04 <W25qxx_Init>:

//###################################################################################################################
uint8_t W25qxx_Init(void)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8003e0a:	4bb2      	ldr	r3, [pc, #712]	; (80040d4 <W25qxx_Init+0x2d0>)
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while(HAL_GetTick() < 100)
 8003e12:	e002      	b.n	8003e1a <W25qxx_Init+0x16>
	W25qxx_Delay(1);
 8003e14:	2001      	movs	r0, #1
 8003e16:	f000 fb9d 	bl	8004554 <HAL_Delay>
	while(HAL_GetTick() < 100)
 8003e1a:	f000 fb8f 	bl	800453c <HAL_GetTick>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b63      	cmp	r3, #99	; 0x63
 8003e22:	d9f7      	bls.n	8003e14 <W25qxx_Init+0x10>

	W25QFLASH_CS_UNSELECT;
 8003e24:	2201      	movs	r2, #1
 8003e26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003e2a:	48ab      	ldr	r0, [pc, #684]	; (80040d8 <W25qxx_Init+0x2d4>)
 8003e2c:	f001 fa62 	bl	80052f4 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8003e30:	2064      	movs	r0, #100	; 0x64
 8003e32:	f000 fb8f 	bl	8004554 <HAL_Delay>

	uint32_t id;

	#if (INIT_DEBUG == 1)
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Init Begin...\n", 14, 1000);
 8003e36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e3a:	220e      	movs	r2, #14
 8003e3c:	49a7      	ldr	r1, [pc, #668]	; (80040dc <W25qxx_Init+0x2d8>)
 8003e3e:	48a8      	ldr	r0, [pc, #672]	; (80040e0 <W25qxx_Init+0x2dc>)
 8003e40:	f003 fee3 	bl	8007c0a <HAL_UART_Transmit>
	#endif
	
	id = W25qxx_ReadID();
 8003e44:	f7ff ff62 	bl	8003d0c <W25qxx_ReadID>
 8003e48:	6078      	str	r0, [r7, #4]

	#if (INIT_DEBUG == 1)
	snprintf(buf, 64, "ID:0x%lX\n", id);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4aa5      	ldr	r2, [pc, #660]	; (80040e4 <W25qxx_Init+0x2e0>)
 8003e4e:	2140      	movs	r1, #64	; 0x40
 8003e50:	48a5      	ldr	r0, [pc, #660]	; (80040e8 <W25qxx_Init+0x2e4>)
 8003e52:	f009 fac3 	bl	800d3dc <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 8003e56:	48a4      	ldr	r0, [pc, #656]	; (80040e8 <W25qxx_Init+0x2e4>)
 8003e58:	f7fc f9da 	bl	8000210 <strlen>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e64:	49a0      	ldr	r1, [pc, #640]	; (80040e8 <W25qxx_Init+0x2e4>)
 8003e66:	489e      	ldr	r0, [pc, #632]	; (80040e0 <W25qxx_Init+0x2dc>)
 8003e68:	f003 fecf 	bl	8007c0a <HAL_UART_Transmit>
	#endif

	switch(id & 0x0000FFFF)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	f243 0217 	movw	r2, #12311	; 0x3017
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d839      	bhi.n	8003eec <W25qxx_Init+0xe8>
 8003e78:	f243 0211 	movw	r2, #12305	; 0x3011
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d21d      	bcs.n	8003ebc <W25qxx_Init+0xb8>
 8003e80:	e11a      	b.n	80040b8 <W25qxx_Init+0x2b4>
 8003e82:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8003e86:	3b11      	subs	r3, #17
 8003e88:	2b09      	cmp	r3, #9
 8003e8a:	f200 8115 	bhi.w	80040b8 <W25qxx_Init+0x2b4>
 8003e8e:	a201      	add	r2, pc, #4	; (adr r2, 8003e94 <W25qxx_Init+0x90>)
 8003e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e94:	08004003 	.word	0x08004003
 8003e98:	08003fe7 	.word	0x08003fe7
 8003e9c:	08003fcb 	.word	0x08003fcb
 8003ea0:	08003faf 	.word	0x08003faf
 8003ea4:	08003f93 	.word	0x08003f93
 8003ea8:	08003f77 	.word	0x08003f77
 8003eac:	08003f5b 	.word	0x08003f5b
 8003eb0:	08003f3d 	.word	0x08003f3d
 8003eb4:	08003f1f 	.word	0x08003f1f
 8003eb8:	08003f01 	.word	0x08003f01
 8003ebc:	f5a3 5340 	sub.w	r3, r3, #12288	; 0x3000
 8003ec0:	3b11      	subs	r3, #17
 8003ec2:	2b06      	cmp	r3, #6
 8003ec4:	f200 80f8 	bhi.w	80040b8 <W25qxx_Init+0x2b4>
 8003ec8:	a201      	add	r2, pc, #4	; (adr r2, 8003ed0 <W25qxx_Init+0xcc>)
 8003eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ece:	bf00      	nop
 8003ed0:	080040a3 	.word	0x080040a3
 8003ed4:	0800408d 	.word	0x0800408d
 8003ed8:	08004077 	.word	0x08004077
 8003edc:	08004061 	.word	0x08004061
 8003ee0:	0800404b 	.word	0x0800404b
 8003ee4:	08004035 	.word	0x08004035
 8003ee8:	0800401f 	.word	0x0800401f
 8003eec:	f244 021a 	movw	r2, #16410	; 0x401a
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	f200 80e1 	bhi.w	80040b8 <W25qxx_Init+0x2b4>
 8003ef6:	f244 0211 	movw	r2, #16401	; 0x4011
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d2c1      	bcs.n	8003e82 <W25qxx_Init+0x7e>
 8003efe:	e0db      	b.n	80040b8 <W25qxx_Init+0x2b4>
	{
		case 0x401A:	// 	w25q512
			w25qxx.ID = W25Q512;
 8003f00:	4b74      	ldr	r3, [pc, #464]	; (80040d4 <W25qxx_Init+0x2d0>)
 8003f02:	220a      	movs	r2, #10
 8003f04:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 1024;
 8003f06:	4b73      	ldr	r3, [pc, #460]	; (80040d4 <W25qxx_Init+0x2d0>)
 8003f08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f0c:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q512\n", 14, 1000);
 8003f0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f12:	220e      	movs	r2, #14
 8003f14:	4975      	ldr	r1, [pc, #468]	; (80040ec <W25qxx_Init+0x2e8>)
 8003f16:	4872      	ldr	r0, [pc, #456]	; (80040e0 <W25qxx_Init+0x2dc>)
 8003f18:	f003 fe77 	bl	8007c0a <HAL_UART_Transmit>
			#endif
		break;
 8003f1c:	e10a      	b.n	8004134 <W25qxx_Init+0x330>

		case 0x4019:	// 	w25q256
			w25qxx.ID = W25Q256;
 8003f1e:	4b6d      	ldr	r3, [pc, #436]	; (80040d4 <W25qxx_Init+0x2d0>)
 8003f20:	2209      	movs	r2, #9
 8003f22:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 512;
 8003f24:	4b6b      	ldr	r3, [pc, #428]	; (80040d4 <W25qxx_Init+0x2d0>)
 8003f26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f2a:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q256\n", 14, 1000);
 8003f2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f30:	220e      	movs	r2, #14
 8003f32:	496f      	ldr	r1, [pc, #444]	; (80040f0 <W25qxx_Init+0x2ec>)
 8003f34:	486a      	ldr	r0, [pc, #424]	; (80040e0 <W25qxx_Init+0x2dc>)
 8003f36:	f003 fe68 	bl	8007c0a <HAL_UART_Transmit>
			#endif
		break;
 8003f3a:	e0fb      	b.n	8004134 <W25qxx_Init+0x330>

		case 0x4018:	// 	w25q128
			w25qxx.ID = W25Q128;
 8003f3c:	4b65      	ldr	r3, [pc, #404]	; (80040d4 <W25qxx_Init+0x2d0>)
 8003f3e:	2208      	movs	r2, #8
 8003f40:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 256;
 8003f42:	4b64      	ldr	r3, [pc, #400]	; (80040d4 <W25qxx_Init+0x2d0>)
 8003f44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f48:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q128\n", 14, 1000);
 8003f4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f4e:	220e      	movs	r2, #14
 8003f50:	4968      	ldr	r1, [pc, #416]	; (80040f4 <W25qxx_Init+0x2f0>)
 8003f52:	4863      	ldr	r0, [pc, #396]	; (80040e0 <W25qxx_Init+0x2dc>)
 8003f54:	f003 fe59 	bl	8007c0a <HAL_UART_Transmit>
			#endif
		break;
 8003f58:	e0ec      	b.n	8004134 <W25qxx_Init+0x330>

		case 0x4017:	//	w25q64
			w25qxx.ID = W25Q64;
 8003f5a:	4b5e      	ldr	r3, [pc, #376]	; (80040d4 <W25qxx_Init+0x2d0>)
 8003f5c:	2207      	movs	r2, #7
 8003f5e:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 128;
 8003f60:	4b5c      	ldr	r3, [pc, #368]	; (80040d4 <W25qxx_Init+0x2d0>)
 8003f62:	2280      	movs	r2, #128	; 0x80
 8003f64:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q64\n", 13, 1000);
 8003f66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f6a:	220d      	movs	r2, #13
 8003f6c:	4962      	ldr	r1, [pc, #392]	; (80040f8 <W25qxx_Init+0x2f4>)
 8003f6e:	485c      	ldr	r0, [pc, #368]	; (80040e0 <W25qxx_Init+0x2dc>)
 8003f70:	f003 fe4b 	bl	8007c0a <HAL_UART_Transmit>
			#endif
		break;
 8003f74:	e0de      	b.n	8004134 <W25qxx_Init+0x330>

		case 0x4016:	//	w25q32
			w25qxx.ID = W25Q32;
 8003f76:	4b57      	ldr	r3, [pc, #348]	; (80040d4 <W25qxx_Init+0x2d0>)
 8003f78:	2206      	movs	r2, #6
 8003f7a:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 64;
 8003f7c:	4b55      	ldr	r3, [pc, #340]	; (80040d4 <W25qxx_Init+0x2d0>)
 8003f7e:	2240      	movs	r2, #64	; 0x40
 8003f80:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q32\n", 13, 1000);
 8003f82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f86:	220d      	movs	r2, #13
 8003f88:	495c      	ldr	r1, [pc, #368]	; (80040fc <W25qxx_Init+0x2f8>)
 8003f8a:	4855      	ldr	r0, [pc, #340]	; (80040e0 <W25qxx_Init+0x2dc>)
 8003f8c:	f003 fe3d 	bl	8007c0a <HAL_UART_Transmit>
			#endif
		break;
 8003f90:	e0d0      	b.n	8004134 <W25qxx_Init+0x330>

		case 0x4015:	//	w25q16
			w25qxx.ID = W25Q16;
 8003f92:	4b50      	ldr	r3, [pc, #320]	; (80040d4 <W25qxx_Init+0x2d0>)
 8003f94:	2205      	movs	r2, #5
 8003f96:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 32;
 8003f98:	4b4e      	ldr	r3, [pc, #312]	; (80040d4 <W25qxx_Init+0x2d0>)
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q16\n", 13, 1000);
 8003f9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fa2:	220d      	movs	r2, #13
 8003fa4:	4956      	ldr	r1, [pc, #344]	; (8004100 <W25qxx_Init+0x2fc>)
 8003fa6:	484e      	ldr	r0, [pc, #312]	; (80040e0 <W25qxx_Init+0x2dc>)
 8003fa8:	f003 fe2f 	bl	8007c0a <HAL_UART_Transmit>
			#endif
		break;
 8003fac:	e0c2      	b.n	8004134 <W25qxx_Init+0x330>

		case 0x4014:	//	w25q80
			w25qxx.ID = W25Q80;
 8003fae:	4b49      	ldr	r3, [pc, #292]	; (80040d4 <W25qxx_Init+0x2d0>)
 8003fb0:	2204      	movs	r2, #4
 8003fb2:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 16;
 8003fb4:	4b47      	ldr	r3, [pc, #284]	; (80040d4 <W25qxx_Init+0x2d0>)
 8003fb6:	2210      	movs	r2, #16
 8003fb8:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q80\n", 13, 1000);
 8003fba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fbe:	220d      	movs	r2, #13
 8003fc0:	4950      	ldr	r1, [pc, #320]	; (8004104 <W25qxx_Init+0x300>)
 8003fc2:	4847      	ldr	r0, [pc, #284]	; (80040e0 <W25qxx_Init+0x2dc>)
 8003fc4:	f003 fe21 	bl	8007c0a <HAL_UART_Transmit>
			#endif
		break;
 8003fc8:	e0b4      	b.n	8004134 <W25qxx_Init+0x330>

		case 0x4013:	//	w25q40
			w25qxx.ID = W25Q40;
 8003fca:	4b42      	ldr	r3, [pc, #264]	; (80040d4 <W25qxx_Init+0x2d0>)
 8003fcc:	2203      	movs	r2, #3
 8003fce:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 8;
 8003fd0:	4b40      	ldr	r3, [pc, #256]	; (80040d4 <W25qxx_Init+0x2d0>)
 8003fd2:	2208      	movs	r2, #8
 8003fd4:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q40\n", 13, 1000);
 8003fd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fda:	220d      	movs	r2, #13
 8003fdc:	494a      	ldr	r1, [pc, #296]	; (8004108 <W25qxx_Init+0x304>)
 8003fde:	4840      	ldr	r0, [pc, #256]	; (80040e0 <W25qxx_Init+0x2dc>)
 8003fe0:	f003 fe13 	bl	8007c0a <HAL_UART_Transmit>
			#endif
		break;
 8003fe4:	e0a6      	b.n	8004134 <W25qxx_Init+0x330>

		case 0x4012:	//	w25q20
			w25qxx.ID = W25Q20;
 8003fe6:	4b3b      	ldr	r3, [pc, #236]	; (80040d4 <W25qxx_Init+0x2d0>)
 8003fe8:	2202      	movs	r2, #2
 8003fea:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 4;
 8003fec:	4b39      	ldr	r3, [pc, #228]	; (80040d4 <W25qxx_Init+0x2d0>)
 8003fee:	2204      	movs	r2, #4
 8003ff0:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q20\n", 13, 1000);
 8003ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ff6:	220d      	movs	r2, #13
 8003ff8:	4944      	ldr	r1, [pc, #272]	; (800410c <W25qxx_Init+0x308>)
 8003ffa:	4839      	ldr	r0, [pc, #228]	; (80040e0 <W25qxx_Init+0x2dc>)
 8003ffc:	f003 fe05 	bl	8007c0a <HAL_UART_Transmit>
			#endif
		break;
 8004000:	e098      	b.n	8004134 <W25qxx_Init+0x330>

		case 0x4011:	//	w25q10
			w25qxx.ID = W25Q10;
 8004002:	4b34      	ldr	r3, [pc, #208]	; (80040d4 <W25qxx_Init+0x2d0>)
 8004004:	2201      	movs	r2, #1
 8004006:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 2;
 8004008:	4b32      	ldr	r3, [pc, #200]	; (80040d4 <W25qxx_Init+0x2d0>)
 800400a:	2202      	movs	r2, #2
 800400c:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q10\n", 13, 1000);
 800400e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004012:	220d      	movs	r2, #13
 8004014:	493e      	ldr	r1, [pc, #248]	; (8004110 <W25qxx_Init+0x30c>)
 8004016:	4832      	ldr	r0, [pc, #200]	; (80040e0 <W25qxx_Init+0x2dc>)
 8004018:	f003 fdf7 	bl	8007c0a <HAL_UART_Transmit>
			#endif
		break;
 800401c:	e08a      	b.n	8004134 <W25qxx_Init+0x330>

		////////////////////////////////////////////////////////////////////////////////

		case 0x3017:	//	w25x64
			//w25qxx.ID = W25Q64;
			w25qxx.BlockCount = 128;
 800401e:	4b2d      	ldr	r3, [pc, #180]	; (80040d4 <W25qxx_Init+0x2d0>)
 8004020:	2280      	movs	r2, #128	; 0x80
 8004022:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x64\n", 13, 1000);
 8004024:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004028:	220d      	movs	r2, #13
 800402a:	493a      	ldr	r1, [pc, #232]	; (8004114 <W25qxx_Init+0x310>)
 800402c:	482c      	ldr	r0, [pc, #176]	; (80040e0 <W25qxx_Init+0x2dc>)
 800402e:	f003 fdec 	bl	8007c0a <HAL_UART_Transmit>
			#endif
		break;
 8004032:	e07f      	b.n	8004134 <W25qxx_Init+0x330>

		case 0x3016:	//	w25x32
			//w25qxx.ID = W25Q32;
			w25qxx.BlockCount = 64;
 8004034:	4b27      	ldr	r3, [pc, #156]	; (80040d4 <W25qxx_Init+0x2d0>)
 8004036:	2240      	movs	r2, #64	; 0x40
 8004038:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x32\n", 13, 1000);
 800403a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800403e:	220d      	movs	r2, #13
 8004040:	4935      	ldr	r1, [pc, #212]	; (8004118 <W25qxx_Init+0x314>)
 8004042:	4827      	ldr	r0, [pc, #156]	; (80040e0 <W25qxx_Init+0x2dc>)
 8004044:	f003 fde1 	bl	8007c0a <HAL_UART_Transmit>
			#endif
		break;
 8004048:	e074      	b.n	8004134 <W25qxx_Init+0x330>

		case 0x3015:	//	w25q16
			//w25qxx.ID = W25Q16;
			w25qxx.BlockCount = 32;
 800404a:	4b22      	ldr	r3, [pc, #136]	; (80040d4 <W25qxx_Init+0x2d0>)
 800404c:	2220      	movs	r2, #32
 800404e:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x16\n", 13, 1000);
 8004050:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004054:	220d      	movs	r2, #13
 8004056:	4931      	ldr	r1, [pc, #196]	; (800411c <W25qxx_Init+0x318>)
 8004058:	4821      	ldr	r0, [pc, #132]	; (80040e0 <W25qxx_Init+0x2dc>)
 800405a:	f003 fdd6 	bl	8007c0a <HAL_UART_Transmit>
			#endif
		break;
 800405e:	e069      	b.n	8004134 <W25qxx_Init+0x330>

		////////////////////////////////////////////////////////////////////////////////
		case 0x3014:	//	w25x80
			//w25qxx.ID = W25Q80;
			w25qxx.BlockCount = 16;
 8004060:	4b1c      	ldr	r3, [pc, #112]	; (80040d4 <W25qxx_Init+0x2d0>)
 8004062:	2210      	movs	r2, #16
 8004064:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x80\n", 13, 1000);
 8004066:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800406a:	220d      	movs	r2, #13
 800406c:	492c      	ldr	r1, [pc, #176]	; (8004120 <W25qxx_Init+0x31c>)
 800406e:	481c      	ldr	r0, [pc, #112]	; (80040e0 <W25qxx_Init+0x2dc>)
 8004070:	f003 fdcb 	bl	8007c0a <HAL_UART_Transmit>
			#endif
		break;
 8004074:	e05e      	b.n	8004134 <W25qxx_Init+0x330>

		case 0x3013:	//	w25x40
			//w25qxx.ID = W25Q40;
			w25qxx.BlockCount = 8;
 8004076:	4b17      	ldr	r3, [pc, #92]	; (80040d4 <W25qxx_Init+0x2d0>)
 8004078:	2208      	movs	r2, #8
 800407a:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x40\n", 13, 1000);
 800407c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004080:	220d      	movs	r2, #13
 8004082:	4928      	ldr	r1, [pc, #160]	; (8004124 <W25qxx_Init+0x320>)
 8004084:	4816      	ldr	r0, [pc, #88]	; (80040e0 <W25qxx_Init+0x2dc>)
 8004086:	f003 fdc0 	bl	8007c0a <HAL_UART_Transmit>
			#endif
		break;
 800408a:	e053      	b.n	8004134 <W25qxx_Init+0x330>

		case 0x3012:	//	w25x20
			//w25qxx.ID = W25Q20;
			w25qxx.BlockCount = 4;
 800408c:	4b11      	ldr	r3, [pc, #68]	; (80040d4 <W25qxx_Init+0x2d0>)
 800408e:	2204      	movs	r2, #4
 8004090:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x20\n", 13, 1000);
 8004092:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004096:	220d      	movs	r2, #13
 8004098:	4923      	ldr	r1, [pc, #140]	; (8004128 <W25qxx_Init+0x324>)
 800409a:	4811      	ldr	r0, [pc, #68]	; (80040e0 <W25qxx_Init+0x2dc>)
 800409c:	f003 fdb5 	bl	8007c0a <HAL_UART_Transmit>
			#endif
		break;
 80040a0:	e048      	b.n	8004134 <W25qxx_Init+0x330>

		case 0x3011:	//	w25x10
			//w25qxx.ID = W25Q10;
			w25qxx.BlockCount = 2;
 80040a2:	4b0c      	ldr	r3, [pc, #48]	; (80040d4 <W25qxx_Init+0x2d0>)
 80040a4:	2202      	movs	r2, #2
 80040a6:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x10\n", 13, 1000);
 80040a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040ac:	220d      	movs	r2, #13
 80040ae:	491f      	ldr	r1, [pc, #124]	; (800412c <W25qxx_Init+0x328>)
 80040b0:	480b      	ldr	r0, [pc, #44]	; (80040e0 <W25qxx_Init+0x2dc>)
 80040b2:	f003 fdaa 	bl	8007c0a <HAL_UART_Transmit>
			#endif
		break;
 80040b6:	e03d      	b.n	8004134 <W25qxx_Init+0x330>



		default:
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Unknown ID\n", 11, 1000);
 80040b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040bc:	220b      	movs	r2, #11
 80040be:	491c      	ldr	r1, [pc, #112]	; (8004130 <W25qxx_Init+0x32c>)
 80040c0:	4807      	ldr	r0, [pc, #28]	; (80040e0 <W25qxx_Init+0x2dc>)
 80040c2:	f003 fda2 	bl	8007c0a <HAL_UART_Transmit>
			#endif

			w25qxx.Lock = 0;
 80040c6:	4b03      	ldr	r3, [pc, #12]	; (80040d4 <W25qxx_Init+0x2d0>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			return 0;
 80040ce:	2300      	movs	r3, #0
 80040d0:	e0e1      	b.n	8004296 <W25qxx_Init+0x492>
 80040d2:	bf00      	nop
 80040d4:	20000710 	.word	0x20000710
 80040d8:	40020400 	.word	0x40020400
 80040dc:	0800ecfc 	.word	0x0800ecfc
 80040e0:	20000164 	.word	0x20000164
 80040e4:	0800ed0c 	.word	0x0800ed0c
 80040e8:	200006d0 	.word	0x200006d0
 80040ec:	0800ed18 	.word	0x0800ed18
 80040f0:	0800ed28 	.word	0x0800ed28
 80040f4:	0800ed38 	.word	0x0800ed38
 80040f8:	0800ed48 	.word	0x0800ed48
 80040fc:	0800ed58 	.word	0x0800ed58
 8004100:	0800ed68 	.word	0x0800ed68
 8004104:	0800ed78 	.word	0x0800ed78
 8004108:	0800ed88 	.word	0x0800ed88
 800410c:	0800ed98 	.word	0x0800ed98
 8004110:	0800eda8 	.word	0x0800eda8
 8004114:	0800edb8 	.word	0x0800edb8
 8004118:	0800edc8 	.word	0x0800edc8
 800411c:	0800edd8 	.word	0x0800edd8
 8004120:	0800ede8 	.word	0x0800ede8
 8004124:	0800edf8 	.word	0x0800edf8
 8004128:	0800ee08 	.word	0x0800ee08
 800412c:	0800ee18 	.word	0x0800ee18
 8004130:	0800ee28 	.word	0x0800ee28
	}


	w25qxx.PageSize = 256;
 8004134:	4b5a      	ldr	r3, [pc, #360]	; (80042a0 <W25qxx_Init+0x49c>)
 8004136:	f44f 7280 	mov.w	r2, #256	; 0x100
 800413a:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 800413c:	4b58      	ldr	r3, [pc, #352]	; (80042a0 <W25qxx_Init+0x49c>)
 800413e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004142:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8004144:	4b56      	ldr	r3, [pc, #344]	; (80042a0 <W25qxx_Init+0x49c>)
 8004146:	69db      	ldr	r3, [r3, #28]
 8004148:	011b      	lsls	r3, r3, #4
 800414a:	4a55      	ldr	r2, [pc, #340]	; (80042a0 <W25qxx_Init+0x49c>)
 800414c:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 800414e:	4b54      	ldr	r3, [pc, #336]	; (80042a0 <W25qxx_Init+0x49c>)
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	4a53      	ldr	r2, [pc, #332]	; (80042a0 <W25qxx_Init+0x49c>)
 8004154:	6912      	ldr	r2, [r2, #16]
 8004156:	fb02 f303 	mul.w	r3, r2, r3
 800415a:	4a51      	ldr	r2, [pc, #324]	; (80042a0 <W25qxx_Init+0x49c>)
 800415c:	8952      	ldrh	r2, [r2, #10]
 800415e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004162:	4a4f      	ldr	r2, [pc, #316]	; (80042a0 <W25qxx_Init+0x49c>)
 8004164:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8004166:	4b4e      	ldr	r3, [pc, #312]	; (80042a0 <W25qxx_Init+0x49c>)
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	011b      	lsls	r3, r3, #4
 800416c:	4a4c      	ldr	r2, [pc, #304]	; (80042a0 <W25qxx_Init+0x49c>)
 800416e:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8004170:	4b4b      	ldr	r3, [pc, #300]	; (80042a0 <W25qxx_Init+0x49c>)
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	4a4a      	ldr	r2, [pc, #296]	; (80042a0 <W25qxx_Init+0x49c>)
 8004176:	6912      	ldr	r2, [r2, #16]
 8004178:	fb02 f303 	mul.w	r3, r2, r3
 800417c:	0a9b      	lsrs	r3, r3, #10
 800417e:	4a48      	ldr	r2, [pc, #288]	; (80042a0 <W25qxx_Init+0x49c>)
 8004180:	6213      	str	r3, [r2, #32]
	//W25qxx_ReadStatusRegister(1);
	//W25qxx_ReadStatusRegister(2);
	//W25qxx_ReadStatusRegister(3);

	#if (INIT_DEBUG == 1)
	snprintf(buf, 64, "Page Size: %d Bytes\n", w25qxx.PageSize);
 8004182:	4b47      	ldr	r3, [pc, #284]	; (80042a0 <W25qxx_Init+0x49c>)
 8004184:	895b      	ldrh	r3, [r3, #10]
 8004186:	4a47      	ldr	r2, [pc, #284]	; (80042a4 <W25qxx_Init+0x4a0>)
 8004188:	2140      	movs	r1, #64	; 0x40
 800418a:	4847      	ldr	r0, [pc, #284]	; (80042a8 <W25qxx_Init+0x4a4>)
 800418c:	f009 f926 	bl	800d3dc <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 8004190:	4845      	ldr	r0, [pc, #276]	; (80042a8 <W25qxx_Init+0x4a4>)
 8004192:	f7fc f83d 	bl	8000210 <strlen>
 8004196:	4603      	mov	r3, r0
 8004198:	b29a      	uxth	r2, r3
 800419a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800419e:	4942      	ldr	r1, [pc, #264]	; (80042a8 <W25qxx_Init+0x4a4>)
 80041a0:	4842      	ldr	r0, [pc, #264]	; (80042ac <W25qxx_Init+0x4a8>)
 80041a2:	f003 fd32 	bl	8007c0a <HAL_UART_Transmit>

	snprintf(buf, 64, "Page Count: %lu\n", w25qxx.PageCount);
 80041a6:	4b3e      	ldr	r3, [pc, #248]	; (80042a0 <W25qxx_Init+0x49c>)
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	4a41      	ldr	r2, [pc, #260]	; (80042b0 <W25qxx_Init+0x4ac>)
 80041ac:	2140      	movs	r1, #64	; 0x40
 80041ae:	483e      	ldr	r0, [pc, #248]	; (80042a8 <W25qxx_Init+0x4a4>)
 80041b0:	f009 f914 	bl	800d3dc <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 80041b4:	483c      	ldr	r0, [pc, #240]	; (80042a8 <W25qxx_Init+0x4a4>)
 80041b6:	f7fc f82b 	bl	8000210 <strlen>
 80041ba:	4603      	mov	r3, r0
 80041bc:	b29a      	uxth	r2, r3
 80041be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041c2:	4939      	ldr	r1, [pc, #228]	; (80042a8 <W25qxx_Init+0x4a4>)
 80041c4:	4839      	ldr	r0, [pc, #228]	; (80042ac <W25qxx_Init+0x4a8>)
 80041c6:	f003 fd20 	bl	8007c0a <HAL_UART_Transmit>

	snprintf(buf, 64, "Sector Size: %lu Bytes\n", w25qxx.SectorSize);
 80041ca:	4b35      	ldr	r3, [pc, #212]	; (80042a0 <W25qxx_Init+0x49c>)
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	4a39      	ldr	r2, [pc, #228]	; (80042b4 <W25qxx_Init+0x4b0>)
 80041d0:	2140      	movs	r1, #64	; 0x40
 80041d2:	4835      	ldr	r0, [pc, #212]	; (80042a8 <W25qxx_Init+0x4a4>)
 80041d4:	f009 f902 	bl	800d3dc <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 80041d8:	4833      	ldr	r0, [pc, #204]	; (80042a8 <W25qxx_Init+0x4a4>)
 80041da:	f7fc f819 	bl	8000210 <strlen>
 80041de:	4603      	mov	r3, r0
 80041e0:	b29a      	uxth	r2, r3
 80041e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041e6:	4930      	ldr	r1, [pc, #192]	; (80042a8 <W25qxx_Init+0x4a4>)
 80041e8:	4830      	ldr	r0, [pc, #192]	; (80042ac <W25qxx_Init+0x4a8>)
 80041ea:	f003 fd0e 	bl	8007c0a <HAL_UART_Transmit>

	snprintf(buf, 64, "Sector Count: %lu\n", w25qxx.SectorCount);
 80041ee:	4b2c      	ldr	r3, [pc, #176]	; (80042a0 <W25qxx_Init+0x49c>)
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	4a31      	ldr	r2, [pc, #196]	; (80042b8 <W25qxx_Init+0x4b4>)
 80041f4:	2140      	movs	r1, #64	; 0x40
 80041f6:	482c      	ldr	r0, [pc, #176]	; (80042a8 <W25qxx_Init+0x4a4>)
 80041f8:	f009 f8f0 	bl	800d3dc <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 80041fc:	482a      	ldr	r0, [pc, #168]	; (80042a8 <W25qxx_Init+0x4a4>)
 80041fe:	f7fc f807 	bl	8000210 <strlen>
 8004202:	4603      	mov	r3, r0
 8004204:	b29a      	uxth	r2, r3
 8004206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800420a:	4927      	ldr	r1, [pc, #156]	; (80042a8 <W25qxx_Init+0x4a4>)
 800420c:	4827      	ldr	r0, [pc, #156]	; (80042ac <W25qxx_Init+0x4a8>)
 800420e:	f003 fcfc 	bl	8007c0a <HAL_UART_Transmit>

	snprintf(buf, 64, "Block Size: %lu Bytes\n", w25qxx.BlockSize);
 8004212:	4b23      	ldr	r3, [pc, #140]	; (80042a0 <W25qxx_Init+0x49c>)
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	4a29      	ldr	r2, [pc, #164]	; (80042bc <W25qxx_Init+0x4b8>)
 8004218:	2140      	movs	r1, #64	; 0x40
 800421a:	4823      	ldr	r0, [pc, #140]	; (80042a8 <W25qxx_Init+0x4a4>)
 800421c:	f009 f8de 	bl	800d3dc <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 8004220:	4821      	ldr	r0, [pc, #132]	; (80042a8 <W25qxx_Init+0x4a4>)
 8004222:	f7fb fff5 	bl	8000210 <strlen>
 8004226:	4603      	mov	r3, r0
 8004228:	b29a      	uxth	r2, r3
 800422a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800422e:	491e      	ldr	r1, [pc, #120]	; (80042a8 <W25qxx_Init+0x4a4>)
 8004230:	481e      	ldr	r0, [pc, #120]	; (80042ac <W25qxx_Init+0x4a8>)
 8004232:	f003 fcea 	bl	8007c0a <HAL_UART_Transmit>

	snprintf(buf, 64, "Block Count: %lu\n", w25qxx.BlockCount);
 8004236:	4b1a      	ldr	r3, [pc, #104]	; (80042a0 <W25qxx_Init+0x49c>)
 8004238:	69db      	ldr	r3, [r3, #28]
 800423a:	4a21      	ldr	r2, [pc, #132]	; (80042c0 <W25qxx_Init+0x4bc>)
 800423c:	2140      	movs	r1, #64	; 0x40
 800423e:	481a      	ldr	r0, [pc, #104]	; (80042a8 <W25qxx_Init+0x4a4>)
 8004240:	f009 f8cc 	bl	800d3dc <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 8004244:	4818      	ldr	r0, [pc, #96]	; (80042a8 <W25qxx_Init+0x4a4>)
 8004246:	f7fb ffe3 	bl	8000210 <strlen>
 800424a:	4603      	mov	r3, r0
 800424c:	b29a      	uxth	r2, r3
 800424e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004252:	4915      	ldr	r1, [pc, #84]	; (80042a8 <W25qxx_Init+0x4a4>)
 8004254:	4815      	ldr	r0, [pc, #84]	; (80042ac <W25qxx_Init+0x4a8>)
 8004256:	f003 fcd8 	bl	8007c0a <HAL_UART_Transmit>

	snprintf(buf, 64, "Capacity: %lu KBytes\n", w25qxx.CapacityInKiloByte);
 800425a:	4b11      	ldr	r3, [pc, #68]	; (80042a0 <W25qxx_Init+0x49c>)
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	4a19      	ldr	r2, [pc, #100]	; (80042c4 <W25qxx_Init+0x4c0>)
 8004260:	2140      	movs	r1, #64	; 0x40
 8004262:	4811      	ldr	r0, [pc, #68]	; (80042a8 <W25qxx_Init+0x4a4>)
 8004264:	f009 f8ba 	bl	800d3dc <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 8004268:	480f      	ldr	r0, [pc, #60]	; (80042a8 <W25qxx_Init+0x4a4>)
 800426a:	f7fb ffd1 	bl	8000210 <strlen>
 800426e:	4603      	mov	r3, r0
 8004270:	b29a      	uxth	r2, r3
 8004272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004276:	490c      	ldr	r1, [pc, #48]	; (80042a8 <W25qxx_Init+0x4a4>)
 8004278:	480c      	ldr	r0, [pc, #48]	; (80042ac <W25qxx_Init+0x4a8>)
 800427a:	f003 fcc6 	bl	8007c0a <HAL_UART_Transmit>

	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Init Done\n", 10, 1000);
 800427e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004282:	220a      	movs	r2, #10
 8004284:	4910      	ldr	r1, [pc, #64]	; (80042c8 <W25qxx_Init+0x4c4>)
 8004286:	4809      	ldr	r0, [pc, #36]	; (80042ac <W25qxx_Init+0x4a8>)
 8004288:	f003 fcbf 	bl	8007c0a <HAL_UART_Transmit>
	#endif

	w25qxx.Lock = 0;
 800428c:	4b04      	ldr	r3, [pc, #16]	; (80042a0 <W25qxx_Init+0x49c>)
 800428e:	2200      	movs	r2, #0
 8004290:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return 1;
 8004294:	2301      	movs	r3, #1
}	
 8004296:	4618      	mov	r0, r3
 8004298:	3708      	adds	r7, #8
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	20000710 	.word	0x20000710
 80042a4:	0800ee34 	.word	0x0800ee34
 80042a8:	200006d0 	.word	0x200006d0
 80042ac:	20000164 	.word	0x20000164
 80042b0:	0800ee4c 	.word	0x0800ee4c
 80042b4:	0800ee60 	.word	0x0800ee60
 80042b8:	0800ee78 	.word	0x0800ee78
 80042bc:	0800ee8c 	.word	0x0800ee8c
 80042c0:	0800eea4 	.word	0x0800eea4
 80042c4:	0800eeb8 	.word	0x0800eeb8
 80042c8:	0800eed0 	.word	0x0800eed0

080042cc <W25qxx_EraseSector>:
	w25qxx.Lock = 0;
}

//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
	while(w25qxx.Lock == 1)
 80042d4:	e002      	b.n	80042dc <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 80042d6:	2001      	movs	r0, #1
 80042d8:	f000 f93c 	bl	8004554 <HAL_Delay>
	while(w25qxx.Lock == 1)
 80042dc:	4b24      	ldr	r3, [pc, #144]	; (8004370 <W25qxx_EraseSector+0xa4>)
 80042de:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d0f7      	beq.n	80042d6 <W25qxx_EraseSector+0xa>

	w25qxx.Lock = 1;
 80042e6:	4b22      	ldr	r3, [pc, #136]	; (8004370 <W25qxx_EraseSector+0xa4>)
 80042e8:	2201      	movs	r2, #1
 80042ea:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	W25qxx_WaitForWriteEnd();
 80042ee:	f7ff fd5d 	bl	8003dac <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 80042f2:	4b1f      	ldr	r3, [pc, #124]	; (8004370 <W25qxx_EraseSector+0xa4>)
 80042f4:	691a      	ldr	r2, [r3, #16]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	fb02 f303 	mul.w	r3, r2, r3
 80042fc:	607b      	str	r3, [r7, #4]

	W25qxx_WriteEnable();
 80042fe:	f7ff fd3d 	bl	8003d7c <W25qxx_WriteEnable>

	W25QFLASH_CS_SELECT;
 8004302:	2200      	movs	r2, #0
 8004304:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004308:	481a      	ldr	r0, [pc, #104]	; (8004374 <W25qxx_EraseSector+0xa8>)
 800430a:	f000 fff3 	bl	80052f4 <HAL_GPIO_WritePin>

	W25qxx_Spi(W25_SECTOR_ERASE);
 800430e:	2020      	movs	r0, #32
 8004310:	f7ff fce6 	bl	8003ce0 <W25qxx_Spi>

	if(w25qxx.ID >= W25Q256)
 8004314:	4b16      	ldr	r3, [pc, #88]	; (8004370 <W25qxx_EraseSector+0xa4>)
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	2b08      	cmp	r3, #8
 800431a:	d905      	bls.n	8004328 <W25qxx_EraseSector+0x5c>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	0e1b      	lsrs	r3, r3, #24
 8004320:	b2db      	uxtb	r3, r3
 8004322:	4618      	mov	r0, r3
 8004324:	f7ff fcdc 	bl	8003ce0 <W25qxx_Spi>

	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	0c1b      	lsrs	r3, r3, #16
 800432c:	b2db      	uxtb	r3, r3
 800432e:	4618      	mov	r0, r3
 8004330:	f7ff fcd6 	bl	8003ce0 <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	0a1b      	lsrs	r3, r3, #8
 8004338:	b2db      	uxtb	r3, r3
 800433a:	4618      	mov	r0, r3
 800433c:	f7ff fcd0 	bl	8003ce0 <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	b2db      	uxtb	r3, r3
 8004344:	4618      	mov	r0, r3
 8004346:	f7ff fccb 	bl	8003ce0 <W25qxx_Spi>

	W25QFLASH_CS_UNSELECT;
 800434a:	2201      	movs	r2, #1
 800434c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004350:	4808      	ldr	r0, [pc, #32]	; (8004374 <W25qxx_EraseSector+0xa8>)
 8004352:	f000 ffcf 	bl	80052f4 <HAL_GPIO_WritePin>

	W25qxx_WaitForWriteEnd();
 8004356:	f7ff fd29 	bl	8003dac <W25qxx_WaitForWriteEnd>

	W25qxx_Delay(1);
 800435a:	2001      	movs	r0, #1
 800435c:	f000 f8fa 	bl	8004554 <HAL_Delay>
	w25qxx.Lock = 0;
 8004360:	4b03      	ldr	r3, [pc, #12]	; (8004370 <W25qxx_EraseSector+0xa4>)
 8004362:	2200      	movs	r2, #0
 8004364:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004368:	bf00      	nop
 800436a:	3708      	adds	r7, #8
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	20000710 	.word	0x20000710
 8004374:	40020400 	.word	0x40020400

08004378 <W25qxx_WritePage>:
	w25qxx.Lock = 0;
}

//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
 8004384:	603b      	str	r3, [r7, #0]
	while(w25qxx.Lock == 1)
 8004386:	e002      	b.n	800438e <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8004388:	2001      	movs	r0, #1
 800438a:	f000 f8e3 	bl	8004554 <HAL_Delay>
	while(w25qxx.Lock == 1)
 800438e:	4b38      	ldr	r3, [pc, #224]	; (8004470 <W25qxx_WritePage+0xf8>)
 8004390:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004394:	2b01      	cmp	r3, #1
 8004396:	d0f7      	beq.n	8004388 <W25qxx_WritePage+0x10>

	w25qxx.Lock = 1;
 8004398:	4b35      	ldr	r3, [pc, #212]	; (8004470 <W25qxx_WritePage+0xf8>)
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	if(((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 80043a0:	683a      	ldr	r2, [r7, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4413      	add	r3, r2
 80043a6:	4a32      	ldr	r2, [pc, #200]	; (8004470 <W25qxx_WritePage+0xf8>)
 80043a8:	8952      	ldrh	r2, [r2, #10]
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d802      	bhi.n	80043b4 <W25qxx_WritePage+0x3c>
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d105      	bne.n	80043c0 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80043b4:	4b2e      	ldr	r3, [pc, #184]	; (8004470 <W25qxx_WritePage+0xf8>)
 80043b6:	895b      	ldrh	r3, [r3, #10]
 80043b8:	461a      	mov	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	603b      	str	r3, [r7, #0]

	if((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	4413      	add	r3, r2
 80043c6:	4a2a      	ldr	r2, [pc, #168]	; (8004470 <W25qxx_WritePage+0xf8>)
 80043c8:	8952      	ldrh	r2, [r2, #10]
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d905      	bls.n	80043da <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80043ce:	4b28      	ldr	r3, [pc, #160]	; (8004470 <W25qxx_WritePage+0xf8>)
 80043d0:	895b      	ldrh	r3, [r3, #10]
 80043d2:	461a      	mov	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	603b      	str	r3, [r7, #0]


	W25qxx_WaitForWriteEnd();
 80043da:	f7ff fce7 	bl	8003dac <W25qxx_WaitForWriteEnd>

	W25qxx_WriteEnable();
 80043de:	f7ff fccd 	bl	8003d7c <W25qxx_WriteEnable>

	W25QFLASH_CS_SELECT;
 80043e2:	2200      	movs	r2, #0
 80043e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80043e8:	4822      	ldr	r0, [pc, #136]	; (8004474 <W25qxx_WritePage+0xfc>)
 80043ea:	f000 ff83 	bl	80052f4 <HAL_GPIO_WritePin>

	W25qxx_Spi(W25_PAGE_PROGRAMM);
 80043ee:	2002      	movs	r0, #2
 80043f0:	f7ff fc76 	bl	8003ce0 <W25qxx_Spi>

	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 80043f4:	4b1e      	ldr	r3, [pc, #120]	; (8004470 <W25qxx_WritePage+0xf8>)
 80043f6:	895b      	ldrh	r3, [r3, #10]
 80043f8:	461a      	mov	r2, r3
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	fb02 f303 	mul.w	r3, r2, r3
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	4413      	add	r3, r2
 8004404:	60bb      	str	r3, [r7, #8]

	if(w25qxx.ID >= W25Q256)
 8004406:	4b1a      	ldr	r3, [pc, #104]	; (8004470 <W25qxx_WritePage+0xf8>)
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	2b08      	cmp	r3, #8
 800440c:	d905      	bls.n	800441a <W25qxx_WritePage+0xa2>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	0e1b      	lsrs	r3, r3, #24
 8004412:	b2db      	uxtb	r3, r3
 8004414:	4618      	mov	r0, r3
 8004416:	f7ff fc63 	bl	8003ce0 <W25qxx_Spi>

	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	0c1b      	lsrs	r3, r3, #16
 800441e:	b2db      	uxtb	r3, r3
 8004420:	4618      	mov	r0, r3
 8004422:	f7ff fc5d 	bl	8003ce0 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	0a1b      	lsrs	r3, r3, #8
 800442a:	b2db      	uxtb	r3, r3
 800442c:	4618      	mov	r0, r3
 800442e:	f7ff fc57 	bl	8003ce0 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	b2db      	uxtb	r3, r3
 8004436:	4618      	mov	r0, r3
 8004438:	f7ff fc52 	bl	8003ce0 <W25qxx_Spi>

	HAL_SPI_Transmit(W25QXX_SPI_PTR, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	b29a      	uxth	r2, r3
 8004440:	2364      	movs	r3, #100	; 0x64
 8004442:	68f9      	ldr	r1, [r7, #12]
 8004444:	480c      	ldr	r0, [pc, #48]	; (8004478 <W25qxx_WritePage+0x100>)
 8004446:	f002 fd3c 	bl	8006ec2 <HAL_SPI_Transmit>

	W25QFLASH_CS_UNSELECT;
 800444a:	2201      	movs	r2, #1
 800444c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004450:	4808      	ldr	r0, [pc, #32]	; (8004474 <W25qxx_WritePage+0xfc>)
 8004452:	f000 ff4f 	bl	80052f4 <HAL_GPIO_WritePin>

	W25qxx_WaitForWriteEnd();
 8004456:	f7ff fca9 	bl	8003dac <W25qxx_WaitForWriteEnd>

	W25qxx_Delay(1);
 800445a:	2001      	movs	r0, #1
 800445c:	f000 f87a 	bl	8004554 <HAL_Delay>
	w25qxx.Lock = 0;
 8004460:	4b03      	ldr	r3, [pc, #12]	; (8004470 <W25qxx_WritePage+0xf8>)
 8004462:	2200      	movs	r2, #0
 8004464:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004468:	bf00      	nop
 800446a:	3710      	adds	r7, #16
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	20000710 	.word	0x20000710
 8004474:	40020400 	.word	0x40020400
 8004478:	2000010c 	.word	0x2000010c

0800447c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800447c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80044b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004480:	480d      	ldr	r0, [pc, #52]	; (80044b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004482:	490e      	ldr	r1, [pc, #56]	; (80044bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004484:	4a0e      	ldr	r2, [pc, #56]	; (80044c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004486:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004488:	e002      	b.n	8004490 <LoopCopyDataInit>

0800448a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800448a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800448c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800448e:	3304      	adds	r3, #4

08004490 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004490:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004492:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004494:	d3f9      	bcc.n	800448a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004496:	4a0b      	ldr	r2, [pc, #44]	; (80044c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004498:	4c0b      	ldr	r4, [pc, #44]	; (80044c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800449a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800449c:	e001      	b.n	80044a2 <LoopFillZerobss>

0800449e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800449e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80044a0:	3204      	adds	r2, #4

080044a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80044a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80044a4:	d3fb      	bcc.n	800449e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80044a6:	f7ff fc09 	bl	8003cbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80044aa:	f008 ff5d 	bl	800d368 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80044ae:	f7fc fd83 	bl	8000fb8 <main>
  bx  lr    
 80044b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80044b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80044b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80044bc:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 80044c0:	0800f4bc 	.word	0x0800f4bc
  ldr r2, =_sbss
 80044c4:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 80044c8:	2000509c 	.word	0x2000509c

080044cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80044cc:	e7fe      	b.n	80044cc <ADC_IRQHandler>
	...

080044d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80044d4:	4b0e      	ldr	r3, [pc, #56]	; (8004510 <HAL_Init+0x40>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a0d      	ldr	r2, [pc, #52]	; (8004510 <HAL_Init+0x40>)
 80044da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80044e0:	4b0b      	ldr	r3, [pc, #44]	; (8004510 <HAL_Init+0x40>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a0a      	ldr	r2, [pc, #40]	; (8004510 <HAL_Init+0x40>)
 80044e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80044ec:	4b08      	ldr	r3, [pc, #32]	; (8004510 <HAL_Init+0x40>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a07      	ldr	r2, [pc, #28]	; (8004510 <HAL_Init+0x40>)
 80044f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80044f8:	2003      	movs	r0, #3
 80044fa:	f000 f913 	bl	8004724 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80044fe:	2000      	movs	r0, #0
 8004500:	f7ff faec 	bl	8003adc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004504:	f7ff f8d6 	bl	80036b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	40023c00 	.word	0x40023c00

08004514 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004514:	b480      	push	{r7}
 8004516:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004518:	4b06      	ldr	r3, [pc, #24]	; (8004534 <HAL_IncTick+0x20>)
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	461a      	mov	r2, r3
 800451e:	4b06      	ldr	r3, [pc, #24]	; (8004538 <HAL_IncTick+0x24>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4413      	add	r3, r2
 8004524:	4a04      	ldr	r2, [pc, #16]	; (8004538 <HAL_IncTick+0x24>)
 8004526:	6013      	str	r3, [r2, #0]
}
 8004528:	bf00      	nop
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	20000030 	.word	0x20000030
 8004538:	20000738 	.word	0x20000738

0800453c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800453c:	b480      	push	{r7}
 800453e:	af00      	add	r7, sp, #0
  return uwTick;
 8004540:	4b03      	ldr	r3, [pc, #12]	; (8004550 <HAL_GetTick+0x14>)
 8004542:	681b      	ldr	r3, [r3, #0]
}
 8004544:	4618      	mov	r0, r3
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	20000738 	.word	0x20000738

08004554 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800455c:	f7ff ffee 	bl	800453c <HAL_GetTick>
 8004560:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800456c:	d005      	beq.n	800457a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800456e:	4b0a      	ldr	r3, [pc, #40]	; (8004598 <HAL_Delay+0x44>)
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	461a      	mov	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	4413      	add	r3, r2
 8004578:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800457a:	bf00      	nop
 800457c:	f7ff ffde 	bl	800453c <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	429a      	cmp	r2, r3
 800458a:	d8f7      	bhi.n	800457c <HAL_Delay+0x28>
  {
  }
}
 800458c:	bf00      	nop
 800458e:	bf00      	nop
 8004590:	3710      	adds	r7, #16
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	20000030 	.word	0x20000030

0800459c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f003 0307 	and.w	r3, r3, #7
 80045aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045ac:	4b0c      	ldr	r3, [pc, #48]	; (80045e0 <__NVIC_SetPriorityGrouping+0x44>)
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045b2:	68ba      	ldr	r2, [r7, #8]
 80045b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80045b8:	4013      	ands	r3, r2
 80045ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80045c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045ce:	4a04      	ldr	r2, [pc, #16]	; (80045e0 <__NVIC_SetPriorityGrouping+0x44>)
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	60d3      	str	r3, [r2, #12]
}
 80045d4:	bf00      	nop
 80045d6:	3714      	adds	r7, #20
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr
 80045e0:	e000ed00 	.word	0xe000ed00

080045e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80045e4:	b480      	push	{r7}
 80045e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045e8:	4b04      	ldr	r3, [pc, #16]	; (80045fc <__NVIC_GetPriorityGrouping+0x18>)
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	0a1b      	lsrs	r3, r3, #8
 80045ee:	f003 0307 	and.w	r3, r3, #7
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr
 80045fc:	e000ed00 	.word	0xe000ed00

08004600 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	4603      	mov	r3, r0
 8004608:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800460a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800460e:	2b00      	cmp	r3, #0
 8004610:	db0b      	blt.n	800462a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004612:	79fb      	ldrb	r3, [r7, #7]
 8004614:	f003 021f 	and.w	r2, r3, #31
 8004618:	4907      	ldr	r1, [pc, #28]	; (8004638 <__NVIC_EnableIRQ+0x38>)
 800461a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800461e:	095b      	lsrs	r3, r3, #5
 8004620:	2001      	movs	r0, #1
 8004622:	fa00 f202 	lsl.w	r2, r0, r2
 8004626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800462a:	bf00      	nop
 800462c:	370c      	adds	r7, #12
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	e000e100 	.word	0xe000e100

0800463c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	4603      	mov	r3, r0
 8004644:	6039      	str	r1, [r7, #0]
 8004646:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800464c:	2b00      	cmp	r3, #0
 800464e:	db0a      	blt.n	8004666 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	b2da      	uxtb	r2, r3
 8004654:	490c      	ldr	r1, [pc, #48]	; (8004688 <__NVIC_SetPriority+0x4c>)
 8004656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800465a:	0112      	lsls	r2, r2, #4
 800465c:	b2d2      	uxtb	r2, r2
 800465e:	440b      	add	r3, r1
 8004660:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004664:	e00a      	b.n	800467c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	b2da      	uxtb	r2, r3
 800466a:	4908      	ldr	r1, [pc, #32]	; (800468c <__NVIC_SetPriority+0x50>)
 800466c:	79fb      	ldrb	r3, [r7, #7]
 800466e:	f003 030f 	and.w	r3, r3, #15
 8004672:	3b04      	subs	r3, #4
 8004674:	0112      	lsls	r2, r2, #4
 8004676:	b2d2      	uxtb	r2, r2
 8004678:	440b      	add	r3, r1
 800467a:	761a      	strb	r2, [r3, #24]
}
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr
 8004688:	e000e100 	.word	0xe000e100
 800468c:	e000ed00 	.word	0xe000ed00

08004690 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004690:	b480      	push	{r7}
 8004692:	b089      	sub	sp, #36	; 0x24
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f003 0307 	and.w	r3, r3, #7
 80046a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	f1c3 0307 	rsb	r3, r3, #7
 80046aa:	2b04      	cmp	r3, #4
 80046ac:	bf28      	it	cs
 80046ae:	2304      	movcs	r3, #4
 80046b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	3304      	adds	r3, #4
 80046b6:	2b06      	cmp	r3, #6
 80046b8:	d902      	bls.n	80046c0 <NVIC_EncodePriority+0x30>
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	3b03      	subs	r3, #3
 80046be:	e000      	b.n	80046c2 <NVIC_EncodePriority+0x32>
 80046c0:	2300      	movs	r3, #0
 80046c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046c4:	f04f 32ff 	mov.w	r2, #4294967295
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	fa02 f303 	lsl.w	r3, r2, r3
 80046ce:	43da      	mvns	r2, r3
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	401a      	ands	r2, r3
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046d8:	f04f 31ff 	mov.w	r1, #4294967295
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	fa01 f303 	lsl.w	r3, r1, r3
 80046e2:	43d9      	mvns	r1, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046e8:	4313      	orrs	r3, r2
         );
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3724      	adds	r7, #36	; 0x24
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
	...

080046f8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80046f8:	b480      	push	{r7}
 80046fa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80046fc:	f3bf 8f4f 	dsb	sy
}
 8004700:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004702:	4b06      	ldr	r3, [pc, #24]	; (800471c <__NVIC_SystemReset+0x24>)
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800470a:	4904      	ldr	r1, [pc, #16]	; (800471c <__NVIC_SystemReset+0x24>)
 800470c:	4b04      	ldr	r3, [pc, #16]	; (8004720 <__NVIC_SystemReset+0x28>)
 800470e:	4313      	orrs	r3, r2
 8004710:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004712:	f3bf 8f4f 	dsb	sy
}
 8004716:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004718:	bf00      	nop
 800471a:	e7fd      	b.n	8004718 <__NVIC_SystemReset+0x20>
 800471c:	e000ed00 	.word	0xe000ed00
 8004720:	05fa0004 	.word	0x05fa0004

08004724 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f7ff ff35 	bl	800459c <__NVIC_SetPriorityGrouping>
}
 8004732:	bf00      	nop
 8004734:	3708      	adds	r7, #8
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}

0800473a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800473a:	b580      	push	{r7, lr}
 800473c:	b086      	sub	sp, #24
 800473e:	af00      	add	r7, sp, #0
 8004740:	4603      	mov	r3, r0
 8004742:	60b9      	str	r1, [r7, #8]
 8004744:	607a      	str	r2, [r7, #4]
 8004746:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004748:	2300      	movs	r3, #0
 800474a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800474c:	f7ff ff4a 	bl	80045e4 <__NVIC_GetPriorityGrouping>
 8004750:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	68b9      	ldr	r1, [r7, #8]
 8004756:	6978      	ldr	r0, [r7, #20]
 8004758:	f7ff ff9a 	bl	8004690 <NVIC_EncodePriority>
 800475c:	4602      	mov	r2, r0
 800475e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004762:	4611      	mov	r1, r2
 8004764:	4618      	mov	r0, r3
 8004766:	f7ff ff69 	bl	800463c <__NVIC_SetPriority>
}
 800476a:	bf00      	nop
 800476c:	3718      	adds	r7, #24
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}

08004772 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004772:	b580      	push	{r7, lr}
 8004774:	b082      	sub	sp, #8
 8004776:	af00      	add	r7, sp, #0
 8004778:	4603      	mov	r3, r0
 800477a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800477c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004780:	4618      	mov	r0, r3
 8004782:	f7ff ff3d 	bl	8004600 <__NVIC_EnableIRQ>
}
 8004786:	bf00      	nop
 8004788:	3708      	adds	r7, #8
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800478e:	b580      	push	{r7, lr}
 8004790:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8004792:	f7ff ffb1 	bl	80046f8 <__NVIC_SystemReset>
	...

08004798 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b086      	sub	sp, #24
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80047a0:	2300      	movs	r3, #0
 80047a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80047a4:	f7ff feca 	bl	800453c <HAL_GetTick>
 80047a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d101      	bne.n	80047b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e099      	b.n	80048e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2202      	movs	r2, #2
 80047b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f022 0201 	bic.w	r2, r2, #1
 80047d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047d4:	e00f      	b.n	80047f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80047d6:	f7ff feb1 	bl	800453c <HAL_GetTick>
 80047da:	4602      	mov	r2, r0
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	2b05      	cmp	r3, #5
 80047e2:	d908      	bls.n	80047f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2220      	movs	r2, #32
 80047e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2203      	movs	r2, #3
 80047ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e078      	b.n	80048e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0301 	and.w	r3, r3, #1
 8004800:	2b00      	cmp	r3, #0
 8004802:	d1e8      	bne.n	80047d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800480c:	697a      	ldr	r2, [r7, #20]
 800480e:	4b38      	ldr	r3, [pc, #224]	; (80048f0 <HAL_DMA_Init+0x158>)
 8004810:	4013      	ands	r3, r2
 8004812:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685a      	ldr	r2, [r3, #4]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004822:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800482e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800483a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a1b      	ldr	r3, [r3, #32]
 8004840:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	4313      	orrs	r3, r2
 8004846:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484c:	2b04      	cmp	r3, #4
 800484e:	d107      	bne.n	8004860 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004858:	4313      	orrs	r3, r2
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	4313      	orrs	r3, r2
 800485e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	697a      	ldr	r2, [r7, #20]
 8004866:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	f023 0307 	bic.w	r3, r3, #7
 8004876:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487c:	697a      	ldr	r2, [r7, #20]
 800487e:	4313      	orrs	r3, r2
 8004880:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004886:	2b04      	cmp	r3, #4
 8004888:	d117      	bne.n	80048ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	4313      	orrs	r3, r2
 8004892:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00e      	beq.n	80048ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 fb01 	bl	8004ea4 <DMA_CheckFifoParam>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d008      	beq.n	80048ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2240      	movs	r2, #64	; 0x40
 80048ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80048b6:	2301      	movs	r3, #1
 80048b8:	e016      	b.n	80048e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	697a      	ldr	r2, [r7, #20]
 80048c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 fab8 	bl	8004e38 <DMA_CalcBaseAndBitshift>
 80048c8:	4603      	mov	r3, r0
 80048ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048d0:	223f      	movs	r2, #63	; 0x3f
 80048d2:	409a      	lsls	r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2201      	movs	r2, #1
 80048e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3718      	adds	r7, #24
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	f010803f 	.word	0xf010803f

080048f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b086      	sub	sp, #24
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	607a      	str	r2, [r7, #4]
 8004900:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004902:	2300      	movs	r3, #0
 8004904:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800490a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004912:	2b01      	cmp	r3, #1
 8004914:	d101      	bne.n	800491a <HAL_DMA_Start_IT+0x26>
 8004916:	2302      	movs	r3, #2
 8004918:	e040      	b.n	800499c <HAL_DMA_Start_IT+0xa8>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2201      	movs	r2, #1
 800491e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004928:	b2db      	uxtb	r3, r3
 800492a:	2b01      	cmp	r3, #1
 800492c:	d12f      	bne.n	800498e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2202      	movs	r2, #2
 8004932:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	68b9      	ldr	r1, [r7, #8]
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	f000 fa4a 	bl	8004ddc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800494c:	223f      	movs	r2, #63	; 0x3f
 800494e:	409a      	lsls	r2, r3
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f042 0216 	orr.w	r2, r2, #22
 8004962:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004968:	2b00      	cmp	r3, #0
 800496a:	d007      	beq.n	800497c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f042 0208 	orr.w	r2, r2, #8
 800497a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f042 0201 	orr.w	r2, r2, #1
 800498a:	601a      	str	r2, [r3, #0]
 800498c:	e005      	b.n	800499a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004996:	2302      	movs	r3, #2
 8004998:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800499a:	7dfb      	ldrb	r3, [r7, #23]
}
 800499c:	4618      	mov	r0, r3
 800499e:	3718      	adds	r7, #24
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049b0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80049b2:	f7ff fdc3 	bl	800453c <HAL_GetTick>
 80049b6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d008      	beq.n	80049d6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2280      	movs	r2, #128	; 0x80
 80049c8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e052      	b.n	8004a7c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f022 0216 	bic.w	r2, r2, #22
 80049e4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	695a      	ldr	r2, [r3, #20]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049f4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d103      	bne.n	8004a06 <HAL_DMA_Abort+0x62>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d007      	beq.n	8004a16 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f022 0208 	bic.w	r2, r2, #8
 8004a14:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f022 0201 	bic.w	r2, r2, #1
 8004a24:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a26:	e013      	b.n	8004a50 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a28:	f7ff fd88 	bl	800453c <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	2b05      	cmp	r3, #5
 8004a34:	d90c      	bls.n	8004a50 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2220      	movs	r2, #32
 8004a3a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2203      	movs	r2, #3
 8004a40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e015      	b.n	8004a7c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0301 	and.w	r3, r3, #1
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d1e4      	bne.n	8004a28 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a62:	223f      	movs	r2, #63	; 0x3f
 8004a64:	409a      	lsls	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d004      	beq.n	8004aa2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2280      	movs	r2, #128	; 0x80
 8004a9c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e00c      	b.n	8004abc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2205      	movs	r2, #5
 8004aa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f022 0201 	bic.w	r2, r2, #1
 8004ab8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b086      	sub	sp, #24
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004ad4:	4b8e      	ldr	r3, [pc, #568]	; (8004d10 <HAL_DMA_IRQHandler+0x248>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a8e      	ldr	r2, [pc, #568]	; (8004d14 <HAL_DMA_IRQHandler+0x24c>)
 8004ada:	fba2 2303 	umull	r2, r3, r2, r3
 8004ade:	0a9b      	lsrs	r3, r3, #10
 8004ae0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004af2:	2208      	movs	r2, #8
 8004af4:	409a      	lsls	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	4013      	ands	r3, r2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d01a      	beq.n	8004b34 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0304 	and.w	r3, r3, #4
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d013      	beq.n	8004b34 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f022 0204 	bic.w	r2, r2, #4
 8004b1a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b20:	2208      	movs	r2, #8
 8004b22:	409a      	lsls	r2, r3
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b2c:	f043 0201 	orr.w	r2, r3, #1
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b38:	2201      	movs	r2, #1
 8004b3a:	409a      	lsls	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	4013      	ands	r3, r2
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d012      	beq.n	8004b6a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00b      	beq.n	8004b6a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b56:	2201      	movs	r2, #1
 8004b58:	409a      	lsls	r2, r3
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b62:	f043 0202 	orr.w	r2, r3, #2
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b6e:	2204      	movs	r2, #4
 8004b70:	409a      	lsls	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	4013      	ands	r3, r2
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d012      	beq.n	8004ba0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d00b      	beq.n	8004ba0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b8c:	2204      	movs	r2, #4
 8004b8e:	409a      	lsls	r2, r3
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b98:	f043 0204 	orr.w	r2, r3, #4
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ba4:	2210      	movs	r2, #16
 8004ba6:	409a      	lsls	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	4013      	ands	r3, r2
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d043      	beq.n	8004c38 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0308 	and.w	r3, r3, #8
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d03c      	beq.n	8004c38 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bc2:	2210      	movs	r2, #16
 8004bc4:	409a      	lsls	r2, r3
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d018      	beq.n	8004c0a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d108      	bne.n	8004bf8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d024      	beq.n	8004c38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	4798      	blx	r3
 8004bf6:	e01f      	b.n	8004c38 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d01b      	beq.n	8004c38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	4798      	blx	r3
 8004c08:	e016      	b.n	8004c38 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d107      	bne.n	8004c28 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f022 0208 	bic.w	r2, r2, #8
 8004c26:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d003      	beq.n	8004c38 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c3c:	2220      	movs	r2, #32
 8004c3e:	409a      	lsls	r2, r3
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	4013      	ands	r3, r2
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	f000 808f 	beq.w	8004d68 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0310 	and.w	r3, r3, #16
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f000 8087 	beq.w	8004d68 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c5e:	2220      	movs	r2, #32
 8004c60:	409a      	lsls	r2, r3
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	2b05      	cmp	r3, #5
 8004c70:	d136      	bne.n	8004ce0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f022 0216 	bic.w	r2, r2, #22
 8004c80:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	695a      	ldr	r2, [r3, #20]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c90:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d103      	bne.n	8004ca2 <HAL_DMA_IRQHandler+0x1da>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d007      	beq.n	8004cb2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f022 0208 	bic.w	r2, r2, #8
 8004cb0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cb6:	223f      	movs	r2, #63	; 0x3f
 8004cb8:	409a      	lsls	r2, r3
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d07e      	beq.n	8004dd4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	4798      	blx	r3
        }
        return;
 8004cde:	e079      	b.n	8004dd4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d01d      	beq.n	8004d2a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d10d      	bne.n	8004d18 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d031      	beq.n	8004d68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	4798      	blx	r3
 8004d0c:	e02c      	b.n	8004d68 <HAL_DMA_IRQHandler+0x2a0>
 8004d0e:	bf00      	nop
 8004d10:	20000028 	.word	0x20000028
 8004d14:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d023      	beq.n	8004d68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	4798      	blx	r3
 8004d28:	e01e      	b.n	8004d68 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d10f      	bne.n	8004d58 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f022 0210 	bic.w	r2, r2, #16
 8004d46:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d003      	beq.n	8004d68 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d032      	beq.n	8004dd6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d74:	f003 0301 	and.w	r3, r3, #1
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d022      	beq.n	8004dc2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2205      	movs	r2, #5
 8004d80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f022 0201 	bic.w	r2, r2, #1
 8004d92:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	3301      	adds	r3, #1
 8004d98:	60bb      	str	r3, [r7, #8]
 8004d9a:	697a      	ldr	r2, [r7, #20]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d307      	bcc.n	8004db0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0301 	and.w	r3, r3, #1
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1f2      	bne.n	8004d94 <HAL_DMA_IRQHandler+0x2cc>
 8004dae:	e000      	b.n	8004db2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004db0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d005      	beq.n	8004dd6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	4798      	blx	r3
 8004dd2:	e000      	b.n	8004dd6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004dd4:	bf00      	nop
    }
  }
}
 8004dd6:	3718      	adds	r7, #24
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]
 8004de8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004df8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	683a      	ldr	r2, [r7, #0]
 8004e00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	2b40      	cmp	r3, #64	; 0x40
 8004e08:	d108      	bne.n	8004e1c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68ba      	ldr	r2, [r7, #8]
 8004e18:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004e1a:	e007      	b.n	8004e2c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68ba      	ldr	r2, [r7, #8]
 8004e22:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	60da      	str	r2, [r3, #12]
}
 8004e2c:	bf00      	nop
 8004e2e:	3714      	adds	r7, #20
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	3b10      	subs	r3, #16
 8004e48:	4a14      	ldr	r2, [pc, #80]	; (8004e9c <DMA_CalcBaseAndBitshift+0x64>)
 8004e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e4e:	091b      	lsrs	r3, r3, #4
 8004e50:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004e52:	4a13      	ldr	r2, [pc, #76]	; (8004ea0 <DMA_CalcBaseAndBitshift+0x68>)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	4413      	add	r3, r2
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2b03      	cmp	r3, #3
 8004e64:	d909      	bls.n	8004e7a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004e6e:	f023 0303 	bic.w	r3, r3, #3
 8004e72:	1d1a      	adds	r2, r3, #4
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	659a      	str	r2, [r3, #88]	; 0x58
 8004e78:	e007      	b.n	8004e8a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004e82:	f023 0303 	bic.w	r3, r3, #3
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3714      	adds	r7, #20
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	aaaaaaab 	.word	0xaaaaaaab
 8004ea0:	0800f2f4 	.word	0x0800f2f4

08004ea4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004eac:	2300      	movs	r3, #0
 8004eae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d11f      	bne.n	8004efe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	2b03      	cmp	r3, #3
 8004ec2:	d856      	bhi.n	8004f72 <DMA_CheckFifoParam+0xce>
 8004ec4:	a201      	add	r2, pc, #4	; (adr r2, 8004ecc <DMA_CheckFifoParam+0x28>)
 8004ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eca:	bf00      	nop
 8004ecc:	08004edd 	.word	0x08004edd
 8004ed0:	08004eef 	.word	0x08004eef
 8004ed4:	08004edd 	.word	0x08004edd
 8004ed8:	08004f73 	.word	0x08004f73
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d046      	beq.n	8004f76 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004eec:	e043      	b.n	8004f76 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ef6:	d140      	bne.n	8004f7a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004efc:	e03d      	b.n	8004f7a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	699b      	ldr	r3, [r3, #24]
 8004f02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f06:	d121      	bne.n	8004f4c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	2b03      	cmp	r3, #3
 8004f0c:	d837      	bhi.n	8004f7e <DMA_CheckFifoParam+0xda>
 8004f0e:	a201      	add	r2, pc, #4	; (adr r2, 8004f14 <DMA_CheckFifoParam+0x70>)
 8004f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f14:	08004f25 	.word	0x08004f25
 8004f18:	08004f2b 	.word	0x08004f2b
 8004f1c:	08004f25 	.word	0x08004f25
 8004f20:	08004f3d 	.word	0x08004f3d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	73fb      	strb	r3, [r7, #15]
      break;
 8004f28:	e030      	b.n	8004f8c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d025      	beq.n	8004f82 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f3a:	e022      	b.n	8004f82 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f40:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f44:	d11f      	bne.n	8004f86 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004f4a:	e01c      	b.n	8004f86 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d903      	bls.n	8004f5a <DMA_CheckFifoParam+0xb6>
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	2b03      	cmp	r3, #3
 8004f56:	d003      	beq.n	8004f60 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004f58:	e018      	b.n	8004f8c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	73fb      	strb	r3, [r7, #15]
      break;
 8004f5e:	e015      	b.n	8004f8c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d00e      	beq.n	8004f8a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f70:	e00b      	b.n	8004f8a <DMA_CheckFifoParam+0xe6>
      break;
 8004f72:	bf00      	nop
 8004f74:	e00a      	b.n	8004f8c <DMA_CheckFifoParam+0xe8>
      break;
 8004f76:	bf00      	nop
 8004f78:	e008      	b.n	8004f8c <DMA_CheckFifoParam+0xe8>
      break;
 8004f7a:	bf00      	nop
 8004f7c:	e006      	b.n	8004f8c <DMA_CheckFifoParam+0xe8>
      break;
 8004f7e:	bf00      	nop
 8004f80:	e004      	b.n	8004f8c <DMA_CheckFifoParam+0xe8>
      break;
 8004f82:	bf00      	nop
 8004f84:	e002      	b.n	8004f8c <DMA_CheckFifoParam+0xe8>
      break;   
 8004f86:	bf00      	nop
 8004f88:	e000      	b.n	8004f8c <DMA_CheckFifoParam+0xe8>
      break;
 8004f8a:	bf00      	nop
    }
  } 
  
  return status; 
 8004f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3714      	adds	r7, #20
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop

08004f9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b089      	sub	sp, #36	; 0x24
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004faa:	2300      	movs	r3, #0
 8004fac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	61fb      	str	r3, [r7, #28]
 8004fb6:	e165      	b.n	8005284 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004fb8:	2201      	movs	r2, #1
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	697a      	ldr	r2, [r7, #20]
 8004fc8:	4013      	ands	r3, r2
 8004fca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	f040 8154 	bne.w	800527e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f003 0303 	and.w	r3, r3, #3
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d005      	beq.n	8004fee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d130      	bne.n	8005050 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	005b      	lsls	r3, r3, #1
 8004ff8:	2203      	movs	r2, #3
 8004ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8004ffe:	43db      	mvns	r3, r3
 8005000:	69ba      	ldr	r2, [r7, #24]
 8005002:	4013      	ands	r3, r2
 8005004:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	68da      	ldr	r2, [r3, #12]
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	005b      	lsls	r3, r3, #1
 800500e:	fa02 f303 	lsl.w	r3, r2, r3
 8005012:	69ba      	ldr	r2, [r7, #24]
 8005014:	4313      	orrs	r3, r2
 8005016:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	69ba      	ldr	r2, [r7, #24]
 800501c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005024:	2201      	movs	r2, #1
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	fa02 f303 	lsl.w	r3, r2, r3
 800502c:	43db      	mvns	r3, r3
 800502e:	69ba      	ldr	r2, [r7, #24]
 8005030:	4013      	ands	r3, r2
 8005032:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	091b      	lsrs	r3, r3, #4
 800503a:	f003 0201 	and.w	r2, r3, #1
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	fa02 f303 	lsl.w	r3, r2, r3
 8005044:	69ba      	ldr	r2, [r7, #24]
 8005046:	4313      	orrs	r3, r2
 8005048:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	69ba      	ldr	r2, [r7, #24]
 800504e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	f003 0303 	and.w	r3, r3, #3
 8005058:	2b03      	cmp	r3, #3
 800505a:	d017      	beq.n	800508c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	005b      	lsls	r3, r3, #1
 8005066:	2203      	movs	r2, #3
 8005068:	fa02 f303 	lsl.w	r3, r2, r3
 800506c:	43db      	mvns	r3, r3
 800506e:	69ba      	ldr	r2, [r7, #24]
 8005070:	4013      	ands	r3, r2
 8005072:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	689a      	ldr	r2, [r3, #8]
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	005b      	lsls	r3, r3, #1
 800507c:	fa02 f303 	lsl.w	r3, r2, r3
 8005080:	69ba      	ldr	r2, [r7, #24]
 8005082:	4313      	orrs	r3, r2
 8005084:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	69ba      	ldr	r2, [r7, #24]
 800508a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f003 0303 	and.w	r3, r3, #3
 8005094:	2b02      	cmp	r3, #2
 8005096:	d123      	bne.n	80050e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	08da      	lsrs	r2, r3, #3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	3208      	adds	r2, #8
 80050a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	f003 0307 	and.w	r3, r3, #7
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	220f      	movs	r2, #15
 80050b0:	fa02 f303 	lsl.w	r3, r2, r3
 80050b4:	43db      	mvns	r3, r3
 80050b6:	69ba      	ldr	r2, [r7, #24]
 80050b8:	4013      	ands	r3, r2
 80050ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	691a      	ldr	r2, [r3, #16]
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	f003 0307 	and.w	r3, r3, #7
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	fa02 f303 	lsl.w	r3, r2, r3
 80050cc:	69ba      	ldr	r2, [r7, #24]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	08da      	lsrs	r2, r3, #3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	3208      	adds	r2, #8
 80050da:	69b9      	ldr	r1, [r7, #24]
 80050dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	005b      	lsls	r3, r3, #1
 80050ea:	2203      	movs	r2, #3
 80050ec:	fa02 f303 	lsl.w	r3, r2, r3
 80050f0:	43db      	mvns	r3, r3
 80050f2:	69ba      	ldr	r2, [r7, #24]
 80050f4:	4013      	ands	r3, r2
 80050f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	f003 0203 	and.w	r2, r3, #3
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	005b      	lsls	r3, r3, #1
 8005104:	fa02 f303 	lsl.w	r3, r2, r3
 8005108:	69ba      	ldr	r2, [r7, #24]
 800510a:	4313      	orrs	r3, r2
 800510c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	69ba      	ldr	r2, [r7, #24]
 8005112:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800511c:	2b00      	cmp	r3, #0
 800511e:	f000 80ae 	beq.w	800527e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005122:	2300      	movs	r3, #0
 8005124:	60fb      	str	r3, [r7, #12]
 8005126:	4b5d      	ldr	r3, [pc, #372]	; (800529c <HAL_GPIO_Init+0x300>)
 8005128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800512a:	4a5c      	ldr	r2, [pc, #368]	; (800529c <HAL_GPIO_Init+0x300>)
 800512c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005130:	6453      	str	r3, [r2, #68]	; 0x44
 8005132:	4b5a      	ldr	r3, [pc, #360]	; (800529c <HAL_GPIO_Init+0x300>)
 8005134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800513a:	60fb      	str	r3, [r7, #12]
 800513c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800513e:	4a58      	ldr	r2, [pc, #352]	; (80052a0 <HAL_GPIO_Init+0x304>)
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	089b      	lsrs	r3, r3, #2
 8005144:	3302      	adds	r3, #2
 8005146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800514a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	f003 0303 	and.w	r3, r3, #3
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	220f      	movs	r2, #15
 8005156:	fa02 f303 	lsl.w	r3, r2, r3
 800515a:	43db      	mvns	r3, r3
 800515c:	69ba      	ldr	r2, [r7, #24]
 800515e:	4013      	ands	r3, r2
 8005160:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a4f      	ldr	r2, [pc, #316]	; (80052a4 <HAL_GPIO_Init+0x308>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d025      	beq.n	80051b6 <HAL_GPIO_Init+0x21a>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a4e      	ldr	r2, [pc, #312]	; (80052a8 <HAL_GPIO_Init+0x30c>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d01f      	beq.n	80051b2 <HAL_GPIO_Init+0x216>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a4d      	ldr	r2, [pc, #308]	; (80052ac <HAL_GPIO_Init+0x310>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d019      	beq.n	80051ae <HAL_GPIO_Init+0x212>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a4c      	ldr	r2, [pc, #304]	; (80052b0 <HAL_GPIO_Init+0x314>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d013      	beq.n	80051aa <HAL_GPIO_Init+0x20e>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a4b      	ldr	r2, [pc, #300]	; (80052b4 <HAL_GPIO_Init+0x318>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d00d      	beq.n	80051a6 <HAL_GPIO_Init+0x20a>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a4a      	ldr	r2, [pc, #296]	; (80052b8 <HAL_GPIO_Init+0x31c>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d007      	beq.n	80051a2 <HAL_GPIO_Init+0x206>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a49      	ldr	r2, [pc, #292]	; (80052bc <HAL_GPIO_Init+0x320>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d101      	bne.n	800519e <HAL_GPIO_Init+0x202>
 800519a:	2306      	movs	r3, #6
 800519c:	e00c      	b.n	80051b8 <HAL_GPIO_Init+0x21c>
 800519e:	2307      	movs	r3, #7
 80051a0:	e00a      	b.n	80051b8 <HAL_GPIO_Init+0x21c>
 80051a2:	2305      	movs	r3, #5
 80051a4:	e008      	b.n	80051b8 <HAL_GPIO_Init+0x21c>
 80051a6:	2304      	movs	r3, #4
 80051a8:	e006      	b.n	80051b8 <HAL_GPIO_Init+0x21c>
 80051aa:	2303      	movs	r3, #3
 80051ac:	e004      	b.n	80051b8 <HAL_GPIO_Init+0x21c>
 80051ae:	2302      	movs	r3, #2
 80051b0:	e002      	b.n	80051b8 <HAL_GPIO_Init+0x21c>
 80051b2:	2301      	movs	r3, #1
 80051b4:	e000      	b.n	80051b8 <HAL_GPIO_Init+0x21c>
 80051b6:	2300      	movs	r3, #0
 80051b8:	69fa      	ldr	r2, [r7, #28]
 80051ba:	f002 0203 	and.w	r2, r2, #3
 80051be:	0092      	lsls	r2, r2, #2
 80051c0:	4093      	lsls	r3, r2
 80051c2:	69ba      	ldr	r2, [r7, #24]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80051c8:	4935      	ldr	r1, [pc, #212]	; (80052a0 <HAL_GPIO_Init+0x304>)
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	089b      	lsrs	r3, r3, #2
 80051ce:	3302      	adds	r3, #2
 80051d0:	69ba      	ldr	r2, [r7, #24]
 80051d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80051d6:	4b3a      	ldr	r3, [pc, #232]	; (80052c0 <HAL_GPIO_Init+0x324>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	43db      	mvns	r3, r3
 80051e0:	69ba      	ldr	r2, [r7, #24]
 80051e2:	4013      	ands	r3, r2
 80051e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d003      	beq.n	80051fa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80051f2:	69ba      	ldr	r2, [r7, #24]
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80051fa:	4a31      	ldr	r2, [pc, #196]	; (80052c0 <HAL_GPIO_Init+0x324>)
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005200:	4b2f      	ldr	r3, [pc, #188]	; (80052c0 <HAL_GPIO_Init+0x324>)
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	43db      	mvns	r3, r3
 800520a:	69ba      	ldr	r2, [r7, #24]
 800520c:	4013      	ands	r3, r2
 800520e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005218:	2b00      	cmp	r3, #0
 800521a:	d003      	beq.n	8005224 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800521c:	69ba      	ldr	r2, [r7, #24]
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	4313      	orrs	r3, r2
 8005222:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005224:	4a26      	ldr	r2, [pc, #152]	; (80052c0 <HAL_GPIO_Init+0x324>)
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800522a:	4b25      	ldr	r3, [pc, #148]	; (80052c0 <HAL_GPIO_Init+0x324>)
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	43db      	mvns	r3, r3
 8005234:	69ba      	ldr	r2, [r7, #24]
 8005236:	4013      	ands	r3, r2
 8005238:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d003      	beq.n	800524e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005246:	69ba      	ldr	r2, [r7, #24]
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	4313      	orrs	r3, r2
 800524c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800524e:	4a1c      	ldr	r2, [pc, #112]	; (80052c0 <HAL_GPIO_Init+0x324>)
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005254:	4b1a      	ldr	r3, [pc, #104]	; (80052c0 <HAL_GPIO_Init+0x324>)
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	43db      	mvns	r3, r3
 800525e:	69ba      	ldr	r2, [r7, #24]
 8005260:	4013      	ands	r3, r2
 8005262:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d003      	beq.n	8005278 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005270:	69ba      	ldr	r2, [r7, #24]
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	4313      	orrs	r3, r2
 8005276:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005278:	4a11      	ldr	r2, [pc, #68]	; (80052c0 <HAL_GPIO_Init+0x324>)
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	3301      	adds	r3, #1
 8005282:	61fb      	str	r3, [r7, #28]
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	2b0f      	cmp	r3, #15
 8005288:	f67f ae96 	bls.w	8004fb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800528c:	bf00      	nop
 800528e:	bf00      	nop
 8005290:	3724      	adds	r7, #36	; 0x24
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	40023800 	.word	0x40023800
 80052a0:	40013800 	.word	0x40013800
 80052a4:	40020000 	.word	0x40020000
 80052a8:	40020400 	.word	0x40020400
 80052ac:	40020800 	.word	0x40020800
 80052b0:	40020c00 	.word	0x40020c00
 80052b4:	40021000 	.word	0x40021000
 80052b8:	40021400 	.word	0x40021400
 80052bc:	40021800 	.word	0x40021800
 80052c0:	40013c00 	.word	0x40013c00

080052c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	460b      	mov	r3, r1
 80052ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	691a      	ldr	r2, [r3, #16]
 80052d4:	887b      	ldrh	r3, [r7, #2]
 80052d6:	4013      	ands	r3, r2
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d002      	beq.n	80052e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80052dc:	2301      	movs	r3, #1
 80052de:	73fb      	strb	r3, [r7, #15]
 80052e0:	e001      	b.n	80052e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80052e2:	2300      	movs	r3, #0
 80052e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80052e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3714      	adds	r7, #20
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	460b      	mov	r3, r1
 80052fe:	807b      	strh	r3, [r7, #2]
 8005300:	4613      	mov	r3, r2
 8005302:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005304:	787b      	ldrb	r3, [r7, #1]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d003      	beq.n	8005312 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800530a:	887a      	ldrh	r2, [r7, #2]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005310:	e003      	b.n	800531a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005312:	887b      	ldrh	r3, [r7, #2]
 8005314:	041a      	lsls	r2, r3, #16
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	619a      	str	r2, [r3, #24]
}
 800531a:	bf00      	nop
 800531c:	370c      	adds	r7, #12
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr

08005326 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005326:	b480      	push	{r7}
 8005328:	b085      	sub	sp, #20
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
 800532e:	460b      	mov	r3, r1
 8005330:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005338:	887a      	ldrh	r2, [r7, #2]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	4013      	ands	r3, r2
 800533e:	041a      	lsls	r2, r3, #16
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	43d9      	mvns	r1, r3
 8005344:	887b      	ldrh	r3, [r7, #2]
 8005346:	400b      	ands	r3, r1
 8005348:	431a      	orrs	r2, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	619a      	str	r2, [r3, #24]
}
 800534e:	bf00      	nop
 8005350:	3714      	adds	r7, #20
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
	...

0800535c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d101      	bne.n	800536e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e12b      	b.n	80055c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005374:	b2db      	uxtb	r3, r3
 8005376:	2b00      	cmp	r3, #0
 8005378:	d106      	bne.n	8005388 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f7fe f9c2 	bl	800370c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2224      	movs	r2, #36	; 0x24
 800538c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f022 0201 	bic.w	r2, r2, #1
 800539e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80053be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80053c0:	f001 f854 	bl	800646c <HAL_RCC_GetPCLK1Freq>
 80053c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	4a81      	ldr	r2, [pc, #516]	; (80055d0 <HAL_I2C_Init+0x274>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d807      	bhi.n	80053e0 <HAL_I2C_Init+0x84>
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	4a80      	ldr	r2, [pc, #512]	; (80055d4 <HAL_I2C_Init+0x278>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	bf94      	ite	ls
 80053d8:	2301      	movls	r3, #1
 80053da:	2300      	movhi	r3, #0
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	e006      	b.n	80053ee <HAL_I2C_Init+0x92>
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	4a7d      	ldr	r2, [pc, #500]	; (80055d8 <HAL_I2C_Init+0x27c>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	bf94      	ite	ls
 80053e8:	2301      	movls	r3, #1
 80053ea:	2300      	movhi	r3, #0
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d001      	beq.n	80053f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e0e7      	b.n	80055c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	4a78      	ldr	r2, [pc, #480]	; (80055dc <HAL_I2C_Init+0x280>)
 80053fa:	fba2 2303 	umull	r2, r3, r2, r3
 80053fe:	0c9b      	lsrs	r3, r3, #18
 8005400:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68ba      	ldr	r2, [r7, #8]
 8005412:	430a      	orrs	r2, r1
 8005414:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	6a1b      	ldr	r3, [r3, #32]
 800541c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	4a6a      	ldr	r2, [pc, #424]	; (80055d0 <HAL_I2C_Init+0x274>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d802      	bhi.n	8005430 <HAL_I2C_Init+0xd4>
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	3301      	adds	r3, #1
 800542e:	e009      	b.n	8005444 <HAL_I2C_Init+0xe8>
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005436:	fb02 f303 	mul.w	r3, r2, r3
 800543a:	4a69      	ldr	r2, [pc, #420]	; (80055e0 <HAL_I2C_Init+0x284>)
 800543c:	fba2 2303 	umull	r2, r3, r2, r3
 8005440:	099b      	lsrs	r3, r3, #6
 8005442:	3301      	adds	r3, #1
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	6812      	ldr	r2, [r2, #0]
 8005448:	430b      	orrs	r3, r1
 800544a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	69db      	ldr	r3, [r3, #28]
 8005452:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005456:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	495c      	ldr	r1, [pc, #368]	; (80055d0 <HAL_I2C_Init+0x274>)
 8005460:	428b      	cmp	r3, r1
 8005462:	d819      	bhi.n	8005498 <HAL_I2C_Init+0x13c>
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	1e59      	subs	r1, r3, #1
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	005b      	lsls	r3, r3, #1
 800546e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005472:	1c59      	adds	r1, r3, #1
 8005474:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005478:	400b      	ands	r3, r1
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00a      	beq.n	8005494 <HAL_I2C_Init+0x138>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	1e59      	subs	r1, r3, #1
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	005b      	lsls	r3, r3, #1
 8005488:	fbb1 f3f3 	udiv	r3, r1, r3
 800548c:	3301      	adds	r3, #1
 800548e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005492:	e051      	b.n	8005538 <HAL_I2C_Init+0x1dc>
 8005494:	2304      	movs	r3, #4
 8005496:	e04f      	b.n	8005538 <HAL_I2C_Init+0x1dc>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d111      	bne.n	80054c4 <HAL_I2C_Init+0x168>
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	1e58      	subs	r0, r3, #1
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6859      	ldr	r1, [r3, #4]
 80054a8:	460b      	mov	r3, r1
 80054aa:	005b      	lsls	r3, r3, #1
 80054ac:	440b      	add	r3, r1
 80054ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80054b2:	3301      	adds	r3, #1
 80054b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	bf0c      	ite	eq
 80054bc:	2301      	moveq	r3, #1
 80054be:	2300      	movne	r3, #0
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	e012      	b.n	80054ea <HAL_I2C_Init+0x18e>
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	1e58      	subs	r0, r3, #1
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6859      	ldr	r1, [r3, #4]
 80054cc:	460b      	mov	r3, r1
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	440b      	add	r3, r1
 80054d2:	0099      	lsls	r1, r3, #2
 80054d4:	440b      	add	r3, r1
 80054d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80054da:	3301      	adds	r3, #1
 80054dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	bf0c      	ite	eq
 80054e4:	2301      	moveq	r3, #1
 80054e6:	2300      	movne	r3, #0
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d001      	beq.n	80054f2 <HAL_I2C_Init+0x196>
 80054ee:	2301      	movs	r3, #1
 80054f0:	e022      	b.n	8005538 <HAL_I2C_Init+0x1dc>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d10e      	bne.n	8005518 <HAL_I2C_Init+0x1bc>
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	1e58      	subs	r0, r3, #1
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6859      	ldr	r1, [r3, #4]
 8005502:	460b      	mov	r3, r1
 8005504:	005b      	lsls	r3, r3, #1
 8005506:	440b      	add	r3, r1
 8005508:	fbb0 f3f3 	udiv	r3, r0, r3
 800550c:	3301      	adds	r3, #1
 800550e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005512:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005516:	e00f      	b.n	8005538 <HAL_I2C_Init+0x1dc>
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	1e58      	subs	r0, r3, #1
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6859      	ldr	r1, [r3, #4]
 8005520:	460b      	mov	r3, r1
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	440b      	add	r3, r1
 8005526:	0099      	lsls	r1, r3, #2
 8005528:	440b      	add	r3, r1
 800552a:	fbb0 f3f3 	udiv	r3, r0, r3
 800552e:	3301      	adds	r3, #1
 8005530:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005534:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005538:	6879      	ldr	r1, [r7, #4]
 800553a:	6809      	ldr	r1, [r1, #0]
 800553c:	4313      	orrs	r3, r2
 800553e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	69da      	ldr	r2, [r3, #28]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a1b      	ldr	r3, [r3, #32]
 8005552:	431a      	orrs	r2, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	430a      	orrs	r2, r1
 800555a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005566:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	6911      	ldr	r1, [r2, #16]
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	68d2      	ldr	r2, [r2, #12]
 8005572:	4311      	orrs	r1, r2
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	6812      	ldr	r2, [r2, #0]
 8005578:	430b      	orrs	r3, r1
 800557a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	695a      	ldr	r2, [r3, #20]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	431a      	orrs	r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	430a      	orrs	r2, r1
 8005596:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f042 0201 	orr.w	r2, r2, #1
 80055a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2220      	movs	r2, #32
 80055b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3710      	adds	r7, #16
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	000186a0 	.word	0x000186a0
 80055d4:	001e847f 	.word	0x001e847f
 80055d8:	003d08ff 	.word	0x003d08ff
 80055dc:	431bde83 	.word	0x431bde83
 80055e0:	10624dd3 	.word	0x10624dd3

080055e4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b088      	sub	sp, #32
 80055e8:	af02      	add	r7, sp, #8
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	607a      	str	r2, [r7, #4]
 80055ee:	461a      	mov	r2, r3
 80055f0:	460b      	mov	r3, r1
 80055f2:	817b      	strh	r3, [r7, #10]
 80055f4:	4613      	mov	r3, r2
 80055f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80055f8:	f7fe ffa0 	bl	800453c <HAL_GetTick>
 80055fc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005604:	b2db      	uxtb	r3, r3
 8005606:	2b20      	cmp	r3, #32
 8005608:	f040 80e0 	bne.w	80057cc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	9300      	str	r3, [sp, #0]
 8005610:	2319      	movs	r3, #25
 8005612:	2201      	movs	r2, #1
 8005614:	4970      	ldr	r1, [pc, #448]	; (80057d8 <HAL_I2C_Master_Transmit+0x1f4>)
 8005616:	68f8      	ldr	r0, [r7, #12]
 8005618:	f000 fc58 	bl	8005ecc <I2C_WaitOnFlagUntilTimeout>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d001      	beq.n	8005626 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005622:	2302      	movs	r3, #2
 8005624:	e0d3      	b.n	80057ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800562c:	2b01      	cmp	r3, #1
 800562e:	d101      	bne.n	8005634 <HAL_I2C_Master_Transmit+0x50>
 8005630:	2302      	movs	r3, #2
 8005632:	e0cc      	b.n	80057ce <HAL_I2C_Master_Transmit+0x1ea>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	2b01      	cmp	r3, #1
 8005648:	d007      	beq.n	800565a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f042 0201 	orr.w	r2, r2, #1
 8005658:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005668:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2221      	movs	r2, #33	; 0x21
 800566e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2210      	movs	r2, #16
 8005676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	893a      	ldrh	r2, [r7, #8]
 800568a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005690:	b29a      	uxth	r2, r3
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	4a50      	ldr	r2, [pc, #320]	; (80057dc <HAL_I2C_Master_Transmit+0x1f8>)
 800569a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800569c:	8979      	ldrh	r1, [r7, #10]
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	6a3a      	ldr	r2, [r7, #32]
 80056a2:	68f8      	ldr	r0, [r7, #12]
 80056a4:	f000 fac2 	bl	8005c2c <I2C_MasterRequestWrite>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d001      	beq.n	80056b2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e08d      	b.n	80057ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056b2:	2300      	movs	r3, #0
 80056b4:	613b      	str	r3, [r7, #16]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	695b      	ldr	r3, [r3, #20]
 80056bc:	613b      	str	r3, [r7, #16]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	613b      	str	r3, [r7, #16]
 80056c6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80056c8:	e066      	b.n	8005798 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	6a39      	ldr	r1, [r7, #32]
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	f000 fcd2 	bl	8006078 <I2C_WaitOnTXEFlagUntilTimeout>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00d      	beq.n	80056f6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056de:	2b04      	cmp	r3, #4
 80056e0:	d107      	bne.n	80056f2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e06b      	b.n	80057ce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fa:	781a      	ldrb	r2, [r3, #0]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005706:	1c5a      	adds	r2, r3, #1
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005710:	b29b      	uxth	r3, r3
 8005712:	3b01      	subs	r3, #1
 8005714:	b29a      	uxth	r2, r3
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800571e:	3b01      	subs	r3, #1
 8005720:	b29a      	uxth	r2, r3
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	695b      	ldr	r3, [r3, #20]
 800572c:	f003 0304 	and.w	r3, r3, #4
 8005730:	2b04      	cmp	r3, #4
 8005732:	d11b      	bne.n	800576c <HAL_I2C_Master_Transmit+0x188>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005738:	2b00      	cmp	r3, #0
 800573a:	d017      	beq.n	800576c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005740:	781a      	ldrb	r2, [r3, #0]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574c:	1c5a      	adds	r2, r3, #1
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005756:	b29b      	uxth	r3, r3
 8005758:	3b01      	subs	r3, #1
 800575a:	b29a      	uxth	r2, r3
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005764:	3b01      	subs	r3, #1
 8005766:	b29a      	uxth	r2, r3
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800576c:	697a      	ldr	r2, [r7, #20]
 800576e:	6a39      	ldr	r1, [r7, #32]
 8005770:	68f8      	ldr	r0, [r7, #12]
 8005772:	f000 fcc2 	bl	80060fa <I2C_WaitOnBTFFlagUntilTimeout>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d00d      	beq.n	8005798 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005780:	2b04      	cmp	r3, #4
 8005782:	d107      	bne.n	8005794 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005792:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e01a      	b.n	80057ce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800579c:	2b00      	cmp	r3, #0
 800579e:	d194      	bne.n	80056ca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2220      	movs	r2, #32
 80057b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80057c8:	2300      	movs	r3, #0
 80057ca:	e000      	b.n	80057ce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80057cc:	2302      	movs	r3, #2
  }
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3718      	adds	r7, #24
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	00100002 	.word	0x00100002
 80057dc:	ffff0000 	.word	0xffff0000

080057e0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b08c      	sub	sp, #48	; 0x30
 80057e4:	af02      	add	r7, sp, #8
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	607a      	str	r2, [r7, #4]
 80057ea:	461a      	mov	r2, r3
 80057ec:	460b      	mov	r3, r1
 80057ee:	817b      	strh	r3, [r7, #10]
 80057f0:	4613      	mov	r3, r2
 80057f2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80057f4:	f7fe fea2 	bl	800453c <HAL_GetTick>
 80057f8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005800:	b2db      	uxtb	r3, r3
 8005802:	2b20      	cmp	r3, #32
 8005804:	f040 820b 	bne.w	8005c1e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580a:	9300      	str	r3, [sp, #0]
 800580c:	2319      	movs	r3, #25
 800580e:	2201      	movs	r2, #1
 8005810:	497c      	ldr	r1, [pc, #496]	; (8005a04 <HAL_I2C_Master_Receive+0x224>)
 8005812:	68f8      	ldr	r0, [r7, #12]
 8005814:	f000 fb5a 	bl	8005ecc <I2C_WaitOnFlagUntilTimeout>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d001      	beq.n	8005822 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800581e:	2302      	movs	r3, #2
 8005820:	e1fe      	b.n	8005c20 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005828:	2b01      	cmp	r3, #1
 800582a:	d101      	bne.n	8005830 <HAL_I2C_Master_Receive+0x50>
 800582c:	2302      	movs	r3, #2
 800582e:	e1f7      	b.n	8005c20 <HAL_I2C_Master_Receive+0x440>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 0301 	and.w	r3, r3, #1
 8005842:	2b01      	cmp	r3, #1
 8005844:	d007      	beq.n	8005856 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f042 0201 	orr.w	r2, r2, #1
 8005854:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005864:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2222      	movs	r2, #34	; 0x22
 800586a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2210      	movs	r2, #16
 8005872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	893a      	ldrh	r2, [r7, #8]
 8005886:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800588c:	b29a      	uxth	r2, r3
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	4a5c      	ldr	r2, [pc, #368]	; (8005a08 <HAL_I2C_Master_Receive+0x228>)
 8005896:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005898:	8979      	ldrh	r1, [r7, #10]
 800589a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800589e:	68f8      	ldr	r0, [r7, #12]
 80058a0:	f000 fa46 	bl	8005d30 <I2C_MasterRequestRead>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d001      	beq.n	80058ae <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e1b8      	b.n	8005c20 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d113      	bne.n	80058de <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058b6:	2300      	movs	r3, #0
 80058b8:	623b      	str	r3, [r7, #32]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	695b      	ldr	r3, [r3, #20]
 80058c0:	623b      	str	r3, [r7, #32]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	699b      	ldr	r3, [r3, #24]
 80058c8:	623b      	str	r3, [r7, #32]
 80058ca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058da:	601a      	str	r2, [r3, #0]
 80058dc:	e18c      	b.n	8005bf8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d11b      	bne.n	800591e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058f6:	2300      	movs	r3, #0
 80058f8:	61fb      	str	r3, [r7, #28]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	695b      	ldr	r3, [r3, #20]
 8005900:	61fb      	str	r3, [r7, #28]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	699b      	ldr	r3, [r3, #24]
 8005908:	61fb      	str	r3, [r7, #28]
 800590a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800591a:	601a      	str	r2, [r3, #0]
 800591c:	e16c      	b.n	8005bf8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005922:	2b02      	cmp	r3, #2
 8005924:	d11b      	bne.n	800595e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005934:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005944:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005946:	2300      	movs	r3, #0
 8005948:	61bb      	str	r3, [r7, #24]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	695b      	ldr	r3, [r3, #20]
 8005950:	61bb      	str	r3, [r7, #24]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	699b      	ldr	r3, [r3, #24]
 8005958:	61bb      	str	r3, [r7, #24]
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	e14c      	b.n	8005bf8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800596c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800596e:	2300      	movs	r3, #0
 8005970:	617b      	str	r3, [r7, #20]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	695b      	ldr	r3, [r3, #20]
 8005978:	617b      	str	r3, [r7, #20]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	699b      	ldr	r3, [r3, #24]
 8005980:	617b      	str	r3, [r7, #20]
 8005982:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005984:	e138      	b.n	8005bf8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800598a:	2b03      	cmp	r3, #3
 800598c:	f200 80f1 	bhi.w	8005b72 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005994:	2b01      	cmp	r3, #1
 8005996:	d123      	bne.n	80059e0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800599a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800599c:	68f8      	ldr	r0, [r7, #12]
 800599e:	f000 fbed 	bl	800617c <I2C_WaitOnRXNEFlagUntilTimeout>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d001      	beq.n	80059ac <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e139      	b.n	8005c20 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	691a      	ldr	r2, [r3, #16]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b6:	b2d2      	uxtb	r2, r2
 80059b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059be:	1c5a      	adds	r2, r3, #1
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059c8:	3b01      	subs	r3, #1
 80059ca:	b29a      	uxth	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	3b01      	subs	r3, #1
 80059d8:	b29a      	uxth	r2, r3
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80059de:	e10b      	b.n	8005bf8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	d14e      	bne.n	8005a86 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80059e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ea:	9300      	str	r3, [sp, #0]
 80059ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ee:	2200      	movs	r2, #0
 80059f0:	4906      	ldr	r1, [pc, #24]	; (8005a0c <HAL_I2C_Master_Receive+0x22c>)
 80059f2:	68f8      	ldr	r0, [r7, #12]
 80059f4:	f000 fa6a 	bl	8005ecc <I2C_WaitOnFlagUntilTimeout>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d008      	beq.n	8005a10 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e10e      	b.n	8005c20 <HAL_I2C_Master_Receive+0x440>
 8005a02:	bf00      	nop
 8005a04:	00100002 	.word	0x00100002
 8005a08:	ffff0000 	.word	0xffff0000
 8005a0c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	691a      	ldr	r2, [r3, #16]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2a:	b2d2      	uxtb	r2, r2
 8005a2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a32:	1c5a      	adds	r2, r3, #1
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a3c:	3b01      	subs	r3, #1
 8005a3e:	b29a      	uxth	r2, r3
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	3b01      	subs	r3, #1
 8005a4c:	b29a      	uxth	r2, r3
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	691a      	ldr	r2, [r3, #16]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5c:	b2d2      	uxtb	r2, r2
 8005a5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a64:	1c5a      	adds	r2, r3, #1
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	b29a      	uxth	r2, r3
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	b29a      	uxth	r2, r3
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005a84:	e0b8      	b.n	8005bf8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a88:	9300      	str	r3, [sp, #0]
 8005a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	4966      	ldr	r1, [pc, #408]	; (8005c28 <HAL_I2C_Master_Receive+0x448>)
 8005a90:	68f8      	ldr	r0, [r7, #12]
 8005a92:	f000 fa1b 	bl	8005ecc <I2C_WaitOnFlagUntilTimeout>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d001      	beq.n	8005aa0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e0bf      	b.n	8005c20 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005aae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	691a      	ldr	r2, [r3, #16]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aba:	b2d2      	uxtb	r2, r2
 8005abc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac2:	1c5a      	adds	r2, r3, #1
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005acc:	3b01      	subs	r3, #1
 8005ace:	b29a      	uxth	r2, r3
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	3b01      	subs	r3, #1
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae4:	9300      	str	r3, [sp, #0]
 8005ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae8:	2200      	movs	r2, #0
 8005aea:	494f      	ldr	r1, [pc, #316]	; (8005c28 <HAL_I2C_Master_Receive+0x448>)
 8005aec:	68f8      	ldr	r0, [r7, #12]
 8005aee:	f000 f9ed 	bl	8005ecc <I2C_WaitOnFlagUntilTimeout>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d001      	beq.n	8005afc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	e091      	b.n	8005c20 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	691a      	ldr	r2, [r3, #16]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b16:	b2d2      	uxtb	r2, r2
 8005b18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1e:	1c5a      	adds	r2, r3, #1
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b28:	3b01      	subs	r3, #1
 8005b2a:	b29a      	uxth	r2, r3
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	3b01      	subs	r3, #1
 8005b38:	b29a      	uxth	r2, r3
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	691a      	ldr	r2, [r3, #16]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b48:	b2d2      	uxtb	r2, r2
 8005b4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b50:	1c5a      	adds	r2, r3, #1
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b5a:	3b01      	subs	r3, #1
 8005b5c:	b29a      	uxth	r2, r3
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005b70:	e042      	b.n	8005bf8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b76:	68f8      	ldr	r0, [r7, #12]
 8005b78:	f000 fb00 	bl	800617c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d001      	beq.n	8005b86 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e04c      	b.n	8005c20 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	691a      	ldr	r2, [r3, #16]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b90:	b2d2      	uxtb	r2, r2
 8005b92:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b98:	1c5a      	adds	r2, r3, #1
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ba2:	3b01      	subs	r3, #1
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	b29a      	uxth	r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	695b      	ldr	r3, [r3, #20]
 8005bbe:	f003 0304 	and.w	r3, r3, #4
 8005bc2:	2b04      	cmp	r3, #4
 8005bc4:	d118      	bne.n	8005bf8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	691a      	ldr	r2, [r3, #16]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd0:	b2d2      	uxtb	r2, r2
 8005bd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd8:	1c5a      	adds	r2, r3, #1
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005be2:	3b01      	subs	r3, #1
 8005be4:	b29a      	uxth	r2, r3
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	3b01      	subs	r3, #1
 8005bf2:	b29a      	uxth	r2, r3
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	f47f aec2 	bne.w	8005986 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2220      	movs	r2, #32
 8005c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	e000      	b.n	8005c20 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005c1e:	2302      	movs	r3, #2
  }
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3728      	adds	r7, #40	; 0x28
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	00010004 	.word	0x00010004

08005c2c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b088      	sub	sp, #32
 8005c30:	af02      	add	r7, sp, #8
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	607a      	str	r2, [r7, #4]
 8005c36:	603b      	str	r3, [r7, #0]
 8005c38:	460b      	mov	r3, r1
 8005c3a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c40:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	2b08      	cmp	r3, #8
 8005c46:	d006      	beq.n	8005c56 <I2C_MasterRequestWrite+0x2a>
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d003      	beq.n	8005c56 <I2C_MasterRequestWrite+0x2a>
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005c54:	d108      	bne.n	8005c68 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c64:	601a      	str	r2, [r3, #0]
 8005c66:	e00b      	b.n	8005c80 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c6c:	2b12      	cmp	r3, #18
 8005c6e:	d107      	bne.n	8005c80 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c7e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	9300      	str	r3, [sp, #0]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c8c:	68f8      	ldr	r0, [r7, #12]
 8005c8e:	f000 f91d 	bl	8005ecc <I2C_WaitOnFlagUntilTimeout>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d00d      	beq.n	8005cb4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ca2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ca6:	d103      	bne.n	8005cb0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	e035      	b.n	8005d20 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	691b      	ldr	r3, [r3, #16]
 8005cb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cbc:	d108      	bne.n	8005cd0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005cbe:	897b      	ldrh	r3, [r7, #10]
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005ccc:	611a      	str	r2, [r3, #16]
 8005cce:	e01b      	b.n	8005d08 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005cd0:	897b      	ldrh	r3, [r7, #10]
 8005cd2:	11db      	asrs	r3, r3, #7
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	f003 0306 	and.w	r3, r3, #6
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	f063 030f 	orn	r3, r3, #15
 8005ce0:	b2da      	uxtb	r2, r3
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	490e      	ldr	r1, [pc, #56]	; (8005d28 <I2C_MasterRequestWrite+0xfc>)
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	f000 f943 	bl	8005f7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d001      	beq.n	8005cfe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e010      	b.n	8005d20 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005cfe:	897b      	ldrh	r3, [r7, #10]
 8005d00:	b2da      	uxtb	r2, r3
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	4907      	ldr	r1, [pc, #28]	; (8005d2c <I2C_MasterRequestWrite+0x100>)
 8005d0e:	68f8      	ldr	r0, [r7, #12]
 8005d10:	f000 f933 	bl	8005f7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d14:	4603      	mov	r3, r0
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d001      	beq.n	8005d1e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e000      	b.n	8005d20 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005d1e:	2300      	movs	r3, #0
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3718      	adds	r7, #24
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	00010008 	.word	0x00010008
 8005d2c:	00010002 	.word	0x00010002

08005d30 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b088      	sub	sp, #32
 8005d34:	af02      	add	r7, sp, #8
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	607a      	str	r2, [r7, #4]
 8005d3a:	603b      	str	r3, [r7, #0]
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d44:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d54:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	2b08      	cmp	r3, #8
 8005d5a:	d006      	beq.n	8005d6a <I2C_MasterRequestRead+0x3a>
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d003      	beq.n	8005d6a <I2C_MasterRequestRead+0x3a>
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d68:	d108      	bne.n	8005d7c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d78:	601a      	str	r2, [r3, #0]
 8005d7a:	e00b      	b.n	8005d94 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d80:	2b11      	cmp	r3, #17
 8005d82:	d107      	bne.n	8005d94 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d92:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	9300      	str	r3, [sp, #0]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005da0:	68f8      	ldr	r0, [r7, #12]
 8005da2:	f000 f893 	bl	8005ecc <I2C_WaitOnFlagUntilTimeout>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d00d      	beq.n	8005dc8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005db6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dba:	d103      	bne.n	8005dc4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dc2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005dc4:	2303      	movs	r3, #3
 8005dc6:	e079      	b.n	8005ebc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005dd0:	d108      	bne.n	8005de4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005dd2:	897b      	ldrh	r3, [r7, #10]
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	f043 0301 	orr.w	r3, r3, #1
 8005dda:	b2da      	uxtb	r2, r3
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	611a      	str	r2, [r3, #16]
 8005de2:	e05f      	b.n	8005ea4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005de4:	897b      	ldrh	r3, [r7, #10]
 8005de6:	11db      	asrs	r3, r3, #7
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	f003 0306 	and.w	r3, r3, #6
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	f063 030f 	orn	r3, r3, #15
 8005df4:	b2da      	uxtb	r2, r3
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	4930      	ldr	r1, [pc, #192]	; (8005ec4 <I2C_MasterRequestRead+0x194>)
 8005e02:	68f8      	ldr	r0, [r7, #12]
 8005e04:	f000 f8b9 	bl	8005f7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d001      	beq.n	8005e12 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e054      	b.n	8005ebc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005e12:	897b      	ldrh	r3, [r7, #10]
 8005e14:	b2da      	uxtb	r2, r3
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	4929      	ldr	r1, [pc, #164]	; (8005ec8 <I2C_MasterRequestRead+0x198>)
 8005e22:	68f8      	ldr	r0, [r7, #12]
 8005e24:	f000 f8a9 	bl	8005f7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d001      	beq.n	8005e32 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e044      	b.n	8005ebc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e32:	2300      	movs	r3, #0
 8005e34:	613b      	str	r3, [r7, #16]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	695b      	ldr	r3, [r3, #20]
 8005e3c:	613b      	str	r3, [r7, #16]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	699b      	ldr	r3, [r3, #24]
 8005e44:	613b      	str	r3, [r7, #16]
 8005e46:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e56:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	9300      	str	r3, [sp, #0]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e64:	68f8      	ldr	r0, [r7, #12]
 8005e66:	f000 f831 	bl	8005ecc <I2C_WaitOnFlagUntilTimeout>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d00d      	beq.n	8005e8c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e7e:	d103      	bne.n	8005e88 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e86:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005e88:	2303      	movs	r3, #3
 8005e8a:	e017      	b.n	8005ebc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005e8c:	897b      	ldrh	r3, [r7, #10]
 8005e8e:	11db      	asrs	r3, r3, #7
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	f003 0306 	and.w	r3, r3, #6
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	f063 030e 	orn	r3, r3, #14
 8005e9c:	b2da      	uxtb	r2, r3
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	4907      	ldr	r1, [pc, #28]	; (8005ec8 <I2C_MasterRequestRead+0x198>)
 8005eaa:	68f8      	ldr	r0, [r7, #12]
 8005eac:	f000 f865 	bl	8005f7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d001      	beq.n	8005eba <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e000      	b.n	8005ebc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005eba:	2300      	movs	r3, #0
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3718      	adds	r7, #24
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	00010008 	.word	0x00010008
 8005ec8:	00010002 	.word	0x00010002

08005ecc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	603b      	str	r3, [r7, #0]
 8005ed8:	4613      	mov	r3, r2
 8005eda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005edc:	e025      	b.n	8005f2a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ee4:	d021      	beq.n	8005f2a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ee6:	f7fe fb29 	bl	800453c <HAL_GetTick>
 8005eea:	4602      	mov	r2, r0
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	1ad3      	subs	r3, r2, r3
 8005ef0:	683a      	ldr	r2, [r7, #0]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d302      	bcc.n	8005efc <I2C_WaitOnFlagUntilTimeout+0x30>
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d116      	bne.n	8005f2a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2200      	movs	r2, #0
 8005f00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2220      	movs	r2, #32
 8005f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f16:	f043 0220 	orr.w	r2, r3, #32
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e023      	b.n	8005f72 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	0c1b      	lsrs	r3, r3, #16
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d10d      	bne.n	8005f50 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	695b      	ldr	r3, [r3, #20]
 8005f3a:	43da      	mvns	r2, r3
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	4013      	ands	r3, r2
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	bf0c      	ite	eq
 8005f46:	2301      	moveq	r3, #1
 8005f48:	2300      	movne	r3, #0
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	e00c      	b.n	8005f6a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	699b      	ldr	r3, [r3, #24]
 8005f56:	43da      	mvns	r2, r3
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	bf0c      	ite	eq
 8005f62:	2301      	moveq	r3, #1
 8005f64:	2300      	movne	r3, #0
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	461a      	mov	r2, r3
 8005f6a:	79fb      	ldrb	r3, [r7, #7]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d0b6      	beq.n	8005ede <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3710      	adds	r7, #16
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}

08005f7a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005f7a:	b580      	push	{r7, lr}
 8005f7c:	b084      	sub	sp, #16
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	60f8      	str	r0, [r7, #12]
 8005f82:	60b9      	str	r1, [r7, #8]
 8005f84:	607a      	str	r2, [r7, #4]
 8005f86:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f88:	e051      	b.n	800602e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	695b      	ldr	r3, [r3, #20]
 8005f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f98:	d123      	bne.n	8005fe2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fa8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005fb2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2220      	movs	r2, #32
 8005fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fce:	f043 0204 	orr.w	r2, r3, #4
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e046      	b.n	8006070 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe8:	d021      	beq.n	800602e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fea:	f7fe faa7 	bl	800453c <HAL_GetTick>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	1ad3      	subs	r3, r2, r3
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d302      	bcc.n	8006000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d116      	bne.n	800602e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2200      	movs	r2, #0
 8006004:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2220      	movs	r2, #32
 800600a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2200      	movs	r2, #0
 8006012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601a:	f043 0220 	orr.w	r2, r3, #32
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2200      	movs	r2, #0
 8006026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	e020      	b.n	8006070 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	0c1b      	lsrs	r3, r3, #16
 8006032:	b2db      	uxtb	r3, r3
 8006034:	2b01      	cmp	r3, #1
 8006036:	d10c      	bne.n	8006052 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	695b      	ldr	r3, [r3, #20]
 800603e:	43da      	mvns	r2, r3
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	4013      	ands	r3, r2
 8006044:	b29b      	uxth	r3, r3
 8006046:	2b00      	cmp	r3, #0
 8006048:	bf14      	ite	ne
 800604a:	2301      	movne	r3, #1
 800604c:	2300      	moveq	r3, #0
 800604e:	b2db      	uxtb	r3, r3
 8006050:	e00b      	b.n	800606a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	699b      	ldr	r3, [r3, #24]
 8006058:	43da      	mvns	r2, r3
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	4013      	ands	r3, r2
 800605e:	b29b      	uxth	r3, r3
 8006060:	2b00      	cmp	r3, #0
 8006062:	bf14      	ite	ne
 8006064:	2301      	movne	r3, #1
 8006066:	2300      	moveq	r3, #0
 8006068:	b2db      	uxtb	r3, r3
 800606a:	2b00      	cmp	r3, #0
 800606c:	d18d      	bne.n	8005f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800606e:	2300      	movs	r3, #0
}
 8006070:	4618      	mov	r0, r3
 8006072:	3710      	adds	r7, #16
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006084:	e02d      	b.n	80060e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f000 f8ce 	bl	8006228 <I2C_IsAcknowledgeFailed>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d001      	beq.n	8006096 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e02d      	b.n	80060f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800609c:	d021      	beq.n	80060e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800609e:	f7fe fa4d 	bl	800453c <HAL_GetTick>
 80060a2:	4602      	mov	r2, r0
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	1ad3      	subs	r3, r2, r3
 80060a8:	68ba      	ldr	r2, [r7, #8]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d302      	bcc.n	80060b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d116      	bne.n	80060e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2200      	movs	r2, #0
 80060b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2220      	movs	r2, #32
 80060be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ce:	f043 0220 	orr.w	r2, r3, #32
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e007      	b.n	80060f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	695b      	ldr	r3, [r3, #20]
 80060e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ec:	2b80      	cmp	r3, #128	; 0x80
 80060ee:	d1ca      	bne.n	8006086 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3710      	adds	r7, #16
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}

080060fa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b084      	sub	sp, #16
 80060fe:	af00      	add	r7, sp, #0
 8006100:	60f8      	str	r0, [r7, #12]
 8006102:	60b9      	str	r1, [r7, #8]
 8006104:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006106:	e02d      	b.n	8006164 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006108:	68f8      	ldr	r0, [r7, #12]
 800610a:	f000 f88d 	bl	8006228 <I2C_IsAcknowledgeFailed>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d001      	beq.n	8006118 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	e02d      	b.n	8006174 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800611e:	d021      	beq.n	8006164 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006120:	f7fe fa0c 	bl	800453c <HAL_GetTick>
 8006124:	4602      	mov	r2, r0
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	1ad3      	subs	r3, r2, r3
 800612a:	68ba      	ldr	r2, [r7, #8]
 800612c:	429a      	cmp	r2, r3
 800612e:	d302      	bcc.n	8006136 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d116      	bne.n	8006164 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2200      	movs	r2, #0
 800613a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2220      	movs	r2, #32
 8006140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2200      	movs	r2, #0
 8006148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006150:	f043 0220 	orr.w	r2, r3, #32
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2200      	movs	r2, #0
 800615c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	e007      	b.n	8006174 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	695b      	ldr	r3, [r3, #20]
 800616a:	f003 0304 	and.w	r3, r3, #4
 800616e:	2b04      	cmp	r3, #4
 8006170:	d1ca      	bne.n	8006108 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006172:	2300      	movs	r3, #0
}
 8006174:	4618      	mov	r0, r3
 8006176:	3710      	adds	r7, #16
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006188:	e042      	b.n	8006210 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	695b      	ldr	r3, [r3, #20]
 8006190:	f003 0310 	and.w	r3, r3, #16
 8006194:	2b10      	cmp	r3, #16
 8006196:	d119      	bne.n	80061cc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f06f 0210 	mvn.w	r2, #16
 80061a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2200      	movs	r2, #0
 80061a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2220      	movs	r2, #32
 80061ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e029      	b.n	8006220 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061cc:	f7fe f9b6 	bl	800453c <HAL_GetTick>
 80061d0:	4602      	mov	r2, r0
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	68ba      	ldr	r2, [r7, #8]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d302      	bcc.n	80061e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d116      	bne.n	8006210 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2220      	movs	r2, #32
 80061ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fc:	f043 0220 	orr.w	r2, r3, #32
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2200      	movs	r2, #0
 8006208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	e007      	b.n	8006220 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	695b      	ldr	r3, [r3, #20]
 8006216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800621a:	2b40      	cmp	r3, #64	; 0x40
 800621c:	d1b5      	bne.n	800618a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800621e:	2300      	movs	r3, #0
}
 8006220:	4618      	mov	r0, r3
 8006222:	3710      	adds	r7, #16
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	695b      	ldr	r3, [r3, #20]
 8006236:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800623a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800623e:	d11b      	bne.n	8006278 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006248:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2220      	movs	r2, #32
 8006254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006264:	f043 0204 	orr.w	r2, r3, #4
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e000      	b.n	800627a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	370c      	adds	r7, #12
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr
	...

08006288 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b084      	sub	sp, #16
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d101      	bne.n	800629c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	e0cc      	b.n	8006436 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800629c:	4b68      	ldr	r3, [pc, #416]	; (8006440 <HAL_RCC_ClockConfig+0x1b8>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f003 030f 	and.w	r3, r3, #15
 80062a4:	683a      	ldr	r2, [r7, #0]
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d90c      	bls.n	80062c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062aa:	4b65      	ldr	r3, [pc, #404]	; (8006440 <HAL_RCC_ClockConfig+0x1b8>)
 80062ac:	683a      	ldr	r2, [r7, #0]
 80062ae:	b2d2      	uxtb	r2, r2
 80062b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062b2:	4b63      	ldr	r3, [pc, #396]	; (8006440 <HAL_RCC_ClockConfig+0x1b8>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 030f 	and.w	r3, r3, #15
 80062ba:	683a      	ldr	r2, [r7, #0]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d001      	beq.n	80062c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e0b8      	b.n	8006436 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f003 0302 	and.w	r3, r3, #2
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d020      	beq.n	8006312 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 0304 	and.w	r3, r3, #4
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d005      	beq.n	80062e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80062dc:	4b59      	ldr	r3, [pc, #356]	; (8006444 <HAL_RCC_ClockConfig+0x1bc>)
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	4a58      	ldr	r2, [pc, #352]	; (8006444 <HAL_RCC_ClockConfig+0x1bc>)
 80062e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80062e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 0308 	and.w	r3, r3, #8
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d005      	beq.n	8006300 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80062f4:	4b53      	ldr	r3, [pc, #332]	; (8006444 <HAL_RCC_ClockConfig+0x1bc>)
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	4a52      	ldr	r2, [pc, #328]	; (8006444 <HAL_RCC_ClockConfig+0x1bc>)
 80062fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80062fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006300:	4b50      	ldr	r3, [pc, #320]	; (8006444 <HAL_RCC_ClockConfig+0x1bc>)
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	494d      	ldr	r1, [pc, #308]	; (8006444 <HAL_RCC_ClockConfig+0x1bc>)
 800630e:	4313      	orrs	r3, r2
 8006310:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 0301 	and.w	r3, r3, #1
 800631a:	2b00      	cmp	r3, #0
 800631c:	d044      	beq.n	80063a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	2b01      	cmp	r3, #1
 8006324:	d107      	bne.n	8006336 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006326:	4b47      	ldr	r3, [pc, #284]	; (8006444 <HAL_RCC_ClockConfig+0x1bc>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800632e:	2b00      	cmp	r3, #0
 8006330:	d119      	bne.n	8006366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e07f      	b.n	8006436 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	2b02      	cmp	r3, #2
 800633c:	d003      	beq.n	8006346 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006342:	2b03      	cmp	r3, #3
 8006344:	d107      	bne.n	8006356 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006346:	4b3f      	ldr	r3, [pc, #252]	; (8006444 <HAL_RCC_ClockConfig+0x1bc>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800634e:	2b00      	cmp	r3, #0
 8006350:	d109      	bne.n	8006366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e06f      	b.n	8006436 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006356:	4b3b      	ldr	r3, [pc, #236]	; (8006444 <HAL_RCC_ClockConfig+0x1bc>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f003 0302 	and.w	r3, r3, #2
 800635e:	2b00      	cmp	r3, #0
 8006360:	d101      	bne.n	8006366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e067      	b.n	8006436 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006366:	4b37      	ldr	r3, [pc, #220]	; (8006444 <HAL_RCC_ClockConfig+0x1bc>)
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	f023 0203 	bic.w	r2, r3, #3
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	4934      	ldr	r1, [pc, #208]	; (8006444 <HAL_RCC_ClockConfig+0x1bc>)
 8006374:	4313      	orrs	r3, r2
 8006376:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006378:	f7fe f8e0 	bl	800453c <HAL_GetTick>
 800637c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800637e:	e00a      	b.n	8006396 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006380:	f7fe f8dc 	bl	800453c <HAL_GetTick>
 8006384:	4602      	mov	r2, r0
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	f241 3288 	movw	r2, #5000	; 0x1388
 800638e:	4293      	cmp	r3, r2
 8006390:	d901      	bls.n	8006396 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006392:	2303      	movs	r3, #3
 8006394:	e04f      	b.n	8006436 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006396:	4b2b      	ldr	r3, [pc, #172]	; (8006444 <HAL_RCC_ClockConfig+0x1bc>)
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	f003 020c 	and.w	r2, r3, #12
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d1eb      	bne.n	8006380 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80063a8:	4b25      	ldr	r3, [pc, #148]	; (8006440 <HAL_RCC_ClockConfig+0x1b8>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f003 030f 	and.w	r3, r3, #15
 80063b0:	683a      	ldr	r2, [r7, #0]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d20c      	bcs.n	80063d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063b6:	4b22      	ldr	r3, [pc, #136]	; (8006440 <HAL_RCC_ClockConfig+0x1b8>)
 80063b8:	683a      	ldr	r2, [r7, #0]
 80063ba:	b2d2      	uxtb	r2, r2
 80063bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063be:	4b20      	ldr	r3, [pc, #128]	; (8006440 <HAL_RCC_ClockConfig+0x1b8>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 030f 	and.w	r3, r3, #15
 80063c6:	683a      	ldr	r2, [r7, #0]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d001      	beq.n	80063d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	e032      	b.n	8006436 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 0304 	and.w	r3, r3, #4
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d008      	beq.n	80063ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063dc:	4b19      	ldr	r3, [pc, #100]	; (8006444 <HAL_RCC_ClockConfig+0x1bc>)
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	4916      	ldr	r1, [pc, #88]	; (8006444 <HAL_RCC_ClockConfig+0x1bc>)
 80063ea:	4313      	orrs	r3, r2
 80063ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 0308 	and.w	r3, r3, #8
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d009      	beq.n	800640e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80063fa:	4b12      	ldr	r3, [pc, #72]	; (8006444 <HAL_RCC_ClockConfig+0x1bc>)
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	00db      	lsls	r3, r3, #3
 8006408:	490e      	ldr	r1, [pc, #56]	; (8006444 <HAL_RCC_ClockConfig+0x1bc>)
 800640a:	4313      	orrs	r3, r2
 800640c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800640e:	f000 f887 	bl	8006520 <HAL_RCC_GetSysClockFreq>
 8006412:	4602      	mov	r2, r0
 8006414:	4b0b      	ldr	r3, [pc, #44]	; (8006444 <HAL_RCC_ClockConfig+0x1bc>)
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	091b      	lsrs	r3, r3, #4
 800641a:	f003 030f 	and.w	r3, r3, #15
 800641e:	490a      	ldr	r1, [pc, #40]	; (8006448 <HAL_RCC_ClockConfig+0x1c0>)
 8006420:	5ccb      	ldrb	r3, [r1, r3]
 8006422:	fa22 f303 	lsr.w	r3, r2, r3
 8006426:	4a09      	ldr	r2, [pc, #36]	; (800644c <HAL_RCC_ClockConfig+0x1c4>)
 8006428:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800642a:	4b09      	ldr	r3, [pc, #36]	; (8006450 <HAL_RCC_ClockConfig+0x1c8>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4618      	mov	r0, r3
 8006430:	f7fd fb54 	bl	8003adc <HAL_InitTick>

  return HAL_OK;
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	3710      	adds	r7, #16
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	40023c00 	.word	0x40023c00
 8006444:	40023800 	.word	0x40023800
 8006448:	0800f2dc 	.word	0x0800f2dc
 800644c:	20000028 	.word	0x20000028
 8006450:	2000002c 	.word	0x2000002c

08006454 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006454:	b480      	push	{r7}
 8006456:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006458:	4b03      	ldr	r3, [pc, #12]	; (8006468 <HAL_RCC_GetHCLKFreq+0x14>)
 800645a:	681b      	ldr	r3, [r3, #0]
}
 800645c:	4618      	mov	r0, r3
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop
 8006468:	20000028 	.word	0x20000028

0800646c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006470:	f7ff fff0 	bl	8006454 <HAL_RCC_GetHCLKFreq>
 8006474:	4602      	mov	r2, r0
 8006476:	4b05      	ldr	r3, [pc, #20]	; (800648c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	0a9b      	lsrs	r3, r3, #10
 800647c:	f003 0307 	and.w	r3, r3, #7
 8006480:	4903      	ldr	r1, [pc, #12]	; (8006490 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006482:	5ccb      	ldrb	r3, [r1, r3]
 8006484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006488:	4618      	mov	r0, r3
 800648a:	bd80      	pop	{r7, pc}
 800648c:	40023800 	.word	0x40023800
 8006490:	0800f2ec 	.word	0x0800f2ec

08006494 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006498:	f7ff ffdc 	bl	8006454 <HAL_RCC_GetHCLKFreq>
 800649c:	4602      	mov	r2, r0
 800649e:	4b05      	ldr	r3, [pc, #20]	; (80064b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	0b5b      	lsrs	r3, r3, #13
 80064a4:	f003 0307 	and.w	r3, r3, #7
 80064a8:	4903      	ldr	r1, [pc, #12]	; (80064b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80064aa:	5ccb      	ldrb	r3, [r1, r3]
 80064ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	bd80      	pop	{r7, pc}
 80064b4:	40023800 	.word	0x40023800
 80064b8:	0800f2ec 	.word	0x0800f2ec

080064bc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	220f      	movs	r2, #15
 80064ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80064cc:	4b12      	ldr	r3, [pc, #72]	; (8006518 <HAL_RCC_GetClockConfig+0x5c>)
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	f003 0203 	and.w	r2, r3, #3
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80064d8:	4b0f      	ldr	r3, [pc, #60]	; (8006518 <HAL_RCC_GetClockConfig+0x5c>)
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80064e4:	4b0c      	ldr	r3, [pc, #48]	; (8006518 <HAL_RCC_GetClockConfig+0x5c>)
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80064f0:	4b09      	ldr	r3, [pc, #36]	; (8006518 <HAL_RCC_GetClockConfig+0x5c>)
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	08db      	lsrs	r3, r3, #3
 80064f6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80064fe:	4b07      	ldr	r3, [pc, #28]	; (800651c <HAL_RCC_GetClockConfig+0x60>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f003 020f 	and.w	r2, r3, #15
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	601a      	str	r2, [r3, #0]
}
 800650a:	bf00      	nop
 800650c:	370c      	adds	r7, #12
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr
 8006516:	bf00      	nop
 8006518:	40023800 	.word	0x40023800
 800651c:	40023c00 	.word	0x40023c00

08006520 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006520:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006524:	b0a6      	sub	sp, #152	; 0x98
 8006526:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006528:	2300      	movs	r3, #0
 800652a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 800652e:	2300      	movs	r3, #0
 8006530:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8006534:	2300      	movs	r3, #0
 8006536:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 800653a:	2300      	movs	r3, #0
 800653c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8006540:	2300      	movs	r3, #0
 8006542:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006546:	4bc8      	ldr	r3, [pc, #800]	; (8006868 <HAL_RCC_GetSysClockFreq+0x348>)
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	f003 030c 	and.w	r3, r3, #12
 800654e:	2b0c      	cmp	r3, #12
 8006550:	f200 817e 	bhi.w	8006850 <HAL_RCC_GetSysClockFreq+0x330>
 8006554:	a201      	add	r2, pc, #4	; (adr r2, 800655c <HAL_RCC_GetSysClockFreq+0x3c>)
 8006556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800655a:	bf00      	nop
 800655c:	08006591 	.word	0x08006591
 8006560:	08006851 	.word	0x08006851
 8006564:	08006851 	.word	0x08006851
 8006568:	08006851 	.word	0x08006851
 800656c:	08006599 	.word	0x08006599
 8006570:	08006851 	.word	0x08006851
 8006574:	08006851 	.word	0x08006851
 8006578:	08006851 	.word	0x08006851
 800657c:	080065a1 	.word	0x080065a1
 8006580:	08006851 	.word	0x08006851
 8006584:	08006851 	.word	0x08006851
 8006588:	08006851 	.word	0x08006851
 800658c:	0800670b 	.word	0x0800670b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006590:	4bb6      	ldr	r3, [pc, #728]	; (800686c <HAL_RCC_GetSysClockFreq+0x34c>)
 8006592:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8006596:	e15f      	b.n	8006858 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006598:	4bb5      	ldr	r3, [pc, #724]	; (8006870 <HAL_RCC_GetSysClockFreq+0x350>)
 800659a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800659e:	e15b      	b.n	8006858 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80065a0:	4bb1      	ldr	r3, [pc, #708]	; (8006868 <HAL_RCC_GetSysClockFreq+0x348>)
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80065a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80065ac:	4bae      	ldr	r3, [pc, #696]	; (8006868 <HAL_RCC_GetSysClockFreq+0x348>)
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d031      	beq.n	800661c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065b8:	4bab      	ldr	r3, [pc, #684]	; (8006868 <HAL_RCC_GetSysClockFreq+0x348>)
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	099b      	lsrs	r3, r3, #6
 80065be:	2200      	movs	r2, #0
 80065c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80065c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80065c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80065c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065ca:	663b      	str	r3, [r7, #96]	; 0x60
 80065cc:	2300      	movs	r3, #0
 80065ce:	667b      	str	r3, [r7, #100]	; 0x64
 80065d0:	4ba7      	ldr	r3, [pc, #668]	; (8006870 <HAL_RCC_GetSysClockFreq+0x350>)
 80065d2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80065d6:	462a      	mov	r2, r5
 80065d8:	fb03 f202 	mul.w	r2, r3, r2
 80065dc:	2300      	movs	r3, #0
 80065de:	4621      	mov	r1, r4
 80065e0:	fb01 f303 	mul.w	r3, r1, r3
 80065e4:	4413      	add	r3, r2
 80065e6:	4aa2      	ldr	r2, [pc, #648]	; (8006870 <HAL_RCC_GetSysClockFreq+0x350>)
 80065e8:	4621      	mov	r1, r4
 80065ea:	fba1 1202 	umull	r1, r2, r1, r2
 80065ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80065f0:	460a      	mov	r2, r1
 80065f2:	67ba      	str	r2, [r7, #120]	; 0x78
 80065f4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80065f6:	4413      	add	r3, r2
 80065f8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80065fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80065fe:	2200      	movs	r2, #0
 8006600:	65bb      	str	r3, [r7, #88]	; 0x58
 8006602:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006604:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006608:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800660c:	f7fa fa76 	bl	8000afc <__aeabi_uldivmod>
 8006610:	4602      	mov	r2, r0
 8006612:	460b      	mov	r3, r1
 8006614:	4613      	mov	r3, r2
 8006616:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800661a:	e064      	b.n	80066e6 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800661c:	4b92      	ldr	r3, [pc, #584]	; (8006868 <HAL_RCC_GetSysClockFreq+0x348>)
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	099b      	lsrs	r3, r3, #6
 8006622:	2200      	movs	r2, #0
 8006624:	653b      	str	r3, [r7, #80]	; 0x50
 8006626:	657a      	str	r2, [r7, #84]	; 0x54
 8006628:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800662a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800662e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006630:	2300      	movs	r3, #0
 8006632:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006634:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8006638:	4622      	mov	r2, r4
 800663a:	462b      	mov	r3, r5
 800663c:	f04f 0000 	mov.w	r0, #0
 8006640:	f04f 0100 	mov.w	r1, #0
 8006644:	0159      	lsls	r1, r3, #5
 8006646:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800664a:	0150      	lsls	r0, r2, #5
 800664c:	4602      	mov	r2, r0
 800664e:	460b      	mov	r3, r1
 8006650:	4621      	mov	r1, r4
 8006652:	1a51      	subs	r1, r2, r1
 8006654:	6139      	str	r1, [r7, #16]
 8006656:	4629      	mov	r1, r5
 8006658:	eb63 0301 	sbc.w	r3, r3, r1
 800665c:	617b      	str	r3, [r7, #20]
 800665e:	f04f 0200 	mov.w	r2, #0
 8006662:	f04f 0300 	mov.w	r3, #0
 8006666:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800666a:	4659      	mov	r1, fp
 800666c:	018b      	lsls	r3, r1, #6
 800666e:	4651      	mov	r1, sl
 8006670:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006674:	4651      	mov	r1, sl
 8006676:	018a      	lsls	r2, r1, #6
 8006678:	4651      	mov	r1, sl
 800667a:	ebb2 0801 	subs.w	r8, r2, r1
 800667e:	4659      	mov	r1, fp
 8006680:	eb63 0901 	sbc.w	r9, r3, r1
 8006684:	f04f 0200 	mov.w	r2, #0
 8006688:	f04f 0300 	mov.w	r3, #0
 800668c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006690:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006694:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006698:	4690      	mov	r8, r2
 800669a:	4699      	mov	r9, r3
 800669c:	4623      	mov	r3, r4
 800669e:	eb18 0303 	adds.w	r3, r8, r3
 80066a2:	60bb      	str	r3, [r7, #8]
 80066a4:	462b      	mov	r3, r5
 80066a6:	eb49 0303 	adc.w	r3, r9, r3
 80066aa:	60fb      	str	r3, [r7, #12]
 80066ac:	f04f 0200 	mov.w	r2, #0
 80066b0:	f04f 0300 	mov.w	r3, #0
 80066b4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80066b8:	4629      	mov	r1, r5
 80066ba:	028b      	lsls	r3, r1, #10
 80066bc:	4621      	mov	r1, r4
 80066be:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80066c2:	4621      	mov	r1, r4
 80066c4:	028a      	lsls	r2, r1, #10
 80066c6:	4610      	mov	r0, r2
 80066c8:	4619      	mov	r1, r3
 80066ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066ce:	2200      	movs	r2, #0
 80066d0:	643b      	str	r3, [r7, #64]	; 0x40
 80066d2:	647a      	str	r2, [r7, #68]	; 0x44
 80066d4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80066d8:	f7fa fa10 	bl	8000afc <__aeabi_uldivmod>
 80066dc:	4602      	mov	r2, r0
 80066de:	460b      	mov	r3, r1
 80066e0:	4613      	mov	r3, r2
 80066e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80066e6:	4b60      	ldr	r3, [pc, #384]	; (8006868 <HAL_RCC_GetSysClockFreq+0x348>)
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	0c1b      	lsrs	r3, r3, #16
 80066ec:	f003 0303 	and.w	r3, r3, #3
 80066f0:	3301      	adds	r3, #1
 80066f2:	005b      	lsls	r3, r3, #1
 80066f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 80066f8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80066fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006700:	fbb2 f3f3 	udiv	r3, r2, r3
 8006704:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8006708:	e0a6      	b.n	8006858 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800670a:	4b57      	ldr	r3, [pc, #348]	; (8006868 <HAL_RCC_GetSysClockFreq+0x348>)
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006712:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006716:	4b54      	ldr	r3, [pc, #336]	; (8006868 <HAL_RCC_GetSysClockFreq+0x348>)
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800671e:	2b00      	cmp	r3, #0
 8006720:	d02a      	beq.n	8006778 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006722:	4b51      	ldr	r3, [pc, #324]	; (8006868 <HAL_RCC_GetSysClockFreq+0x348>)
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	099b      	lsrs	r3, r3, #6
 8006728:	2200      	movs	r2, #0
 800672a:	63bb      	str	r3, [r7, #56]	; 0x38
 800672c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800672e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006730:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006734:	2100      	movs	r1, #0
 8006736:	4b4e      	ldr	r3, [pc, #312]	; (8006870 <HAL_RCC_GetSysClockFreq+0x350>)
 8006738:	fb03 f201 	mul.w	r2, r3, r1
 800673c:	2300      	movs	r3, #0
 800673e:	fb00 f303 	mul.w	r3, r0, r3
 8006742:	4413      	add	r3, r2
 8006744:	4a4a      	ldr	r2, [pc, #296]	; (8006870 <HAL_RCC_GetSysClockFreq+0x350>)
 8006746:	fba0 1202 	umull	r1, r2, r0, r2
 800674a:	677a      	str	r2, [r7, #116]	; 0x74
 800674c:	460a      	mov	r2, r1
 800674e:	673a      	str	r2, [r7, #112]	; 0x70
 8006750:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006752:	4413      	add	r3, r2
 8006754:	677b      	str	r3, [r7, #116]	; 0x74
 8006756:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800675a:	2200      	movs	r2, #0
 800675c:	633b      	str	r3, [r7, #48]	; 0x30
 800675e:	637a      	str	r2, [r7, #52]	; 0x34
 8006760:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006764:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8006768:	f7fa f9c8 	bl	8000afc <__aeabi_uldivmod>
 800676c:	4602      	mov	r2, r0
 800676e:	460b      	mov	r3, r1
 8006770:	4613      	mov	r3, r2
 8006772:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006776:	e05b      	b.n	8006830 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006778:	4b3b      	ldr	r3, [pc, #236]	; (8006868 <HAL_RCC_GetSysClockFreq+0x348>)
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	099b      	lsrs	r3, r3, #6
 800677e:	2200      	movs	r2, #0
 8006780:	62bb      	str	r3, [r7, #40]	; 0x28
 8006782:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800678a:	623b      	str	r3, [r7, #32]
 800678c:	2300      	movs	r3, #0
 800678e:	627b      	str	r3, [r7, #36]	; 0x24
 8006790:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006794:	4642      	mov	r2, r8
 8006796:	464b      	mov	r3, r9
 8006798:	f04f 0000 	mov.w	r0, #0
 800679c:	f04f 0100 	mov.w	r1, #0
 80067a0:	0159      	lsls	r1, r3, #5
 80067a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80067a6:	0150      	lsls	r0, r2, #5
 80067a8:	4602      	mov	r2, r0
 80067aa:	460b      	mov	r3, r1
 80067ac:	4641      	mov	r1, r8
 80067ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80067b2:	4649      	mov	r1, r9
 80067b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80067b8:	f04f 0200 	mov.w	r2, #0
 80067bc:	f04f 0300 	mov.w	r3, #0
 80067c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80067c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80067c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80067cc:	ebb2 040a 	subs.w	r4, r2, sl
 80067d0:	eb63 050b 	sbc.w	r5, r3, fp
 80067d4:	f04f 0200 	mov.w	r2, #0
 80067d8:	f04f 0300 	mov.w	r3, #0
 80067dc:	00eb      	lsls	r3, r5, #3
 80067de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80067e2:	00e2      	lsls	r2, r4, #3
 80067e4:	4614      	mov	r4, r2
 80067e6:	461d      	mov	r5, r3
 80067e8:	4643      	mov	r3, r8
 80067ea:	18e3      	adds	r3, r4, r3
 80067ec:	603b      	str	r3, [r7, #0]
 80067ee:	464b      	mov	r3, r9
 80067f0:	eb45 0303 	adc.w	r3, r5, r3
 80067f4:	607b      	str	r3, [r7, #4]
 80067f6:	f04f 0200 	mov.w	r2, #0
 80067fa:	f04f 0300 	mov.w	r3, #0
 80067fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006802:	4629      	mov	r1, r5
 8006804:	028b      	lsls	r3, r1, #10
 8006806:	4621      	mov	r1, r4
 8006808:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800680c:	4621      	mov	r1, r4
 800680e:	028a      	lsls	r2, r1, #10
 8006810:	4610      	mov	r0, r2
 8006812:	4619      	mov	r1, r3
 8006814:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006818:	2200      	movs	r2, #0
 800681a:	61bb      	str	r3, [r7, #24]
 800681c:	61fa      	str	r2, [r7, #28]
 800681e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006822:	f7fa f96b 	bl	8000afc <__aeabi_uldivmod>
 8006826:	4602      	mov	r2, r0
 8006828:	460b      	mov	r3, r1
 800682a:	4613      	mov	r3, r2
 800682c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006830:	4b0d      	ldr	r3, [pc, #52]	; (8006868 <HAL_RCC_GetSysClockFreq+0x348>)
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	0f1b      	lsrs	r3, r3, #28
 8006836:	f003 0307 	and.w	r3, r3, #7
 800683a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 800683e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006842:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006846:	fbb2 f3f3 	udiv	r3, r2, r3
 800684a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800684e:	e003      	b.n	8006858 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006850:	4b06      	ldr	r3, [pc, #24]	; (800686c <HAL_RCC_GetSysClockFreq+0x34c>)
 8006852:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8006856:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006858:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 800685c:	4618      	mov	r0, r3
 800685e:	3798      	adds	r7, #152	; 0x98
 8006860:	46bd      	mov	sp, r7
 8006862:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006866:	bf00      	nop
 8006868:	40023800 	.word	0x40023800
 800686c:	00f42400 	.word	0x00f42400
 8006870:	017d7840 	.word	0x017d7840

08006874 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b086      	sub	sp, #24
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d101      	bne.n	8006886 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e28d      	b.n	8006da2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f003 0301 	and.w	r3, r3, #1
 800688e:	2b00      	cmp	r3, #0
 8006890:	f000 8083 	beq.w	800699a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006894:	4b94      	ldr	r3, [pc, #592]	; (8006ae8 <HAL_RCC_OscConfig+0x274>)
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	f003 030c 	and.w	r3, r3, #12
 800689c:	2b04      	cmp	r3, #4
 800689e:	d019      	beq.n	80068d4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80068a0:	4b91      	ldr	r3, [pc, #580]	; (8006ae8 <HAL_RCC_OscConfig+0x274>)
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80068a8:	2b08      	cmp	r3, #8
 80068aa:	d106      	bne.n	80068ba <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80068ac:	4b8e      	ldr	r3, [pc, #568]	; (8006ae8 <HAL_RCC_OscConfig+0x274>)
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068b8:	d00c      	beq.n	80068d4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80068ba:	4b8b      	ldr	r3, [pc, #556]	; (8006ae8 <HAL_RCC_OscConfig+0x274>)
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80068c2:	2b0c      	cmp	r3, #12
 80068c4:	d112      	bne.n	80068ec <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80068c6:	4b88      	ldr	r3, [pc, #544]	; (8006ae8 <HAL_RCC_OscConfig+0x274>)
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068d2:	d10b      	bne.n	80068ec <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068d4:	4b84      	ldr	r3, [pc, #528]	; (8006ae8 <HAL_RCC_OscConfig+0x274>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d05b      	beq.n	8006998 <HAL_RCC_OscConfig+0x124>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d157      	bne.n	8006998 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	e25a      	b.n	8006da2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068f4:	d106      	bne.n	8006904 <HAL_RCC_OscConfig+0x90>
 80068f6:	4b7c      	ldr	r3, [pc, #496]	; (8006ae8 <HAL_RCC_OscConfig+0x274>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a7b      	ldr	r2, [pc, #492]	; (8006ae8 <HAL_RCC_OscConfig+0x274>)
 80068fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006900:	6013      	str	r3, [r2, #0]
 8006902:	e01d      	b.n	8006940 <HAL_RCC_OscConfig+0xcc>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800690c:	d10c      	bne.n	8006928 <HAL_RCC_OscConfig+0xb4>
 800690e:	4b76      	ldr	r3, [pc, #472]	; (8006ae8 <HAL_RCC_OscConfig+0x274>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a75      	ldr	r2, [pc, #468]	; (8006ae8 <HAL_RCC_OscConfig+0x274>)
 8006914:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006918:	6013      	str	r3, [r2, #0]
 800691a:	4b73      	ldr	r3, [pc, #460]	; (8006ae8 <HAL_RCC_OscConfig+0x274>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a72      	ldr	r2, [pc, #456]	; (8006ae8 <HAL_RCC_OscConfig+0x274>)
 8006920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006924:	6013      	str	r3, [r2, #0]
 8006926:	e00b      	b.n	8006940 <HAL_RCC_OscConfig+0xcc>
 8006928:	4b6f      	ldr	r3, [pc, #444]	; (8006ae8 <HAL_RCC_OscConfig+0x274>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a6e      	ldr	r2, [pc, #440]	; (8006ae8 <HAL_RCC_OscConfig+0x274>)
 800692e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006932:	6013      	str	r3, [r2, #0]
 8006934:	4b6c      	ldr	r3, [pc, #432]	; (8006ae8 <HAL_RCC_OscConfig+0x274>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a6b      	ldr	r2, [pc, #428]	; (8006ae8 <HAL_RCC_OscConfig+0x274>)
 800693a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800693e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d013      	beq.n	8006970 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006948:	f7fd fdf8 	bl	800453c <HAL_GetTick>
 800694c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800694e:	e008      	b.n	8006962 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006950:	f7fd fdf4 	bl	800453c <HAL_GetTick>
 8006954:	4602      	mov	r2, r0
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	1ad3      	subs	r3, r2, r3
 800695a:	2b64      	cmp	r3, #100	; 0x64
 800695c:	d901      	bls.n	8006962 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800695e:	2303      	movs	r3, #3
 8006960:	e21f      	b.n	8006da2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006962:	4b61      	ldr	r3, [pc, #388]	; (8006ae8 <HAL_RCC_OscConfig+0x274>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800696a:	2b00      	cmp	r3, #0
 800696c:	d0f0      	beq.n	8006950 <HAL_RCC_OscConfig+0xdc>
 800696e:	e014      	b.n	800699a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006970:	f7fd fde4 	bl	800453c <HAL_GetTick>
 8006974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006976:	e008      	b.n	800698a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006978:	f7fd fde0 	bl	800453c <HAL_GetTick>
 800697c:	4602      	mov	r2, r0
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	2b64      	cmp	r3, #100	; 0x64
 8006984:	d901      	bls.n	800698a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006986:	2303      	movs	r3, #3
 8006988:	e20b      	b.n	8006da2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800698a:	4b57      	ldr	r3, [pc, #348]	; (8006ae8 <HAL_RCC_OscConfig+0x274>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006992:	2b00      	cmp	r3, #0
 8006994:	d1f0      	bne.n	8006978 <HAL_RCC_OscConfig+0x104>
 8006996:	e000      	b.n	800699a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006998:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 0302 	and.w	r3, r3, #2
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d06f      	beq.n	8006a86 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80069a6:	4b50      	ldr	r3, [pc, #320]	; (8006ae8 <HAL_RCC_OscConfig+0x274>)
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	f003 030c 	and.w	r3, r3, #12
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d017      	beq.n	80069e2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80069b2:	4b4d      	ldr	r3, [pc, #308]	; (8006ae8 <HAL_RCC_OscConfig+0x274>)
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80069ba:	2b08      	cmp	r3, #8
 80069bc:	d105      	bne.n	80069ca <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80069be:	4b4a      	ldr	r3, [pc, #296]	; (8006ae8 <HAL_RCC_OscConfig+0x274>)
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00b      	beq.n	80069e2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80069ca:	4b47      	ldr	r3, [pc, #284]	; (8006ae8 <HAL_RCC_OscConfig+0x274>)
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80069d2:	2b0c      	cmp	r3, #12
 80069d4:	d11c      	bne.n	8006a10 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80069d6:	4b44      	ldr	r3, [pc, #272]	; (8006ae8 <HAL_RCC_OscConfig+0x274>)
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d116      	bne.n	8006a10 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069e2:	4b41      	ldr	r3, [pc, #260]	; (8006ae8 <HAL_RCC_OscConfig+0x274>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 0302 	and.w	r3, r3, #2
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d005      	beq.n	80069fa <HAL_RCC_OscConfig+0x186>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d001      	beq.n	80069fa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	e1d3      	b.n	8006da2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069fa:	4b3b      	ldr	r3, [pc, #236]	; (8006ae8 <HAL_RCC_OscConfig+0x274>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	00db      	lsls	r3, r3, #3
 8006a08:	4937      	ldr	r1, [pc, #220]	; (8006ae8 <HAL_RCC_OscConfig+0x274>)
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a0e:	e03a      	b.n	8006a86 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d020      	beq.n	8006a5a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a18:	4b34      	ldr	r3, [pc, #208]	; (8006aec <HAL_RCC_OscConfig+0x278>)
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a1e:	f7fd fd8d 	bl	800453c <HAL_GetTick>
 8006a22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a24:	e008      	b.n	8006a38 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a26:	f7fd fd89 	bl	800453c <HAL_GetTick>
 8006a2a:	4602      	mov	r2, r0
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	1ad3      	subs	r3, r2, r3
 8006a30:	2b02      	cmp	r3, #2
 8006a32:	d901      	bls.n	8006a38 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006a34:	2303      	movs	r3, #3
 8006a36:	e1b4      	b.n	8006da2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a38:	4b2b      	ldr	r3, [pc, #172]	; (8006ae8 <HAL_RCC_OscConfig+0x274>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 0302 	and.w	r3, r3, #2
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d0f0      	beq.n	8006a26 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a44:	4b28      	ldr	r3, [pc, #160]	; (8006ae8 <HAL_RCC_OscConfig+0x274>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	691b      	ldr	r3, [r3, #16]
 8006a50:	00db      	lsls	r3, r3, #3
 8006a52:	4925      	ldr	r1, [pc, #148]	; (8006ae8 <HAL_RCC_OscConfig+0x274>)
 8006a54:	4313      	orrs	r3, r2
 8006a56:	600b      	str	r3, [r1, #0]
 8006a58:	e015      	b.n	8006a86 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a5a:	4b24      	ldr	r3, [pc, #144]	; (8006aec <HAL_RCC_OscConfig+0x278>)
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a60:	f7fd fd6c 	bl	800453c <HAL_GetTick>
 8006a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a66:	e008      	b.n	8006a7a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a68:	f7fd fd68 	bl	800453c <HAL_GetTick>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	1ad3      	subs	r3, r2, r3
 8006a72:	2b02      	cmp	r3, #2
 8006a74:	d901      	bls.n	8006a7a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006a76:	2303      	movs	r3, #3
 8006a78:	e193      	b.n	8006da2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a7a:	4b1b      	ldr	r3, [pc, #108]	; (8006ae8 <HAL_RCC_OscConfig+0x274>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 0302 	and.w	r3, r3, #2
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d1f0      	bne.n	8006a68 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f003 0308 	and.w	r3, r3, #8
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d036      	beq.n	8006b00 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	695b      	ldr	r3, [r3, #20]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d016      	beq.n	8006ac8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a9a:	4b15      	ldr	r3, [pc, #84]	; (8006af0 <HAL_RCC_OscConfig+0x27c>)
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aa0:	f7fd fd4c 	bl	800453c <HAL_GetTick>
 8006aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006aa6:	e008      	b.n	8006aba <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006aa8:	f7fd fd48 	bl	800453c <HAL_GetTick>
 8006aac:	4602      	mov	r2, r0
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	1ad3      	subs	r3, r2, r3
 8006ab2:	2b02      	cmp	r3, #2
 8006ab4:	d901      	bls.n	8006aba <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006ab6:	2303      	movs	r3, #3
 8006ab8:	e173      	b.n	8006da2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006aba:	4b0b      	ldr	r3, [pc, #44]	; (8006ae8 <HAL_RCC_OscConfig+0x274>)
 8006abc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006abe:	f003 0302 	and.w	r3, r3, #2
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d0f0      	beq.n	8006aa8 <HAL_RCC_OscConfig+0x234>
 8006ac6:	e01b      	b.n	8006b00 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ac8:	4b09      	ldr	r3, [pc, #36]	; (8006af0 <HAL_RCC_OscConfig+0x27c>)
 8006aca:	2200      	movs	r2, #0
 8006acc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ace:	f7fd fd35 	bl	800453c <HAL_GetTick>
 8006ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ad4:	e00e      	b.n	8006af4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ad6:	f7fd fd31 	bl	800453c <HAL_GetTick>
 8006ada:	4602      	mov	r2, r0
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	1ad3      	subs	r3, r2, r3
 8006ae0:	2b02      	cmp	r3, #2
 8006ae2:	d907      	bls.n	8006af4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006ae4:	2303      	movs	r3, #3
 8006ae6:	e15c      	b.n	8006da2 <HAL_RCC_OscConfig+0x52e>
 8006ae8:	40023800 	.word	0x40023800
 8006aec:	42470000 	.word	0x42470000
 8006af0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006af4:	4b8a      	ldr	r3, [pc, #552]	; (8006d20 <HAL_RCC_OscConfig+0x4ac>)
 8006af6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006af8:	f003 0302 	and.w	r3, r3, #2
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d1ea      	bne.n	8006ad6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 0304 	and.w	r3, r3, #4
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	f000 8097 	beq.w	8006c3c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b12:	4b83      	ldr	r3, [pc, #524]	; (8006d20 <HAL_RCC_OscConfig+0x4ac>)
 8006b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d10f      	bne.n	8006b3e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b1e:	2300      	movs	r3, #0
 8006b20:	60bb      	str	r3, [r7, #8]
 8006b22:	4b7f      	ldr	r3, [pc, #508]	; (8006d20 <HAL_RCC_OscConfig+0x4ac>)
 8006b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b26:	4a7e      	ldr	r2, [pc, #504]	; (8006d20 <HAL_RCC_OscConfig+0x4ac>)
 8006b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8006b2e:	4b7c      	ldr	r3, [pc, #496]	; (8006d20 <HAL_RCC_OscConfig+0x4ac>)
 8006b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b36:	60bb      	str	r3, [r7, #8]
 8006b38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b3e:	4b79      	ldr	r3, [pc, #484]	; (8006d24 <HAL_RCC_OscConfig+0x4b0>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d118      	bne.n	8006b7c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b4a:	4b76      	ldr	r3, [pc, #472]	; (8006d24 <HAL_RCC_OscConfig+0x4b0>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a75      	ldr	r2, [pc, #468]	; (8006d24 <HAL_RCC_OscConfig+0x4b0>)
 8006b50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b56:	f7fd fcf1 	bl	800453c <HAL_GetTick>
 8006b5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b5c:	e008      	b.n	8006b70 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b5e:	f7fd fced 	bl	800453c <HAL_GetTick>
 8006b62:	4602      	mov	r2, r0
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	1ad3      	subs	r3, r2, r3
 8006b68:	2b02      	cmp	r3, #2
 8006b6a:	d901      	bls.n	8006b70 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006b6c:	2303      	movs	r3, #3
 8006b6e:	e118      	b.n	8006da2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b70:	4b6c      	ldr	r3, [pc, #432]	; (8006d24 <HAL_RCC_OscConfig+0x4b0>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d0f0      	beq.n	8006b5e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d106      	bne.n	8006b92 <HAL_RCC_OscConfig+0x31e>
 8006b84:	4b66      	ldr	r3, [pc, #408]	; (8006d20 <HAL_RCC_OscConfig+0x4ac>)
 8006b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b88:	4a65      	ldr	r2, [pc, #404]	; (8006d20 <HAL_RCC_OscConfig+0x4ac>)
 8006b8a:	f043 0301 	orr.w	r3, r3, #1
 8006b8e:	6713      	str	r3, [r2, #112]	; 0x70
 8006b90:	e01c      	b.n	8006bcc <HAL_RCC_OscConfig+0x358>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	2b05      	cmp	r3, #5
 8006b98:	d10c      	bne.n	8006bb4 <HAL_RCC_OscConfig+0x340>
 8006b9a:	4b61      	ldr	r3, [pc, #388]	; (8006d20 <HAL_RCC_OscConfig+0x4ac>)
 8006b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b9e:	4a60      	ldr	r2, [pc, #384]	; (8006d20 <HAL_RCC_OscConfig+0x4ac>)
 8006ba0:	f043 0304 	orr.w	r3, r3, #4
 8006ba4:	6713      	str	r3, [r2, #112]	; 0x70
 8006ba6:	4b5e      	ldr	r3, [pc, #376]	; (8006d20 <HAL_RCC_OscConfig+0x4ac>)
 8006ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006baa:	4a5d      	ldr	r2, [pc, #372]	; (8006d20 <HAL_RCC_OscConfig+0x4ac>)
 8006bac:	f043 0301 	orr.w	r3, r3, #1
 8006bb0:	6713      	str	r3, [r2, #112]	; 0x70
 8006bb2:	e00b      	b.n	8006bcc <HAL_RCC_OscConfig+0x358>
 8006bb4:	4b5a      	ldr	r3, [pc, #360]	; (8006d20 <HAL_RCC_OscConfig+0x4ac>)
 8006bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bb8:	4a59      	ldr	r2, [pc, #356]	; (8006d20 <HAL_RCC_OscConfig+0x4ac>)
 8006bba:	f023 0301 	bic.w	r3, r3, #1
 8006bbe:	6713      	str	r3, [r2, #112]	; 0x70
 8006bc0:	4b57      	ldr	r3, [pc, #348]	; (8006d20 <HAL_RCC_OscConfig+0x4ac>)
 8006bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bc4:	4a56      	ldr	r2, [pc, #344]	; (8006d20 <HAL_RCC_OscConfig+0x4ac>)
 8006bc6:	f023 0304 	bic.w	r3, r3, #4
 8006bca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d015      	beq.n	8006c00 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bd4:	f7fd fcb2 	bl	800453c <HAL_GetTick>
 8006bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bda:	e00a      	b.n	8006bf2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006bdc:	f7fd fcae 	bl	800453c <HAL_GetTick>
 8006be0:	4602      	mov	r2, r0
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	1ad3      	subs	r3, r2, r3
 8006be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d901      	bls.n	8006bf2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006bee:	2303      	movs	r3, #3
 8006bf0:	e0d7      	b.n	8006da2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bf2:	4b4b      	ldr	r3, [pc, #300]	; (8006d20 <HAL_RCC_OscConfig+0x4ac>)
 8006bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bf6:	f003 0302 	and.w	r3, r3, #2
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d0ee      	beq.n	8006bdc <HAL_RCC_OscConfig+0x368>
 8006bfe:	e014      	b.n	8006c2a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c00:	f7fd fc9c 	bl	800453c <HAL_GetTick>
 8006c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c06:	e00a      	b.n	8006c1e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c08:	f7fd fc98 	bl	800453c <HAL_GetTick>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d901      	bls.n	8006c1e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006c1a:	2303      	movs	r3, #3
 8006c1c:	e0c1      	b.n	8006da2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c1e:	4b40      	ldr	r3, [pc, #256]	; (8006d20 <HAL_RCC_OscConfig+0x4ac>)
 8006c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c22:	f003 0302 	and.w	r3, r3, #2
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d1ee      	bne.n	8006c08 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c2a:	7dfb      	ldrb	r3, [r7, #23]
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d105      	bne.n	8006c3c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c30:	4b3b      	ldr	r3, [pc, #236]	; (8006d20 <HAL_RCC_OscConfig+0x4ac>)
 8006c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c34:	4a3a      	ldr	r2, [pc, #232]	; (8006d20 <HAL_RCC_OscConfig+0x4ac>)
 8006c36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c3a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	699b      	ldr	r3, [r3, #24]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	f000 80ad 	beq.w	8006da0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006c46:	4b36      	ldr	r3, [pc, #216]	; (8006d20 <HAL_RCC_OscConfig+0x4ac>)
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	f003 030c 	and.w	r3, r3, #12
 8006c4e:	2b08      	cmp	r3, #8
 8006c50:	d060      	beq.n	8006d14 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	699b      	ldr	r3, [r3, #24]
 8006c56:	2b02      	cmp	r3, #2
 8006c58:	d145      	bne.n	8006ce6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c5a:	4b33      	ldr	r3, [pc, #204]	; (8006d28 <HAL_RCC_OscConfig+0x4b4>)
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c60:	f7fd fc6c 	bl	800453c <HAL_GetTick>
 8006c64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c66:	e008      	b.n	8006c7a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c68:	f7fd fc68 	bl	800453c <HAL_GetTick>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	1ad3      	subs	r3, r2, r3
 8006c72:	2b02      	cmp	r3, #2
 8006c74:	d901      	bls.n	8006c7a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006c76:	2303      	movs	r3, #3
 8006c78:	e093      	b.n	8006da2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c7a:	4b29      	ldr	r3, [pc, #164]	; (8006d20 <HAL_RCC_OscConfig+0x4ac>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d1f0      	bne.n	8006c68 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	69da      	ldr	r2, [r3, #28]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6a1b      	ldr	r3, [r3, #32]
 8006c8e:	431a      	orrs	r2, r3
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c94:	019b      	lsls	r3, r3, #6
 8006c96:	431a      	orrs	r2, r3
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c9c:	085b      	lsrs	r3, r3, #1
 8006c9e:	3b01      	subs	r3, #1
 8006ca0:	041b      	lsls	r3, r3, #16
 8006ca2:	431a      	orrs	r2, r3
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca8:	061b      	lsls	r3, r3, #24
 8006caa:	431a      	orrs	r2, r3
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb0:	071b      	lsls	r3, r3, #28
 8006cb2:	491b      	ldr	r1, [pc, #108]	; (8006d20 <HAL_RCC_OscConfig+0x4ac>)
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006cb8:	4b1b      	ldr	r3, [pc, #108]	; (8006d28 <HAL_RCC_OscConfig+0x4b4>)
 8006cba:	2201      	movs	r2, #1
 8006cbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cbe:	f7fd fc3d 	bl	800453c <HAL_GetTick>
 8006cc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cc4:	e008      	b.n	8006cd8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cc6:	f7fd fc39 	bl	800453c <HAL_GetTick>
 8006cca:	4602      	mov	r2, r0
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	1ad3      	subs	r3, r2, r3
 8006cd0:	2b02      	cmp	r3, #2
 8006cd2:	d901      	bls.n	8006cd8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006cd4:	2303      	movs	r3, #3
 8006cd6:	e064      	b.n	8006da2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cd8:	4b11      	ldr	r3, [pc, #68]	; (8006d20 <HAL_RCC_OscConfig+0x4ac>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d0f0      	beq.n	8006cc6 <HAL_RCC_OscConfig+0x452>
 8006ce4:	e05c      	b.n	8006da0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ce6:	4b10      	ldr	r3, [pc, #64]	; (8006d28 <HAL_RCC_OscConfig+0x4b4>)
 8006ce8:	2200      	movs	r2, #0
 8006cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cec:	f7fd fc26 	bl	800453c <HAL_GetTick>
 8006cf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cf2:	e008      	b.n	8006d06 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cf4:	f7fd fc22 	bl	800453c <HAL_GetTick>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	1ad3      	subs	r3, r2, r3
 8006cfe:	2b02      	cmp	r3, #2
 8006d00:	d901      	bls.n	8006d06 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006d02:	2303      	movs	r3, #3
 8006d04:	e04d      	b.n	8006da2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d06:	4b06      	ldr	r3, [pc, #24]	; (8006d20 <HAL_RCC_OscConfig+0x4ac>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d1f0      	bne.n	8006cf4 <HAL_RCC_OscConfig+0x480>
 8006d12:	e045      	b.n	8006da0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	699b      	ldr	r3, [r3, #24]
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d107      	bne.n	8006d2c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	e040      	b.n	8006da2 <HAL_RCC_OscConfig+0x52e>
 8006d20:	40023800 	.word	0x40023800
 8006d24:	40007000 	.word	0x40007000
 8006d28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006d2c:	4b1f      	ldr	r3, [pc, #124]	; (8006dac <HAL_RCC_OscConfig+0x538>)
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	699b      	ldr	r3, [r3, #24]
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d030      	beq.n	8006d9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d129      	bne.n	8006d9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d122      	bne.n	8006d9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006d56:	68fa      	ldr	r2, [r7, #12]
 8006d58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006d5c:	4013      	ands	r3, r2
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006d62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d119      	bne.n	8006d9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d72:	085b      	lsrs	r3, r3, #1
 8006d74:	3b01      	subs	r3, #1
 8006d76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d10f      	bne.n	8006d9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d107      	bne.n	8006d9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d96:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d001      	beq.n	8006da0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e000      	b.n	8006da2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006da0:	2300      	movs	r3, #0
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3718      	adds	r7, #24
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	40023800 	.word	0x40023800

08006db0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b082      	sub	sp, #8
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d101      	bne.n	8006dc2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e07b      	b.n	8006eba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d108      	bne.n	8006ddc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006dd2:	d009      	beq.n	8006de8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	61da      	str	r2, [r3, #28]
 8006dda:	e005      	b.n	8006de8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2200      	movs	r2, #0
 8006de6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d106      	bne.n	8006e08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f7fc fcca 	bl	800379c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2202      	movs	r2, #2
 8006e0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e1e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006e30:	431a      	orrs	r2, r3
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e3a:	431a      	orrs	r2, r3
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	691b      	ldr	r3, [r3, #16]
 8006e40:	f003 0302 	and.w	r3, r3, #2
 8006e44:	431a      	orrs	r2, r3
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	695b      	ldr	r3, [r3, #20]
 8006e4a:	f003 0301 	and.w	r3, r3, #1
 8006e4e:	431a      	orrs	r2, r3
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	699b      	ldr	r3, [r3, #24]
 8006e54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e58:	431a      	orrs	r2, r3
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	69db      	ldr	r3, [r3, #28]
 8006e5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e62:	431a      	orrs	r2, r3
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6a1b      	ldr	r3, [r3, #32]
 8006e68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e6c:	ea42 0103 	orr.w	r1, r2, r3
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e74:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	430a      	orrs	r2, r1
 8006e7e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	699b      	ldr	r3, [r3, #24]
 8006e84:	0c1b      	lsrs	r3, r3, #16
 8006e86:	f003 0104 	and.w	r1, r3, #4
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8e:	f003 0210 	and.w	r2, r3, #16
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	430a      	orrs	r2, r1
 8006e98:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	69da      	ldr	r2, [r3, #28]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ea8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3708      	adds	r7, #8
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}

08006ec2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ec2:	b580      	push	{r7, lr}
 8006ec4:	b088      	sub	sp, #32
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	60f8      	str	r0, [r7, #12]
 8006eca:	60b9      	str	r1, [r7, #8]
 8006ecc:	603b      	str	r3, [r7, #0]
 8006ece:	4613      	mov	r3, r2
 8006ed0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d101      	bne.n	8006ee4 <HAL_SPI_Transmit+0x22>
 8006ee0:	2302      	movs	r3, #2
 8006ee2:	e126      	b.n	8007132 <HAL_SPI_Transmit+0x270>
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006eec:	f7fd fb26 	bl	800453c <HAL_GetTick>
 8006ef0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006ef2:	88fb      	ldrh	r3, [r7, #6]
 8006ef4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d002      	beq.n	8006f08 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006f02:	2302      	movs	r3, #2
 8006f04:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006f06:	e10b      	b.n	8007120 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d002      	beq.n	8006f14 <HAL_SPI_Transmit+0x52>
 8006f0e:	88fb      	ldrh	r3, [r7, #6]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d102      	bne.n	8006f1a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006f14:	2301      	movs	r3, #1
 8006f16:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006f18:	e102      	b.n	8007120 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2203      	movs	r2, #3
 8006f1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2200      	movs	r2, #0
 8006f26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	68ba      	ldr	r2, [r7, #8]
 8006f2c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	88fa      	ldrh	r2, [r7, #6]
 8006f32:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	88fa      	ldrh	r2, [r7, #6]
 8006f38:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2200      	movs	r2, #0
 8006f44:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2200      	movs	r2, #0
 8006f56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f60:	d10f      	bne.n	8006f82 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f70:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f80:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f8c:	2b40      	cmp	r3, #64	; 0x40
 8006f8e:	d007      	beq.n	8006fa0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f9e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fa8:	d14b      	bne.n	8007042 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d002      	beq.n	8006fb8 <HAL_SPI_Transmit+0xf6>
 8006fb2:	8afb      	ldrh	r3, [r7, #22]
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d13e      	bne.n	8007036 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fbc:	881a      	ldrh	r2, [r3, #0]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fc8:	1c9a      	adds	r2, r3, #2
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	3b01      	subs	r3, #1
 8006fd6:	b29a      	uxth	r2, r3
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006fdc:	e02b      	b.n	8007036 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	f003 0302 	and.w	r3, r3, #2
 8006fe8:	2b02      	cmp	r3, #2
 8006fea:	d112      	bne.n	8007012 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff0:	881a      	ldrh	r2, [r3, #0]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ffc:	1c9a      	adds	r2, r3, #2
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007006:	b29b      	uxth	r3, r3
 8007008:	3b01      	subs	r3, #1
 800700a:	b29a      	uxth	r2, r3
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	86da      	strh	r2, [r3, #54]	; 0x36
 8007010:	e011      	b.n	8007036 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007012:	f7fd fa93 	bl	800453c <HAL_GetTick>
 8007016:	4602      	mov	r2, r0
 8007018:	69bb      	ldr	r3, [r7, #24]
 800701a:	1ad3      	subs	r3, r2, r3
 800701c:	683a      	ldr	r2, [r7, #0]
 800701e:	429a      	cmp	r2, r3
 8007020:	d803      	bhi.n	800702a <HAL_SPI_Transmit+0x168>
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007028:	d102      	bne.n	8007030 <HAL_SPI_Transmit+0x16e>
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d102      	bne.n	8007036 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007030:	2303      	movs	r3, #3
 8007032:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007034:	e074      	b.n	8007120 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800703a:	b29b      	uxth	r3, r3
 800703c:	2b00      	cmp	r3, #0
 800703e:	d1ce      	bne.n	8006fde <HAL_SPI_Transmit+0x11c>
 8007040:	e04c      	b.n	80070dc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d002      	beq.n	8007050 <HAL_SPI_Transmit+0x18e>
 800704a:	8afb      	ldrh	r3, [r7, #22]
 800704c:	2b01      	cmp	r3, #1
 800704e:	d140      	bne.n	80070d2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	330c      	adds	r3, #12
 800705a:	7812      	ldrb	r2, [r2, #0]
 800705c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007062:	1c5a      	adds	r2, r3, #1
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800706c:	b29b      	uxth	r3, r3
 800706e:	3b01      	subs	r3, #1
 8007070:	b29a      	uxth	r2, r3
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007076:	e02c      	b.n	80070d2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	f003 0302 	and.w	r3, r3, #2
 8007082:	2b02      	cmp	r3, #2
 8007084:	d113      	bne.n	80070ae <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	330c      	adds	r3, #12
 8007090:	7812      	ldrb	r2, [r2, #0]
 8007092:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007098:	1c5a      	adds	r2, r3, #1
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	3b01      	subs	r3, #1
 80070a6:	b29a      	uxth	r2, r3
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	86da      	strh	r2, [r3, #54]	; 0x36
 80070ac:	e011      	b.n	80070d2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070ae:	f7fd fa45 	bl	800453c <HAL_GetTick>
 80070b2:	4602      	mov	r2, r0
 80070b4:	69bb      	ldr	r3, [r7, #24]
 80070b6:	1ad3      	subs	r3, r2, r3
 80070b8:	683a      	ldr	r2, [r7, #0]
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d803      	bhi.n	80070c6 <HAL_SPI_Transmit+0x204>
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070c4:	d102      	bne.n	80070cc <HAL_SPI_Transmit+0x20a>
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d102      	bne.n	80070d2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80070cc:	2303      	movs	r3, #3
 80070ce:	77fb      	strb	r3, [r7, #31]
          goto error;
 80070d0:	e026      	b.n	8007120 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d1cd      	bne.n	8007078 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80070dc:	69ba      	ldr	r2, [r7, #24]
 80070de:	6839      	ldr	r1, [r7, #0]
 80070e0:	68f8      	ldr	r0, [r7, #12]
 80070e2:	f000 fa55 	bl	8007590 <SPI_EndRxTxTransaction>
 80070e6:	4603      	mov	r3, r0
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d002      	beq.n	80070f2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2220      	movs	r2, #32
 80070f0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d10a      	bne.n	8007110 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80070fa:	2300      	movs	r3, #0
 80070fc:	613b      	str	r3, [r7, #16]
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	613b      	str	r3, [r7, #16]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	613b      	str	r3, [r7, #16]
 800710e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007114:	2b00      	cmp	r3, #0
 8007116:	d002      	beq.n	800711e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	77fb      	strb	r3, [r7, #31]
 800711c:	e000      	b.n	8007120 <HAL_SPI_Transmit+0x25e>
  }

error:
 800711e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2201      	movs	r2, #1
 8007124:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2200      	movs	r2, #0
 800712c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007130:	7ffb      	ldrb	r3, [r7, #31]
}
 8007132:	4618      	mov	r0, r3
 8007134:	3720      	adds	r7, #32
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}

0800713a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800713a:	b580      	push	{r7, lr}
 800713c:	b08c      	sub	sp, #48	; 0x30
 800713e:	af00      	add	r7, sp, #0
 8007140:	60f8      	str	r0, [r7, #12]
 8007142:	60b9      	str	r1, [r7, #8]
 8007144:	607a      	str	r2, [r7, #4]
 8007146:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007148:	2301      	movs	r3, #1
 800714a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800714c:	2300      	movs	r3, #0
 800714e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007158:	2b01      	cmp	r3, #1
 800715a:	d101      	bne.n	8007160 <HAL_SPI_TransmitReceive+0x26>
 800715c:	2302      	movs	r3, #2
 800715e:	e18a      	b.n	8007476 <HAL_SPI_TransmitReceive+0x33c>
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2201      	movs	r2, #1
 8007164:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007168:	f7fd f9e8 	bl	800453c <HAL_GetTick>
 800716c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007174:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800717e:	887b      	ldrh	r3, [r7, #2]
 8007180:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007182:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007186:	2b01      	cmp	r3, #1
 8007188:	d00f      	beq.n	80071aa <HAL_SPI_TransmitReceive+0x70>
 800718a:	69fb      	ldr	r3, [r7, #28]
 800718c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007190:	d107      	bne.n	80071a2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d103      	bne.n	80071a2 <HAL_SPI_TransmitReceive+0x68>
 800719a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800719e:	2b04      	cmp	r3, #4
 80071a0:	d003      	beq.n	80071aa <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80071a2:	2302      	movs	r3, #2
 80071a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80071a8:	e15b      	b.n	8007462 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d005      	beq.n	80071bc <HAL_SPI_TransmitReceive+0x82>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d002      	beq.n	80071bc <HAL_SPI_TransmitReceive+0x82>
 80071b6:	887b      	ldrh	r3, [r7, #2]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d103      	bne.n	80071c4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80071c2:	e14e      	b.n	8007462 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	2b04      	cmp	r3, #4
 80071ce:	d003      	beq.n	80071d8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2205      	movs	r2, #5
 80071d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2200      	movs	r2, #0
 80071dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	887a      	ldrh	r2, [r7, #2]
 80071e8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	887a      	ldrh	r2, [r7, #2]
 80071ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	68ba      	ldr	r2, [r7, #8]
 80071f4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	887a      	ldrh	r2, [r7, #2]
 80071fa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	887a      	ldrh	r2, [r7, #2]
 8007200:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2200      	movs	r2, #0
 8007206:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2200      	movs	r2, #0
 800720c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007218:	2b40      	cmp	r3, #64	; 0x40
 800721a:	d007      	beq.n	800722c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800722a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007234:	d178      	bne.n	8007328 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d002      	beq.n	8007244 <HAL_SPI_TransmitReceive+0x10a>
 800723e:	8b7b      	ldrh	r3, [r7, #26]
 8007240:	2b01      	cmp	r3, #1
 8007242:	d166      	bne.n	8007312 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007248:	881a      	ldrh	r2, [r3, #0]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007254:	1c9a      	adds	r2, r3, #2
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800725e:	b29b      	uxth	r3, r3
 8007260:	3b01      	subs	r3, #1
 8007262:	b29a      	uxth	r2, r3
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007268:	e053      	b.n	8007312 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	f003 0302 	and.w	r3, r3, #2
 8007274:	2b02      	cmp	r3, #2
 8007276:	d11b      	bne.n	80072b0 <HAL_SPI_TransmitReceive+0x176>
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800727c:	b29b      	uxth	r3, r3
 800727e:	2b00      	cmp	r3, #0
 8007280:	d016      	beq.n	80072b0 <HAL_SPI_TransmitReceive+0x176>
 8007282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007284:	2b01      	cmp	r3, #1
 8007286:	d113      	bne.n	80072b0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800728c:	881a      	ldrh	r2, [r3, #0]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007298:	1c9a      	adds	r2, r3, #2
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	3b01      	subs	r3, #1
 80072a6:	b29a      	uxth	r2, r3
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80072ac:	2300      	movs	r3, #0
 80072ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	f003 0301 	and.w	r3, r3, #1
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d119      	bne.n	80072f2 <HAL_SPI_TransmitReceive+0x1b8>
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d014      	beq.n	80072f2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	68da      	ldr	r2, [r3, #12]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d2:	b292      	uxth	r2, r2
 80072d4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072da:	1c9a      	adds	r2, r3, #2
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	3b01      	subs	r3, #1
 80072e8:	b29a      	uxth	r2, r3
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80072ee:	2301      	movs	r3, #1
 80072f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80072f2:	f7fd f923 	bl	800453c <HAL_GetTick>
 80072f6:	4602      	mov	r2, r0
 80072f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fa:	1ad3      	subs	r3, r2, r3
 80072fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072fe:	429a      	cmp	r2, r3
 8007300:	d807      	bhi.n	8007312 <HAL_SPI_TransmitReceive+0x1d8>
 8007302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007308:	d003      	beq.n	8007312 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800730a:	2303      	movs	r3, #3
 800730c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007310:	e0a7      	b.n	8007462 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007316:	b29b      	uxth	r3, r3
 8007318:	2b00      	cmp	r3, #0
 800731a:	d1a6      	bne.n	800726a <HAL_SPI_TransmitReceive+0x130>
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007320:	b29b      	uxth	r3, r3
 8007322:	2b00      	cmp	r3, #0
 8007324:	d1a1      	bne.n	800726a <HAL_SPI_TransmitReceive+0x130>
 8007326:	e07c      	b.n	8007422 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d002      	beq.n	8007336 <HAL_SPI_TransmitReceive+0x1fc>
 8007330:	8b7b      	ldrh	r3, [r7, #26]
 8007332:	2b01      	cmp	r3, #1
 8007334:	d16b      	bne.n	800740e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	330c      	adds	r3, #12
 8007340:	7812      	ldrb	r2, [r2, #0]
 8007342:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007348:	1c5a      	adds	r2, r3, #1
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007352:	b29b      	uxth	r3, r3
 8007354:	3b01      	subs	r3, #1
 8007356:	b29a      	uxth	r2, r3
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800735c:	e057      	b.n	800740e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	f003 0302 	and.w	r3, r3, #2
 8007368:	2b02      	cmp	r3, #2
 800736a:	d11c      	bne.n	80073a6 <HAL_SPI_TransmitReceive+0x26c>
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007370:	b29b      	uxth	r3, r3
 8007372:	2b00      	cmp	r3, #0
 8007374:	d017      	beq.n	80073a6 <HAL_SPI_TransmitReceive+0x26c>
 8007376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007378:	2b01      	cmp	r3, #1
 800737a:	d114      	bne.n	80073a6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	330c      	adds	r3, #12
 8007386:	7812      	ldrb	r2, [r2, #0]
 8007388:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800738e:	1c5a      	adds	r2, r3, #1
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007398:	b29b      	uxth	r3, r3
 800739a:	3b01      	subs	r3, #1
 800739c:	b29a      	uxth	r2, r3
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80073a2:	2300      	movs	r3, #0
 80073a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	f003 0301 	and.w	r3, r3, #1
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d119      	bne.n	80073e8 <HAL_SPI_TransmitReceive+0x2ae>
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d014      	beq.n	80073e8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	68da      	ldr	r2, [r3, #12]
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c8:	b2d2      	uxtb	r2, r2
 80073ca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d0:	1c5a      	adds	r2, r3, #1
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073da:	b29b      	uxth	r3, r3
 80073dc:	3b01      	subs	r3, #1
 80073de:	b29a      	uxth	r2, r3
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80073e4:	2301      	movs	r3, #1
 80073e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80073e8:	f7fd f8a8 	bl	800453c <HAL_GetTick>
 80073ec:	4602      	mov	r2, r0
 80073ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f0:	1ad3      	subs	r3, r2, r3
 80073f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d803      	bhi.n	8007400 <HAL_SPI_TransmitReceive+0x2c6>
 80073f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073fe:	d102      	bne.n	8007406 <HAL_SPI_TransmitReceive+0x2cc>
 8007400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007402:	2b00      	cmp	r3, #0
 8007404:	d103      	bne.n	800740e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007406:	2303      	movs	r3, #3
 8007408:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800740c:	e029      	b.n	8007462 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007412:	b29b      	uxth	r3, r3
 8007414:	2b00      	cmp	r3, #0
 8007416:	d1a2      	bne.n	800735e <HAL_SPI_TransmitReceive+0x224>
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800741c:	b29b      	uxth	r3, r3
 800741e:	2b00      	cmp	r3, #0
 8007420:	d19d      	bne.n	800735e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007424:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007426:	68f8      	ldr	r0, [r7, #12]
 8007428:	f000 f8b2 	bl	8007590 <SPI_EndRxTxTransaction>
 800742c:	4603      	mov	r3, r0
 800742e:	2b00      	cmp	r3, #0
 8007430:	d006      	beq.n	8007440 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2220      	movs	r2, #32
 800743c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800743e:	e010      	b.n	8007462 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d10b      	bne.n	8007460 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007448:	2300      	movs	r3, #0
 800744a:	617b      	str	r3, [r7, #20]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	68db      	ldr	r3, [r3, #12]
 8007452:	617b      	str	r3, [r7, #20]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	617b      	str	r3, [r7, #20]
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	e000      	b.n	8007462 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007460:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2201      	movs	r2, #1
 8007466:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2200      	movs	r2, #0
 800746e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007472:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007476:	4618      	mov	r0, r3
 8007478:	3730      	adds	r7, #48	; 0x30
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
	...

08007480 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b088      	sub	sp, #32
 8007484:	af00      	add	r7, sp, #0
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	60b9      	str	r1, [r7, #8]
 800748a:	603b      	str	r3, [r7, #0]
 800748c:	4613      	mov	r3, r2
 800748e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007490:	f7fd f854 	bl	800453c <HAL_GetTick>
 8007494:	4602      	mov	r2, r0
 8007496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007498:	1a9b      	subs	r3, r3, r2
 800749a:	683a      	ldr	r2, [r7, #0]
 800749c:	4413      	add	r3, r2
 800749e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80074a0:	f7fd f84c 	bl	800453c <HAL_GetTick>
 80074a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80074a6:	4b39      	ldr	r3, [pc, #228]	; (800758c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	015b      	lsls	r3, r3, #5
 80074ac:	0d1b      	lsrs	r3, r3, #20
 80074ae:	69fa      	ldr	r2, [r7, #28]
 80074b0:	fb02 f303 	mul.w	r3, r2, r3
 80074b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80074b6:	e054      	b.n	8007562 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074be:	d050      	beq.n	8007562 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80074c0:	f7fd f83c 	bl	800453c <HAL_GetTick>
 80074c4:	4602      	mov	r2, r0
 80074c6:	69bb      	ldr	r3, [r7, #24]
 80074c8:	1ad3      	subs	r3, r2, r3
 80074ca:	69fa      	ldr	r2, [r7, #28]
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d902      	bls.n	80074d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80074d0:	69fb      	ldr	r3, [r7, #28]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d13d      	bne.n	8007552 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	685a      	ldr	r2, [r3, #4]
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80074e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074ee:	d111      	bne.n	8007514 <SPI_WaitFlagStateUntilTimeout+0x94>
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074f8:	d004      	beq.n	8007504 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007502:	d107      	bne.n	8007514 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007512:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007518:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800751c:	d10f      	bne.n	800753e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800752c:	601a      	str	r2, [r3, #0]
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800753c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2201      	movs	r2, #1
 8007542:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2200      	movs	r2, #0
 800754a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800754e:	2303      	movs	r3, #3
 8007550:	e017      	b.n	8007582 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d101      	bne.n	800755c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007558:	2300      	movs	r3, #0
 800755a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	3b01      	subs	r3, #1
 8007560:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	689a      	ldr	r2, [r3, #8]
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	4013      	ands	r3, r2
 800756c:	68ba      	ldr	r2, [r7, #8]
 800756e:	429a      	cmp	r2, r3
 8007570:	bf0c      	ite	eq
 8007572:	2301      	moveq	r3, #1
 8007574:	2300      	movne	r3, #0
 8007576:	b2db      	uxtb	r3, r3
 8007578:	461a      	mov	r2, r3
 800757a:	79fb      	ldrb	r3, [r7, #7]
 800757c:	429a      	cmp	r2, r3
 800757e:	d19b      	bne.n	80074b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007580:	2300      	movs	r3, #0
}
 8007582:	4618      	mov	r0, r3
 8007584:	3720      	adds	r7, #32
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
 800758a:	bf00      	nop
 800758c:	20000028 	.word	0x20000028

08007590 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b088      	sub	sp, #32
 8007594:	af02      	add	r7, sp, #8
 8007596:	60f8      	str	r0, [r7, #12]
 8007598:	60b9      	str	r1, [r7, #8]
 800759a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800759c:	4b1b      	ldr	r3, [pc, #108]	; (800760c <SPI_EndRxTxTransaction+0x7c>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a1b      	ldr	r2, [pc, #108]	; (8007610 <SPI_EndRxTxTransaction+0x80>)
 80075a2:	fba2 2303 	umull	r2, r3, r2, r3
 80075a6:	0d5b      	lsrs	r3, r3, #21
 80075a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80075ac:	fb02 f303 	mul.w	r3, r2, r3
 80075b0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075ba:	d112      	bne.n	80075e2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	9300      	str	r3, [sp, #0]
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	2200      	movs	r2, #0
 80075c4:	2180      	movs	r1, #128	; 0x80
 80075c6:	68f8      	ldr	r0, [r7, #12]
 80075c8:	f7ff ff5a 	bl	8007480 <SPI_WaitFlagStateUntilTimeout>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d016      	beq.n	8007600 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075d6:	f043 0220 	orr.w	r2, r3, #32
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80075de:	2303      	movs	r3, #3
 80075e0:	e00f      	b.n	8007602 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d00a      	beq.n	80075fe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	3b01      	subs	r3, #1
 80075ec:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075f8:	2b80      	cmp	r3, #128	; 0x80
 80075fa:	d0f2      	beq.n	80075e2 <SPI_EndRxTxTransaction+0x52>
 80075fc:	e000      	b.n	8007600 <SPI_EndRxTxTransaction+0x70>
        break;
 80075fe:	bf00      	nop
  }

  return HAL_OK;
 8007600:	2300      	movs	r3, #0
}
 8007602:	4618      	mov	r0, r3
 8007604:	3718      	adds	r7, #24
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}
 800760a:	bf00      	nop
 800760c:	20000028 	.word	0x20000028
 8007610:	165e9f81 	.word	0x165e9f81

08007614 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b082      	sub	sp, #8
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d101      	bne.n	8007626 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	e041      	b.n	80076aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800762c:	b2db      	uxtb	r3, r3
 800762e:	2b00      	cmp	r3, #0
 8007630:	d106      	bne.n	8007640 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2200      	movs	r2, #0
 8007636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 f839 	bl	80076b2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2202      	movs	r2, #2
 8007644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681a      	ldr	r2, [r3, #0]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	3304      	adds	r3, #4
 8007650:	4619      	mov	r1, r3
 8007652:	4610      	mov	r0, r2
 8007654:	f000 f9d8 	bl	8007a08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2201      	movs	r2, #1
 800765c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2201      	movs	r2, #1
 8007664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2201      	movs	r2, #1
 800766c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2201      	movs	r2, #1
 8007674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2201      	movs	r2, #1
 800767c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2201      	movs	r2, #1
 8007684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2201      	movs	r2, #1
 800768c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2201      	movs	r2, #1
 8007694:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2201      	movs	r2, #1
 800769c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80076a8:	2300      	movs	r3, #0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3708      	adds	r7, #8
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}

080076b2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80076b2:	b480      	push	{r7}
 80076b4:	b083      	sub	sp, #12
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80076ba:	bf00      	nop
 80076bc:	370c      	adds	r7, #12
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr
	...

080076c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b085      	sub	sp, #20
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d001      	beq.n	80076e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80076dc:	2301      	movs	r3, #1
 80076de:	e04e      	b.n	800777e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2202      	movs	r2, #2
 80076e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	68da      	ldr	r2, [r3, #12]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f042 0201 	orr.w	r2, r2, #1
 80076f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a23      	ldr	r2, [pc, #140]	; (800778c <HAL_TIM_Base_Start_IT+0xc4>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d022      	beq.n	8007748 <HAL_TIM_Base_Start_IT+0x80>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800770a:	d01d      	beq.n	8007748 <HAL_TIM_Base_Start_IT+0x80>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a1f      	ldr	r2, [pc, #124]	; (8007790 <HAL_TIM_Base_Start_IT+0xc8>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d018      	beq.n	8007748 <HAL_TIM_Base_Start_IT+0x80>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a1e      	ldr	r2, [pc, #120]	; (8007794 <HAL_TIM_Base_Start_IT+0xcc>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d013      	beq.n	8007748 <HAL_TIM_Base_Start_IT+0x80>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a1c      	ldr	r2, [pc, #112]	; (8007798 <HAL_TIM_Base_Start_IT+0xd0>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d00e      	beq.n	8007748 <HAL_TIM_Base_Start_IT+0x80>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a1b      	ldr	r2, [pc, #108]	; (800779c <HAL_TIM_Base_Start_IT+0xd4>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d009      	beq.n	8007748 <HAL_TIM_Base_Start_IT+0x80>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a19      	ldr	r2, [pc, #100]	; (80077a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d004      	beq.n	8007748 <HAL_TIM_Base_Start_IT+0x80>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a18      	ldr	r2, [pc, #96]	; (80077a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d111      	bne.n	800776c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	f003 0307 	and.w	r3, r3, #7
 8007752:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2b06      	cmp	r3, #6
 8007758:	d010      	beq.n	800777c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f042 0201 	orr.w	r2, r2, #1
 8007768:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800776a:	e007      	b.n	800777c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f042 0201 	orr.w	r2, r2, #1
 800777a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800777c:	2300      	movs	r3, #0
}
 800777e:	4618      	mov	r0, r3
 8007780:	3714      	adds	r7, #20
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr
 800778a:	bf00      	nop
 800778c:	40010000 	.word	0x40010000
 8007790:	40000400 	.word	0x40000400
 8007794:	40000800 	.word	0x40000800
 8007798:	40000c00 	.word	0x40000c00
 800779c:	40010400 	.word	0x40010400
 80077a0:	40014000 	.word	0x40014000
 80077a4:	40001800 	.word	0x40001800

080077a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b082      	sub	sp, #8
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	691b      	ldr	r3, [r3, #16]
 80077b6:	f003 0302 	and.w	r3, r3, #2
 80077ba:	2b02      	cmp	r3, #2
 80077bc:	d122      	bne.n	8007804 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	f003 0302 	and.w	r3, r3, #2
 80077c8:	2b02      	cmp	r3, #2
 80077ca:	d11b      	bne.n	8007804 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f06f 0202 	mvn.w	r2, #2
 80077d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2201      	movs	r2, #1
 80077da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	699b      	ldr	r3, [r3, #24]
 80077e2:	f003 0303 	and.w	r3, r3, #3
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d003      	beq.n	80077f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 f8ee 	bl	80079cc <HAL_TIM_IC_CaptureCallback>
 80077f0:	e005      	b.n	80077fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 f8e0 	bl	80079b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 f8f1 	bl	80079e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2200      	movs	r2, #0
 8007802:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	691b      	ldr	r3, [r3, #16]
 800780a:	f003 0304 	and.w	r3, r3, #4
 800780e:	2b04      	cmp	r3, #4
 8007810:	d122      	bne.n	8007858 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	f003 0304 	and.w	r3, r3, #4
 800781c:	2b04      	cmp	r3, #4
 800781e:	d11b      	bne.n	8007858 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f06f 0204 	mvn.w	r2, #4
 8007828:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2202      	movs	r2, #2
 800782e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	699b      	ldr	r3, [r3, #24]
 8007836:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800783a:	2b00      	cmp	r3, #0
 800783c:	d003      	beq.n	8007846 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 f8c4 	bl	80079cc <HAL_TIM_IC_CaptureCallback>
 8007844:	e005      	b.n	8007852 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 f8b6 	bl	80079b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 f8c7 	bl	80079e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	691b      	ldr	r3, [r3, #16]
 800785e:	f003 0308 	and.w	r3, r3, #8
 8007862:	2b08      	cmp	r3, #8
 8007864:	d122      	bne.n	80078ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	f003 0308 	and.w	r3, r3, #8
 8007870:	2b08      	cmp	r3, #8
 8007872:	d11b      	bne.n	80078ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f06f 0208 	mvn.w	r2, #8
 800787c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2204      	movs	r2, #4
 8007882:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	69db      	ldr	r3, [r3, #28]
 800788a:	f003 0303 	and.w	r3, r3, #3
 800788e:	2b00      	cmp	r3, #0
 8007890:	d003      	beq.n	800789a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 f89a 	bl	80079cc <HAL_TIM_IC_CaptureCallback>
 8007898:	e005      	b.n	80078a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 f88c 	bl	80079b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 f89d 	bl	80079e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	691b      	ldr	r3, [r3, #16]
 80078b2:	f003 0310 	and.w	r3, r3, #16
 80078b6:	2b10      	cmp	r3, #16
 80078b8:	d122      	bne.n	8007900 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	68db      	ldr	r3, [r3, #12]
 80078c0:	f003 0310 	and.w	r3, r3, #16
 80078c4:	2b10      	cmp	r3, #16
 80078c6:	d11b      	bne.n	8007900 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f06f 0210 	mvn.w	r2, #16
 80078d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2208      	movs	r2, #8
 80078d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	69db      	ldr	r3, [r3, #28]
 80078de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d003      	beq.n	80078ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 f870 	bl	80079cc <HAL_TIM_IC_CaptureCallback>
 80078ec:	e005      	b.n	80078fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 f862 	bl	80079b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 f873 	bl	80079e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2200      	movs	r2, #0
 80078fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	691b      	ldr	r3, [r3, #16]
 8007906:	f003 0301 	and.w	r3, r3, #1
 800790a:	2b01      	cmp	r3, #1
 800790c:	d10e      	bne.n	800792c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	68db      	ldr	r3, [r3, #12]
 8007914:	f003 0301 	and.w	r3, r3, #1
 8007918:	2b01      	cmp	r3, #1
 800791a:	d107      	bne.n	800792c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f06f 0201 	mvn.w	r2, #1
 8007924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f7fb feac 	bl	8003684 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	691b      	ldr	r3, [r3, #16]
 8007932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007936:	2b80      	cmp	r3, #128	; 0x80
 8007938:	d10e      	bne.n	8007958 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007944:	2b80      	cmp	r3, #128	; 0x80
 8007946:	d107      	bne.n	8007958 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 f902 	bl	8007b5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	691b      	ldr	r3, [r3, #16]
 800795e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007962:	2b40      	cmp	r3, #64	; 0x40
 8007964:	d10e      	bne.n	8007984 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	68db      	ldr	r3, [r3, #12]
 800796c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007970:	2b40      	cmp	r3, #64	; 0x40
 8007972:	d107      	bne.n	8007984 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800797c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 f838 	bl	80079f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	691b      	ldr	r3, [r3, #16]
 800798a:	f003 0320 	and.w	r3, r3, #32
 800798e:	2b20      	cmp	r3, #32
 8007990:	d10e      	bne.n	80079b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	68db      	ldr	r3, [r3, #12]
 8007998:	f003 0320 	and.w	r3, r3, #32
 800799c:	2b20      	cmp	r3, #32
 800799e:	d107      	bne.n	80079b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f06f 0220 	mvn.w	r2, #32
 80079a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 f8cc 	bl	8007b48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80079b0:	bf00      	nop
 80079b2:	3708      	adds	r7, #8
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80079c0:	bf00      	nop
 80079c2:	370c      	adds	r7, #12
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr

080079cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80079d4:	bf00      	nop
 80079d6:	370c      	adds	r7, #12
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b083      	sub	sp, #12
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80079e8:	bf00      	nop
 80079ea:	370c      	adds	r7, #12
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b083      	sub	sp, #12
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80079fc:	bf00      	nop
 80079fe:	370c      	adds	r7, #12
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b085      	sub	sp, #20
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	4a40      	ldr	r2, [pc, #256]	; (8007b1c <TIM_Base_SetConfig+0x114>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d013      	beq.n	8007a48 <TIM_Base_SetConfig+0x40>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a26:	d00f      	beq.n	8007a48 <TIM_Base_SetConfig+0x40>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	4a3d      	ldr	r2, [pc, #244]	; (8007b20 <TIM_Base_SetConfig+0x118>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d00b      	beq.n	8007a48 <TIM_Base_SetConfig+0x40>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	4a3c      	ldr	r2, [pc, #240]	; (8007b24 <TIM_Base_SetConfig+0x11c>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d007      	beq.n	8007a48 <TIM_Base_SetConfig+0x40>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	4a3b      	ldr	r2, [pc, #236]	; (8007b28 <TIM_Base_SetConfig+0x120>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d003      	beq.n	8007a48 <TIM_Base_SetConfig+0x40>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	4a3a      	ldr	r2, [pc, #232]	; (8007b2c <TIM_Base_SetConfig+0x124>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d108      	bne.n	8007a5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	68fa      	ldr	r2, [r7, #12]
 8007a56:	4313      	orrs	r3, r2
 8007a58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	4a2f      	ldr	r2, [pc, #188]	; (8007b1c <TIM_Base_SetConfig+0x114>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d02b      	beq.n	8007aba <TIM_Base_SetConfig+0xb2>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a68:	d027      	beq.n	8007aba <TIM_Base_SetConfig+0xb2>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	4a2c      	ldr	r2, [pc, #176]	; (8007b20 <TIM_Base_SetConfig+0x118>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d023      	beq.n	8007aba <TIM_Base_SetConfig+0xb2>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	4a2b      	ldr	r2, [pc, #172]	; (8007b24 <TIM_Base_SetConfig+0x11c>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d01f      	beq.n	8007aba <TIM_Base_SetConfig+0xb2>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	4a2a      	ldr	r2, [pc, #168]	; (8007b28 <TIM_Base_SetConfig+0x120>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d01b      	beq.n	8007aba <TIM_Base_SetConfig+0xb2>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	4a29      	ldr	r2, [pc, #164]	; (8007b2c <TIM_Base_SetConfig+0x124>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d017      	beq.n	8007aba <TIM_Base_SetConfig+0xb2>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	4a28      	ldr	r2, [pc, #160]	; (8007b30 <TIM_Base_SetConfig+0x128>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d013      	beq.n	8007aba <TIM_Base_SetConfig+0xb2>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	4a27      	ldr	r2, [pc, #156]	; (8007b34 <TIM_Base_SetConfig+0x12c>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d00f      	beq.n	8007aba <TIM_Base_SetConfig+0xb2>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	4a26      	ldr	r2, [pc, #152]	; (8007b38 <TIM_Base_SetConfig+0x130>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d00b      	beq.n	8007aba <TIM_Base_SetConfig+0xb2>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	4a25      	ldr	r2, [pc, #148]	; (8007b3c <TIM_Base_SetConfig+0x134>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d007      	beq.n	8007aba <TIM_Base_SetConfig+0xb2>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4a24      	ldr	r2, [pc, #144]	; (8007b40 <TIM_Base_SetConfig+0x138>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d003      	beq.n	8007aba <TIM_Base_SetConfig+0xb2>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	4a23      	ldr	r2, [pc, #140]	; (8007b44 <TIM_Base_SetConfig+0x13c>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d108      	bne.n	8007acc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ac0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	68db      	ldr	r3, [r3, #12]
 8007ac6:	68fa      	ldr	r2, [r7, #12]
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	695b      	ldr	r3, [r3, #20]
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	68fa      	ldr	r2, [r7, #12]
 8007ade:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	689a      	ldr	r2, [r3, #8]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	4a0a      	ldr	r2, [pc, #40]	; (8007b1c <TIM_Base_SetConfig+0x114>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d003      	beq.n	8007b00 <TIM_Base_SetConfig+0xf8>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	4a0c      	ldr	r2, [pc, #48]	; (8007b2c <TIM_Base_SetConfig+0x124>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d103      	bne.n	8007b08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	691a      	ldr	r2, [r3, #16]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	615a      	str	r2, [r3, #20]
}
 8007b0e:	bf00      	nop
 8007b10:	3714      	adds	r7, #20
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr
 8007b1a:	bf00      	nop
 8007b1c:	40010000 	.word	0x40010000
 8007b20:	40000400 	.word	0x40000400
 8007b24:	40000800 	.word	0x40000800
 8007b28:	40000c00 	.word	0x40000c00
 8007b2c:	40010400 	.word	0x40010400
 8007b30:	40014000 	.word	0x40014000
 8007b34:	40014400 	.word	0x40014400
 8007b38:	40014800 	.word	0x40014800
 8007b3c:	40001800 	.word	0x40001800
 8007b40:	40001c00 	.word	0x40001c00
 8007b44:	40002000 	.word	0x40002000

08007b48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b083      	sub	sp, #12
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b50:	bf00      	nop
 8007b52:	370c      	adds	r7, #12
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr

08007b5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b083      	sub	sp, #12
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b64:	bf00      	nop
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b082      	sub	sp, #8
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d101      	bne.n	8007b82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e03f      	b.n	8007c02 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d106      	bne.n	8007b9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f7fb fe48 	bl	800382c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2224      	movs	r2, #36	; 0x24
 8007ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	68da      	ldr	r2, [r3, #12]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007bb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f001 f903 	bl	8008dc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	691a      	ldr	r2, [r3, #16]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007bc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	695a      	ldr	r2, [r3, #20]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007bd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	68da      	ldr	r2, [r3, #12]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007be8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2200      	movs	r2, #0
 8007bee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2220      	movs	r2, #32
 8007bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2220      	movs	r2, #32
 8007bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3708      	adds	r7, #8
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}

08007c0a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c0a:	b580      	push	{r7, lr}
 8007c0c:	b08a      	sub	sp, #40	; 0x28
 8007c0e:	af02      	add	r7, sp, #8
 8007c10:	60f8      	str	r0, [r7, #12]
 8007c12:	60b9      	str	r1, [r7, #8]
 8007c14:	603b      	str	r3, [r7, #0]
 8007c16:	4613      	mov	r3, r2
 8007c18:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	2b20      	cmp	r3, #32
 8007c28:	d17c      	bne.n	8007d24 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d002      	beq.n	8007c36 <HAL_UART_Transmit+0x2c>
 8007c30:	88fb      	ldrh	r3, [r7, #6]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d101      	bne.n	8007c3a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007c36:	2301      	movs	r3, #1
 8007c38:	e075      	b.n	8007d26 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d101      	bne.n	8007c48 <HAL_UART_Transmit+0x3e>
 8007c44:	2302      	movs	r3, #2
 8007c46:	e06e      	b.n	8007d26 <HAL_UART_Transmit+0x11c>
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2200      	movs	r2, #0
 8007c54:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2221      	movs	r2, #33	; 0x21
 8007c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007c5e:	f7fc fc6d 	bl	800453c <HAL_GetTick>
 8007c62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	88fa      	ldrh	r2, [r7, #6]
 8007c68:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	88fa      	ldrh	r2, [r7, #6]
 8007c6e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c78:	d108      	bne.n	8007c8c <HAL_UART_Transmit+0x82>
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	691b      	ldr	r3, [r3, #16]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d104      	bne.n	8007c8c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007c82:	2300      	movs	r3, #0
 8007c84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	61bb      	str	r3, [r7, #24]
 8007c8a:	e003      	b.n	8007c94 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007c90:	2300      	movs	r3, #0
 8007c92:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2200      	movs	r2, #0
 8007c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007c9c:	e02a      	b.n	8007cf4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	9300      	str	r3, [sp, #0]
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	2180      	movs	r1, #128	; 0x80
 8007ca8:	68f8      	ldr	r0, [r7, #12]
 8007caa:	f000 fdbe 	bl	800882a <UART_WaitOnFlagUntilTimeout>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d001      	beq.n	8007cb8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007cb4:	2303      	movs	r3, #3
 8007cb6:	e036      	b.n	8007d26 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d10b      	bne.n	8007cd6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007cbe:	69bb      	ldr	r3, [r7, #24]
 8007cc0:	881b      	ldrh	r3, [r3, #0]
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ccc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007cce:	69bb      	ldr	r3, [r7, #24]
 8007cd0:	3302      	adds	r3, #2
 8007cd2:	61bb      	str	r3, [r7, #24]
 8007cd4:	e007      	b.n	8007ce6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007cd6:	69fb      	ldr	r3, [r7, #28]
 8007cd8:	781a      	ldrb	r2, [r3, #0]
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007ce0:	69fb      	ldr	r3, [r7, #28]
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	3b01      	subs	r3, #1
 8007cee:	b29a      	uxth	r2, r3
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d1cf      	bne.n	8007c9e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	9300      	str	r3, [sp, #0]
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	2200      	movs	r2, #0
 8007d06:	2140      	movs	r1, #64	; 0x40
 8007d08:	68f8      	ldr	r0, [r7, #12]
 8007d0a:	f000 fd8e 	bl	800882a <UART_WaitOnFlagUntilTimeout>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d001      	beq.n	8007d18 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007d14:	2303      	movs	r3, #3
 8007d16:	e006      	b.n	8007d26 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2220      	movs	r2, #32
 8007d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007d20:	2300      	movs	r3, #0
 8007d22:	e000      	b.n	8007d26 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007d24:	2302      	movs	r3, #2
  }
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3720      	adds	r7, #32
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}

08007d2e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d2e:	b480      	push	{r7}
 8007d30:	b085      	sub	sp, #20
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	60f8      	str	r0, [r7, #12]
 8007d36:	60b9      	str	r1, [r7, #8]
 8007d38:	4613      	mov	r3, r2
 8007d3a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	2b20      	cmp	r3, #32
 8007d46:	d130      	bne.n	8007daa <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d002      	beq.n	8007d54 <HAL_UART_Transmit_IT+0x26>
 8007d4e:	88fb      	ldrh	r3, [r7, #6]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d101      	bne.n	8007d58 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007d54:	2301      	movs	r3, #1
 8007d56:	e029      	b.n	8007dac <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	d101      	bne.n	8007d66 <HAL_UART_Transmit_IT+0x38>
 8007d62:	2302      	movs	r3, #2
 8007d64:	e022      	b.n	8007dac <HAL_UART_Transmit_IT+0x7e>
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2201      	movs	r2, #1
 8007d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	68ba      	ldr	r2, [r7, #8]
 8007d72:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	88fa      	ldrh	r2, [r7, #6]
 8007d78:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	88fa      	ldrh	r2, [r7, #6]
 8007d7e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2200      	movs	r2, #0
 8007d84:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2221      	movs	r2, #33	; 0x21
 8007d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2200      	movs	r2, #0
 8007d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	68da      	ldr	r2, [r3, #12]
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007da4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8007da6:	2300      	movs	r3, #0
 8007da8:	e000      	b.n	8007dac <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8007daa:	2302      	movs	r3, #2
  }
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3714      	adds	r7, #20
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b08c      	sub	sp, #48	; 0x30
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	60f8      	str	r0, [r7, #12]
 8007dc0:	60b9      	str	r1, [r7, #8]
 8007dc2:	4613      	mov	r3, r2
 8007dc4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dcc:	b2db      	uxtb	r3, r3
 8007dce:	2b20      	cmp	r3, #32
 8007dd0:	d165      	bne.n	8007e9e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d002      	beq.n	8007dde <HAL_UART_Transmit_DMA+0x26>
 8007dd8:	88fb      	ldrh	r3, [r7, #6]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d101      	bne.n	8007de2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007dde:	2301      	movs	r3, #1
 8007de0:	e05e      	b.n	8007ea0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d101      	bne.n	8007df0 <HAL_UART_Transmit_DMA+0x38>
 8007dec:	2302      	movs	r3, #2
 8007dee:	e057      	b.n	8007ea0 <HAL_UART_Transmit_DMA+0xe8>
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007df8:	68ba      	ldr	r2, [r7, #8]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	88fa      	ldrh	r2, [r7, #6]
 8007e02:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	88fa      	ldrh	r2, [r7, #6]
 8007e08:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2221      	movs	r2, #33	; 0x21
 8007e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e1c:	4a22      	ldr	r2, [pc, #136]	; (8007ea8 <HAL_UART_Transmit_DMA+0xf0>)
 8007e1e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e24:	4a21      	ldr	r2, [pc, #132]	; (8007eac <HAL_UART_Transmit_DMA+0xf4>)
 8007e26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e2c:	4a20      	ldr	r2, [pc, #128]	; (8007eb0 <HAL_UART_Transmit_DMA+0xf8>)
 8007e2e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e34:	2200      	movs	r2, #0
 8007e36:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8007e38:	f107 0308 	add.w	r3, r7, #8
 8007e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e44:	6819      	ldr	r1, [r3, #0]
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	3304      	adds	r3, #4
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	88fb      	ldrh	r3, [r7, #6]
 8007e50:	f7fc fd50 	bl	80048f4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007e5c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2200      	movs	r2, #0
 8007e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	3314      	adds	r3, #20
 8007e6c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e6e:	69bb      	ldr	r3, [r7, #24]
 8007e70:	e853 3f00 	ldrex	r3, [r3]
 8007e74:	617b      	str	r3, [r7, #20]
   return(result);
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	3314      	adds	r3, #20
 8007e84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e86:	627a      	str	r2, [r7, #36]	; 0x24
 8007e88:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e8a:	6a39      	ldr	r1, [r7, #32]
 8007e8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e8e:	e841 2300 	strex	r3, r2, [r1]
 8007e92:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e94:	69fb      	ldr	r3, [r7, #28]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d1e5      	bne.n	8007e66 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	e000      	b.n	8007ea0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8007e9e:	2302      	movs	r3, #2
  }
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3730      	adds	r7, #48	; 0x30
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}
 8007ea8:	08008585 	.word	0x08008585
 8007eac:	0800861f 	.word	0x0800861f
 8007eb0:	08008797 	.word	0x08008797

08007eb4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	60f8      	str	r0, [r7, #12]
 8007ebc:	60b9      	str	r1, [r7, #8]
 8007ebe:	4613      	mov	r3, r2
 8007ec0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	2b20      	cmp	r3, #32
 8007ecc:	d11d      	bne.n	8007f0a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d002      	beq.n	8007eda <HAL_UART_Receive_DMA+0x26>
 8007ed4:	88fb      	ldrh	r3, [r7, #6]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d101      	bne.n	8007ede <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	e016      	b.n	8007f0c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d101      	bne.n	8007eec <HAL_UART_Receive_DMA+0x38>
 8007ee8:	2302      	movs	r3, #2
 8007eea:	e00f      	b.n	8007f0c <HAL_UART_Receive_DMA+0x58>
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007efa:	88fb      	ldrh	r3, [r7, #6]
 8007efc:	461a      	mov	r2, r3
 8007efe:	68b9      	ldr	r1, [r7, #8]
 8007f00:	68f8      	ldr	r0, [r7, #12]
 8007f02:	f000 fd01 	bl	8008908 <UART_Start_Receive_DMA>
 8007f06:	4603      	mov	r3, r0
 8007f08:	e000      	b.n	8007f0c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007f0a:	2302      	movs	r3, #2
  }
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3710      	adds	r7, #16
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b090      	sub	sp, #64	; 0x40
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	695b      	ldr	r3, [r3, #20]
 8007f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f2a:	2b80      	cmp	r3, #128	; 0x80
 8007f2c:	bf0c      	ite	eq
 8007f2e:	2301      	moveq	r3, #1
 8007f30:	2300      	movne	r3, #0
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	2b21      	cmp	r3, #33	; 0x21
 8007f40:	d128      	bne.n	8007f94 <HAL_UART_DMAStop+0x80>
 8007f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d025      	beq.n	8007f94 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	3314      	adds	r3, #20
 8007f4e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f52:	e853 3f00 	ldrex	r3, [r3]
 8007f56:	623b      	str	r3, [r7, #32]
   return(result);
 8007f58:	6a3b      	ldr	r3, [r7, #32]
 8007f5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	3314      	adds	r3, #20
 8007f66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f68:	633a      	str	r2, [r7, #48]	; 0x30
 8007f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f70:	e841 2300 	strex	r3, r2, [r1]
 8007f74:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d1e5      	bne.n	8007f48 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d004      	beq.n	8007f8e <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f7fc fd0b 	bl	80049a4 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 fd54 	bl	8008a3c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	695b      	ldr	r3, [r3, #20]
 8007f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f9e:	2b40      	cmp	r3, #64	; 0x40
 8007fa0:	bf0c      	ite	eq
 8007fa2:	2301      	moveq	r3, #1
 8007fa4:	2300      	movne	r3, #0
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	2b22      	cmp	r3, #34	; 0x22
 8007fb4:	d128      	bne.n	8008008 <HAL_UART_DMAStop+0xf4>
 8007fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d025      	beq.n	8008008 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	3314      	adds	r3, #20
 8007fc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	e853 3f00 	ldrex	r3, [r3]
 8007fca:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fd2:	637b      	str	r3, [r7, #52]	; 0x34
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	3314      	adds	r3, #20
 8007fda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007fdc:	61fa      	str	r2, [r7, #28]
 8007fde:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe0:	69b9      	ldr	r1, [r7, #24]
 8007fe2:	69fa      	ldr	r2, [r7, #28]
 8007fe4:	e841 2300 	strex	r3, r2, [r1]
 8007fe8:	617b      	str	r3, [r7, #20]
   return(result);
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d1e5      	bne.n	8007fbc <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d004      	beq.n	8008002 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f7fc fcd1 	bl	80049a4 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 fd42 	bl	8008a8c <UART_EndRxTransfer>
  }

  return HAL_OK;
 8008008:	2300      	movs	r3, #0
}
 800800a:	4618      	mov	r0, r3
 800800c:	3740      	adds	r7, #64	; 0x40
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}
	...

08008014 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b0ba      	sub	sp, #232	; 0xe8
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	68db      	ldr	r3, [r3, #12]
 800802c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	695b      	ldr	r3, [r3, #20]
 8008036:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800803a:	2300      	movs	r3, #0
 800803c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008040:	2300      	movs	r3, #0
 8008042:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800804a:	f003 030f 	and.w	r3, r3, #15
 800804e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008052:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008056:	2b00      	cmp	r3, #0
 8008058:	d10f      	bne.n	800807a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800805a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800805e:	f003 0320 	and.w	r3, r3, #32
 8008062:	2b00      	cmp	r3, #0
 8008064:	d009      	beq.n	800807a <HAL_UART_IRQHandler+0x66>
 8008066:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800806a:	f003 0320 	and.w	r3, r3, #32
 800806e:	2b00      	cmp	r3, #0
 8008070:	d003      	beq.n	800807a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 fde9 	bl	8008c4a <UART_Receive_IT>
      return;
 8008078:	e256      	b.n	8008528 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800807a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800807e:	2b00      	cmp	r3, #0
 8008080:	f000 80de 	beq.w	8008240 <HAL_UART_IRQHandler+0x22c>
 8008084:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008088:	f003 0301 	and.w	r3, r3, #1
 800808c:	2b00      	cmp	r3, #0
 800808e:	d106      	bne.n	800809e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008090:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008094:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008098:	2b00      	cmp	r3, #0
 800809a:	f000 80d1 	beq.w	8008240 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800809e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080a2:	f003 0301 	and.w	r3, r3, #1
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d00b      	beq.n	80080c2 <HAL_UART_IRQHandler+0xae>
 80080aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d005      	beq.n	80080c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ba:	f043 0201 	orr.w	r2, r3, #1
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80080c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080c6:	f003 0304 	and.w	r3, r3, #4
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d00b      	beq.n	80080e6 <HAL_UART_IRQHandler+0xd2>
 80080ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080d2:	f003 0301 	and.w	r3, r3, #1
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d005      	beq.n	80080e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080de:	f043 0202 	orr.w	r2, r3, #2
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80080e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080ea:	f003 0302 	and.w	r3, r3, #2
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d00b      	beq.n	800810a <HAL_UART_IRQHandler+0xf6>
 80080f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080f6:	f003 0301 	and.w	r3, r3, #1
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d005      	beq.n	800810a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008102:	f043 0204 	orr.w	r2, r3, #4
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800810a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800810e:	f003 0308 	and.w	r3, r3, #8
 8008112:	2b00      	cmp	r3, #0
 8008114:	d011      	beq.n	800813a <HAL_UART_IRQHandler+0x126>
 8008116:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800811a:	f003 0320 	and.w	r3, r3, #32
 800811e:	2b00      	cmp	r3, #0
 8008120:	d105      	bne.n	800812e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008122:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008126:	f003 0301 	and.w	r3, r3, #1
 800812a:	2b00      	cmp	r3, #0
 800812c:	d005      	beq.n	800813a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008132:	f043 0208 	orr.w	r2, r3, #8
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800813e:	2b00      	cmp	r3, #0
 8008140:	f000 81ed 	beq.w	800851e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008148:	f003 0320 	and.w	r3, r3, #32
 800814c:	2b00      	cmp	r3, #0
 800814e:	d008      	beq.n	8008162 <HAL_UART_IRQHandler+0x14e>
 8008150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008154:	f003 0320 	and.w	r3, r3, #32
 8008158:	2b00      	cmp	r3, #0
 800815a:	d002      	beq.n	8008162 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 fd74 	bl	8008c4a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	695b      	ldr	r3, [r3, #20]
 8008168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800816c:	2b40      	cmp	r3, #64	; 0x40
 800816e:	bf0c      	ite	eq
 8008170:	2301      	moveq	r3, #1
 8008172:	2300      	movne	r3, #0
 8008174:	b2db      	uxtb	r3, r3
 8008176:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800817e:	f003 0308 	and.w	r3, r3, #8
 8008182:	2b00      	cmp	r3, #0
 8008184:	d103      	bne.n	800818e <HAL_UART_IRQHandler+0x17a>
 8008186:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800818a:	2b00      	cmp	r3, #0
 800818c:	d04f      	beq.n	800822e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 fc7c 	bl	8008a8c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	695b      	ldr	r3, [r3, #20]
 800819a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800819e:	2b40      	cmp	r3, #64	; 0x40
 80081a0:	d141      	bne.n	8008226 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	3314      	adds	r3, #20
 80081a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80081b0:	e853 3f00 	ldrex	r3, [r3]
 80081b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80081b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80081bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	3314      	adds	r3, #20
 80081ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80081ce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80081d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80081da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80081de:	e841 2300 	strex	r3, r2, [r1]
 80081e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80081e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d1d9      	bne.n	80081a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d013      	beq.n	800821e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081fa:	4a7d      	ldr	r2, [pc, #500]	; (80083f0 <HAL_UART_IRQHandler+0x3dc>)
 80081fc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008202:	4618      	mov	r0, r3
 8008204:	f7fc fc3e 	bl	8004a84 <HAL_DMA_Abort_IT>
 8008208:	4603      	mov	r3, r0
 800820a:	2b00      	cmp	r3, #0
 800820c:	d016      	beq.n	800823c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008214:	687a      	ldr	r2, [r7, #4]
 8008216:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008218:	4610      	mov	r0, r2
 800821a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800821c:	e00e      	b.n	800823c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 f99a 	bl	8008558 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008224:	e00a      	b.n	800823c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 f996 	bl	8008558 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800822c:	e006      	b.n	800823c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 f992 	bl	8008558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800823a:	e170      	b.n	800851e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800823c:	bf00      	nop
    return;
 800823e:	e16e      	b.n	800851e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008244:	2b01      	cmp	r3, #1
 8008246:	f040 814a 	bne.w	80084de <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800824a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800824e:	f003 0310 	and.w	r3, r3, #16
 8008252:	2b00      	cmp	r3, #0
 8008254:	f000 8143 	beq.w	80084de <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800825c:	f003 0310 	and.w	r3, r3, #16
 8008260:	2b00      	cmp	r3, #0
 8008262:	f000 813c 	beq.w	80084de <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008266:	2300      	movs	r3, #0
 8008268:	60bb      	str	r3, [r7, #8]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	60bb      	str	r3, [r7, #8]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	60bb      	str	r3, [r7, #8]
 800827a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	695b      	ldr	r3, [r3, #20]
 8008282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008286:	2b40      	cmp	r3, #64	; 0x40
 8008288:	f040 80b4 	bne.w	80083f4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008298:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800829c:	2b00      	cmp	r3, #0
 800829e:	f000 8140 	beq.w	8008522 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80082a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80082aa:	429a      	cmp	r2, r3
 80082ac:	f080 8139 	bcs.w	8008522 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80082b6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082bc:	69db      	ldr	r3, [r3, #28]
 80082be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082c2:	f000 8088 	beq.w	80083d6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	330c      	adds	r3, #12
 80082cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80082d4:	e853 3f00 	ldrex	r3, [r3]
 80082d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80082dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80082e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	330c      	adds	r3, #12
 80082ee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80082f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80082f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80082fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008302:	e841 2300 	strex	r3, r2, [r1]
 8008306:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800830a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800830e:	2b00      	cmp	r3, #0
 8008310:	d1d9      	bne.n	80082c6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	3314      	adds	r3, #20
 8008318:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800831a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800831c:	e853 3f00 	ldrex	r3, [r3]
 8008320:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008322:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008324:	f023 0301 	bic.w	r3, r3, #1
 8008328:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	3314      	adds	r3, #20
 8008332:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008336:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800833a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800833c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800833e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008342:	e841 2300 	strex	r3, r2, [r1]
 8008346:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008348:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800834a:	2b00      	cmp	r3, #0
 800834c:	d1e1      	bne.n	8008312 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	3314      	adds	r3, #20
 8008354:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008356:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008358:	e853 3f00 	ldrex	r3, [r3]
 800835c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800835e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008360:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008364:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	3314      	adds	r3, #20
 800836e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008372:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008374:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008376:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008378:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800837a:	e841 2300 	strex	r3, r2, [r1]
 800837e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008380:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008382:	2b00      	cmp	r3, #0
 8008384:	d1e3      	bne.n	800834e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2220      	movs	r2, #32
 800838a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2200      	movs	r2, #0
 8008392:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	330c      	adds	r3, #12
 800839a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800839c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800839e:	e853 3f00 	ldrex	r3, [r3]
 80083a2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80083a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083a6:	f023 0310 	bic.w	r3, r3, #16
 80083aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	330c      	adds	r3, #12
 80083b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80083b8:	65ba      	str	r2, [r7, #88]	; 0x58
 80083ba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80083be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80083c0:	e841 2300 	strex	r3, r2, [r1]
 80083c4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80083c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d1e3      	bne.n	8008394 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083d0:	4618      	mov	r0, r3
 80083d2:	f7fc fae7 	bl	80049a4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80083de:	b29b      	uxth	r3, r3
 80083e0:	1ad3      	subs	r3, r2, r3
 80083e2:	b29b      	uxth	r3, r3
 80083e4:	4619      	mov	r1, r3
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 f8c0 	bl	800856c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80083ec:	e099      	b.n	8008522 <HAL_UART_IRQHandler+0x50e>
 80083ee:	bf00      	nop
 80083f0:	08008b53 	.word	0x08008b53
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	1ad3      	subs	r3, r2, r3
 8008400:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008408:	b29b      	uxth	r3, r3
 800840a:	2b00      	cmp	r3, #0
 800840c:	f000 808b 	beq.w	8008526 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008410:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008414:	2b00      	cmp	r3, #0
 8008416:	f000 8086 	beq.w	8008526 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	330c      	adds	r3, #12
 8008420:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008424:	e853 3f00 	ldrex	r3, [r3]
 8008428:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800842a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800842c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008430:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	330c      	adds	r3, #12
 800843a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800843e:	647a      	str	r2, [r7, #68]	; 0x44
 8008440:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008442:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008444:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008446:	e841 2300 	strex	r3, r2, [r1]
 800844a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800844c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800844e:	2b00      	cmp	r3, #0
 8008450:	d1e3      	bne.n	800841a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	3314      	adds	r3, #20
 8008458:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800845a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845c:	e853 3f00 	ldrex	r3, [r3]
 8008460:	623b      	str	r3, [r7, #32]
   return(result);
 8008462:	6a3b      	ldr	r3, [r7, #32]
 8008464:	f023 0301 	bic.w	r3, r3, #1
 8008468:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	3314      	adds	r3, #20
 8008472:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008476:	633a      	str	r2, [r7, #48]	; 0x30
 8008478:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800847a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800847c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800847e:	e841 2300 	strex	r3, r2, [r1]
 8008482:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008486:	2b00      	cmp	r3, #0
 8008488:	d1e3      	bne.n	8008452 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2220      	movs	r2, #32
 800848e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2200      	movs	r2, #0
 8008496:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	330c      	adds	r3, #12
 800849e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	e853 3f00 	ldrex	r3, [r3]
 80084a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f023 0310 	bic.w	r3, r3, #16
 80084ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	330c      	adds	r3, #12
 80084b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80084bc:	61fa      	str	r2, [r7, #28]
 80084be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c0:	69b9      	ldr	r1, [r7, #24]
 80084c2:	69fa      	ldr	r2, [r7, #28]
 80084c4:	e841 2300 	strex	r3, r2, [r1]
 80084c8:	617b      	str	r3, [r7, #20]
   return(result);
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d1e3      	bne.n	8008498 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80084d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80084d4:	4619      	mov	r1, r3
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f000 f848 	bl	800856c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80084dc:	e023      	b.n	8008526 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80084de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d009      	beq.n	80084fe <HAL_UART_IRQHandler+0x4ea>
 80084ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d003      	beq.n	80084fe <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 fb3f 	bl	8008b7a <UART_Transmit_IT>
    return;
 80084fc:	e014      	b.n	8008528 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80084fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008506:	2b00      	cmp	r3, #0
 8008508:	d00e      	beq.n	8008528 <HAL_UART_IRQHandler+0x514>
 800850a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800850e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008512:	2b00      	cmp	r3, #0
 8008514:	d008      	beq.n	8008528 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 fb7f 	bl	8008c1a <UART_EndTransmit_IT>
    return;
 800851c:	e004      	b.n	8008528 <HAL_UART_IRQHandler+0x514>
    return;
 800851e:	bf00      	nop
 8008520:	e002      	b.n	8008528 <HAL_UART_IRQHandler+0x514>
      return;
 8008522:	bf00      	nop
 8008524:	e000      	b.n	8008528 <HAL_UART_IRQHandler+0x514>
      return;
 8008526:	bf00      	nop
  }
}
 8008528:	37e8      	adds	r7, #232	; 0xe8
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop

08008530 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008530:	b480      	push	{r7}
 8008532:	b083      	sub	sp, #12
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008538:	bf00      	nop
 800853a:	370c      	adds	r7, #12
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr

08008544 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800854c:	bf00      	nop
 800854e:	370c      	adds	r7, #12
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008560:	bf00      	nop
 8008562:	370c      	adds	r7, #12
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr

0800856c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	460b      	mov	r3, r1
 8008576:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008578:	bf00      	nop
 800857a:	370c      	adds	r7, #12
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr

08008584 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b090      	sub	sp, #64	; 0x40
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008590:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800859c:	2b00      	cmp	r3, #0
 800859e:	d137      	bne.n	8008610 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80085a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085a2:	2200      	movs	r2, #0
 80085a4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80085a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	3314      	adds	r3, #20
 80085ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b0:	e853 3f00 	ldrex	r3, [r3]
 80085b4:	623b      	str	r3, [r7, #32]
   return(result);
 80085b6:	6a3b      	ldr	r3, [r7, #32]
 80085b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80085be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	3314      	adds	r3, #20
 80085c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085c6:	633a      	str	r2, [r7, #48]	; 0x30
 80085c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80085cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085ce:	e841 2300 	strex	r3, r2, [r1]
 80085d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80085d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d1e5      	bne.n	80085a6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80085da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	330c      	adds	r3, #12
 80085e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	e853 3f00 	ldrex	r3, [r3]
 80085e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085f0:	637b      	str	r3, [r7, #52]	; 0x34
 80085f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	330c      	adds	r3, #12
 80085f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80085fa:	61fa      	str	r2, [r7, #28]
 80085fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085fe:	69b9      	ldr	r1, [r7, #24]
 8008600:	69fa      	ldr	r2, [r7, #28]
 8008602:	e841 2300 	strex	r3, r2, [r1]
 8008606:	617b      	str	r3, [r7, #20]
   return(result);
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d1e5      	bne.n	80085da <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800860e:	e002      	b.n	8008616 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008610:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008612:	f7f8 ffbf 	bl	8001594 <HAL_UART_TxCpltCallback>
}
 8008616:	bf00      	nop
 8008618:	3740      	adds	r7, #64	; 0x40
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}

0800861e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800861e:	b580      	push	{r7, lr}
 8008620:	b084      	sub	sp, #16
 8008622:	af00      	add	r7, sp, #0
 8008624:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800862a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800862c:	68f8      	ldr	r0, [r7, #12]
 800862e:	f7ff ff7f 	bl	8008530 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008632:	bf00      	nop
 8008634:	3710      	adds	r7, #16
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}

0800863a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800863a:	b580      	push	{r7, lr}
 800863c:	b09c      	sub	sp, #112	; 0x70
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008646:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008652:	2b00      	cmp	r3, #0
 8008654:	d172      	bne.n	800873c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008656:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008658:	2200      	movs	r2, #0
 800865a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800865c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	330c      	adds	r3, #12
 8008662:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008664:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008666:	e853 3f00 	ldrex	r3, [r3]
 800866a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800866c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800866e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008672:	66bb      	str	r3, [r7, #104]	; 0x68
 8008674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	330c      	adds	r3, #12
 800867a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800867c:	65ba      	str	r2, [r7, #88]	; 0x58
 800867e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008680:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008682:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008684:	e841 2300 	strex	r3, r2, [r1]
 8008688:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800868a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800868c:	2b00      	cmp	r3, #0
 800868e:	d1e5      	bne.n	800865c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008690:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	3314      	adds	r3, #20
 8008696:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800869a:	e853 3f00 	ldrex	r3, [r3]
 800869e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80086a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086a2:	f023 0301 	bic.w	r3, r3, #1
 80086a6:	667b      	str	r3, [r7, #100]	; 0x64
 80086a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	3314      	adds	r3, #20
 80086ae:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80086b0:	647a      	str	r2, [r7, #68]	; 0x44
 80086b2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80086b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086b8:	e841 2300 	strex	r3, r2, [r1]
 80086bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80086be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d1e5      	bne.n	8008690 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	3314      	adds	r3, #20
 80086ca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ce:	e853 3f00 	ldrex	r3, [r3]
 80086d2:	623b      	str	r3, [r7, #32]
   return(result);
 80086d4:	6a3b      	ldr	r3, [r7, #32]
 80086d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086da:	663b      	str	r3, [r7, #96]	; 0x60
 80086dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	3314      	adds	r3, #20
 80086e2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80086e4:	633a      	str	r2, [r7, #48]	; 0x30
 80086e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80086ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086ec:	e841 2300 	strex	r3, r2, [r1]
 80086f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80086f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d1e5      	bne.n	80086c4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80086f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086fa:	2220      	movs	r2, #32
 80086fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008704:	2b01      	cmp	r3, #1
 8008706:	d119      	bne.n	800873c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008708:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	330c      	adds	r3, #12
 800870e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	e853 3f00 	ldrex	r3, [r3]
 8008716:	60fb      	str	r3, [r7, #12]
   return(result);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f023 0310 	bic.w	r3, r3, #16
 800871e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008720:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	330c      	adds	r3, #12
 8008726:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008728:	61fa      	str	r2, [r7, #28]
 800872a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800872c:	69b9      	ldr	r1, [r7, #24]
 800872e:	69fa      	ldr	r2, [r7, #28]
 8008730:	e841 2300 	strex	r3, r2, [r1]
 8008734:	617b      	str	r3, [r7, #20]
   return(result);
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d1e5      	bne.n	8008708 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800873c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800873e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008740:	2b01      	cmp	r3, #1
 8008742:	d106      	bne.n	8008752 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008744:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008746:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008748:	4619      	mov	r1, r3
 800874a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800874c:	f7ff ff0e 	bl	800856c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008750:	e002      	b.n	8008758 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8008752:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008754:	f7f8 ff08 	bl	8001568 <HAL_UART_RxCpltCallback>
}
 8008758:	bf00      	nop
 800875a:	3770      	adds	r7, #112	; 0x70
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}

08008760 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b084      	sub	sp, #16
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800876c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008772:	2b01      	cmp	r3, #1
 8008774:	d108      	bne.n	8008788 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800877a:	085b      	lsrs	r3, r3, #1
 800877c:	b29b      	uxth	r3, r3
 800877e:	4619      	mov	r1, r3
 8008780:	68f8      	ldr	r0, [r7, #12]
 8008782:	f7ff fef3 	bl	800856c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008786:	e002      	b.n	800878e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008788:	68f8      	ldr	r0, [r7, #12]
 800878a:	f7ff fedb 	bl	8008544 <HAL_UART_RxHalfCpltCallback>
}
 800878e:	bf00      	nop
 8008790:	3710      	adds	r7, #16
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}

08008796 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008796:	b580      	push	{r7, lr}
 8008798:	b084      	sub	sp, #16
 800879a:	af00      	add	r7, sp, #0
 800879c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800879e:	2300      	movs	r3, #0
 80087a0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087a6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	695b      	ldr	r3, [r3, #20]
 80087ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087b2:	2b80      	cmp	r3, #128	; 0x80
 80087b4:	bf0c      	ite	eq
 80087b6:	2301      	moveq	r3, #1
 80087b8:	2300      	movne	r3, #0
 80087ba:	b2db      	uxtb	r3, r3
 80087bc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087c4:	b2db      	uxtb	r3, r3
 80087c6:	2b21      	cmp	r3, #33	; 0x21
 80087c8:	d108      	bne.n	80087dc <UART_DMAError+0x46>
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d005      	beq.n	80087dc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	2200      	movs	r2, #0
 80087d4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80087d6:	68b8      	ldr	r0, [r7, #8]
 80087d8:	f000 f930 	bl	8008a3c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	695b      	ldr	r3, [r3, #20]
 80087e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087e6:	2b40      	cmp	r3, #64	; 0x40
 80087e8:	bf0c      	ite	eq
 80087ea:	2301      	moveq	r3, #1
 80087ec:	2300      	movne	r3, #0
 80087ee:	b2db      	uxtb	r3, r3
 80087f0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80087f8:	b2db      	uxtb	r3, r3
 80087fa:	2b22      	cmp	r3, #34	; 0x22
 80087fc:	d108      	bne.n	8008810 <UART_DMAError+0x7a>
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d005      	beq.n	8008810 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	2200      	movs	r2, #0
 8008808:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800880a:	68b8      	ldr	r0, [r7, #8]
 800880c:	f000 f93e 	bl	8008a8c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008814:	f043 0210 	orr.w	r2, r3, #16
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800881c:	68b8      	ldr	r0, [r7, #8]
 800881e:	f7ff fe9b 	bl	8008558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008822:	bf00      	nop
 8008824:	3710      	adds	r7, #16
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}

0800882a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800882a:	b580      	push	{r7, lr}
 800882c:	b090      	sub	sp, #64	; 0x40
 800882e:	af00      	add	r7, sp, #0
 8008830:	60f8      	str	r0, [r7, #12]
 8008832:	60b9      	str	r1, [r7, #8]
 8008834:	603b      	str	r3, [r7, #0]
 8008836:	4613      	mov	r3, r2
 8008838:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800883a:	e050      	b.n	80088de <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800883c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800883e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008842:	d04c      	beq.n	80088de <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008844:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008846:	2b00      	cmp	r3, #0
 8008848:	d007      	beq.n	800885a <UART_WaitOnFlagUntilTimeout+0x30>
 800884a:	f7fb fe77 	bl	800453c <HAL_GetTick>
 800884e:	4602      	mov	r2, r0
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	1ad3      	subs	r3, r2, r3
 8008854:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008856:	429a      	cmp	r2, r3
 8008858:	d241      	bcs.n	80088de <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	330c      	adds	r3, #12
 8008860:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008864:	e853 3f00 	ldrex	r3, [r3]
 8008868:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800886a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008870:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	330c      	adds	r3, #12
 8008878:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800887a:	637a      	str	r2, [r7, #52]	; 0x34
 800887c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800887e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008880:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008882:	e841 2300 	strex	r3, r2, [r1]
 8008886:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800888a:	2b00      	cmp	r3, #0
 800888c:	d1e5      	bne.n	800885a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	3314      	adds	r3, #20
 8008894:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	e853 3f00 	ldrex	r3, [r3]
 800889c:	613b      	str	r3, [r7, #16]
   return(result);
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	f023 0301 	bic.w	r3, r3, #1
 80088a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	3314      	adds	r3, #20
 80088ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80088ae:	623a      	str	r2, [r7, #32]
 80088b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b2:	69f9      	ldr	r1, [r7, #28]
 80088b4:	6a3a      	ldr	r2, [r7, #32]
 80088b6:	e841 2300 	strex	r3, r2, [r1]
 80088ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80088bc:	69bb      	ldr	r3, [r7, #24]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d1e5      	bne.n	800888e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2220      	movs	r2, #32
 80088c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2220      	movs	r2, #32
 80088ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2200      	movs	r2, #0
 80088d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80088da:	2303      	movs	r3, #3
 80088dc:	e00f      	b.n	80088fe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	681a      	ldr	r2, [r3, #0]
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	4013      	ands	r3, r2
 80088e8:	68ba      	ldr	r2, [r7, #8]
 80088ea:	429a      	cmp	r2, r3
 80088ec:	bf0c      	ite	eq
 80088ee:	2301      	moveq	r3, #1
 80088f0:	2300      	movne	r3, #0
 80088f2:	b2db      	uxtb	r3, r3
 80088f4:	461a      	mov	r2, r3
 80088f6:	79fb      	ldrb	r3, [r7, #7]
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d09f      	beq.n	800883c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80088fc:	2300      	movs	r3, #0
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3740      	adds	r7, #64	; 0x40
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}
	...

08008908 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b098      	sub	sp, #96	; 0x60
 800890c:	af00      	add	r7, sp, #0
 800890e:	60f8      	str	r0, [r7, #12]
 8008910:	60b9      	str	r1, [r7, #8]
 8008912:	4613      	mov	r3, r2
 8008914:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008916:	68ba      	ldr	r2, [r7, #8]
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	88fa      	ldrh	r2, [r7, #6]
 8008920:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2200      	movs	r2, #0
 8008926:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2222      	movs	r2, #34	; 0x22
 800892c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008934:	4a3e      	ldr	r2, [pc, #248]	; (8008a30 <UART_Start_Receive_DMA+0x128>)
 8008936:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800893c:	4a3d      	ldr	r2, [pc, #244]	; (8008a34 <UART_Start_Receive_DMA+0x12c>)
 800893e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008944:	4a3c      	ldr	r2, [pc, #240]	; (8008a38 <UART_Start_Receive_DMA+0x130>)
 8008946:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800894c:	2200      	movs	r2, #0
 800894e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008950:	f107 0308 	add.w	r3, r7, #8
 8008954:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	3304      	adds	r3, #4
 8008960:	4619      	mov	r1, r3
 8008962:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008964:	681a      	ldr	r2, [r3, #0]
 8008966:	88fb      	ldrh	r3, [r7, #6]
 8008968:	f7fb ffc4 	bl	80048f4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800896c:	2300      	movs	r3, #0
 800896e:	613b      	str	r3, [r7, #16]
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	613b      	str	r3, [r7, #16]
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	613b      	str	r3, [r7, #16]
 8008980:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2200      	movs	r2, #0
 8008986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	330c      	adds	r3, #12
 8008990:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008992:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008994:	e853 3f00 	ldrex	r3, [r3]
 8008998:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800899a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800899c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	330c      	adds	r3, #12
 80089a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80089aa:	64fa      	str	r2, [r7, #76]	; 0x4c
 80089ac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ae:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80089b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80089b2:	e841 2300 	strex	r3, r2, [r1]
 80089b6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80089b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d1e5      	bne.n	800898a <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	3314      	adds	r3, #20
 80089c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089c8:	e853 3f00 	ldrex	r3, [r3]
 80089cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80089ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d0:	f043 0301 	orr.w	r3, r3, #1
 80089d4:	657b      	str	r3, [r7, #84]	; 0x54
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	3314      	adds	r3, #20
 80089dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80089de:	63ba      	str	r2, [r7, #56]	; 0x38
 80089e0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089e2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80089e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80089e6:	e841 2300 	strex	r3, r2, [r1]
 80089ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80089ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d1e5      	bne.n	80089be <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	3314      	adds	r3, #20
 80089f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089fa:	69bb      	ldr	r3, [r7, #24]
 80089fc:	e853 3f00 	ldrex	r3, [r3]
 8008a00:	617b      	str	r3, [r7, #20]
   return(result);
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a08:	653b      	str	r3, [r7, #80]	; 0x50
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	3314      	adds	r3, #20
 8008a10:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008a12:	627a      	str	r2, [r7, #36]	; 0x24
 8008a14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a16:	6a39      	ldr	r1, [r7, #32]
 8008a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a1a:	e841 2300 	strex	r3, r2, [r1]
 8008a1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a20:	69fb      	ldr	r3, [r7, #28]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d1e5      	bne.n	80089f2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8008a26:	2300      	movs	r3, #0
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3760      	adds	r7, #96	; 0x60
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}
 8008a30:	0800863b 	.word	0x0800863b
 8008a34:	08008761 	.word	0x08008761
 8008a38:	08008797 	.word	0x08008797

08008a3c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b089      	sub	sp, #36	; 0x24
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	330c      	adds	r3, #12
 8008a4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	e853 3f00 	ldrex	r3, [r3]
 8008a52:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008a5a:	61fb      	str	r3, [r7, #28]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	330c      	adds	r3, #12
 8008a62:	69fa      	ldr	r2, [r7, #28]
 8008a64:	61ba      	str	r2, [r7, #24]
 8008a66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a68:	6979      	ldr	r1, [r7, #20]
 8008a6a:	69ba      	ldr	r2, [r7, #24]
 8008a6c:	e841 2300 	strex	r3, r2, [r1]
 8008a70:	613b      	str	r3, [r7, #16]
   return(result);
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d1e5      	bne.n	8008a44 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2220      	movs	r2, #32
 8008a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008a80:	bf00      	nop
 8008a82:	3724      	adds	r7, #36	; 0x24
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr

08008a8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b095      	sub	sp, #84	; 0x54
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	330c      	adds	r3, #12
 8008a9a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a9e:	e853 3f00 	ldrex	r3, [r3]
 8008aa2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	330c      	adds	r3, #12
 8008ab2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008ab4:	643a      	str	r2, [r7, #64]	; 0x40
 8008ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ab8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008aba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008abc:	e841 2300 	strex	r3, r2, [r1]
 8008ac0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d1e5      	bne.n	8008a94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	3314      	adds	r3, #20
 8008ace:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad0:	6a3b      	ldr	r3, [r7, #32]
 8008ad2:	e853 3f00 	ldrex	r3, [r3]
 8008ad6:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ad8:	69fb      	ldr	r3, [r7, #28]
 8008ada:	f023 0301 	bic.w	r3, r3, #1
 8008ade:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	3314      	adds	r3, #20
 8008ae6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ae8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008aea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008aee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008af0:	e841 2300 	strex	r3, r2, [r1]
 8008af4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d1e5      	bne.n	8008ac8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d119      	bne.n	8008b38 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	330c      	adds	r3, #12
 8008b0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	e853 3f00 	ldrex	r3, [r3]
 8008b12:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	f023 0310 	bic.w	r3, r3, #16
 8008b1a:	647b      	str	r3, [r7, #68]	; 0x44
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	330c      	adds	r3, #12
 8008b22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b24:	61ba      	str	r2, [r7, #24]
 8008b26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b28:	6979      	ldr	r1, [r7, #20]
 8008b2a:	69ba      	ldr	r2, [r7, #24]
 8008b2c:	e841 2300 	strex	r3, r2, [r1]
 8008b30:	613b      	str	r3, [r7, #16]
   return(result);
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d1e5      	bne.n	8008b04 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2220      	movs	r2, #32
 8008b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2200      	movs	r2, #0
 8008b44:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008b46:	bf00      	nop
 8008b48:	3754      	adds	r7, #84	; 0x54
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b50:	4770      	bx	lr

08008b52 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008b52:	b580      	push	{r7, lr}
 8008b54:	b084      	sub	sp, #16
 8008b56:	af00      	add	r7, sp, #0
 8008b58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b5e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2200      	movs	r2, #0
 8008b64:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008b6c:	68f8      	ldr	r0, [r7, #12]
 8008b6e:	f7ff fcf3 	bl	8008558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b72:	bf00      	nop
 8008b74:	3710      	adds	r7, #16
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}

08008b7a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008b7a:	b480      	push	{r7}
 8008b7c:	b085      	sub	sp, #20
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b88:	b2db      	uxtb	r3, r3
 8008b8a:	2b21      	cmp	r3, #33	; 0x21
 8008b8c:	d13e      	bne.n	8008c0c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	689b      	ldr	r3, [r3, #8]
 8008b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b96:	d114      	bne.n	8008bc2 <UART_Transmit_IT+0x48>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	691b      	ldr	r3, [r3, #16]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d110      	bne.n	8008bc2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6a1b      	ldr	r3, [r3, #32]
 8008ba4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	881b      	ldrh	r3, [r3, #0]
 8008baa:	461a      	mov	r2, r3
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008bb4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6a1b      	ldr	r3, [r3, #32]
 8008bba:	1c9a      	adds	r2, r3, #2
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	621a      	str	r2, [r3, #32]
 8008bc0:	e008      	b.n	8008bd4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6a1b      	ldr	r3, [r3, #32]
 8008bc6:	1c59      	adds	r1, r3, #1
 8008bc8:	687a      	ldr	r2, [r7, #4]
 8008bca:	6211      	str	r1, [r2, #32]
 8008bcc:	781a      	ldrb	r2, [r3, #0]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008bd8:	b29b      	uxth	r3, r3
 8008bda:	3b01      	subs	r3, #1
 8008bdc:	b29b      	uxth	r3, r3
 8008bde:	687a      	ldr	r2, [r7, #4]
 8008be0:	4619      	mov	r1, r3
 8008be2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d10f      	bne.n	8008c08 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	68da      	ldr	r2, [r3, #12]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008bf6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	68da      	ldr	r2, [r3, #12]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c06:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	e000      	b.n	8008c0e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008c0c:	2302      	movs	r3, #2
  }
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3714      	adds	r7, #20
 8008c12:	46bd      	mov	sp, r7
 8008c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c18:	4770      	bx	lr

08008c1a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008c1a:	b580      	push	{r7, lr}
 8008c1c:	b082      	sub	sp, #8
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	68da      	ldr	r2, [r3, #12]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c30:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2220      	movs	r2, #32
 8008c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f7f8 fcaa 	bl	8001594 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008c40:	2300      	movs	r3, #0
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3708      	adds	r7, #8
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}

08008c4a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008c4a:	b580      	push	{r7, lr}
 8008c4c:	b08c      	sub	sp, #48	; 0x30
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c58:	b2db      	uxtb	r3, r3
 8008c5a:	2b22      	cmp	r3, #34	; 0x22
 8008c5c:	f040 80ab 	bne.w	8008db6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	689b      	ldr	r3, [r3, #8]
 8008c64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c68:	d117      	bne.n	8008c9a <UART_Receive_IT+0x50>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	691b      	ldr	r3, [r3, #16]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d113      	bne.n	8008c9a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008c72:	2300      	movs	r3, #0
 8008c74:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c7a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	685b      	ldr	r3, [r3, #4]
 8008c82:	b29b      	uxth	r3, r3
 8008c84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c88:	b29a      	uxth	r2, r3
 8008c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c8c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c92:	1c9a      	adds	r2, r3, #2
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	629a      	str	r2, [r3, #40]	; 0x28
 8008c98:	e026      	b.n	8008ce8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cac:	d007      	beq.n	8008cbe <UART_Receive_IT+0x74>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	689b      	ldr	r3, [r3, #8]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d10a      	bne.n	8008ccc <UART_Receive_IT+0x82>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	691b      	ldr	r3, [r3, #16]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d106      	bne.n	8008ccc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	b2da      	uxtb	r2, r3
 8008cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cc8:	701a      	strb	r2, [r3, #0]
 8008cca:	e008      	b.n	8008cde <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	b2db      	uxtb	r3, r3
 8008cd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cd8:	b2da      	uxtb	r2, r3
 8008cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cdc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ce2:	1c5a      	adds	r2, r3, #1
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	3b01      	subs	r3, #1
 8008cf0:	b29b      	uxth	r3, r3
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d15a      	bne.n	8008db2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	68da      	ldr	r2, [r3, #12]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f022 0220 	bic.w	r2, r2, #32
 8008d0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	68da      	ldr	r2, [r3, #12]
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008d1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	695a      	ldr	r2, [r3, #20]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f022 0201 	bic.w	r2, r2, #1
 8008d2a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2220      	movs	r2, #32
 8008d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d135      	bne.n	8008da8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	330c      	adds	r3, #12
 8008d48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	e853 3f00 	ldrex	r3, [r3]
 8008d50:	613b      	str	r3, [r7, #16]
   return(result);
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	f023 0310 	bic.w	r3, r3, #16
 8008d58:	627b      	str	r3, [r7, #36]	; 0x24
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	330c      	adds	r3, #12
 8008d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d62:	623a      	str	r2, [r7, #32]
 8008d64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d66:	69f9      	ldr	r1, [r7, #28]
 8008d68:	6a3a      	ldr	r2, [r7, #32]
 8008d6a:	e841 2300 	strex	r3, r2, [r1]
 8008d6e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d70:	69bb      	ldr	r3, [r7, #24]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d1e5      	bne.n	8008d42 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f003 0310 	and.w	r3, r3, #16
 8008d80:	2b10      	cmp	r3, #16
 8008d82:	d10a      	bne.n	8008d9a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008d84:	2300      	movs	r3, #0
 8008d86:	60fb      	str	r3, [r7, #12]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	60fb      	str	r3, [r7, #12]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	60fb      	str	r3, [r7, #12]
 8008d98:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008d9e:	4619      	mov	r1, r3
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f7ff fbe3 	bl	800856c <HAL_UARTEx_RxEventCallback>
 8008da6:	e002      	b.n	8008dae <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f7f8 fbdd 	bl	8001568 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008dae:	2300      	movs	r3, #0
 8008db0:	e002      	b.n	8008db8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008db2:	2300      	movs	r3, #0
 8008db4:	e000      	b.n	8008db8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008db6:	2302      	movs	r3, #2
  }
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3730      	adds	r7, #48	; 0x30
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}

08008dc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008dc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008dc4:	b0c0      	sub	sp, #256	; 0x100
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	691b      	ldr	r3, [r3, #16]
 8008dd4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ddc:	68d9      	ldr	r1, [r3, #12]
 8008dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008de2:	681a      	ldr	r2, [r3, #0]
 8008de4:	ea40 0301 	orr.w	r3, r0, r1
 8008de8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dee:	689a      	ldr	r2, [r3, #8]
 8008df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008df4:	691b      	ldr	r3, [r3, #16]
 8008df6:	431a      	orrs	r2, r3
 8008df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dfc:	695b      	ldr	r3, [r3, #20]
 8008dfe:	431a      	orrs	r2, r3
 8008e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e04:	69db      	ldr	r3, [r3, #28]
 8008e06:	4313      	orrs	r3, r2
 8008e08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	68db      	ldr	r3, [r3, #12]
 8008e14:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008e18:	f021 010c 	bic.w	r1, r1, #12
 8008e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e20:	681a      	ldr	r2, [r3, #0]
 8008e22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008e26:	430b      	orrs	r3, r1
 8008e28:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	695b      	ldr	r3, [r3, #20]
 8008e32:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e3a:	6999      	ldr	r1, [r3, #24]
 8008e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e40:	681a      	ldr	r2, [r3, #0]
 8008e42:	ea40 0301 	orr.w	r3, r0, r1
 8008e46:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e4c:	681a      	ldr	r2, [r3, #0]
 8008e4e:	4b8f      	ldr	r3, [pc, #572]	; (800908c <UART_SetConfig+0x2cc>)
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d005      	beq.n	8008e60 <UART_SetConfig+0xa0>
 8008e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e58:	681a      	ldr	r2, [r3, #0]
 8008e5a:	4b8d      	ldr	r3, [pc, #564]	; (8009090 <UART_SetConfig+0x2d0>)
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d104      	bne.n	8008e6a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008e60:	f7fd fb18 	bl	8006494 <HAL_RCC_GetPCLK2Freq>
 8008e64:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008e68:	e003      	b.n	8008e72 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008e6a:	f7fd faff 	bl	800646c <HAL_RCC_GetPCLK1Freq>
 8008e6e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e76:	69db      	ldr	r3, [r3, #28]
 8008e78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e7c:	f040 810c 	bne.w	8009098 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008e80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e84:	2200      	movs	r2, #0
 8008e86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008e8a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008e8e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008e92:	4622      	mov	r2, r4
 8008e94:	462b      	mov	r3, r5
 8008e96:	1891      	adds	r1, r2, r2
 8008e98:	65b9      	str	r1, [r7, #88]	; 0x58
 8008e9a:	415b      	adcs	r3, r3
 8008e9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e9e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008ea2:	4621      	mov	r1, r4
 8008ea4:	eb12 0801 	adds.w	r8, r2, r1
 8008ea8:	4629      	mov	r1, r5
 8008eaa:	eb43 0901 	adc.w	r9, r3, r1
 8008eae:	f04f 0200 	mov.w	r2, #0
 8008eb2:	f04f 0300 	mov.w	r3, #0
 8008eb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008eba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008ebe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008ec2:	4690      	mov	r8, r2
 8008ec4:	4699      	mov	r9, r3
 8008ec6:	4623      	mov	r3, r4
 8008ec8:	eb18 0303 	adds.w	r3, r8, r3
 8008ecc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008ed0:	462b      	mov	r3, r5
 8008ed2:	eb49 0303 	adc.w	r3, r9, r3
 8008ed6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008ee6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008eea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008eee:	460b      	mov	r3, r1
 8008ef0:	18db      	adds	r3, r3, r3
 8008ef2:	653b      	str	r3, [r7, #80]	; 0x50
 8008ef4:	4613      	mov	r3, r2
 8008ef6:	eb42 0303 	adc.w	r3, r2, r3
 8008efa:	657b      	str	r3, [r7, #84]	; 0x54
 8008efc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008f00:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008f04:	f7f7 fdfa 	bl	8000afc <__aeabi_uldivmod>
 8008f08:	4602      	mov	r2, r0
 8008f0a:	460b      	mov	r3, r1
 8008f0c:	4b61      	ldr	r3, [pc, #388]	; (8009094 <UART_SetConfig+0x2d4>)
 8008f0e:	fba3 2302 	umull	r2, r3, r3, r2
 8008f12:	095b      	lsrs	r3, r3, #5
 8008f14:	011c      	lsls	r4, r3, #4
 8008f16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008f20:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008f24:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008f28:	4642      	mov	r2, r8
 8008f2a:	464b      	mov	r3, r9
 8008f2c:	1891      	adds	r1, r2, r2
 8008f2e:	64b9      	str	r1, [r7, #72]	; 0x48
 8008f30:	415b      	adcs	r3, r3
 8008f32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008f38:	4641      	mov	r1, r8
 8008f3a:	eb12 0a01 	adds.w	sl, r2, r1
 8008f3e:	4649      	mov	r1, r9
 8008f40:	eb43 0b01 	adc.w	fp, r3, r1
 8008f44:	f04f 0200 	mov.w	r2, #0
 8008f48:	f04f 0300 	mov.w	r3, #0
 8008f4c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008f50:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008f54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008f58:	4692      	mov	sl, r2
 8008f5a:	469b      	mov	fp, r3
 8008f5c:	4643      	mov	r3, r8
 8008f5e:	eb1a 0303 	adds.w	r3, sl, r3
 8008f62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008f66:	464b      	mov	r3, r9
 8008f68:	eb4b 0303 	adc.w	r3, fp, r3
 8008f6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f74:	685b      	ldr	r3, [r3, #4]
 8008f76:	2200      	movs	r2, #0
 8008f78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008f7c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008f80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008f84:	460b      	mov	r3, r1
 8008f86:	18db      	adds	r3, r3, r3
 8008f88:	643b      	str	r3, [r7, #64]	; 0x40
 8008f8a:	4613      	mov	r3, r2
 8008f8c:	eb42 0303 	adc.w	r3, r2, r3
 8008f90:	647b      	str	r3, [r7, #68]	; 0x44
 8008f92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008f96:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008f9a:	f7f7 fdaf 	bl	8000afc <__aeabi_uldivmod>
 8008f9e:	4602      	mov	r2, r0
 8008fa0:	460b      	mov	r3, r1
 8008fa2:	4611      	mov	r1, r2
 8008fa4:	4b3b      	ldr	r3, [pc, #236]	; (8009094 <UART_SetConfig+0x2d4>)
 8008fa6:	fba3 2301 	umull	r2, r3, r3, r1
 8008faa:	095b      	lsrs	r3, r3, #5
 8008fac:	2264      	movs	r2, #100	; 0x64
 8008fae:	fb02 f303 	mul.w	r3, r2, r3
 8008fb2:	1acb      	subs	r3, r1, r3
 8008fb4:	00db      	lsls	r3, r3, #3
 8008fb6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008fba:	4b36      	ldr	r3, [pc, #216]	; (8009094 <UART_SetConfig+0x2d4>)
 8008fbc:	fba3 2302 	umull	r2, r3, r3, r2
 8008fc0:	095b      	lsrs	r3, r3, #5
 8008fc2:	005b      	lsls	r3, r3, #1
 8008fc4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008fc8:	441c      	add	r4, r3
 8008fca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008fce:	2200      	movs	r2, #0
 8008fd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008fd4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008fd8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008fdc:	4642      	mov	r2, r8
 8008fde:	464b      	mov	r3, r9
 8008fe0:	1891      	adds	r1, r2, r2
 8008fe2:	63b9      	str	r1, [r7, #56]	; 0x38
 8008fe4:	415b      	adcs	r3, r3
 8008fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fe8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008fec:	4641      	mov	r1, r8
 8008fee:	1851      	adds	r1, r2, r1
 8008ff0:	6339      	str	r1, [r7, #48]	; 0x30
 8008ff2:	4649      	mov	r1, r9
 8008ff4:	414b      	adcs	r3, r1
 8008ff6:	637b      	str	r3, [r7, #52]	; 0x34
 8008ff8:	f04f 0200 	mov.w	r2, #0
 8008ffc:	f04f 0300 	mov.w	r3, #0
 8009000:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009004:	4659      	mov	r1, fp
 8009006:	00cb      	lsls	r3, r1, #3
 8009008:	4651      	mov	r1, sl
 800900a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800900e:	4651      	mov	r1, sl
 8009010:	00ca      	lsls	r2, r1, #3
 8009012:	4610      	mov	r0, r2
 8009014:	4619      	mov	r1, r3
 8009016:	4603      	mov	r3, r0
 8009018:	4642      	mov	r2, r8
 800901a:	189b      	adds	r3, r3, r2
 800901c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009020:	464b      	mov	r3, r9
 8009022:	460a      	mov	r2, r1
 8009024:	eb42 0303 	adc.w	r3, r2, r3
 8009028:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800902c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	2200      	movs	r2, #0
 8009034:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009038:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800903c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009040:	460b      	mov	r3, r1
 8009042:	18db      	adds	r3, r3, r3
 8009044:	62bb      	str	r3, [r7, #40]	; 0x28
 8009046:	4613      	mov	r3, r2
 8009048:	eb42 0303 	adc.w	r3, r2, r3
 800904c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800904e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009052:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009056:	f7f7 fd51 	bl	8000afc <__aeabi_uldivmod>
 800905a:	4602      	mov	r2, r0
 800905c:	460b      	mov	r3, r1
 800905e:	4b0d      	ldr	r3, [pc, #52]	; (8009094 <UART_SetConfig+0x2d4>)
 8009060:	fba3 1302 	umull	r1, r3, r3, r2
 8009064:	095b      	lsrs	r3, r3, #5
 8009066:	2164      	movs	r1, #100	; 0x64
 8009068:	fb01 f303 	mul.w	r3, r1, r3
 800906c:	1ad3      	subs	r3, r2, r3
 800906e:	00db      	lsls	r3, r3, #3
 8009070:	3332      	adds	r3, #50	; 0x32
 8009072:	4a08      	ldr	r2, [pc, #32]	; (8009094 <UART_SetConfig+0x2d4>)
 8009074:	fba2 2303 	umull	r2, r3, r2, r3
 8009078:	095b      	lsrs	r3, r3, #5
 800907a:	f003 0207 	and.w	r2, r3, #7
 800907e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4422      	add	r2, r4
 8009086:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009088:	e105      	b.n	8009296 <UART_SetConfig+0x4d6>
 800908a:	bf00      	nop
 800908c:	40011000 	.word	0x40011000
 8009090:	40011400 	.word	0x40011400
 8009094:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009098:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800909c:	2200      	movs	r2, #0
 800909e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80090a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80090a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80090aa:	4642      	mov	r2, r8
 80090ac:	464b      	mov	r3, r9
 80090ae:	1891      	adds	r1, r2, r2
 80090b0:	6239      	str	r1, [r7, #32]
 80090b2:	415b      	adcs	r3, r3
 80090b4:	627b      	str	r3, [r7, #36]	; 0x24
 80090b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80090ba:	4641      	mov	r1, r8
 80090bc:	1854      	adds	r4, r2, r1
 80090be:	4649      	mov	r1, r9
 80090c0:	eb43 0501 	adc.w	r5, r3, r1
 80090c4:	f04f 0200 	mov.w	r2, #0
 80090c8:	f04f 0300 	mov.w	r3, #0
 80090cc:	00eb      	lsls	r3, r5, #3
 80090ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80090d2:	00e2      	lsls	r2, r4, #3
 80090d4:	4614      	mov	r4, r2
 80090d6:	461d      	mov	r5, r3
 80090d8:	4643      	mov	r3, r8
 80090da:	18e3      	adds	r3, r4, r3
 80090dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80090e0:	464b      	mov	r3, r9
 80090e2:	eb45 0303 	adc.w	r3, r5, r3
 80090e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80090ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090ee:	685b      	ldr	r3, [r3, #4]
 80090f0:	2200      	movs	r2, #0
 80090f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80090f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80090fa:	f04f 0200 	mov.w	r2, #0
 80090fe:	f04f 0300 	mov.w	r3, #0
 8009102:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009106:	4629      	mov	r1, r5
 8009108:	008b      	lsls	r3, r1, #2
 800910a:	4621      	mov	r1, r4
 800910c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009110:	4621      	mov	r1, r4
 8009112:	008a      	lsls	r2, r1, #2
 8009114:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009118:	f7f7 fcf0 	bl	8000afc <__aeabi_uldivmod>
 800911c:	4602      	mov	r2, r0
 800911e:	460b      	mov	r3, r1
 8009120:	4b60      	ldr	r3, [pc, #384]	; (80092a4 <UART_SetConfig+0x4e4>)
 8009122:	fba3 2302 	umull	r2, r3, r3, r2
 8009126:	095b      	lsrs	r3, r3, #5
 8009128:	011c      	lsls	r4, r3, #4
 800912a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800912e:	2200      	movs	r2, #0
 8009130:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009134:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009138:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800913c:	4642      	mov	r2, r8
 800913e:	464b      	mov	r3, r9
 8009140:	1891      	adds	r1, r2, r2
 8009142:	61b9      	str	r1, [r7, #24]
 8009144:	415b      	adcs	r3, r3
 8009146:	61fb      	str	r3, [r7, #28]
 8009148:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800914c:	4641      	mov	r1, r8
 800914e:	1851      	adds	r1, r2, r1
 8009150:	6139      	str	r1, [r7, #16]
 8009152:	4649      	mov	r1, r9
 8009154:	414b      	adcs	r3, r1
 8009156:	617b      	str	r3, [r7, #20]
 8009158:	f04f 0200 	mov.w	r2, #0
 800915c:	f04f 0300 	mov.w	r3, #0
 8009160:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009164:	4659      	mov	r1, fp
 8009166:	00cb      	lsls	r3, r1, #3
 8009168:	4651      	mov	r1, sl
 800916a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800916e:	4651      	mov	r1, sl
 8009170:	00ca      	lsls	r2, r1, #3
 8009172:	4610      	mov	r0, r2
 8009174:	4619      	mov	r1, r3
 8009176:	4603      	mov	r3, r0
 8009178:	4642      	mov	r2, r8
 800917a:	189b      	adds	r3, r3, r2
 800917c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009180:	464b      	mov	r3, r9
 8009182:	460a      	mov	r2, r1
 8009184:	eb42 0303 	adc.w	r3, r2, r3
 8009188:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800918c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	2200      	movs	r2, #0
 8009194:	67bb      	str	r3, [r7, #120]	; 0x78
 8009196:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009198:	f04f 0200 	mov.w	r2, #0
 800919c:	f04f 0300 	mov.w	r3, #0
 80091a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80091a4:	4649      	mov	r1, r9
 80091a6:	008b      	lsls	r3, r1, #2
 80091a8:	4641      	mov	r1, r8
 80091aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80091ae:	4641      	mov	r1, r8
 80091b0:	008a      	lsls	r2, r1, #2
 80091b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80091b6:	f7f7 fca1 	bl	8000afc <__aeabi_uldivmod>
 80091ba:	4602      	mov	r2, r0
 80091bc:	460b      	mov	r3, r1
 80091be:	4b39      	ldr	r3, [pc, #228]	; (80092a4 <UART_SetConfig+0x4e4>)
 80091c0:	fba3 1302 	umull	r1, r3, r3, r2
 80091c4:	095b      	lsrs	r3, r3, #5
 80091c6:	2164      	movs	r1, #100	; 0x64
 80091c8:	fb01 f303 	mul.w	r3, r1, r3
 80091cc:	1ad3      	subs	r3, r2, r3
 80091ce:	011b      	lsls	r3, r3, #4
 80091d0:	3332      	adds	r3, #50	; 0x32
 80091d2:	4a34      	ldr	r2, [pc, #208]	; (80092a4 <UART_SetConfig+0x4e4>)
 80091d4:	fba2 2303 	umull	r2, r3, r2, r3
 80091d8:	095b      	lsrs	r3, r3, #5
 80091da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80091de:	441c      	add	r4, r3
 80091e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80091e4:	2200      	movs	r2, #0
 80091e6:	673b      	str	r3, [r7, #112]	; 0x70
 80091e8:	677a      	str	r2, [r7, #116]	; 0x74
 80091ea:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80091ee:	4642      	mov	r2, r8
 80091f0:	464b      	mov	r3, r9
 80091f2:	1891      	adds	r1, r2, r2
 80091f4:	60b9      	str	r1, [r7, #8]
 80091f6:	415b      	adcs	r3, r3
 80091f8:	60fb      	str	r3, [r7, #12]
 80091fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80091fe:	4641      	mov	r1, r8
 8009200:	1851      	adds	r1, r2, r1
 8009202:	6039      	str	r1, [r7, #0]
 8009204:	4649      	mov	r1, r9
 8009206:	414b      	adcs	r3, r1
 8009208:	607b      	str	r3, [r7, #4]
 800920a:	f04f 0200 	mov.w	r2, #0
 800920e:	f04f 0300 	mov.w	r3, #0
 8009212:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009216:	4659      	mov	r1, fp
 8009218:	00cb      	lsls	r3, r1, #3
 800921a:	4651      	mov	r1, sl
 800921c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009220:	4651      	mov	r1, sl
 8009222:	00ca      	lsls	r2, r1, #3
 8009224:	4610      	mov	r0, r2
 8009226:	4619      	mov	r1, r3
 8009228:	4603      	mov	r3, r0
 800922a:	4642      	mov	r2, r8
 800922c:	189b      	adds	r3, r3, r2
 800922e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009230:	464b      	mov	r3, r9
 8009232:	460a      	mov	r2, r1
 8009234:	eb42 0303 	adc.w	r3, r2, r3
 8009238:	66fb      	str	r3, [r7, #108]	; 0x6c
 800923a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	2200      	movs	r2, #0
 8009242:	663b      	str	r3, [r7, #96]	; 0x60
 8009244:	667a      	str	r2, [r7, #100]	; 0x64
 8009246:	f04f 0200 	mov.w	r2, #0
 800924a:	f04f 0300 	mov.w	r3, #0
 800924e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009252:	4649      	mov	r1, r9
 8009254:	008b      	lsls	r3, r1, #2
 8009256:	4641      	mov	r1, r8
 8009258:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800925c:	4641      	mov	r1, r8
 800925e:	008a      	lsls	r2, r1, #2
 8009260:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009264:	f7f7 fc4a 	bl	8000afc <__aeabi_uldivmod>
 8009268:	4602      	mov	r2, r0
 800926a:	460b      	mov	r3, r1
 800926c:	4b0d      	ldr	r3, [pc, #52]	; (80092a4 <UART_SetConfig+0x4e4>)
 800926e:	fba3 1302 	umull	r1, r3, r3, r2
 8009272:	095b      	lsrs	r3, r3, #5
 8009274:	2164      	movs	r1, #100	; 0x64
 8009276:	fb01 f303 	mul.w	r3, r1, r3
 800927a:	1ad3      	subs	r3, r2, r3
 800927c:	011b      	lsls	r3, r3, #4
 800927e:	3332      	adds	r3, #50	; 0x32
 8009280:	4a08      	ldr	r2, [pc, #32]	; (80092a4 <UART_SetConfig+0x4e4>)
 8009282:	fba2 2303 	umull	r2, r3, r2, r3
 8009286:	095b      	lsrs	r3, r3, #5
 8009288:	f003 020f 	and.w	r2, r3, #15
 800928c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4422      	add	r2, r4
 8009294:	609a      	str	r2, [r3, #8]
}
 8009296:	bf00      	nop
 8009298:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800929c:	46bd      	mov	sp, r7
 800929e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80092a2:	bf00      	nop
 80092a4:	51eb851f 	.word	0x51eb851f

080092a8 <__NVIC_SetPriority>:
{
 80092a8:	b480      	push	{r7}
 80092aa:	b083      	sub	sp, #12
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	4603      	mov	r3, r0
 80092b0:	6039      	str	r1, [r7, #0]
 80092b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80092b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	db0a      	blt.n	80092d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	b2da      	uxtb	r2, r3
 80092c0:	490c      	ldr	r1, [pc, #48]	; (80092f4 <__NVIC_SetPriority+0x4c>)
 80092c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80092c6:	0112      	lsls	r2, r2, #4
 80092c8:	b2d2      	uxtb	r2, r2
 80092ca:	440b      	add	r3, r1
 80092cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80092d0:	e00a      	b.n	80092e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	b2da      	uxtb	r2, r3
 80092d6:	4908      	ldr	r1, [pc, #32]	; (80092f8 <__NVIC_SetPriority+0x50>)
 80092d8:	79fb      	ldrb	r3, [r7, #7]
 80092da:	f003 030f 	and.w	r3, r3, #15
 80092de:	3b04      	subs	r3, #4
 80092e0:	0112      	lsls	r2, r2, #4
 80092e2:	b2d2      	uxtb	r2, r2
 80092e4:	440b      	add	r3, r1
 80092e6:	761a      	strb	r2, [r3, #24]
}
 80092e8:	bf00      	nop
 80092ea:	370c      	adds	r7, #12
 80092ec:	46bd      	mov	sp, r7
 80092ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f2:	4770      	bx	lr
 80092f4:	e000e100 	.word	0xe000e100
 80092f8:	e000ed00 	.word	0xe000ed00

080092fc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80092fc:	b580      	push	{r7, lr}
 80092fe:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009300:	4b05      	ldr	r3, [pc, #20]	; (8009318 <SysTick_Handler+0x1c>)
 8009302:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009304:	f002 fe0a 	bl	800bf1c <xTaskGetSchedulerState>
 8009308:	4603      	mov	r3, r0
 800930a:	2b01      	cmp	r3, #1
 800930c:	d001      	beq.n	8009312 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800930e:	f003 fdab 	bl	800ce68 <xPortSysTickHandler>
  }
}
 8009312:	bf00      	nop
 8009314:	bd80      	pop	{r7, pc}
 8009316:	bf00      	nop
 8009318:	e000e010 	.word	0xe000e010

0800931c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800931c:	b580      	push	{r7, lr}
 800931e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009320:	2100      	movs	r1, #0
 8009322:	f06f 0004 	mvn.w	r0, #4
 8009326:	f7ff ffbf 	bl	80092a8 <__NVIC_SetPriority>
#endif
}
 800932a:	bf00      	nop
 800932c:	bd80      	pop	{r7, pc}
	...

08009330 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009330:	b480      	push	{r7}
 8009332:	b083      	sub	sp, #12
 8009334:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009336:	f3ef 8305 	mrs	r3, IPSR
 800933a:	603b      	str	r3, [r7, #0]
  return(result);
 800933c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800933e:	2b00      	cmp	r3, #0
 8009340:	d003      	beq.n	800934a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009342:	f06f 0305 	mvn.w	r3, #5
 8009346:	607b      	str	r3, [r7, #4]
 8009348:	e00c      	b.n	8009364 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800934a:	4b0a      	ldr	r3, [pc, #40]	; (8009374 <osKernelInitialize+0x44>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d105      	bne.n	800935e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009352:	4b08      	ldr	r3, [pc, #32]	; (8009374 <osKernelInitialize+0x44>)
 8009354:	2201      	movs	r2, #1
 8009356:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009358:	2300      	movs	r3, #0
 800935a:	607b      	str	r3, [r7, #4]
 800935c:	e002      	b.n	8009364 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800935e:	f04f 33ff 	mov.w	r3, #4294967295
 8009362:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009364:	687b      	ldr	r3, [r7, #4]
}
 8009366:	4618      	mov	r0, r3
 8009368:	370c      	adds	r7, #12
 800936a:	46bd      	mov	sp, r7
 800936c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009370:	4770      	bx	lr
 8009372:	bf00      	nop
 8009374:	2000073c 	.word	0x2000073c

08009378 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009378:	b580      	push	{r7, lr}
 800937a:	b082      	sub	sp, #8
 800937c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800937e:	f3ef 8305 	mrs	r3, IPSR
 8009382:	603b      	str	r3, [r7, #0]
  return(result);
 8009384:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009386:	2b00      	cmp	r3, #0
 8009388:	d003      	beq.n	8009392 <osKernelStart+0x1a>
    stat = osErrorISR;
 800938a:	f06f 0305 	mvn.w	r3, #5
 800938e:	607b      	str	r3, [r7, #4]
 8009390:	e010      	b.n	80093b4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009392:	4b0b      	ldr	r3, [pc, #44]	; (80093c0 <osKernelStart+0x48>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	2b01      	cmp	r3, #1
 8009398:	d109      	bne.n	80093ae <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800939a:	f7ff ffbf 	bl	800931c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800939e:	4b08      	ldr	r3, [pc, #32]	; (80093c0 <osKernelStart+0x48>)
 80093a0:	2202      	movs	r2, #2
 80093a2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80093a4:	f002 f962 	bl	800b66c <vTaskStartScheduler>
      stat = osOK;
 80093a8:	2300      	movs	r3, #0
 80093aa:	607b      	str	r3, [r7, #4]
 80093ac:	e002      	b.n	80093b4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80093ae:	f04f 33ff 	mov.w	r3, #4294967295
 80093b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80093b4:	687b      	ldr	r3, [r7, #4]
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3708      	adds	r7, #8
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}
 80093be:	bf00      	nop
 80093c0:	2000073c 	.word	0x2000073c

080093c4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b08e      	sub	sp, #56	; 0x38
 80093c8:	af04      	add	r7, sp, #16
 80093ca:	60f8      	str	r0, [r7, #12]
 80093cc:	60b9      	str	r1, [r7, #8]
 80093ce:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80093d0:	2300      	movs	r3, #0
 80093d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80093d4:	f3ef 8305 	mrs	r3, IPSR
 80093d8:	617b      	str	r3, [r7, #20]
  return(result);
 80093da:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d17e      	bne.n	80094de <osThreadNew+0x11a>
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d07b      	beq.n	80094de <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80093e6:	2380      	movs	r3, #128	; 0x80
 80093e8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80093ea:	2318      	movs	r3, #24
 80093ec:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80093ee:	2300      	movs	r3, #0
 80093f0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80093f2:	f04f 33ff 	mov.w	r3, #4294967295
 80093f6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d045      	beq.n	800948a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d002      	beq.n	800940c <osThreadNew+0x48>
        name = attr->name;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	699b      	ldr	r3, [r3, #24]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d002      	beq.n	800941a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	699b      	ldr	r3, [r3, #24]
 8009418:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800941a:	69fb      	ldr	r3, [r7, #28]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d008      	beq.n	8009432 <osThreadNew+0x6e>
 8009420:	69fb      	ldr	r3, [r7, #28]
 8009422:	2b38      	cmp	r3, #56	; 0x38
 8009424:	d805      	bhi.n	8009432 <osThreadNew+0x6e>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	685b      	ldr	r3, [r3, #4]
 800942a:	f003 0301 	and.w	r3, r3, #1
 800942e:	2b00      	cmp	r3, #0
 8009430:	d001      	beq.n	8009436 <osThreadNew+0x72>
        return (NULL);
 8009432:	2300      	movs	r3, #0
 8009434:	e054      	b.n	80094e0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	695b      	ldr	r3, [r3, #20]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d003      	beq.n	8009446 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	695b      	ldr	r3, [r3, #20]
 8009442:	089b      	lsrs	r3, r3, #2
 8009444:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	689b      	ldr	r3, [r3, #8]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d00e      	beq.n	800946c <osThreadNew+0xa8>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	68db      	ldr	r3, [r3, #12]
 8009452:	2b5b      	cmp	r3, #91	; 0x5b
 8009454:	d90a      	bls.n	800946c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800945a:	2b00      	cmp	r3, #0
 800945c:	d006      	beq.n	800946c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	695b      	ldr	r3, [r3, #20]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d002      	beq.n	800946c <osThreadNew+0xa8>
        mem = 1;
 8009466:	2301      	movs	r3, #1
 8009468:	61bb      	str	r3, [r7, #24]
 800946a:	e010      	b.n	800948e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	689b      	ldr	r3, [r3, #8]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d10c      	bne.n	800948e <osThreadNew+0xca>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	68db      	ldr	r3, [r3, #12]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d108      	bne.n	800948e <osThreadNew+0xca>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	691b      	ldr	r3, [r3, #16]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d104      	bne.n	800948e <osThreadNew+0xca>
          mem = 0;
 8009484:	2300      	movs	r3, #0
 8009486:	61bb      	str	r3, [r7, #24]
 8009488:	e001      	b.n	800948e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800948a:	2300      	movs	r3, #0
 800948c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800948e:	69bb      	ldr	r3, [r7, #24]
 8009490:	2b01      	cmp	r3, #1
 8009492:	d110      	bne.n	80094b6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009498:	687a      	ldr	r2, [r7, #4]
 800949a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800949c:	9202      	str	r2, [sp, #8]
 800949e:	9301      	str	r3, [sp, #4]
 80094a0:	69fb      	ldr	r3, [r7, #28]
 80094a2:	9300      	str	r3, [sp, #0]
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	6a3a      	ldr	r2, [r7, #32]
 80094a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80094aa:	68f8      	ldr	r0, [r7, #12]
 80094ac:	f001 fe30 	bl	800b110 <xTaskCreateStatic>
 80094b0:	4603      	mov	r3, r0
 80094b2:	613b      	str	r3, [r7, #16]
 80094b4:	e013      	b.n	80094de <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80094b6:	69bb      	ldr	r3, [r7, #24]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d110      	bne.n	80094de <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80094bc:	6a3b      	ldr	r3, [r7, #32]
 80094be:	b29a      	uxth	r2, r3
 80094c0:	f107 0310 	add.w	r3, r7, #16
 80094c4:	9301      	str	r3, [sp, #4]
 80094c6:	69fb      	ldr	r3, [r7, #28]
 80094c8:	9300      	str	r3, [sp, #0]
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80094ce:	68f8      	ldr	r0, [r7, #12]
 80094d0:	f001 fe7b 	bl	800b1ca <xTaskCreate>
 80094d4:	4603      	mov	r3, r0
 80094d6:	2b01      	cmp	r3, #1
 80094d8:	d001      	beq.n	80094de <osThreadNew+0x11a>
            hTask = NULL;
 80094da:	2300      	movs	r3, #0
 80094dc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80094de:	693b      	ldr	r3, [r7, #16]
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3728      	adds	r7, #40	; 0x28
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}

080094e8 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b086      	sub	sp, #24
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80094f4:	f3ef 8305 	mrs	r3, IPSR
 80094f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80094fa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d003      	beq.n	8009508 <osThreadTerminate+0x20>
    stat = osErrorISR;
 8009500:	f06f 0305 	mvn.w	r3, #5
 8009504:	617b      	str	r3, [r7, #20]
 8009506:	e017      	b.n	8009538 <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d103      	bne.n	8009516 <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 800950e:	f06f 0303 	mvn.w	r3, #3
 8009512:	617b      	str	r3, [r7, #20]
 8009514:	e010      	b.n	8009538 <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 8009516:	6938      	ldr	r0, [r7, #16]
 8009518:	f002 f842 	bl	800b5a0 <eTaskGetState>
 800951c:	4603      	mov	r3, r0
 800951e:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 8009520:	7bfb      	ldrb	r3, [r7, #15]
 8009522:	2b04      	cmp	r3, #4
 8009524:	d005      	beq.n	8009532 <osThreadTerminate+0x4a>
      stat = osOK;
 8009526:	2300      	movs	r3, #0
 8009528:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 800952a:	6938      	ldr	r0, [r7, #16]
 800952c:	f001 ff92 	bl	800b454 <vTaskDelete>
 8009530:	e002      	b.n	8009538 <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 8009532:	f06f 0302 	mvn.w	r3, #2
 8009536:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 8009538:	697b      	ldr	r3, [r7, #20]
}
 800953a:	4618      	mov	r0, r3
 800953c:	3718      	adds	r7, #24
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}

08009542 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009542:	b580      	push	{r7, lr}
 8009544:	b084      	sub	sp, #16
 8009546:	af00      	add	r7, sp, #0
 8009548:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800954a:	f3ef 8305 	mrs	r3, IPSR
 800954e:	60bb      	str	r3, [r7, #8]
  return(result);
 8009550:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009552:	2b00      	cmp	r3, #0
 8009554:	d003      	beq.n	800955e <osDelay+0x1c>
    stat = osErrorISR;
 8009556:	f06f 0305 	mvn.w	r3, #5
 800955a:	60fb      	str	r3, [r7, #12]
 800955c:	e007      	b.n	800956e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800955e:	2300      	movs	r3, #0
 8009560:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d002      	beq.n	800956e <osDelay+0x2c>
      vTaskDelay(ticks);
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f001 ffe5 	bl	800b538 <vTaskDelay>
    }
  }

  return (stat);
 800956e:	68fb      	ldr	r3, [r7, #12]
}
 8009570:	4618      	mov	r0, r3
 8009572:	3710      	adds	r7, #16
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}

08009578 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8009578:	b580      	push	{r7, lr}
 800957a:	b084      	sub	sp, #16
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f003 fa91 	bl	800caa8 <pvTimerGetTimerID>
 8009586:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d005      	beq.n	800959a <TimerCallback+0x22>
    callb->func (callb->arg);
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	68fa      	ldr	r2, [r7, #12]
 8009594:	6852      	ldr	r2, [r2, #4]
 8009596:	4610      	mov	r0, r2
 8009598:	4798      	blx	r3
  }
}
 800959a:	bf00      	nop
 800959c:	3710      	adds	r7, #16
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}
	...

080095a4 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b08c      	sub	sp, #48	; 0x30
 80095a8:	af02      	add	r7, sp, #8
 80095aa:	60f8      	str	r0, [r7, #12]
 80095ac:	607a      	str	r2, [r7, #4]
 80095ae:	603b      	str	r3, [r7, #0]
 80095b0:	460b      	mov	r3, r1
 80095b2:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 80095b4:	2300      	movs	r3, #0
 80095b6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80095b8:	f3ef 8305 	mrs	r3, IPSR
 80095bc:	613b      	str	r3, [r7, #16]
  return(result);
 80095be:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d163      	bne.n	800968c <osTimerNew+0xe8>
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d060      	beq.n	800968c <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 80095ca:	2008      	movs	r0, #8
 80095cc:	f003 fcdc 	bl	800cf88 <pvPortMalloc>
 80095d0:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d059      	beq.n	800968c <osTimerNew+0xe8>
      callb->func = func;
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	68fa      	ldr	r2, [r7, #12]
 80095dc:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	687a      	ldr	r2, [r7, #4]
 80095e2:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 80095e4:	7afb      	ldrb	r3, [r7, #11]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d102      	bne.n	80095f0 <osTimerNew+0x4c>
        reload = pdFALSE;
 80095ea:	2300      	movs	r3, #0
 80095ec:	61fb      	str	r3, [r7, #28]
 80095ee:	e001      	b.n	80095f4 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 80095f0:	2301      	movs	r3, #1
 80095f2:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 80095f4:	f04f 33ff 	mov.w	r3, #4294967295
 80095f8:	61bb      	str	r3, [r7, #24]
      name = NULL;
 80095fa:	2300      	movs	r3, #0
 80095fc:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d01c      	beq.n	800963e <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d002      	beq.n	8009612 <osTimerNew+0x6e>
          name = attr->name;
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	689b      	ldr	r3, [r3, #8]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d006      	beq.n	8009628 <osTimerNew+0x84>
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	68db      	ldr	r3, [r3, #12]
 800961e:	2b2b      	cmp	r3, #43	; 0x2b
 8009620:	d902      	bls.n	8009628 <osTimerNew+0x84>
          mem = 1;
 8009622:	2301      	movs	r3, #1
 8009624:	61bb      	str	r3, [r7, #24]
 8009626:	e00c      	b.n	8009642 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	689b      	ldr	r3, [r3, #8]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d108      	bne.n	8009642 <osTimerNew+0x9e>
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	68db      	ldr	r3, [r3, #12]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d104      	bne.n	8009642 <osTimerNew+0x9e>
            mem = 0;
 8009638:	2300      	movs	r3, #0
 800963a:	61bb      	str	r3, [r7, #24]
 800963c:	e001      	b.n	8009642 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800963e:	2300      	movs	r3, #0
 8009640:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8009642:	69bb      	ldr	r3, [r7, #24]
 8009644:	2b01      	cmp	r3, #1
 8009646:	d10c      	bne.n	8009662 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	689b      	ldr	r3, [r3, #8]
 800964c:	9301      	str	r3, [sp, #4]
 800964e:	4b12      	ldr	r3, [pc, #72]	; (8009698 <osTimerNew+0xf4>)
 8009650:	9300      	str	r3, [sp, #0]
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	69fa      	ldr	r2, [r7, #28]
 8009656:	2101      	movs	r1, #1
 8009658:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800965a:	f002 fea6 	bl	800c3aa <xTimerCreateStatic>
 800965e:	6238      	str	r0, [r7, #32]
 8009660:	e00b      	b.n	800967a <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8009662:	69bb      	ldr	r3, [r7, #24]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d108      	bne.n	800967a <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8009668:	4b0b      	ldr	r3, [pc, #44]	; (8009698 <osTimerNew+0xf4>)
 800966a:	9300      	str	r3, [sp, #0]
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	69fa      	ldr	r2, [r7, #28]
 8009670:	2101      	movs	r1, #1
 8009672:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009674:	f002 fe78 	bl	800c368 <xTimerCreate>
 8009678:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800967a:	6a3b      	ldr	r3, [r7, #32]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d105      	bne.n	800968c <osTimerNew+0xe8>
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d002      	beq.n	800968c <osTimerNew+0xe8>
        vPortFree (callb);
 8009686:	6978      	ldr	r0, [r7, #20]
 8009688:	f003 fd4a 	bl	800d120 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800968c:	6a3b      	ldr	r3, [r7, #32]
}
 800968e:	4618      	mov	r0, r3
 8009690:	3728      	adds	r7, #40	; 0x28
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}
 8009696:	bf00      	nop
 8009698:	08009579 	.word	0x08009579

0800969c <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800969c:	b580      	push	{r7, lr}
 800969e:	b088      	sub	sp, #32
 80096a0:	af02      	add	r7, sp, #8
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096aa:	f3ef 8305 	mrs	r3, IPSR
 80096ae:	60fb      	str	r3, [r7, #12]
  return(result);
 80096b0:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d003      	beq.n	80096be <osTimerStart+0x22>
    stat = osErrorISR;
 80096b6:	f06f 0305 	mvn.w	r3, #5
 80096ba:	617b      	str	r3, [r7, #20]
 80096bc:	e017      	b.n	80096ee <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d103      	bne.n	80096cc <osTimerStart+0x30>
    stat = osErrorParameter;
 80096c4:	f06f 0303 	mvn.w	r3, #3
 80096c8:	617b      	str	r3, [r7, #20]
 80096ca:	e010      	b.n	80096ee <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 80096cc:	2300      	movs	r3, #0
 80096ce:	9300      	str	r3, [sp, #0]
 80096d0:	2300      	movs	r3, #0
 80096d2:	683a      	ldr	r2, [r7, #0]
 80096d4:	2104      	movs	r1, #4
 80096d6:	6938      	ldr	r0, [r7, #16]
 80096d8:	f002 fee0 	bl	800c49c <xTimerGenericCommand>
 80096dc:	4603      	mov	r3, r0
 80096de:	2b01      	cmp	r3, #1
 80096e0:	d102      	bne.n	80096e8 <osTimerStart+0x4c>
      stat = osOK;
 80096e2:	2300      	movs	r3, #0
 80096e4:	617b      	str	r3, [r7, #20]
 80096e6:	e002      	b.n	80096ee <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 80096e8:	f06f 0302 	mvn.w	r3, #2
 80096ec:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80096ee:	697b      	ldr	r3, [r7, #20]
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3718      	adds	r7, #24
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b088      	sub	sp, #32
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8009700:	2300      	movs	r3, #0
 8009702:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009704:	f3ef 8305 	mrs	r3, IPSR
 8009708:	60bb      	str	r3, [r7, #8]
  return(result);
 800970a:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800970c:	2b00      	cmp	r3, #0
 800970e:	d174      	bne.n	80097fa <osMutexNew+0x102>
    if (attr != NULL) {
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d003      	beq.n	800971e <osMutexNew+0x26>
      type = attr->attr_bits;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	685b      	ldr	r3, [r3, #4]
 800971a:	61bb      	str	r3, [r7, #24]
 800971c:	e001      	b.n	8009722 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800971e:	2300      	movs	r3, #0
 8009720:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8009722:	69bb      	ldr	r3, [r7, #24]
 8009724:	f003 0301 	and.w	r3, r3, #1
 8009728:	2b00      	cmp	r3, #0
 800972a:	d002      	beq.n	8009732 <osMutexNew+0x3a>
      rmtx = 1U;
 800972c:	2301      	movs	r3, #1
 800972e:	617b      	str	r3, [r7, #20]
 8009730:	e001      	b.n	8009736 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8009732:	2300      	movs	r3, #0
 8009734:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8009736:	69bb      	ldr	r3, [r7, #24]
 8009738:	f003 0308 	and.w	r3, r3, #8
 800973c:	2b00      	cmp	r3, #0
 800973e:	d15c      	bne.n	80097fa <osMutexNew+0x102>
      mem = -1;
 8009740:	f04f 33ff 	mov.w	r3, #4294967295
 8009744:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d015      	beq.n	8009778 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	689b      	ldr	r3, [r3, #8]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d006      	beq.n	8009762 <osMutexNew+0x6a>
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	68db      	ldr	r3, [r3, #12]
 8009758:	2b4f      	cmp	r3, #79	; 0x4f
 800975a:	d902      	bls.n	8009762 <osMutexNew+0x6a>
          mem = 1;
 800975c:	2301      	movs	r3, #1
 800975e:	613b      	str	r3, [r7, #16]
 8009760:	e00c      	b.n	800977c <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	689b      	ldr	r3, [r3, #8]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d108      	bne.n	800977c <osMutexNew+0x84>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	68db      	ldr	r3, [r3, #12]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d104      	bne.n	800977c <osMutexNew+0x84>
            mem = 0;
 8009772:	2300      	movs	r3, #0
 8009774:	613b      	str	r3, [r7, #16]
 8009776:	e001      	b.n	800977c <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8009778:	2300      	movs	r3, #0
 800977a:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	2b01      	cmp	r3, #1
 8009780:	d112      	bne.n	80097a8 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d007      	beq.n	8009798 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	689b      	ldr	r3, [r3, #8]
 800978c:	4619      	mov	r1, r3
 800978e:	2004      	movs	r0, #4
 8009790:	f000 fd69 	bl	800a266 <xQueueCreateMutexStatic>
 8009794:	61f8      	str	r0, [r7, #28]
 8009796:	e016      	b.n	80097c6 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	689b      	ldr	r3, [r3, #8]
 800979c:	4619      	mov	r1, r3
 800979e:	2001      	movs	r0, #1
 80097a0:	f000 fd61 	bl	800a266 <xQueueCreateMutexStatic>
 80097a4:	61f8      	str	r0, [r7, #28]
 80097a6:	e00e      	b.n	80097c6 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d10b      	bne.n	80097c6 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d004      	beq.n	80097be <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80097b4:	2004      	movs	r0, #4
 80097b6:	f000 fd3e 	bl	800a236 <xQueueCreateMutex>
 80097ba:	61f8      	str	r0, [r7, #28]
 80097bc:	e003      	b.n	80097c6 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80097be:	2001      	movs	r0, #1
 80097c0:	f000 fd39 	bl	800a236 <xQueueCreateMutex>
 80097c4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80097c6:	69fb      	ldr	r3, [r7, #28]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d00c      	beq.n	80097e6 <osMutexNew+0xee>
        if (attr != NULL) {
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d003      	beq.n	80097da <osMutexNew+0xe2>
          name = attr->name;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	60fb      	str	r3, [r7, #12]
 80097d8:	e001      	b.n	80097de <osMutexNew+0xe6>
        } else {
          name = NULL;
 80097da:	2300      	movs	r3, #0
 80097dc:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80097de:	68f9      	ldr	r1, [r7, #12]
 80097e0:	69f8      	ldr	r0, [r7, #28]
 80097e2:	f001 fc0d 	bl	800b000 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80097e6:	69fb      	ldr	r3, [r7, #28]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d006      	beq.n	80097fa <osMutexNew+0x102>
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d003      	beq.n	80097fa <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80097f2:	69fb      	ldr	r3, [r7, #28]
 80097f4:	f043 0301 	orr.w	r3, r3, #1
 80097f8:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80097fa:	69fb      	ldr	r3, [r7, #28]
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3720      	adds	r7, #32
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}

08009804 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8009804:	b580      	push	{r7, lr}
 8009806:	b086      	sub	sp, #24
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
 800980c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f023 0301 	bic.w	r3, r3, #1
 8009814:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f003 0301 	and.w	r3, r3, #1
 800981c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800981e:	2300      	movs	r3, #0
 8009820:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009822:	f3ef 8305 	mrs	r3, IPSR
 8009826:	60bb      	str	r3, [r7, #8]
  return(result);
 8009828:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800982a:	2b00      	cmp	r3, #0
 800982c:	d003      	beq.n	8009836 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800982e:	f06f 0305 	mvn.w	r3, #5
 8009832:	617b      	str	r3, [r7, #20]
 8009834:	e02c      	b.n	8009890 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d103      	bne.n	8009844 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800983c:	f06f 0303 	mvn.w	r3, #3
 8009840:	617b      	str	r3, [r7, #20]
 8009842:	e025      	b.n	8009890 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d011      	beq.n	800986e <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800984a:	6839      	ldr	r1, [r7, #0]
 800984c:	6938      	ldr	r0, [r7, #16]
 800984e:	f000 fd59 	bl	800a304 <xQueueTakeMutexRecursive>
 8009852:	4603      	mov	r3, r0
 8009854:	2b01      	cmp	r3, #1
 8009856:	d01b      	beq.n	8009890 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d003      	beq.n	8009866 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800985e:	f06f 0301 	mvn.w	r3, #1
 8009862:	617b      	str	r3, [r7, #20]
 8009864:	e014      	b.n	8009890 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8009866:	f06f 0302 	mvn.w	r3, #2
 800986a:	617b      	str	r3, [r7, #20]
 800986c:	e010      	b.n	8009890 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800986e:	6839      	ldr	r1, [r7, #0]
 8009870:	6938      	ldr	r0, [r7, #16]
 8009872:	f001 f8ed 	bl	800aa50 <xQueueSemaphoreTake>
 8009876:	4603      	mov	r3, r0
 8009878:	2b01      	cmp	r3, #1
 800987a:	d009      	beq.n	8009890 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d003      	beq.n	800988a <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8009882:	f06f 0301 	mvn.w	r3, #1
 8009886:	617b      	str	r3, [r7, #20]
 8009888:	e002      	b.n	8009890 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800988a:	f06f 0302 	mvn.w	r3, #2
 800988e:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8009890:	697b      	ldr	r3, [r7, #20]
}
 8009892:	4618      	mov	r0, r3
 8009894:	3718      	adds	r7, #24
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}

0800989a <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800989a:	b580      	push	{r7, lr}
 800989c:	b086      	sub	sp, #24
 800989e:	af00      	add	r7, sp, #0
 80098a0:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f023 0301 	bic.w	r3, r3, #1
 80098a8:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f003 0301 	and.w	r3, r3, #1
 80098b0:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80098b2:	2300      	movs	r3, #0
 80098b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80098b6:	f3ef 8305 	mrs	r3, IPSR
 80098ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80098bc:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d003      	beq.n	80098ca <osMutexRelease+0x30>
    stat = osErrorISR;
 80098c2:	f06f 0305 	mvn.w	r3, #5
 80098c6:	617b      	str	r3, [r7, #20]
 80098c8:	e01f      	b.n	800990a <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d103      	bne.n	80098d8 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80098d0:	f06f 0303 	mvn.w	r3, #3
 80098d4:	617b      	str	r3, [r7, #20]
 80098d6:	e018      	b.n	800990a <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d009      	beq.n	80098f2 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80098de:	6938      	ldr	r0, [r7, #16]
 80098e0:	f000 fcdc 	bl	800a29c <xQueueGiveMutexRecursive>
 80098e4:	4603      	mov	r3, r0
 80098e6:	2b01      	cmp	r3, #1
 80098e8:	d00f      	beq.n	800990a <osMutexRelease+0x70>
        stat = osErrorResource;
 80098ea:	f06f 0302 	mvn.w	r3, #2
 80098ee:	617b      	str	r3, [r7, #20]
 80098f0:	e00b      	b.n	800990a <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80098f2:	2300      	movs	r3, #0
 80098f4:	2200      	movs	r2, #0
 80098f6:	2100      	movs	r1, #0
 80098f8:	6938      	ldr	r0, [r7, #16]
 80098fa:	f000 fda3 	bl	800a444 <xQueueGenericSend>
 80098fe:	4603      	mov	r3, r0
 8009900:	2b01      	cmp	r3, #1
 8009902:	d002      	beq.n	800990a <osMutexRelease+0x70>
        stat = osErrorResource;
 8009904:	f06f 0302 	mvn.w	r3, #2
 8009908:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800990a:	697b      	ldr	r3, [r7, #20]
}
 800990c:	4618      	mov	r0, r3
 800990e:	3718      	adds	r7, #24
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}

08009914 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009914:	b580      	push	{r7, lr}
 8009916:	b08a      	sub	sp, #40	; 0x28
 8009918:	af02      	add	r7, sp, #8
 800991a:	60f8      	str	r0, [r7, #12]
 800991c:	60b9      	str	r1, [r7, #8]
 800991e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009920:	2300      	movs	r3, #0
 8009922:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009924:	f3ef 8305 	mrs	r3, IPSR
 8009928:	613b      	str	r3, [r7, #16]
  return(result);
 800992a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800992c:	2b00      	cmp	r3, #0
 800992e:	d175      	bne.n	8009a1c <osSemaphoreNew+0x108>
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d072      	beq.n	8009a1c <osSemaphoreNew+0x108>
 8009936:	68ba      	ldr	r2, [r7, #8]
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	429a      	cmp	r2, r3
 800993c:	d86e      	bhi.n	8009a1c <osSemaphoreNew+0x108>
    mem = -1;
 800993e:	f04f 33ff 	mov.w	r3, #4294967295
 8009942:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d015      	beq.n	8009976 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	689b      	ldr	r3, [r3, #8]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d006      	beq.n	8009960 <osSemaphoreNew+0x4c>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	68db      	ldr	r3, [r3, #12]
 8009956:	2b4f      	cmp	r3, #79	; 0x4f
 8009958:	d902      	bls.n	8009960 <osSemaphoreNew+0x4c>
        mem = 1;
 800995a:	2301      	movs	r3, #1
 800995c:	61bb      	str	r3, [r7, #24]
 800995e:	e00c      	b.n	800997a <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	689b      	ldr	r3, [r3, #8]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d108      	bne.n	800997a <osSemaphoreNew+0x66>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	68db      	ldr	r3, [r3, #12]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d104      	bne.n	800997a <osSemaphoreNew+0x66>
          mem = 0;
 8009970:	2300      	movs	r3, #0
 8009972:	61bb      	str	r3, [r7, #24]
 8009974:	e001      	b.n	800997a <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009976:	2300      	movs	r3, #0
 8009978:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800997a:	69bb      	ldr	r3, [r7, #24]
 800997c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009980:	d04c      	beq.n	8009a1c <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	2b01      	cmp	r3, #1
 8009986:	d128      	bne.n	80099da <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009988:	69bb      	ldr	r3, [r7, #24]
 800998a:	2b01      	cmp	r3, #1
 800998c:	d10a      	bne.n	80099a4 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	689b      	ldr	r3, [r3, #8]
 8009992:	2203      	movs	r2, #3
 8009994:	9200      	str	r2, [sp, #0]
 8009996:	2200      	movs	r2, #0
 8009998:	2100      	movs	r1, #0
 800999a:	2001      	movs	r0, #1
 800999c:	f000 fb5c 	bl	800a058 <xQueueGenericCreateStatic>
 80099a0:	61f8      	str	r0, [r7, #28]
 80099a2:	e005      	b.n	80099b0 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80099a4:	2203      	movs	r2, #3
 80099a6:	2100      	movs	r1, #0
 80099a8:	2001      	movs	r0, #1
 80099aa:	f000 fbcd 	bl	800a148 <xQueueGenericCreate>
 80099ae:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80099b0:	69fb      	ldr	r3, [r7, #28]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d022      	beq.n	80099fc <osSemaphoreNew+0xe8>
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d01f      	beq.n	80099fc <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80099bc:	2300      	movs	r3, #0
 80099be:	2200      	movs	r2, #0
 80099c0:	2100      	movs	r1, #0
 80099c2:	69f8      	ldr	r0, [r7, #28]
 80099c4:	f000 fd3e 	bl	800a444 <xQueueGenericSend>
 80099c8:	4603      	mov	r3, r0
 80099ca:	2b01      	cmp	r3, #1
 80099cc:	d016      	beq.n	80099fc <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80099ce:	69f8      	ldr	r0, [r7, #28]
 80099d0:	f001 f9ca 	bl	800ad68 <vQueueDelete>
            hSemaphore = NULL;
 80099d4:	2300      	movs	r3, #0
 80099d6:	61fb      	str	r3, [r7, #28]
 80099d8:	e010      	b.n	80099fc <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80099da:	69bb      	ldr	r3, [r7, #24]
 80099dc:	2b01      	cmp	r3, #1
 80099de:	d108      	bne.n	80099f2 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	689b      	ldr	r3, [r3, #8]
 80099e4:	461a      	mov	r2, r3
 80099e6:	68b9      	ldr	r1, [r7, #8]
 80099e8:	68f8      	ldr	r0, [r7, #12]
 80099ea:	f000 fcc1 	bl	800a370 <xQueueCreateCountingSemaphoreStatic>
 80099ee:	61f8      	str	r0, [r7, #28]
 80099f0:	e004      	b.n	80099fc <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80099f2:	68b9      	ldr	r1, [r7, #8]
 80099f4:	68f8      	ldr	r0, [r7, #12]
 80099f6:	f000 fcf2 	bl	800a3de <xQueueCreateCountingSemaphore>
 80099fa:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80099fc:	69fb      	ldr	r3, [r7, #28]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d00c      	beq.n	8009a1c <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d003      	beq.n	8009a10 <osSemaphoreNew+0xfc>
          name = attr->name;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	617b      	str	r3, [r7, #20]
 8009a0e:	e001      	b.n	8009a14 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009a10:	2300      	movs	r3, #0
 8009a12:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009a14:	6979      	ldr	r1, [r7, #20]
 8009a16:	69f8      	ldr	r0, [r7, #28]
 8009a18:	f001 faf2 	bl	800b000 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009a1c:	69fb      	ldr	r3, [r7, #28]
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3720      	adds	r7, #32
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}
	...

08009a28 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b086      	sub	sp, #24
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
 8009a30:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009a36:	2300      	movs	r3, #0
 8009a38:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d103      	bne.n	8009a48 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8009a40:	f06f 0303 	mvn.w	r3, #3
 8009a44:	617b      	str	r3, [r7, #20]
 8009a46:	e039      	b.n	8009abc <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a48:	f3ef 8305 	mrs	r3, IPSR
 8009a4c:	60fb      	str	r3, [r7, #12]
  return(result);
 8009a4e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d022      	beq.n	8009a9a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d003      	beq.n	8009a62 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8009a5a:	f06f 0303 	mvn.w	r3, #3
 8009a5e:	617b      	str	r3, [r7, #20]
 8009a60:	e02c      	b.n	8009abc <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8009a62:	2300      	movs	r3, #0
 8009a64:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8009a66:	f107 0308 	add.w	r3, r7, #8
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	2100      	movs	r1, #0
 8009a6e:	6938      	ldr	r0, [r7, #16]
 8009a70:	f001 f8fa 	bl	800ac68 <xQueueReceiveFromISR>
 8009a74:	4603      	mov	r3, r0
 8009a76:	2b01      	cmp	r3, #1
 8009a78:	d003      	beq.n	8009a82 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8009a7a:	f06f 0302 	mvn.w	r3, #2
 8009a7e:	617b      	str	r3, [r7, #20]
 8009a80:	e01c      	b.n	8009abc <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d019      	beq.n	8009abc <osSemaphoreAcquire+0x94>
 8009a88:	4b0f      	ldr	r3, [pc, #60]	; (8009ac8 <osSemaphoreAcquire+0xa0>)
 8009a8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a8e:	601a      	str	r2, [r3, #0]
 8009a90:	f3bf 8f4f 	dsb	sy
 8009a94:	f3bf 8f6f 	isb	sy
 8009a98:	e010      	b.n	8009abc <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8009a9a:	6839      	ldr	r1, [r7, #0]
 8009a9c:	6938      	ldr	r0, [r7, #16]
 8009a9e:	f000 ffd7 	bl	800aa50 <xQueueSemaphoreTake>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	2b01      	cmp	r3, #1
 8009aa6:	d009      	beq.n	8009abc <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d003      	beq.n	8009ab6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8009aae:	f06f 0301 	mvn.w	r3, #1
 8009ab2:	617b      	str	r3, [r7, #20]
 8009ab4:	e002      	b.n	8009abc <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8009ab6:	f06f 0302 	mvn.w	r3, #2
 8009aba:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009abc:	697b      	ldr	r3, [r7, #20]
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3718      	adds	r7, #24
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}
 8009ac6:	bf00      	nop
 8009ac8:	e000ed04 	.word	0xe000ed04

08009acc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b086      	sub	sp, #24
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009ad8:	2300      	movs	r3, #0
 8009ada:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d103      	bne.n	8009aea <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8009ae2:	f06f 0303 	mvn.w	r3, #3
 8009ae6:	617b      	str	r3, [r7, #20]
 8009ae8:	e02c      	b.n	8009b44 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009aea:	f3ef 8305 	mrs	r3, IPSR
 8009aee:	60fb      	str	r3, [r7, #12]
  return(result);
 8009af0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d01a      	beq.n	8009b2c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8009af6:	2300      	movs	r3, #0
 8009af8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009afa:	f107 0308 	add.w	r3, r7, #8
 8009afe:	4619      	mov	r1, r3
 8009b00:	6938      	ldr	r0, [r7, #16]
 8009b02:	f000 fe38 	bl	800a776 <xQueueGiveFromISR>
 8009b06:	4603      	mov	r3, r0
 8009b08:	2b01      	cmp	r3, #1
 8009b0a:	d003      	beq.n	8009b14 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8009b0c:	f06f 0302 	mvn.w	r3, #2
 8009b10:	617b      	str	r3, [r7, #20]
 8009b12:	e017      	b.n	8009b44 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d014      	beq.n	8009b44 <osSemaphoreRelease+0x78>
 8009b1a:	4b0d      	ldr	r3, [pc, #52]	; (8009b50 <osSemaphoreRelease+0x84>)
 8009b1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b20:	601a      	str	r2, [r3, #0]
 8009b22:	f3bf 8f4f 	dsb	sy
 8009b26:	f3bf 8f6f 	isb	sy
 8009b2a:	e00b      	b.n	8009b44 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	2200      	movs	r2, #0
 8009b30:	2100      	movs	r1, #0
 8009b32:	6938      	ldr	r0, [r7, #16]
 8009b34:	f000 fc86 	bl	800a444 <xQueueGenericSend>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	2b01      	cmp	r3, #1
 8009b3c:	d002      	beq.n	8009b44 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8009b3e:	f06f 0302 	mvn.w	r3, #2
 8009b42:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009b44:	697b      	ldr	r3, [r7, #20]
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3718      	adds	r7, #24
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}
 8009b4e:	bf00      	nop
 8009b50:	e000ed04 	.word	0xe000ed04

08009b54 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b08a      	sub	sp, #40	; 0x28
 8009b58:	af02      	add	r7, sp, #8
 8009b5a:	60f8      	str	r0, [r7, #12]
 8009b5c:	60b9      	str	r1, [r7, #8]
 8009b5e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009b60:	2300      	movs	r3, #0
 8009b62:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b64:	f3ef 8305 	mrs	r3, IPSR
 8009b68:	613b      	str	r3, [r7, #16]
  return(result);
 8009b6a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d15f      	bne.n	8009c30 <osMessageQueueNew+0xdc>
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d05c      	beq.n	8009c30 <osMessageQueueNew+0xdc>
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d059      	beq.n	8009c30 <osMessageQueueNew+0xdc>
    mem = -1;
 8009b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8009b80:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d029      	beq.n	8009bdc <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	689b      	ldr	r3, [r3, #8]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d012      	beq.n	8009bb6 <osMessageQueueNew+0x62>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	68db      	ldr	r3, [r3, #12]
 8009b94:	2b4f      	cmp	r3, #79	; 0x4f
 8009b96:	d90e      	bls.n	8009bb6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d00a      	beq.n	8009bb6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	695a      	ldr	r2, [r3, #20]
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	68b9      	ldr	r1, [r7, #8]
 8009ba8:	fb01 f303 	mul.w	r3, r1, r3
 8009bac:	429a      	cmp	r2, r3
 8009bae:	d302      	bcc.n	8009bb6 <osMessageQueueNew+0x62>
        mem = 1;
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	61bb      	str	r3, [r7, #24]
 8009bb4:	e014      	b.n	8009be0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	689b      	ldr	r3, [r3, #8]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d110      	bne.n	8009be0 <osMessageQueueNew+0x8c>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	68db      	ldr	r3, [r3, #12]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d10c      	bne.n	8009be0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d108      	bne.n	8009be0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	695b      	ldr	r3, [r3, #20]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d104      	bne.n	8009be0 <osMessageQueueNew+0x8c>
          mem = 0;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	61bb      	str	r3, [r7, #24]
 8009bda:	e001      	b.n	8009be0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009be0:	69bb      	ldr	r3, [r7, #24]
 8009be2:	2b01      	cmp	r3, #1
 8009be4:	d10b      	bne.n	8009bfe <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	691a      	ldr	r2, [r3, #16]
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	689b      	ldr	r3, [r3, #8]
 8009bee:	2100      	movs	r1, #0
 8009bf0:	9100      	str	r1, [sp, #0]
 8009bf2:	68b9      	ldr	r1, [r7, #8]
 8009bf4:	68f8      	ldr	r0, [r7, #12]
 8009bf6:	f000 fa2f 	bl	800a058 <xQueueGenericCreateStatic>
 8009bfa:	61f8      	str	r0, [r7, #28]
 8009bfc:	e008      	b.n	8009c10 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009bfe:	69bb      	ldr	r3, [r7, #24]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d105      	bne.n	8009c10 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8009c04:	2200      	movs	r2, #0
 8009c06:	68b9      	ldr	r1, [r7, #8]
 8009c08:	68f8      	ldr	r0, [r7, #12]
 8009c0a:	f000 fa9d 	bl	800a148 <xQueueGenericCreate>
 8009c0e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009c10:	69fb      	ldr	r3, [r7, #28]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d00c      	beq.n	8009c30 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d003      	beq.n	8009c24 <osMessageQueueNew+0xd0>
        name = attr->name;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	617b      	str	r3, [r7, #20]
 8009c22:	e001      	b.n	8009c28 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009c24:	2300      	movs	r3, #0
 8009c26:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009c28:	6979      	ldr	r1, [r7, #20]
 8009c2a:	69f8      	ldr	r0, [r7, #28]
 8009c2c:	f001 f9e8 	bl	800b000 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009c30:	69fb      	ldr	r3, [r7, #28]
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	3720      	adds	r7, #32
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}
	...

08009c3c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b088      	sub	sp, #32
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	60f8      	str	r0, [r7, #12]
 8009c44:	60b9      	str	r1, [r7, #8]
 8009c46:	603b      	str	r3, [r7, #0]
 8009c48:	4613      	mov	r3, r2
 8009c4a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009c50:	2300      	movs	r3, #0
 8009c52:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c54:	f3ef 8305 	mrs	r3, IPSR
 8009c58:	617b      	str	r3, [r7, #20]
  return(result);
 8009c5a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d028      	beq.n	8009cb2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009c60:	69bb      	ldr	r3, [r7, #24]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d005      	beq.n	8009c72 <osMessageQueuePut+0x36>
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d002      	beq.n	8009c72 <osMessageQueuePut+0x36>
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d003      	beq.n	8009c7a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8009c72:	f06f 0303 	mvn.w	r3, #3
 8009c76:	61fb      	str	r3, [r7, #28]
 8009c78:	e038      	b.n	8009cec <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009c7e:	f107 0210 	add.w	r2, r7, #16
 8009c82:	2300      	movs	r3, #0
 8009c84:	68b9      	ldr	r1, [r7, #8]
 8009c86:	69b8      	ldr	r0, [r7, #24]
 8009c88:	f000 fcda 	bl	800a640 <xQueueGenericSendFromISR>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	2b01      	cmp	r3, #1
 8009c90:	d003      	beq.n	8009c9a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8009c92:	f06f 0302 	mvn.w	r3, #2
 8009c96:	61fb      	str	r3, [r7, #28]
 8009c98:	e028      	b.n	8009cec <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8009c9a:	693b      	ldr	r3, [r7, #16]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d025      	beq.n	8009cec <osMessageQueuePut+0xb0>
 8009ca0:	4b15      	ldr	r3, [pc, #84]	; (8009cf8 <osMessageQueuePut+0xbc>)
 8009ca2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ca6:	601a      	str	r2, [r3, #0]
 8009ca8:	f3bf 8f4f 	dsb	sy
 8009cac:	f3bf 8f6f 	isb	sy
 8009cb0:	e01c      	b.n	8009cec <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009cb2:	69bb      	ldr	r3, [r7, #24]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d002      	beq.n	8009cbe <osMessageQueuePut+0x82>
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d103      	bne.n	8009cc6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8009cbe:	f06f 0303 	mvn.w	r3, #3
 8009cc2:	61fb      	str	r3, [r7, #28]
 8009cc4:	e012      	b.n	8009cec <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	683a      	ldr	r2, [r7, #0]
 8009cca:	68b9      	ldr	r1, [r7, #8]
 8009ccc:	69b8      	ldr	r0, [r7, #24]
 8009cce:	f000 fbb9 	bl	800a444 <xQueueGenericSend>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	2b01      	cmp	r3, #1
 8009cd6:	d009      	beq.n	8009cec <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d003      	beq.n	8009ce6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8009cde:	f06f 0301 	mvn.w	r3, #1
 8009ce2:	61fb      	str	r3, [r7, #28]
 8009ce4:	e002      	b.n	8009cec <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8009ce6:	f06f 0302 	mvn.w	r3, #2
 8009cea:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009cec:	69fb      	ldr	r3, [r7, #28]
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3720      	adds	r7, #32
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}
 8009cf6:	bf00      	nop
 8009cf8:	e000ed04 	.word	0xe000ed04

08009cfc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b088      	sub	sp, #32
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	60f8      	str	r0, [r7, #12]
 8009d04:	60b9      	str	r1, [r7, #8]
 8009d06:	607a      	str	r2, [r7, #4]
 8009d08:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d12:	f3ef 8305 	mrs	r3, IPSR
 8009d16:	617b      	str	r3, [r7, #20]
  return(result);
 8009d18:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d028      	beq.n	8009d70 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009d1e:	69bb      	ldr	r3, [r7, #24]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d005      	beq.n	8009d30 <osMessageQueueGet+0x34>
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d002      	beq.n	8009d30 <osMessageQueueGet+0x34>
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d003      	beq.n	8009d38 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8009d30:	f06f 0303 	mvn.w	r3, #3
 8009d34:	61fb      	str	r3, [r7, #28]
 8009d36:	e037      	b.n	8009da8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009d3c:	f107 0310 	add.w	r3, r7, #16
 8009d40:	461a      	mov	r2, r3
 8009d42:	68b9      	ldr	r1, [r7, #8]
 8009d44:	69b8      	ldr	r0, [r7, #24]
 8009d46:	f000 ff8f 	bl	800ac68 <xQueueReceiveFromISR>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	2b01      	cmp	r3, #1
 8009d4e:	d003      	beq.n	8009d58 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8009d50:	f06f 0302 	mvn.w	r3, #2
 8009d54:	61fb      	str	r3, [r7, #28]
 8009d56:	e027      	b.n	8009da8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d024      	beq.n	8009da8 <osMessageQueueGet+0xac>
 8009d5e:	4b15      	ldr	r3, [pc, #84]	; (8009db4 <osMessageQueueGet+0xb8>)
 8009d60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d64:	601a      	str	r2, [r3, #0]
 8009d66:	f3bf 8f4f 	dsb	sy
 8009d6a:	f3bf 8f6f 	isb	sy
 8009d6e:	e01b      	b.n	8009da8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009d70:	69bb      	ldr	r3, [r7, #24]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d002      	beq.n	8009d7c <osMessageQueueGet+0x80>
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d103      	bne.n	8009d84 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8009d7c:	f06f 0303 	mvn.w	r3, #3
 8009d80:	61fb      	str	r3, [r7, #28]
 8009d82:	e011      	b.n	8009da8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009d84:	683a      	ldr	r2, [r7, #0]
 8009d86:	68b9      	ldr	r1, [r7, #8]
 8009d88:	69b8      	ldr	r0, [r7, #24]
 8009d8a:	f000 fd81 	bl	800a890 <xQueueReceive>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	2b01      	cmp	r3, #1
 8009d92:	d009      	beq.n	8009da8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d003      	beq.n	8009da2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8009d9a:	f06f 0301 	mvn.w	r3, #1
 8009d9e:	61fb      	str	r3, [r7, #28]
 8009da0:	e002      	b.n	8009da8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8009da2:	f06f 0302 	mvn.w	r3, #2
 8009da6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009da8:	69fb      	ldr	r3, [r7, #28]
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3720      	adds	r7, #32
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}
 8009db2:	bf00      	nop
 8009db4:	e000ed04 	.word	0xe000ed04

08009db8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009db8:	b480      	push	{r7}
 8009dba:	b085      	sub	sp, #20
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	60f8      	str	r0, [r7, #12]
 8009dc0:	60b9      	str	r1, [r7, #8]
 8009dc2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	4a07      	ldr	r2, [pc, #28]	; (8009de4 <vApplicationGetIdleTaskMemory+0x2c>)
 8009dc8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	4a06      	ldr	r2, [pc, #24]	; (8009de8 <vApplicationGetIdleTaskMemory+0x30>)
 8009dce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2280      	movs	r2, #128	; 0x80
 8009dd4:	601a      	str	r2, [r3, #0]
}
 8009dd6:	bf00      	nop
 8009dd8:	3714      	adds	r7, #20
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de0:	4770      	bx	lr
 8009de2:	bf00      	nop
 8009de4:	20000740 	.word	0x20000740
 8009de8:	2000079c 	.word	0x2000079c

08009dec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009dec:	b480      	push	{r7}
 8009dee:	b085      	sub	sp, #20
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	60f8      	str	r0, [r7, #12]
 8009df4:	60b9      	str	r1, [r7, #8]
 8009df6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	4a07      	ldr	r2, [pc, #28]	; (8009e18 <vApplicationGetTimerTaskMemory+0x2c>)
 8009dfc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	4a06      	ldr	r2, [pc, #24]	; (8009e1c <vApplicationGetTimerTaskMemory+0x30>)
 8009e02:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009e0a:	601a      	str	r2, [r3, #0]
}
 8009e0c:	bf00      	nop
 8009e0e:	3714      	adds	r7, #20
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr
 8009e18:	2000099c 	.word	0x2000099c
 8009e1c:	200009f8 	.word	0x200009f8

08009e20 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009e20:	b480      	push	{r7}
 8009e22:	b083      	sub	sp, #12
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f103 0208 	add.w	r2, r3, #8
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f04f 32ff 	mov.w	r2, #4294967295
 8009e38:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f103 0208 	add.w	r2, r3, #8
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f103 0208 	add.w	r2, r3, #8
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2200      	movs	r2, #0
 8009e52:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009e54:	bf00      	nop
 8009e56:	370c      	adds	r7, #12
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5e:	4770      	bx	lr

08009e60 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009e60:	b480      	push	{r7}
 8009e62:	b083      	sub	sp, #12
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009e6e:	bf00      	nop
 8009e70:	370c      	adds	r7, #12
 8009e72:	46bd      	mov	sp, r7
 8009e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e78:	4770      	bx	lr

08009e7a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e7a:	b480      	push	{r7}
 8009e7c:	b085      	sub	sp, #20
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	6078      	str	r0, [r7, #4]
 8009e82:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	68fa      	ldr	r2, [r7, #12]
 8009e8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	689a      	ldr	r2, [r3, #8]
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	689b      	ldr	r3, [r3, #8]
 8009e9c:	683a      	ldr	r2, [r7, #0]
 8009e9e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	683a      	ldr	r2, [r7, #0]
 8009ea4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	687a      	ldr	r2, [r7, #4]
 8009eaa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	1c5a      	adds	r2, r3, #1
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	601a      	str	r2, [r3, #0]
}
 8009eb6:	bf00      	nop
 8009eb8:	3714      	adds	r7, #20
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec0:	4770      	bx	lr

08009ec2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009ec2:	b480      	push	{r7}
 8009ec4:	b085      	sub	sp, #20
 8009ec6:	af00      	add	r7, sp, #0
 8009ec8:	6078      	str	r0, [r7, #4]
 8009eca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ed8:	d103      	bne.n	8009ee2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	691b      	ldr	r3, [r3, #16]
 8009ede:	60fb      	str	r3, [r7, #12]
 8009ee0:	e00c      	b.n	8009efc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	3308      	adds	r3, #8
 8009ee6:	60fb      	str	r3, [r7, #12]
 8009ee8:	e002      	b.n	8009ef0 <vListInsert+0x2e>
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	685b      	ldr	r3, [r3, #4]
 8009eee:	60fb      	str	r3, [r7, #12]
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	685b      	ldr	r3, [r3, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	68ba      	ldr	r2, [r7, #8]
 8009ef8:	429a      	cmp	r2, r3
 8009efa:	d2f6      	bcs.n	8009eea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	685a      	ldr	r2, [r3, #4]
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	685b      	ldr	r3, [r3, #4]
 8009f08:	683a      	ldr	r2, [r7, #0]
 8009f0a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	68fa      	ldr	r2, [r7, #12]
 8009f10:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	683a      	ldr	r2, [r7, #0]
 8009f16:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	687a      	ldr	r2, [r7, #4]
 8009f1c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	1c5a      	adds	r2, r3, #1
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	601a      	str	r2, [r3, #0]
}
 8009f28:	bf00      	nop
 8009f2a:	3714      	adds	r7, #20
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f32:	4770      	bx	lr

08009f34 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009f34:	b480      	push	{r7}
 8009f36:	b085      	sub	sp, #20
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	691b      	ldr	r3, [r3, #16]
 8009f40:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	685b      	ldr	r3, [r3, #4]
 8009f46:	687a      	ldr	r2, [r7, #4]
 8009f48:	6892      	ldr	r2, [r2, #8]
 8009f4a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	689b      	ldr	r3, [r3, #8]
 8009f50:	687a      	ldr	r2, [r7, #4]
 8009f52:	6852      	ldr	r2, [r2, #4]
 8009f54:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	685b      	ldr	r3, [r3, #4]
 8009f5a:	687a      	ldr	r2, [r7, #4]
 8009f5c:	429a      	cmp	r2, r3
 8009f5e:	d103      	bne.n	8009f68 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	689a      	ldr	r2, [r3, #8]
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	1e5a      	subs	r2, r3, #1
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	681b      	ldr	r3, [r3, #0]
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	3714      	adds	r7, #20
 8009f80:	46bd      	mov	sp, r7
 8009f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f86:	4770      	bx	lr

08009f88 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b084      	sub	sp, #16
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
 8009f90:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d10a      	bne.n	8009fb2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa0:	f383 8811 	msr	BASEPRI, r3
 8009fa4:	f3bf 8f6f 	isb	sy
 8009fa8:	f3bf 8f4f 	dsb	sy
 8009fac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009fae:	bf00      	nop
 8009fb0:	e7fe      	b.n	8009fb0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009fb2:	f002 fec7 	bl	800cd44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	681a      	ldr	r2, [r3, #0]
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fbe:	68f9      	ldr	r1, [r7, #12]
 8009fc0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009fc2:	fb01 f303 	mul.w	r3, r1, r3
 8009fc6:	441a      	add	r2, r3
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	681a      	ldr	r2, [r3, #0]
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	681a      	ldr	r2, [r3, #0]
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fe2:	3b01      	subs	r3, #1
 8009fe4:	68f9      	ldr	r1, [r7, #12]
 8009fe6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009fe8:	fb01 f303 	mul.w	r3, r1, r3
 8009fec:	441a      	add	r2, r3
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	22ff      	movs	r2, #255	; 0xff
 8009ff6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	22ff      	movs	r2, #255	; 0xff
 8009ffe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d114      	bne.n	800a032 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	691b      	ldr	r3, [r3, #16]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d01a      	beq.n	800a046 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	3310      	adds	r3, #16
 800a014:	4618      	mov	r0, r3
 800a016:	f001 fdb3 	bl	800bb80 <xTaskRemoveFromEventList>
 800a01a:	4603      	mov	r3, r0
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d012      	beq.n	800a046 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a020:	4b0c      	ldr	r3, [pc, #48]	; (800a054 <xQueueGenericReset+0xcc>)
 800a022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a026:	601a      	str	r2, [r3, #0]
 800a028:	f3bf 8f4f 	dsb	sy
 800a02c:	f3bf 8f6f 	isb	sy
 800a030:	e009      	b.n	800a046 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	3310      	adds	r3, #16
 800a036:	4618      	mov	r0, r3
 800a038:	f7ff fef2 	bl	8009e20 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	3324      	adds	r3, #36	; 0x24
 800a040:	4618      	mov	r0, r3
 800a042:	f7ff feed 	bl	8009e20 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a046:	f002 fead 	bl	800cda4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a04a:	2301      	movs	r3, #1
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3710      	adds	r7, #16
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}
 800a054:	e000ed04 	.word	0xe000ed04

0800a058 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b08e      	sub	sp, #56	; 0x38
 800a05c:	af02      	add	r7, sp, #8
 800a05e:	60f8      	str	r0, [r7, #12]
 800a060:	60b9      	str	r1, [r7, #8]
 800a062:	607a      	str	r2, [r7, #4]
 800a064:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d10a      	bne.n	800a082 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a06c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a070:	f383 8811 	msr	BASEPRI, r3
 800a074:	f3bf 8f6f 	isb	sy
 800a078:	f3bf 8f4f 	dsb	sy
 800a07c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a07e:	bf00      	nop
 800a080:	e7fe      	b.n	800a080 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d10a      	bne.n	800a09e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a08c:	f383 8811 	msr	BASEPRI, r3
 800a090:	f3bf 8f6f 	isb	sy
 800a094:	f3bf 8f4f 	dsb	sy
 800a098:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a09a:	bf00      	nop
 800a09c:	e7fe      	b.n	800a09c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d002      	beq.n	800a0aa <xQueueGenericCreateStatic+0x52>
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d001      	beq.n	800a0ae <xQueueGenericCreateStatic+0x56>
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	e000      	b.n	800a0b0 <xQueueGenericCreateStatic+0x58>
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d10a      	bne.n	800a0ca <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a0b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b8:	f383 8811 	msr	BASEPRI, r3
 800a0bc:	f3bf 8f6f 	isb	sy
 800a0c0:	f3bf 8f4f 	dsb	sy
 800a0c4:	623b      	str	r3, [r7, #32]
}
 800a0c6:	bf00      	nop
 800a0c8:	e7fe      	b.n	800a0c8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d102      	bne.n	800a0d6 <xQueueGenericCreateStatic+0x7e>
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d101      	bne.n	800a0da <xQueueGenericCreateStatic+0x82>
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	e000      	b.n	800a0dc <xQueueGenericCreateStatic+0x84>
 800a0da:	2300      	movs	r3, #0
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d10a      	bne.n	800a0f6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e4:	f383 8811 	msr	BASEPRI, r3
 800a0e8:	f3bf 8f6f 	isb	sy
 800a0ec:	f3bf 8f4f 	dsb	sy
 800a0f0:	61fb      	str	r3, [r7, #28]
}
 800a0f2:	bf00      	nop
 800a0f4:	e7fe      	b.n	800a0f4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a0f6:	2350      	movs	r3, #80	; 0x50
 800a0f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	2b50      	cmp	r3, #80	; 0x50
 800a0fe:	d00a      	beq.n	800a116 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a104:	f383 8811 	msr	BASEPRI, r3
 800a108:	f3bf 8f6f 	isb	sy
 800a10c:	f3bf 8f4f 	dsb	sy
 800a110:	61bb      	str	r3, [r7, #24]
}
 800a112:	bf00      	nop
 800a114:	e7fe      	b.n	800a114 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a116:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a11c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d00d      	beq.n	800a13e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a124:	2201      	movs	r2, #1
 800a126:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a12a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a12e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a130:	9300      	str	r3, [sp, #0]
 800a132:	4613      	mov	r3, r2
 800a134:	687a      	ldr	r2, [r7, #4]
 800a136:	68b9      	ldr	r1, [r7, #8]
 800a138:	68f8      	ldr	r0, [r7, #12]
 800a13a:	f000 f83f 	bl	800a1bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a13e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a140:	4618      	mov	r0, r3
 800a142:	3730      	adds	r7, #48	; 0x30
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}

0800a148 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b08a      	sub	sp, #40	; 0x28
 800a14c:	af02      	add	r7, sp, #8
 800a14e:	60f8      	str	r0, [r7, #12]
 800a150:	60b9      	str	r1, [r7, #8]
 800a152:	4613      	mov	r3, r2
 800a154:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d10a      	bne.n	800a172 <xQueueGenericCreate+0x2a>
	__asm volatile
 800a15c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a160:	f383 8811 	msr	BASEPRI, r3
 800a164:	f3bf 8f6f 	isb	sy
 800a168:	f3bf 8f4f 	dsb	sy
 800a16c:	613b      	str	r3, [r7, #16]
}
 800a16e:	bf00      	nop
 800a170:	e7fe      	b.n	800a170 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	68ba      	ldr	r2, [r7, #8]
 800a176:	fb02 f303 	mul.w	r3, r2, r3
 800a17a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a17c:	69fb      	ldr	r3, [r7, #28]
 800a17e:	3350      	adds	r3, #80	; 0x50
 800a180:	4618      	mov	r0, r3
 800a182:	f002 ff01 	bl	800cf88 <pvPortMalloc>
 800a186:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a188:	69bb      	ldr	r3, [r7, #24]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d011      	beq.n	800a1b2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a18e:	69bb      	ldr	r3, [r7, #24]
 800a190:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	3350      	adds	r3, #80	; 0x50
 800a196:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a198:	69bb      	ldr	r3, [r7, #24]
 800a19a:	2200      	movs	r2, #0
 800a19c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a1a0:	79fa      	ldrb	r2, [r7, #7]
 800a1a2:	69bb      	ldr	r3, [r7, #24]
 800a1a4:	9300      	str	r3, [sp, #0]
 800a1a6:	4613      	mov	r3, r2
 800a1a8:	697a      	ldr	r2, [r7, #20]
 800a1aa:	68b9      	ldr	r1, [r7, #8]
 800a1ac:	68f8      	ldr	r0, [r7, #12]
 800a1ae:	f000 f805 	bl	800a1bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a1b2:	69bb      	ldr	r3, [r7, #24]
	}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	3720      	adds	r7, #32
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}

0800a1bc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b084      	sub	sp, #16
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	60f8      	str	r0, [r7, #12]
 800a1c4:	60b9      	str	r1, [r7, #8]
 800a1c6:	607a      	str	r2, [r7, #4]
 800a1c8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d103      	bne.n	800a1d8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a1d0:	69bb      	ldr	r3, [r7, #24]
 800a1d2:	69ba      	ldr	r2, [r7, #24]
 800a1d4:	601a      	str	r2, [r3, #0]
 800a1d6:	e002      	b.n	800a1de <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a1d8:	69bb      	ldr	r3, [r7, #24]
 800a1da:	687a      	ldr	r2, [r7, #4]
 800a1dc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a1de:	69bb      	ldr	r3, [r7, #24]
 800a1e0:	68fa      	ldr	r2, [r7, #12]
 800a1e2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a1e4:	69bb      	ldr	r3, [r7, #24]
 800a1e6:	68ba      	ldr	r2, [r7, #8]
 800a1e8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a1ea:	2101      	movs	r1, #1
 800a1ec:	69b8      	ldr	r0, [r7, #24]
 800a1ee:	f7ff fecb 	bl	8009f88 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a1f2:	69bb      	ldr	r3, [r7, #24]
 800a1f4:	78fa      	ldrb	r2, [r7, #3]
 800a1f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a1fa:	bf00      	nop
 800a1fc:	3710      	adds	r7, #16
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}

0800a202 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a202:	b580      	push	{r7, lr}
 800a204:	b082      	sub	sp, #8
 800a206:	af00      	add	r7, sp, #0
 800a208:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d00e      	beq.n	800a22e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2200      	movs	r2, #0
 800a214:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2200      	movs	r2, #0
 800a21a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2200      	movs	r2, #0
 800a220:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a222:	2300      	movs	r3, #0
 800a224:	2200      	movs	r2, #0
 800a226:	2100      	movs	r1, #0
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f000 f90b 	bl	800a444 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a22e:	bf00      	nop
 800a230:	3708      	adds	r7, #8
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}

0800a236 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a236:	b580      	push	{r7, lr}
 800a238:	b086      	sub	sp, #24
 800a23a:	af00      	add	r7, sp, #0
 800a23c:	4603      	mov	r3, r0
 800a23e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a240:	2301      	movs	r3, #1
 800a242:	617b      	str	r3, [r7, #20]
 800a244:	2300      	movs	r3, #0
 800a246:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a248:	79fb      	ldrb	r3, [r7, #7]
 800a24a:	461a      	mov	r2, r3
 800a24c:	6939      	ldr	r1, [r7, #16]
 800a24e:	6978      	ldr	r0, [r7, #20]
 800a250:	f7ff ff7a 	bl	800a148 <xQueueGenericCreate>
 800a254:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a256:	68f8      	ldr	r0, [r7, #12]
 800a258:	f7ff ffd3 	bl	800a202 <prvInitialiseMutex>

		return xNewQueue;
 800a25c:	68fb      	ldr	r3, [r7, #12]
	}
 800a25e:	4618      	mov	r0, r3
 800a260:	3718      	adds	r7, #24
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}

0800a266 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a266:	b580      	push	{r7, lr}
 800a268:	b088      	sub	sp, #32
 800a26a:	af02      	add	r7, sp, #8
 800a26c:	4603      	mov	r3, r0
 800a26e:	6039      	str	r1, [r7, #0]
 800a270:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a272:	2301      	movs	r3, #1
 800a274:	617b      	str	r3, [r7, #20]
 800a276:	2300      	movs	r3, #0
 800a278:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a27a:	79fb      	ldrb	r3, [r7, #7]
 800a27c:	9300      	str	r3, [sp, #0]
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	2200      	movs	r2, #0
 800a282:	6939      	ldr	r1, [r7, #16]
 800a284:	6978      	ldr	r0, [r7, #20]
 800a286:	f7ff fee7 	bl	800a058 <xQueueGenericCreateStatic>
 800a28a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a28c:	68f8      	ldr	r0, [r7, #12]
 800a28e:	f7ff ffb8 	bl	800a202 <prvInitialiseMutex>

		return xNewQueue;
 800a292:	68fb      	ldr	r3, [r7, #12]
	}
 800a294:	4618      	mov	r0, r3
 800a296:	3718      	adds	r7, #24
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}

0800a29c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800a29c:	b590      	push	{r4, r7, lr}
 800a29e:	b087      	sub	sp, #28
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d10a      	bne.n	800a2c4 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800a2ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b2:	f383 8811 	msr	BASEPRI, r3
 800a2b6:	f3bf 8f6f 	isb	sy
 800a2ba:	f3bf 8f4f 	dsb	sy
 800a2be:	60fb      	str	r3, [r7, #12]
}
 800a2c0:	bf00      	nop
 800a2c2:	e7fe      	b.n	800a2c2 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a2c4:	693b      	ldr	r3, [r7, #16]
 800a2c6:	689c      	ldr	r4, [r3, #8]
 800a2c8:	f001 fe18 	bl	800befc <xTaskGetCurrentTaskHandle>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	429c      	cmp	r4, r3
 800a2d0:	d111      	bne.n	800a2f6 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	68db      	ldr	r3, [r3, #12]
 800a2d6:	1e5a      	subs	r2, r3, #1
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800a2dc:	693b      	ldr	r3, [r7, #16]
 800a2de:	68db      	ldr	r3, [r3, #12]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d105      	bne.n	800a2f0 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	2100      	movs	r1, #0
 800a2ea:	6938      	ldr	r0, [r7, #16]
 800a2ec:	f000 f8aa 	bl	800a444 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	617b      	str	r3, [r7, #20]
 800a2f4:	e001      	b.n	800a2fa <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800a2fa:	697b      	ldr	r3, [r7, #20]
	}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	371c      	adds	r7, #28
 800a300:	46bd      	mov	sp, r7
 800a302:	bd90      	pop	{r4, r7, pc}

0800a304 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800a304:	b590      	push	{r4, r7, lr}
 800a306:	b087      	sub	sp, #28
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
 800a30c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d10a      	bne.n	800a32e <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800a318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a31c:	f383 8811 	msr	BASEPRI, r3
 800a320:	f3bf 8f6f 	isb	sy
 800a324:	f3bf 8f4f 	dsb	sy
 800a328:	60fb      	str	r3, [r7, #12]
}
 800a32a:	bf00      	nop
 800a32c:	e7fe      	b.n	800a32c <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	689c      	ldr	r4, [r3, #8]
 800a332:	f001 fde3 	bl	800befc <xTaskGetCurrentTaskHandle>
 800a336:	4603      	mov	r3, r0
 800a338:	429c      	cmp	r4, r3
 800a33a:	d107      	bne.n	800a34c <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	68db      	ldr	r3, [r3, #12]
 800a340:	1c5a      	adds	r2, r3, #1
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800a346:	2301      	movs	r3, #1
 800a348:	617b      	str	r3, [r7, #20]
 800a34a:	e00c      	b.n	800a366 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800a34c:	6839      	ldr	r1, [r7, #0]
 800a34e:	6938      	ldr	r0, [r7, #16]
 800a350:	f000 fb7e 	bl	800aa50 <xQueueSemaphoreTake>
 800a354:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d004      	beq.n	800a366 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	68db      	ldr	r3, [r3, #12]
 800a360:	1c5a      	adds	r2, r3, #1
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800a366:	697b      	ldr	r3, [r7, #20]
	}
 800a368:	4618      	mov	r0, r3
 800a36a:	371c      	adds	r7, #28
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd90      	pop	{r4, r7, pc}

0800a370 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a370:	b580      	push	{r7, lr}
 800a372:	b08a      	sub	sp, #40	; 0x28
 800a374:	af02      	add	r7, sp, #8
 800a376:	60f8      	str	r0, [r7, #12]
 800a378:	60b9      	str	r1, [r7, #8]
 800a37a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d10a      	bne.n	800a398 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800a382:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a386:	f383 8811 	msr	BASEPRI, r3
 800a38a:	f3bf 8f6f 	isb	sy
 800a38e:	f3bf 8f4f 	dsb	sy
 800a392:	61bb      	str	r3, [r7, #24]
}
 800a394:	bf00      	nop
 800a396:	e7fe      	b.n	800a396 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a398:	68ba      	ldr	r2, [r7, #8]
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	429a      	cmp	r2, r3
 800a39e:	d90a      	bls.n	800a3b6 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800a3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a4:	f383 8811 	msr	BASEPRI, r3
 800a3a8:	f3bf 8f6f 	isb	sy
 800a3ac:	f3bf 8f4f 	dsb	sy
 800a3b0:	617b      	str	r3, [r7, #20]
}
 800a3b2:	bf00      	nop
 800a3b4:	e7fe      	b.n	800a3b4 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a3b6:	2302      	movs	r3, #2
 800a3b8:	9300      	str	r3, [sp, #0]
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	2100      	movs	r1, #0
 800a3c0:	68f8      	ldr	r0, [r7, #12]
 800a3c2:	f7ff fe49 	bl	800a058 <xQueueGenericCreateStatic>
 800a3c6:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a3c8:	69fb      	ldr	r3, [r7, #28]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d002      	beq.n	800a3d4 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a3ce:	69fb      	ldr	r3, [r7, #28]
 800a3d0:	68ba      	ldr	r2, [r7, #8]
 800a3d2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a3d4:	69fb      	ldr	r3, [r7, #28]
	}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3720      	adds	r7, #32
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}

0800a3de <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a3de:	b580      	push	{r7, lr}
 800a3e0:	b086      	sub	sp, #24
 800a3e2:	af00      	add	r7, sp, #0
 800a3e4:	6078      	str	r0, [r7, #4]
 800a3e6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d10a      	bne.n	800a404 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800a3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f2:	f383 8811 	msr	BASEPRI, r3
 800a3f6:	f3bf 8f6f 	isb	sy
 800a3fa:	f3bf 8f4f 	dsb	sy
 800a3fe:	613b      	str	r3, [r7, #16]
}
 800a400:	bf00      	nop
 800a402:	e7fe      	b.n	800a402 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a404:	683a      	ldr	r2, [r7, #0]
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	429a      	cmp	r2, r3
 800a40a:	d90a      	bls.n	800a422 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800a40c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a410:	f383 8811 	msr	BASEPRI, r3
 800a414:	f3bf 8f6f 	isb	sy
 800a418:	f3bf 8f4f 	dsb	sy
 800a41c:	60fb      	str	r3, [r7, #12]
}
 800a41e:	bf00      	nop
 800a420:	e7fe      	b.n	800a420 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a422:	2202      	movs	r2, #2
 800a424:	2100      	movs	r1, #0
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f7ff fe8e 	bl	800a148 <xQueueGenericCreate>
 800a42c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d002      	beq.n	800a43a <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	683a      	ldr	r2, [r7, #0]
 800a438:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a43a:	697b      	ldr	r3, [r7, #20]
	}
 800a43c:	4618      	mov	r0, r3
 800a43e:	3718      	adds	r7, #24
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b08e      	sub	sp, #56	; 0x38
 800a448:	af00      	add	r7, sp, #0
 800a44a:	60f8      	str	r0, [r7, #12]
 800a44c:	60b9      	str	r1, [r7, #8]
 800a44e:	607a      	str	r2, [r7, #4]
 800a450:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a452:	2300      	movs	r3, #0
 800a454:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a45a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d10a      	bne.n	800a476 <xQueueGenericSend+0x32>
	__asm volatile
 800a460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a464:	f383 8811 	msr	BASEPRI, r3
 800a468:	f3bf 8f6f 	isb	sy
 800a46c:	f3bf 8f4f 	dsb	sy
 800a470:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a472:	bf00      	nop
 800a474:	e7fe      	b.n	800a474 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d103      	bne.n	800a484 <xQueueGenericSend+0x40>
 800a47c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a47e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a480:	2b00      	cmp	r3, #0
 800a482:	d101      	bne.n	800a488 <xQueueGenericSend+0x44>
 800a484:	2301      	movs	r3, #1
 800a486:	e000      	b.n	800a48a <xQueueGenericSend+0x46>
 800a488:	2300      	movs	r3, #0
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d10a      	bne.n	800a4a4 <xQueueGenericSend+0x60>
	__asm volatile
 800a48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a492:	f383 8811 	msr	BASEPRI, r3
 800a496:	f3bf 8f6f 	isb	sy
 800a49a:	f3bf 8f4f 	dsb	sy
 800a49e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a4a0:	bf00      	nop
 800a4a2:	e7fe      	b.n	800a4a2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	2b02      	cmp	r3, #2
 800a4a8:	d103      	bne.n	800a4b2 <xQueueGenericSend+0x6e>
 800a4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4ae:	2b01      	cmp	r3, #1
 800a4b0:	d101      	bne.n	800a4b6 <xQueueGenericSend+0x72>
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	e000      	b.n	800a4b8 <xQueueGenericSend+0x74>
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d10a      	bne.n	800a4d2 <xQueueGenericSend+0x8e>
	__asm volatile
 800a4bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c0:	f383 8811 	msr	BASEPRI, r3
 800a4c4:	f3bf 8f6f 	isb	sy
 800a4c8:	f3bf 8f4f 	dsb	sy
 800a4cc:	623b      	str	r3, [r7, #32]
}
 800a4ce:	bf00      	nop
 800a4d0:	e7fe      	b.n	800a4d0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a4d2:	f001 fd23 	bl	800bf1c <xTaskGetSchedulerState>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d102      	bne.n	800a4e2 <xQueueGenericSend+0x9e>
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d101      	bne.n	800a4e6 <xQueueGenericSend+0xa2>
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	e000      	b.n	800a4e8 <xQueueGenericSend+0xa4>
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d10a      	bne.n	800a502 <xQueueGenericSend+0xbe>
	__asm volatile
 800a4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f0:	f383 8811 	msr	BASEPRI, r3
 800a4f4:	f3bf 8f6f 	isb	sy
 800a4f8:	f3bf 8f4f 	dsb	sy
 800a4fc:	61fb      	str	r3, [r7, #28]
}
 800a4fe:	bf00      	nop
 800a500:	e7fe      	b.n	800a500 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a502:	f002 fc1f 	bl	800cd44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a508:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a50a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a50c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a50e:	429a      	cmp	r2, r3
 800a510:	d302      	bcc.n	800a518 <xQueueGenericSend+0xd4>
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	2b02      	cmp	r3, #2
 800a516:	d129      	bne.n	800a56c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a518:	683a      	ldr	r2, [r7, #0]
 800a51a:	68b9      	ldr	r1, [r7, #8]
 800a51c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a51e:	f000 fc5e 	bl	800adde <prvCopyDataToQueue>
 800a522:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d010      	beq.n	800a54e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a52c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a52e:	3324      	adds	r3, #36	; 0x24
 800a530:	4618      	mov	r0, r3
 800a532:	f001 fb25 	bl	800bb80 <xTaskRemoveFromEventList>
 800a536:	4603      	mov	r3, r0
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d013      	beq.n	800a564 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a53c:	4b3f      	ldr	r3, [pc, #252]	; (800a63c <xQueueGenericSend+0x1f8>)
 800a53e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a542:	601a      	str	r2, [r3, #0]
 800a544:	f3bf 8f4f 	dsb	sy
 800a548:	f3bf 8f6f 	isb	sy
 800a54c:	e00a      	b.n	800a564 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a550:	2b00      	cmp	r3, #0
 800a552:	d007      	beq.n	800a564 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a554:	4b39      	ldr	r3, [pc, #228]	; (800a63c <xQueueGenericSend+0x1f8>)
 800a556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a55a:	601a      	str	r2, [r3, #0]
 800a55c:	f3bf 8f4f 	dsb	sy
 800a560:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a564:	f002 fc1e 	bl	800cda4 <vPortExitCritical>
				return pdPASS;
 800a568:	2301      	movs	r3, #1
 800a56a:	e063      	b.n	800a634 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d103      	bne.n	800a57a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a572:	f002 fc17 	bl	800cda4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a576:	2300      	movs	r3, #0
 800a578:	e05c      	b.n	800a634 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a57a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d106      	bne.n	800a58e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a580:	f107 0314 	add.w	r3, r7, #20
 800a584:	4618      	mov	r0, r3
 800a586:	f001 fb5f 	bl	800bc48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a58a:	2301      	movs	r3, #1
 800a58c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a58e:	f002 fc09 	bl	800cda4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a592:	f001 f8d1 	bl	800b738 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a596:	f002 fbd5 	bl	800cd44 <vPortEnterCritical>
 800a59a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a59c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a5a0:	b25b      	sxtb	r3, r3
 800a5a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5a6:	d103      	bne.n	800a5b0 <xQueueGenericSend+0x16c>
 800a5a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a5b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a5b6:	b25b      	sxtb	r3, r3
 800a5b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5bc:	d103      	bne.n	800a5c6 <xQueueGenericSend+0x182>
 800a5be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a5c6:	f002 fbed 	bl	800cda4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a5ca:	1d3a      	adds	r2, r7, #4
 800a5cc:	f107 0314 	add.w	r3, r7, #20
 800a5d0:	4611      	mov	r1, r2
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f001 fb4e 	bl	800bc74 <xTaskCheckForTimeOut>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d124      	bne.n	800a628 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a5de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a5e0:	f000 fcf5 	bl	800afce <prvIsQueueFull>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d018      	beq.n	800a61c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a5ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ec:	3310      	adds	r3, #16
 800a5ee:	687a      	ldr	r2, [r7, #4]
 800a5f0:	4611      	mov	r1, r2
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f001 fa74 	bl	800bae0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a5f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a5fa:	f000 fc80 	bl	800aefe <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a5fe:	f001 f8a9 	bl	800b754 <xTaskResumeAll>
 800a602:	4603      	mov	r3, r0
 800a604:	2b00      	cmp	r3, #0
 800a606:	f47f af7c 	bne.w	800a502 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a60a:	4b0c      	ldr	r3, [pc, #48]	; (800a63c <xQueueGenericSend+0x1f8>)
 800a60c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a610:	601a      	str	r2, [r3, #0]
 800a612:	f3bf 8f4f 	dsb	sy
 800a616:	f3bf 8f6f 	isb	sy
 800a61a:	e772      	b.n	800a502 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a61c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a61e:	f000 fc6e 	bl	800aefe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a622:	f001 f897 	bl	800b754 <xTaskResumeAll>
 800a626:	e76c      	b.n	800a502 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a628:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a62a:	f000 fc68 	bl	800aefe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a62e:	f001 f891 	bl	800b754 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a632:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a634:	4618      	mov	r0, r3
 800a636:	3738      	adds	r7, #56	; 0x38
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}
 800a63c:	e000ed04 	.word	0xe000ed04

0800a640 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b090      	sub	sp, #64	; 0x40
 800a644:	af00      	add	r7, sp, #0
 800a646:	60f8      	str	r0, [r7, #12]
 800a648:	60b9      	str	r1, [r7, #8]
 800a64a:	607a      	str	r2, [r7, #4]
 800a64c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a654:	2b00      	cmp	r3, #0
 800a656:	d10a      	bne.n	800a66e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a65c:	f383 8811 	msr	BASEPRI, r3
 800a660:	f3bf 8f6f 	isb	sy
 800a664:	f3bf 8f4f 	dsb	sy
 800a668:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a66a:	bf00      	nop
 800a66c:	e7fe      	b.n	800a66c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d103      	bne.n	800a67c <xQueueGenericSendFromISR+0x3c>
 800a674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d101      	bne.n	800a680 <xQueueGenericSendFromISR+0x40>
 800a67c:	2301      	movs	r3, #1
 800a67e:	e000      	b.n	800a682 <xQueueGenericSendFromISR+0x42>
 800a680:	2300      	movs	r3, #0
 800a682:	2b00      	cmp	r3, #0
 800a684:	d10a      	bne.n	800a69c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a68a:	f383 8811 	msr	BASEPRI, r3
 800a68e:	f3bf 8f6f 	isb	sy
 800a692:	f3bf 8f4f 	dsb	sy
 800a696:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a698:	bf00      	nop
 800a69a:	e7fe      	b.n	800a69a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	2b02      	cmp	r3, #2
 800a6a0:	d103      	bne.n	800a6aa <xQueueGenericSendFromISR+0x6a>
 800a6a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6a6:	2b01      	cmp	r3, #1
 800a6a8:	d101      	bne.n	800a6ae <xQueueGenericSendFromISR+0x6e>
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	e000      	b.n	800a6b0 <xQueueGenericSendFromISR+0x70>
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d10a      	bne.n	800a6ca <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a6b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b8:	f383 8811 	msr	BASEPRI, r3
 800a6bc:	f3bf 8f6f 	isb	sy
 800a6c0:	f3bf 8f4f 	dsb	sy
 800a6c4:	623b      	str	r3, [r7, #32]
}
 800a6c6:	bf00      	nop
 800a6c8:	e7fe      	b.n	800a6c8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a6ca:	f002 fc1d 	bl	800cf08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a6ce:	f3ef 8211 	mrs	r2, BASEPRI
 800a6d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d6:	f383 8811 	msr	BASEPRI, r3
 800a6da:	f3bf 8f6f 	isb	sy
 800a6de:	f3bf 8f4f 	dsb	sy
 800a6e2:	61fa      	str	r2, [r7, #28]
 800a6e4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a6e6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a6e8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a6ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a6ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	d302      	bcc.n	800a6fc <xQueueGenericSendFromISR+0xbc>
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	2b02      	cmp	r3, #2
 800a6fa:	d12f      	bne.n	800a75c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a6fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a702:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a70a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a70c:	683a      	ldr	r2, [r7, #0]
 800a70e:	68b9      	ldr	r1, [r7, #8]
 800a710:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a712:	f000 fb64 	bl	800adde <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a716:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a71a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a71e:	d112      	bne.n	800a746 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a724:	2b00      	cmp	r3, #0
 800a726:	d016      	beq.n	800a756 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a72a:	3324      	adds	r3, #36	; 0x24
 800a72c:	4618      	mov	r0, r3
 800a72e:	f001 fa27 	bl	800bb80 <xTaskRemoveFromEventList>
 800a732:	4603      	mov	r3, r0
 800a734:	2b00      	cmp	r3, #0
 800a736:	d00e      	beq.n	800a756 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d00b      	beq.n	800a756 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2201      	movs	r2, #1
 800a742:	601a      	str	r2, [r3, #0]
 800a744:	e007      	b.n	800a756 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a746:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a74a:	3301      	adds	r3, #1
 800a74c:	b2db      	uxtb	r3, r3
 800a74e:	b25a      	sxtb	r2, r3
 800a750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a752:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a756:	2301      	movs	r3, #1
 800a758:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a75a:	e001      	b.n	800a760 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a75c:	2300      	movs	r3, #0
 800a75e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a762:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a764:	697b      	ldr	r3, [r7, #20]
 800a766:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a76a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a76c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a76e:	4618      	mov	r0, r3
 800a770:	3740      	adds	r7, #64	; 0x40
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}

0800a776 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a776:	b580      	push	{r7, lr}
 800a778:	b08e      	sub	sp, #56	; 0x38
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	6078      	str	r0, [r7, #4]
 800a77e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a786:	2b00      	cmp	r3, #0
 800a788:	d10a      	bne.n	800a7a0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800a78a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a78e:	f383 8811 	msr	BASEPRI, r3
 800a792:	f3bf 8f6f 	isb	sy
 800a796:	f3bf 8f4f 	dsb	sy
 800a79a:	623b      	str	r3, [r7, #32]
}
 800a79c:	bf00      	nop
 800a79e:	e7fe      	b.n	800a79e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a7a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d00a      	beq.n	800a7be <xQueueGiveFromISR+0x48>
	__asm volatile
 800a7a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ac:	f383 8811 	msr	BASEPRI, r3
 800a7b0:	f3bf 8f6f 	isb	sy
 800a7b4:	f3bf 8f4f 	dsb	sy
 800a7b8:	61fb      	str	r3, [r7, #28]
}
 800a7ba:	bf00      	nop
 800a7bc:	e7fe      	b.n	800a7bc <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d103      	bne.n	800a7ce <xQueueGiveFromISR+0x58>
 800a7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c8:	689b      	ldr	r3, [r3, #8]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d101      	bne.n	800a7d2 <xQueueGiveFromISR+0x5c>
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	e000      	b.n	800a7d4 <xQueueGiveFromISR+0x5e>
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d10a      	bne.n	800a7ee <xQueueGiveFromISR+0x78>
	__asm volatile
 800a7d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7dc:	f383 8811 	msr	BASEPRI, r3
 800a7e0:	f3bf 8f6f 	isb	sy
 800a7e4:	f3bf 8f4f 	dsb	sy
 800a7e8:	61bb      	str	r3, [r7, #24]
}
 800a7ea:	bf00      	nop
 800a7ec:	e7fe      	b.n	800a7ec <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a7ee:	f002 fb8b 	bl	800cf08 <vPortValidateInterruptPriority>
	__asm volatile
 800a7f2:	f3ef 8211 	mrs	r2, BASEPRI
 800a7f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7fa:	f383 8811 	msr	BASEPRI, r3
 800a7fe:	f3bf 8f6f 	isb	sy
 800a802:	f3bf 8f4f 	dsb	sy
 800a806:	617a      	str	r2, [r7, #20]
 800a808:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a80a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a80c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a812:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a818:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a81a:	429a      	cmp	r2, r3
 800a81c:	d22b      	bcs.n	800a876 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a81e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a820:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a824:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a82a:	1c5a      	adds	r2, r3, #1
 800a82c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a82e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a830:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a834:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a838:	d112      	bne.n	800a860 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a83a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a83c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d016      	beq.n	800a870 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a844:	3324      	adds	r3, #36	; 0x24
 800a846:	4618      	mov	r0, r3
 800a848:	f001 f99a 	bl	800bb80 <xTaskRemoveFromEventList>
 800a84c:	4603      	mov	r3, r0
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d00e      	beq.n	800a870 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d00b      	beq.n	800a870 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	2201      	movs	r2, #1
 800a85c:	601a      	str	r2, [r3, #0]
 800a85e:	e007      	b.n	800a870 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a860:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a864:	3301      	adds	r3, #1
 800a866:	b2db      	uxtb	r3, r3
 800a868:	b25a      	sxtb	r2, r3
 800a86a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a86c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a870:	2301      	movs	r3, #1
 800a872:	637b      	str	r3, [r7, #52]	; 0x34
 800a874:	e001      	b.n	800a87a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a876:	2300      	movs	r3, #0
 800a878:	637b      	str	r3, [r7, #52]	; 0x34
 800a87a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a87c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	f383 8811 	msr	BASEPRI, r3
}
 800a884:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a888:	4618      	mov	r0, r3
 800a88a:	3738      	adds	r7, #56	; 0x38
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}

0800a890 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b08c      	sub	sp, #48	; 0x30
 800a894:	af00      	add	r7, sp, #0
 800a896:	60f8      	str	r0, [r7, #12]
 800a898:	60b9      	str	r1, [r7, #8]
 800a89a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a89c:	2300      	movs	r3, #0
 800a89e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d10a      	bne.n	800a8c0 <xQueueReceive+0x30>
	__asm volatile
 800a8aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ae:	f383 8811 	msr	BASEPRI, r3
 800a8b2:	f3bf 8f6f 	isb	sy
 800a8b6:	f3bf 8f4f 	dsb	sy
 800a8ba:	623b      	str	r3, [r7, #32]
}
 800a8bc:	bf00      	nop
 800a8be:	e7fe      	b.n	800a8be <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d103      	bne.n	800a8ce <xQueueReceive+0x3e>
 800a8c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d101      	bne.n	800a8d2 <xQueueReceive+0x42>
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	e000      	b.n	800a8d4 <xQueueReceive+0x44>
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d10a      	bne.n	800a8ee <xQueueReceive+0x5e>
	__asm volatile
 800a8d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8dc:	f383 8811 	msr	BASEPRI, r3
 800a8e0:	f3bf 8f6f 	isb	sy
 800a8e4:	f3bf 8f4f 	dsb	sy
 800a8e8:	61fb      	str	r3, [r7, #28]
}
 800a8ea:	bf00      	nop
 800a8ec:	e7fe      	b.n	800a8ec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a8ee:	f001 fb15 	bl	800bf1c <xTaskGetSchedulerState>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d102      	bne.n	800a8fe <xQueueReceive+0x6e>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d101      	bne.n	800a902 <xQueueReceive+0x72>
 800a8fe:	2301      	movs	r3, #1
 800a900:	e000      	b.n	800a904 <xQueueReceive+0x74>
 800a902:	2300      	movs	r3, #0
 800a904:	2b00      	cmp	r3, #0
 800a906:	d10a      	bne.n	800a91e <xQueueReceive+0x8e>
	__asm volatile
 800a908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a90c:	f383 8811 	msr	BASEPRI, r3
 800a910:	f3bf 8f6f 	isb	sy
 800a914:	f3bf 8f4f 	dsb	sy
 800a918:	61bb      	str	r3, [r7, #24]
}
 800a91a:	bf00      	nop
 800a91c:	e7fe      	b.n	800a91c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a91e:	f002 fa11 	bl	800cd44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a926:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d01f      	beq.n	800a96e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a92e:	68b9      	ldr	r1, [r7, #8]
 800a930:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a932:	f000 fabe 	bl	800aeb2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a938:	1e5a      	subs	r2, r3, #1
 800a93a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a93c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a940:	691b      	ldr	r3, [r3, #16]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d00f      	beq.n	800a966 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a948:	3310      	adds	r3, #16
 800a94a:	4618      	mov	r0, r3
 800a94c:	f001 f918 	bl	800bb80 <xTaskRemoveFromEventList>
 800a950:	4603      	mov	r3, r0
 800a952:	2b00      	cmp	r3, #0
 800a954:	d007      	beq.n	800a966 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a956:	4b3d      	ldr	r3, [pc, #244]	; (800aa4c <xQueueReceive+0x1bc>)
 800a958:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a95c:	601a      	str	r2, [r3, #0]
 800a95e:	f3bf 8f4f 	dsb	sy
 800a962:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a966:	f002 fa1d 	bl	800cda4 <vPortExitCritical>
				return pdPASS;
 800a96a:	2301      	movs	r3, #1
 800a96c:	e069      	b.n	800aa42 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d103      	bne.n	800a97c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a974:	f002 fa16 	bl	800cda4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a978:	2300      	movs	r3, #0
 800a97a:	e062      	b.n	800aa42 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a97c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d106      	bne.n	800a990 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a982:	f107 0310 	add.w	r3, r7, #16
 800a986:	4618      	mov	r0, r3
 800a988:	f001 f95e 	bl	800bc48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a98c:	2301      	movs	r3, #1
 800a98e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a990:	f002 fa08 	bl	800cda4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a994:	f000 fed0 	bl	800b738 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a998:	f002 f9d4 	bl	800cd44 <vPortEnterCritical>
 800a99c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a99e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a9a2:	b25b      	sxtb	r3, r3
 800a9a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9a8:	d103      	bne.n	800a9b2 <xQueueReceive+0x122>
 800a9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a9b8:	b25b      	sxtb	r3, r3
 800a9ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9be:	d103      	bne.n	800a9c8 <xQueueReceive+0x138>
 800a9c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a9c8:	f002 f9ec 	bl	800cda4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a9cc:	1d3a      	adds	r2, r7, #4
 800a9ce:	f107 0310 	add.w	r3, r7, #16
 800a9d2:	4611      	mov	r1, r2
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f001 f94d 	bl	800bc74 <xTaskCheckForTimeOut>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d123      	bne.n	800aa28 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a9e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9e2:	f000 fade 	bl	800afa2 <prvIsQueueEmpty>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d017      	beq.n	800aa1c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a9ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ee:	3324      	adds	r3, #36	; 0x24
 800a9f0:	687a      	ldr	r2, [r7, #4]
 800a9f2:	4611      	mov	r1, r2
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f001 f873 	bl	800bae0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a9fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9fc:	f000 fa7f 	bl	800aefe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aa00:	f000 fea8 	bl	800b754 <xTaskResumeAll>
 800aa04:	4603      	mov	r3, r0
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d189      	bne.n	800a91e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800aa0a:	4b10      	ldr	r3, [pc, #64]	; (800aa4c <xQueueReceive+0x1bc>)
 800aa0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa10:	601a      	str	r2, [r3, #0]
 800aa12:	f3bf 8f4f 	dsb	sy
 800aa16:	f3bf 8f6f 	isb	sy
 800aa1a:	e780      	b.n	800a91e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800aa1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa1e:	f000 fa6e 	bl	800aefe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aa22:	f000 fe97 	bl	800b754 <xTaskResumeAll>
 800aa26:	e77a      	b.n	800a91e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800aa28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa2a:	f000 fa68 	bl	800aefe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aa2e:	f000 fe91 	bl	800b754 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa34:	f000 fab5 	bl	800afa2 <prvIsQueueEmpty>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	f43f af6f 	beq.w	800a91e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aa40:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	3730      	adds	r7, #48	; 0x30
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}
 800aa4a:	bf00      	nop
 800aa4c:	e000ed04 	.word	0xe000ed04

0800aa50 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b08e      	sub	sp, #56	; 0x38
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
 800aa58:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800aa62:	2300      	movs	r3, #0
 800aa64:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aa66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d10a      	bne.n	800aa82 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800aa6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa70:	f383 8811 	msr	BASEPRI, r3
 800aa74:	f3bf 8f6f 	isb	sy
 800aa78:	f3bf 8f4f 	dsb	sy
 800aa7c:	623b      	str	r3, [r7, #32]
}
 800aa7e:	bf00      	nop
 800aa80:	e7fe      	b.n	800aa80 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800aa82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d00a      	beq.n	800aaa0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800aa8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa8e:	f383 8811 	msr	BASEPRI, r3
 800aa92:	f3bf 8f6f 	isb	sy
 800aa96:	f3bf 8f4f 	dsb	sy
 800aa9a:	61fb      	str	r3, [r7, #28]
}
 800aa9c:	bf00      	nop
 800aa9e:	e7fe      	b.n	800aa9e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aaa0:	f001 fa3c 	bl	800bf1c <xTaskGetSchedulerState>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d102      	bne.n	800aab0 <xQueueSemaphoreTake+0x60>
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d101      	bne.n	800aab4 <xQueueSemaphoreTake+0x64>
 800aab0:	2301      	movs	r3, #1
 800aab2:	e000      	b.n	800aab6 <xQueueSemaphoreTake+0x66>
 800aab4:	2300      	movs	r3, #0
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d10a      	bne.n	800aad0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800aaba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aabe:	f383 8811 	msr	BASEPRI, r3
 800aac2:	f3bf 8f6f 	isb	sy
 800aac6:	f3bf 8f4f 	dsb	sy
 800aaca:	61bb      	str	r3, [r7, #24]
}
 800aacc:	bf00      	nop
 800aace:	e7fe      	b.n	800aace <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aad0:	f002 f938 	bl	800cd44 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800aad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aad8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800aada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d024      	beq.n	800ab2a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800aae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aae2:	1e5a      	subs	r2, r3, #1
 800aae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aae6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d104      	bne.n	800aafa <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800aaf0:	f001 fb8a 	bl	800c208 <pvTaskIncrementMutexHeldCount>
 800aaf4:	4602      	mov	r2, r0
 800aaf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaf8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aafa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aafc:	691b      	ldr	r3, [r3, #16]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d00f      	beq.n	800ab22 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab04:	3310      	adds	r3, #16
 800ab06:	4618      	mov	r0, r3
 800ab08:	f001 f83a 	bl	800bb80 <xTaskRemoveFromEventList>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d007      	beq.n	800ab22 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ab12:	4b54      	ldr	r3, [pc, #336]	; (800ac64 <xQueueSemaphoreTake+0x214>)
 800ab14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab18:	601a      	str	r2, [r3, #0]
 800ab1a:	f3bf 8f4f 	dsb	sy
 800ab1e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ab22:	f002 f93f 	bl	800cda4 <vPortExitCritical>
				return pdPASS;
 800ab26:	2301      	movs	r3, #1
 800ab28:	e097      	b.n	800ac5a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d111      	bne.n	800ab54 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ab30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d00a      	beq.n	800ab4c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800ab36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab3a:	f383 8811 	msr	BASEPRI, r3
 800ab3e:	f3bf 8f6f 	isb	sy
 800ab42:	f3bf 8f4f 	dsb	sy
 800ab46:	617b      	str	r3, [r7, #20]
}
 800ab48:	bf00      	nop
 800ab4a:	e7fe      	b.n	800ab4a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ab4c:	f002 f92a 	bl	800cda4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ab50:	2300      	movs	r3, #0
 800ab52:	e082      	b.n	800ac5a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ab54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d106      	bne.n	800ab68 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ab5a:	f107 030c 	add.w	r3, r7, #12
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f001 f872 	bl	800bc48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ab64:	2301      	movs	r3, #1
 800ab66:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ab68:	f002 f91c 	bl	800cda4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ab6c:	f000 fde4 	bl	800b738 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ab70:	f002 f8e8 	bl	800cd44 <vPortEnterCritical>
 800ab74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab7a:	b25b      	sxtb	r3, r3
 800ab7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab80:	d103      	bne.n	800ab8a <xQueueSemaphoreTake+0x13a>
 800ab82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab84:	2200      	movs	r2, #0
 800ab86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab90:	b25b      	sxtb	r3, r3
 800ab92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab96:	d103      	bne.n	800aba0 <xQueueSemaphoreTake+0x150>
 800ab98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aba0:	f002 f900 	bl	800cda4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aba4:	463a      	mov	r2, r7
 800aba6:	f107 030c 	add.w	r3, r7, #12
 800abaa:	4611      	mov	r1, r2
 800abac:	4618      	mov	r0, r3
 800abae:	f001 f861 	bl	800bc74 <xTaskCheckForTimeOut>
 800abb2:	4603      	mov	r3, r0
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d132      	bne.n	800ac1e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800abb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800abba:	f000 f9f2 	bl	800afa2 <prvIsQueueEmpty>
 800abbe:	4603      	mov	r3, r0
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d026      	beq.n	800ac12 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800abc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d109      	bne.n	800abe0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800abcc:	f002 f8ba 	bl	800cd44 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800abd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abd2:	689b      	ldr	r3, [r3, #8]
 800abd4:	4618      	mov	r0, r3
 800abd6:	f001 f9bf 	bl	800bf58 <xTaskPriorityInherit>
 800abda:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800abdc:	f002 f8e2 	bl	800cda4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800abe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abe2:	3324      	adds	r3, #36	; 0x24
 800abe4:	683a      	ldr	r2, [r7, #0]
 800abe6:	4611      	mov	r1, r2
 800abe8:	4618      	mov	r0, r3
 800abea:	f000 ff79 	bl	800bae0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800abee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800abf0:	f000 f985 	bl	800aefe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800abf4:	f000 fdae 	bl	800b754 <xTaskResumeAll>
 800abf8:	4603      	mov	r3, r0
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	f47f af68 	bne.w	800aad0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800ac00:	4b18      	ldr	r3, [pc, #96]	; (800ac64 <xQueueSemaphoreTake+0x214>)
 800ac02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac06:	601a      	str	r2, [r3, #0]
 800ac08:	f3bf 8f4f 	dsb	sy
 800ac0c:	f3bf 8f6f 	isb	sy
 800ac10:	e75e      	b.n	800aad0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ac12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac14:	f000 f973 	bl	800aefe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ac18:	f000 fd9c 	bl	800b754 <xTaskResumeAll>
 800ac1c:	e758      	b.n	800aad0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ac1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac20:	f000 f96d 	bl	800aefe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ac24:	f000 fd96 	bl	800b754 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ac28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac2a:	f000 f9ba 	bl	800afa2 <prvIsQueueEmpty>
 800ac2e:	4603      	mov	r3, r0
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	f43f af4d 	beq.w	800aad0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ac36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d00d      	beq.n	800ac58 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800ac3c:	f002 f882 	bl	800cd44 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ac40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac42:	f000 f8b4 	bl	800adae <prvGetDisinheritPriorityAfterTimeout>
 800ac46:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ac48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac4a:	689b      	ldr	r3, [r3, #8]
 800ac4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f001 fa58 	bl	800c104 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ac54:	f002 f8a6 	bl	800cda4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ac58:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	3738      	adds	r7, #56	; 0x38
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bd80      	pop	{r7, pc}
 800ac62:	bf00      	nop
 800ac64:	e000ed04 	.word	0xe000ed04

0800ac68 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b08e      	sub	sp, #56	; 0x38
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	60f8      	str	r0, [r7, #12]
 800ac70:	60b9      	str	r1, [r7, #8]
 800ac72:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ac78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d10a      	bne.n	800ac94 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800ac7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac82:	f383 8811 	msr	BASEPRI, r3
 800ac86:	f3bf 8f6f 	isb	sy
 800ac8a:	f3bf 8f4f 	dsb	sy
 800ac8e:	623b      	str	r3, [r7, #32]
}
 800ac90:	bf00      	nop
 800ac92:	e7fe      	b.n	800ac92 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d103      	bne.n	800aca2 <xQueueReceiveFromISR+0x3a>
 800ac9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d101      	bne.n	800aca6 <xQueueReceiveFromISR+0x3e>
 800aca2:	2301      	movs	r3, #1
 800aca4:	e000      	b.n	800aca8 <xQueueReceiveFromISR+0x40>
 800aca6:	2300      	movs	r3, #0
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d10a      	bne.n	800acc2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800acac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb0:	f383 8811 	msr	BASEPRI, r3
 800acb4:	f3bf 8f6f 	isb	sy
 800acb8:	f3bf 8f4f 	dsb	sy
 800acbc:	61fb      	str	r3, [r7, #28]
}
 800acbe:	bf00      	nop
 800acc0:	e7fe      	b.n	800acc0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800acc2:	f002 f921 	bl	800cf08 <vPortValidateInterruptPriority>
	__asm volatile
 800acc6:	f3ef 8211 	mrs	r2, BASEPRI
 800acca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acce:	f383 8811 	msr	BASEPRI, r3
 800acd2:	f3bf 8f6f 	isb	sy
 800acd6:	f3bf 8f4f 	dsb	sy
 800acda:	61ba      	str	r2, [r7, #24]
 800acdc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800acde:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ace0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ace2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ace4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ace6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ace8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acea:	2b00      	cmp	r3, #0
 800acec:	d02f      	beq.n	800ad4e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800acee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acf0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800acf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800acf8:	68b9      	ldr	r1, [r7, #8]
 800acfa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800acfc:	f000 f8d9 	bl	800aeb2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ad00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad02:	1e5a      	subs	r2, r3, #1
 800ad04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad06:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ad08:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ad0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad10:	d112      	bne.n	800ad38 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad14:	691b      	ldr	r3, [r3, #16]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d016      	beq.n	800ad48 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad1c:	3310      	adds	r3, #16
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f000 ff2e 	bl	800bb80 <xTaskRemoveFromEventList>
 800ad24:	4603      	mov	r3, r0
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d00e      	beq.n	800ad48 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d00b      	beq.n	800ad48 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2201      	movs	r2, #1
 800ad34:	601a      	str	r2, [r3, #0]
 800ad36:	e007      	b.n	800ad48 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ad38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad3c:	3301      	adds	r3, #1
 800ad3e:	b2db      	uxtb	r3, r3
 800ad40:	b25a      	sxtb	r2, r3
 800ad42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ad48:	2301      	movs	r3, #1
 800ad4a:	637b      	str	r3, [r7, #52]	; 0x34
 800ad4c:	e001      	b.n	800ad52 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800ad4e:	2300      	movs	r3, #0
 800ad50:	637b      	str	r3, [r7, #52]	; 0x34
 800ad52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad54:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ad56:	693b      	ldr	r3, [r7, #16]
 800ad58:	f383 8811 	msr	BASEPRI, r3
}
 800ad5c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ad5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	3738      	adds	r7, #56	; 0x38
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}

0800ad68 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b084      	sub	sp, #16
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d10a      	bne.n	800ad90 <vQueueDelete+0x28>
	__asm volatile
 800ad7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad7e:	f383 8811 	msr	BASEPRI, r3
 800ad82:	f3bf 8f6f 	isb	sy
 800ad86:	f3bf 8f4f 	dsb	sy
 800ad8a:	60bb      	str	r3, [r7, #8]
}
 800ad8c:	bf00      	nop
 800ad8e:	e7fe      	b.n	800ad8e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800ad90:	68f8      	ldr	r0, [r7, #12]
 800ad92:	f000 f95f 	bl	800b054 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d102      	bne.n	800ada6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800ada0:	68f8      	ldr	r0, [r7, #12]
 800ada2:	f002 f9bd 	bl	800d120 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ada6:	bf00      	nop
 800ada8:	3710      	adds	r7, #16
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}

0800adae <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800adae:	b480      	push	{r7}
 800adb0:	b085      	sub	sp, #20
 800adb2:	af00      	add	r7, sp, #0
 800adb4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d006      	beq.n	800adcc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800adc8:	60fb      	str	r3, [r7, #12]
 800adca:	e001      	b.n	800add0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800adcc:	2300      	movs	r3, #0
 800adce:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800add0:	68fb      	ldr	r3, [r7, #12]
	}
 800add2:	4618      	mov	r0, r3
 800add4:	3714      	adds	r7, #20
 800add6:	46bd      	mov	sp, r7
 800add8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800addc:	4770      	bx	lr

0800adde <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800adde:	b580      	push	{r7, lr}
 800ade0:	b086      	sub	sp, #24
 800ade2:	af00      	add	r7, sp, #0
 800ade4:	60f8      	str	r0, [r7, #12]
 800ade6:	60b9      	str	r1, [r7, #8]
 800ade8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800adea:	2300      	movs	r3, #0
 800adec:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adf2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d10d      	bne.n	800ae18 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d14d      	bne.n	800aea0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	689b      	ldr	r3, [r3, #8]
 800ae08:	4618      	mov	r0, r3
 800ae0a:	f001 f90d 	bl	800c028 <xTaskPriorityDisinherit>
 800ae0e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	2200      	movs	r2, #0
 800ae14:	609a      	str	r2, [r3, #8]
 800ae16:	e043      	b.n	800aea0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d119      	bne.n	800ae52 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	6858      	ldr	r0, [r3, #4]
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae26:	461a      	mov	r2, r3
 800ae28:	68b9      	ldr	r1, [r7, #8]
 800ae2a:	f002 fac1 	bl	800d3b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	685a      	ldr	r2, [r3, #4]
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae36:	441a      	add	r2, r3
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	685a      	ldr	r2, [r3, #4]
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	689b      	ldr	r3, [r3, #8]
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d32b      	bcc.n	800aea0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	681a      	ldr	r2, [r3, #0]
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	605a      	str	r2, [r3, #4]
 800ae50:	e026      	b.n	800aea0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	68d8      	ldr	r0, [r3, #12]
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae5a:	461a      	mov	r2, r3
 800ae5c:	68b9      	ldr	r1, [r7, #8]
 800ae5e:	f002 faa7 	bl	800d3b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	68da      	ldr	r2, [r3, #12]
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae6a:	425b      	negs	r3, r3
 800ae6c:	441a      	add	r2, r3
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	68da      	ldr	r2, [r3, #12]
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	429a      	cmp	r2, r3
 800ae7c:	d207      	bcs.n	800ae8e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	689a      	ldr	r2, [r3, #8]
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae86:	425b      	negs	r3, r3
 800ae88:	441a      	add	r2, r3
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2b02      	cmp	r3, #2
 800ae92:	d105      	bne.n	800aea0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ae94:	693b      	ldr	r3, [r7, #16]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d002      	beq.n	800aea0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ae9a:	693b      	ldr	r3, [r7, #16]
 800ae9c:	3b01      	subs	r3, #1
 800ae9e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aea0:	693b      	ldr	r3, [r7, #16]
 800aea2:	1c5a      	adds	r2, r3, #1
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800aea8:	697b      	ldr	r3, [r7, #20]
}
 800aeaa:	4618      	mov	r0, r3
 800aeac:	3718      	adds	r7, #24
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}

0800aeb2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800aeb2:	b580      	push	{r7, lr}
 800aeb4:	b082      	sub	sp, #8
 800aeb6:	af00      	add	r7, sp, #0
 800aeb8:	6078      	str	r0, [r7, #4]
 800aeba:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d018      	beq.n	800aef6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	68da      	ldr	r2, [r3, #12]
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aecc:	441a      	add	r2, r3
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	68da      	ldr	r2, [r3, #12]
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	689b      	ldr	r3, [r3, #8]
 800aeda:	429a      	cmp	r2, r3
 800aedc:	d303      	bcc.n	800aee6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681a      	ldr	r2, [r3, #0]
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	68d9      	ldr	r1, [r3, #12]
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeee:	461a      	mov	r2, r3
 800aef0:	6838      	ldr	r0, [r7, #0]
 800aef2:	f002 fa5d 	bl	800d3b0 <memcpy>
	}
}
 800aef6:	bf00      	nop
 800aef8:	3708      	adds	r7, #8
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}

0800aefe <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800aefe:	b580      	push	{r7, lr}
 800af00:	b084      	sub	sp, #16
 800af02:	af00      	add	r7, sp, #0
 800af04:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800af06:	f001 ff1d 	bl	800cd44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af10:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800af12:	e011      	b.n	800af38 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d012      	beq.n	800af42 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	3324      	adds	r3, #36	; 0x24
 800af20:	4618      	mov	r0, r3
 800af22:	f000 fe2d 	bl	800bb80 <xTaskRemoveFromEventList>
 800af26:	4603      	mov	r3, r0
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d001      	beq.n	800af30 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800af2c:	f000 ff04 	bl	800bd38 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800af30:	7bfb      	ldrb	r3, [r7, #15]
 800af32:	3b01      	subs	r3, #1
 800af34:	b2db      	uxtb	r3, r3
 800af36:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800af38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	dce9      	bgt.n	800af14 <prvUnlockQueue+0x16>
 800af40:	e000      	b.n	800af44 <prvUnlockQueue+0x46>
					break;
 800af42:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	22ff      	movs	r2, #255	; 0xff
 800af48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800af4c:	f001 ff2a 	bl	800cda4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800af50:	f001 fef8 	bl	800cd44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af5a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800af5c:	e011      	b.n	800af82 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	691b      	ldr	r3, [r3, #16]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d012      	beq.n	800af8c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	3310      	adds	r3, #16
 800af6a:	4618      	mov	r0, r3
 800af6c:	f000 fe08 	bl	800bb80 <xTaskRemoveFromEventList>
 800af70:	4603      	mov	r3, r0
 800af72:	2b00      	cmp	r3, #0
 800af74:	d001      	beq.n	800af7a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800af76:	f000 fedf 	bl	800bd38 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800af7a:	7bbb      	ldrb	r3, [r7, #14]
 800af7c:	3b01      	subs	r3, #1
 800af7e:	b2db      	uxtb	r3, r3
 800af80:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800af82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af86:	2b00      	cmp	r3, #0
 800af88:	dce9      	bgt.n	800af5e <prvUnlockQueue+0x60>
 800af8a:	e000      	b.n	800af8e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800af8c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	22ff      	movs	r2, #255	; 0xff
 800af92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800af96:	f001 ff05 	bl	800cda4 <vPortExitCritical>
}
 800af9a:	bf00      	nop
 800af9c:	3710      	adds	r7, #16
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}

0800afa2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800afa2:	b580      	push	{r7, lr}
 800afa4:	b084      	sub	sp, #16
 800afa6:	af00      	add	r7, sp, #0
 800afa8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800afaa:	f001 fecb 	bl	800cd44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d102      	bne.n	800afbc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800afb6:	2301      	movs	r3, #1
 800afb8:	60fb      	str	r3, [r7, #12]
 800afba:	e001      	b.n	800afc0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800afbc:	2300      	movs	r3, #0
 800afbe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800afc0:	f001 fef0 	bl	800cda4 <vPortExitCritical>

	return xReturn;
 800afc4:	68fb      	ldr	r3, [r7, #12]
}
 800afc6:	4618      	mov	r0, r3
 800afc8:	3710      	adds	r7, #16
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}

0800afce <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800afce:	b580      	push	{r7, lr}
 800afd0:	b084      	sub	sp, #16
 800afd2:	af00      	add	r7, sp, #0
 800afd4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800afd6:	f001 feb5 	bl	800cd44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afe2:	429a      	cmp	r2, r3
 800afe4:	d102      	bne.n	800afec <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800afe6:	2301      	movs	r3, #1
 800afe8:	60fb      	str	r3, [r7, #12]
 800afea:	e001      	b.n	800aff0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800afec:	2300      	movs	r3, #0
 800afee:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aff0:	f001 fed8 	bl	800cda4 <vPortExitCritical>

	return xReturn;
 800aff4:	68fb      	ldr	r3, [r7, #12]
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	3710      	adds	r7, #16
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}
	...

0800b000 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b000:	b480      	push	{r7}
 800b002:	b085      	sub	sp, #20
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
 800b008:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b00a:	2300      	movs	r3, #0
 800b00c:	60fb      	str	r3, [r7, #12]
 800b00e:	e014      	b.n	800b03a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b010:	4a0f      	ldr	r2, [pc, #60]	; (800b050 <vQueueAddToRegistry+0x50>)
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d10b      	bne.n	800b034 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b01c:	490c      	ldr	r1, [pc, #48]	; (800b050 <vQueueAddToRegistry+0x50>)
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	683a      	ldr	r2, [r7, #0]
 800b022:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b026:	4a0a      	ldr	r2, [pc, #40]	; (800b050 <vQueueAddToRegistry+0x50>)
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	00db      	lsls	r3, r3, #3
 800b02c:	4413      	add	r3, r2
 800b02e:	687a      	ldr	r2, [r7, #4]
 800b030:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b032:	e006      	b.n	800b042 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	3301      	adds	r3, #1
 800b038:	60fb      	str	r3, [r7, #12]
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	2b07      	cmp	r3, #7
 800b03e:	d9e7      	bls.n	800b010 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b040:	bf00      	nop
 800b042:	bf00      	nop
 800b044:	3714      	adds	r7, #20
 800b046:	46bd      	mov	sp, r7
 800b048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04c:	4770      	bx	lr
 800b04e:	bf00      	nop
 800b050:	20000df8 	.word	0x20000df8

0800b054 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b054:	b480      	push	{r7}
 800b056:	b085      	sub	sp, #20
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b05c:	2300      	movs	r3, #0
 800b05e:	60fb      	str	r3, [r7, #12]
 800b060:	e016      	b.n	800b090 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b062:	4a10      	ldr	r2, [pc, #64]	; (800b0a4 <vQueueUnregisterQueue+0x50>)
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	00db      	lsls	r3, r3, #3
 800b068:	4413      	add	r3, r2
 800b06a:	685b      	ldr	r3, [r3, #4]
 800b06c:	687a      	ldr	r2, [r7, #4]
 800b06e:	429a      	cmp	r2, r3
 800b070:	d10b      	bne.n	800b08a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b072:	4a0c      	ldr	r2, [pc, #48]	; (800b0a4 <vQueueUnregisterQueue+0x50>)
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	2100      	movs	r1, #0
 800b078:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b07c:	4a09      	ldr	r2, [pc, #36]	; (800b0a4 <vQueueUnregisterQueue+0x50>)
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	00db      	lsls	r3, r3, #3
 800b082:	4413      	add	r3, r2
 800b084:	2200      	movs	r2, #0
 800b086:	605a      	str	r2, [r3, #4]
				break;
 800b088:	e006      	b.n	800b098 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	3301      	adds	r3, #1
 800b08e:	60fb      	str	r3, [r7, #12]
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	2b07      	cmp	r3, #7
 800b094:	d9e5      	bls.n	800b062 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b096:	bf00      	nop
 800b098:	bf00      	nop
 800b09a:	3714      	adds	r7, #20
 800b09c:	46bd      	mov	sp, r7
 800b09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a2:	4770      	bx	lr
 800b0a4:	20000df8 	.word	0x20000df8

0800b0a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b086      	sub	sp, #24
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	60f8      	str	r0, [r7, #12]
 800b0b0:	60b9      	str	r1, [r7, #8]
 800b0b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b0b8:	f001 fe44 	bl	800cd44 <vPortEnterCritical>
 800b0bc:	697b      	ldr	r3, [r7, #20]
 800b0be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b0c2:	b25b      	sxtb	r3, r3
 800b0c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0c8:	d103      	bne.n	800b0d2 <vQueueWaitForMessageRestricted+0x2a>
 800b0ca:	697b      	ldr	r3, [r7, #20]
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b0d8:	b25b      	sxtb	r3, r3
 800b0da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0de:	d103      	bne.n	800b0e8 <vQueueWaitForMessageRestricted+0x40>
 800b0e0:	697b      	ldr	r3, [r7, #20]
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b0e8:	f001 fe5c 	bl	800cda4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b0ec:	697b      	ldr	r3, [r7, #20]
 800b0ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d106      	bne.n	800b102 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b0f4:	697b      	ldr	r3, [r7, #20]
 800b0f6:	3324      	adds	r3, #36	; 0x24
 800b0f8:	687a      	ldr	r2, [r7, #4]
 800b0fa:	68b9      	ldr	r1, [r7, #8]
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	f000 fd13 	bl	800bb28 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b102:	6978      	ldr	r0, [r7, #20]
 800b104:	f7ff fefb 	bl	800aefe <prvUnlockQueue>
	}
 800b108:	bf00      	nop
 800b10a:	3718      	adds	r7, #24
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}

0800b110 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b110:	b580      	push	{r7, lr}
 800b112:	b08e      	sub	sp, #56	; 0x38
 800b114:	af04      	add	r7, sp, #16
 800b116:	60f8      	str	r0, [r7, #12]
 800b118:	60b9      	str	r1, [r7, #8]
 800b11a:	607a      	str	r2, [r7, #4]
 800b11c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b11e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b120:	2b00      	cmp	r3, #0
 800b122:	d10a      	bne.n	800b13a <xTaskCreateStatic+0x2a>
	__asm volatile
 800b124:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b128:	f383 8811 	msr	BASEPRI, r3
 800b12c:	f3bf 8f6f 	isb	sy
 800b130:	f3bf 8f4f 	dsb	sy
 800b134:	623b      	str	r3, [r7, #32]
}
 800b136:	bf00      	nop
 800b138:	e7fe      	b.n	800b138 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b13a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d10a      	bne.n	800b156 <xTaskCreateStatic+0x46>
	__asm volatile
 800b140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b144:	f383 8811 	msr	BASEPRI, r3
 800b148:	f3bf 8f6f 	isb	sy
 800b14c:	f3bf 8f4f 	dsb	sy
 800b150:	61fb      	str	r3, [r7, #28]
}
 800b152:	bf00      	nop
 800b154:	e7fe      	b.n	800b154 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b156:	235c      	movs	r3, #92	; 0x5c
 800b158:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	2b5c      	cmp	r3, #92	; 0x5c
 800b15e:	d00a      	beq.n	800b176 <xTaskCreateStatic+0x66>
	__asm volatile
 800b160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b164:	f383 8811 	msr	BASEPRI, r3
 800b168:	f3bf 8f6f 	isb	sy
 800b16c:	f3bf 8f4f 	dsb	sy
 800b170:	61bb      	str	r3, [r7, #24]
}
 800b172:	bf00      	nop
 800b174:	e7fe      	b.n	800b174 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b176:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d01e      	beq.n	800b1bc <xTaskCreateStatic+0xac>
 800b17e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b180:	2b00      	cmp	r3, #0
 800b182:	d01b      	beq.n	800b1bc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b186:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b18a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b18c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b190:	2202      	movs	r2, #2
 800b192:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b196:	2300      	movs	r3, #0
 800b198:	9303      	str	r3, [sp, #12]
 800b19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b19c:	9302      	str	r3, [sp, #8]
 800b19e:	f107 0314 	add.w	r3, r7, #20
 800b1a2:	9301      	str	r3, [sp, #4]
 800b1a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1a6:	9300      	str	r3, [sp, #0]
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	687a      	ldr	r2, [r7, #4]
 800b1ac:	68b9      	ldr	r1, [r7, #8]
 800b1ae:	68f8      	ldr	r0, [r7, #12]
 800b1b0:	f000 f850 	bl	800b254 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b1b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b1b6:	f000 f8dd 	bl	800b374 <prvAddNewTaskToReadyList>
 800b1ba:	e001      	b.n	800b1c0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b1bc:	2300      	movs	r3, #0
 800b1be:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b1c0:	697b      	ldr	r3, [r7, #20]
	}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	3728      	adds	r7, #40	; 0x28
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}

0800b1ca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b1ca:	b580      	push	{r7, lr}
 800b1cc:	b08c      	sub	sp, #48	; 0x30
 800b1ce:	af04      	add	r7, sp, #16
 800b1d0:	60f8      	str	r0, [r7, #12]
 800b1d2:	60b9      	str	r1, [r7, #8]
 800b1d4:	603b      	str	r3, [r7, #0]
 800b1d6:	4613      	mov	r3, r2
 800b1d8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b1da:	88fb      	ldrh	r3, [r7, #6]
 800b1dc:	009b      	lsls	r3, r3, #2
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f001 fed2 	bl	800cf88 <pvPortMalloc>
 800b1e4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b1e6:	697b      	ldr	r3, [r7, #20]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d00e      	beq.n	800b20a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b1ec:	205c      	movs	r0, #92	; 0x5c
 800b1ee:	f001 fecb 	bl	800cf88 <pvPortMalloc>
 800b1f2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b1f4:	69fb      	ldr	r3, [r7, #28]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d003      	beq.n	800b202 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b1fa:	69fb      	ldr	r3, [r7, #28]
 800b1fc:	697a      	ldr	r2, [r7, #20]
 800b1fe:	631a      	str	r2, [r3, #48]	; 0x30
 800b200:	e005      	b.n	800b20e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b202:	6978      	ldr	r0, [r7, #20]
 800b204:	f001 ff8c 	bl	800d120 <vPortFree>
 800b208:	e001      	b.n	800b20e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b20a:	2300      	movs	r3, #0
 800b20c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b20e:	69fb      	ldr	r3, [r7, #28]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d017      	beq.n	800b244 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b214:	69fb      	ldr	r3, [r7, #28]
 800b216:	2200      	movs	r2, #0
 800b218:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b21c:	88fa      	ldrh	r2, [r7, #6]
 800b21e:	2300      	movs	r3, #0
 800b220:	9303      	str	r3, [sp, #12]
 800b222:	69fb      	ldr	r3, [r7, #28]
 800b224:	9302      	str	r3, [sp, #8]
 800b226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b228:	9301      	str	r3, [sp, #4]
 800b22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b22c:	9300      	str	r3, [sp, #0]
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	68b9      	ldr	r1, [r7, #8]
 800b232:	68f8      	ldr	r0, [r7, #12]
 800b234:	f000 f80e 	bl	800b254 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b238:	69f8      	ldr	r0, [r7, #28]
 800b23a:	f000 f89b 	bl	800b374 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b23e:	2301      	movs	r3, #1
 800b240:	61bb      	str	r3, [r7, #24]
 800b242:	e002      	b.n	800b24a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b244:	f04f 33ff 	mov.w	r3, #4294967295
 800b248:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b24a:	69bb      	ldr	r3, [r7, #24]
	}
 800b24c:	4618      	mov	r0, r3
 800b24e:	3720      	adds	r7, #32
 800b250:	46bd      	mov	sp, r7
 800b252:	bd80      	pop	{r7, pc}

0800b254 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b088      	sub	sp, #32
 800b258:	af00      	add	r7, sp, #0
 800b25a:	60f8      	str	r0, [r7, #12]
 800b25c:	60b9      	str	r1, [r7, #8]
 800b25e:	607a      	str	r2, [r7, #4]
 800b260:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b264:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	009b      	lsls	r3, r3, #2
 800b26a:	461a      	mov	r2, r3
 800b26c:	21a5      	movs	r1, #165	; 0xa5
 800b26e:	f002 f8ad 	bl	800d3cc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b274:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b27c:	3b01      	subs	r3, #1
 800b27e:	009b      	lsls	r3, r3, #2
 800b280:	4413      	add	r3, r2
 800b282:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b284:	69bb      	ldr	r3, [r7, #24]
 800b286:	f023 0307 	bic.w	r3, r3, #7
 800b28a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b28c:	69bb      	ldr	r3, [r7, #24]
 800b28e:	f003 0307 	and.w	r3, r3, #7
 800b292:	2b00      	cmp	r3, #0
 800b294:	d00a      	beq.n	800b2ac <prvInitialiseNewTask+0x58>
	__asm volatile
 800b296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b29a:	f383 8811 	msr	BASEPRI, r3
 800b29e:	f3bf 8f6f 	isb	sy
 800b2a2:	f3bf 8f4f 	dsb	sy
 800b2a6:	617b      	str	r3, [r7, #20]
}
 800b2a8:	bf00      	nop
 800b2aa:	e7fe      	b.n	800b2aa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d01f      	beq.n	800b2f2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	61fb      	str	r3, [r7, #28]
 800b2b6:	e012      	b.n	800b2de <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b2b8:	68ba      	ldr	r2, [r7, #8]
 800b2ba:	69fb      	ldr	r3, [r7, #28]
 800b2bc:	4413      	add	r3, r2
 800b2be:	7819      	ldrb	r1, [r3, #0]
 800b2c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2c2:	69fb      	ldr	r3, [r7, #28]
 800b2c4:	4413      	add	r3, r2
 800b2c6:	3334      	adds	r3, #52	; 0x34
 800b2c8:	460a      	mov	r2, r1
 800b2ca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b2cc:	68ba      	ldr	r2, [r7, #8]
 800b2ce:	69fb      	ldr	r3, [r7, #28]
 800b2d0:	4413      	add	r3, r2
 800b2d2:	781b      	ldrb	r3, [r3, #0]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d006      	beq.n	800b2e6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b2d8:	69fb      	ldr	r3, [r7, #28]
 800b2da:	3301      	adds	r3, #1
 800b2dc:	61fb      	str	r3, [r7, #28]
 800b2de:	69fb      	ldr	r3, [r7, #28]
 800b2e0:	2b0f      	cmp	r3, #15
 800b2e2:	d9e9      	bls.n	800b2b8 <prvInitialiseNewTask+0x64>
 800b2e4:	e000      	b.n	800b2e8 <prvInitialiseNewTask+0x94>
			{
				break;
 800b2e6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b2e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b2f0:	e003      	b.n	800b2fa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2fc:	2b37      	cmp	r3, #55	; 0x37
 800b2fe:	d901      	bls.n	800b304 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b300:	2337      	movs	r3, #55	; 0x37
 800b302:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b306:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b308:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b30a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b30c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b30e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b312:	2200      	movs	r2, #0
 800b314:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b318:	3304      	adds	r3, #4
 800b31a:	4618      	mov	r0, r3
 800b31c:	f7fe fda0 	bl	8009e60 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b322:	3318      	adds	r3, #24
 800b324:	4618      	mov	r0, r3
 800b326:	f7fe fd9b 	bl	8009e60 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b32a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b32c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b32e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b332:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b338:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b33a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b33c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b33e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b342:	2200      	movs	r2, #0
 800b344:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b348:	2200      	movs	r2, #0
 800b34a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b34e:	683a      	ldr	r2, [r7, #0]
 800b350:	68f9      	ldr	r1, [r7, #12]
 800b352:	69b8      	ldr	r0, [r7, #24]
 800b354:	f001 fbc8 	bl	800cae8 <pxPortInitialiseStack>
 800b358:	4602      	mov	r2, r0
 800b35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b35c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b35e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b360:	2b00      	cmp	r3, #0
 800b362:	d002      	beq.n	800b36a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b366:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b368:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b36a:	bf00      	nop
 800b36c:	3720      	adds	r7, #32
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}
	...

0800b374 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b082      	sub	sp, #8
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b37c:	f001 fce2 	bl	800cd44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b380:	4b2d      	ldr	r3, [pc, #180]	; (800b438 <prvAddNewTaskToReadyList+0xc4>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	3301      	adds	r3, #1
 800b386:	4a2c      	ldr	r2, [pc, #176]	; (800b438 <prvAddNewTaskToReadyList+0xc4>)
 800b388:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b38a:	4b2c      	ldr	r3, [pc, #176]	; (800b43c <prvAddNewTaskToReadyList+0xc8>)
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d109      	bne.n	800b3a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b392:	4a2a      	ldr	r2, [pc, #168]	; (800b43c <prvAddNewTaskToReadyList+0xc8>)
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b398:	4b27      	ldr	r3, [pc, #156]	; (800b438 <prvAddNewTaskToReadyList+0xc4>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	2b01      	cmp	r3, #1
 800b39e:	d110      	bne.n	800b3c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b3a0:	f000 fcee 	bl	800bd80 <prvInitialiseTaskLists>
 800b3a4:	e00d      	b.n	800b3c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b3a6:	4b26      	ldr	r3, [pc, #152]	; (800b440 <prvAddNewTaskToReadyList+0xcc>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d109      	bne.n	800b3c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b3ae:	4b23      	ldr	r3, [pc, #140]	; (800b43c <prvAddNewTaskToReadyList+0xc8>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3b8:	429a      	cmp	r2, r3
 800b3ba:	d802      	bhi.n	800b3c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b3bc:	4a1f      	ldr	r2, [pc, #124]	; (800b43c <prvAddNewTaskToReadyList+0xc8>)
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b3c2:	4b20      	ldr	r3, [pc, #128]	; (800b444 <prvAddNewTaskToReadyList+0xd0>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	3301      	adds	r3, #1
 800b3c8:	4a1e      	ldr	r2, [pc, #120]	; (800b444 <prvAddNewTaskToReadyList+0xd0>)
 800b3ca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b3cc:	4b1d      	ldr	r3, [pc, #116]	; (800b444 <prvAddNewTaskToReadyList+0xd0>)
 800b3ce:	681a      	ldr	r2, [r3, #0]
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3d8:	4b1b      	ldr	r3, [pc, #108]	; (800b448 <prvAddNewTaskToReadyList+0xd4>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	429a      	cmp	r2, r3
 800b3de:	d903      	bls.n	800b3e8 <prvAddNewTaskToReadyList+0x74>
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3e4:	4a18      	ldr	r2, [pc, #96]	; (800b448 <prvAddNewTaskToReadyList+0xd4>)
 800b3e6:	6013      	str	r3, [r2, #0]
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3ec:	4613      	mov	r3, r2
 800b3ee:	009b      	lsls	r3, r3, #2
 800b3f0:	4413      	add	r3, r2
 800b3f2:	009b      	lsls	r3, r3, #2
 800b3f4:	4a15      	ldr	r2, [pc, #84]	; (800b44c <prvAddNewTaskToReadyList+0xd8>)
 800b3f6:	441a      	add	r2, r3
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	3304      	adds	r3, #4
 800b3fc:	4619      	mov	r1, r3
 800b3fe:	4610      	mov	r0, r2
 800b400:	f7fe fd3b 	bl	8009e7a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b404:	f001 fcce 	bl	800cda4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b408:	4b0d      	ldr	r3, [pc, #52]	; (800b440 <prvAddNewTaskToReadyList+0xcc>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d00e      	beq.n	800b42e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b410:	4b0a      	ldr	r3, [pc, #40]	; (800b43c <prvAddNewTaskToReadyList+0xc8>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b41a:	429a      	cmp	r2, r3
 800b41c:	d207      	bcs.n	800b42e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b41e:	4b0c      	ldr	r3, [pc, #48]	; (800b450 <prvAddNewTaskToReadyList+0xdc>)
 800b420:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b424:	601a      	str	r2, [r3, #0]
 800b426:	f3bf 8f4f 	dsb	sy
 800b42a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b42e:	bf00      	nop
 800b430:	3708      	adds	r7, #8
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}
 800b436:	bf00      	nop
 800b438:	2000130c 	.word	0x2000130c
 800b43c:	20000e38 	.word	0x20000e38
 800b440:	20001318 	.word	0x20001318
 800b444:	20001328 	.word	0x20001328
 800b448:	20001314 	.word	0x20001314
 800b44c:	20000e3c 	.word	0x20000e3c
 800b450:	e000ed04 	.word	0xe000ed04

0800b454 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800b454:	b580      	push	{r7, lr}
 800b456:	b084      	sub	sp, #16
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800b45c:	f001 fc72 	bl	800cd44 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d102      	bne.n	800b46c <vTaskDelete+0x18>
 800b466:	4b2c      	ldr	r3, [pc, #176]	; (800b518 <vTaskDelete+0xc4>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	e000      	b.n	800b46e <vTaskDelete+0x1a>
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	3304      	adds	r3, #4
 800b474:	4618      	mov	r0, r3
 800b476:	f7fe fd5d 	bl	8009f34 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d004      	beq.n	800b48c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	3318      	adds	r3, #24
 800b486:	4618      	mov	r0, r3
 800b488:	f7fe fd54 	bl	8009f34 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800b48c:	4b23      	ldr	r3, [pc, #140]	; (800b51c <vTaskDelete+0xc8>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	3301      	adds	r3, #1
 800b492:	4a22      	ldr	r2, [pc, #136]	; (800b51c <vTaskDelete+0xc8>)
 800b494:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800b496:	4b20      	ldr	r3, [pc, #128]	; (800b518 <vTaskDelete+0xc4>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	68fa      	ldr	r2, [r7, #12]
 800b49c:	429a      	cmp	r2, r3
 800b49e:	d10b      	bne.n	800b4b8 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	3304      	adds	r3, #4
 800b4a4:	4619      	mov	r1, r3
 800b4a6:	481e      	ldr	r0, [pc, #120]	; (800b520 <vTaskDelete+0xcc>)
 800b4a8:	f7fe fce7 	bl	8009e7a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800b4ac:	4b1d      	ldr	r3, [pc, #116]	; (800b524 <vTaskDelete+0xd0>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	3301      	adds	r3, #1
 800b4b2:	4a1c      	ldr	r2, [pc, #112]	; (800b524 <vTaskDelete+0xd0>)
 800b4b4:	6013      	str	r3, [r2, #0]
 800b4b6:	e009      	b.n	800b4cc <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800b4b8:	4b1b      	ldr	r3, [pc, #108]	; (800b528 <vTaskDelete+0xd4>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	3b01      	subs	r3, #1
 800b4be:	4a1a      	ldr	r2, [pc, #104]	; (800b528 <vTaskDelete+0xd4>)
 800b4c0:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800b4c2:	68f8      	ldr	r0, [r7, #12]
 800b4c4:	f000 fcca 	bl	800be5c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800b4c8:	f000 fcf8 	bl	800bebc <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800b4cc:	f001 fc6a 	bl	800cda4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800b4d0:	4b16      	ldr	r3, [pc, #88]	; (800b52c <vTaskDelete+0xd8>)
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d01b      	beq.n	800b510 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 800b4d8:	4b0f      	ldr	r3, [pc, #60]	; (800b518 <vTaskDelete+0xc4>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	68fa      	ldr	r2, [r7, #12]
 800b4de:	429a      	cmp	r2, r3
 800b4e0:	d116      	bne.n	800b510 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800b4e2:	4b13      	ldr	r3, [pc, #76]	; (800b530 <vTaskDelete+0xdc>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d00a      	beq.n	800b500 <vTaskDelete+0xac>
	__asm volatile
 800b4ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ee:	f383 8811 	msr	BASEPRI, r3
 800b4f2:	f3bf 8f6f 	isb	sy
 800b4f6:	f3bf 8f4f 	dsb	sy
 800b4fa:	60bb      	str	r3, [r7, #8]
}
 800b4fc:	bf00      	nop
 800b4fe:	e7fe      	b.n	800b4fe <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800b500:	4b0c      	ldr	r3, [pc, #48]	; (800b534 <vTaskDelete+0xe0>)
 800b502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b506:	601a      	str	r2, [r3, #0]
 800b508:	f3bf 8f4f 	dsb	sy
 800b50c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b510:	bf00      	nop
 800b512:	3710      	adds	r7, #16
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}
 800b518:	20000e38 	.word	0x20000e38
 800b51c:	20001328 	.word	0x20001328
 800b520:	200012e0 	.word	0x200012e0
 800b524:	200012f4 	.word	0x200012f4
 800b528:	2000130c 	.word	0x2000130c
 800b52c:	20001318 	.word	0x20001318
 800b530:	20001334 	.word	0x20001334
 800b534:	e000ed04 	.word	0xe000ed04

0800b538 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b084      	sub	sp, #16
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b540:	2300      	movs	r3, #0
 800b542:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d017      	beq.n	800b57a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b54a:	4b13      	ldr	r3, [pc, #76]	; (800b598 <vTaskDelay+0x60>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d00a      	beq.n	800b568 <vTaskDelay+0x30>
	__asm volatile
 800b552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b556:	f383 8811 	msr	BASEPRI, r3
 800b55a:	f3bf 8f6f 	isb	sy
 800b55e:	f3bf 8f4f 	dsb	sy
 800b562:	60bb      	str	r3, [r7, #8]
}
 800b564:	bf00      	nop
 800b566:	e7fe      	b.n	800b566 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b568:	f000 f8e6 	bl	800b738 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b56c:	2100      	movs	r1, #0
 800b56e:	6878      	ldr	r0, [r7, #4]
 800b570:	f000 fe5e 	bl	800c230 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b574:	f000 f8ee 	bl	800b754 <xTaskResumeAll>
 800b578:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d107      	bne.n	800b590 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b580:	4b06      	ldr	r3, [pc, #24]	; (800b59c <vTaskDelay+0x64>)
 800b582:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b586:	601a      	str	r2, [r3, #0]
 800b588:	f3bf 8f4f 	dsb	sy
 800b58c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b590:	bf00      	nop
 800b592:	3710      	adds	r7, #16
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}
 800b598:	20001334 	.word	0x20001334
 800b59c:	e000ed04 	.word	0xe000ed04

0800b5a0 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b088      	sub	sp, #32
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800b5ac:	69bb      	ldr	r3, [r7, #24]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d10a      	bne.n	800b5c8 <eTaskGetState+0x28>
	__asm volatile
 800b5b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b6:	f383 8811 	msr	BASEPRI, r3
 800b5ba:	f3bf 8f6f 	isb	sy
 800b5be:	f3bf 8f4f 	dsb	sy
 800b5c2:	60bb      	str	r3, [r7, #8]
}
 800b5c4:	bf00      	nop
 800b5c6:	e7fe      	b.n	800b5c6 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800b5c8:	4b23      	ldr	r3, [pc, #140]	; (800b658 <eTaskGetState+0xb8>)
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	69ba      	ldr	r2, [r7, #24]
 800b5ce:	429a      	cmp	r2, r3
 800b5d0:	d102      	bne.n	800b5d8 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	77fb      	strb	r3, [r7, #31]
 800b5d6:	e03a      	b.n	800b64e <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 800b5d8:	f001 fbb4 	bl	800cd44 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800b5dc:	69bb      	ldr	r3, [r7, #24]
 800b5de:	695b      	ldr	r3, [r3, #20]
 800b5e0:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800b5e2:	4b1e      	ldr	r3, [pc, #120]	; (800b65c <eTaskGetState+0xbc>)
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800b5e8:	4b1d      	ldr	r3, [pc, #116]	; (800b660 <eTaskGetState+0xc0>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800b5ee:	f001 fbd9 	bl	800cda4 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800b5f2:	697a      	ldr	r2, [r7, #20]
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	429a      	cmp	r2, r3
 800b5f8:	d003      	beq.n	800b602 <eTaskGetState+0x62>
 800b5fa:	697a      	ldr	r2, [r7, #20]
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	429a      	cmp	r2, r3
 800b600:	d102      	bne.n	800b608 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800b602:	2302      	movs	r3, #2
 800b604:	77fb      	strb	r3, [r7, #31]
 800b606:	e022      	b.n	800b64e <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800b608:	697b      	ldr	r3, [r7, #20]
 800b60a:	4a16      	ldr	r2, [pc, #88]	; (800b664 <eTaskGetState+0xc4>)
 800b60c:	4293      	cmp	r3, r2
 800b60e:	d112      	bne.n	800b636 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800b610:	69bb      	ldr	r3, [r7, #24]
 800b612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b614:	2b00      	cmp	r3, #0
 800b616:	d10b      	bne.n	800b630 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800b618:	69bb      	ldr	r3, [r7, #24]
 800b61a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800b61e:	b2db      	uxtb	r3, r3
 800b620:	2b01      	cmp	r3, #1
 800b622:	d102      	bne.n	800b62a <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 800b624:	2302      	movs	r3, #2
 800b626:	77fb      	strb	r3, [r7, #31]
 800b628:	e011      	b.n	800b64e <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 800b62a:	2303      	movs	r3, #3
 800b62c:	77fb      	strb	r3, [r7, #31]
 800b62e:	e00e      	b.n	800b64e <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800b630:	2302      	movs	r3, #2
 800b632:	77fb      	strb	r3, [r7, #31]
 800b634:	e00b      	b.n	800b64e <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800b636:	697b      	ldr	r3, [r7, #20]
 800b638:	4a0b      	ldr	r2, [pc, #44]	; (800b668 <eTaskGetState+0xc8>)
 800b63a:	4293      	cmp	r3, r2
 800b63c:	d002      	beq.n	800b644 <eTaskGetState+0xa4>
 800b63e:	697b      	ldr	r3, [r7, #20]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d102      	bne.n	800b64a <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800b644:	2304      	movs	r3, #4
 800b646:	77fb      	strb	r3, [r7, #31]
 800b648:	e001      	b.n	800b64e <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800b64a:	2301      	movs	r3, #1
 800b64c:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800b64e:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800b650:	4618      	mov	r0, r3
 800b652:	3720      	adds	r7, #32
 800b654:	46bd      	mov	sp, r7
 800b656:	bd80      	pop	{r7, pc}
 800b658:	20000e38 	.word	0x20000e38
 800b65c:	200012c4 	.word	0x200012c4
 800b660:	200012c8 	.word	0x200012c8
 800b664:	200012f8 	.word	0x200012f8
 800b668:	200012e0 	.word	0x200012e0

0800b66c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b08a      	sub	sp, #40	; 0x28
 800b670:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b672:	2300      	movs	r3, #0
 800b674:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b676:	2300      	movs	r3, #0
 800b678:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b67a:	463a      	mov	r2, r7
 800b67c:	1d39      	adds	r1, r7, #4
 800b67e:	f107 0308 	add.w	r3, r7, #8
 800b682:	4618      	mov	r0, r3
 800b684:	f7fe fb98 	bl	8009db8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b688:	6839      	ldr	r1, [r7, #0]
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	68ba      	ldr	r2, [r7, #8]
 800b68e:	9202      	str	r2, [sp, #8]
 800b690:	9301      	str	r3, [sp, #4]
 800b692:	2300      	movs	r3, #0
 800b694:	9300      	str	r3, [sp, #0]
 800b696:	2300      	movs	r3, #0
 800b698:	460a      	mov	r2, r1
 800b69a:	4921      	ldr	r1, [pc, #132]	; (800b720 <vTaskStartScheduler+0xb4>)
 800b69c:	4821      	ldr	r0, [pc, #132]	; (800b724 <vTaskStartScheduler+0xb8>)
 800b69e:	f7ff fd37 	bl	800b110 <xTaskCreateStatic>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	4a20      	ldr	r2, [pc, #128]	; (800b728 <vTaskStartScheduler+0xbc>)
 800b6a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b6a8:	4b1f      	ldr	r3, [pc, #124]	; (800b728 <vTaskStartScheduler+0xbc>)
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d002      	beq.n	800b6b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b6b0:	2301      	movs	r3, #1
 800b6b2:	617b      	str	r3, [r7, #20]
 800b6b4:	e001      	b.n	800b6ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b6ba:	697b      	ldr	r3, [r7, #20]
 800b6bc:	2b01      	cmp	r3, #1
 800b6be:	d102      	bne.n	800b6c6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b6c0:	f000 fe0a 	bl	800c2d8 <xTimerCreateTimerTask>
 800b6c4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b6c6:	697b      	ldr	r3, [r7, #20]
 800b6c8:	2b01      	cmp	r3, #1
 800b6ca:	d116      	bne.n	800b6fa <vTaskStartScheduler+0x8e>
	__asm volatile
 800b6cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6d0:	f383 8811 	msr	BASEPRI, r3
 800b6d4:	f3bf 8f6f 	isb	sy
 800b6d8:	f3bf 8f4f 	dsb	sy
 800b6dc:	613b      	str	r3, [r7, #16]
}
 800b6de:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b6e0:	4b12      	ldr	r3, [pc, #72]	; (800b72c <vTaskStartScheduler+0xc0>)
 800b6e2:	f04f 32ff 	mov.w	r2, #4294967295
 800b6e6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b6e8:	4b11      	ldr	r3, [pc, #68]	; (800b730 <vTaskStartScheduler+0xc4>)
 800b6ea:	2201      	movs	r2, #1
 800b6ec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b6ee:	4b11      	ldr	r3, [pc, #68]	; (800b734 <vTaskStartScheduler+0xc8>)
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b6f4:	f001 fa84 	bl	800cc00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b6f8:	e00e      	b.n	800b718 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b6fa:	697b      	ldr	r3, [r7, #20]
 800b6fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b700:	d10a      	bne.n	800b718 <vTaskStartScheduler+0xac>
	__asm volatile
 800b702:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b706:	f383 8811 	msr	BASEPRI, r3
 800b70a:	f3bf 8f6f 	isb	sy
 800b70e:	f3bf 8f4f 	dsb	sy
 800b712:	60fb      	str	r3, [r7, #12]
}
 800b714:	bf00      	nop
 800b716:	e7fe      	b.n	800b716 <vTaskStartScheduler+0xaa>
}
 800b718:	bf00      	nop
 800b71a:	3718      	adds	r7, #24
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}
 800b720:	0800eedc 	.word	0x0800eedc
 800b724:	0800bd51 	.word	0x0800bd51
 800b728:	20001330 	.word	0x20001330
 800b72c:	2000132c 	.word	0x2000132c
 800b730:	20001318 	.word	0x20001318
 800b734:	20001310 	.word	0x20001310

0800b738 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b738:	b480      	push	{r7}
 800b73a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b73c:	4b04      	ldr	r3, [pc, #16]	; (800b750 <vTaskSuspendAll+0x18>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	3301      	adds	r3, #1
 800b742:	4a03      	ldr	r2, [pc, #12]	; (800b750 <vTaskSuspendAll+0x18>)
 800b744:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b746:	bf00      	nop
 800b748:	46bd      	mov	sp, r7
 800b74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74e:	4770      	bx	lr
 800b750:	20001334 	.word	0x20001334

0800b754 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b084      	sub	sp, #16
 800b758:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b75a:	2300      	movs	r3, #0
 800b75c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b75e:	2300      	movs	r3, #0
 800b760:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b762:	4b42      	ldr	r3, [pc, #264]	; (800b86c <xTaskResumeAll+0x118>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d10a      	bne.n	800b780 <xTaskResumeAll+0x2c>
	__asm volatile
 800b76a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b76e:	f383 8811 	msr	BASEPRI, r3
 800b772:	f3bf 8f6f 	isb	sy
 800b776:	f3bf 8f4f 	dsb	sy
 800b77a:	603b      	str	r3, [r7, #0]
}
 800b77c:	bf00      	nop
 800b77e:	e7fe      	b.n	800b77e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b780:	f001 fae0 	bl	800cd44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b784:	4b39      	ldr	r3, [pc, #228]	; (800b86c <xTaskResumeAll+0x118>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	3b01      	subs	r3, #1
 800b78a:	4a38      	ldr	r2, [pc, #224]	; (800b86c <xTaskResumeAll+0x118>)
 800b78c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b78e:	4b37      	ldr	r3, [pc, #220]	; (800b86c <xTaskResumeAll+0x118>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d162      	bne.n	800b85c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b796:	4b36      	ldr	r3, [pc, #216]	; (800b870 <xTaskResumeAll+0x11c>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d05e      	beq.n	800b85c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b79e:	e02f      	b.n	800b800 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7a0:	4b34      	ldr	r3, [pc, #208]	; (800b874 <xTaskResumeAll+0x120>)
 800b7a2:	68db      	ldr	r3, [r3, #12]
 800b7a4:	68db      	ldr	r3, [r3, #12]
 800b7a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	3318      	adds	r3, #24
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	f7fe fbc1 	bl	8009f34 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	3304      	adds	r3, #4
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	f7fe fbbc 	bl	8009f34 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7c0:	4b2d      	ldr	r3, [pc, #180]	; (800b878 <xTaskResumeAll+0x124>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	429a      	cmp	r2, r3
 800b7c6:	d903      	bls.n	800b7d0 <xTaskResumeAll+0x7c>
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7cc:	4a2a      	ldr	r2, [pc, #168]	; (800b878 <xTaskResumeAll+0x124>)
 800b7ce:	6013      	str	r3, [r2, #0]
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7d4:	4613      	mov	r3, r2
 800b7d6:	009b      	lsls	r3, r3, #2
 800b7d8:	4413      	add	r3, r2
 800b7da:	009b      	lsls	r3, r3, #2
 800b7dc:	4a27      	ldr	r2, [pc, #156]	; (800b87c <xTaskResumeAll+0x128>)
 800b7de:	441a      	add	r2, r3
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	3304      	adds	r3, #4
 800b7e4:	4619      	mov	r1, r3
 800b7e6:	4610      	mov	r0, r2
 800b7e8:	f7fe fb47 	bl	8009e7a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7f0:	4b23      	ldr	r3, [pc, #140]	; (800b880 <xTaskResumeAll+0x12c>)
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7f6:	429a      	cmp	r2, r3
 800b7f8:	d302      	bcc.n	800b800 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b7fa:	4b22      	ldr	r3, [pc, #136]	; (800b884 <xTaskResumeAll+0x130>)
 800b7fc:	2201      	movs	r2, #1
 800b7fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b800:	4b1c      	ldr	r3, [pc, #112]	; (800b874 <xTaskResumeAll+0x120>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d1cb      	bne.n	800b7a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d001      	beq.n	800b812 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b80e:	f000 fb55 	bl	800bebc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b812:	4b1d      	ldr	r3, [pc, #116]	; (800b888 <xTaskResumeAll+0x134>)
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d010      	beq.n	800b840 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b81e:	f000 f847 	bl	800b8b0 <xTaskIncrementTick>
 800b822:	4603      	mov	r3, r0
 800b824:	2b00      	cmp	r3, #0
 800b826:	d002      	beq.n	800b82e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b828:	4b16      	ldr	r3, [pc, #88]	; (800b884 <xTaskResumeAll+0x130>)
 800b82a:	2201      	movs	r2, #1
 800b82c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	3b01      	subs	r3, #1
 800b832:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d1f1      	bne.n	800b81e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b83a:	4b13      	ldr	r3, [pc, #76]	; (800b888 <xTaskResumeAll+0x134>)
 800b83c:	2200      	movs	r2, #0
 800b83e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b840:	4b10      	ldr	r3, [pc, #64]	; (800b884 <xTaskResumeAll+0x130>)
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d009      	beq.n	800b85c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b848:	2301      	movs	r3, #1
 800b84a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b84c:	4b0f      	ldr	r3, [pc, #60]	; (800b88c <xTaskResumeAll+0x138>)
 800b84e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b852:	601a      	str	r2, [r3, #0]
 800b854:	f3bf 8f4f 	dsb	sy
 800b858:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b85c:	f001 faa2 	bl	800cda4 <vPortExitCritical>

	return xAlreadyYielded;
 800b860:	68bb      	ldr	r3, [r7, #8]
}
 800b862:	4618      	mov	r0, r3
 800b864:	3710      	adds	r7, #16
 800b866:	46bd      	mov	sp, r7
 800b868:	bd80      	pop	{r7, pc}
 800b86a:	bf00      	nop
 800b86c:	20001334 	.word	0x20001334
 800b870:	2000130c 	.word	0x2000130c
 800b874:	200012cc 	.word	0x200012cc
 800b878:	20001314 	.word	0x20001314
 800b87c:	20000e3c 	.word	0x20000e3c
 800b880:	20000e38 	.word	0x20000e38
 800b884:	20001320 	.word	0x20001320
 800b888:	2000131c 	.word	0x2000131c
 800b88c:	e000ed04 	.word	0xe000ed04

0800b890 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b890:	b480      	push	{r7}
 800b892:	b083      	sub	sp, #12
 800b894:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b896:	4b05      	ldr	r3, [pc, #20]	; (800b8ac <xTaskGetTickCount+0x1c>)
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b89c:	687b      	ldr	r3, [r7, #4]
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	370c      	adds	r7, #12
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a8:	4770      	bx	lr
 800b8aa:	bf00      	nop
 800b8ac:	20001310 	.word	0x20001310

0800b8b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b086      	sub	sp, #24
 800b8b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b8ba:	4b4f      	ldr	r3, [pc, #316]	; (800b9f8 <xTaskIncrementTick+0x148>)
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	f040 808f 	bne.w	800b9e2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b8c4:	4b4d      	ldr	r3, [pc, #308]	; (800b9fc <xTaskIncrementTick+0x14c>)
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	3301      	adds	r3, #1
 800b8ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b8cc:	4a4b      	ldr	r2, [pc, #300]	; (800b9fc <xTaskIncrementTick+0x14c>)
 800b8ce:	693b      	ldr	r3, [r7, #16]
 800b8d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b8d2:	693b      	ldr	r3, [r7, #16]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d120      	bne.n	800b91a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b8d8:	4b49      	ldr	r3, [pc, #292]	; (800ba00 <xTaskIncrementTick+0x150>)
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d00a      	beq.n	800b8f8 <xTaskIncrementTick+0x48>
	__asm volatile
 800b8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8e6:	f383 8811 	msr	BASEPRI, r3
 800b8ea:	f3bf 8f6f 	isb	sy
 800b8ee:	f3bf 8f4f 	dsb	sy
 800b8f2:	603b      	str	r3, [r7, #0]
}
 800b8f4:	bf00      	nop
 800b8f6:	e7fe      	b.n	800b8f6 <xTaskIncrementTick+0x46>
 800b8f8:	4b41      	ldr	r3, [pc, #260]	; (800ba00 <xTaskIncrementTick+0x150>)
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	60fb      	str	r3, [r7, #12]
 800b8fe:	4b41      	ldr	r3, [pc, #260]	; (800ba04 <xTaskIncrementTick+0x154>)
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	4a3f      	ldr	r2, [pc, #252]	; (800ba00 <xTaskIncrementTick+0x150>)
 800b904:	6013      	str	r3, [r2, #0]
 800b906:	4a3f      	ldr	r2, [pc, #252]	; (800ba04 <xTaskIncrementTick+0x154>)
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	6013      	str	r3, [r2, #0]
 800b90c:	4b3e      	ldr	r3, [pc, #248]	; (800ba08 <xTaskIncrementTick+0x158>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	3301      	adds	r3, #1
 800b912:	4a3d      	ldr	r2, [pc, #244]	; (800ba08 <xTaskIncrementTick+0x158>)
 800b914:	6013      	str	r3, [r2, #0]
 800b916:	f000 fad1 	bl	800bebc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b91a:	4b3c      	ldr	r3, [pc, #240]	; (800ba0c <xTaskIncrementTick+0x15c>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	693a      	ldr	r2, [r7, #16]
 800b920:	429a      	cmp	r2, r3
 800b922:	d349      	bcc.n	800b9b8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b924:	4b36      	ldr	r3, [pc, #216]	; (800ba00 <xTaskIncrementTick+0x150>)
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d104      	bne.n	800b938 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b92e:	4b37      	ldr	r3, [pc, #220]	; (800ba0c <xTaskIncrementTick+0x15c>)
 800b930:	f04f 32ff 	mov.w	r2, #4294967295
 800b934:	601a      	str	r2, [r3, #0]
					break;
 800b936:	e03f      	b.n	800b9b8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b938:	4b31      	ldr	r3, [pc, #196]	; (800ba00 <xTaskIncrementTick+0x150>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	68db      	ldr	r3, [r3, #12]
 800b93e:	68db      	ldr	r3, [r3, #12]
 800b940:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b942:	68bb      	ldr	r3, [r7, #8]
 800b944:	685b      	ldr	r3, [r3, #4]
 800b946:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b948:	693a      	ldr	r2, [r7, #16]
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	429a      	cmp	r2, r3
 800b94e:	d203      	bcs.n	800b958 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b950:	4a2e      	ldr	r2, [pc, #184]	; (800ba0c <xTaskIncrementTick+0x15c>)
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b956:	e02f      	b.n	800b9b8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	3304      	adds	r3, #4
 800b95c:	4618      	mov	r0, r3
 800b95e:	f7fe fae9 	bl	8009f34 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b962:	68bb      	ldr	r3, [r7, #8]
 800b964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b966:	2b00      	cmp	r3, #0
 800b968:	d004      	beq.n	800b974 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	3318      	adds	r3, #24
 800b96e:	4618      	mov	r0, r3
 800b970:	f7fe fae0 	bl	8009f34 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b974:	68bb      	ldr	r3, [r7, #8]
 800b976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b978:	4b25      	ldr	r3, [pc, #148]	; (800ba10 <xTaskIncrementTick+0x160>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	429a      	cmp	r2, r3
 800b97e:	d903      	bls.n	800b988 <xTaskIncrementTick+0xd8>
 800b980:	68bb      	ldr	r3, [r7, #8]
 800b982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b984:	4a22      	ldr	r2, [pc, #136]	; (800ba10 <xTaskIncrementTick+0x160>)
 800b986:	6013      	str	r3, [r2, #0]
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b98c:	4613      	mov	r3, r2
 800b98e:	009b      	lsls	r3, r3, #2
 800b990:	4413      	add	r3, r2
 800b992:	009b      	lsls	r3, r3, #2
 800b994:	4a1f      	ldr	r2, [pc, #124]	; (800ba14 <xTaskIncrementTick+0x164>)
 800b996:	441a      	add	r2, r3
 800b998:	68bb      	ldr	r3, [r7, #8]
 800b99a:	3304      	adds	r3, #4
 800b99c:	4619      	mov	r1, r3
 800b99e:	4610      	mov	r0, r2
 800b9a0:	f7fe fa6b 	bl	8009e7a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9a8:	4b1b      	ldr	r3, [pc, #108]	; (800ba18 <xTaskIncrementTick+0x168>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9ae:	429a      	cmp	r2, r3
 800b9b0:	d3b8      	bcc.n	800b924 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b9b6:	e7b5      	b.n	800b924 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b9b8:	4b17      	ldr	r3, [pc, #92]	; (800ba18 <xTaskIncrementTick+0x168>)
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9be:	4915      	ldr	r1, [pc, #84]	; (800ba14 <xTaskIncrementTick+0x164>)
 800b9c0:	4613      	mov	r3, r2
 800b9c2:	009b      	lsls	r3, r3, #2
 800b9c4:	4413      	add	r3, r2
 800b9c6:	009b      	lsls	r3, r3, #2
 800b9c8:	440b      	add	r3, r1
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	2b01      	cmp	r3, #1
 800b9ce:	d901      	bls.n	800b9d4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b9d0:	2301      	movs	r3, #1
 800b9d2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b9d4:	4b11      	ldr	r3, [pc, #68]	; (800ba1c <xTaskIncrementTick+0x16c>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d007      	beq.n	800b9ec <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b9dc:	2301      	movs	r3, #1
 800b9de:	617b      	str	r3, [r7, #20]
 800b9e0:	e004      	b.n	800b9ec <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b9e2:	4b0f      	ldr	r3, [pc, #60]	; (800ba20 <xTaskIncrementTick+0x170>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	3301      	adds	r3, #1
 800b9e8:	4a0d      	ldr	r2, [pc, #52]	; (800ba20 <xTaskIncrementTick+0x170>)
 800b9ea:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b9ec:	697b      	ldr	r3, [r7, #20]
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	3718      	adds	r7, #24
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bd80      	pop	{r7, pc}
 800b9f6:	bf00      	nop
 800b9f8:	20001334 	.word	0x20001334
 800b9fc:	20001310 	.word	0x20001310
 800ba00:	200012c4 	.word	0x200012c4
 800ba04:	200012c8 	.word	0x200012c8
 800ba08:	20001324 	.word	0x20001324
 800ba0c:	2000132c 	.word	0x2000132c
 800ba10:	20001314 	.word	0x20001314
 800ba14:	20000e3c 	.word	0x20000e3c
 800ba18:	20000e38 	.word	0x20000e38
 800ba1c:	20001320 	.word	0x20001320
 800ba20:	2000131c 	.word	0x2000131c

0800ba24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ba24:	b480      	push	{r7}
 800ba26:	b085      	sub	sp, #20
 800ba28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ba2a:	4b28      	ldr	r3, [pc, #160]	; (800bacc <vTaskSwitchContext+0xa8>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d003      	beq.n	800ba3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ba32:	4b27      	ldr	r3, [pc, #156]	; (800bad0 <vTaskSwitchContext+0xac>)
 800ba34:	2201      	movs	r2, #1
 800ba36:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ba38:	e041      	b.n	800babe <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800ba3a:	4b25      	ldr	r3, [pc, #148]	; (800bad0 <vTaskSwitchContext+0xac>)
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba40:	4b24      	ldr	r3, [pc, #144]	; (800bad4 <vTaskSwitchContext+0xb0>)
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	60fb      	str	r3, [r7, #12]
 800ba46:	e010      	b.n	800ba6a <vTaskSwitchContext+0x46>
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d10a      	bne.n	800ba64 <vTaskSwitchContext+0x40>
	__asm volatile
 800ba4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba52:	f383 8811 	msr	BASEPRI, r3
 800ba56:	f3bf 8f6f 	isb	sy
 800ba5a:	f3bf 8f4f 	dsb	sy
 800ba5e:	607b      	str	r3, [r7, #4]
}
 800ba60:	bf00      	nop
 800ba62:	e7fe      	b.n	800ba62 <vTaskSwitchContext+0x3e>
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	3b01      	subs	r3, #1
 800ba68:	60fb      	str	r3, [r7, #12]
 800ba6a:	491b      	ldr	r1, [pc, #108]	; (800bad8 <vTaskSwitchContext+0xb4>)
 800ba6c:	68fa      	ldr	r2, [r7, #12]
 800ba6e:	4613      	mov	r3, r2
 800ba70:	009b      	lsls	r3, r3, #2
 800ba72:	4413      	add	r3, r2
 800ba74:	009b      	lsls	r3, r3, #2
 800ba76:	440b      	add	r3, r1
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d0e4      	beq.n	800ba48 <vTaskSwitchContext+0x24>
 800ba7e:	68fa      	ldr	r2, [r7, #12]
 800ba80:	4613      	mov	r3, r2
 800ba82:	009b      	lsls	r3, r3, #2
 800ba84:	4413      	add	r3, r2
 800ba86:	009b      	lsls	r3, r3, #2
 800ba88:	4a13      	ldr	r2, [pc, #76]	; (800bad8 <vTaskSwitchContext+0xb4>)
 800ba8a:	4413      	add	r3, r2
 800ba8c:	60bb      	str	r3, [r7, #8]
 800ba8e:	68bb      	ldr	r3, [r7, #8]
 800ba90:	685b      	ldr	r3, [r3, #4]
 800ba92:	685a      	ldr	r2, [r3, #4]
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	605a      	str	r2, [r3, #4]
 800ba98:	68bb      	ldr	r3, [r7, #8]
 800ba9a:	685a      	ldr	r2, [r3, #4]
 800ba9c:	68bb      	ldr	r3, [r7, #8]
 800ba9e:	3308      	adds	r3, #8
 800baa0:	429a      	cmp	r2, r3
 800baa2:	d104      	bne.n	800baae <vTaskSwitchContext+0x8a>
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	685b      	ldr	r3, [r3, #4]
 800baa8:	685a      	ldr	r2, [r3, #4]
 800baaa:	68bb      	ldr	r3, [r7, #8]
 800baac:	605a      	str	r2, [r3, #4]
 800baae:	68bb      	ldr	r3, [r7, #8]
 800bab0:	685b      	ldr	r3, [r3, #4]
 800bab2:	68db      	ldr	r3, [r3, #12]
 800bab4:	4a09      	ldr	r2, [pc, #36]	; (800badc <vTaskSwitchContext+0xb8>)
 800bab6:	6013      	str	r3, [r2, #0]
 800bab8:	4a06      	ldr	r2, [pc, #24]	; (800bad4 <vTaskSwitchContext+0xb0>)
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	6013      	str	r3, [r2, #0]
}
 800babe:	bf00      	nop
 800bac0:	3714      	adds	r7, #20
 800bac2:	46bd      	mov	sp, r7
 800bac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac8:	4770      	bx	lr
 800baca:	bf00      	nop
 800bacc:	20001334 	.word	0x20001334
 800bad0:	20001320 	.word	0x20001320
 800bad4:	20001314 	.word	0x20001314
 800bad8:	20000e3c 	.word	0x20000e3c
 800badc:	20000e38 	.word	0x20000e38

0800bae0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b084      	sub	sp, #16
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
 800bae8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d10a      	bne.n	800bb06 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800baf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baf4:	f383 8811 	msr	BASEPRI, r3
 800baf8:	f3bf 8f6f 	isb	sy
 800bafc:	f3bf 8f4f 	dsb	sy
 800bb00:	60fb      	str	r3, [r7, #12]
}
 800bb02:	bf00      	nop
 800bb04:	e7fe      	b.n	800bb04 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bb06:	4b07      	ldr	r3, [pc, #28]	; (800bb24 <vTaskPlaceOnEventList+0x44>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	3318      	adds	r3, #24
 800bb0c:	4619      	mov	r1, r3
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	f7fe f9d7 	bl	8009ec2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bb14:	2101      	movs	r1, #1
 800bb16:	6838      	ldr	r0, [r7, #0]
 800bb18:	f000 fb8a 	bl	800c230 <prvAddCurrentTaskToDelayedList>
}
 800bb1c:	bf00      	nop
 800bb1e:	3710      	adds	r7, #16
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bd80      	pop	{r7, pc}
 800bb24:	20000e38 	.word	0x20000e38

0800bb28 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b086      	sub	sp, #24
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	60f8      	str	r0, [r7, #12]
 800bb30:	60b9      	str	r1, [r7, #8]
 800bb32:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d10a      	bne.n	800bb50 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800bb3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb3e:	f383 8811 	msr	BASEPRI, r3
 800bb42:	f3bf 8f6f 	isb	sy
 800bb46:	f3bf 8f4f 	dsb	sy
 800bb4a:	617b      	str	r3, [r7, #20]
}
 800bb4c:	bf00      	nop
 800bb4e:	e7fe      	b.n	800bb4e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bb50:	4b0a      	ldr	r3, [pc, #40]	; (800bb7c <vTaskPlaceOnEventListRestricted+0x54>)
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	3318      	adds	r3, #24
 800bb56:	4619      	mov	r1, r3
 800bb58:	68f8      	ldr	r0, [r7, #12]
 800bb5a:	f7fe f98e 	bl	8009e7a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d002      	beq.n	800bb6a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800bb64:	f04f 33ff 	mov.w	r3, #4294967295
 800bb68:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bb6a:	6879      	ldr	r1, [r7, #4]
 800bb6c:	68b8      	ldr	r0, [r7, #8]
 800bb6e:	f000 fb5f 	bl	800c230 <prvAddCurrentTaskToDelayedList>
	}
 800bb72:	bf00      	nop
 800bb74:	3718      	adds	r7, #24
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bd80      	pop	{r7, pc}
 800bb7a:	bf00      	nop
 800bb7c:	20000e38 	.word	0x20000e38

0800bb80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b086      	sub	sp, #24
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	68db      	ldr	r3, [r3, #12]
 800bb8c:	68db      	ldr	r3, [r3, #12]
 800bb8e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bb90:	693b      	ldr	r3, [r7, #16]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d10a      	bne.n	800bbac <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bb96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb9a:	f383 8811 	msr	BASEPRI, r3
 800bb9e:	f3bf 8f6f 	isb	sy
 800bba2:	f3bf 8f4f 	dsb	sy
 800bba6:	60fb      	str	r3, [r7, #12]
}
 800bba8:	bf00      	nop
 800bbaa:	e7fe      	b.n	800bbaa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	3318      	adds	r3, #24
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	f7fe f9bf 	bl	8009f34 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bbb6:	4b1e      	ldr	r3, [pc, #120]	; (800bc30 <xTaskRemoveFromEventList+0xb0>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d11d      	bne.n	800bbfa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bbbe:	693b      	ldr	r3, [r7, #16]
 800bbc0:	3304      	adds	r3, #4
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f7fe f9b6 	bl	8009f34 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bbc8:	693b      	ldr	r3, [r7, #16]
 800bbca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbcc:	4b19      	ldr	r3, [pc, #100]	; (800bc34 <xTaskRemoveFromEventList+0xb4>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	429a      	cmp	r2, r3
 800bbd2:	d903      	bls.n	800bbdc <xTaskRemoveFromEventList+0x5c>
 800bbd4:	693b      	ldr	r3, [r7, #16]
 800bbd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbd8:	4a16      	ldr	r2, [pc, #88]	; (800bc34 <xTaskRemoveFromEventList+0xb4>)
 800bbda:	6013      	str	r3, [r2, #0]
 800bbdc:	693b      	ldr	r3, [r7, #16]
 800bbde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbe0:	4613      	mov	r3, r2
 800bbe2:	009b      	lsls	r3, r3, #2
 800bbe4:	4413      	add	r3, r2
 800bbe6:	009b      	lsls	r3, r3, #2
 800bbe8:	4a13      	ldr	r2, [pc, #76]	; (800bc38 <xTaskRemoveFromEventList+0xb8>)
 800bbea:	441a      	add	r2, r3
 800bbec:	693b      	ldr	r3, [r7, #16]
 800bbee:	3304      	adds	r3, #4
 800bbf0:	4619      	mov	r1, r3
 800bbf2:	4610      	mov	r0, r2
 800bbf4:	f7fe f941 	bl	8009e7a <vListInsertEnd>
 800bbf8:	e005      	b.n	800bc06 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bbfa:	693b      	ldr	r3, [r7, #16]
 800bbfc:	3318      	adds	r3, #24
 800bbfe:	4619      	mov	r1, r3
 800bc00:	480e      	ldr	r0, [pc, #56]	; (800bc3c <xTaskRemoveFromEventList+0xbc>)
 800bc02:	f7fe f93a 	bl	8009e7a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bc06:	693b      	ldr	r3, [r7, #16]
 800bc08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc0a:	4b0d      	ldr	r3, [pc, #52]	; (800bc40 <xTaskRemoveFromEventList+0xc0>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc10:	429a      	cmp	r2, r3
 800bc12:	d905      	bls.n	800bc20 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bc14:	2301      	movs	r3, #1
 800bc16:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bc18:	4b0a      	ldr	r3, [pc, #40]	; (800bc44 <xTaskRemoveFromEventList+0xc4>)
 800bc1a:	2201      	movs	r2, #1
 800bc1c:	601a      	str	r2, [r3, #0]
 800bc1e:	e001      	b.n	800bc24 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800bc20:	2300      	movs	r3, #0
 800bc22:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bc24:	697b      	ldr	r3, [r7, #20]
}
 800bc26:	4618      	mov	r0, r3
 800bc28:	3718      	adds	r7, #24
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	bd80      	pop	{r7, pc}
 800bc2e:	bf00      	nop
 800bc30:	20001334 	.word	0x20001334
 800bc34:	20001314 	.word	0x20001314
 800bc38:	20000e3c 	.word	0x20000e3c
 800bc3c:	200012cc 	.word	0x200012cc
 800bc40:	20000e38 	.word	0x20000e38
 800bc44:	20001320 	.word	0x20001320

0800bc48 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bc48:	b480      	push	{r7}
 800bc4a:	b083      	sub	sp, #12
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bc50:	4b06      	ldr	r3, [pc, #24]	; (800bc6c <vTaskInternalSetTimeOutState+0x24>)
 800bc52:	681a      	ldr	r2, [r3, #0]
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bc58:	4b05      	ldr	r3, [pc, #20]	; (800bc70 <vTaskInternalSetTimeOutState+0x28>)
 800bc5a:	681a      	ldr	r2, [r3, #0]
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	605a      	str	r2, [r3, #4]
}
 800bc60:	bf00      	nop
 800bc62:	370c      	adds	r7, #12
 800bc64:	46bd      	mov	sp, r7
 800bc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6a:	4770      	bx	lr
 800bc6c:	20001324 	.word	0x20001324
 800bc70:	20001310 	.word	0x20001310

0800bc74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b088      	sub	sp, #32
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
 800bc7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d10a      	bne.n	800bc9a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bc84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc88:	f383 8811 	msr	BASEPRI, r3
 800bc8c:	f3bf 8f6f 	isb	sy
 800bc90:	f3bf 8f4f 	dsb	sy
 800bc94:	613b      	str	r3, [r7, #16]
}
 800bc96:	bf00      	nop
 800bc98:	e7fe      	b.n	800bc98 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d10a      	bne.n	800bcb6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bca4:	f383 8811 	msr	BASEPRI, r3
 800bca8:	f3bf 8f6f 	isb	sy
 800bcac:	f3bf 8f4f 	dsb	sy
 800bcb0:	60fb      	str	r3, [r7, #12]
}
 800bcb2:	bf00      	nop
 800bcb4:	e7fe      	b.n	800bcb4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bcb6:	f001 f845 	bl	800cd44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bcba:	4b1d      	ldr	r3, [pc, #116]	; (800bd30 <xTaskCheckForTimeOut+0xbc>)
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	685b      	ldr	r3, [r3, #4]
 800bcc4:	69ba      	ldr	r2, [r7, #24]
 800bcc6:	1ad3      	subs	r3, r2, r3
 800bcc8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcd2:	d102      	bne.n	800bcda <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	61fb      	str	r3, [r7, #28]
 800bcd8:	e023      	b.n	800bd22 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681a      	ldr	r2, [r3, #0]
 800bcde:	4b15      	ldr	r3, [pc, #84]	; (800bd34 <xTaskCheckForTimeOut+0xc0>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	429a      	cmp	r2, r3
 800bce4:	d007      	beq.n	800bcf6 <xTaskCheckForTimeOut+0x82>
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	685b      	ldr	r3, [r3, #4]
 800bcea:	69ba      	ldr	r2, [r7, #24]
 800bcec:	429a      	cmp	r2, r3
 800bcee:	d302      	bcc.n	800bcf6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bcf0:	2301      	movs	r3, #1
 800bcf2:	61fb      	str	r3, [r7, #28]
 800bcf4:	e015      	b.n	800bd22 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	697a      	ldr	r2, [r7, #20]
 800bcfc:	429a      	cmp	r2, r3
 800bcfe:	d20b      	bcs.n	800bd18 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	681a      	ldr	r2, [r3, #0]
 800bd04:	697b      	ldr	r3, [r7, #20]
 800bd06:	1ad2      	subs	r2, r2, r3
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bd0c:	6878      	ldr	r0, [r7, #4]
 800bd0e:	f7ff ff9b 	bl	800bc48 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bd12:	2300      	movs	r3, #0
 800bd14:	61fb      	str	r3, [r7, #28]
 800bd16:	e004      	b.n	800bd22 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bd1e:	2301      	movs	r3, #1
 800bd20:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bd22:	f001 f83f 	bl	800cda4 <vPortExitCritical>

	return xReturn;
 800bd26:	69fb      	ldr	r3, [r7, #28]
}
 800bd28:	4618      	mov	r0, r3
 800bd2a:	3720      	adds	r7, #32
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}
 800bd30:	20001310 	.word	0x20001310
 800bd34:	20001324 	.word	0x20001324

0800bd38 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bd38:	b480      	push	{r7}
 800bd3a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bd3c:	4b03      	ldr	r3, [pc, #12]	; (800bd4c <vTaskMissedYield+0x14>)
 800bd3e:	2201      	movs	r2, #1
 800bd40:	601a      	str	r2, [r3, #0]
}
 800bd42:	bf00      	nop
 800bd44:	46bd      	mov	sp, r7
 800bd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4a:	4770      	bx	lr
 800bd4c:	20001320 	.word	0x20001320

0800bd50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b082      	sub	sp, #8
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bd58:	f000 f852 	bl	800be00 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bd5c:	4b06      	ldr	r3, [pc, #24]	; (800bd78 <prvIdleTask+0x28>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	2b01      	cmp	r3, #1
 800bd62:	d9f9      	bls.n	800bd58 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bd64:	4b05      	ldr	r3, [pc, #20]	; (800bd7c <prvIdleTask+0x2c>)
 800bd66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd6a:	601a      	str	r2, [r3, #0]
 800bd6c:	f3bf 8f4f 	dsb	sy
 800bd70:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bd74:	e7f0      	b.n	800bd58 <prvIdleTask+0x8>
 800bd76:	bf00      	nop
 800bd78:	20000e3c 	.word	0x20000e3c
 800bd7c:	e000ed04 	.word	0xe000ed04

0800bd80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b082      	sub	sp, #8
 800bd84:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd86:	2300      	movs	r3, #0
 800bd88:	607b      	str	r3, [r7, #4]
 800bd8a:	e00c      	b.n	800bda6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bd8c:	687a      	ldr	r2, [r7, #4]
 800bd8e:	4613      	mov	r3, r2
 800bd90:	009b      	lsls	r3, r3, #2
 800bd92:	4413      	add	r3, r2
 800bd94:	009b      	lsls	r3, r3, #2
 800bd96:	4a12      	ldr	r2, [pc, #72]	; (800bde0 <prvInitialiseTaskLists+0x60>)
 800bd98:	4413      	add	r3, r2
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f7fe f840 	bl	8009e20 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	3301      	adds	r3, #1
 800bda4:	607b      	str	r3, [r7, #4]
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2b37      	cmp	r3, #55	; 0x37
 800bdaa:	d9ef      	bls.n	800bd8c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bdac:	480d      	ldr	r0, [pc, #52]	; (800bde4 <prvInitialiseTaskLists+0x64>)
 800bdae:	f7fe f837 	bl	8009e20 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bdb2:	480d      	ldr	r0, [pc, #52]	; (800bde8 <prvInitialiseTaskLists+0x68>)
 800bdb4:	f7fe f834 	bl	8009e20 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bdb8:	480c      	ldr	r0, [pc, #48]	; (800bdec <prvInitialiseTaskLists+0x6c>)
 800bdba:	f7fe f831 	bl	8009e20 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bdbe:	480c      	ldr	r0, [pc, #48]	; (800bdf0 <prvInitialiseTaskLists+0x70>)
 800bdc0:	f7fe f82e 	bl	8009e20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bdc4:	480b      	ldr	r0, [pc, #44]	; (800bdf4 <prvInitialiseTaskLists+0x74>)
 800bdc6:	f7fe f82b 	bl	8009e20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bdca:	4b0b      	ldr	r3, [pc, #44]	; (800bdf8 <prvInitialiseTaskLists+0x78>)
 800bdcc:	4a05      	ldr	r2, [pc, #20]	; (800bde4 <prvInitialiseTaskLists+0x64>)
 800bdce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bdd0:	4b0a      	ldr	r3, [pc, #40]	; (800bdfc <prvInitialiseTaskLists+0x7c>)
 800bdd2:	4a05      	ldr	r2, [pc, #20]	; (800bde8 <prvInitialiseTaskLists+0x68>)
 800bdd4:	601a      	str	r2, [r3, #0]
}
 800bdd6:	bf00      	nop
 800bdd8:	3708      	adds	r7, #8
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd80      	pop	{r7, pc}
 800bdde:	bf00      	nop
 800bde0:	20000e3c 	.word	0x20000e3c
 800bde4:	2000129c 	.word	0x2000129c
 800bde8:	200012b0 	.word	0x200012b0
 800bdec:	200012cc 	.word	0x200012cc
 800bdf0:	200012e0 	.word	0x200012e0
 800bdf4:	200012f8 	.word	0x200012f8
 800bdf8:	200012c4 	.word	0x200012c4
 800bdfc:	200012c8 	.word	0x200012c8

0800be00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b082      	sub	sp, #8
 800be04:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800be06:	e019      	b.n	800be3c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800be08:	f000 ff9c 	bl	800cd44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be0c:	4b10      	ldr	r3, [pc, #64]	; (800be50 <prvCheckTasksWaitingTermination+0x50>)
 800be0e:	68db      	ldr	r3, [r3, #12]
 800be10:	68db      	ldr	r3, [r3, #12]
 800be12:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	3304      	adds	r3, #4
 800be18:	4618      	mov	r0, r3
 800be1a:	f7fe f88b 	bl	8009f34 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800be1e:	4b0d      	ldr	r3, [pc, #52]	; (800be54 <prvCheckTasksWaitingTermination+0x54>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	3b01      	subs	r3, #1
 800be24:	4a0b      	ldr	r2, [pc, #44]	; (800be54 <prvCheckTasksWaitingTermination+0x54>)
 800be26:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800be28:	4b0b      	ldr	r3, [pc, #44]	; (800be58 <prvCheckTasksWaitingTermination+0x58>)
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	3b01      	subs	r3, #1
 800be2e:	4a0a      	ldr	r2, [pc, #40]	; (800be58 <prvCheckTasksWaitingTermination+0x58>)
 800be30:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800be32:	f000 ffb7 	bl	800cda4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	f000 f810 	bl	800be5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800be3c:	4b06      	ldr	r3, [pc, #24]	; (800be58 <prvCheckTasksWaitingTermination+0x58>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d1e1      	bne.n	800be08 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800be44:	bf00      	nop
 800be46:	bf00      	nop
 800be48:	3708      	adds	r7, #8
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}
 800be4e:	bf00      	nop
 800be50:	200012e0 	.word	0x200012e0
 800be54:	2000130c 	.word	0x2000130c
 800be58:	200012f4 	.word	0x200012f4

0800be5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b084      	sub	sp, #16
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d108      	bne.n	800be80 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be72:	4618      	mov	r0, r3
 800be74:	f001 f954 	bl	800d120 <vPortFree>
				vPortFree( pxTCB );
 800be78:	6878      	ldr	r0, [r7, #4]
 800be7a:	f001 f951 	bl	800d120 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800be7e:	e018      	b.n	800beb2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800be86:	2b01      	cmp	r3, #1
 800be88:	d103      	bne.n	800be92 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800be8a:	6878      	ldr	r0, [r7, #4]
 800be8c:	f001 f948 	bl	800d120 <vPortFree>
	}
 800be90:	e00f      	b.n	800beb2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800be98:	2b02      	cmp	r3, #2
 800be9a:	d00a      	beq.n	800beb2 <prvDeleteTCB+0x56>
	__asm volatile
 800be9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bea0:	f383 8811 	msr	BASEPRI, r3
 800bea4:	f3bf 8f6f 	isb	sy
 800bea8:	f3bf 8f4f 	dsb	sy
 800beac:	60fb      	str	r3, [r7, #12]
}
 800beae:	bf00      	nop
 800beb0:	e7fe      	b.n	800beb0 <prvDeleteTCB+0x54>
	}
 800beb2:	bf00      	nop
 800beb4:	3710      	adds	r7, #16
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}
	...

0800bebc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bebc:	b480      	push	{r7}
 800bebe:	b083      	sub	sp, #12
 800bec0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bec2:	4b0c      	ldr	r3, [pc, #48]	; (800bef4 <prvResetNextTaskUnblockTime+0x38>)
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d104      	bne.n	800bed6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800becc:	4b0a      	ldr	r3, [pc, #40]	; (800bef8 <prvResetNextTaskUnblockTime+0x3c>)
 800bece:	f04f 32ff 	mov.w	r2, #4294967295
 800bed2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bed4:	e008      	b.n	800bee8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bed6:	4b07      	ldr	r3, [pc, #28]	; (800bef4 <prvResetNextTaskUnblockTime+0x38>)
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	68db      	ldr	r3, [r3, #12]
 800bedc:	68db      	ldr	r3, [r3, #12]
 800bede:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	685b      	ldr	r3, [r3, #4]
 800bee4:	4a04      	ldr	r2, [pc, #16]	; (800bef8 <prvResetNextTaskUnblockTime+0x3c>)
 800bee6:	6013      	str	r3, [r2, #0]
}
 800bee8:	bf00      	nop
 800beea:	370c      	adds	r7, #12
 800beec:	46bd      	mov	sp, r7
 800beee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef2:	4770      	bx	lr
 800bef4:	200012c4 	.word	0x200012c4
 800bef8:	2000132c 	.word	0x2000132c

0800befc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800befc:	b480      	push	{r7}
 800befe:	b083      	sub	sp, #12
 800bf00:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800bf02:	4b05      	ldr	r3, [pc, #20]	; (800bf18 <xTaskGetCurrentTaskHandle+0x1c>)
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	607b      	str	r3, [r7, #4]

		return xReturn;
 800bf08:	687b      	ldr	r3, [r7, #4]
	}
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	370c      	adds	r7, #12
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf14:	4770      	bx	lr
 800bf16:	bf00      	nop
 800bf18:	20000e38 	.word	0x20000e38

0800bf1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bf1c:	b480      	push	{r7}
 800bf1e:	b083      	sub	sp, #12
 800bf20:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bf22:	4b0b      	ldr	r3, [pc, #44]	; (800bf50 <xTaskGetSchedulerState+0x34>)
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d102      	bne.n	800bf30 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bf2a:	2301      	movs	r3, #1
 800bf2c:	607b      	str	r3, [r7, #4]
 800bf2e:	e008      	b.n	800bf42 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf30:	4b08      	ldr	r3, [pc, #32]	; (800bf54 <xTaskGetSchedulerState+0x38>)
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d102      	bne.n	800bf3e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bf38:	2302      	movs	r3, #2
 800bf3a:	607b      	str	r3, [r7, #4]
 800bf3c:	e001      	b.n	800bf42 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bf3e:	2300      	movs	r3, #0
 800bf40:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bf42:	687b      	ldr	r3, [r7, #4]
	}
 800bf44:	4618      	mov	r0, r3
 800bf46:	370c      	adds	r7, #12
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4e:	4770      	bx	lr
 800bf50:	20001318 	.word	0x20001318
 800bf54:	20001334 	.word	0x20001334

0800bf58 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b084      	sub	sp, #16
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bf64:	2300      	movs	r3, #0
 800bf66:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d051      	beq.n	800c012 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bf6e:	68bb      	ldr	r3, [r7, #8]
 800bf70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf72:	4b2a      	ldr	r3, [pc, #168]	; (800c01c <xTaskPriorityInherit+0xc4>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf78:	429a      	cmp	r2, r3
 800bf7a:	d241      	bcs.n	800c000 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bf7c:	68bb      	ldr	r3, [r7, #8]
 800bf7e:	699b      	ldr	r3, [r3, #24]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	db06      	blt.n	800bf92 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf84:	4b25      	ldr	r3, [pc, #148]	; (800c01c <xTaskPriorityInherit+0xc4>)
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf8a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bf8e:	68bb      	ldr	r3, [r7, #8]
 800bf90:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bf92:	68bb      	ldr	r3, [r7, #8]
 800bf94:	6959      	ldr	r1, [r3, #20]
 800bf96:	68bb      	ldr	r3, [r7, #8]
 800bf98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf9a:	4613      	mov	r3, r2
 800bf9c:	009b      	lsls	r3, r3, #2
 800bf9e:	4413      	add	r3, r2
 800bfa0:	009b      	lsls	r3, r3, #2
 800bfa2:	4a1f      	ldr	r2, [pc, #124]	; (800c020 <xTaskPriorityInherit+0xc8>)
 800bfa4:	4413      	add	r3, r2
 800bfa6:	4299      	cmp	r1, r3
 800bfa8:	d122      	bne.n	800bff0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	3304      	adds	r3, #4
 800bfae:	4618      	mov	r0, r3
 800bfb0:	f7fd ffc0 	bl	8009f34 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bfb4:	4b19      	ldr	r3, [pc, #100]	; (800c01c <xTaskPriorityInherit+0xc4>)
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfba:	68bb      	ldr	r3, [r7, #8]
 800bfbc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bfbe:	68bb      	ldr	r3, [r7, #8]
 800bfc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfc2:	4b18      	ldr	r3, [pc, #96]	; (800c024 <xTaskPriorityInherit+0xcc>)
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	429a      	cmp	r2, r3
 800bfc8:	d903      	bls.n	800bfd2 <xTaskPriorityInherit+0x7a>
 800bfca:	68bb      	ldr	r3, [r7, #8]
 800bfcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfce:	4a15      	ldr	r2, [pc, #84]	; (800c024 <xTaskPriorityInherit+0xcc>)
 800bfd0:	6013      	str	r3, [r2, #0]
 800bfd2:	68bb      	ldr	r3, [r7, #8]
 800bfd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfd6:	4613      	mov	r3, r2
 800bfd8:	009b      	lsls	r3, r3, #2
 800bfda:	4413      	add	r3, r2
 800bfdc:	009b      	lsls	r3, r3, #2
 800bfde:	4a10      	ldr	r2, [pc, #64]	; (800c020 <xTaskPriorityInherit+0xc8>)
 800bfe0:	441a      	add	r2, r3
 800bfe2:	68bb      	ldr	r3, [r7, #8]
 800bfe4:	3304      	adds	r3, #4
 800bfe6:	4619      	mov	r1, r3
 800bfe8:	4610      	mov	r0, r2
 800bfea:	f7fd ff46 	bl	8009e7a <vListInsertEnd>
 800bfee:	e004      	b.n	800bffa <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bff0:	4b0a      	ldr	r3, [pc, #40]	; (800c01c <xTaskPriorityInherit+0xc4>)
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bff6:	68bb      	ldr	r3, [r7, #8]
 800bff8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bffa:	2301      	movs	r3, #1
 800bffc:	60fb      	str	r3, [r7, #12]
 800bffe:	e008      	b.n	800c012 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c000:	68bb      	ldr	r3, [r7, #8]
 800c002:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c004:	4b05      	ldr	r3, [pc, #20]	; (800c01c <xTaskPriorityInherit+0xc4>)
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c00a:	429a      	cmp	r2, r3
 800c00c:	d201      	bcs.n	800c012 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c00e:	2301      	movs	r3, #1
 800c010:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c012:	68fb      	ldr	r3, [r7, #12]
	}
 800c014:	4618      	mov	r0, r3
 800c016:	3710      	adds	r7, #16
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}
 800c01c:	20000e38 	.word	0x20000e38
 800c020:	20000e3c 	.word	0x20000e3c
 800c024:	20001314 	.word	0x20001314

0800c028 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b086      	sub	sp, #24
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c034:	2300      	movs	r3, #0
 800c036:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d056      	beq.n	800c0ec <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c03e:	4b2e      	ldr	r3, [pc, #184]	; (800c0f8 <xTaskPriorityDisinherit+0xd0>)
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	693a      	ldr	r2, [r7, #16]
 800c044:	429a      	cmp	r2, r3
 800c046:	d00a      	beq.n	800c05e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c04c:	f383 8811 	msr	BASEPRI, r3
 800c050:	f3bf 8f6f 	isb	sy
 800c054:	f3bf 8f4f 	dsb	sy
 800c058:	60fb      	str	r3, [r7, #12]
}
 800c05a:	bf00      	nop
 800c05c:	e7fe      	b.n	800c05c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c05e:	693b      	ldr	r3, [r7, #16]
 800c060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c062:	2b00      	cmp	r3, #0
 800c064:	d10a      	bne.n	800c07c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c06a:	f383 8811 	msr	BASEPRI, r3
 800c06e:	f3bf 8f6f 	isb	sy
 800c072:	f3bf 8f4f 	dsb	sy
 800c076:	60bb      	str	r3, [r7, #8]
}
 800c078:	bf00      	nop
 800c07a:	e7fe      	b.n	800c07a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c07c:	693b      	ldr	r3, [r7, #16]
 800c07e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c080:	1e5a      	subs	r2, r3, #1
 800c082:	693b      	ldr	r3, [r7, #16]
 800c084:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c086:	693b      	ldr	r3, [r7, #16]
 800c088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c08a:	693b      	ldr	r3, [r7, #16]
 800c08c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c08e:	429a      	cmp	r2, r3
 800c090:	d02c      	beq.n	800c0ec <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c092:	693b      	ldr	r3, [r7, #16]
 800c094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c096:	2b00      	cmp	r3, #0
 800c098:	d128      	bne.n	800c0ec <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c09a:	693b      	ldr	r3, [r7, #16]
 800c09c:	3304      	adds	r3, #4
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f7fd ff48 	bl	8009f34 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c0a4:	693b      	ldr	r3, [r7, #16]
 800c0a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c0a8:	693b      	ldr	r3, [r7, #16]
 800c0aa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c0ac:	693b      	ldr	r3, [r7, #16]
 800c0ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0b0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c0b4:	693b      	ldr	r3, [r7, #16]
 800c0b6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c0b8:	693b      	ldr	r3, [r7, #16]
 800c0ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0bc:	4b0f      	ldr	r3, [pc, #60]	; (800c0fc <xTaskPriorityDisinherit+0xd4>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	429a      	cmp	r2, r3
 800c0c2:	d903      	bls.n	800c0cc <xTaskPriorityDisinherit+0xa4>
 800c0c4:	693b      	ldr	r3, [r7, #16]
 800c0c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0c8:	4a0c      	ldr	r2, [pc, #48]	; (800c0fc <xTaskPriorityDisinherit+0xd4>)
 800c0ca:	6013      	str	r3, [r2, #0]
 800c0cc:	693b      	ldr	r3, [r7, #16]
 800c0ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0d0:	4613      	mov	r3, r2
 800c0d2:	009b      	lsls	r3, r3, #2
 800c0d4:	4413      	add	r3, r2
 800c0d6:	009b      	lsls	r3, r3, #2
 800c0d8:	4a09      	ldr	r2, [pc, #36]	; (800c100 <xTaskPriorityDisinherit+0xd8>)
 800c0da:	441a      	add	r2, r3
 800c0dc:	693b      	ldr	r3, [r7, #16]
 800c0de:	3304      	adds	r3, #4
 800c0e0:	4619      	mov	r1, r3
 800c0e2:	4610      	mov	r0, r2
 800c0e4:	f7fd fec9 	bl	8009e7a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c0e8:	2301      	movs	r3, #1
 800c0ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c0ec:	697b      	ldr	r3, [r7, #20]
	}
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	3718      	adds	r7, #24
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	bd80      	pop	{r7, pc}
 800c0f6:	bf00      	nop
 800c0f8:	20000e38 	.word	0x20000e38
 800c0fc:	20001314 	.word	0x20001314
 800c100:	20000e3c 	.word	0x20000e3c

0800c104 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c104:	b580      	push	{r7, lr}
 800c106:	b088      	sub	sp, #32
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
 800c10c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c112:	2301      	movs	r3, #1
 800c114:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d06a      	beq.n	800c1f2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c11c:	69bb      	ldr	r3, [r7, #24]
 800c11e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c120:	2b00      	cmp	r3, #0
 800c122:	d10a      	bne.n	800c13a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c124:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c128:	f383 8811 	msr	BASEPRI, r3
 800c12c:	f3bf 8f6f 	isb	sy
 800c130:	f3bf 8f4f 	dsb	sy
 800c134:	60fb      	str	r3, [r7, #12]
}
 800c136:	bf00      	nop
 800c138:	e7fe      	b.n	800c138 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c13a:	69bb      	ldr	r3, [r7, #24]
 800c13c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c13e:	683a      	ldr	r2, [r7, #0]
 800c140:	429a      	cmp	r2, r3
 800c142:	d902      	bls.n	800c14a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	61fb      	str	r3, [r7, #28]
 800c148:	e002      	b.n	800c150 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c14a:	69bb      	ldr	r3, [r7, #24]
 800c14c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c14e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c150:	69bb      	ldr	r3, [r7, #24]
 800c152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c154:	69fa      	ldr	r2, [r7, #28]
 800c156:	429a      	cmp	r2, r3
 800c158:	d04b      	beq.n	800c1f2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c15a:	69bb      	ldr	r3, [r7, #24]
 800c15c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c15e:	697a      	ldr	r2, [r7, #20]
 800c160:	429a      	cmp	r2, r3
 800c162:	d146      	bne.n	800c1f2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c164:	4b25      	ldr	r3, [pc, #148]	; (800c1fc <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	69ba      	ldr	r2, [r7, #24]
 800c16a:	429a      	cmp	r2, r3
 800c16c:	d10a      	bne.n	800c184 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800c16e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c172:	f383 8811 	msr	BASEPRI, r3
 800c176:	f3bf 8f6f 	isb	sy
 800c17a:	f3bf 8f4f 	dsb	sy
 800c17e:	60bb      	str	r3, [r7, #8]
}
 800c180:	bf00      	nop
 800c182:	e7fe      	b.n	800c182 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c184:	69bb      	ldr	r3, [r7, #24]
 800c186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c188:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c18a:	69bb      	ldr	r3, [r7, #24]
 800c18c:	69fa      	ldr	r2, [r7, #28]
 800c18e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c190:	69bb      	ldr	r3, [r7, #24]
 800c192:	699b      	ldr	r3, [r3, #24]
 800c194:	2b00      	cmp	r3, #0
 800c196:	db04      	blt.n	800c1a2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c198:	69fb      	ldr	r3, [r7, #28]
 800c19a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c19e:	69bb      	ldr	r3, [r7, #24]
 800c1a0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c1a2:	69bb      	ldr	r3, [r7, #24]
 800c1a4:	6959      	ldr	r1, [r3, #20]
 800c1a6:	693a      	ldr	r2, [r7, #16]
 800c1a8:	4613      	mov	r3, r2
 800c1aa:	009b      	lsls	r3, r3, #2
 800c1ac:	4413      	add	r3, r2
 800c1ae:	009b      	lsls	r3, r3, #2
 800c1b0:	4a13      	ldr	r2, [pc, #76]	; (800c200 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c1b2:	4413      	add	r3, r2
 800c1b4:	4299      	cmp	r1, r3
 800c1b6:	d11c      	bne.n	800c1f2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c1b8:	69bb      	ldr	r3, [r7, #24]
 800c1ba:	3304      	adds	r3, #4
 800c1bc:	4618      	mov	r0, r3
 800c1be:	f7fd feb9 	bl	8009f34 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c1c2:	69bb      	ldr	r3, [r7, #24]
 800c1c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1c6:	4b0f      	ldr	r3, [pc, #60]	; (800c204 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	429a      	cmp	r2, r3
 800c1cc:	d903      	bls.n	800c1d6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800c1ce:	69bb      	ldr	r3, [r7, #24]
 800c1d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1d2:	4a0c      	ldr	r2, [pc, #48]	; (800c204 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c1d4:	6013      	str	r3, [r2, #0]
 800c1d6:	69bb      	ldr	r3, [r7, #24]
 800c1d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1da:	4613      	mov	r3, r2
 800c1dc:	009b      	lsls	r3, r3, #2
 800c1de:	4413      	add	r3, r2
 800c1e0:	009b      	lsls	r3, r3, #2
 800c1e2:	4a07      	ldr	r2, [pc, #28]	; (800c200 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c1e4:	441a      	add	r2, r3
 800c1e6:	69bb      	ldr	r3, [r7, #24]
 800c1e8:	3304      	adds	r3, #4
 800c1ea:	4619      	mov	r1, r3
 800c1ec:	4610      	mov	r0, r2
 800c1ee:	f7fd fe44 	bl	8009e7a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c1f2:	bf00      	nop
 800c1f4:	3720      	adds	r7, #32
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd80      	pop	{r7, pc}
 800c1fa:	bf00      	nop
 800c1fc:	20000e38 	.word	0x20000e38
 800c200:	20000e3c 	.word	0x20000e3c
 800c204:	20001314 	.word	0x20001314

0800c208 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c208:	b480      	push	{r7}
 800c20a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c20c:	4b07      	ldr	r3, [pc, #28]	; (800c22c <pvTaskIncrementMutexHeldCount+0x24>)
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d004      	beq.n	800c21e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c214:	4b05      	ldr	r3, [pc, #20]	; (800c22c <pvTaskIncrementMutexHeldCount+0x24>)
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c21a:	3201      	adds	r2, #1
 800c21c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800c21e:	4b03      	ldr	r3, [pc, #12]	; (800c22c <pvTaskIncrementMutexHeldCount+0x24>)
 800c220:	681b      	ldr	r3, [r3, #0]
	}
 800c222:	4618      	mov	r0, r3
 800c224:	46bd      	mov	sp, r7
 800c226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22a:	4770      	bx	lr
 800c22c:	20000e38 	.word	0x20000e38

0800c230 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b084      	sub	sp, #16
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
 800c238:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c23a:	4b21      	ldr	r3, [pc, #132]	; (800c2c0 <prvAddCurrentTaskToDelayedList+0x90>)
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c240:	4b20      	ldr	r3, [pc, #128]	; (800c2c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	3304      	adds	r3, #4
 800c246:	4618      	mov	r0, r3
 800c248:	f7fd fe74 	bl	8009f34 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c252:	d10a      	bne.n	800c26a <prvAddCurrentTaskToDelayedList+0x3a>
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d007      	beq.n	800c26a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c25a:	4b1a      	ldr	r3, [pc, #104]	; (800c2c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	3304      	adds	r3, #4
 800c260:	4619      	mov	r1, r3
 800c262:	4819      	ldr	r0, [pc, #100]	; (800c2c8 <prvAddCurrentTaskToDelayedList+0x98>)
 800c264:	f7fd fe09 	bl	8009e7a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c268:	e026      	b.n	800c2b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c26a:	68fa      	ldr	r2, [r7, #12]
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	4413      	add	r3, r2
 800c270:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c272:	4b14      	ldr	r3, [pc, #80]	; (800c2c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	68ba      	ldr	r2, [r7, #8]
 800c278:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c27a:	68ba      	ldr	r2, [r7, #8]
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	429a      	cmp	r2, r3
 800c280:	d209      	bcs.n	800c296 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c282:	4b12      	ldr	r3, [pc, #72]	; (800c2cc <prvAddCurrentTaskToDelayedList+0x9c>)
 800c284:	681a      	ldr	r2, [r3, #0]
 800c286:	4b0f      	ldr	r3, [pc, #60]	; (800c2c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	3304      	adds	r3, #4
 800c28c:	4619      	mov	r1, r3
 800c28e:	4610      	mov	r0, r2
 800c290:	f7fd fe17 	bl	8009ec2 <vListInsert>
}
 800c294:	e010      	b.n	800c2b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c296:	4b0e      	ldr	r3, [pc, #56]	; (800c2d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c298:	681a      	ldr	r2, [r3, #0]
 800c29a:	4b0a      	ldr	r3, [pc, #40]	; (800c2c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	3304      	adds	r3, #4
 800c2a0:	4619      	mov	r1, r3
 800c2a2:	4610      	mov	r0, r2
 800c2a4:	f7fd fe0d 	bl	8009ec2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c2a8:	4b0a      	ldr	r3, [pc, #40]	; (800c2d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	68ba      	ldr	r2, [r7, #8]
 800c2ae:	429a      	cmp	r2, r3
 800c2b0:	d202      	bcs.n	800c2b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c2b2:	4a08      	ldr	r2, [pc, #32]	; (800c2d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c2b4:	68bb      	ldr	r3, [r7, #8]
 800c2b6:	6013      	str	r3, [r2, #0]
}
 800c2b8:	bf00      	nop
 800c2ba:	3710      	adds	r7, #16
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd80      	pop	{r7, pc}
 800c2c0:	20001310 	.word	0x20001310
 800c2c4:	20000e38 	.word	0x20000e38
 800c2c8:	200012f8 	.word	0x200012f8
 800c2cc:	200012c8 	.word	0x200012c8
 800c2d0:	200012c4 	.word	0x200012c4
 800c2d4:	2000132c 	.word	0x2000132c

0800c2d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b08a      	sub	sp, #40	; 0x28
 800c2dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c2de:	2300      	movs	r3, #0
 800c2e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c2e2:	f000 fba1 	bl	800ca28 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c2e6:	4b1c      	ldr	r3, [pc, #112]	; (800c358 <xTimerCreateTimerTask+0x80>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d021      	beq.n	800c332 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c2f6:	1d3a      	adds	r2, r7, #4
 800c2f8:	f107 0108 	add.w	r1, r7, #8
 800c2fc:	f107 030c 	add.w	r3, r7, #12
 800c300:	4618      	mov	r0, r3
 800c302:	f7fd fd73 	bl	8009dec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c306:	6879      	ldr	r1, [r7, #4]
 800c308:	68bb      	ldr	r3, [r7, #8]
 800c30a:	68fa      	ldr	r2, [r7, #12]
 800c30c:	9202      	str	r2, [sp, #8]
 800c30e:	9301      	str	r3, [sp, #4]
 800c310:	2302      	movs	r3, #2
 800c312:	9300      	str	r3, [sp, #0]
 800c314:	2300      	movs	r3, #0
 800c316:	460a      	mov	r2, r1
 800c318:	4910      	ldr	r1, [pc, #64]	; (800c35c <xTimerCreateTimerTask+0x84>)
 800c31a:	4811      	ldr	r0, [pc, #68]	; (800c360 <xTimerCreateTimerTask+0x88>)
 800c31c:	f7fe fef8 	bl	800b110 <xTaskCreateStatic>
 800c320:	4603      	mov	r3, r0
 800c322:	4a10      	ldr	r2, [pc, #64]	; (800c364 <xTimerCreateTimerTask+0x8c>)
 800c324:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c326:	4b0f      	ldr	r3, [pc, #60]	; (800c364 <xTimerCreateTimerTask+0x8c>)
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d001      	beq.n	800c332 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c32e:	2301      	movs	r3, #1
 800c330:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c332:	697b      	ldr	r3, [r7, #20]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d10a      	bne.n	800c34e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c33c:	f383 8811 	msr	BASEPRI, r3
 800c340:	f3bf 8f6f 	isb	sy
 800c344:	f3bf 8f4f 	dsb	sy
 800c348:	613b      	str	r3, [r7, #16]
}
 800c34a:	bf00      	nop
 800c34c:	e7fe      	b.n	800c34c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c34e:	697b      	ldr	r3, [r7, #20]
}
 800c350:	4618      	mov	r0, r3
 800c352:	3718      	adds	r7, #24
 800c354:	46bd      	mov	sp, r7
 800c356:	bd80      	pop	{r7, pc}
 800c358:	20001368 	.word	0x20001368
 800c35c:	0800eee4 	.word	0x0800eee4
 800c360:	0800c5d1 	.word	0x0800c5d1
 800c364:	2000136c 	.word	0x2000136c

0800c368 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b088      	sub	sp, #32
 800c36c:	af02      	add	r7, sp, #8
 800c36e:	60f8      	str	r0, [r7, #12]
 800c370:	60b9      	str	r1, [r7, #8]
 800c372:	607a      	str	r2, [r7, #4]
 800c374:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800c376:	202c      	movs	r0, #44	; 0x2c
 800c378:	f000 fe06 	bl	800cf88 <pvPortMalloc>
 800c37c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800c37e:	697b      	ldr	r3, [r7, #20]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d00d      	beq.n	800c3a0 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800c384:	697b      	ldr	r3, [r7, #20]
 800c386:	2200      	movs	r2, #0
 800c388:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c38c:	697b      	ldr	r3, [r7, #20]
 800c38e:	9301      	str	r3, [sp, #4]
 800c390:	6a3b      	ldr	r3, [r7, #32]
 800c392:	9300      	str	r3, [sp, #0]
 800c394:	683b      	ldr	r3, [r7, #0]
 800c396:	687a      	ldr	r2, [r7, #4]
 800c398:	68b9      	ldr	r1, [r7, #8]
 800c39a:	68f8      	ldr	r0, [r7, #12]
 800c39c:	f000 f843 	bl	800c426 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800c3a0:	697b      	ldr	r3, [r7, #20]
	}
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	3718      	adds	r7, #24
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	bd80      	pop	{r7, pc}

0800c3aa <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800c3aa:	b580      	push	{r7, lr}
 800c3ac:	b08a      	sub	sp, #40	; 0x28
 800c3ae:	af02      	add	r7, sp, #8
 800c3b0:	60f8      	str	r0, [r7, #12]
 800c3b2:	60b9      	str	r1, [r7, #8]
 800c3b4:	607a      	str	r2, [r7, #4]
 800c3b6:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800c3b8:	232c      	movs	r3, #44	; 0x2c
 800c3ba:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800c3bc:	693b      	ldr	r3, [r7, #16]
 800c3be:	2b2c      	cmp	r3, #44	; 0x2c
 800c3c0:	d00a      	beq.n	800c3d8 <xTimerCreateStatic+0x2e>
	__asm volatile
 800c3c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3c6:	f383 8811 	msr	BASEPRI, r3
 800c3ca:	f3bf 8f6f 	isb	sy
 800c3ce:	f3bf 8f4f 	dsb	sy
 800c3d2:	61bb      	str	r3, [r7, #24]
}
 800c3d4:	bf00      	nop
 800c3d6:	e7fe      	b.n	800c3d6 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c3d8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800c3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d10a      	bne.n	800c3f6 <xTimerCreateStatic+0x4c>
	__asm volatile
 800c3e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3e4:	f383 8811 	msr	BASEPRI, r3
 800c3e8:	f3bf 8f6f 	isb	sy
 800c3ec:	f3bf 8f4f 	dsb	sy
 800c3f0:	617b      	str	r3, [r7, #20]
}
 800c3f2:	bf00      	nop
 800c3f4:	e7fe      	b.n	800c3f4 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800c3f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3f8:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800c3fa:	69fb      	ldr	r3, [r7, #28]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d00d      	beq.n	800c41c <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800c400:	69fb      	ldr	r3, [r7, #28]
 800c402:	2202      	movs	r2, #2
 800c404:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c408:	69fb      	ldr	r3, [r7, #28]
 800c40a:	9301      	str	r3, [sp, #4]
 800c40c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c40e:	9300      	str	r3, [sp, #0]
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	687a      	ldr	r2, [r7, #4]
 800c414:	68b9      	ldr	r1, [r7, #8]
 800c416:	68f8      	ldr	r0, [r7, #12]
 800c418:	f000 f805 	bl	800c426 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800c41c:	69fb      	ldr	r3, [r7, #28]
	}
 800c41e:	4618      	mov	r0, r3
 800c420:	3720      	adds	r7, #32
 800c422:	46bd      	mov	sp, r7
 800c424:	bd80      	pop	{r7, pc}

0800c426 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800c426:	b580      	push	{r7, lr}
 800c428:	b086      	sub	sp, #24
 800c42a:	af00      	add	r7, sp, #0
 800c42c:	60f8      	str	r0, [r7, #12]
 800c42e:	60b9      	str	r1, [r7, #8]
 800c430:	607a      	str	r2, [r7, #4]
 800c432:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800c434:	68bb      	ldr	r3, [r7, #8]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d10a      	bne.n	800c450 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800c43a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c43e:	f383 8811 	msr	BASEPRI, r3
 800c442:	f3bf 8f6f 	isb	sy
 800c446:	f3bf 8f4f 	dsb	sy
 800c44a:	617b      	str	r3, [r7, #20]
}
 800c44c:	bf00      	nop
 800c44e:	e7fe      	b.n	800c44e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800c450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c452:	2b00      	cmp	r3, #0
 800c454:	d01e      	beq.n	800c494 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800c456:	f000 fae7 	bl	800ca28 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800c45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c45c:	68fa      	ldr	r2, [r7, #12]
 800c45e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800c460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c462:	68ba      	ldr	r2, [r7, #8]
 800c464:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800c466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c468:	683a      	ldr	r2, [r7, #0]
 800c46a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800c46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c46e:	6a3a      	ldr	r2, [r7, #32]
 800c470:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800c472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c474:	3304      	adds	r3, #4
 800c476:	4618      	mov	r0, r3
 800c478:	f7fd fcf2 	bl	8009e60 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d008      	beq.n	800c494 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800c482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c484:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c488:	f043 0304 	orr.w	r3, r3, #4
 800c48c:	b2da      	uxtb	r2, r3
 800c48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c490:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800c494:	bf00      	nop
 800c496:	3718      	adds	r7, #24
 800c498:	46bd      	mov	sp, r7
 800c49a:	bd80      	pop	{r7, pc}

0800c49c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b08a      	sub	sp, #40	; 0x28
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	60f8      	str	r0, [r7, #12]
 800c4a4:	60b9      	str	r1, [r7, #8]
 800c4a6:	607a      	str	r2, [r7, #4]
 800c4a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d10a      	bne.n	800c4ca <xTimerGenericCommand+0x2e>
	__asm volatile
 800c4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4b8:	f383 8811 	msr	BASEPRI, r3
 800c4bc:	f3bf 8f6f 	isb	sy
 800c4c0:	f3bf 8f4f 	dsb	sy
 800c4c4:	623b      	str	r3, [r7, #32]
}
 800c4c6:	bf00      	nop
 800c4c8:	e7fe      	b.n	800c4c8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c4ca:	4b1a      	ldr	r3, [pc, #104]	; (800c534 <xTimerGenericCommand+0x98>)
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d02a      	beq.n	800c528 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c4d2:	68bb      	ldr	r3, [r7, #8]
 800c4d4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c4de:	68bb      	ldr	r3, [r7, #8]
 800c4e0:	2b05      	cmp	r3, #5
 800c4e2:	dc18      	bgt.n	800c516 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c4e4:	f7ff fd1a 	bl	800bf1c <xTaskGetSchedulerState>
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	2b02      	cmp	r3, #2
 800c4ec:	d109      	bne.n	800c502 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c4ee:	4b11      	ldr	r3, [pc, #68]	; (800c534 <xTimerGenericCommand+0x98>)
 800c4f0:	6818      	ldr	r0, [r3, #0]
 800c4f2:	f107 0110 	add.w	r1, r7, #16
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4fa:	f7fd ffa3 	bl	800a444 <xQueueGenericSend>
 800c4fe:	6278      	str	r0, [r7, #36]	; 0x24
 800c500:	e012      	b.n	800c528 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c502:	4b0c      	ldr	r3, [pc, #48]	; (800c534 <xTimerGenericCommand+0x98>)
 800c504:	6818      	ldr	r0, [r3, #0]
 800c506:	f107 0110 	add.w	r1, r7, #16
 800c50a:	2300      	movs	r3, #0
 800c50c:	2200      	movs	r2, #0
 800c50e:	f7fd ff99 	bl	800a444 <xQueueGenericSend>
 800c512:	6278      	str	r0, [r7, #36]	; 0x24
 800c514:	e008      	b.n	800c528 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c516:	4b07      	ldr	r3, [pc, #28]	; (800c534 <xTimerGenericCommand+0x98>)
 800c518:	6818      	ldr	r0, [r3, #0]
 800c51a:	f107 0110 	add.w	r1, r7, #16
 800c51e:	2300      	movs	r3, #0
 800c520:	683a      	ldr	r2, [r7, #0]
 800c522:	f7fe f88d 	bl	800a640 <xQueueGenericSendFromISR>
 800c526:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c52a:	4618      	mov	r0, r3
 800c52c:	3728      	adds	r7, #40	; 0x28
 800c52e:	46bd      	mov	sp, r7
 800c530:	bd80      	pop	{r7, pc}
 800c532:	bf00      	nop
 800c534:	20001368 	.word	0x20001368

0800c538 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b088      	sub	sp, #32
 800c53c:	af02      	add	r7, sp, #8
 800c53e:	6078      	str	r0, [r7, #4]
 800c540:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c542:	4b22      	ldr	r3, [pc, #136]	; (800c5cc <prvProcessExpiredTimer+0x94>)
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	68db      	ldr	r3, [r3, #12]
 800c548:	68db      	ldr	r3, [r3, #12]
 800c54a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c54c:	697b      	ldr	r3, [r7, #20]
 800c54e:	3304      	adds	r3, #4
 800c550:	4618      	mov	r0, r3
 800c552:	f7fd fcef 	bl	8009f34 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c556:	697b      	ldr	r3, [r7, #20]
 800c558:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c55c:	f003 0304 	and.w	r3, r3, #4
 800c560:	2b00      	cmp	r3, #0
 800c562:	d022      	beq.n	800c5aa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c564:	697b      	ldr	r3, [r7, #20]
 800c566:	699a      	ldr	r2, [r3, #24]
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	18d1      	adds	r1, r2, r3
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	683a      	ldr	r2, [r7, #0]
 800c570:	6978      	ldr	r0, [r7, #20]
 800c572:	f000 f8d1 	bl	800c718 <prvInsertTimerInActiveList>
 800c576:	4603      	mov	r3, r0
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d01f      	beq.n	800c5bc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c57c:	2300      	movs	r3, #0
 800c57e:	9300      	str	r3, [sp, #0]
 800c580:	2300      	movs	r3, #0
 800c582:	687a      	ldr	r2, [r7, #4]
 800c584:	2100      	movs	r1, #0
 800c586:	6978      	ldr	r0, [r7, #20]
 800c588:	f7ff ff88 	bl	800c49c <xTimerGenericCommand>
 800c58c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c58e:	693b      	ldr	r3, [r7, #16]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d113      	bne.n	800c5bc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c594:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c598:	f383 8811 	msr	BASEPRI, r3
 800c59c:	f3bf 8f6f 	isb	sy
 800c5a0:	f3bf 8f4f 	dsb	sy
 800c5a4:	60fb      	str	r3, [r7, #12]
}
 800c5a6:	bf00      	nop
 800c5a8:	e7fe      	b.n	800c5a8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c5aa:	697b      	ldr	r3, [r7, #20]
 800c5ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c5b0:	f023 0301 	bic.w	r3, r3, #1
 800c5b4:	b2da      	uxtb	r2, r3
 800c5b6:	697b      	ldr	r3, [r7, #20]
 800c5b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c5bc:	697b      	ldr	r3, [r7, #20]
 800c5be:	6a1b      	ldr	r3, [r3, #32]
 800c5c0:	6978      	ldr	r0, [r7, #20]
 800c5c2:	4798      	blx	r3
}
 800c5c4:	bf00      	nop
 800c5c6:	3718      	adds	r7, #24
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	bd80      	pop	{r7, pc}
 800c5cc:	20001360 	.word	0x20001360

0800c5d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b084      	sub	sp, #16
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c5d8:	f107 0308 	add.w	r3, r7, #8
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f000 f857 	bl	800c690 <prvGetNextExpireTime>
 800c5e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c5e4:	68bb      	ldr	r3, [r7, #8]
 800c5e6:	4619      	mov	r1, r3
 800c5e8:	68f8      	ldr	r0, [r7, #12]
 800c5ea:	f000 f803 	bl	800c5f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c5ee:	f000 f8d5 	bl	800c79c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c5f2:	e7f1      	b.n	800c5d8 <prvTimerTask+0x8>

0800c5f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b084      	sub	sp, #16
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
 800c5fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c5fe:	f7ff f89b 	bl	800b738 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c602:	f107 0308 	add.w	r3, r7, #8
 800c606:	4618      	mov	r0, r3
 800c608:	f000 f866 	bl	800c6d8 <prvSampleTimeNow>
 800c60c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c60e:	68bb      	ldr	r3, [r7, #8]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d130      	bne.n	800c676 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c614:	683b      	ldr	r3, [r7, #0]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d10a      	bne.n	800c630 <prvProcessTimerOrBlockTask+0x3c>
 800c61a:	687a      	ldr	r2, [r7, #4]
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	429a      	cmp	r2, r3
 800c620:	d806      	bhi.n	800c630 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c622:	f7ff f897 	bl	800b754 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c626:	68f9      	ldr	r1, [r7, #12]
 800c628:	6878      	ldr	r0, [r7, #4]
 800c62a:	f7ff ff85 	bl	800c538 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c62e:	e024      	b.n	800c67a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c630:	683b      	ldr	r3, [r7, #0]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d008      	beq.n	800c648 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c636:	4b13      	ldr	r3, [pc, #76]	; (800c684 <prvProcessTimerOrBlockTask+0x90>)
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d101      	bne.n	800c644 <prvProcessTimerOrBlockTask+0x50>
 800c640:	2301      	movs	r3, #1
 800c642:	e000      	b.n	800c646 <prvProcessTimerOrBlockTask+0x52>
 800c644:	2300      	movs	r3, #0
 800c646:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c648:	4b0f      	ldr	r3, [pc, #60]	; (800c688 <prvProcessTimerOrBlockTask+0x94>)
 800c64a:	6818      	ldr	r0, [r3, #0]
 800c64c:	687a      	ldr	r2, [r7, #4]
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	1ad3      	subs	r3, r2, r3
 800c652:	683a      	ldr	r2, [r7, #0]
 800c654:	4619      	mov	r1, r3
 800c656:	f7fe fd27 	bl	800b0a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c65a:	f7ff f87b 	bl	800b754 <xTaskResumeAll>
 800c65e:	4603      	mov	r3, r0
 800c660:	2b00      	cmp	r3, #0
 800c662:	d10a      	bne.n	800c67a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c664:	4b09      	ldr	r3, [pc, #36]	; (800c68c <prvProcessTimerOrBlockTask+0x98>)
 800c666:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c66a:	601a      	str	r2, [r3, #0]
 800c66c:	f3bf 8f4f 	dsb	sy
 800c670:	f3bf 8f6f 	isb	sy
}
 800c674:	e001      	b.n	800c67a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c676:	f7ff f86d 	bl	800b754 <xTaskResumeAll>
}
 800c67a:	bf00      	nop
 800c67c:	3710      	adds	r7, #16
 800c67e:	46bd      	mov	sp, r7
 800c680:	bd80      	pop	{r7, pc}
 800c682:	bf00      	nop
 800c684:	20001364 	.word	0x20001364
 800c688:	20001368 	.word	0x20001368
 800c68c:	e000ed04 	.word	0xe000ed04

0800c690 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c690:	b480      	push	{r7}
 800c692:	b085      	sub	sp, #20
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c698:	4b0e      	ldr	r3, [pc, #56]	; (800c6d4 <prvGetNextExpireTime+0x44>)
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d101      	bne.n	800c6a6 <prvGetNextExpireTime+0x16>
 800c6a2:	2201      	movs	r2, #1
 800c6a4:	e000      	b.n	800c6a8 <prvGetNextExpireTime+0x18>
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d105      	bne.n	800c6c0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c6b4:	4b07      	ldr	r3, [pc, #28]	; (800c6d4 <prvGetNextExpireTime+0x44>)
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	68db      	ldr	r3, [r3, #12]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	60fb      	str	r3, [r7, #12]
 800c6be:	e001      	b.n	800c6c4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c6c4:	68fb      	ldr	r3, [r7, #12]
}
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	3714      	adds	r7, #20
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d0:	4770      	bx	lr
 800c6d2:	bf00      	nop
 800c6d4:	20001360 	.word	0x20001360

0800c6d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b084      	sub	sp, #16
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c6e0:	f7ff f8d6 	bl	800b890 <xTaskGetTickCount>
 800c6e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c6e6:	4b0b      	ldr	r3, [pc, #44]	; (800c714 <prvSampleTimeNow+0x3c>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	68fa      	ldr	r2, [r7, #12]
 800c6ec:	429a      	cmp	r2, r3
 800c6ee:	d205      	bcs.n	800c6fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c6f0:	f000 f936 	bl	800c960 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2201      	movs	r2, #1
 800c6f8:	601a      	str	r2, [r3, #0]
 800c6fa:	e002      	b.n	800c702 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2200      	movs	r2, #0
 800c700:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c702:	4a04      	ldr	r2, [pc, #16]	; (800c714 <prvSampleTimeNow+0x3c>)
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c708:	68fb      	ldr	r3, [r7, #12]
}
 800c70a:	4618      	mov	r0, r3
 800c70c:	3710      	adds	r7, #16
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd80      	pop	{r7, pc}
 800c712:	bf00      	nop
 800c714:	20001370 	.word	0x20001370

0800c718 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b086      	sub	sp, #24
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	60f8      	str	r0, [r7, #12]
 800c720:	60b9      	str	r1, [r7, #8]
 800c722:	607a      	str	r2, [r7, #4]
 800c724:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c726:	2300      	movs	r3, #0
 800c728:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	68ba      	ldr	r2, [r7, #8]
 800c72e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	68fa      	ldr	r2, [r7, #12]
 800c734:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c736:	68ba      	ldr	r2, [r7, #8]
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	429a      	cmp	r2, r3
 800c73c:	d812      	bhi.n	800c764 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c73e:	687a      	ldr	r2, [r7, #4]
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	1ad2      	subs	r2, r2, r3
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	699b      	ldr	r3, [r3, #24]
 800c748:	429a      	cmp	r2, r3
 800c74a:	d302      	bcc.n	800c752 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c74c:	2301      	movs	r3, #1
 800c74e:	617b      	str	r3, [r7, #20]
 800c750:	e01b      	b.n	800c78a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c752:	4b10      	ldr	r3, [pc, #64]	; (800c794 <prvInsertTimerInActiveList+0x7c>)
 800c754:	681a      	ldr	r2, [r3, #0]
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	3304      	adds	r3, #4
 800c75a:	4619      	mov	r1, r3
 800c75c:	4610      	mov	r0, r2
 800c75e:	f7fd fbb0 	bl	8009ec2 <vListInsert>
 800c762:	e012      	b.n	800c78a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c764:	687a      	ldr	r2, [r7, #4]
 800c766:	683b      	ldr	r3, [r7, #0]
 800c768:	429a      	cmp	r2, r3
 800c76a:	d206      	bcs.n	800c77a <prvInsertTimerInActiveList+0x62>
 800c76c:	68ba      	ldr	r2, [r7, #8]
 800c76e:	683b      	ldr	r3, [r7, #0]
 800c770:	429a      	cmp	r2, r3
 800c772:	d302      	bcc.n	800c77a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c774:	2301      	movs	r3, #1
 800c776:	617b      	str	r3, [r7, #20]
 800c778:	e007      	b.n	800c78a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c77a:	4b07      	ldr	r3, [pc, #28]	; (800c798 <prvInsertTimerInActiveList+0x80>)
 800c77c:	681a      	ldr	r2, [r3, #0]
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	3304      	adds	r3, #4
 800c782:	4619      	mov	r1, r3
 800c784:	4610      	mov	r0, r2
 800c786:	f7fd fb9c 	bl	8009ec2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c78a:	697b      	ldr	r3, [r7, #20]
}
 800c78c:	4618      	mov	r0, r3
 800c78e:	3718      	adds	r7, #24
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}
 800c794:	20001364 	.word	0x20001364
 800c798:	20001360 	.word	0x20001360

0800c79c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b08e      	sub	sp, #56	; 0x38
 800c7a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c7a2:	e0ca      	b.n	800c93a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	da18      	bge.n	800c7dc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c7aa:	1d3b      	adds	r3, r7, #4
 800c7ac:	3304      	adds	r3, #4
 800c7ae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c7b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d10a      	bne.n	800c7cc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c7b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ba:	f383 8811 	msr	BASEPRI, r3
 800c7be:	f3bf 8f6f 	isb	sy
 800c7c2:	f3bf 8f4f 	dsb	sy
 800c7c6:	61fb      	str	r3, [r7, #28]
}
 800c7c8:	bf00      	nop
 800c7ca:	e7fe      	b.n	800c7ca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c7d2:	6850      	ldr	r0, [r2, #4]
 800c7d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c7d6:	6892      	ldr	r2, [r2, #8]
 800c7d8:	4611      	mov	r1, r2
 800c7da:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	f2c0 80aa 	blt.w	800c938 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c7e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ea:	695b      	ldr	r3, [r3, #20]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d004      	beq.n	800c7fa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7f2:	3304      	adds	r3, #4
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	f7fd fb9d 	bl	8009f34 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c7fa:	463b      	mov	r3, r7
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	f7ff ff6b 	bl	800c6d8 <prvSampleTimeNow>
 800c802:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2b09      	cmp	r3, #9
 800c808:	f200 8097 	bhi.w	800c93a <prvProcessReceivedCommands+0x19e>
 800c80c:	a201      	add	r2, pc, #4	; (adr r2, 800c814 <prvProcessReceivedCommands+0x78>)
 800c80e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c812:	bf00      	nop
 800c814:	0800c83d 	.word	0x0800c83d
 800c818:	0800c83d 	.word	0x0800c83d
 800c81c:	0800c83d 	.word	0x0800c83d
 800c820:	0800c8b1 	.word	0x0800c8b1
 800c824:	0800c8c5 	.word	0x0800c8c5
 800c828:	0800c90f 	.word	0x0800c90f
 800c82c:	0800c83d 	.word	0x0800c83d
 800c830:	0800c83d 	.word	0x0800c83d
 800c834:	0800c8b1 	.word	0x0800c8b1
 800c838:	0800c8c5 	.word	0x0800c8c5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c83e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c842:	f043 0301 	orr.w	r3, r3, #1
 800c846:	b2da      	uxtb	r2, r3
 800c848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c84a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c84e:	68ba      	ldr	r2, [r7, #8]
 800c850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c852:	699b      	ldr	r3, [r3, #24]
 800c854:	18d1      	adds	r1, r2, r3
 800c856:	68bb      	ldr	r3, [r7, #8]
 800c858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c85a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c85c:	f7ff ff5c 	bl	800c718 <prvInsertTimerInActiveList>
 800c860:	4603      	mov	r3, r0
 800c862:	2b00      	cmp	r3, #0
 800c864:	d069      	beq.n	800c93a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c868:	6a1b      	ldr	r3, [r3, #32]
 800c86a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c86c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c86e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c870:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c874:	f003 0304 	and.w	r3, r3, #4
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d05e      	beq.n	800c93a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c87c:	68ba      	ldr	r2, [r7, #8]
 800c87e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c880:	699b      	ldr	r3, [r3, #24]
 800c882:	441a      	add	r2, r3
 800c884:	2300      	movs	r3, #0
 800c886:	9300      	str	r3, [sp, #0]
 800c888:	2300      	movs	r3, #0
 800c88a:	2100      	movs	r1, #0
 800c88c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c88e:	f7ff fe05 	bl	800c49c <xTimerGenericCommand>
 800c892:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c894:	6a3b      	ldr	r3, [r7, #32]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d14f      	bne.n	800c93a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c89a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c89e:	f383 8811 	msr	BASEPRI, r3
 800c8a2:	f3bf 8f6f 	isb	sy
 800c8a6:	f3bf 8f4f 	dsb	sy
 800c8aa:	61bb      	str	r3, [r7, #24]
}
 800c8ac:	bf00      	nop
 800c8ae:	e7fe      	b.n	800c8ae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c8b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8b6:	f023 0301 	bic.w	r3, r3, #1
 800c8ba:	b2da      	uxtb	r2, r3
 800c8bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c8c2:	e03a      	b.n	800c93a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c8c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8ca:	f043 0301 	orr.w	r3, r3, #1
 800c8ce:	b2da      	uxtb	r2, r3
 800c8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c8d6:	68ba      	ldr	r2, [r7, #8]
 800c8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8da:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8de:	699b      	ldr	r3, [r3, #24]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d10a      	bne.n	800c8fa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c8e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8e8:	f383 8811 	msr	BASEPRI, r3
 800c8ec:	f3bf 8f6f 	isb	sy
 800c8f0:	f3bf 8f4f 	dsb	sy
 800c8f4:	617b      	str	r3, [r7, #20]
}
 800c8f6:	bf00      	nop
 800c8f8:	e7fe      	b.n	800c8f8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8fc:	699a      	ldr	r2, [r3, #24]
 800c8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c900:	18d1      	adds	r1, r2, r3
 800c902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c906:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c908:	f7ff ff06 	bl	800c718 <prvInsertTimerInActiveList>
					break;
 800c90c:	e015      	b.n	800c93a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c90e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c910:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c914:	f003 0302 	and.w	r3, r3, #2
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d103      	bne.n	800c924 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c91c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c91e:	f000 fbff 	bl	800d120 <vPortFree>
 800c922:	e00a      	b.n	800c93a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c926:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c92a:	f023 0301 	bic.w	r3, r3, #1
 800c92e:	b2da      	uxtb	r2, r3
 800c930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c932:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c936:	e000      	b.n	800c93a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c938:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c93a:	4b08      	ldr	r3, [pc, #32]	; (800c95c <prvProcessReceivedCommands+0x1c0>)
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	1d39      	adds	r1, r7, #4
 800c940:	2200      	movs	r2, #0
 800c942:	4618      	mov	r0, r3
 800c944:	f7fd ffa4 	bl	800a890 <xQueueReceive>
 800c948:	4603      	mov	r3, r0
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	f47f af2a 	bne.w	800c7a4 <prvProcessReceivedCommands+0x8>
	}
}
 800c950:	bf00      	nop
 800c952:	bf00      	nop
 800c954:	3730      	adds	r7, #48	; 0x30
 800c956:	46bd      	mov	sp, r7
 800c958:	bd80      	pop	{r7, pc}
 800c95a:	bf00      	nop
 800c95c:	20001368 	.word	0x20001368

0800c960 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c960:	b580      	push	{r7, lr}
 800c962:	b088      	sub	sp, #32
 800c964:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c966:	e048      	b.n	800c9fa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c968:	4b2d      	ldr	r3, [pc, #180]	; (800ca20 <prvSwitchTimerLists+0xc0>)
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	68db      	ldr	r3, [r3, #12]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c972:	4b2b      	ldr	r3, [pc, #172]	; (800ca20 <prvSwitchTimerLists+0xc0>)
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	68db      	ldr	r3, [r3, #12]
 800c978:	68db      	ldr	r3, [r3, #12]
 800c97a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	3304      	adds	r3, #4
 800c980:	4618      	mov	r0, r3
 800c982:	f7fd fad7 	bl	8009f34 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	6a1b      	ldr	r3, [r3, #32]
 800c98a:	68f8      	ldr	r0, [r7, #12]
 800c98c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c994:	f003 0304 	and.w	r3, r3, #4
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d02e      	beq.n	800c9fa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	699b      	ldr	r3, [r3, #24]
 800c9a0:	693a      	ldr	r2, [r7, #16]
 800c9a2:	4413      	add	r3, r2
 800c9a4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c9a6:	68ba      	ldr	r2, [r7, #8]
 800c9a8:	693b      	ldr	r3, [r7, #16]
 800c9aa:	429a      	cmp	r2, r3
 800c9ac:	d90e      	bls.n	800c9cc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	68ba      	ldr	r2, [r7, #8]
 800c9b2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	68fa      	ldr	r2, [r7, #12]
 800c9b8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c9ba:	4b19      	ldr	r3, [pc, #100]	; (800ca20 <prvSwitchTimerLists+0xc0>)
 800c9bc:	681a      	ldr	r2, [r3, #0]
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	3304      	adds	r3, #4
 800c9c2:	4619      	mov	r1, r3
 800c9c4:	4610      	mov	r0, r2
 800c9c6:	f7fd fa7c 	bl	8009ec2 <vListInsert>
 800c9ca:	e016      	b.n	800c9fa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	9300      	str	r3, [sp, #0]
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	693a      	ldr	r2, [r7, #16]
 800c9d4:	2100      	movs	r1, #0
 800c9d6:	68f8      	ldr	r0, [r7, #12]
 800c9d8:	f7ff fd60 	bl	800c49c <xTimerGenericCommand>
 800c9dc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d10a      	bne.n	800c9fa <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c9e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9e8:	f383 8811 	msr	BASEPRI, r3
 800c9ec:	f3bf 8f6f 	isb	sy
 800c9f0:	f3bf 8f4f 	dsb	sy
 800c9f4:	603b      	str	r3, [r7, #0]
}
 800c9f6:	bf00      	nop
 800c9f8:	e7fe      	b.n	800c9f8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c9fa:	4b09      	ldr	r3, [pc, #36]	; (800ca20 <prvSwitchTimerLists+0xc0>)
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d1b1      	bne.n	800c968 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ca04:	4b06      	ldr	r3, [pc, #24]	; (800ca20 <prvSwitchTimerLists+0xc0>)
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ca0a:	4b06      	ldr	r3, [pc, #24]	; (800ca24 <prvSwitchTimerLists+0xc4>)
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	4a04      	ldr	r2, [pc, #16]	; (800ca20 <prvSwitchTimerLists+0xc0>)
 800ca10:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ca12:	4a04      	ldr	r2, [pc, #16]	; (800ca24 <prvSwitchTimerLists+0xc4>)
 800ca14:	697b      	ldr	r3, [r7, #20]
 800ca16:	6013      	str	r3, [r2, #0]
}
 800ca18:	bf00      	nop
 800ca1a:	3718      	adds	r7, #24
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}
 800ca20:	20001360 	.word	0x20001360
 800ca24:	20001364 	.word	0x20001364

0800ca28 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b082      	sub	sp, #8
 800ca2c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ca2e:	f000 f989 	bl	800cd44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ca32:	4b15      	ldr	r3, [pc, #84]	; (800ca88 <prvCheckForValidListAndQueue+0x60>)
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d120      	bne.n	800ca7c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ca3a:	4814      	ldr	r0, [pc, #80]	; (800ca8c <prvCheckForValidListAndQueue+0x64>)
 800ca3c:	f7fd f9f0 	bl	8009e20 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ca40:	4813      	ldr	r0, [pc, #76]	; (800ca90 <prvCheckForValidListAndQueue+0x68>)
 800ca42:	f7fd f9ed 	bl	8009e20 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ca46:	4b13      	ldr	r3, [pc, #76]	; (800ca94 <prvCheckForValidListAndQueue+0x6c>)
 800ca48:	4a10      	ldr	r2, [pc, #64]	; (800ca8c <prvCheckForValidListAndQueue+0x64>)
 800ca4a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ca4c:	4b12      	ldr	r3, [pc, #72]	; (800ca98 <prvCheckForValidListAndQueue+0x70>)
 800ca4e:	4a10      	ldr	r2, [pc, #64]	; (800ca90 <prvCheckForValidListAndQueue+0x68>)
 800ca50:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ca52:	2300      	movs	r3, #0
 800ca54:	9300      	str	r3, [sp, #0]
 800ca56:	4b11      	ldr	r3, [pc, #68]	; (800ca9c <prvCheckForValidListAndQueue+0x74>)
 800ca58:	4a11      	ldr	r2, [pc, #68]	; (800caa0 <prvCheckForValidListAndQueue+0x78>)
 800ca5a:	2110      	movs	r1, #16
 800ca5c:	200a      	movs	r0, #10
 800ca5e:	f7fd fafb 	bl	800a058 <xQueueGenericCreateStatic>
 800ca62:	4603      	mov	r3, r0
 800ca64:	4a08      	ldr	r2, [pc, #32]	; (800ca88 <prvCheckForValidListAndQueue+0x60>)
 800ca66:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ca68:	4b07      	ldr	r3, [pc, #28]	; (800ca88 <prvCheckForValidListAndQueue+0x60>)
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d005      	beq.n	800ca7c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ca70:	4b05      	ldr	r3, [pc, #20]	; (800ca88 <prvCheckForValidListAndQueue+0x60>)
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	490b      	ldr	r1, [pc, #44]	; (800caa4 <prvCheckForValidListAndQueue+0x7c>)
 800ca76:	4618      	mov	r0, r3
 800ca78:	f7fe fac2 	bl	800b000 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ca7c:	f000 f992 	bl	800cda4 <vPortExitCritical>
}
 800ca80:	bf00      	nop
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bd80      	pop	{r7, pc}
 800ca86:	bf00      	nop
 800ca88:	20001368 	.word	0x20001368
 800ca8c:	20001338 	.word	0x20001338
 800ca90:	2000134c 	.word	0x2000134c
 800ca94:	20001360 	.word	0x20001360
 800ca98:	20001364 	.word	0x20001364
 800ca9c:	20001414 	.word	0x20001414
 800caa0:	20001374 	.word	0x20001374
 800caa4:	0800eeec 	.word	0x0800eeec

0800caa8 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b086      	sub	sp, #24
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d10a      	bne.n	800cad0 <pvTimerGetTimerID+0x28>
	__asm volatile
 800caba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cabe:	f383 8811 	msr	BASEPRI, r3
 800cac2:	f3bf 8f6f 	isb	sy
 800cac6:	f3bf 8f4f 	dsb	sy
 800caca:	60fb      	str	r3, [r7, #12]
}
 800cacc:	bf00      	nop
 800cace:	e7fe      	b.n	800cace <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800cad0:	f000 f938 	bl	800cd44 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800cad4:	697b      	ldr	r3, [r7, #20]
 800cad6:	69db      	ldr	r3, [r3, #28]
 800cad8:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800cada:	f000 f963 	bl	800cda4 <vPortExitCritical>

	return pvReturn;
 800cade:	693b      	ldr	r3, [r7, #16]
}
 800cae0:	4618      	mov	r0, r3
 800cae2:	3718      	adds	r7, #24
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd80      	pop	{r7, pc}

0800cae8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cae8:	b480      	push	{r7}
 800caea:	b085      	sub	sp, #20
 800caec:	af00      	add	r7, sp, #0
 800caee:	60f8      	str	r0, [r7, #12]
 800caf0:	60b9      	str	r1, [r7, #8]
 800caf2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	3b04      	subs	r3, #4
 800caf8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cb00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	3b04      	subs	r3, #4
 800cb06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cb08:	68bb      	ldr	r3, [r7, #8]
 800cb0a:	f023 0201 	bic.w	r2, r3, #1
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	3b04      	subs	r3, #4
 800cb16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cb18:	4a0c      	ldr	r2, [pc, #48]	; (800cb4c <pxPortInitialiseStack+0x64>)
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	3b14      	subs	r3, #20
 800cb22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cb24:	687a      	ldr	r2, [r7, #4]
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	3b04      	subs	r3, #4
 800cb2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	f06f 0202 	mvn.w	r2, #2
 800cb36:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	3b20      	subs	r3, #32
 800cb3c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cb3e:	68fb      	ldr	r3, [r7, #12]
}
 800cb40:	4618      	mov	r0, r3
 800cb42:	3714      	adds	r7, #20
 800cb44:	46bd      	mov	sp, r7
 800cb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4a:	4770      	bx	lr
 800cb4c:	0800cb51 	.word	0x0800cb51

0800cb50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cb50:	b480      	push	{r7}
 800cb52:	b085      	sub	sp, #20
 800cb54:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cb56:	2300      	movs	r3, #0
 800cb58:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cb5a:	4b12      	ldr	r3, [pc, #72]	; (800cba4 <prvTaskExitError+0x54>)
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb62:	d00a      	beq.n	800cb7a <prvTaskExitError+0x2a>
	__asm volatile
 800cb64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb68:	f383 8811 	msr	BASEPRI, r3
 800cb6c:	f3bf 8f6f 	isb	sy
 800cb70:	f3bf 8f4f 	dsb	sy
 800cb74:	60fb      	str	r3, [r7, #12]
}
 800cb76:	bf00      	nop
 800cb78:	e7fe      	b.n	800cb78 <prvTaskExitError+0x28>
	__asm volatile
 800cb7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb7e:	f383 8811 	msr	BASEPRI, r3
 800cb82:	f3bf 8f6f 	isb	sy
 800cb86:	f3bf 8f4f 	dsb	sy
 800cb8a:	60bb      	str	r3, [r7, #8]
}
 800cb8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cb8e:	bf00      	nop
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d0fc      	beq.n	800cb90 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cb96:	bf00      	nop
 800cb98:	bf00      	nop
 800cb9a:	3714      	adds	r7, #20
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba2:	4770      	bx	lr
 800cba4:	20000034 	.word	0x20000034
	...

0800cbb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cbb0:	4b07      	ldr	r3, [pc, #28]	; (800cbd0 <pxCurrentTCBConst2>)
 800cbb2:	6819      	ldr	r1, [r3, #0]
 800cbb4:	6808      	ldr	r0, [r1, #0]
 800cbb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbba:	f380 8809 	msr	PSP, r0
 800cbbe:	f3bf 8f6f 	isb	sy
 800cbc2:	f04f 0000 	mov.w	r0, #0
 800cbc6:	f380 8811 	msr	BASEPRI, r0
 800cbca:	4770      	bx	lr
 800cbcc:	f3af 8000 	nop.w

0800cbd0 <pxCurrentTCBConst2>:
 800cbd0:	20000e38 	.word	0x20000e38
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cbd4:	bf00      	nop
 800cbd6:	bf00      	nop

0800cbd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cbd8:	4808      	ldr	r0, [pc, #32]	; (800cbfc <prvPortStartFirstTask+0x24>)
 800cbda:	6800      	ldr	r0, [r0, #0]
 800cbdc:	6800      	ldr	r0, [r0, #0]
 800cbde:	f380 8808 	msr	MSP, r0
 800cbe2:	f04f 0000 	mov.w	r0, #0
 800cbe6:	f380 8814 	msr	CONTROL, r0
 800cbea:	b662      	cpsie	i
 800cbec:	b661      	cpsie	f
 800cbee:	f3bf 8f4f 	dsb	sy
 800cbf2:	f3bf 8f6f 	isb	sy
 800cbf6:	df00      	svc	0
 800cbf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cbfa:	bf00      	nop
 800cbfc:	e000ed08 	.word	0xe000ed08

0800cc00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b086      	sub	sp, #24
 800cc04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cc06:	4b46      	ldr	r3, [pc, #280]	; (800cd20 <xPortStartScheduler+0x120>)
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	4a46      	ldr	r2, [pc, #280]	; (800cd24 <xPortStartScheduler+0x124>)
 800cc0c:	4293      	cmp	r3, r2
 800cc0e:	d10a      	bne.n	800cc26 <xPortStartScheduler+0x26>
	__asm volatile
 800cc10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc14:	f383 8811 	msr	BASEPRI, r3
 800cc18:	f3bf 8f6f 	isb	sy
 800cc1c:	f3bf 8f4f 	dsb	sy
 800cc20:	613b      	str	r3, [r7, #16]
}
 800cc22:	bf00      	nop
 800cc24:	e7fe      	b.n	800cc24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cc26:	4b3e      	ldr	r3, [pc, #248]	; (800cd20 <xPortStartScheduler+0x120>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	4a3f      	ldr	r2, [pc, #252]	; (800cd28 <xPortStartScheduler+0x128>)
 800cc2c:	4293      	cmp	r3, r2
 800cc2e:	d10a      	bne.n	800cc46 <xPortStartScheduler+0x46>
	__asm volatile
 800cc30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc34:	f383 8811 	msr	BASEPRI, r3
 800cc38:	f3bf 8f6f 	isb	sy
 800cc3c:	f3bf 8f4f 	dsb	sy
 800cc40:	60fb      	str	r3, [r7, #12]
}
 800cc42:	bf00      	nop
 800cc44:	e7fe      	b.n	800cc44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cc46:	4b39      	ldr	r3, [pc, #228]	; (800cd2c <xPortStartScheduler+0x12c>)
 800cc48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cc4a:	697b      	ldr	r3, [r7, #20]
 800cc4c:	781b      	ldrb	r3, [r3, #0]
 800cc4e:	b2db      	uxtb	r3, r3
 800cc50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cc52:	697b      	ldr	r3, [r7, #20]
 800cc54:	22ff      	movs	r2, #255	; 0xff
 800cc56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cc58:	697b      	ldr	r3, [r7, #20]
 800cc5a:	781b      	ldrb	r3, [r3, #0]
 800cc5c:	b2db      	uxtb	r3, r3
 800cc5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cc60:	78fb      	ldrb	r3, [r7, #3]
 800cc62:	b2db      	uxtb	r3, r3
 800cc64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cc68:	b2da      	uxtb	r2, r3
 800cc6a:	4b31      	ldr	r3, [pc, #196]	; (800cd30 <xPortStartScheduler+0x130>)
 800cc6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cc6e:	4b31      	ldr	r3, [pc, #196]	; (800cd34 <xPortStartScheduler+0x134>)
 800cc70:	2207      	movs	r2, #7
 800cc72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cc74:	e009      	b.n	800cc8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cc76:	4b2f      	ldr	r3, [pc, #188]	; (800cd34 <xPortStartScheduler+0x134>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	3b01      	subs	r3, #1
 800cc7c:	4a2d      	ldr	r2, [pc, #180]	; (800cd34 <xPortStartScheduler+0x134>)
 800cc7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cc80:	78fb      	ldrb	r3, [r7, #3]
 800cc82:	b2db      	uxtb	r3, r3
 800cc84:	005b      	lsls	r3, r3, #1
 800cc86:	b2db      	uxtb	r3, r3
 800cc88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cc8a:	78fb      	ldrb	r3, [r7, #3]
 800cc8c:	b2db      	uxtb	r3, r3
 800cc8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc92:	2b80      	cmp	r3, #128	; 0x80
 800cc94:	d0ef      	beq.n	800cc76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cc96:	4b27      	ldr	r3, [pc, #156]	; (800cd34 <xPortStartScheduler+0x134>)
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	f1c3 0307 	rsb	r3, r3, #7
 800cc9e:	2b04      	cmp	r3, #4
 800cca0:	d00a      	beq.n	800ccb8 <xPortStartScheduler+0xb8>
	__asm volatile
 800cca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cca6:	f383 8811 	msr	BASEPRI, r3
 800ccaa:	f3bf 8f6f 	isb	sy
 800ccae:	f3bf 8f4f 	dsb	sy
 800ccb2:	60bb      	str	r3, [r7, #8]
}
 800ccb4:	bf00      	nop
 800ccb6:	e7fe      	b.n	800ccb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ccb8:	4b1e      	ldr	r3, [pc, #120]	; (800cd34 <xPortStartScheduler+0x134>)
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	021b      	lsls	r3, r3, #8
 800ccbe:	4a1d      	ldr	r2, [pc, #116]	; (800cd34 <xPortStartScheduler+0x134>)
 800ccc0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ccc2:	4b1c      	ldr	r3, [pc, #112]	; (800cd34 <xPortStartScheduler+0x134>)
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ccca:	4a1a      	ldr	r2, [pc, #104]	; (800cd34 <xPortStartScheduler+0x134>)
 800cccc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	b2da      	uxtb	r2, r3
 800ccd2:	697b      	ldr	r3, [r7, #20]
 800ccd4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ccd6:	4b18      	ldr	r3, [pc, #96]	; (800cd38 <xPortStartScheduler+0x138>)
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	4a17      	ldr	r2, [pc, #92]	; (800cd38 <xPortStartScheduler+0x138>)
 800ccdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cce0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cce2:	4b15      	ldr	r3, [pc, #84]	; (800cd38 <xPortStartScheduler+0x138>)
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	4a14      	ldr	r2, [pc, #80]	; (800cd38 <xPortStartScheduler+0x138>)
 800cce8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ccec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ccee:	f000 f8dd 	bl	800ceac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ccf2:	4b12      	ldr	r3, [pc, #72]	; (800cd3c <xPortStartScheduler+0x13c>)
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ccf8:	f000 f8fc 	bl	800cef4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ccfc:	4b10      	ldr	r3, [pc, #64]	; (800cd40 <xPortStartScheduler+0x140>)
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	4a0f      	ldr	r2, [pc, #60]	; (800cd40 <xPortStartScheduler+0x140>)
 800cd02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cd06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cd08:	f7ff ff66 	bl	800cbd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cd0c:	f7fe fe8a 	bl	800ba24 <vTaskSwitchContext>
	prvTaskExitError();
 800cd10:	f7ff ff1e 	bl	800cb50 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cd14:	2300      	movs	r3, #0
}
 800cd16:	4618      	mov	r0, r3
 800cd18:	3718      	adds	r7, #24
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	bd80      	pop	{r7, pc}
 800cd1e:	bf00      	nop
 800cd20:	e000ed00 	.word	0xe000ed00
 800cd24:	410fc271 	.word	0x410fc271
 800cd28:	410fc270 	.word	0x410fc270
 800cd2c:	e000e400 	.word	0xe000e400
 800cd30:	20001464 	.word	0x20001464
 800cd34:	20001468 	.word	0x20001468
 800cd38:	e000ed20 	.word	0xe000ed20
 800cd3c:	20000034 	.word	0x20000034
 800cd40:	e000ef34 	.word	0xe000ef34

0800cd44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cd44:	b480      	push	{r7}
 800cd46:	b083      	sub	sp, #12
 800cd48:	af00      	add	r7, sp, #0
	__asm volatile
 800cd4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd4e:	f383 8811 	msr	BASEPRI, r3
 800cd52:	f3bf 8f6f 	isb	sy
 800cd56:	f3bf 8f4f 	dsb	sy
 800cd5a:	607b      	str	r3, [r7, #4]
}
 800cd5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cd5e:	4b0f      	ldr	r3, [pc, #60]	; (800cd9c <vPortEnterCritical+0x58>)
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	3301      	adds	r3, #1
 800cd64:	4a0d      	ldr	r2, [pc, #52]	; (800cd9c <vPortEnterCritical+0x58>)
 800cd66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cd68:	4b0c      	ldr	r3, [pc, #48]	; (800cd9c <vPortEnterCritical+0x58>)
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	2b01      	cmp	r3, #1
 800cd6e:	d10f      	bne.n	800cd90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cd70:	4b0b      	ldr	r3, [pc, #44]	; (800cda0 <vPortEnterCritical+0x5c>)
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	b2db      	uxtb	r3, r3
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d00a      	beq.n	800cd90 <vPortEnterCritical+0x4c>
	__asm volatile
 800cd7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd7e:	f383 8811 	msr	BASEPRI, r3
 800cd82:	f3bf 8f6f 	isb	sy
 800cd86:	f3bf 8f4f 	dsb	sy
 800cd8a:	603b      	str	r3, [r7, #0]
}
 800cd8c:	bf00      	nop
 800cd8e:	e7fe      	b.n	800cd8e <vPortEnterCritical+0x4a>
	}
}
 800cd90:	bf00      	nop
 800cd92:	370c      	adds	r7, #12
 800cd94:	46bd      	mov	sp, r7
 800cd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9a:	4770      	bx	lr
 800cd9c:	20000034 	.word	0x20000034
 800cda0:	e000ed04 	.word	0xe000ed04

0800cda4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cda4:	b480      	push	{r7}
 800cda6:	b083      	sub	sp, #12
 800cda8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cdaa:	4b12      	ldr	r3, [pc, #72]	; (800cdf4 <vPortExitCritical+0x50>)
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d10a      	bne.n	800cdc8 <vPortExitCritical+0x24>
	__asm volatile
 800cdb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb6:	f383 8811 	msr	BASEPRI, r3
 800cdba:	f3bf 8f6f 	isb	sy
 800cdbe:	f3bf 8f4f 	dsb	sy
 800cdc2:	607b      	str	r3, [r7, #4]
}
 800cdc4:	bf00      	nop
 800cdc6:	e7fe      	b.n	800cdc6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cdc8:	4b0a      	ldr	r3, [pc, #40]	; (800cdf4 <vPortExitCritical+0x50>)
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	3b01      	subs	r3, #1
 800cdce:	4a09      	ldr	r2, [pc, #36]	; (800cdf4 <vPortExitCritical+0x50>)
 800cdd0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cdd2:	4b08      	ldr	r3, [pc, #32]	; (800cdf4 <vPortExitCritical+0x50>)
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d105      	bne.n	800cde6 <vPortExitCritical+0x42>
 800cdda:	2300      	movs	r3, #0
 800cddc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cdde:	683b      	ldr	r3, [r7, #0]
 800cde0:	f383 8811 	msr	BASEPRI, r3
}
 800cde4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cde6:	bf00      	nop
 800cde8:	370c      	adds	r7, #12
 800cdea:	46bd      	mov	sp, r7
 800cdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf0:	4770      	bx	lr
 800cdf2:	bf00      	nop
 800cdf4:	20000034 	.word	0x20000034
	...

0800ce00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ce00:	f3ef 8009 	mrs	r0, PSP
 800ce04:	f3bf 8f6f 	isb	sy
 800ce08:	4b15      	ldr	r3, [pc, #84]	; (800ce60 <pxCurrentTCBConst>)
 800ce0a:	681a      	ldr	r2, [r3, #0]
 800ce0c:	f01e 0f10 	tst.w	lr, #16
 800ce10:	bf08      	it	eq
 800ce12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ce16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce1a:	6010      	str	r0, [r2, #0]
 800ce1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ce20:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ce24:	f380 8811 	msr	BASEPRI, r0
 800ce28:	f3bf 8f4f 	dsb	sy
 800ce2c:	f3bf 8f6f 	isb	sy
 800ce30:	f7fe fdf8 	bl	800ba24 <vTaskSwitchContext>
 800ce34:	f04f 0000 	mov.w	r0, #0
 800ce38:	f380 8811 	msr	BASEPRI, r0
 800ce3c:	bc09      	pop	{r0, r3}
 800ce3e:	6819      	ldr	r1, [r3, #0]
 800ce40:	6808      	ldr	r0, [r1, #0]
 800ce42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce46:	f01e 0f10 	tst.w	lr, #16
 800ce4a:	bf08      	it	eq
 800ce4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ce50:	f380 8809 	msr	PSP, r0
 800ce54:	f3bf 8f6f 	isb	sy
 800ce58:	4770      	bx	lr
 800ce5a:	bf00      	nop
 800ce5c:	f3af 8000 	nop.w

0800ce60 <pxCurrentTCBConst>:
 800ce60:	20000e38 	.word	0x20000e38
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ce64:	bf00      	nop
 800ce66:	bf00      	nop

0800ce68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b082      	sub	sp, #8
 800ce6c:	af00      	add	r7, sp, #0
	__asm volatile
 800ce6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce72:	f383 8811 	msr	BASEPRI, r3
 800ce76:	f3bf 8f6f 	isb	sy
 800ce7a:	f3bf 8f4f 	dsb	sy
 800ce7e:	607b      	str	r3, [r7, #4]
}
 800ce80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ce82:	f7fe fd15 	bl	800b8b0 <xTaskIncrementTick>
 800ce86:	4603      	mov	r3, r0
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d003      	beq.n	800ce94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ce8c:	4b06      	ldr	r3, [pc, #24]	; (800cea8 <xPortSysTickHandler+0x40>)
 800ce8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce92:	601a      	str	r2, [r3, #0]
 800ce94:	2300      	movs	r3, #0
 800ce96:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ce98:	683b      	ldr	r3, [r7, #0]
 800ce9a:	f383 8811 	msr	BASEPRI, r3
}
 800ce9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cea0:	bf00      	nop
 800cea2:	3708      	adds	r7, #8
 800cea4:	46bd      	mov	sp, r7
 800cea6:	bd80      	pop	{r7, pc}
 800cea8:	e000ed04 	.word	0xe000ed04

0800ceac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ceac:	b480      	push	{r7}
 800ceae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ceb0:	4b0b      	ldr	r3, [pc, #44]	; (800cee0 <vPortSetupTimerInterrupt+0x34>)
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ceb6:	4b0b      	ldr	r3, [pc, #44]	; (800cee4 <vPortSetupTimerInterrupt+0x38>)
 800ceb8:	2200      	movs	r2, #0
 800ceba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cebc:	4b0a      	ldr	r3, [pc, #40]	; (800cee8 <vPortSetupTimerInterrupt+0x3c>)
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	4a0a      	ldr	r2, [pc, #40]	; (800ceec <vPortSetupTimerInterrupt+0x40>)
 800cec2:	fba2 2303 	umull	r2, r3, r2, r3
 800cec6:	099b      	lsrs	r3, r3, #6
 800cec8:	4a09      	ldr	r2, [pc, #36]	; (800cef0 <vPortSetupTimerInterrupt+0x44>)
 800ceca:	3b01      	subs	r3, #1
 800cecc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cece:	4b04      	ldr	r3, [pc, #16]	; (800cee0 <vPortSetupTimerInterrupt+0x34>)
 800ced0:	2207      	movs	r2, #7
 800ced2:	601a      	str	r2, [r3, #0]
}
 800ced4:	bf00      	nop
 800ced6:	46bd      	mov	sp, r7
 800ced8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cedc:	4770      	bx	lr
 800cede:	bf00      	nop
 800cee0:	e000e010 	.word	0xe000e010
 800cee4:	e000e018 	.word	0xe000e018
 800cee8:	20000028 	.word	0x20000028
 800ceec:	10624dd3 	.word	0x10624dd3
 800cef0:	e000e014 	.word	0xe000e014

0800cef4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cef4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cf04 <vPortEnableVFP+0x10>
 800cef8:	6801      	ldr	r1, [r0, #0]
 800cefa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cefe:	6001      	str	r1, [r0, #0]
 800cf00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cf02:	bf00      	nop
 800cf04:	e000ed88 	.word	0xe000ed88

0800cf08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cf08:	b480      	push	{r7}
 800cf0a:	b085      	sub	sp, #20
 800cf0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cf0e:	f3ef 8305 	mrs	r3, IPSR
 800cf12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	2b0f      	cmp	r3, #15
 800cf18:	d914      	bls.n	800cf44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cf1a:	4a17      	ldr	r2, [pc, #92]	; (800cf78 <vPortValidateInterruptPriority+0x70>)
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	4413      	add	r3, r2
 800cf20:	781b      	ldrb	r3, [r3, #0]
 800cf22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cf24:	4b15      	ldr	r3, [pc, #84]	; (800cf7c <vPortValidateInterruptPriority+0x74>)
 800cf26:	781b      	ldrb	r3, [r3, #0]
 800cf28:	7afa      	ldrb	r2, [r7, #11]
 800cf2a:	429a      	cmp	r2, r3
 800cf2c:	d20a      	bcs.n	800cf44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cf2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf32:	f383 8811 	msr	BASEPRI, r3
 800cf36:	f3bf 8f6f 	isb	sy
 800cf3a:	f3bf 8f4f 	dsb	sy
 800cf3e:	607b      	str	r3, [r7, #4]
}
 800cf40:	bf00      	nop
 800cf42:	e7fe      	b.n	800cf42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cf44:	4b0e      	ldr	r3, [pc, #56]	; (800cf80 <vPortValidateInterruptPriority+0x78>)
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cf4c:	4b0d      	ldr	r3, [pc, #52]	; (800cf84 <vPortValidateInterruptPriority+0x7c>)
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	429a      	cmp	r2, r3
 800cf52:	d90a      	bls.n	800cf6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cf54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf58:	f383 8811 	msr	BASEPRI, r3
 800cf5c:	f3bf 8f6f 	isb	sy
 800cf60:	f3bf 8f4f 	dsb	sy
 800cf64:	603b      	str	r3, [r7, #0]
}
 800cf66:	bf00      	nop
 800cf68:	e7fe      	b.n	800cf68 <vPortValidateInterruptPriority+0x60>
	}
 800cf6a:	bf00      	nop
 800cf6c:	3714      	adds	r7, #20
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf74:	4770      	bx	lr
 800cf76:	bf00      	nop
 800cf78:	e000e3f0 	.word	0xe000e3f0
 800cf7c:	20001464 	.word	0x20001464
 800cf80:	e000ed0c 	.word	0xe000ed0c
 800cf84:	20001468 	.word	0x20001468

0800cf88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b08a      	sub	sp, #40	; 0x28
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cf90:	2300      	movs	r3, #0
 800cf92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cf94:	f7fe fbd0 	bl	800b738 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cf98:	4b5b      	ldr	r3, [pc, #364]	; (800d108 <pvPortMalloc+0x180>)
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d101      	bne.n	800cfa4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cfa0:	f000 f920 	bl	800d1e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cfa4:	4b59      	ldr	r3, [pc, #356]	; (800d10c <pvPortMalloc+0x184>)
 800cfa6:	681a      	ldr	r2, [r3, #0]
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	4013      	ands	r3, r2
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	f040 8093 	bne.w	800d0d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d01d      	beq.n	800cff4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800cfb8:	2208      	movs	r2, #8
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	4413      	add	r3, r2
 800cfbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f003 0307 	and.w	r3, r3, #7
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d014      	beq.n	800cff4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	f023 0307 	bic.w	r3, r3, #7
 800cfd0:	3308      	adds	r3, #8
 800cfd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f003 0307 	and.w	r3, r3, #7
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d00a      	beq.n	800cff4 <pvPortMalloc+0x6c>
	__asm volatile
 800cfde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfe2:	f383 8811 	msr	BASEPRI, r3
 800cfe6:	f3bf 8f6f 	isb	sy
 800cfea:	f3bf 8f4f 	dsb	sy
 800cfee:	617b      	str	r3, [r7, #20]
}
 800cff0:	bf00      	nop
 800cff2:	e7fe      	b.n	800cff2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d06e      	beq.n	800d0d8 <pvPortMalloc+0x150>
 800cffa:	4b45      	ldr	r3, [pc, #276]	; (800d110 <pvPortMalloc+0x188>)
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	687a      	ldr	r2, [r7, #4]
 800d000:	429a      	cmp	r2, r3
 800d002:	d869      	bhi.n	800d0d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d004:	4b43      	ldr	r3, [pc, #268]	; (800d114 <pvPortMalloc+0x18c>)
 800d006:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d008:	4b42      	ldr	r3, [pc, #264]	; (800d114 <pvPortMalloc+0x18c>)
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d00e:	e004      	b.n	800d01a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d012:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d01c:	685b      	ldr	r3, [r3, #4]
 800d01e:	687a      	ldr	r2, [r7, #4]
 800d020:	429a      	cmp	r2, r3
 800d022:	d903      	bls.n	800d02c <pvPortMalloc+0xa4>
 800d024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d1f1      	bne.n	800d010 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d02c:	4b36      	ldr	r3, [pc, #216]	; (800d108 <pvPortMalloc+0x180>)
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d032:	429a      	cmp	r2, r3
 800d034:	d050      	beq.n	800d0d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d036:	6a3b      	ldr	r3, [r7, #32]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	2208      	movs	r2, #8
 800d03c:	4413      	add	r3, r2
 800d03e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d042:	681a      	ldr	r2, [r3, #0]
 800d044:	6a3b      	ldr	r3, [r7, #32]
 800d046:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d04a:	685a      	ldr	r2, [r3, #4]
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	1ad2      	subs	r2, r2, r3
 800d050:	2308      	movs	r3, #8
 800d052:	005b      	lsls	r3, r3, #1
 800d054:	429a      	cmp	r2, r3
 800d056:	d91f      	bls.n	800d098 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	4413      	add	r3, r2
 800d05e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d060:	69bb      	ldr	r3, [r7, #24]
 800d062:	f003 0307 	and.w	r3, r3, #7
 800d066:	2b00      	cmp	r3, #0
 800d068:	d00a      	beq.n	800d080 <pvPortMalloc+0xf8>
	__asm volatile
 800d06a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d06e:	f383 8811 	msr	BASEPRI, r3
 800d072:	f3bf 8f6f 	isb	sy
 800d076:	f3bf 8f4f 	dsb	sy
 800d07a:	613b      	str	r3, [r7, #16]
}
 800d07c:	bf00      	nop
 800d07e:	e7fe      	b.n	800d07e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d082:	685a      	ldr	r2, [r3, #4]
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	1ad2      	subs	r2, r2, r3
 800d088:	69bb      	ldr	r3, [r7, #24]
 800d08a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d08e:	687a      	ldr	r2, [r7, #4]
 800d090:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d092:	69b8      	ldr	r0, [r7, #24]
 800d094:	f000 f908 	bl	800d2a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d098:	4b1d      	ldr	r3, [pc, #116]	; (800d110 <pvPortMalloc+0x188>)
 800d09a:	681a      	ldr	r2, [r3, #0]
 800d09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d09e:	685b      	ldr	r3, [r3, #4]
 800d0a0:	1ad3      	subs	r3, r2, r3
 800d0a2:	4a1b      	ldr	r2, [pc, #108]	; (800d110 <pvPortMalloc+0x188>)
 800d0a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d0a6:	4b1a      	ldr	r3, [pc, #104]	; (800d110 <pvPortMalloc+0x188>)
 800d0a8:	681a      	ldr	r2, [r3, #0]
 800d0aa:	4b1b      	ldr	r3, [pc, #108]	; (800d118 <pvPortMalloc+0x190>)
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	429a      	cmp	r2, r3
 800d0b0:	d203      	bcs.n	800d0ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d0b2:	4b17      	ldr	r3, [pc, #92]	; (800d110 <pvPortMalloc+0x188>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	4a18      	ldr	r2, [pc, #96]	; (800d118 <pvPortMalloc+0x190>)
 800d0b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0bc:	685a      	ldr	r2, [r3, #4]
 800d0be:	4b13      	ldr	r3, [pc, #76]	; (800d10c <pvPortMalloc+0x184>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	431a      	orrs	r2, r3
 800d0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d0ce:	4b13      	ldr	r3, [pc, #76]	; (800d11c <pvPortMalloc+0x194>)
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	3301      	adds	r3, #1
 800d0d4:	4a11      	ldr	r2, [pc, #68]	; (800d11c <pvPortMalloc+0x194>)
 800d0d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d0d8:	f7fe fb3c 	bl	800b754 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d0dc:	69fb      	ldr	r3, [r7, #28]
 800d0de:	f003 0307 	and.w	r3, r3, #7
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d00a      	beq.n	800d0fc <pvPortMalloc+0x174>
	__asm volatile
 800d0e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ea:	f383 8811 	msr	BASEPRI, r3
 800d0ee:	f3bf 8f6f 	isb	sy
 800d0f2:	f3bf 8f4f 	dsb	sy
 800d0f6:	60fb      	str	r3, [r7, #12]
}
 800d0f8:	bf00      	nop
 800d0fa:	e7fe      	b.n	800d0fa <pvPortMalloc+0x172>
	return pvReturn;
 800d0fc:	69fb      	ldr	r3, [r7, #28]
}
 800d0fe:	4618      	mov	r0, r3
 800d100:	3728      	adds	r7, #40	; 0x28
 800d102:	46bd      	mov	sp, r7
 800d104:	bd80      	pop	{r7, pc}
 800d106:	bf00      	nop
 800d108:	20005074 	.word	0x20005074
 800d10c:	20005088 	.word	0x20005088
 800d110:	20005078 	.word	0x20005078
 800d114:	2000506c 	.word	0x2000506c
 800d118:	2000507c 	.word	0x2000507c
 800d11c:	20005080 	.word	0x20005080

0800d120 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b086      	sub	sp, #24
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d04d      	beq.n	800d1ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d132:	2308      	movs	r3, #8
 800d134:	425b      	negs	r3, r3
 800d136:	697a      	ldr	r2, [r7, #20]
 800d138:	4413      	add	r3, r2
 800d13a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d13c:	697b      	ldr	r3, [r7, #20]
 800d13e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d140:	693b      	ldr	r3, [r7, #16]
 800d142:	685a      	ldr	r2, [r3, #4]
 800d144:	4b24      	ldr	r3, [pc, #144]	; (800d1d8 <vPortFree+0xb8>)
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	4013      	ands	r3, r2
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d10a      	bne.n	800d164 <vPortFree+0x44>
	__asm volatile
 800d14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d152:	f383 8811 	msr	BASEPRI, r3
 800d156:	f3bf 8f6f 	isb	sy
 800d15a:	f3bf 8f4f 	dsb	sy
 800d15e:	60fb      	str	r3, [r7, #12]
}
 800d160:	bf00      	nop
 800d162:	e7fe      	b.n	800d162 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d164:	693b      	ldr	r3, [r7, #16]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d00a      	beq.n	800d182 <vPortFree+0x62>
	__asm volatile
 800d16c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d170:	f383 8811 	msr	BASEPRI, r3
 800d174:	f3bf 8f6f 	isb	sy
 800d178:	f3bf 8f4f 	dsb	sy
 800d17c:	60bb      	str	r3, [r7, #8]
}
 800d17e:	bf00      	nop
 800d180:	e7fe      	b.n	800d180 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d182:	693b      	ldr	r3, [r7, #16]
 800d184:	685a      	ldr	r2, [r3, #4]
 800d186:	4b14      	ldr	r3, [pc, #80]	; (800d1d8 <vPortFree+0xb8>)
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	4013      	ands	r3, r2
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d01e      	beq.n	800d1ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d190:	693b      	ldr	r3, [r7, #16]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d11a      	bne.n	800d1ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d198:	693b      	ldr	r3, [r7, #16]
 800d19a:	685a      	ldr	r2, [r3, #4]
 800d19c:	4b0e      	ldr	r3, [pc, #56]	; (800d1d8 <vPortFree+0xb8>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	43db      	mvns	r3, r3
 800d1a2:	401a      	ands	r2, r3
 800d1a4:	693b      	ldr	r3, [r7, #16]
 800d1a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d1a8:	f7fe fac6 	bl	800b738 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d1ac:	693b      	ldr	r3, [r7, #16]
 800d1ae:	685a      	ldr	r2, [r3, #4]
 800d1b0:	4b0a      	ldr	r3, [pc, #40]	; (800d1dc <vPortFree+0xbc>)
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	4413      	add	r3, r2
 800d1b6:	4a09      	ldr	r2, [pc, #36]	; (800d1dc <vPortFree+0xbc>)
 800d1b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d1ba:	6938      	ldr	r0, [r7, #16]
 800d1bc:	f000 f874 	bl	800d2a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d1c0:	4b07      	ldr	r3, [pc, #28]	; (800d1e0 <vPortFree+0xc0>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	3301      	adds	r3, #1
 800d1c6:	4a06      	ldr	r2, [pc, #24]	; (800d1e0 <vPortFree+0xc0>)
 800d1c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d1ca:	f7fe fac3 	bl	800b754 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d1ce:	bf00      	nop
 800d1d0:	3718      	adds	r7, #24
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	bd80      	pop	{r7, pc}
 800d1d6:	bf00      	nop
 800d1d8:	20005088 	.word	0x20005088
 800d1dc:	20005078 	.word	0x20005078
 800d1e0:	20005084 	.word	0x20005084

0800d1e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d1e4:	b480      	push	{r7}
 800d1e6:	b085      	sub	sp, #20
 800d1e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d1ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d1ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d1f0:	4b27      	ldr	r3, [pc, #156]	; (800d290 <prvHeapInit+0xac>)
 800d1f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	f003 0307 	and.w	r3, r3, #7
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d00c      	beq.n	800d218 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	3307      	adds	r3, #7
 800d202:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	f023 0307 	bic.w	r3, r3, #7
 800d20a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d20c:	68ba      	ldr	r2, [r7, #8]
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	1ad3      	subs	r3, r2, r3
 800d212:	4a1f      	ldr	r2, [pc, #124]	; (800d290 <prvHeapInit+0xac>)
 800d214:	4413      	add	r3, r2
 800d216:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d21c:	4a1d      	ldr	r2, [pc, #116]	; (800d294 <prvHeapInit+0xb0>)
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d222:	4b1c      	ldr	r3, [pc, #112]	; (800d294 <prvHeapInit+0xb0>)
 800d224:	2200      	movs	r2, #0
 800d226:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	68ba      	ldr	r2, [r7, #8]
 800d22c:	4413      	add	r3, r2
 800d22e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d230:	2208      	movs	r2, #8
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	1a9b      	subs	r3, r3, r2
 800d236:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	f023 0307 	bic.w	r3, r3, #7
 800d23e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	4a15      	ldr	r2, [pc, #84]	; (800d298 <prvHeapInit+0xb4>)
 800d244:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d246:	4b14      	ldr	r3, [pc, #80]	; (800d298 <prvHeapInit+0xb4>)
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	2200      	movs	r2, #0
 800d24c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d24e:	4b12      	ldr	r3, [pc, #72]	; (800d298 <prvHeapInit+0xb4>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	2200      	movs	r2, #0
 800d254:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d25a:	683b      	ldr	r3, [r7, #0]
 800d25c:	68fa      	ldr	r2, [r7, #12]
 800d25e:	1ad2      	subs	r2, r2, r3
 800d260:	683b      	ldr	r3, [r7, #0]
 800d262:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d264:	4b0c      	ldr	r3, [pc, #48]	; (800d298 <prvHeapInit+0xb4>)
 800d266:	681a      	ldr	r2, [r3, #0]
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d26c:	683b      	ldr	r3, [r7, #0]
 800d26e:	685b      	ldr	r3, [r3, #4]
 800d270:	4a0a      	ldr	r2, [pc, #40]	; (800d29c <prvHeapInit+0xb8>)
 800d272:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d274:	683b      	ldr	r3, [r7, #0]
 800d276:	685b      	ldr	r3, [r3, #4]
 800d278:	4a09      	ldr	r2, [pc, #36]	; (800d2a0 <prvHeapInit+0xbc>)
 800d27a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d27c:	4b09      	ldr	r3, [pc, #36]	; (800d2a4 <prvHeapInit+0xc0>)
 800d27e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d282:	601a      	str	r2, [r3, #0]
}
 800d284:	bf00      	nop
 800d286:	3714      	adds	r7, #20
 800d288:	46bd      	mov	sp, r7
 800d28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28e:	4770      	bx	lr
 800d290:	2000146c 	.word	0x2000146c
 800d294:	2000506c 	.word	0x2000506c
 800d298:	20005074 	.word	0x20005074
 800d29c:	2000507c 	.word	0x2000507c
 800d2a0:	20005078 	.word	0x20005078
 800d2a4:	20005088 	.word	0x20005088

0800d2a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d2a8:	b480      	push	{r7}
 800d2aa:	b085      	sub	sp, #20
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d2b0:	4b28      	ldr	r3, [pc, #160]	; (800d354 <prvInsertBlockIntoFreeList+0xac>)
 800d2b2:	60fb      	str	r3, [r7, #12]
 800d2b4:	e002      	b.n	800d2bc <prvInsertBlockIntoFreeList+0x14>
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	60fb      	str	r3, [r7, #12]
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	687a      	ldr	r2, [r7, #4]
 800d2c2:	429a      	cmp	r2, r3
 800d2c4:	d8f7      	bhi.n	800d2b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	685b      	ldr	r3, [r3, #4]
 800d2ce:	68ba      	ldr	r2, [r7, #8]
 800d2d0:	4413      	add	r3, r2
 800d2d2:	687a      	ldr	r2, [r7, #4]
 800d2d4:	429a      	cmp	r2, r3
 800d2d6:	d108      	bne.n	800d2ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	685a      	ldr	r2, [r3, #4]
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	685b      	ldr	r3, [r3, #4]
 800d2e0:	441a      	add	r2, r3
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	685b      	ldr	r3, [r3, #4]
 800d2f2:	68ba      	ldr	r2, [r7, #8]
 800d2f4:	441a      	add	r2, r3
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	429a      	cmp	r2, r3
 800d2fc:	d118      	bne.n	800d330 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	681a      	ldr	r2, [r3, #0]
 800d302:	4b15      	ldr	r3, [pc, #84]	; (800d358 <prvInsertBlockIntoFreeList+0xb0>)
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	429a      	cmp	r2, r3
 800d308:	d00d      	beq.n	800d326 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	685a      	ldr	r2, [r3, #4]
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	685b      	ldr	r3, [r3, #4]
 800d314:	441a      	add	r2, r3
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	681a      	ldr	r2, [r3, #0]
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	601a      	str	r2, [r3, #0]
 800d324:	e008      	b.n	800d338 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d326:	4b0c      	ldr	r3, [pc, #48]	; (800d358 <prvInsertBlockIntoFreeList+0xb0>)
 800d328:	681a      	ldr	r2, [r3, #0]
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	601a      	str	r2, [r3, #0]
 800d32e:	e003      	b.n	800d338 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	681a      	ldr	r2, [r3, #0]
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d338:	68fa      	ldr	r2, [r7, #12]
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	429a      	cmp	r2, r3
 800d33e:	d002      	beq.n	800d346 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	687a      	ldr	r2, [r7, #4]
 800d344:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d346:	bf00      	nop
 800d348:	3714      	adds	r7, #20
 800d34a:	46bd      	mov	sp, r7
 800d34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d350:	4770      	bx	lr
 800d352:	bf00      	nop
 800d354:	2000506c 	.word	0x2000506c
 800d358:	20005074 	.word	0x20005074

0800d35c <__errno>:
 800d35c:	4b01      	ldr	r3, [pc, #4]	; (800d364 <__errno+0x8>)
 800d35e:	6818      	ldr	r0, [r3, #0]
 800d360:	4770      	bx	lr
 800d362:	bf00      	nop
 800d364:	20000038 	.word	0x20000038

0800d368 <__libc_init_array>:
 800d368:	b570      	push	{r4, r5, r6, lr}
 800d36a:	4d0d      	ldr	r5, [pc, #52]	; (800d3a0 <__libc_init_array+0x38>)
 800d36c:	4c0d      	ldr	r4, [pc, #52]	; (800d3a4 <__libc_init_array+0x3c>)
 800d36e:	1b64      	subs	r4, r4, r5
 800d370:	10a4      	asrs	r4, r4, #2
 800d372:	2600      	movs	r6, #0
 800d374:	42a6      	cmp	r6, r4
 800d376:	d109      	bne.n	800d38c <__libc_init_array+0x24>
 800d378:	4d0b      	ldr	r5, [pc, #44]	; (800d3a8 <__libc_init_array+0x40>)
 800d37a:	4c0c      	ldr	r4, [pc, #48]	; (800d3ac <__libc_init_array+0x44>)
 800d37c:	f001 f97e 	bl	800e67c <_init>
 800d380:	1b64      	subs	r4, r4, r5
 800d382:	10a4      	asrs	r4, r4, #2
 800d384:	2600      	movs	r6, #0
 800d386:	42a6      	cmp	r6, r4
 800d388:	d105      	bne.n	800d396 <__libc_init_array+0x2e>
 800d38a:	bd70      	pop	{r4, r5, r6, pc}
 800d38c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d390:	4798      	blx	r3
 800d392:	3601      	adds	r6, #1
 800d394:	e7ee      	b.n	800d374 <__libc_init_array+0xc>
 800d396:	f855 3b04 	ldr.w	r3, [r5], #4
 800d39a:	4798      	blx	r3
 800d39c:	3601      	adds	r6, #1
 800d39e:	e7f2      	b.n	800d386 <__libc_init_array+0x1e>
 800d3a0:	0800f4b4 	.word	0x0800f4b4
 800d3a4:	0800f4b4 	.word	0x0800f4b4
 800d3a8:	0800f4b4 	.word	0x0800f4b4
 800d3ac:	0800f4b8 	.word	0x0800f4b8

0800d3b0 <memcpy>:
 800d3b0:	440a      	add	r2, r1
 800d3b2:	4291      	cmp	r1, r2
 800d3b4:	f100 33ff 	add.w	r3, r0, #4294967295
 800d3b8:	d100      	bne.n	800d3bc <memcpy+0xc>
 800d3ba:	4770      	bx	lr
 800d3bc:	b510      	push	{r4, lr}
 800d3be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d3c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d3c6:	4291      	cmp	r1, r2
 800d3c8:	d1f9      	bne.n	800d3be <memcpy+0xe>
 800d3ca:	bd10      	pop	{r4, pc}

0800d3cc <memset>:
 800d3cc:	4402      	add	r2, r0
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	4293      	cmp	r3, r2
 800d3d2:	d100      	bne.n	800d3d6 <memset+0xa>
 800d3d4:	4770      	bx	lr
 800d3d6:	f803 1b01 	strb.w	r1, [r3], #1
 800d3da:	e7f9      	b.n	800d3d0 <memset+0x4>

0800d3dc <sniprintf>:
 800d3dc:	b40c      	push	{r2, r3}
 800d3de:	b530      	push	{r4, r5, lr}
 800d3e0:	4b17      	ldr	r3, [pc, #92]	; (800d440 <sniprintf+0x64>)
 800d3e2:	1e0c      	subs	r4, r1, #0
 800d3e4:	681d      	ldr	r5, [r3, #0]
 800d3e6:	b09d      	sub	sp, #116	; 0x74
 800d3e8:	da08      	bge.n	800d3fc <sniprintf+0x20>
 800d3ea:	238b      	movs	r3, #139	; 0x8b
 800d3ec:	602b      	str	r3, [r5, #0]
 800d3ee:	f04f 30ff 	mov.w	r0, #4294967295
 800d3f2:	b01d      	add	sp, #116	; 0x74
 800d3f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d3f8:	b002      	add	sp, #8
 800d3fa:	4770      	bx	lr
 800d3fc:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d400:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d404:	bf14      	ite	ne
 800d406:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d40a:	4623      	moveq	r3, r4
 800d40c:	9304      	str	r3, [sp, #16]
 800d40e:	9307      	str	r3, [sp, #28]
 800d410:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d414:	9002      	str	r0, [sp, #8]
 800d416:	9006      	str	r0, [sp, #24]
 800d418:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d41c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d41e:	ab21      	add	r3, sp, #132	; 0x84
 800d420:	a902      	add	r1, sp, #8
 800d422:	4628      	mov	r0, r5
 800d424:	9301      	str	r3, [sp, #4]
 800d426:	f000 f8b7 	bl	800d598 <_svfiprintf_r>
 800d42a:	1c43      	adds	r3, r0, #1
 800d42c:	bfbc      	itt	lt
 800d42e:	238b      	movlt	r3, #139	; 0x8b
 800d430:	602b      	strlt	r3, [r5, #0]
 800d432:	2c00      	cmp	r4, #0
 800d434:	d0dd      	beq.n	800d3f2 <sniprintf+0x16>
 800d436:	9b02      	ldr	r3, [sp, #8]
 800d438:	2200      	movs	r2, #0
 800d43a:	701a      	strb	r2, [r3, #0]
 800d43c:	e7d9      	b.n	800d3f2 <sniprintf+0x16>
 800d43e:	bf00      	nop
 800d440:	20000038 	.word	0x20000038

0800d444 <siprintf>:
 800d444:	b40e      	push	{r1, r2, r3}
 800d446:	b500      	push	{lr}
 800d448:	b09c      	sub	sp, #112	; 0x70
 800d44a:	ab1d      	add	r3, sp, #116	; 0x74
 800d44c:	9002      	str	r0, [sp, #8]
 800d44e:	9006      	str	r0, [sp, #24]
 800d450:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d454:	4809      	ldr	r0, [pc, #36]	; (800d47c <siprintf+0x38>)
 800d456:	9107      	str	r1, [sp, #28]
 800d458:	9104      	str	r1, [sp, #16]
 800d45a:	4909      	ldr	r1, [pc, #36]	; (800d480 <siprintf+0x3c>)
 800d45c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d460:	9105      	str	r1, [sp, #20]
 800d462:	6800      	ldr	r0, [r0, #0]
 800d464:	9301      	str	r3, [sp, #4]
 800d466:	a902      	add	r1, sp, #8
 800d468:	f000 f896 	bl	800d598 <_svfiprintf_r>
 800d46c:	9b02      	ldr	r3, [sp, #8]
 800d46e:	2200      	movs	r2, #0
 800d470:	701a      	strb	r2, [r3, #0]
 800d472:	b01c      	add	sp, #112	; 0x70
 800d474:	f85d eb04 	ldr.w	lr, [sp], #4
 800d478:	b003      	add	sp, #12
 800d47a:	4770      	bx	lr
 800d47c:	20000038 	.word	0x20000038
 800d480:	ffff0208 	.word	0xffff0208

0800d484 <siscanf>:
 800d484:	b40e      	push	{r1, r2, r3}
 800d486:	b510      	push	{r4, lr}
 800d488:	b09f      	sub	sp, #124	; 0x7c
 800d48a:	ac21      	add	r4, sp, #132	; 0x84
 800d48c:	f44f 7101 	mov.w	r1, #516	; 0x204
 800d490:	f854 2b04 	ldr.w	r2, [r4], #4
 800d494:	9201      	str	r2, [sp, #4]
 800d496:	f8ad 101c 	strh.w	r1, [sp, #28]
 800d49a:	9004      	str	r0, [sp, #16]
 800d49c:	9008      	str	r0, [sp, #32]
 800d49e:	f7f2 feb7 	bl	8000210 <strlen>
 800d4a2:	4b0c      	ldr	r3, [pc, #48]	; (800d4d4 <siscanf+0x50>)
 800d4a4:	9005      	str	r0, [sp, #20]
 800d4a6:	9009      	str	r0, [sp, #36]	; 0x24
 800d4a8:	930d      	str	r3, [sp, #52]	; 0x34
 800d4aa:	480b      	ldr	r0, [pc, #44]	; (800d4d8 <siscanf+0x54>)
 800d4ac:	9a01      	ldr	r2, [sp, #4]
 800d4ae:	6800      	ldr	r0, [r0, #0]
 800d4b0:	9403      	str	r4, [sp, #12]
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	9311      	str	r3, [sp, #68]	; 0x44
 800d4b6:	9316      	str	r3, [sp, #88]	; 0x58
 800d4b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d4bc:	f8ad 301e 	strh.w	r3, [sp, #30]
 800d4c0:	a904      	add	r1, sp, #16
 800d4c2:	4623      	mov	r3, r4
 800d4c4:	f000 f9c2 	bl	800d84c <__ssvfiscanf_r>
 800d4c8:	b01f      	add	sp, #124	; 0x7c
 800d4ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d4ce:	b003      	add	sp, #12
 800d4d0:	4770      	bx	lr
 800d4d2:	bf00      	nop
 800d4d4:	0800d4dd 	.word	0x0800d4dd
 800d4d8:	20000038 	.word	0x20000038

0800d4dc <__seofread>:
 800d4dc:	2000      	movs	r0, #0
 800d4de:	4770      	bx	lr

0800d4e0 <__ssputs_r>:
 800d4e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4e4:	688e      	ldr	r6, [r1, #8]
 800d4e6:	429e      	cmp	r6, r3
 800d4e8:	4682      	mov	sl, r0
 800d4ea:	460c      	mov	r4, r1
 800d4ec:	4690      	mov	r8, r2
 800d4ee:	461f      	mov	r7, r3
 800d4f0:	d838      	bhi.n	800d564 <__ssputs_r+0x84>
 800d4f2:	898a      	ldrh	r2, [r1, #12]
 800d4f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d4f8:	d032      	beq.n	800d560 <__ssputs_r+0x80>
 800d4fa:	6825      	ldr	r5, [r4, #0]
 800d4fc:	6909      	ldr	r1, [r1, #16]
 800d4fe:	eba5 0901 	sub.w	r9, r5, r1
 800d502:	6965      	ldr	r5, [r4, #20]
 800d504:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d508:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d50c:	3301      	adds	r3, #1
 800d50e:	444b      	add	r3, r9
 800d510:	106d      	asrs	r5, r5, #1
 800d512:	429d      	cmp	r5, r3
 800d514:	bf38      	it	cc
 800d516:	461d      	movcc	r5, r3
 800d518:	0553      	lsls	r3, r2, #21
 800d51a:	d531      	bpl.n	800d580 <__ssputs_r+0xa0>
 800d51c:	4629      	mov	r1, r5
 800d51e:	f000 ffe5 	bl	800e4ec <_malloc_r>
 800d522:	4606      	mov	r6, r0
 800d524:	b950      	cbnz	r0, 800d53c <__ssputs_r+0x5c>
 800d526:	230c      	movs	r3, #12
 800d528:	f8ca 3000 	str.w	r3, [sl]
 800d52c:	89a3      	ldrh	r3, [r4, #12]
 800d52e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d532:	81a3      	strh	r3, [r4, #12]
 800d534:	f04f 30ff 	mov.w	r0, #4294967295
 800d538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d53c:	6921      	ldr	r1, [r4, #16]
 800d53e:	464a      	mov	r2, r9
 800d540:	f7ff ff36 	bl	800d3b0 <memcpy>
 800d544:	89a3      	ldrh	r3, [r4, #12]
 800d546:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d54a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d54e:	81a3      	strh	r3, [r4, #12]
 800d550:	6126      	str	r6, [r4, #16]
 800d552:	6165      	str	r5, [r4, #20]
 800d554:	444e      	add	r6, r9
 800d556:	eba5 0509 	sub.w	r5, r5, r9
 800d55a:	6026      	str	r6, [r4, #0]
 800d55c:	60a5      	str	r5, [r4, #8]
 800d55e:	463e      	mov	r6, r7
 800d560:	42be      	cmp	r6, r7
 800d562:	d900      	bls.n	800d566 <__ssputs_r+0x86>
 800d564:	463e      	mov	r6, r7
 800d566:	6820      	ldr	r0, [r4, #0]
 800d568:	4632      	mov	r2, r6
 800d56a:	4641      	mov	r1, r8
 800d56c:	f000 ff38 	bl	800e3e0 <memmove>
 800d570:	68a3      	ldr	r3, [r4, #8]
 800d572:	1b9b      	subs	r3, r3, r6
 800d574:	60a3      	str	r3, [r4, #8]
 800d576:	6823      	ldr	r3, [r4, #0]
 800d578:	4433      	add	r3, r6
 800d57a:	6023      	str	r3, [r4, #0]
 800d57c:	2000      	movs	r0, #0
 800d57e:	e7db      	b.n	800d538 <__ssputs_r+0x58>
 800d580:	462a      	mov	r2, r5
 800d582:	f001 f827 	bl	800e5d4 <_realloc_r>
 800d586:	4606      	mov	r6, r0
 800d588:	2800      	cmp	r0, #0
 800d58a:	d1e1      	bne.n	800d550 <__ssputs_r+0x70>
 800d58c:	6921      	ldr	r1, [r4, #16]
 800d58e:	4650      	mov	r0, sl
 800d590:	f000 ff40 	bl	800e414 <_free_r>
 800d594:	e7c7      	b.n	800d526 <__ssputs_r+0x46>
	...

0800d598 <_svfiprintf_r>:
 800d598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d59c:	4698      	mov	r8, r3
 800d59e:	898b      	ldrh	r3, [r1, #12]
 800d5a0:	061b      	lsls	r3, r3, #24
 800d5a2:	b09d      	sub	sp, #116	; 0x74
 800d5a4:	4607      	mov	r7, r0
 800d5a6:	460d      	mov	r5, r1
 800d5a8:	4614      	mov	r4, r2
 800d5aa:	d50e      	bpl.n	800d5ca <_svfiprintf_r+0x32>
 800d5ac:	690b      	ldr	r3, [r1, #16]
 800d5ae:	b963      	cbnz	r3, 800d5ca <_svfiprintf_r+0x32>
 800d5b0:	2140      	movs	r1, #64	; 0x40
 800d5b2:	f000 ff9b 	bl	800e4ec <_malloc_r>
 800d5b6:	6028      	str	r0, [r5, #0]
 800d5b8:	6128      	str	r0, [r5, #16]
 800d5ba:	b920      	cbnz	r0, 800d5c6 <_svfiprintf_r+0x2e>
 800d5bc:	230c      	movs	r3, #12
 800d5be:	603b      	str	r3, [r7, #0]
 800d5c0:	f04f 30ff 	mov.w	r0, #4294967295
 800d5c4:	e0d1      	b.n	800d76a <_svfiprintf_r+0x1d2>
 800d5c6:	2340      	movs	r3, #64	; 0x40
 800d5c8:	616b      	str	r3, [r5, #20]
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	9309      	str	r3, [sp, #36]	; 0x24
 800d5ce:	2320      	movs	r3, #32
 800d5d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d5d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800d5d8:	2330      	movs	r3, #48	; 0x30
 800d5da:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d784 <_svfiprintf_r+0x1ec>
 800d5de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d5e2:	f04f 0901 	mov.w	r9, #1
 800d5e6:	4623      	mov	r3, r4
 800d5e8:	469a      	mov	sl, r3
 800d5ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d5ee:	b10a      	cbz	r2, 800d5f4 <_svfiprintf_r+0x5c>
 800d5f0:	2a25      	cmp	r2, #37	; 0x25
 800d5f2:	d1f9      	bne.n	800d5e8 <_svfiprintf_r+0x50>
 800d5f4:	ebba 0b04 	subs.w	fp, sl, r4
 800d5f8:	d00b      	beq.n	800d612 <_svfiprintf_r+0x7a>
 800d5fa:	465b      	mov	r3, fp
 800d5fc:	4622      	mov	r2, r4
 800d5fe:	4629      	mov	r1, r5
 800d600:	4638      	mov	r0, r7
 800d602:	f7ff ff6d 	bl	800d4e0 <__ssputs_r>
 800d606:	3001      	adds	r0, #1
 800d608:	f000 80aa 	beq.w	800d760 <_svfiprintf_r+0x1c8>
 800d60c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d60e:	445a      	add	r2, fp
 800d610:	9209      	str	r2, [sp, #36]	; 0x24
 800d612:	f89a 3000 	ldrb.w	r3, [sl]
 800d616:	2b00      	cmp	r3, #0
 800d618:	f000 80a2 	beq.w	800d760 <_svfiprintf_r+0x1c8>
 800d61c:	2300      	movs	r3, #0
 800d61e:	f04f 32ff 	mov.w	r2, #4294967295
 800d622:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d626:	f10a 0a01 	add.w	sl, sl, #1
 800d62a:	9304      	str	r3, [sp, #16]
 800d62c:	9307      	str	r3, [sp, #28]
 800d62e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d632:	931a      	str	r3, [sp, #104]	; 0x68
 800d634:	4654      	mov	r4, sl
 800d636:	2205      	movs	r2, #5
 800d638:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d63c:	4851      	ldr	r0, [pc, #324]	; (800d784 <_svfiprintf_r+0x1ec>)
 800d63e:	f7f2 fdef 	bl	8000220 <memchr>
 800d642:	9a04      	ldr	r2, [sp, #16]
 800d644:	b9d8      	cbnz	r0, 800d67e <_svfiprintf_r+0xe6>
 800d646:	06d0      	lsls	r0, r2, #27
 800d648:	bf44      	itt	mi
 800d64a:	2320      	movmi	r3, #32
 800d64c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d650:	0711      	lsls	r1, r2, #28
 800d652:	bf44      	itt	mi
 800d654:	232b      	movmi	r3, #43	; 0x2b
 800d656:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d65a:	f89a 3000 	ldrb.w	r3, [sl]
 800d65e:	2b2a      	cmp	r3, #42	; 0x2a
 800d660:	d015      	beq.n	800d68e <_svfiprintf_r+0xf6>
 800d662:	9a07      	ldr	r2, [sp, #28]
 800d664:	4654      	mov	r4, sl
 800d666:	2000      	movs	r0, #0
 800d668:	f04f 0c0a 	mov.w	ip, #10
 800d66c:	4621      	mov	r1, r4
 800d66e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d672:	3b30      	subs	r3, #48	; 0x30
 800d674:	2b09      	cmp	r3, #9
 800d676:	d94e      	bls.n	800d716 <_svfiprintf_r+0x17e>
 800d678:	b1b0      	cbz	r0, 800d6a8 <_svfiprintf_r+0x110>
 800d67a:	9207      	str	r2, [sp, #28]
 800d67c:	e014      	b.n	800d6a8 <_svfiprintf_r+0x110>
 800d67e:	eba0 0308 	sub.w	r3, r0, r8
 800d682:	fa09 f303 	lsl.w	r3, r9, r3
 800d686:	4313      	orrs	r3, r2
 800d688:	9304      	str	r3, [sp, #16]
 800d68a:	46a2      	mov	sl, r4
 800d68c:	e7d2      	b.n	800d634 <_svfiprintf_r+0x9c>
 800d68e:	9b03      	ldr	r3, [sp, #12]
 800d690:	1d19      	adds	r1, r3, #4
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	9103      	str	r1, [sp, #12]
 800d696:	2b00      	cmp	r3, #0
 800d698:	bfbb      	ittet	lt
 800d69a:	425b      	neglt	r3, r3
 800d69c:	f042 0202 	orrlt.w	r2, r2, #2
 800d6a0:	9307      	strge	r3, [sp, #28]
 800d6a2:	9307      	strlt	r3, [sp, #28]
 800d6a4:	bfb8      	it	lt
 800d6a6:	9204      	strlt	r2, [sp, #16]
 800d6a8:	7823      	ldrb	r3, [r4, #0]
 800d6aa:	2b2e      	cmp	r3, #46	; 0x2e
 800d6ac:	d10c      	bne.n	800d6c8 <_svfiprintf_r+0x130>
 800d6ae:	7863      	ldrb	r3, [r4, #1]
 800d6b0:	2b2a      	cmp	r3, #42	; 0x2a
 800d6b2:	d135      	bne.n	800d720 <_svfiprintf_r+0x188>
 800d6b4:	9b03      	ldr	r3, [sp, #12]
 800d6b6:	1d1a      	adds	r2, r3, #4
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	9203      	str	r2, [sp, #12]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	bfb8      	it	lt
 800d6c0:	f04f 33ff 	movlt.w	r3, #4294967295
 800d6c4:	3402      	adds	r4, #2
 800d6c6:	9305      	str	r3, [sp, #20]
 800d6c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d794 <_svfiprintf_r+0x1fc>
 800d6cc:	7821      	ldrb	r1, [r4, #0]
 800d6ce:	2203      	movs	r2, #3
 800d6d0:	4650      	mov	r0, sl
 800d6d2:	f7f2 fda5 	bl	8000220 <memchr>
 800d6d6:	b140      	cbz	r0, 800d6ea <_svfiprintf_r+0x152>
 800d6d8:	2340      	movs	r3, #64	; 0x40
 800d6da:	eba0 000a 	sub.w	r0, r0, sl
 800d6de:	fa03 f000 	lsl.w	r0, r3, r0
 800d6e2:	9b04      	ldr	r3, [sp, #16]
 800d6e4:	4303      	orrs	r3, r0
 800d6e6:	3401      	adds	r4, #1
 800d6e8:	9304      	str	r3, [sp, #16]
 800d6ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6ee:	4826      	ldr	r0, [pc, #152]	; (800d788 <_svfiprintf_r+0x1f0>)
 800d6f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d6f4:	2206      	movs	r2, #6
 800d6f6:	f7f2 fd93 	bl	8000220 <memchr>
 800d6fa:	2800      	cmp	r0, #0
 800d6fc:	d038      	beq.n	800d770 <_svfiprintf_r+0x1d8>
 800d6fe:	4b23      	ldr	r3, [pc, #140]	; (800d78c <_svfiprintf_r+0x1f4>)
 800d700:	bb1b      	cbnz	r3, 800d74a <_svfiprintf_r+0x1b2>
 800d702:	9b03      	ldr	r3, [sp, #12]
 800d704:	3307      	adds	r3, #7
 800d706:	f023 0307 	bic.w	r3, r3, #7
 800d70a:	3308      	adds	r3, #8
 800d70c:	9303      	str	r3, [sp, #12]
 800d70e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d710:	4433      	add	r3, r6
 800d712:	9309      	str	r3, [sp, #36]	; 0x24
 800d714:	e767      	b.n	800d5e6 <_svfiprintf_r+0x4e>
 800d716:	fb0c 3202 	mla	r2, ip, r2, r3
 800d71a:	460c      	mov	r4, r1
 800d71c:	2001      	movs	r0, #1
 800d71e:	e7a5      	b.n	800d66c <_svfiprintf_r+0xd4>
 800d720:	2300      	movs	r3, #0
 800d722:	3401      	adds	r4, #1
 800d724:	9305      	str	r3, [sp, #20]
 800d726:	4619      	mov	r1, r3
 800d728:	f04f 0c0a 	mov.w	ip, #10
 800d72c:	4620      	mov	r0, r4
 800d72e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d732:	3a30      	subs	r2, #48	; 0x30
 800d734:	2a09      	cmp	r2, #9
 800d736:	d903      	bls.n	800d740 <_svfiprintf_r+0x1a8>
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d0c5      	beq.n	800d6c8 <_svfiprintf_r+0x130>
 800d73c:	9105      	str	r1, [sp, #20]
 800d73e:	e7c3      	b.n	800d6c8 <_svfiprintf_r+0x130>
 800d740:	fb0c 2101 	mla	r1, ip, r1, r2
 800d744:	4604      	mov	r4, r0
 800d746:	2301      	movs	r3, #1
 800d748:	e7f0      	b.n	800d72c <_svfiprintf_r+0x194>
 800d74a:	ab03      	add	r3, sp, #12
 800d74c:	9300      	str	r3, [sp, #0]
 800d74e:	462a      	mov	r2, r5
 800d750:	4b0f      	ldr	r3, [pc, #60]	; (800d790 <_svfiprintf_r+0x1f8>)
 800d752:	a904      	add	r1, sp, #16
 800d754:	4638      	mov	r0, r7
 800d756:	f3af 8000 	nop.w
 800d75a:	1c42      	adds	r2, r0, #1
 800d75c:	4606      	mov	r6, r0
 800d75e:	d1d6      	bne.n	800d70e <_svfiprintf_r+0x176>
 800d760:	89ab      	ldrh	r3, [r5, #12]
 800d762:	065b      	lsls	r3, r3, #25
 800d764:	f53f af2c 	bmi.w	800d5c0 <_svfiprintf_r+0x28>
 800d768:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d76a:	b01d      	add	sp, #116	; 0x74
 800d76c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d770:	ab03      	add	r3, sp, #12
 800d772:	9300      	str	r3, [sp, #0]
 800d774:	462a      	mov	r2, r5
 800d776:	4b06      	ldr	r3, [pc, #24]	; (800d790 <_svfiprintf_r+0x1f8>)
 800d778:	a904      	add	r1, sp, #16
 800d77a:	4638      	mov	r0, r7
 800d77c:	f000 fa4c 	bl	800dc18 <_printf_i>
 800d780:	e7eb      	b.n	800d75a <_svfiprintf_r+0x1c2>
 800d782:	bf00      	nop
 800d784:	0800f2fc 	.word	0x0800f2fc
 800d788:	0800f306 	.word	0x0800f306
 800d78c:	00000000 	.word	0x00000000
 800d790:	0800d4e1 	.word	0x0800d4e1
 800d794:	0800f302 	.word	0x0800f302

0800d798 <_sungetc_r>:
 800d798:	b538      	push	{r3, r4, r5, lr}
 800d79a:	1c4b      	adds	r3, r1, #1
 800d79c:	4614      	mov	r4, r2
 800d79e:	d103      	bne.n	800d7a8 <_sungetc_r+0x10>
 800d7a0:	f04f 35ff 	mov.w	r5, #4294967295
 800d7a4:	4628      	mov	r0, r5
 800d7a6:	bd38      	pop	{r3, r4, r5, pc}
 800d7a8:	8993      	ldrh	r3, [r2, #12]
 800d7aa:	f023 0320 	bic.w	r3, r3, #32
 800d7ae:	8193      	strh	r3, [r2, #12]
 800d7b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d7b2:	6852      	ldr	r2, [r2, #4]
 800d7b4:	b2cd      	uxtb	r5, r1
 800d7b6:	b18b      	cbz	r3, 800d7dc <_sungetc_r+0x44>
 800d7b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d7ba:	4293      	cmp	r3, r2
 800d7bc:	dd08      	ble.n	800d7d0 <_sungetc_r+0x38>
 800d7be:	6823      	ldr	r3, [r4, #0]
 800d7c0:	1e5a      	subs	r2, r3, #1
 800d7c2:	6022      	str	r2, [r4, #0]
 800d7c4:	f803 5c01 	strb.w	r5, [r3, #-1]
 800d7c8:	6863      	ldr	r3, [r4, #4]
 800d7ca:	3301      	adds	r3, #1
 800d7cc:	6063      	str	r3, [r4, #4]
 800d7ce:	e7e9      	b.n	800d7a4 <_sungetc_r+0xc>
 800d7d0:	4621      	mov	r1, r4
 800d7d2:	f000 fdc9 	bl	800e368 <__submore>
 800d7d6:	2800      	cmp	r0, #0
 800d7d8:	d0f1      	beq.n	800d7be <_sungetc_r+0x26>
 800d7da:	e7e1      	b.n	800d7a0 <_sungetc_r+0x8>
 800d7dc:	6921      	ldr	r1, [r4, #16]
 800d7de:	6823      	ldr	r3, [r4, #0]
 800d7e0:	b151      	cbz	r1, 800d7f8 <_sungetc_r+0x60>
 800d7e2:	4299      	cmp	r1, r3
 800d7e4:	d208      	bcs.n	800d7f8 <_sungetc_r+0x60>
 800d7e6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800d7ea:	42a9      	cmp	r1, r5
 800d7ec:	d104      	bne.n	800d7f8 <_sungetc_r+0x60>
 800d7ee:	3b01      	subs	r3, #1
 800d7f0:	3201      	adds	r2, #1
 800d7f2:	6023      	str	r3, [r4, #0]
 800d7f4:	6062      	str	r2, [r4, #4]
 800d7f6:	e7d5      	b.n	800d7a4 <_sungetc_r+0xc>
 800d7f8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800d7fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d800:	6363      	str	r3, [r4, #52]	; 0x34
 800d802:	2303      	movs	r3, #3
 800d804:	63a3      	str	r3, [r4, #56]	; 0x38
 800d806:	4623      	mov	r3, r4
 800d808:	f803 5f46 	strb.w	r5, [r3, #70]!
 800d80c:	6023      	str	r3, [r4, #0]
 800d80e:	2301      	movs	r3, #1
 800d810:	e7dc      	b.n	800d7cc <_sungetc_r+0x34>

0800d812 <__ssrefill_r>:
 800d812:	b510      	push	{r4, lr}
 800d814:	460c      	mov	r4, r1
 800d816:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d818:	b169      	cbz	r1, 800d836 <__ssrefill_r+0x24>
 800d81a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d81e:	4299      	cmp	r1, r3
 800d820:	d001      	beq.n	800d826 <__ssrefill_r+0x14>
 800d822:	f000 fdf7 	bl	800e414 <_free_r>
 800d826:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d828:	6063      	str	r3, [r4, #4]
 800d82a:	2000      	movs	r0, #0
 800d82c:	6360      	str	r0, [r4, #52]	; 0x34
 800d82e:	b113      	cbz	r3, 800d836 <__ssrefill_r+0x24>
 800d830:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d832:	6023      	str	r3, [r4, #0]
 800d834:	bd10      	pop	{r4, pc}
 800d836:	6923      	ldr	r3, [r4, #16]
 800d838:	6023      	str	r3, [r4, #0]
 800d83a:	2300      	movs	r3, #0
 800d83c:	6063      	str	r3, [r4, #4]
 800d83e:	89a3      	ldrh	r3, [r4, #12]
 800d840:	f043 0320 	orr.w	r3, r3, #32
 800d844:	81a3      	strh	r3, [r4, #12]
 800d846:	f04f 30ff 	mov.w	r0, #4294967295
 800d84a:	e7f3      	b.n	800d834 <__ssrefill_r+0x22>

0800d84c <__ssvfiscanf_r>:
 800d84c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d850:	460c      	mov	r4, r1
 800d852:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800d856:	2100      	movs	r1, #0
 800d858:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800d85c:	49a6      	ldr	r1, [pc, #664]	; (800daf8 <__ssvfiscanf_r+0x2ac>)
 800d85e:	91a0      	str	r1, [sp, #640]	; 0x280
 800d860:	f10d 0804 	add.w	r8, sp, #4
 800d864:	49a5      	ldr	r1, [pc, #660]	; (800dafc <__ssvfiscanf_r+0x2b0>)
 800d866:	4fa6      	ldr	r7, [pc, #664]	; (800db00 <__ssvfiscanf_r+0x2b4>)
 800d868:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800db04 <__ssvfiscanf_r+0x2b8>
 800d86c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800d870:	4606      	mov	r6, r0
 800d872:	91a1      	str	r1, [sp, #644]	; 0x284
 800d874:	9300      	str	r3, [sp, #0]
 800d876:	7813      	ldrb	r3, [r2, #0]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	f000 815a 	beq.w	800db32 <__ssvfiscanf_r+0x2e6>
 800d87e:	5dd9      	ldrb	r1, [r3, r7]
 800d880:	f011 0108 	ands.w	r1, r1, #8
 800d884:	f102 0501 	add.w	r5, r2, #1
 800d888:	d019      	beq.n	800d8be <__ssvfiscanf_r+0x72>
 800d88a:	6863      	ldr	r3, [r4, #4]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	dd0f      	ble.n	800d8b0 <__ssvfiscanf_r+0x64>
 800d890:	6823      	ldr	r3, [r4, #0]
 800d892:	781a      	ldrb	r2, [r3, #0]
 800d894:	5cba      	ldrb	r2, [r7, r2]
 800d896:	0712      	lsls	r2, r2, #28
 800d898:	d401      	bmi.n	800d89e <__ssvfiscanf_r+0x52>
 800d89a:	462a      	mov	r2, r5
 800d89c:	e7eb      	b.n	800d876 <__ssvfiscanf_r+0x2a>
 800d89e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d8a0:	3201      	adds	r2, #1
 800d8a2:	9245      	str	r2, [sp, #276]	; 0x114
 800d8a4:	6862      	ldr	r2, [r4, #4]
 800d8a6:	3301      	adds	r3, #1
 800d8a8:	3a01      	subs	r2, #1
 800d8aa:	6062      	str	r2, [r4, #4]
 800d8ac:	6023      	str	r3, [r4, #0]
 800d8ae:	e7ec      	b.n	800d88a <__ssvfiscanf_r+0x3e>
 800d8b0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d8b2:	4621      	mov	r1, r4
 800d8b4:	4630      	mov	r0, r6
 800d8b6:	4798      	blx	r3
 800d8b8:	2800      	cmp	r0, #0
 800d8ba:	d0e9      	beq.n	800d890 <__ssvfiscanf_r+0x44>
 800d8bc:	e7ed      	b.n	800d89a <__ssvfiscanf_r+0x4e>
 800d8be:	2b25      	cmp	r3, #37	; 0x25
 800d8c0:	d012      	beq.n	800d8e8 <__ssvfiscanf_r+0x9c>
 800d8c2:	469a      	mov	sl, r3
 800d8c4:	6863      	ldr	r3, [r4, #4]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	f340 8091 	ble.w	800d9ee <__ssvfiscanf_r+0x1a2>
 800d8cc:	6822      	ldr	r2, [r4, #0]
 800d8ce:	7813      	ldrb	r3, [r2, #0]
 800d8d0:	4553      	cmp	r3, sl
 800d8d2:	f040 812e 	bne.w	800db32 <__ssvfiscanf_r+0x2e6>
 800d8d6:	6863      	ldr	r3, [r4, #4]
 800d8d8:	3b01      	subs	r3, #1
 800d8da:	6063      	str	r3, [r4, #4]
 800d8dc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800d8de:	3201      	adds	r2, #1
 800d8e0:	3301      	adds	r3, #1
 800d8e2:	6022      	str	r2, [r4, #0]
 800d8e4:	9345      	str	r3, [sp, #276]	; 0x114
 800d8e6:	e7d8      	b.n	800d89a <__ssvfiscanf_r+0x4e>
 800d8e8:	9141      	str	r1, [sp, #260]	; 0x104
 800d8ea:	9143      	str	r1, [sp, #268]	; 0x10c
 800d8ec:	7853      	ldrb	r3, [r2, #1]
 800d8ee:	2b2a      	cmp	r3, #42	; 0x2a
 800d8f0:	bf02      	ittt	eq
 800d8f2:	2310      	moveq	r3, #16
 800d8f4:	1c95      	addeq	r5, r2, #2
 800d8f6:	9341      	streq	r3, [sp, #260]	; 0x104
 800d8f8:	220a      	movs	r2, #10
 800d8fa:	46aa      	mov	sl, r5
 800d8fc:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800d900:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800d904:	2b09      	cmp	r3, #9
 800d906:	d91d      	bls.n	800d944 <__ssvfiscanf_r+0xf8>
 800d908:	487e      	ldr	r0, [pc, #504]	; (800db04 <__ssvfiscanf_r+0x2b8>)
 800d90a:	2203      	movs	r2, #3
 800d90c:	f7f2 fc88 	bl	8000220 <memchr>
 800d910:	b140      	cbz	r0, 800d924 <__ssvfiscanf_r+0xd8>
 800d912:	2301      	movs	r3, #1
 800d914:	eba0 0009 	sub.w	r0, r0, r9
 800d918:	fa03 f000 	lsl.w	r0, r3, r0
 800d91c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d91e:	4318      	orrs	r0, r3
 800d920:	9041      	str	r0, [sp, #260]	; 0x104
 800d922:	4655      	mov	r5, sl
 800d924:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d928:	2b78      	cmp	r3, #120	; 0x78
 800d92a:	d806      	bhi.n	800d93a <__ssvfiscanf_r+0xee>
 800d92c:	2b57      	cmp	r3, #87	; 0x57
 800d92e:	d810      	bhi.n	800d952 <__ssvfiscanf_r+0x106>
 800d930:	2b25      	cmp	r3, #37	; 0x25
 800d932:	d0c6      	beq.n	800d8c2 <__ssvfiscanf_r+0x76>
 800d934:	d856      	bhi.n	800d9e4 <__ssvfiscanf_r+0x198>
 800d936:	2b00      	cmp	r3, #0
 800d938:	d064      	beq.n	800da04 <__ssvfiscanf_r+0x1b8>
 800d93a:	2303      	movs	r3, #3
 800d93c:	9347      	str	r3, [sp, #284]	; 0x11c
 800d93e:	230a      	movs	r3, #10
 800d940:	9342      	str	r3, [sp, #264]	; 0x108
 800d942:	e071      	b.n	800da28 <__ssvfiscanf_r+0x1dc>
 800d944:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800d946:	fb02 1103 	mla	r1, r2, r3, r1
 800d94a:	3930      	subs	r1, #48	; 0x30
 800d94c:	9143      	str	r1, [sp, #268]	; 0x10c
 800d94e:	4655      	mov	r5, sl
 800d950:	e7d3      	b.n	800d8fa <__ssvfiscanf_r+0xae>
 800d952:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800d956:	2a20      	cmp	r2, #32
 800d958:	d8ef      	bhi.n	800d93a <__ssvfiscanf_r+0xee>
 800d95a:	a101      	add	r1, pc, #4	; (adr r1, 800d960 <__ssvfiscanf_r+0x114>)
 800d95c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d960:	0800da13 	.word	0x0800da13
 800d964:	0800d93b 	.word	0x0800d93b
 800d968:	0800d93b 	.word	0x0800d93b
 800d96c:	0800da71 	.word	0x0800da71
 800d970:	0800d93b 	.word	0x0800d93b
 800d974:	0800d93b 	.word	0x0800d93b
 800d978:	0800d93b 	.word	0x0800d93b
 800d97c:	0800d93b 	.word	0x0800d93b
 800d980:	0800d93b 	.word	0x0800d93b
 800d984:	0800d93b 	.word	0x0800d93b
 800d988:	0800d93b 	.word	0x0800d93b
 800d98c:	0800da87 	.word	0x0800da87
 800d990:	0800da5d 	.word	0x0800da5d
 800d994:	0800d9eb 	.word	0x0800d9eb
 800d998:	0800d9eb 	.word	0x0800d9eb
 800d99c:	0800d9eb 	.word	0x0800d9eb
 800d9a0:	0800d93b 	.word	0x0800d93b
 800d9a4:	0800da61 	.word	0x0800da61
 800d9a8:	0800d93b 	.word	0x0800d93b
 800d9ac:	0800d93b 	.word	0x0800d93b
 800d9b0:	0800d93b 	.word	0x0800d93b
 800d9b4:	0800d93b 	.word	0x0800d93b
 800d9b8:	0800da97 	.word	0x0800da97
 800d9bc:	0800da69 	.word	0x0800da69
 800d9c0:	0800da0b 	.word	0x0800da0b
 800d9c4:	0800d93b 	.word	0x0800d93b
 800d9c8:	0800d93b 	.word	0x0800d93b
 800d9cc:	0800da93 	.word	0x0800da93
 800d9d0:	0800d93b 	.word	0x0800d93b
 800d9d4:	0800da5d 	.word	0x0800da5d
 800d9d8:	0800d93b 	.word	0x0800d93b
 800d9dc:	0800d93b 	.word	0x0800d93b
 800d9e0:	0800da13 	.word	0x0800da13
 800d9e4:	3b45      	subs	r3, #69	; 0x45
 800d9e6:	2b02      	cmp	r3, #2
 800d9e8:	d8a7      	bhi.n	800d93a <__ssvfiscanf_r+0xee>
 800d9ea:	2305      	movs	r3, #5
 800d9ec:	e01b      	b.n	800da26 <__ssvfiscanf_r+0x1da>
 800d9ee:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d9f0:	4621      	mov	r1, r4
 800d9f2:	4630      	mov	r0, r6
 800d9f4:	4798      	blx	r3
 800d9f6:	2800      	cmp	r0, #0
 800d9f8:	f43f af68 	beq.w	800d8cc <__ssvfiscanf_r+0x80>
 800d9fc:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d9fe:	2800      	cmp	r0, #0
 800da00:	f040 808d 	bne.w	800db1e <__ssvfiscanf_r+0x2d2>
 800da04:	f04f 30ff 	mov.w	r0, #4294967295
 800da08:	e08f      	b.n	800db2a <__ssvfiscanf_r+0x2de>
 800da0a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800da0c:	f042 0220 	orr.w	r2, r2, #32
 800da10:	9241      	str	r2, [sp, #260]	; 0x104
 800da12:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800da14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800da18:	9241      	str	r2, [sp, #260]	; 0x104
 800da1a:	2210      	movs	r2, #16
 800da1c:	2b6f      	cmp	r3, #111	; 0x6f
 800da1e:	9242      	str	r2, [sp, #264]	; 0x108
 800da20:	bf34      	ite	cc
 800da22:	2303      	movcc	r3, #3
 800da24:	2304      	movcs	r3, #4
 800da26:	9347      	str	r3, [sp, #284]	; 0x11c
 800da28:	6863      	ldr	r3, [r4, #4]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	dd42      	ble.n	800dab4 <__ssvfiscanf_r+0x268>
 800da2e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800da30:	0659      	lsls	r1, r3, #25
 800da32:	d404      	bmi.n	800da3e <__ssvfiscanf_r+0x1f2>
 800da34:	6823      	ldr	r3, [r4, #0]
 800da36:	781a      	ldrb	r2, [r3, #0]
 800da38:	5cba      	ldrb	r2, [r7, r2]
 800da3a:	0712      	lsls	r2, r2, #28
 800da3c:	d441      	bmi.n	800dac2 <__ssvfiscanf_r+0x276>
 800da3e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800da40:	2b02      	cmp	r3, #2
 800da42:	dc50      	bgt.n	800dae6 <__ssvfiscanf_r+0x29a>
 800da44:	466b      	mov	r3, sp
 800da46:	4622      	mov	r2, r4
 800da48:	a941      	add	r1, sp, #260	; 0x104
 800da4a:	4630      	mov	r0, r6
 800da4c:	f000 fa0a 	bl	800de64 <_scanf_chars>
 800da50:	2801      	cmp	r0, #1
 800da52:	d06e      	beq.n	800db32 <__ssvfiscanf_r+0x2e6>
 800da54:	2802      	cmp	r0, #2
 800da56:	f47f af20 	bne.w	800d89a <__ssvfiscanf_r+0x4e>
 800da5a:	e7cf      	b.n	800d9fc <__ssvfiscanf_r+0x1b0>
 800da5c:	220a      	movs	r2, #10
 800da5e:	e7dd      	b.n	800da1c <__ssvfiscanf_r+0x1d0>
 800da60:	2300      	movs	r3, #0
 800da62:	9342      	str	r3, [sp, #264]	; 0x108
 800da64:	2303      	movs	r3, #3
 800da66:	e7de      	b.n	800da26 <__ssvfiscanf_r+0x1da>
 800da68:	2308      	movs	r3, #8
 800da6a:	9342      	str	r3, [sp, #264]	; 0x108
 800da6c:	2304      	movs	r3, #4
 800da6e:	e7da      	b.n	800da26 <__ssvfiscanf_r+0x1da>
 800da70:	4629      	mov	r1, r5
 800da72:	4640      	mov	r0, r8
 800da74:	f000 fb48 	bl	800e108 <__sccl>
 800da78:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800da7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da7e:	9341      	str	r3, [sp, #260]	; 0x104
 800da80:	4605      	mov	r5, r0
 800da82:	2301      	movs	r3, #1
 800da84:	e7cf      	b.n	800da26 <__ssvfiscanf_r+0x1da>
 800da86:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800da88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da8c:	9341      	str	r3, [sp, #260]	; 0x104
 800da8e:	2300      	movs	r3, #0
 800da90:	e7c9      	b.n	800da26 <__ssvfiscanf_r+0x1da>
 800da92:	2302      	movs	r3, #2
 800da94:	e7c7      	b.n	800da26 <__ssvfiscanf_r+0x1da>
 800da96:	9841      	ldr	r0, [sp, #260]	; 0x104
 800da98:	06c3      	lsls	r3, r0, #27
 800da9a:	f53f aefe 	bmi.w	800d89a <__ssvfiscanf_r+0x4e>
 800da9e:	9b00      	ldr	r3, [sp, #0]
 800daa0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800daa2:	1d19      	adds	r1, r3, #4
 800daa4:	9100      	str	r1, [sp, #0]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	f010 0f01 	tst.w	r0, #1
 800daac:	bf14      	ite	ne
 800daae:	801a      	strhne	r2, [r3, #0]
 800dab0:	601a      	streq	r2, [r3, #0]
 800dab2:	e6f2      	b.n	800d89a <__ssvfiscanf_r+0x4e>
 800dab4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800dab6:	4621      	mov	r1, r4
 800dab8:	4630      	mov	r0, r6
 800daba:	4798      	blx	r3
 800dabc:	2800      	cmp	r0, #0
 800dabe:	d0b6      	beq.n	800da2e <__ssvfiscanf_r+0x1e2>
 800dac0:	e79c      	b.n	800d9fc <__ssvfiscanf_r+0x1b0>
 800dac2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800dac4:	3201      	adds	r2, #1
 800dac6:	9245      	str	r2, [sp, #276]	; 0x114
 800dac8:	6862      	ldr	r2, [r4, #4]
 800daca:	3a01      	subs	r2, #1
 800dacc:	2a00      	cmp	r2, #0
 800dace:	6062      	str	r2, [r4, #4]
 800dad0:	dd02      	ble.n	800dad8 <__ssvfiscanf_r+0x28c>
 800dad2:	3301      	adds	r3, #1
 800dad4:	6023      	str	r3, [r4, #0]
 800dad6:	e7ad      	b.n	800da34 <__ssvfiscanf_r+0x1e8>
 800dad8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800dada:	4621      	mov	r1, r4
 800dadc:	4630      	mov	r0, r6
 800dade:	4798      	blx	r3
 800dae0:	2800      	cmp	r0, #0
 800dae2:	d0a7      	beq.n	800da34 <__ssvfiscanf_r+0x1e8>
 800dae4:	e78a      	b.n	800d9fc <__ssvfiscanf_r+0x1b0>
 800dae6:	2b04      	cmp	r3, #4
 800dae8:	dc0e      	bgt.n	800db08 <__ssvfiscanf_r+0x2bc>
 800daea:	466b      	mov	r3, sp
 800daec:	4622      	mov	r2, r4
 800daee:	a941      	add	r1, sp, #260	; 0x104
 800daf0:	4630      	mov	r0, r6
 800daf2:	f000 fa11 	bl	800df18 <_scanf_i>
 800daf6:	e7ab      	b.n	800da50 <__ssvfiscanf_r+0x204>
 800daf8:	0800d799 	.word	0x0800d799
 800dafc:	0800d813 	.word	0x0800d813
 800db00:	0800f34b 	.word	0x0800f34b
 800db04:	0800f302 	.word	0x0800f302
 800db08:	4b0b      	ldr	r3, [pc, #44]	; (800db38 <__ssvfiscanf_r+0x2ec>)
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	f43f aec5 	beq.w	800d89a <__ssvfiscanf_r+0x4e>
 800db10:	466b      	mov	r3, sp
 800db12:	4622      	mov	r2, r4
 800db14:	a941      	add	r1, sp, #260	; 0x104
 800db16:	4630      	mov	r0, r6
 800db18:	f3af 8000 	nop.w
 800db1c:	e798      	b.n	800da50 <__ssvfiscanf_r+0x204>
 800db1e:	89a3      	ldrh	r3, [r4, #12]
 800db20:	f013 0f40 	tst.w	r3, #64	; 0x40
 800db24:	bf18      	it	ne
 800db26:	f04f 30ff 	movne.w	r0, #4294967295
 800db2a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800db2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db32:	9844      	ldr	r0, [sp, #272]	; 0x110
 800db34:	e7f9      	b.n	800db2a <__ssvfiscanf_r+0x2de>
 800db36:	bf00      	nop
 800db38:	00000000 	.word	0x00000000

0800db3c <_printf_common>:
 800db3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db40:	4616      	mov	r6, r2
 800db42:	4699      	mov	r9, r3
 800db44:	688a      	ldr	r2, [r1, #8]
 800db46:	690b      	ldr	r3, [r1, #16]
 800db48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800db4c:	4293      	cmp	r3, r2
 800db4e:	bfb8      	it	lt
 800db50:	4613      	movlt	r3, r2
 800db52:	6033      	str	r3, [r6, #0]
 800db54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800db58:	4607      	mov	r7, r0
 800db5a:	460c      	mov	r4, r1
 800db5c:	b10a      	cbz	r2, 800db62 <_printf_common+0x26>
 800db5e:	3301      	adds	r3, #1
 800db60:	6033      	str	r3, [r6, #0]
 800db62:	6823      	ldr	r3, [r4, #0]
 800db64:	0699      	lsls	r1, r3, #26
 800db66:	bf42      	ittt	mi
 800db68:	6833      	ldrmi	r3, [r6, #0]
 800db6a:	3302      	addmi	r3, #2
 800db6c:	6033      	strmi	r3, [r6, #0]
 800db6e:	6825      	ldr	r5, [r4, #0]
 800db70:	f015 0506 	ands.w	r5, r5, #6
 800db74:	d106      	bne.n	800db84 <_printf_common+0x48>
 800db76:	f104 0a19 	add.w	sl, r4, #25
 800db7a:	68e3      	ldr	r3, [r4, #12]
 800db7c:	6832      	ldr	r2, [r6, #0]
 800db7e:	1a9b      	subs	r3, r3, r2
 800db80:	42ab      	cmp	r3, r5
 800db82:	dc26      	bgt.n	800dbd2 <_printf_common+0x96>
 800db84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800db88:	1e13      	subs	r3, r2, #0
 800db8a:	6822      	ldr	r2, [r4, #0]
 800db8c:	bf18      	it	ne
 800db8e:	2301      	movne	r3, #1
 800db90:	0692      	lsls	r2, r2, #26
 800db92:	d42b      	bmi.n	800dbec <_printf_common+0xb0>
 800db94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800db98:	4649      	mov	r1, r9
 800db9a:	4638      	mov	r0, r7
 800db9c:	47c0      	blx	r8
 800db9e:	3001      	adds	r0, #1
 800dba0:	d01e      	beq.n	800dbe0 <_printf_common+0xa4>
 800dba2:	6823      	ldr	r3, [r4, #0]
 800dba4:	68e5      	ldr	r5, [r4, #12]
 800dba6:	6832      	ldr	r2, [r6, #0]
 800dba8:	f003 0306 	and.w	r3, r3, #6
 800dbac:	2b04      	cmp	r3, #4
 800dbae:	bf08      	it	eq
 800dbb0:	1aad      	subeq	r5, r5, r2
 800dbb2:	68a3      	ldr	r3, [r4, #8]
 800dbb4:	6922      	ldr	r2, [r4, #16]
 800dbb6:	bf0c      	ite	eq
 800dbb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dbbc:	2500      	movne	r5, #0
 800dbbe:	4293      	cmp	r3, r2
 800dbc0:	bfc4      	itt	gt
 800dbc2:	1a9b      	subgt	r3, r3, r2
 800dbc4:	18ed      	addgt	r5, r5, r3
 800dbc6:	2600      	movs	r6, #0
 800dbc8:	341a      	adds	r4, #26
 800dbca:	42b5      	cmp	r5, r6
 800dbcc:	d11a      	bne.n	800dc04 <_printf_common+0xc8>
 800dbce:	2000      	movs	r0, #0
 800dbd0:	e008      	b.n	800dbe4 <_printf_common+0xa8>
 800dbd2:	2301      	movs	r3, #1
 800dbd4:	4652      	mov	r2, sl
 800dbd6:	4649      	mov	r1, r9
 800dbd8:	4638      	mov	r0, r7
 800dbda:	47c0      	blx	r8
 800dbdc:	3001      	adds	r0, #1
 800dbde:	d103      	bne.n	800dbe8 <_printf_common+0xac>
 800dbe0:	f04f 30ff 	mov.w	r0, #4294967295
 800dbe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbe8:	3501      	adds	r5, #1
 800dbea:	e7c6      	b.n	800db7a <_printf_common+0x3e>
 800dbec:	18e1      	adds	r1, r4, r3
 800dbee:	1c5a      	adds	r2, r3, #1
 800dbf0:	2030      	movs	r0, #48	; 0x30
 800dbf2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dbf6:	4422      	add	r2, r4
 800dbf8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dbfc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dc00:	3302      	adds	r3, #2
 800dc02:	e7c7      	b.n	800db94 <_printf_common+0x58>
 800dc04:	2301      	movs	r3, #1
 800dc06:	4622      	mov	r2, r4
 800dc08:	4649      	mov	r1, r9
 800dc0a:	4638      	mov	r0, r7
 800dc0c:	47c0      	blx	r8
 800dc0e:	3001      	adds	r0, #1
 800dc10:	d0e6      	beq.n	800dbe0 <_printf_common+0xa4>
 800dc12:	3601      	adds	r6, #1
 800dc14:	e7d9      	b.n	800dbca <_printf_common+0x8e>
	...

0800dc18 <_printf_i>:
 800dc18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dc1c:	7e0f      	ldrb	r7, [r1, #24]
 800dc1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dc20:	2f78      	cmp	r7, #120	; 0x78
 800dc22:	4691      	mov	r9, r2
 800dc24:	4680      	mov	r8, r0
 800dc26:	460c      	mov	r4, r1
 800dc28:	469a      	mov	sl, r3
 800dc2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800dc2e:	d807      	bhi.n	800dc40 <_printf_i+0x28>
 800dc30:	2f62      	cmp	r7, #98	; 0x62
 800dc32:	d80a      	bhi.n	800dc4a <_printf_i+0x32>
 800dc34:	2f00      	cmp	r7, #0
 800dc36:	f000 80d8 	beq.w	800ddea <_printf_i+0x1d2>
 800dc3a:	2f58      	cmp	r7, #88	; 0x58
 800dc3c:	f000 80a3 	beq.w	800dd86 <_printf_i+0x16e>
 800dc40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dc44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dc48:	e03a      	b.n	800dcc0 <_printf_i+0xa8>
 800dc4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800dc4e:	2b15      	cmp	r3, #21
 800dc50:	d8f6      	bhi.n	800dc40 <_printf_i+0x28>
 800dc52:	a101      	add	r1, pc, #4	; (adr r1, 800dc58 <_printf_i+0x40>)
 800dc54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dc58:	0800dcb1 	.word	0x0800dcb1
 800dc5c:	0800dcc5 	.word	0x0800dcc5
 800dc60:	0800dc41 	.word	0x0800dc41
 800dc64:	0800dc41 	.word	0x0800dc41
 800dc68:	0800dc41 	.word	0x0800dc41
 800dc6c:	0800dc41 	.word	0x0800dc41
 800dc70:	0800dcc5 	.word	0x0800dcc5
 800dc74:	0800dc41 	.word	0x0800dc41
 800dc78:	0800dc41 	.word	0x0800dc41
 800dc7c:	0800dc41 	.word	0x0800dc41
 800dc80:	0800dc41 	.word	0x0800dc41
 800dc84:	0800ddd1 	.word	0x0800ddd1
 800dc88:	0800dcf5 	.word	0x0800dcf5
 800dc8c:	0800ddb3 	.word	0x0800ddb3
 800dc90:	0800dc41 	.word	0x0800dc41
 800dc94:	0800dc41 	.word	0x0800dc41
 800dc98:	0800ddf3 	.word	0x0800ddf3
 800dc9c:	0800dc41 	.word	0x0800dc41
 800dca0:	0800dcf5 	.word	0x0800dcf5
 800dca4:	0800dc41 	.word	0x0800dc41
 800dca8:	0800dc41 	.word	0x0800dc41
 800dcac:	0800ddbb 	.word	0x0800ddbb
 800dcb0:	682b      	ldr	r3, [r5, #0]
 800dcb2:	1d1a      	adds	r2, r3, #4
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	602a      	str	r2, [r5, #0]
 800dcb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dcbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dcc0:	2301      	movs	r3, #1
 800dcc2:	e0a3      	b.n	800de0c <_printf_i+0x1f4>
 800dcc4:	6820      	ldr	r0, [r4, #0]
 800dcc6:	6829      	ldr	r1, [r5, #0]
 800dcc8:	0606      	lsls	r6, r0, #24
 800dcca:	f101 0304 	add.w	r3, r1, #4
 800dcce:	d50a      	bpl.n	800dce6 <_printf_i+0xce>
 800dcd0:	680e      	ldr	r6, [r1, #0]
 800dcd2:	602b      	str	r3, [r5, #0]
 800dcd4:	2e00      	cmp	r6, #0
 800dcd6:	da03      	bge.n	800dce0 <_printf_i+0xc8>
 800dcd8:	232d      	movs	r3, #45	; 0x2d
 800dcda:	4276      	negs	r6, r6
 800dcdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dce0:	485e      	ldr	r0, [pc, #376]	; (800de5c <_printf_i+0x244>)
 800dce2:	230a      	movs	r3, #10
 800dce4:	e019      	b.n	800dd1a <_printf_i+0x102>
 800dce6:	680e      	ldr	r6, [r1, #0]
 800dce8:	602b      	str	r3, [r5, #0]
 800dcea:	f010 0f40 	tst.w	r0, #64	; 0x40
 800dcee:	bf18      	it	ne
 800dcf0:	b236      	sxthne	r6, r6
 800dcf2:	e7ef      	b.n	800dcd4 <_printf_i+0xbc>
 800dcf4:	682b      	ldr	r3, [r5, #0]
 800dcf6:	6820      	ldr	r0, [r4, #0]
 800dcf8:	1d19      	adds	r1, r3, #4
 800dcfa:	6029      	str	r1, [r5, #0]
 800dcfc:	0601      	lsls	r1, r0, #24
 800dcfe:	d501      	bpl.n	800dd04 <_printf_i+0xec>
 800dd00:	681e      	ldr	r6, [r3, #0]
 800dd02:	e002      	b.n	800dd0a <_printf_i+0xf2>
 800dd04:	0646      	lsls	r6, r0, #25
 800dd06:	d5fb      	bpl.n	800dd00 <_printf_i+0xe8>
 800dd08:	881e      	ldrh	r6, [r3, #0]
 800dd0a:	4854      	ldr	r0, [pc, #336]	; (800de5c <_printf_i+0x244>)
 800dd0c:	2f6f      	cmp	r7, #111	; 0x6f
 800dd0e:	bf0c      	ite	eq
 800dd10:	2308      	moveq	r3, #8
 800dd12:	230a      	movne	r3, #10
 800dd14:	2100      	movs	r1, #0
 800dd16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dd1a:	6865      	ldr	r5, [r4, #4]
 800dd1c:	60a5      	str	r5, [r4, #8]
 800dd1e:	2d00      	cmp	r5, #0
 800dd20:	bfa2      	ittt	ge
 800dd22:	6821      	ldrge	r1, [r4, #0]
 800dd24:	f021 0104 	bicge.w	r1, r1, #4
 800dd28:	6021      	strge	r1, [r4, #0]
 800dd2a:	b90e      	cbnz	r6, 800dd30 <_printf_i+0x118>
 800dd2c:	2d00      	cmp	r5, #0
 800dd2e:	d04d      	beq.n	800ddcc <_printf_i+0x1b4>
 800dd30:	4615      	mov	r5, r2
 800dd32:	fbb6 f1f3 	udiv	r1, r6, r3
 800dd36:	fb03 6711 	mls	r7, r3, r1, r6
 800dd3a:	5dc7      	ldrb	r7, [r0, r7]
 800dd3c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800dd40:	4637      	mov	r7, r6
 800dd42:	42bb      	cmp	r3, r7
 800dd44:	460e      	mov	r6, r1
 800dd46:	d9f4      	bls.n	800dd32 <_printf_i+0x11a>
 800dd48:	2b08      	cmp	r3, #8
 800dd4a:	d10b      	bne.n	800dd64 <_printf_i+0x14c>
 800dd4c:	6823      	ldr	r3, [r4, #0]
 800dd4e:	07de      	lsls	r6, r3, #31
 800dd50:	d508      	bpl.n	800dd64 <_printf_i+0x14c>
 800dd52:	6923      	ldr	r3, [r4, #16]
 800dd54:	6861      	ldr	r1, [r4, #4]
 800dd56:	4299      	cmp	r1, r3
 800dd58:	bfde      	ittt	le
 800dd5a:	2330      	movle	r3, #48	; 0x30
 800dd5c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dd60:	f105 35ff 	addle.w	r5, r5, #4294967295
 800dd64:	1b52      	subs	r2, r2, r5
 800dd66:	6122      	str	r2, [r4, #16]
 800dd68:	f8cd a000 	str.w	sl, [sp]
 800dd6c:	464b      	mov	r3, r9
 800dd6e:	aa03      	add	r2, sp, #12
 800dd70:	4621      	mov	r1, r4
 800dd72:	4640      	mov	r0, r8
 800dd74:	f7ff fee2 	bl	800db3c <_printf_common>
 800dd78:	3001      	adds	r0, #1
 800dd7a:	d14c      	bne.n	800de16 <_printf_i+0x1fe>
 800dd7c:	f04f 30ff 	mov.w	r0, #4294967295
 800dd80:	b004      	add	sp, #16
 800dd82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd86:	4835      	ldr	r0, [pc, #212]	; (800de5c <_printf_i+0x244>)
 800dd88:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800dd8c:	6829      	ldr	r1, [r5, #0]
 800dd8e:	6823      	ldr	r3, [r4, #0]
 800dd90:	f851 6b04 	ldr.w	r6, [r1], #4
 800dd94:	6029      	str	r1, [r5, #0]
 800dd96:	061d      	lsls	r5, r3, #24
 800dd98:	d514      	bpl.n	800ddc4 <_printf_i+0x1ac>
 800dd9a:	07df      	lsls	r7, r3, #31
 800dd9c:	bf44      	itt	mi
 800dd9e:	f043 0320 	orrmi.w	r3, r3, #32
 800dda2:	6023      	strmi	r3, [r4, #0]
 800dda4:	b91e      	cbnz	r6, 800ddae <_printf_i+0x196>
 800dda6:	6823      	ldr	r3, [r4, #0]
 800dda8:	f023 0320 	bic.w	r3, r3, #32
 800ddac:	6023      	str	r3, [r4, #0]
 800ddae:	2310      	movs	r3, #16
 800ddb0:	e7b0      	b.n	800dd14 <_printf_i+0xfc>
 800ddb2:	6823      	ldr	r3, [r4, #0]
 800ddb4:	f043 0320 	orr.w	r3, r3, #32
 800ddb8:	6023      	str	r3, [r4, #0]
 800ddba:	2378      	movs	r3, #120	; 0x78
 800ddbc:	4828      	ldr	r0, [pc, #160]	; (800de60 <_printf_i+0x248>)
 800ddbe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ddc2:	e7e3      	b.n	800dd8c <_printf_i+0x174>
 800ddc4:	0659      	lsls	r1, r3, #25
 800ddc6:	bf48      	it	mi
 800ddc8:	b2b6      	uxthmi	r6, r6
 800ddca:	e7e6      	b.n	800dd9a <_printf_i+0x182>
 800ddcc:	4615      	mov	r5, r2
 800ddce:	e7bb      	b.n	800dd48 <_printf_i+0x130>
 800ddd0:	682b      	ldr	r3, [r5, #0]
 800ddd2:	6826      	ldr	r6, [r4, #0]
 800ddd4:	6961      	ldr	r1, [r4, #20]
 800ddd6:	1d18      	adds	r0, r3, #4
 800ddd8:	6028      	str	r0, [r5, #0]
 800ddda:	0635      	lsls	r5, r6, #24
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	d501      	bpl.n	800dde4 <_printf_i+0x1cc>
 800dde0:	6019      	str	r1, [r3, #0]
 800dde2:	e002      	b.n	800ddea <_printf_i+0x1d2>
 800dde4:	0670      	lsls	r0, r6, #25
 800dde6:	d5fb      	bpl.n	800dde0 <_printf_i+0x1c8>
 800dde8:	8019      	strh	r1, [r3, #0]
 800ddea:	2300      	movs	r3, #0
 800ddec:	6123      	str	r3, [r4, #16]
 800ddee:	4615      	mov	r5, r2
 800ddf0:	e7ba      	b.n	800dd68 <_printf_i+0x150>
 800ddf2:	682b      	ldr	r3, [r5, #0]
 800ddf4:	1d1a      	adds	r2, r3, #4
 800ddf6:	602a      	str	r2, [r5, #0]
 800ddf8:	681d      	ldr	r5, [r3, #0]
 800ddfa:	6862      	ldr	r2, [r4, #4]
 800ddfc:	2100      	movs	r1, #0
 800ddfe:	4628      	mov	r0, r5
 800de00:	f7f2 fa0e 	bl	8000220 <memchr>
 800de04:	b108      	cbz	r0, 800de0a <_printf_i+0x1f2>
 800de06:	1b40      	subs	r0, r0, r5
 800de08:	6060      	str	r0, [r4, #4]
 800de0a:	6863      	ldr	r3, [r4, #4]
 800de0c:	6123      	str	r3, [r4, #16]
 800de0e:	2300      	movs	r3, #0
 800de10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800de14:	e7a8      	b.n	800dd68 <_printf_i+0x150>
 800de16:	6923      	ldr	r3, [r4, #16]
 800de18:	462a      	mov	r2, r5
 800de1a:	4649      	mov	r1, r9
 800de1c:	4640      	mov	r0, r8
 800de1e:	47d0      	blx	sl
 800de20:	3001      	adds	r0, #1
 800de22:	d0ab      	beq.n	800dd7c <_printf_i+0x164>
 800de24:	6823      	ldr	r3, [r4, #0]
 800de26:	079b      	lsls	r3, r3, #30
 800de28:	d413      	bmi.n	800de52 <_printf_i+0x23a>
 800de2a:	68e0      	ldr	r0, [r4, #12]
 800de2c:	9b03      	ldr	r3, [sp, #12]
 800de2e:	4298      	cmp	r0, r3
 800de30:	bfb8      	it	lt
 800de32:	4618      	movlt	r0, r3
 800de34:	e7a4      	b.n	800dd80 <_printf_i+0x168>
 800de36:	2301      	movs	r3, #1
 800de38:	4632      	mov	r2, r6
 800de3a:	4649      	mov	r1, r9
 800de3c:	4640      	mov	r0, r8
 800de3e:	47d0      	blx	sl
 800de40:	3001      	adds	r0, #1
 800de42:	d09b      	beq.n	800dd7c <_printf_i+0x164>
 800de44:	3501      	adds	r5, #1
 800de46:	68e3      	ldr	r3, [r4, #12]
 800de48:	9903      	ldr	r1, [sp, #12]
 800de4a:	1a5b      	subs	r3, r3, r1
 800de4c:	42ab      	cmp	r3, r5
 800de4e:	dcf2      	bgt.n	800de36 <_printf_i+0x21e>
 800de50:	e7eb      	b.n	800de2a <_printf_i+0x212>
 800de52:	2500      	movs	r5, #0
 800de54:	f104 0619 	add.w	r6, r4, #25
 800de58:	e7f5      	b.n	800de46 <_printf_i+0x22e>
 800de5a:	bf00      	nop
 800de5c:	0800f30d 	.word	0x0800f30d
 800de60:	0800f31e 	.word	0x0800f31e

0800de64 <_scanf_chars>:
 800de64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de68:	4615      	mov	r5, r2
 800de6a:	688a      	ldr	r2, [r1, #8]
 800de6c:	4680      	mov	r8, r0
 800de6e:	460c      	mov	r4, r1
 800de70:	b932      	cbnz	r2, 800de80 <_scanf_chars+0x1c>
 800de72:	698a      	ldr	r2, [r1, #24]
 800de74:	2a00      	cmp	r2, #0
 800de76:	bf0c      	ite	eq
 800de78:	2201      	moveq	r2, #1
 800de7a:	f04f 32ff 	movne.w	r2, #4294967295
 800de7e:	608a      	str	r2, [r1, #8]
 800de80:	6822      	ldr	r2, [r4, #0]
 800de82:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800df14 <_scanf_chars+0xb0>
 800de86:	06d1      	lsls	r1, r2, #27
 800de88:	bf5f      	itttt	pl
 800de8a:	681a      	ldrpl	r2, [r3, #0]
 800de8c:	1d11      	addpl	r1, r2, #4
 800de8e:	6019      	strpl	r1, [r3, #0]
 800de90:	6816      	ldrpl	r6, [r2, #0]
 800de92:	2700      	movs	r7, #0
 800de94:	69a0      	ldr	r0, [r4, #24]
 800de96:	b188      	cbz	r0, 800debc <_scanf_chars+0x58>
 800de98:	2801      	cmp	r0, #1
 800de9a:	d107      	bne.n	800deac <_scanf_chars+0x48>
 800de9c:	682a      	ldr	r2, [r5, #0]
 800de9e:	7811      	ldrb	r1, [r2, #0]
 800dea0:	6962      	ldr	r2, [r4, #20]
 800dea2:	5c52      	ldrb	r2, [r2, r1]
 800dea4:	b952      	cbnz	r2, 800debc <_scanf_chars+0x58>
 800dea6:	2f00      	cmp	r7, #0
 800dea8:	d031      	beq.n	800df0e <_scanf_chars+0xaa>
 800deaa:	e022      	b.n	800def2 <_scanf_chars+0x8e>
 800deac:	2802      	cmp	r0, #2
 800deae:	d120      	bne.n	800def2 <_scanf_chars+0x8e>
 800deb0:	682b      	ldr	r3, [r5, #0]
 800deb2:	781b      	ldrb	r3, [r3, #0]
 800deb4:	f813 3009 	ldrb.w	r3, [r3, r9]
 800deb8:	071b      	lsls	r3, r3, #28
 800deba:	d41a      	bmi.n	800def2 <_scanf_chars+0x8e>
 800debc:	6823      	ldr	r3, [r4, #0]
 800debe:	06da      	lsls	r2, r3, #27
 800dec0:	bf5e      	ittt	pl
 800dec2:	682b      	ldrpl	r3, [r5, #0]
 800dec4:	781b      	ldrbpl	r3, [r3, #0]
 800dec6:	f806 3b01 	strbpl.w	r3, [r6], #1
 800deca:	682a      	ldr	r2, [r5, #0]
 800decc:	686b      	ldr	r3, [r5, #4]
 800dece:	3201      	adds	r2, #1
 800ded0:	602a      	str	r2, [r5, #0]
 800ded2:	68a2      	ldr	r2, [r4, #8]
 800ded4:	3b01      	subs	r3, #1
 800ded6:	3a01      	subs	r2, #1
 800ded8:	606b      	str	r3, [r5, #4]
 800deda:	3701      	adds	r7, #1
 800dedc:	60a2      	str	r2, [r4, #8]
 800dede:	b142      	cbz	r2, 800def2 <_scanf_chars+0x8e>
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	dcd7      	bgt.n	800de94 <_scanf_chars+0x30>
 800dee4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800dee8:	4629      	mov	r1, r5
 800deea:	4640      	mov	r0, r8
 800deec:	4798      	blx	r3
 800deee:	2800      	cmp	r0, #0
 800def0:	d0d0      	beq.n	800de94 <_scanf_chars+0x30>
 800def2:	6823      	ldr	r3, [r4, #0]
 800def4:	f013 0310 	ands.w	r3, r3, #16
 800def8:	d105      	bne.n	800df06 <_scanf_chars+0xa2>
 800defa:	68e2      	ldr	r2, [r4, #12]
 800defc:	3201      	adds	r2, #1
 800defe:	60e2      	str	r2, [r4, #12]
 800df00:	69a2      	ldr	r2, [r4, #24]
 800df02:	b102      	cbz	r2, 800df06 <_scanf_chars+0xa2>
 800df04:	7033      	strb	r3, [r6, #0]
 800df06:	6923      	ldr	r3, [r4, #16]
 800df08:	443b      	add	r3, r7
 800df0a:	6123      	str	r3, [r4, #16]
 800df0c:	2000      	movs	r0, #0
 800df0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df12:	bf00      	nop
 800df14:	0800f34b 	.word	0x0800f34b

0800df18 <_scanf_i>:
 800df18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df1c:	4698      	mov	r8, r3
 800df1e:	4b76      	ldr	r3, [pc, #472]	; (800e0f8 <_scanf_i+0x1e0>)
 800df20:	460c      	mov	r4, r1
 800df22:	4682      	mov	sl, r0
 800df24:	4616      	mov	r6, r2
 800df26:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800df2a:	b087      	sub	sp, #28
 800df2c:	ab03      	add	r3, sp, #12
 800df2e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800df32:	4b72      	ldr	r3, [pc, #456]	; (800e0fc <_scanf_i+0x1e4>)
 800df34:	69a1      	ldr	r1, [r4, #24]
 800df36:	4a72      	ldr	r2, [pc, #456]	; (800e100 <_scanf_i+0x1e8>)
 800df38:	2903      	cmp	r1, #3
 800df3a:	bf18      	it	ne
 800df3c:	461a      	movne	r2, r3
 800df3e:	68a3      	ldr	r3, [r4, #8]
 800df40:	9201      	str	r2, [sp, #4]
 800df42:	1e5a      	subs	r2, r3, #1
 800df44:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800df48:	bf88      	it	hi
 800df4a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800df4e:	4627      	mov	r7, r4
 800df50:	bf82      	ittt	hi
 800df52:	eb03 0905 	addhi.w	r9, r3, r5
 800df56:	f240 135d 	movwhi	r3, #349	; 0x15d
 800df5a:	60a3      	strhi	r3, [r4, #8]
 800df5c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800df60:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800df64:	bf98      	it	ls
 800df66:	f04f 0900 	movls.w	r9, #0
 800df6a:	6023      	str	r3, [r4, #0]
 800df6c:	463d      	mov	r5, r7
 800df6e:	f04f 0b00 	mov.w	fp, #0
 800df72:	6831      	ldr	r1, [r6, #0]
 800df74:	ab03      	add	r3, sp, #12
 800df76:	7809      	ldrb	r1, [r1, #0]
 800df78:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800df7c:	2202      	movs	r2, #2
 800df7e:	f7f2 f94f 	bl	8000220 <memchr>
 800df82:	b328      	cbz	r0, 800dfd0 <_scanf_i+0xb8>
 800df84:	f1bb 0f01 	cmp.w	fp, #1
 800df88:	d159      	bne.n	800e03e <_scanf_i+0x126>
 800df8a:	6862      	ldr	r2, [r4, #4]
 800df8c:	b92a      	cbnz	r2, 800df9a <_scanf_i+0x82>
 800df8e:	6822      	ldr	r2, [r4, #0]
 800df90:	2308      	movs	r3, #8
 800df92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800df96:	6063      	str	r3, [r4, #4]
 800df98:	6022      	str	r2, [r4, #0]
 800df9a:	6822      	ldr	r2, [r4, #0]
 800df9c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800dfa0:	6022      	str	r2, [r4, #0]
 800dfa2:	68a2      	ldr	r2, [r4, #8]
 800dfa4:	1e51      	subs	r1, r2, #1
 800dfa6:	60a1      	str	r1, [r4, #8]
 800dfa8:	b192      	cbz	r2, 800dfd0 <_scanf_i+0xb8>
 800dfaa:	6832      	ldr	r2, [r6, #0]
 800dfac:	1c51      	adds	r1, r2, #1
 800dfae:	6031      	str	r1, [r6, #0]
 800dfb0:	7812      	ldrb	r2, [r2, #0]
 800dfb2:	f805 2b01 	strb.w	r2, [r5], #1
 800dfb6:	6872      	ldr	r2, [r6, #4]
 800dfb8:	3a01      	subs	r2, #1
 800dfba:	2a00      	cmp	r2, #0
 800dfbc:	6072      	str	r2, [r6, #4]
 800dfbe:	dc07      	bgt.n	800dfd0 <_scanf_i+0xb8>
 800dfc0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800dfc4:	4631      	mov	r1, r6
 800dfc6:	4650      	mov	r0, sl
 800dfc8:	4790      	blx	r2
 800dfca:	2800      	cmp	r0, #0
 800dfcc:	f040 8085 	bne.w	800e0da <_scanf_i+0x1c2>
 800dfd0:	f10b 0b01 	add.w	fp, fp, #1
 800dfd4:	f1bb 0f03 	cmp.w	fp, #3
 800dfd8:	d1cb      	bne.n	800df72 <_scanf_i+0x5a>
 800dfda:	6863      	ldr	r3, [r4, #4]
 800dfdc:	b90b      	cbnz	r3, 800dfe2 <_scanf_i+0xca>
 800dfde:	230a      	movs	r3, #10
 800dfe0:	6063      	str	r3, [r4, #4]
 800dfe2:	6863      	ldr	r3, [r4, #4]
 800dfe4:	4947      	ldr	r1, [pc, #284]	; (800e104 <_scanf_i+0x1ec>)
 800dfe6:	6960      	ldr	r0, [r4, #20]
 800dfe8:	1ac9      	subs	r1, r1, r3
 800dfea:	f000 f88d 	bl	800e108 <__sccl>
 800dfee:	f04f 0b00 	mov.w	fp, #0
 800dff2:	68a3      	ldr	r3, [r4, #8]
 800dff4:	6822      	ldr	r2, [r4, #0]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d03d      	beq.n	800e076 <_scanf_i+0x15e>
 800dffa:	6831      	ldr	r1, [r6, #0]
 800dffc:	6960      	ldr	r0, [r4, #20]
 800dffe:	f891 c000 	ldrb.w	ip, [r1]
 800e002:	f810 000c 	ldrb.w	r0, [r0, ip]
 800e006:	2800      	cmp	r0, #0
 800e008:	d035      	beq.n	800e076 <_scanf_i+0x15e>
 800e00a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800e00e:	d124      	bne.n	800e05a <_scanf_i+0x142>
 800e010:	0510      	lsls	r0, r2, #20
 800e012:	d522      	bpl.n	800e05a <_scanf_i+0x142>
 800e014:	f10b 0b01 	add.w	fp, fp, #1
 800e018:	f1b9 0f00 	cmp.w	r9, #0
 800e01c:	d003      	beq.n	800e026 <_scanf_i+0x10e>
 800e01e:	3301      	adds	r3, #1
 800e020:	f109 39ff 	add.w	r9, r9, #4294967295
 800e024:	60a3      	str	r3, [r4, #8]
 800e026:	6873      	ldr	r3, [r6, #4]
 800e028:	3b01      	subs	r3, #1
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	6073      	str	r3, [r6, #4]
 800e02e:	dd1b      	ble.n	800e068 <_scanf_i+0x150>
 800e030:	6833      	ldr	r3, [r6, #0]
 800e032:	3301      	adds	r3, #1
 800e034:	6033      	str	r3, [r6, #0]
 800e036:	68a3      	ldr	r3, [r4, #8]
 800e038:	3b01      	subs	r3, #1
 800e03a:	60a3      	str	r3, [r4, #8]
 800e03c:	e7d9      	b.n	800dff2 <_scanf_i+0xda>
 800e03e:	f1bb 0f02 	cmp.w	fp, #2
 800e042:	d1ae      	bne.n	800dfa2 <_scanf_i+0x8a>
 800e044:	6822      	ldr	r2, [r4, #0]
 800e046:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800e04a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800e04e:	d1bf      	bne.n	800dfd0 <_scanf_i+0xb8>
 800e050:	2310      	movs	r3, #16
 800e052:	6063      	str	r3, [r4, #4]
 800e054:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e058:	e7a2      	b.n	800dfa0 <_scanf_i+0x88>
 800e05a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800e05e:	6022      	str	r2, [r4, #0]
 800e060:	780b      	ldrb	r3, [r1, #0]
 800e062:	f805 3b01 	strb.w	r3, [r5], #1
 800e066:	e7de      	b.n	800e026 <_scanf_i+0x10e>
 800e068:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e06c:	4631      	mov	r1, r6
 800e06e:	4650      	mov	r0, sl
 800e070:	4798      	blx	r3
 800e072:	2800      	cmp	r0, #0
 800e074:	d0df      	beq.n	800e036 <_scanf_i+0x11e>
 800e076:	6823      	ldr	r3, [r4, #0]
 800e078:	05db      	lsls	r3, r3, #23
 800e07a:	d50d      	bpl.n	800e098 <_scanf_i+0x180>
 800e07c:	42bd      	cmp	r5, r7
 800e07e:	d909      	bls.n	800e094 <_scanf_i+0x17c>
 800e080:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800e084:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e088:	4632      	mov	r2, r6
 800e08a:	4650      	mov	r0, sl
 800e08c:	4798      	blx	r3
 800e08e:	f105 39ff 	add.w	r9, r5, #4294967295
 800e092:	464d      	mov	r5, r9
 800e094:	42bd      	cmp	r5, r7
 800e096:	d02d      	beq.n	800e0f4 <_scanf_i+0x1dc>
 800e098:	6822      	ldr	r2, [r4, #0]
 800e09a:	f012 0210 	ands.w	r2, r2, #16
 800e09e:	d113      	bne.n	800e0c8 <_scanf_i+0x1b0>
 800e0a0:	702a      	strb	r2, [r5, #0]
 800e0a2:	6863      	ldr	r3, [r4, #4]
 800e0a4:	9e01      	ldr	r6, [sp, #4]
 800e0a6:	4639      	mov	r1, r7
 800e0a8:	4650      	mov	r0, sl
 800e0aa:	47b0      	blx	r6
 800e0ac:	6821      	ldr	r1, [r4, #0]
 800e0ae:	f8d8 3000 	ldr.w	r3, [r8]
 800e0b2:	f011 0f20 	tst.w	r1, #32
 800e0b6:	d013      	beq.n	800e0e0 <_scanf_i+0x1c8>
 800e0b8:	1d1a      	adds	r2, r3, #4
 800e0ba:	f8c8 2000 	str.w	r2, [r8]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	6018      	str	r0, [r3, #0]
 800e0c2:	68e3      	ldr	r3, [r4, #12]
 800e0c4:	3301      	adds	r3, #1
 800e0c6:	60e3      	str	r3, [r4, #12]
 800e0c8:	1bed      	subs	r5, r5, r7
 800e0ca:	44ab      	add	fp, r5
 800e0cc:	6925      	ldr	r5, [r4, #16]
 800e0ce:	445d      	add	r5, fp
 800e0d0:	6125      	str	r5, [r4, #16]
 800e0d2:	2000      	movs	r0, #0
 800e0d4:	b007      	add	sp, #28
 800e0d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0da:	f04f 0b00 	mov.w	fp, #0
 800e0de:	e7ca      	b.n	800e076 <_scanf_i+0x15e>
 800e0e0:	1d1a      	adds	r2, r3, #4
 800e0e2:	f8c8 2000 	str.w	r2, [r8]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	f011 0f01 	tst.w	r1, #1
 800e0ec:	bf14      	ite	ne
 800e0ee:	8018      	strhne	r0, [r3, #0]
 800e0f0:	6018      	streq	r0, [r3, #0]
 800e0f2:	e7e6      	b.n	800e0c2 <_scanf_i+0x1aa>
 800e0f4:	2001      	movs	r0, #1
 800e0f6:	e7ed      	b.n	800e0d4 <_scanf_i+0x1bc>
 800e0f8:	0800eef4 	.word	0x0800eef4
 800e0fc:	0800e365 	.word	0x0800e365
 800e100:	0800e27d 	.word	0x0800e27d
 800e104:	0800f348 	.word	0x0800f348

0800e108 <__sccl>:
 800e108:	b570      	push	{r4, r5, r6, lr}
 800e10a:	780b      	ldrb	r3, [r1, #0]
 800e10c:	4604      	mov	r4, r0
 800e10e:	2b5e      	cmp	r3, #94	; 0x5e
 800e110:	bf0b      	itete	eq
 800e112:	784b      	ldrbeq	r3, [r1, #1]
 800e114:	1c48      	addne	r0, r1, #1
 800e116:	1c88      	addeq	r0, r1, #2
 800e118:	2200      	movne	r2, #0
 800e11a:	bf08      	it	eq
 800e11c:	2201      	moveq	r2, #1
 800e11e:	1e61      	subs	r1, r4, #1
 800e120:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800e124:	f801 2f01 	strb.w	r2, [r1, #1]!
 800e128:	42a9      	cmp	r1, r5
 800e12a:	d1fb      	bne.n	800e124 <__sccl+0x1c>
 800e12c:	b90b      	cbnz	r3, 800e132 <__sccl+0x2a>
 800e12e:	3801      	subs	r0, #1
 800e130:	bd70      	pop	{r4, r5, r6, pc}
 800e132:	f082 0201 	eor.w	r2, r2, #1
 800e136:	54e2      	strb	r2, [r4, r3]
 800e138:	4605      	mov	r5, r0
 800e13a:	4628      	mov	r0, r5
 800e13c:	f810 1b01 	ldrb.w	r1, [r0], #1
 800e140:	292d      	cmp	r1, #45	; 0x2d
 800e142:	d006      	beq.n	800e152 <__sccl+0x4a>
 800e144:	295d      	cmp	r1, #93	; 0x5d
 800e146:	d0f3      	beq.n	800e130 <__sccl+0x28>
 800e148:	b909      	cbnz	r1, 800e14e <__sccl+0x46>
 800e14a:	4628      	mov	r0, r5
 800e14c:	e7f0      	b.n	800e130 <__sccl+0x28>
 800e14e:	460b      	mov	r3, r1
 800e150:	e7f1      	b.n	800e136 <__sccl+0x2e>
 800e152:	786e      	ldrb	r6, [r5, #1]
 800e154:	2e5d      	cmp	r6, #93	; 0x5d
 800e156:	d0fa      	beq.n	800e14e <__sccl+0x46>
 800e158:	42b3      	cmp	r3, r6
 800e15a:	dcf8      	bgt.n	800e14e <__sccl+0x46>
 800e15c:	3502      	adds	r5, #2
 800e15e:	4619      	mov	r1, r3
 800e160:	3101      	adds	r1, #1
 800e162:	428e      	cmp	r6, r1
 800e164:	5462      	strb	r2, [r4, r1]
 800e166:	dcfb      	bgt.n	800e160 <__sccl+0x58>
 800e168:	1af1      	subs	r1, r6, r3
 800e16a:	3901      	subs	r1, #1
 800e16c:	1c58      	adds	r0, r3, #1
 800e16e:	42b3      	cmp	r3, r6
 800e170:	bfa8      	it	ge
 800e172:	2100      	movge	r1, #0
 800e174:	1843      	adds	r3, r0, r1
 800e176:	e7e0      	b.n	800e13a <__sccl+0x32>

0800e178 <_strtol_l.constprop.0>:
 800e178:	2b01      	cmp	r3, #1
 800e17a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e17e:	d001      	beq.n	800e184 <_strtol_l.constprop.0+0xc>
 800e180:	2b24      	cmp	r3, #36	; 0x24
 800e182:	d906      	bls.n	800e192 <_strtol_l.constprop.0+0x1a>
 800e184:	f7ff f8ea 	bl	800d35c <__errno>
 800e188:	2316      	movs	r3, #22
 800e18a:	6003      	str	r3, [r0, #0]
 800e18c:	2000      	movs	r0, #0
 800e18e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e192:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e278 <_strtol_l.constprop.0+0x100>
 800e196:	460d      	mov	r5, r1
 800e198:	462e      	mov	r6, r5
 800e19a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e19e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800e1a2:	f017 0708 	ands.w	r7, r7, #8
 800e1a6:	d1f7      	bne.n	800e198 <_strtol_l.constprop.0+0x20>
 800e1a8:	2c2d      	cmp	r4, #45	; 0x2d
 800e1aa:	d132      	bne.n	800e212 <_strtol_l.constprop.0+0x9a>
 800e1ac:	782c      	ldrb	r4, [r5, #0]
 800e1ae:	2701      	movs	r7, #1
 800e1b0:	1cb5      	adds	r5, r6, #2
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d05b      	beq.n	800e26e <_strtol_l.constprop.0+0xf6>
 800e1b6:	2b10      	cmp	r3, #16
 800e1b8:	d109      	bne.n	800e1ce <_strtol_l.constprop.0+0x56>
 800e1ba:	2c30      	cmp	r4, #48	; 0x30
 800e1bc:	d107      	bne.n	800e1ce <_strtol_l.constprop.0+0x56>
 800e1be:	782c      	ldrb	r4, [r5, #0]
 800e1c0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e1c4:	2c58      	cmp	r4, #88	; 0x58
 800e1c6:	d14d      	bne.n	800e264 <_strtol_l.constprop.0+0xec>
 800e1c8:	786c      	ldrb	r4, [r5, #1]
 800e1ca:	2310      	movs	r3, #16
 800e1cc:	3502      	adds	r5, #2
 800e1ce:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e1d2:	f108 38ff 	add.w	r8, r8, #4294967295
 800e1d6:	f04f 0c00 	mov.w	ip, #0
 800e1da:	fbb8 f9f3 	udiv	r9, r8, r3
 800e1de:	4666      	mov	r6, ip
 800e1e0:	fb03 8a19 	mls	sl, r3, r9, r8
 800e1e4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800e1e8:	f1be 0f09 	cmp.w	lr, #9
 800e1ec:	d816      	bhi.n	800e21c <_strtol_l.constprop.0+0xa4>
 800e1ee:	4674      	mov	r4, lr
 800e1f0:	42a3      	cmp	r3, r4
 800e1f2:	dd24      	ble.n	800e23e <_strtol_l.constprop.0+0xc6>
 800e1f4:	f1bc 0f00 	cmp.w	ip, #0
 800e1f8:	db1e      	blt.n	800e238 <_strtol_l.constprop.0+0xc0>
 800e1fa:	45b1      	cmp	r9, r6
 800e1fc:	d31c      	bcc.n	800e238 <_strtol_l.constprop.0+0xc0>
 800e1fe:	d101      	bne.n	800e204 <_strtol_l.constprop.0+0x8c>
 800e200:	45a2      	cmp	sl, r4
 800e202:	db19      	blt.n	800e238 <_strtol_l.constprop.0+0xc0>
 800e204:	fb06 4603 	mla	r6, r6, r3, r4
 800e208:	f04f 0c01 	mov.w	ip, #1
 800e20c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e210:	e7e8      	b.n	800e1e4 <_strtol_l.constprop.0+0x6c>
 800e212:	2c2b      	cmp	r4, #43	; 0x2b
 800e214:	bf04      	itt	eq
 800e216:	782c      	ldrbeq	r4, [r5, #0]
 800e218:	1cb5      	addeq	r5, r6, #2
 800e21a:	e7ca      	b.n	800e1b2 <_strtol_l.constprop.0+0x3a>
 800e21c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800e220:	f1be 0f19 	cmp.w	lr, #25
 800e224:	d801      	bhi.n	800e22a <_strtol_l.constprop.0+0xb2>
 800e226:	3c37      	subs	r4, #55	; 0x37
 800e228:	e7e2      	b.n	800e1f0 <_strtol_l.constprop.0+0x78>
 800e22a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800e22e:	f1be 0f19 	cmp.w	lr, #25
 800e232:	d804      	bhi.n	800e23e <_strtol_l.constprop.0+0xc6>
 800e234:	3c57      	subs	r4, #87	; 0x57
 800e236:	e7db      	b.n	800e1f0 <_strtol_l.constprop.0+0x78>
 800e238:	f04f 3cff 	mov.w	ip, #4294967295
 800e23c:	e7e6      	b.n	800e20c <_strtol_l.constprop.0+0x94>
 800e23e:	f1bc 0f00 	cmp.w	ip, #0
 800e242:	da05      	bge.n	800e250 <_strtol_l.constprop.0+0xd8>
 800e244:	2322      	movs	r3, #34	; 0x22
 800e246:	6003      	str	r3, [r0, #0]
 800e248:	4646      	mov	r6, r8
 800e24a:	b942      	cbnz	r2, 800e25e <_strtol_l.constprop.0+0xe6>
 800e24c:	4630      	mov	r0, r6
 800e24e:	e79e      	b.n	800e18e <_strtol_l.constprop.0+0x16>
 800e250:	b107      	cbz	r7, 800e254 <_strtol_l.constprop.0+0xdc>
 800e252:	4276      	negs	r6, r6
 800e254:	2a00      	cmp	r2, #0
 800e256:	d0f9      	beq.n	800e24c <_strtol_l.constprop.0+0xd4>
 800e258:	f1bc 0f00 	cmp.w	ip, #0
 800e25c:	d000      	beq.n	800e260 <_strtol_l.constprop.0+0xe8>
 800e25e:	1e69      	subs	r1, r5, #1
 800e260:	6011      	str	r1, [r2, #0]
 800e262:	e7f3      	b.n	800e24c <_strtol_l.constprop.0+0xd4>
 800e264:	2430      	movs	r4, #48	; 0x30
 800e266:	2b00      	cmp	r3, #0
 800e268:	d1b1      	bne.n	800e1ce <_strtol_l.constprop.0+0x56>
 800e26a:	2308      	movs	r3, #8
 800e26c:	e7af      	b.n	800e1ce <_strtol_l.constprop.0+0x56>
 800e26e:	2c30      	cmp	r4, #48	; 0x30
 800e270:	d0a5      	beq.n	800e1be <_strtol_l.constprop.0+0x46>
 800e272:	230a      	movs	r3, #10
 800e274:	e7ab      	b.n	800e1ce <_strtol_l.constprop.0+0x56>
 800e276:	bf00      	nop
 800e278:	0800f34b 	.word	0x0800f34b

0800e27c <_strtol_r>:
 800e27c:	f7ff bf7c 	b.w	800e178 <_strtol_l.constprop.0>

0800e280 <_strtoul_l.constprop.0>:
 800e280:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e284:	4f36      	ldr	r7, [pc, #216]	; (800e360 <_strtoul_l.constprop.0+0xe0>)
 800e286:	4686      	mov	lr, r0
 800e288:	460d      	mov	r5, r1
 800e28a:	4628      	mov	r0, r5
 800e28c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e290:	5de6      	ldrb	r6, [r4, r7]
 800e292:	f016 0608 	ands.w	r6, r6, #8
 800e296:	d1f8      	bne.n	800e28a <_strtoul_l.constprop.0+0xa>
 800e298:	2c2d      	cmp	r4, #45	; 0x2d
 800e29a:	d12f      	bne.n	800e2fc <_strtoul_l.constprop.0+0x7c>
 800e29c:	782c      	ldrb	r4, [r5, #0]
 800e29e:	2601      	movs	r6, #1
 800e2a0:	1c85      	adds	r5, r0, #2
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d057      	beq.n	800e356 <_strtoul_l.constprop.0+0xd6>
 800e2a6:	2b10      	cmp	r3, #16
 800e2a8:	d109      	bne.n	800e2be <_strtoul_l.constprop.0+0x3e>
 800e2aa:	2c30      	cmp	r4, #48	; 0x30
 800e2ac:	d107      	bne.n	800e2be <_strtoul_l.constprop.0+0x3e>
 800e2ae:	7828      	ldrb	r0, [r5, #0]
 800e2b0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800e2b4:	2858      	cmp	r0, #88	; 0x58
 800e2b6:	d149      	bne.n	800e34c <_strtoul_l.constprop.0+0xcc>
 800e2b8:	786c      	ldrb	r4, [r5, #1]
 800e2ba:	2310      	movs	r3, #16
 800e2bc:	3502      	adds	r5, #2
 800e2be:	f04f 38ff 	mov.w	r8, #4294967295
 800e2c2:	2700      	movs	r7, #0
 800e2c4:	fbb8 f8f3 	udiv	r8, r8, r3
 800e2c8:	fb03 f908 	mul.w	r9, r3, r8
 800e2cc:	ea6f 0909 	mvn.w	r9, r9
 800e2d0:	4638      	mov	r0, r7
 800e2d2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e2d6:	f1bc 0f09 	cmp.w	ip, #9
 800e2da:	d814      	bhi.n	800e306 <_strtoul_l.constprop.0+0x86>
 800e2dc:	4664      	mov	r4, ip
 800e2de:	42a3      	cmp	r3, r4
 800e2e0:	dd22      	ble.n	800e328 <_strtoul_l.constprop.0+0xa8>
 800e2e2:	2f00      	cmp	r7, #0
 800e2e4:	db1d      	blt.n	800e322 <_strtoul_l.constprop.0+0xa2>
 800e2e6:	4580      	cmp	r8, r0
 800e2e8:	d31b      	bcc.n	800e322 <_strtoul_l.constprop.0+0xa2>
 800e2ea:	d101      	bne.n	800e2f0 <_strtoul_l.constprop.0+0x70>
 800e2ec:	45a1      	cmp	r9, r4
 800e2ee:	db18      	blt.n	800e322 <_strtoul_l.constprop.0+0xa2>
 800e2f0:	fb00 4003 	mla	r0, r0, r3, r4
 800e2f4:	2701      	movs	r7, #1
 800e2f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e2fa:	e7ea      	b.n	800e2d2 <_strtoul_l.constprop.0+0x52>
 800e2fc:	2c2b      	cmp	r4, #43	; 0x2b
 800e2fe:	bf04      	itt	eq
 800e300:	782c      	ldrbeq	r4, [r5, #0]
 800e302:	1c85      	addeq	r5, r0, #2
 800e304:	e7cd      	b.n	800e2a2 <_strtoul_l.constprop.0+0x22>
 800e306:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e30a:	f1bc 0f19 	cmp.w	ip, #25
 800e30e:	d801      	bhi.n	800e314 <_strtoul_l.constprop.0+0x94>
 800e310:	3c37      	subs	r4, #55	; 0x37
 800e312:	e7e4      	b.n	800e2de <_strtoul_l.constprop.0+0x5e>
 800e314:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e318:	f1bc 0f19 	cmp.w	ip, #25
 800e31c:	d804      	bhi.n	800e328 <_strtoul_l.constprop.0+0xa8>
 800e31e:	3c57      	subs	r4, #87	; 0x57
 800e320:	e7dd      	b.n	800e2de <_strtoul_l.constprop.0+0x5e>
 800e322:	f04f 37ff 	mov.w	r7, #4294967295
 800e326:	e7e6      	b.n	800e2f6 <_strtoul_l.constprop.0+0x76>
 800e328:	2f00      	cmp	r7, #0
 800e32a:	da07      	bge.n	800e33c <_strtoul_l.constprop.0+0xbc>
 800e32c:	2322      	movs	r3, #34	; 0x22
 800e32e:	f8ce 3000 	str.w	r3, [lr]
 800e332:	f04f 30ff 	mov.w	r0, #4294967295
 800e336:	b932      	cbnz	r2, 800e346 <_strtoul_l.constprop.0+0xc6>
 800e338:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e33c:	b106      	cbz	r6, 800e340 <_strtoul_l.constprop.0+0xc0>
 800e33e:	4240      	negs	r0, r0
 800e340:	2a00      	cmp	r2, #0
 800e342:	d0f9      	beq.n	800e338 <_strtoul_l.constprop.0+0xb8>
 800e344:	b107      	cbz	r7, 800e348 <_strtoul_l.constprop.0+0xc8>
 800e346:	1e69      	subs	r1, r5, #1
 800e348:	6011      	str	r1, [r2, #0]
 800e34a:	e7f5      	b.n	800e338 <_strtoul_l.constprop.0+0xb8>
 800e34c:	2430      	movs	r4, #48	; 0x30
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d1b5      	bne.n	800e2be <_strtoul_l.constprop.0+0x3e>
 800e352:	2308      	movs	r3, #8
 800e354:	e7b3      	b.n	800e2be <_strtoul_l.constprop.0+0x3e>
 800e356:	2c30      	cmp	r4, #48	; 0x30
 800e358:	d0a9      	beq.n	800e2ae <_strtoul_l.constprop.0+0x2e>
 800e35a:	230a      	movs	r3, #10
 800e35c:	e7af      	b.n	800e2be <_strtoul_l.constprop.0+0x3e>
 800e35e:	bf00      	nop
 800e360:	0800f34b 	.word	0x0800f34b

0800e364 <_strtoul_r>:
 800e364:	f7ff bf8c 	b.w	800e280 <_strtoul_l.constprop.0>

0800e368 <__submore>:
 800e368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e36c:	460c      	mov	r4, r1
 800e36e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800e370:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e374:	4299      	cmp	r1, r3
 800e376:	d11d      	bne.n	800e3b4 <__submore+0x4c>
 800e378:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800e37c:	f000 f8b6 	bl	800e4ec <_malloc_r>
 800e380:	b918      	cbnz	r0, 800e38a <__submore+0x22>
 800e382:	f04f 30ff 	mov.w	r0, #4294967295
 800e386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e38a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e38e:	63a3      	str	r3, [r4, #56]	; 0x38
 800e390:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800e394:	6360      	str	r0, [r4, #52]	; 0x34
 800e396:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800e39a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800e39e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800e3a2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800e3a6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800e3aa:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800e3ae:	6020      	str	r0, [r4, #0]
 800e3b0:	2000      	movs	r0, #0
 800e3b2:	e7e8      	b.n	800e386 <__submore+0x1e>
 800e3b4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800e3b6:	0077      	lsls	r7, r6, #1
 800e3b8:	463a      	mov	r2, r7
 800e3ba:	f000 f90b 	bl	800e5d4 <_realloc_r>
 800e3be:	4605      	mov	r5, r0
 800e3c0:	2800      	cmp	r0, #0
 800e3c2:	d0de      	beq.n	800e382 <__submore+0x1a>
 800e3c4:	eb00 0806 	add.w	r8, r0, r6
 800e3c8:	4601      	mov	r1, r0
 800e3ca:	4632      	mov	r2, r6
 800e3cc:	4640      	mov	r0, r8
 800e3ce:	f7fe ffef 	bl	800d3b0 <memcpy>
 800e3d2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800e3d6:	f8c4 8000 	str.w	r8, [r4]
 800e3da:	e7e9      	b.n	800e3b0 <__submore+0x48>

0800e3dc <__retarget_lock_acquire_recursive>:
 800e3dc:	4770      	bx	lr

0800e3de <__retarget_lock_release_recursive>:
 800e3de:	4770      	bx	lr

0800e3e0 <memmove>:
 800e3e0:	4288      	cmp	r0, r1
 800e3e2:	b510      	push	{r4, lr}
 800e3e4:	eb01 0402 	add.w	r4, r1, r2
 800e3e8:	d902      	bls.n	800e3f0 <memmove+0x10>
 800e3ea:	4284      	cmp	r4, r0
 800e3ec:	4623      	mov	r3, r4
 800e3ee:	d807      	bhi.n	800e400 <memmove+0x20>
 800e3f0:	1e43      	subs	r3, r0, #1
 800e3f2:	42a1      	cmp	r1, r4
 800e3f4:	d008      	beq.n	800e408 <memmove+0x28>
 800e3f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e3fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e3fe:	e7f8      	b.n	800e3f2 <memmove+0x12>
 800e400:	4402      	add	r2, r0
 800e402:	4601      	mov	r1, r0
 800e404:	428a      	cmp	r2, r1
 800e406:	d100      	bne.n	800e40a <memmove+0x2a>
 800e408:	bd10      	pop	{r4, pc}
 800e40a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e40e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e412:	e7f7      	b.n	800e404 <memmove+0x24>

0800e414 <_free_r>:
 800e414:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e416:	2900      	cmp	r1, #0
 800e418:	d044      	beq.n	800e4a4 <_free_r+0x90>
 800e41a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e41e:	9001      	str	r0, [sp, #4]
 800e420:	2b00      	cmp	r3, #0
 800e422:	f1a1 0404 	sub.w	r4, r1, #4
 800e426:	bfb8      	it	lt
 800e428:	18e4      	addlt	r4, r4, r3
 800e42a:	f000 f913 	bl	800e654 <__malloc_lock>
 800e42e:	4a1e      	ldr	r2, [pc, #120]	; (800e4a8 <_free_r+0x94>)
 800e430:	9801      	ldr	r0, [sp, #4]
 800e432:	6813      	ldr	r3, [r2, #0]
 800e434:	b933      	cbnz	r3, 800e444 <_free_r+0x30>
 800e436:	6063      	str	r3, [r4, #4]
 800e438:	6014      	str	r4, [r2, #0]
 800e43a:	b003      	add	sp, #12
 800e43c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e440:	f000 b90e 	b.w	800e660 <__malloc_unlock>
 800e444:	42a3      	cmp	r3, r4
 800e446:	d908      	bls.n	800e45a <_free_r+0x46>
 800e448:	6825      	ldr	r5, [r4, #0]
 800e44a:	1961      	adds	r1, r4, r5
 800e44c:	428b      	cmp	r3, r1
 800e44e:	bf01      	itttt	eq
 800e450:	6819      	ldreq	r1, [r3, #0]
 800e452:	685b      	ldreq	r3, [r3, #4]
 800e454:	1949      	addeq	r1, r1, r5
 800e456:	6021      	streq	r1, [r4, #0]
 800e458:	e7ed      	b.n	800e436 <_free_r+0x22>
 800e45a:	461a      	mov	r2, r3
 800e45c:	685b      	ldr	r3, [r3, #4]
 800e45e:	b10b      	cbz	r3, 800e464 <_free_r+0x50>
 800e460:	42a3      	cmp	r3, r4
 800e462:	d9fa      	bls.n	800e45a <_free_r+0x46>
 800e464:	6811      	ldr	r1, [r2, #0]
 800e466:	1855      	adds	r5, r2, r1
 800e468:	42a5      	cmp	r5, r4
 800e46a:	d10b      	bne.n	800e484 <_free_r+0x70>
 800e46c:	6824      	ldr	r4, [r4, #0]
 800e46e:	4421      	add	r1, r4
 800e470:	1854      	adds	r4, r2, r1
 800e472:	42a3      	cmp	r3, r4
 800e474:	6011      	str	r1, [r2, #0]
 800e476:	d1e0      	bne.n	800e43a <_free_r+0x26>
 800e478:	681c      	ldr	r4, [r3, #0]
 800e47a:	685b      	ldr	r3, [r3, #4]
 800e47c:	6053      	str	r3, [r2, #4]
 800e47e:	4421      	add	r1, r4
 800e480:	6011      	str	r1, [r2, #0]
 800e482:	e7da      	b.n	800e43a <_free_r+0x26>
 800e484:	d902      	bls.n	800e48c <_free_r+0x78>
 800e486:	230c      	movs	r3, #12
 800e488:	6003      	str	r3, [r0, #0]
 800e48a:	e7d6      	b.n	800e43a <_free_r+0x26>
 800e48c:	6825      	ldr	r5, [r4, #0]
 800e48e:	1961      	adds	r1, r4, r5
 800e490:	428b      	cmp	r3, r1
 800e492:	bf04      	itt	eq
 800e494:	6819      	ldreq	r1, [r3, #0]
 800e496:	685b      	ldreq	r3, [r3, #4]
 800e498:	6063      	str	r3, [r4, #4]
 800e49a:	bf04      	itt	eq
 800e49c:	1949      	addeq	r1, r1, r5
 800e49e:	6021      	streq	r1, [r4, #0]
 800e4a0:	6054      	str	r4, [r2, #4]
 800e4a2:	e7ca      	b.n	800e43a <_free_r+0x26>
 800e4a4:	b003      	add	sp, #12
 800e4a6:	bd30      	pop	{r4, r5, pc}
 800e4a8:	20005094 	.word	0x20005094

0800e4ac <sbrk_aligned>:
 800e4ac:	b570      	push	{r4, r5, r6, lr}
 800e4ae:	4e0e      	ldr	r6, [pc, #56]	; (800e4e8 <sbrk_aligned+0x3c>)
 800e4b0:	460c      	mov	r4, r1
 800e4b2:	6831      	ldr	r1, [r6, #0]
 800e4b4:	4605      	mov	r5, r0
 800e4b6:	b911      	cbnz	r1, 800e4be <sbrk_aligned+0x12>
 800e4b8:	f000 f8bc 	bl	800e634 <_sbrk_r>
 800e4bc:	6030      	str	r0, [r6, #0]
 800e4be:	4621      	mov	r1, r4
 800e4c0:	4628      	mov	r0, r5
 800e4c2:	f000 f8b7 	bl	800e634 <_sbrk_r>
 800e4c6:	1c43      	adds	r3, r0, #1
 800e4c8:	d00a      	beq.n	800e4e0 <sbrk_aligned+0x34>
 800e4ca:	1cc4      	adds	r4, r0, #3
 800e4cc:	f024 0403 	bic.w	r4, r4, #3
 800e4d0:	42a0      	cmp	r0, r4
 800e4d2:	d007      	beq.n	800e4e4 <sbrk_aligned+0x38>
 800e4d4:	1a21      	subs	r1, r4, r0
 800e4d6:	4628      	mov	r0, r5
 800e4d8:	f000 f8ac 	bl	800e634 <_sbrk_r>
 800e4dc:	3001      	adds	r0, #1
 800e4de:	d101      	bne.n	800e4e4 <sbrk_aligned+0x38>
 800e4e0:	f04f 34ff 	mov.w	r4, #4294967295
 800e4e4:	4620      	mov	r0, r4
 800e4e6:	bd70      	pop	{r4, r5, r6, pc}
 800e4e8:	20005098 	.word	0x20005098

0800e4ec <_malloc_r>:
 800e4ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4f0:	1ccd      	adds	r5, r1, #3
 800e4f2:	f025 0503 	bic.w	r5, r5, #3
 800e4f6:	3508      	adds	r5, #8
 800e4f8:	2d0c      	cmp	r5, #12
 800e4fa:	bf38      	it	cc
 800e4fc:	250c      	movcc	r5, #12
 800e4fe:	2d00      	cmp	r5, #0
 800e500:	4607      	mov	r7, r0
 800e502:	db01      	blt.n	800e508 <_malloc_r+0x1c>
 800e504:	42a9      	cmp	r1, r5
 800e506:	d905      	bls.n	800e514 <_malloc_r+0x28>
 800e508:	230c      	movs	r3, #12
 800e50a:	603b      	str	r3, [r7, #0]
 800e50c:	2600      	movs	r6, #0
 800e50e:	4630      	mov	r0, r6
 800e510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e514:	4e2e      	ldr	r6, [pc, #184]	; (800e5d0 <_malloc_r+0xe4>)
 800e516:	f000 f89d 	bl	800e654 <__malloc_lock>
 800e51a:	6833      	ldr	r3, [r6, #0]
 800e51c:	461c      	mov	r4, r3
 800e51e:	bb34      	cbnz	r4, 800e56e <_malloc_r+0x82>
 800e520:	4629      	mov	r1, r5
 800e522:	4638      	mov	r0, r7
 800e524:	f7ff ffc2 	bl	800e4ac <sbrk_aligned>
 800e528:	1c43      	adds	r3, r0, #1
 800e52a:	4604      	mov	r4, r0
 800e52c:	d14d      	bne.n	800e5ca <_malloc_r+0xde>
 800e52e:	6834      	ldr	r4, [r6, #0]
 800e530:	4626      	mov	r6, r4
 800e532:	2e00      	cmp	r6, #0
 800e534:	d140      	bne.n	800e5b8 <_malloc_r+0xcc>
 800e536:	6823      	ldr	r3, [r4, #0]
 800e538:	4631      	mov	r1, r6
 800e53a:	4638      	mov	r0, r7
 800e53c:	eb04 0803 	add.w	r8, r4, r3
 800e540:	f000 f878 	bl	800e634 <_sbrk_r>
 800e544:	4580      	cmp	r8, r0
 800e546:	d13a      	bne.n	800e5be <_malloc_r+0xd2>
 800e548:	6821      	ldr	r1, [r4, #0]
 800e54a:	3503      	adds	r5, #3
 800e54c:	1a6d      	subs	r5, r5, r1
 800e54e:	f025 0503 	bic.w	r5, r5, #3
 800e552:	3508      	adds	r5, #8
 800e554:	2d0c      	cmp	r5, #12
 800e556:	bf38      	it	cc
 800e558:	250c      	movcc	r5, #12
 800e55a:	4629      	mov	r1, r5
 800e55c:	4638      	mov	r0, r7
 800e55e:	f7ff ffa5 	bl	800e4ac <sbrk_aligned>
 800e562:	3001      	adds	r0, #1
 800e564:	d02b      	beq.n	800e5be <_malloc_r+0xd2>
 800e566:	6823      	ldr	r3, [r4, #0]
 800e568:	442b      	add	r3, r5
 800e56a:	6023      	str	r3, [r4, #0]
 800e56c:	e00e      	b.n	800e58c <_malloc_r+0xa0>
 800e56e:	6822      	ldr	r2, [r4, #0]
 800e570:	1b52      	subs	r2, r2, r5
 800e572:	d41e      	bmi.n	800e5b2 <_malloc_r+0xc6>
 800e574:	2a0b      	cmp	r2, #11
 800e576:	d916      	bls.n	800e5a6 <_malloc_r+0xba>
 800e578:	1961      	adds	r1, r4, r5
 800e57a:	42a3      	cmp	r3, r4
 800e57c:	6025      	str	r5, [r4, #0]
 800e57e:	bf18      	it	ne
 800e580:	6059      	strne	r1, [r3, #4]
 800e582:	6863      	ldr	r3, [r4, #4]
 800e584:	bf08      	it	eq
 800e586:	6031      	streq	r1, [r6, #0]
 800e588:	5162      	str	r2, [r4, r5]
 800e58a:	604b      	str	r3, [r1, #4]
 800e58c:	4638      	mov	r0, r7
 800e58e:	f104 060b 	add.w	r6, r4, #11
 800e592:	f000 f865 	bl	800e660 <__malloc_unlock>
 800e596:	f026 0607 	bic.w	r6, r6, #7
 800e59a:	1d23      	adds	r3, r4, #4
 800e59c:	1af2      	subs	r2, r6, r3
 800e59e:	d0b6      	beq.n	800e50e <_malloc_r+0x22>
 800e5a0:	1b9b      	subs	r3, r3, r6
 800e5a2:	50a3      	str	r3, [r4, r2]
 800e5a4:	e7b3      	b.n	800e50e <_malloc_r+0x22>
 800e5a6:	6862      	ldr	r2, [r4, #4]
 800e5a8:	42a3      	cmp	r3, r4
 800e5aa:	bf0c      	ite	eq
 800e5ac:	6032      	streq	r2, [r6, #0]
 800e5ae:	605a      	strne	r2, [r3, #4]
 800e5b0:	e7ec      	b.n	800e58c <_malloc_r+0xa0>
 800e5b2:	4623      	mov	r3, r4
 800e5b4:	6864      	ldr	r4, [r4, #4]
 800e5b6:	e7b2      	b.n	800e51e <_malloc_r+0x32>
 800e5b8:	4634      	mov	r4, r6
 800e5ba:	6876      	ldr	r6, [r6, #4]
 800e5bc:	e7b9      	b.n	800e532 <_malloc_r+0x46>
 800e5be:	230c      	movs	r3, #12
 800e5c0:	603b      	str	r3, [r7, #0]
 800e5c2:	4638      	mov	r0, r7
 800e5c4:	f000 f84c 	bl	800e660 <__malloc_unlock>
 800e5c8:	e7a1      	b.n	800e50e <_malloc_r+0x22>
 800e5ca:	6025      	str	r5, [r4, #0]
 800e5cc:	e7de      	b.n	800e58c <_malloc_r+0xa0>
 800e5ce:	bf00      	nop
 800e5d0:	20005094 	.word	0x20005094

0800e5d4 <_realloc_r>:
 800e5d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5d8:	4680      	mov	r8, r0
 800e5da:	4614      	mov	r4, r2
 800e5dc:	460e      	mov	r6, r1
 800e5de:	b921      	cbnz	r1, 800e5ea <_realloc_r+0x16>
 800e5e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e5e4:	4611      	mov	r1, r2
 800e5e6:	f7ff bf81 	b.w	800e4ec <_malloc_r>
 800e5ea:	b92a      	cbnz	r2, 800e5f8 <_realloc_r+0x24>
 800e5ec:	f7ff ff12 	bl	800e414 <_free_r>
 800e5f0:	4625      	mov	r5, r4
 800e5f2:	4628      	mov	r0, r5
 800e5f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5f8:	f000 f838 	bl	800e66c <_malloc_usable_size_r>
 800e5fc:	4284      	cmp	r4, r0
 800e5fe:	4607      	mov	r7, r0
 800e600:	d802      	bhi.n	800e608 <_realloc_r+0x34>
 800e602:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e606:	d812      	bhi.n	800e62e <_realloc_r+0x5a>
 800e608:	4621      	mov	r1, r4
 800e60a:	4640      	mov	r0, r8
 800e60c:	f7ff ff6e 	bl	800e4ec <_malloc_r>
 800e610:	4605      	mov	r5, r0
 800e612:	2800      	cmp	r0, #0
 800e614:	d0ed      	beq.n	800e5f2 <_realloc_r+0x1e>
 800e616:	42bc      	cmp	r4, r7
 800e618:	4622      	mov	r2, r4
 800e61a:	4631      	mov	r1, r6
 800e61c:	bf28      	it	cs
 800e61e:	463a      	movcs	r2, r7
 800e620:	f7fe fec6 	bl	800d3b0 <memcpy>
 800e624:	4631      	mov	r1, r6
 800e626:	4640      	mov	r0, r8
 800e628:	f7ff fef4 	bl	800e414 <_free_r>
 800e62c:	e7e1      	b.n	800e5f2 <_realloc_r+0x1e>
 800e62e:	4635      	mov	r5, r6
 800e630:	e7df      	b.n	800e5f2 <_realloc_r+0x1e>
	...

0800e634 <_sbrk_r>:
 800e634:	b538      	push	{r3, r4, r5, lr}
 800e636:	4d06      	ldr	r5, [pc, #24]	; (800e650 <_sbrk_r+0x1c>)
 800e638:	2300      	movs	r3, #0
 800e63a:	4604      	mov	r4, r0
 800e63c:	4608      	mov	r0, r1
 800e63e:	602b      	str	r3, [r5, #0]
 800e640:	f7f5 fb06 	bl	8003c50 <_sbrk>
 800e644:	1c43      	adds	r3, r0, #1
 800e646:	d102      	bne.n	800e64e <_sbrk_r+0x1a>
 800e648:	682b      	ldr	r3, [r5, #0]
 800e64a:	b103      	cbz	r3, 800e64e <_sbrk_r+0x1a>
 800e64c:	6023      	str	r3, [r4, #0]
 800e64e:	bd38      	pop	{r3, r4, r5, pc}
 800e650:	2000508c 	.word	0x2000508c

0800e654 <__malloc_lock>:
 800e654:	4801      	ldr	r0, [pc, #4]	; (800e65c <__malloc_lock+0x8>)
 800e656:	f7ff bec1 	b.w	800e3dc <__retarget_lock_acquire_recursive>
 800e65a:	bf00      	nop
 800e65c:	20005090 	.word	0x20005090

0800e660 <__malloc_unlock>:
 800e660:	4801      	ldr	r0, [pc, #4]	; (800e668 <__malloc_unlock+0x8>)
 800e662:	f7ff bebc 	b.w	800e3de <__retarget_lock_release_recursive>
 800e666:	bf00      	nop
 800e668:	20005090 	.word	0x20005090

0800e66c <_malloc_usable_size_r>:
 800e66c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e670:	1f18      	subs	r0, r3, #4
 800e672:	2b00      	cmp	r3, #0
 800e674:	bfbc      	itt	lt
 800e676:	580b      	ldrlt	r3, [r1, r0]
 800e678:	18c0      	addlt	r0, r0, r3
 800e67a:	4770      	bx	lr

0800e67c <_init>:
 800e67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e67e:	bf00      	nop
 800e680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e682:	bc08      	pop	{r3}
 800e684:	469e      	mov	lr, r3
 800e686:	4770      	bx	lr

0800e688 <_fini>:
 800e688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e68a:	bf00      	nop
 800e68c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e68e:	bc08      	pop	{r3}
 800e690:	469e      	mov	lr, r3
 800e692:	4770      	bx	lr
