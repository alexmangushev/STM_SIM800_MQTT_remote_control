
F446RC_MQTT_monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce54  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e00  0800d024  0800d024  0001d024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800de24  0800de24  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  0800de24  0800de24  0001de24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800de2c  0800de2c  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800de2c  0800de2c  0001de2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800de30  0800de30  0001de30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0800de34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004fd0  2000009c  0800ded0  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000506c  0800ded0  0002506c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020187  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e41  00000000  00000000  00040253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b28  00000000  00000000  00044098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019d8  00000000  00000000  00045bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000049d8  00000000  00000000  00047598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f741  00000000  00000000  0004bf70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e07dd  00000000  00000000  0006b6b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014be8e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007cb8  00000000  00000000  0014bee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000009c 	.word	0x2000009c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d00c 	.word	0x0800d00c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a0 	.word	0x200000a0
 800020c:	0800d00c 	.word	0x0800d00c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <usMBCRC16>:
 */

#include "ModBusCRC.h"

uint16_t usMBCRC16(uint8_t * pucFrame, uint16_t usLen)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	460b      	mov	r3, r1
 80005ce:	807b      	strh	r3, [r7, #2]
	uint8_t           ucCRCHi = 0xFF;
 80005d0:	23ff      	movs	r3, #255	; 0xff
 80005d2:	73fb      	strb	r3, [r7, #15]
	uint8_t           ucCRCLo = 0xFF;
 80005d4:	23ff      	movs	r3, #255	; 0xff
 80005d6:	73bb      	strb	r3, [r7, #14]
    int             iIndex;

    while( usLen-- )
 80005d8:	e013      	b.n	8000602 <usMBCRC16+0x3e>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	1c5a      	adds	r2, r3, #1
 80005de:	607a      	str	r2, [r7, #4]
 80005e0:	781a      	ldrb	r2, [r3, #0]
 80005e2:	7bbb      	ldrb	r3, [r7, #14]
 80005e4:	4053      	eors	r3, r2
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	60bb      	str	r3, [r7, #8]
        ucCRCLo = ( uint8_t )( ucCRCHi ^ aucCRCHi[iIndex] );
 80005ea:	4a0f      	ldr	r2, [pc, #60]	; (8000628 <usMBCRC16+0x64>)
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	4413      	add	r3, r2
 80005f0:	781a      	ldrb	r2, [r3, #0]
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	4053      	eors	r3, r2
 80005f6:	73bb      	strb	r3, [r7, #14]
        ucCRCHi = aucCRCLo[iIndex];
 80005f8:	4a0c      	ldr	r2, [pc, #48]	; (800062c <usMBCRC16+0x68>)
 80005fa:	68bb      	ldr	r3, [r7, #8]
 80005fc:	4413      	add	r3, r2
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	73fb      	strb	r3, [r7, #15]
    while( usLen-- )
 8000602:	887b      	ldrh	r3, [r7, #2]
 8000604:	1e5a      	subs	r2, r3, #1
 8000606:	807a      	strh	r2, [r7, #2]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d1e6      	bne.n	80005da <usMBCRC16+0x16>
    }
    return ( uint16_t )( ucCRCHi << 8 | ucCRCLo );
 800060c:	7bfb      	ldrb	r3, [r7, #15]
 800060e:	021b      	lsls	r3, r3, #8
 8000610:	b21a      	sxth	r2, r3
 8000612:	7bbb      	ldrb	r3, [r7, #14]
 8000614:	b21b      	sxth	r3, r3
 8000616:	4313      	orrs	r3, r2
 8000618:	b21b      	sxth	r3, r3
 800061a:	b29b      	uxth	r3, r3
}
 800061c:	4618      	mov	r0, r3
 800061e:	3714      	adds	r7, #20
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr
 8000628:	0800d878 	.word	0x0800d878
 800062c:	0800d978 	.word	0x0800d978

08000630 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000634:	f003 fa68 	bl	8003b08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000638:	f000 f8ca 	bl	80007d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063c:	f000 fa34 	bl	8000aa8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000640:	f000 f9ec 	bl	8000a1c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000644:	f000 f996 	bl	8000974 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000648:	f000 f9be 	bl	80009c8 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 800064c:	f000 f95c 	bl	8000908 <MX_SPI2_Init>
  MX_I2C1_Init();
 8000650:	f000 f92c 	bl	80008ac <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000654:	f007 fb36 	bl	8007cc4 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of UART1Mutex */
  UART1MutexHandle = osMutexNew(&UART1Mutex_attributes);
 8000658:	4839      	ldr	r0, [pc, #228]	; (8000740 <main+0x110>)
 800065a:	f007 fd17 	bl	800808c <osMutexNew>
 800065e:	4603      	mov	r3, r0
 8000660:	4a38      	ldr	r2, [pc, #224]	; (8000744 <main+0x114>)
 8000662:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of PINGSem */
  PINGSemHandle = osSemaphoreNew(1, 0, &PINGSem_attributes);
 8000664:	4a38      	ldr	r2, [pc, #224]	; (8000748 <main+0x118>)
 8000666:	2100      	movs	r1, #0
 8000668:	2001      	movs	r0, #1
 800066a:	f007 fe1d 	bl	80082a8 <osSemaphoreNew>
 800066e:	4603      	mov	r3, r0
 8000670:	4a36      	ldr	r2, [pc, #216]	; (800074c <main+0x11c>)
 8000672:	6013      	str	r3, [r2, #0]

  /* creation of SemGetData */
  SemGetDataHandle = osSemaphoreNew(1, 0, &SemGetData_attributes);
 8000674:	4a36      	ldr	r2, [pc, #216]	; (8000750 <main+0x120>)
 8000676:	2100      	movs	r1, #0
 8000678:	2001      	movs	r0, #1
 800067a:	f007 fe15 	bl	80082a8 <osSemaphoreNew>
 800067e:	4603      	mov	r3, r0
 8000680:	4a34      	ldr	r2, [pc, #208]	; (8000754 <main+0x124>)
 8000682:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of PingTimer */
  PingTimerHandle = osTimerNew(CallbackPingTimer, osTimerPeriodic, NULL, &PingTimer_attributes);
 8000684:	4b34      	ldr	r3, [pc, #208]	; (8000758 <main+0x128>)
 8000686:	2200      	movs	r2, #0
 8000688:	2101      	movs	r1, #1
 800068a:	4834      	ldr	r0, [pc, #208]	; (800075c <main+0x12c>)
 800068c:	f007 fc54 	bl	8007f38 <osTimerNew>
 8000690:	4603      	mov	r3, r0
 8000692:	4a33      	ldr	r2, [pc, #204]	; (8000760 <main+0x130>)
 8000694:	6013      	str	r3, [r2, #0]

  /* creation of DataTimer */
  DataTimerHandle = osTimerNew(CallbackDataTimer, osTimerPeriodic, NULL, &DataTimer_attributes);
 8000696:	4b33      	ldr	r3, [pc, #204]	; (8000764 <main+0x134>)
 8000698:	2200      	movs	r2, #0
 800069a:	2101      	movs	r1, #1
 800069c:	4832      	ldr	r0, [pc, #200]	; (8000768 <main+0x138>)
 800069e:	f007 fc4b 	bl	8007f38 <osTimerNew>
 80006a2:	4603      	mov	r3, r0
 80006a4:	4a31      	ldr	r2, [pc, #196]	; (800076c <main+0x13c>)
 80006a6:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of debugQueue */
  debugQueueHandle = osMessageQueueNew (10, sizeof(message_type), &debugQueue_attributes);
 80006a8:	4a31      	ldr	r2, [pc, #196]	; (8000770 <main+0x140>)
 80006aa:	2146      	movs	r1, #70	; 0x46
 80006ac:	200a      	movs	r0, #10
 80006ae:	f007 ff1b 	bl	80084e8 <osMessageQueueNew>
 80006b2:	4603      	mov	r3, r0
 80006b4:	4a2f      	ldr	r2, [pc, #188]	; (8000774 <main+0x144>)
 80006b6:	6013      	str	r3, [r2, #0]

  /* creation of SIM800SendQueue */
  SIM800SendQueueHandle = osMessageQueueNew (10, sizeof(message_type), &SIM800SendQueue_attributes);
 80006b8:	4a2f      	ldr	r2, [pc, #188]	; (8000778 <main+0x148>)
 80006ba:	2146      	movs	r1, #70	; 0x46
 80006bc:	200a      	movs	r0, #10
 80006be:	f007 ff13 	bl	80084e8 <osMessageQueueNew>
 80006c2:	4603      	mov	r3, r0
 80006c4:	4a2d      	ldr	r2, [pc, #180]	; (800077c <main+0x14c>)
 80006c6:	6013      	str	r3, [r2, #0]

  /* creation of RxSIM800Queue */
  RxSIM800QueueHandle = osMessageQueueNew (10, sizeof(message_type), &RxSIM800Queue_attributes);
 80006c8:	4a2d      	ldr	r2, [pc, #180]	; (8000780 <main+0x150>)
 80006ca:	2146      	movs	r1, #70	; 0x46
 80006cc:	200a      	movs	r0, #10
 80006ce:	f007 ff0b 	bl	80084e8 <osMessageQueueNew>
 80006d2:	4603      	mov	r3, r0
 80006d4:	4a2b      	ldr	r2, [pc, #172]	; (8000784 <main+0x154>)
 80006d6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006d8:	4a2b      	ldr	r2, [pc, #172]	; (8000788 <main+0x158>)
 80006da:	2100      	movs	r1, #0
 80006dc:	482b      	ldr	r0, [pc, #172]	; (800078c <main+0x15c>)
 80006de:	f007 fb3b 	bl	8007d58 <osThreadNew>
 80006e2:	4603      	mov	r3, r0
 80006e4:	4a2a      	ldr	r2, [pc, #168]	; (8000790 <main+0x160>)
 80006e6:	6013      	str	r3, [r2, #0]

  /* creation of GetDataTask */
  GetDataTaskHandle = osThreadNew(StartGetDataTask, NULL, &GetDataTask_attributes);
 80006e8:	4a2a      	ldr	r2, [pc, #168]	; (8000794 <main+0x164>)
 80006ea:	2100      	movs	r1, #0
 80006ec:	482a      	ldr	r0, [pc, #168]	; (8000798 <main+0x168>)
 80006ee:	f007 fb33 	bl	8007d58 <osThreadNew>
 80006f2:	4603      	mov	r3, r0
 80006f4:	4a29      	ldr	r2, [pc, #164]	; (800079c <main+0x16c>)
 80006f6:	6013      	str	r3, [r2, #0]

  /* creation of DebugTask */
  DebugTaskHandle = osThreadNew(StartDebugTask, NULL, &DebugTask_attributes);
 80006f8:	4a29      	ldr	r2, [pc, #164]	; (80007a0 <main+0x170>)
 80006fa:	2100      	movs	r1, #0
 80006fc:	4829      	ldr	r0, [pc, #164]	; (80007a4 <main+0x174>)
 80006fe:	f007 fb2b 	bl	8007d58 <osThreadNew>
 8000702:	4603      	mov	r3, r0
 8000704:	4a28      	ldr	r2, [pc, #160]	; (80007a8 <main+0x178>)
 8000706:	6013      	str	r3, [r2, #0]

  /* creation of SIM800SendTask */
  SIM800SendTaskHandle = osThreadNew(StartSIM800SendTask, NULL, &SIM800SendTask_attributes);
 8000708:	4a28      	ldr	r2, [pc, #160]	; (80007ac <main+0x17c>)
 800070a:	2100      	movs	r1, #0
 800070c:	4828      	ldr	r0, [pc, #160]	; (80007b0 <main+0x180>)
 800070e:	f007 fb23 	bl	8007d58 <osThreadNew>
 8000712:	4603      	mov	r3, r0
 8000714:	4a27      	ldr	r2, [pc, #156]	; (80007b4 <main+0x184>)
 8000716:	6013      	str	r3, [r2, #0]

  /* creation of PINGTask */
  //PINGTaskHandle = osThreadNew(PINGStartTask, NULL, &PINGTask_attributes);

  /* creation of SIM800StartTask */
  SIM800StartTaskHandle = osThreadNew(StartSIM800Task, NULL, &SIM800StartTask_attributes);
 8000718:	4a27      	ldr	r2, [pc, #156]	; (80007b8 <main+0x188>)
 800071a:	2100      	movs	r1, #0
 800071c:	4827      	ldr	r0, [pc, #156]	; (80007bc <main+0x18c>)
 800071e:	f007 fb1b 	bl	8007d58 <osThreadNew>
 8000722:	4603      	mov	r3, r0
 8000724:	4a26      	ldr	r2, [pc, #152]	; (80007c0 <main+0x190>)
 8000726:	6013      	str	r3, [r2, #0]

  /* creation of MQTTConnectTask */
  //MQTTConnectTaskHandle = osThreadNew(StartMQTTConnectTask, NULL, &MQTTConnectTask_attributes);

  /* creation of MessHandlerTask */
  MessHandlerTaskHandle = osThreadNew(StartMessHandlerTask, NULL, &MessHandlerTask_attributes);
 8000728:	4a26      	ldr	r2, [pc, #152]	; (80007c4 <main+0x194>)
 800072a:	2100      	movs	r1, #0
 800072c:	4826      	ldr	r0, [pc, #152]	; (80007c8 <main+0x198>)
 800072e:	f007 fb13 	bl	8007d58 <osThreadNew>
 8000732:	4603      	mov	r3, r0
 8000734:	4a25      	ldr	r2, [pc, #148]	; (80007cc <main+0x19c>)
 8000736:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000738:	f007 fae8 	bl	8007d0c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800073c:	e7fe      	b.n	800073c <main+0x10c>
 800073e:	bf00      	nop
 8000740:	0800dc24 	.word	0x0800dc24
 8000744:	200003a4 	.word	0x200003a4
 8000748:	0800dc34 	.word	0x0800dc34
 800074c:	200003a8 	.word	0x200003a8
 8000750:	0800dc44 	.word	0x0800dc44
 8000754:	200003ac 	.word	0x200003ac
 8000758:	0800dc04 	.word	0x0800dc04
 800075c:	08002c81 	.word	0x08002c81
 8000760:	2000039c 	.word	0x2000039c
 8000764:	0800dc14 	.word	0x0800dc14
 8000768:	08002ca1 	.word	0x08002ca1
 800076c:	200003a0 	.word	0x200003a0
 8000770:	0800dbbc 	.word	0x0800dbbc
 8000774:	20000390 	.word	0x20000390
 8000778:	0800dbd4 	.word	0x0800dbd4
 800077c:	20000394 	.word	0x20000394
 8000780:	0800dbec 	.word	0x0800dbec
 8000784:	20000398 	.word	0x20000398
 8000788:	0800da78 	.word	0x0800da78
 800078c:	08000fc5 	.word	0x08000fc5
 8000790:	2000036c 	.word	0x2000036c
 8000794:	0800da9c 	.word	0x0800da9c
 8000798:	08001049 	.word	0x08001049
 800079c:	20000370 	.word	0x20000370
 80007a0:	0800dac0 	.word	0x0800dac0
 80007a4:	08001281 	.word	0x08001281
 80007a8:	20000374 	.word	0x20000374
 80007ac:	0800dae4 	.word	0x0800dae4
 80007b0:	080012a1 	.word	0x080012a1
 80007b4:	20000378 	.word	0x20000378
 80007b8:	0800db2c 	.word	0x0800db2c
 80007bc:	080016bd 	.word	0x080016bd
 80007c0:	20000380 	.word	0x20000380
 80007c4:	0800db74 	.word	0x0800db74
 80007c8:	080021cd 	.word	0x080021cd
 80007cc:	20000388 	.word	0x20000388

080007d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b094      	sub	sp, #80	; 0x50
 80007d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	2234      	movs	r2, #52	; 0x34
 80007dc:	2100      	movs	r1, #0
 80007de:	4618      	mov	r0, r3
 80007e0:	f00b fabc 	bl	800bd5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e4:	f107 0308 	add.w	r3, r7, #8
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f4:	2300      	movs	r3, #0
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	4b2a      	ldr	r3, [pc, #168]	; (80008a4 <SystemClock_Config+0xd4>)
 80007fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fc:	4a29      	ldr	r2, [pc, #164]	; (80008a4 <SystemClock_Config+0xd4>)
 80007fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000802:	6413      	str	r3, [r2, #64]	; 0x40
 8000804:	4b27      	ldr	r3, [pc, #156]	; (80008a4 <SystemClock_Config+0xd4>)
 8000806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000810:	2300      	movs	r3, #0
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	4b24      	ldr	r3, [pc, #144]	; (80008a8 <SystemClock_Config+0xd8>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800081c:	4a22      	ldr	r2, [pc, #136]	; (80008a8 <SystemClock_Config+0xd8>)
 800081e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000822:	6013      	str	r3, [r2, #0]
 8000824:	4b20      	ldr	r3, [pc, #128]	; (80008a8 <SystemClock_Config+0xd8>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800082c:	603b      	str	r3, [r7, #0]
 800082e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000830:	2302      	movs	r3, #2
 8000832:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000834:	2301      	movs	r3, #1
 8000836:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000838:	2310      	movs	r3, #16
 800083a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800083c:	2302      	movs	r3, #2
 800083e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000840:	2300      	movs	r3, #0
 8000842:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000844:	2310      	movs	r3, #16
 8000846:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000848:	23c0      	movs	r3, #192	; 0xc0
 800084a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800084c:	2302      	movs	r3, #2
 800084e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000850:	2302      	movs	r3, #2
 8000852:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000854:	2302      	movs	r3, #2
 8000856:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000858:	f107 031c 	add.w	r3, r7, #28
 800085c:	4618      	mov	r0, r3
 800085e:	f004 fcd3 	bl	8005208 <HAL_RCC_OscConfig>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000868:	f002 fa3c 	bl	8002ce4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086c:	230f      	movs	r3, #15
 800086e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000870:	2302      	movs	r3, #2
 8000872:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000874:	2300      	movs	r3, #0
 8000876:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000878:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800087c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800087e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000882:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000884:	f107 0308 	add.w	r3, r7, #8
 8000888:	2103      	movs	r1, #3
 800088a:	4618      	mov	r0, r3
 800088c:	f004 f9c6 	bl	8004c1c <HAL_RCC_ClockConfig>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000896:	f002 fa25 	bl	8002ce4 <Error_Handler>
  }
}
 800089a:	bf00      	nop
 800089c:	3750      	adds	r7, #80	; 0x50
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40007000 	.word	0x40007000

080008ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <MX_I2C1_Init+0x50>)
 80008b2:	4a13      	ldr	r2, [pc, #76]	; (8000900 <MX_I2C1_Init+0x54>)
 80008b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008b6:	4b11      	ldr	r3, [pc, #68]	; (80008fc <MX_I2C1_Init+0x50>)
 80008b8:	4a12      	ldr	r2, [pc, #72]	; (8000904 <MX_I2C1_Init+0x58>)
 80008ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008bc:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <MX_I2C1_Init+0x50>)
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <MX_I2C1_Init+0x50>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <MX_I2C1_Init+0x50>)
 80008ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008d0:	4b0a      	ldr	r3, [pc, #40]	; (80008fc <MX_I2C1_Init+0x50>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <MX_I2C1_Init+0x50>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008dc:	4b07      	ldr	r3, [pc, #28]	; (80008fc <MX_I2C1_Init+0x50>)
 80008de:	2200      	movs	r2, #0
 80008e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <MX_I2C1_Init+0x50>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008e8:	4804      	ldr	r0, [pc, #16]	; (80008fc <MX_I2C1_Init+0x50>)
 80008ea:	f004 f853 	bl	8004994 <HAL_I2C_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008f4:	f002 f9f6 	bl	8002ce4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008f8:	bf00      	nop
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	200000b8 	.word	0x200000b8
 8000900:	40005400 	.word	0x40005400
 8000904:	000186a0 	.word	0x000186a0

08000908 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800090c:	4b17      	ldr	r3, [pc, #92]	; (800096c <MX_SPI2_Init+0x64>)
 800090e:	4a18      	ldr	r2, [pc, #96]	; (8000970 <MX_SPI2_Init+0x68>)
 8000910:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000912:	4b16      	ldr	r3, [pc, #88]	; (800096c <MX_SPI2_Init+0x64>)
 8000914:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000918:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800091a:	4b14      	ldr	r3, [pc, #80]	; (800096c <MX_SPI2_Init+0x64>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000920:	4b12      	ldr	r3, [pc, #72]	; (800096c <MX_SPI2_Init+0x64>)
 8000922:	2200      	movs	r2, #0
 8000924:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000926:	4b11      	ldr	r3, [pc, #68]	; (800096c <MX_SPI2_Init+0x64>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800092c:	4b0f      	ldr	r3, [pc, #60]	; (800096c <MX_SPI2_Init+0x64>)
 800092e:	2200      	movs	r2, #0
 8000930:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <MX_SPI2_Init+0x64>)
 8000934:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000938:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800093a:	4b0c      	ldr	r3, [pc, #48]	; (800096c <MX_SPI2_Init+0x64>)
 800093c:	2200      	movs	r2, #0
 800093e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000940:	4b0a      	ldr	r3, [pc, #40]	; (800096c <MX_SPI2_Init+0x64>)
 8000942:	2200      	movs	r2, #0
 8000944:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <MX_SPI2_Init+0x64>)
 8000948:	2200      	movs	r2, #0
 800094a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800094c:	4b07      	ldr	r3, [pc, #28]	; (800096c <MX_SPI2_Init+0x64>)
 800094e:	2200      	movs	r2, #0
 8000950:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000952:	4b06      	ldr	r3, [pc, #24]	; (800096c <MX_SPI2_Init+0x64>)
 8000954:	220a      	movs	r2, #10
 8000956:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000958:	4804      	ldr	r0, [pc, #16]	; (800096c <MX_SPI2_Init+0x64>)
 800095a:	f004 fef3 	bl	8005744 <HAL_SPI_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000964:	f002 f9be 	bl	8002ce4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}
 800096c:	2000010c 	.word	0x2000010c
 8000970:	40003800 	.word	0x40003800

08000974 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000978:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <MX_USART1_UART_Init+0x4c>)
 800097a:	4a12      	ldr	r2, [pc, #72]	; (80009c4 <MX_USART1_UART_Init+0x50>)
 800097c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <MX_USART1_UART_Init+0x4c>)
 8000980:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000984:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000986:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <MX_USART1_UART_Init+0x4c>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800098c:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <MX_USART1_UART_Init+0x4c>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000992:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <MX_USART1_UART_Init+0x4c>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000998:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <MX_USART1_UART_Init+0x4c>)
 800099a:	220c      	movs	r2, #12
 800099c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099e:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <MX_USART1_UART_Init+0x4c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <MX_USART1_UART_Init+0x4c>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009aa:	4805      	ldr	r0, [pc, #20]	; (80009c0 <MX_USART1_UART_Init+0x4c>)
 80009ac:	f005 fdaa 	bl	8006504 <HAL_UART_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009b6:	f002 f995 	bl	8002ce4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000164 	.word	0x20000164
 80009c4:	40011000 	.word	0x40011000

080009c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009cc:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <MX_USART2_UART_Init+0x4c>)
 80009ce:	4a12      	ldr	r2, [pc, #72]	; (8000a18 <MX_USART2_UART_Init+0x50>)
 80009d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80009d2:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <MX_USART2_UART_Init+0x4c>)
 80009d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009da:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <MX_USART2_UART_Init+0x4c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009e0:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <MX_USART2_UART_Init+0x4c>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009e6:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <MX_USART2_UART_Init+0x4c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009ec:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <MX_USART2_UART_Init+0x4c>)
 80009ee:	220c      	movs	r2, #12
 80009f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009f2:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <MX_USART2_UART_Init+0x4c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f8:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <MX_USART2_UART_Init+0x4c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009fe:	4805      	ldr	r0, [pc, #20]	; (8000a14 <MX_USART2_UART_Init+0x4c>)
 8000a00:	f005 fd80 	bl	8006504 <HAL_UART_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a0a:	f002 f96b 	bl	8002ce4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	200001a8 	.word	0x200001a8
 8000a18:	40004400 	.word	0x40004400

08000a1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	4b1f      	ldr	r3, [pc, #124]	; (8000aa4 <MX_DMA_Init+0x88>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a1e      	ldr	r2, [pc, #120]	; (8000aa4 <MX_DMA_Init+0x88>)
 8000a2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b1c      	ldr	r3, [pc, #112]	; (8000aa4 <MX_DMA_Init+0x88>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	603b      	str	r3, [r7, #0]
 8000a42:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <MX_DMA_Init+0x88>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a17      	ldr	r2, [pc, #92]	; (8000aa4 <MX_DMA_Init+0x88>)
 8000a48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <MX_DMA_Init+0x88>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a56:	603b      	str	r3, [r7, #0]
 8000a58:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2105      	movs	r1, #5
 8000a5e:	2010      	movs	r0, #16
 8000a60:	f003 f987 	bl	8003d72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000a64:	2010      	movs	r0, #16
 8000a66:	f003 f9a0 	bl	8003daa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2105      	movs	r1, #5
 8000a6e:	2011      	movs	r0, #17
 8000a70:	f003 f97f 	bl	8003d72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000a74:	2011      	movs	r0, #17
 8000a76:	f003 f998 	bl	8003daa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2105      	movs	r1, #5
 8000a7e:	203a      	movs	r0, #58	; 0x3a
 8000a80:	f003 f977 	bl	8003d72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000a84:	203a      	movs	r0, #58	; 0x3a
 8000a86:	f003 f990 	bl	8003daa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2105      	movs	r1, #5
 8000a8e:	2046      	movs	r0, #70	; 0x46
 8000a90:	f003 f96f 	bl	8003d72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000a94:	2046      	movs	r0, #70	; 0x46
 8000a96:	f003 f988 	bl	8003daa <HAL_NVIC_EnableIRQ>

}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40023800 	.word	0x40023800

08000aa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b088      	sub	sp, #32
 8000aac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aae:	f107 030c 	add.w	r3, r7, #12
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	60da      	str	r2, [r3, #12]
 8000abc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	4b44      	ldr	r3, [pc, #272]	; (8000bd4 <MX_GPIO_Init+0x12c>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a43      	ldr	r2, [pc, #268]	; (8000bd4 <MX_GPIO_Init+0x12c>)
 8000ac8:	f043 0304 	orr.w	r3, r3, #4
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b41      	ldr	r3, [pc, #260]	; (8000bd4 <MX_GPIO_Init+0x12c>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0304 	and.w	r3, r3, #4
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	4b3d      	ldr	r3, [pc, #244]	; (8000bd4 <MX_GPIO_Init+0x12c>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a3c      	ldr	r2, [pc, #240]	; (8000bd4 <MX_GPIO_Init+0x12c>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b3a      	ldr	r3, [pc, #232]	; (8000bd4 <MX_GPIO_Init+0x12c>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	603b      	str	r3, [r7, #0]
 8000afa:	4b36      	ldr	r3, [pc, #216]	; (8000bd4 <MX_GPIO_Init+0x12c>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a35      	ldr	r2, [pc, #212]	; (8000bd4 <MX_GPIO_Init+0x12c>)
 8000b00:	f043 0302 	orr.w	r3, r3, #2
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b33      	ldr	r3, [pc, #204]	; (8000bd4 <MX_GPIO_Init+0x12c>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f003 0302 	and.w	r3, r3, #2
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_3, GPIO_PIN_SET);
 8000b12:	2201      	movs	r2, #1
 8000b14:	210a      	movs	r1, #10
 8000b16:	4830      	ldr	r0, [pc, #192]	; (8000bd8 <MX_GPIO_Init+0x130>)
 8000b18:	f003 ff08 	bl	800492c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	2140      	movs	r1, #64	; 0x40
 8000b20:	482e      	ldr	r0, [pc, #184]	; (8000bdc <MX_GPIO_Init+0x134>)
 8000b22:	f003 ff03 	bl	800492c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(temp_GPIO_Port, temp_Pin, GPIO_PIN_RESET);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2180      	movs	r1, #128	; 0x80
 8000b2a:	482c      	ldr	r0, [pc, #176]	; (8000bdc <MX_GPIO_Init+0x134>)
 8000b2c:	f003 fefe 	bl	800492c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SIM_START_Pin|SIM_RESET_Pin, GPIO_PIN_RESET);
 8000b30:	2200      	movs	r2, #0
 8000b32:	2130      	movs	r1, #48	; 0x30
 8000b34:	4828      	ldr	r0, [pc, #160]	; (8000bd8 <MX_GPIO_Init+0x130>)
 8000b36:	f003 fef9 	bl	800492c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b40:	4827      	ldr	r0, [pc, #156]	; (8000be0 <MX_GPIO_Init+0x138>)
 8000b42:	f003 fef3 	bl	800492c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC3 SIM_START_Pin SIM_RESET_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|SIM_START_Pin|SIM_RESET_Pin;
 8000b46:	233a      	movs	r3, #58	; 0x3a
 8000b48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b56:	f107 030c 	add.w	r3, r7, #12
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	481e      	ldr	r0, [pc, #120]	; (8000bd8 <MX_GPIO_Init+0x130>)
 8000b5e:	f003 fd39 	bl	80045d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b62:	2304      	movs	r3, #4
 8000b64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b66:	2300      	movs	r3, #0
 8000b68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b6e:	f107 030c 	add.w	r3, r7, #12
 8000b72:	4619      	mov	r1, r3
 8000b74:	4818      	ldr	r0, [pc, #96]	; (8000bd8 <MX_GPIO_Init+0x130>)
 8000b76:	f003 fd2d 	bl	80045d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b7a:	2310      	movs	r3, #16
 8000b7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b82:	2301      	movs	r3, #1
 8000b84:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b86:	f107 030c 	add.w	r3, r7, #12
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4813      	ldr	r0, [pc, #76]	; (8000bdc <MX_GPIO_Init+0x134>)
 8000b8e:	f003 fd21 	bl	80045d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 temp_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_6|temp_Pin;
 8000b92:	23c0      	movs	r3, #192	; 0xc0
 8000b94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b96:	2301      	movs	r3, #1
 8000b98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba2:	f107 030c 	add.w	r3, r7, #12
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	480c      	ldr	r0, [pc, #48]	; (8000bdc <MX_GPIO_Init+0x134>)
 8000baa:	f003 fd13 	bl	80045d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_CS_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 8000bae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bb2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 8000bc0:	f107 030c 	add.w	r3, r7, #12
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4806      	ldr	r0, [pc, #24]	; (8000be0 <MX_GPIO_Init+0x138>)
 8000bc8:	f003 fd04 	bl	80045d4 <HAL_GPIO_Init>

}
 8000bcc:	bf00      	nop
 8000bce:	3720      	adds	r7, #32
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40020800 	.word	0x40020800
 8000bdc:	40020000 	.word	0x40020000
 8000be0:	40020400 	.word	0x40020400

08000be4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4a06      	ldr	r2, [pc, #24]	; (8000c08 <HAL_UART_RxCpltCallback+0x24>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d102      	bne.n	8000bfa <HAL_UART_RxCpltCallback+0x16>
	{
		UART2_RX_finish = 1;
 8000bf4:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <HAL_UART_RxCpltCallback+0x28>)
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	701a      	strb	r2, [r3, #0]
	}
}
 8000bfa:	bf00      	nop
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	200001a8 	.word	0x200001a8
 8000c0c:	200003b8 	.word	0x200003b8

08000c10 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	4a06      	ldr	r2, [pc, #24]	; (8000c34 <HAL_UART_TxCpltCallback+0x24>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d102      	bne.n	8000c26 <HAL_UART_TxCpltCallback+0x16>
	{
		UART2_TX_finish = 1;
 8000c20:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <HAL_UART_TxCpltCallback+0x28>)
 8000c22:	2201      	movs	r2, #1
 8000c24:	701a      	strb	r2, [r3, #0]
	}
}
 8000c26:	bf00      	nop
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	200001a8 	.word	0x200001a8
 8000c38:	200003b7 	.word	0x200003b7

08000c3c <SPI2_Init_Master>:

void SPI2_Init_Master(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8000c50:	2201      	movs	r2, #1
 8000c52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c56:	4810      	ldr	r0, [pc, #64]	; (8000c98 <SPI2_Init_Master+0x5c>)
 8000c58:	f003 fe68 	bl	800492c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : FLASH_CS_Pin */
	GPIO_InitStruct.Pin = FLASH_CS_Pin;
 8000c5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c60:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c62:	2301      	movs	r3, #1
 8000c64:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	4619      	mov	r1, r3
 8000c72:	4809      	ldr	r0, [pc, #36]	; (8000c98 <SPI2_Init_Master+0x5c>)
 8000c74:	f003 fcae 	bl	80045d4 <HAL_GPIO_Init>

	hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c78:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <SPI2_Init_Master+0x60>)
 8000c7a:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c7e:	605a      	str	r2, [r3, #4]
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c80:	4806      	ldr	r0, [pc, #24]	; (8000c9c <SPI2_Init_Master+0x60>)
 8000c82:	f004 fd5f 	bl	8005744 <HAL_SPI_Init>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <SPI2_Init_Master+0x54>
	{
		Error_Handler();
 8000c8c:	f002 f82a 	bl	8002ce4 <Error_Handler>
	}
}
 8000c90:	bf00      	nop
 8000c92:	3718      	adds	r7, #24
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40020400 	.word	0x40020400
 8000c9c:	2000010c 	.word	0x2000010c

08000ca0 <Make_MQTT_send_string>:
  * @param  send_MQTT_message[] String, where will be result.
  * @param  msg[] struct with message for sending with MQTT.
 */

void Make_MQTT_send_string(uint8_t send_MQTT_message[], message_type msg)
{
 8000ca0:	b084      	sub	sp, #16
 8000ca2:	b590      	push	{r4, r7, lr}
 8000ca4:	b083      	sub	sp, #12
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
 8000caa:	f107 001c 	add.w	r0, r7, #28
 8000cae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	send_MQTT_message[0] = 0x30;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2230      	movs	r2, #48	; 0x30
 8000cb6:	701a      	strb	r2, [r3, #0]
    send_MQTT_message[1] = strlen(msg.str) + strlen(TOPIC) + 2;
 8000cb8:	f107 031c 	add.w	r3, r7, #28
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff faa7 	bl	8000210 <strlen>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	b2dc      	uxtb	r4, r3
 8000cc6:	4819      	ldr	r0, [pc, #100]	; (8000d2c <Make_MQTT_send_string+0x8c>)
 8000cc8:	f7ff faa2 	bl	8000210 <strlen>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	4423      	add	r3, r4
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	3202      	adds	r2, #2
 8000cda:	b2d2      	uxtb	r2, r2
 8000cdc:	701a      	strb	r2, [r3, #0]
    send_MQTT_message[2] = 0;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	3302      	adds	r3, #2
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	701a      	strb	r2, [r3, #0]
    send_MQTT_message[3] = strlen(TOPIC);
 8000ce6:	4811      	ldr	r0, [pc, #68]	; (8000d2c <Make_MQTT_send_string+0x8c>)
 8000ce8:	f7ff fa92 	bl	8000210 <strlen>
 8000cec:	4602      	mov	r2, r0
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	3303      	adds	r3, #3
 8000cf2:	b2d2      	uxtb	r2, r2
 8000cf4:	701a      	strb	r2, [r3, #0]
    sprintf(send_MQTT_message + 4,"%s",TOPIC);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	3304      	adds	r3, #4
 8000cfa:	4a0c      	ldr	r2, [pc, #48]	; (8000d2c <Make_MQTT_send_string+0x8c>)
 8000cfc:	490c      	ldr	r1, [pc, #48]	; (8000d30 <Make_MQTT_send_string+0x90>)
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f00b f868 	bl	800bdd4 <siprintf>
    sprintf(send_MQTT_message + 4 + strlen(TOPIC),"%s",msg.str);
 8000d04:	4809      	ldr	r0, [pc, #36]	; (8000d2c <Make_MQTT_send_string+0x8c>)
 8000d06:	f7ff fa83 	bl	8000210 <strlen>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	3304      	adds	r3, #4
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	4413      	add	r3, r2
 8000d12:	f107 021c 	add.w	r2, r7, #28
 8000d16:	4906      	ldr	r1, [pc, #24]	; (8000d30 <Make_MQTT_send_string+0x90>)
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f00b f85b 	bl	800bdd4 <siprintf>
}
 8000d1e:	bf00      	nop
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000d28:	b004      	add	sp, #16
 8000d2a:	4770      	bx	lr
 8000d2c:	20000010 	.word	0x20000010
 8000d30:	0800d108 	.word	0x0800d108

08000d34 <String_in_SIM800BuffRx>:
  * @param  exm[] String, that we search in Receive buffer SIM800.
  * @retval Is string in Receive buffer SIM800.
 */

uint8_t String_in_SIM800BuffRx(uint8_t exm[])
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(exm);
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f7ff fa67 	bl	8000210 <strlen>
 8000d42:	4603      	mov	r3, r0
 8000d44:	733b      	strb	r3, [r7, #12]
	uint8_t ans = 0;
 8000d46:	2300      	movs	r3, #0
 8000d48:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < BUFF_SIM_SIZE - len; i++)
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	73bb      	strb	r3, [r7, #14]
 8000d4e:	e025      	b.n	8000d9c <String_in_SIM800BuffRx+0x68>
	{
		if (SIM800BuffRx[i] == exm[0])
 8000d50:	7bbb      	ldrb	r3, [r7, #14]
 8000d52:	4a19      	ldr	r2, [pc, #100]	; (8000db8 <String_in_SIM800BuffRx+0x84>)
 8000d54:	5cd2      	ldrb	r2, [r2, r3]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d11b      	bne.n	8000d96 <String_in_SIM800BuffRx+0x62>
		{
			ans = 1;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	73fb      	strb	r3, [r7, #15]
			for (uint8_t k = 0; k < len; k++)
 8000d62:	2300      	movs	r3, #0
 8000d64:	737b      	strb	r3, [r7, #13]
 8000d66:	e00f      	b.n	8000d88 <String_in_SIM800BuffRx+0x54>
			{
				if (SIM800BuffRx[i+k] != exm[k])
 8000d68:	7bba      	ldrb	r2, [r7, #14]
 8000d6a:	7b7b      	ldrb	r3, [r7, #13]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	4a12      	ldr	r2, [pc, #72]	; (8000db8 <String_in_SIM800BuffRx+0x84>)
 8000d70:	5cd2      	ldrb	r2, [r2, r3]
 8000d72:	7b7b      	ldrb	r3, [r7, #13]
 8000d74:	6879      	ldr	r1, [r7, #4]
 8000d76:	440b      	add	r3, r1
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	d001      	beq.n	8000d82 <String_in_SIM800BuffRx+0x4e>
				{
					ans = 0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	73fb      	strb	r3, [r7, #15]
			for (uint8_t k = 0; k < len; k++)
 8000d82:	7b7b      	ldrb	r3, [r7, #13]
 8000d84:	3301      	adds	r3, #1
 8000d86:	737b      	strb	r3, [r7, #13]
 8000d88:	7b7a      	ldrb	r2, [r7, #13]
 8000d8a:	7b3b      	ldrb	r3, [r7, #12]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d3eb      	bcc.n	8000d68 <String_in_SIM800BuffRx+0x34>
				}
			}
			if (ans)
 8000d90:	7bfb      	ldrb	r3, [r7, #15]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d109      	bne.n	8000daa <String_in_SIM800BuffRx+0x76>
	for (uint8_t i = 0; i < BUFF_SIM_SIZE - len; i++)
 8000d96:	7bbb      	ldrb	r3, [r7, #14]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	73bb      	strb	r3, [r7, #14]
 8000d9c:	7bba      	ldrb	r2, [r7, #14]
 8000d9e:	7b3b      	ldrb	r3, [r7, #12]
 8000da0:	f1c3 034c 	rsb	r3, r3, #76	; 0x4c
 8000da4:	429a      	cmp	r2, r3
 8000da6:	dbd3      	blt.n	8000d50 <String_in_SIM800BuffRx+0x1c>
 8000da8:	e000      	b.n	8000dac <String_in_SIM800BuffRx+0x78>
				break;
 8000daa:	bf00      	nop
		}
	}
	return ans;
 8000dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	2000041c 	.word	0x2000041c

08000dbc <String_in_String>:

uint8_t String_in_String(uint8_t str[], uint8_t size, uint8_t exm[])
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	607a      	str	r2, [r7, #4]
 8000dc8:	72fb      	strb	r3, [r7, #11]
	uint8_t len = strlen(exm);
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f7ff fa20 	bl	8000210 <strlen>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	753b      	strb	r3, [r7, #20]
	uint8_t ans = 0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	75fb      	strb	r3, [r7, #23]
	for (uint8_t i = 0; i < size - len; i++)
 8000dd8:	2300      	movs	r3, #0
 8000dda:	75bb      	strb	r3, [r7, #22]
 8000ddc:	e028      	b.n	8000e30 <String_in_String+0x74>
	{
		if (str[i] == exm[0])
 8000dde:	7dbb      	ldrb	r3, [r7, #22]
 8000de0:	68fa      	ldr	r2, [r7, #12]
 8000de2:	4413      	add	r3, r2
 8000de4:	781a      	ldrb	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	429a      	cmp	r2, r3
 8000dec:	d11d      	bne.n	8000e2a <String_in_String+0x6e>
		{
			ans = 1;
 8000dee:	2301      	movs	r3, #1
 8000df0:	75fb      	strb	r3, [r7, #23]
			for (uint8_t k = 0; k < len; k++)
 8000df2:	2300      	movs	r3, #0
 8000df4:	757b      	strb	r3, [r7, #21]
 8000df6:	e011      	b.n	8000e1c <String_in_String+0x60>
			{
				if (str[i+k] != exm[k])
 8000df8:	7dba      	ldrb	r2, [r7, #22]
 8000dfa:	7d7b      	ldrb	r3, [r7, #21]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	461a      	mov	r2, r3
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	4413      	add	r3, r2
 8000e04:	781a      	ldrb	r2, [r3, #0]
 8000e06:	7d7b      	ldrb	r3, [r7, #21]
 8000e08:	6879      	ldr	r1, [r7, #4]
 8000e0a:	440b      	add	r3, r1
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	d001      	beq.n	8000e16 <String_in_String+0x5a>
				{
					ans = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	75fb      	strb	r3, [r7, #23]
			for (uint8_t k = 0; k < len; k++)
 8000e16:	7d7b      	ldrb	r3, [r7, #21]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	757b      	strb	r3, [r7, #21]
 8000e1c:	7d7a      	ldrb	r2, [r7, #21]
 8000e1e:	7d3b      	ldrb	r3, [r7, #20]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d3e9      	bcc.n	8000df8 <String_in_String+0x3c>
				}
			}
			if (ans)
 8000e24:	7dfb      	ldrb	r3, [r7, #23]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d109      	bne.n	8000e3e <String_in_String+0x82>
	for (uint8_t i = 0; i < size - len; i++)
 8000e2a:	7dbb      	ldrb	r3, [r7, #22]
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	75bb      	strb	r3, [r7, #22]
 8000e30:	7dba      	ldrb	r2, [r7, #22]
 8000e32:	7af9      	ldrb	r1, [r7, #11]
 8000e34:	7d3b      	ldrb	r3, [r7, #20]
 8000e36:	1acb      	subs	r3, r1, r3
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	dbd0      	blt.n	8000dde <String_in_String+0x22>
 8000e3c:	e000      	b.n	8000e40 <String_in_String+0x84>
				break;
 8000e3e:	bf00      	nop
		}
	}
	return ans;
 8000e40:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3718      	adds	r7, #24
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
	...

08000e4c <USER_UART_IRQHandler>:

void USER_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
	// file stm32f1xx_hal_uart.c
	// comment
	// Set the UART DMA Half transfer complete callback
	// huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt

	if(huart == &huart1) //Determine whether it is serial port 1
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a28      	ldr	r2, [pc, #160]	; (8000ef8 <USER_UART_IRQHandler+0xac>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d148      	bne.n	8000eee <USER_UART_IRQHandler+0xa2>
	{
		if(RESET != __HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE))   //Judging whether it is idle interruption
 8000e5c:	4b26      	ldr	r3, [pc, #152]	; (8000ef8 <USER_UART_IRQHandler+0xac>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f003 0310 	and.w	r3, r3, #16
 8000e66:	2b10      	cmp	r3, #16
 8000e68:	d141      	bne.n	8000eee <USER_UART_IRQHandler+0xa2>
		{
			HAL_UART_DMAStop(&huart1);
 8000e6a:	4823      	ldr	r0, [pc, #140]	; (8000ef8 <USER_UART_IRQHandler+0xac>)
 8000e6c:	f005 fd1c 	bl	80068a8 <HAL_UART_DMAStop>
			__HAL_UART_CLEAR_IDLEFLAG(&huart1); //Clear idle interrupt sign (otherwise it will continue to enter interrupt)
 8000e70:	2300      	movs	r3, #0
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	4b20      	ldr	r3, [pc, #128]	; (8000ef8 <USER_UART_IRQHandler+0xac>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	4b1e      	ldr	r3, [pc, #120]	; (8000ef8 <USER_UART_IRQHandler+0xac>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
			RX = 1;
 8000e86:	4b1d      	ldr	r3, [pc, #116]	; (8000efc <USER_UART_IRQHandler+0xb0>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	701a      	strb	r2, [r3, #0]
			if (Broker_connect)
 8000e8c:	4b1c      	ldr	r3, [pc, #112]	; (8000f00 <USER_UART_IRQHandler+0xb4>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d02c      	beq.n	8000eee <USER_UART_IRQHandler+0xa2>
			{

				if (String_in_SIM800BuffRx(";;"))
 8000e94:	481b      	ldr	r0, [pc, #108]	; (8000f04 <USER_UART_IRQHandler+0xb8>)
 8000e96:	f7ff ff4d 	bl	8000d34 <String_in_SIM800BuffRx>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d018      	beq.n	8000ed2 <USER_UART_IRQHandler+0x86>
				{
					memcpy(&(Data_Queue.str), SIM800BuffRx, MESSAGE_TYPE_BUFF_SIZE);
 8000ea0:	4a19      	ldr	r2, [pc, #100]	; (8000f08 <USER_UART_IRQHandler+0xbc>)
 8000ea2:	4b1a      	ldr	r3, [pc, #104]	; (8000f0c <USER_UART_IRQHandler+0xc0>)
 8000ea4:	4610      	mov	r0, r2
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	2346      	movs	r3, #70	; 0x46
 8000eaa:	461a      	mov	r2, r3
 8000eac:	f00a ff48 	bl	800bd40 <memcpy>
					memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8000eb0:	224c      	movs	r2, #76	; 0x4c
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4815      	ldr	r0, [pc, #84]	; (8000f0c <USER_UART_IRQHandler+0xc0>)
 8000eb6:	f00a ff51 	bl	800bd5c <memset>
					osMessageQueuePut(RxSIM800QueueHandle, &Data_Queue, 0, NULL);
 8000eba:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <USER_UART_IRQHandler+0xc4>)
 8000ebc:	6818      	ldr	r0, [r3, #0]
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	4911      	ldr	r1, [pc, #68]	; (8000f08 <USER_UART_IRQHandler+0xbc>)
 8000ec4:	f007 fb84 	bl	80085d0 <osMessageQueuePut>
					HAL_UART_Receive_DMA(&huart1, SIM800BuffRx, BUFF_SIM_SIZE);
 8000ec8:	224c      	movs	r2, #76	; 0x4c
 8000eca:	4910      	ldr	r1, [pc, #64]	; (8000f0c <USER_UART_IRQHandler+0xc0>)
 8000ecc:	480a      	ldr	r0, [pc, #40]	; (8000ef8 <USER_UART_IRQHandler+0xac>)
 8000ece:	f005 fcbb 	bl	8006848 <HAL_UART_Receive_DMA>
				}

				if (!Tech_ans_wait)
 8000ed2:	4b10      	ldr	r3, [pc, #64]	; (8000f14 <USER_UART_IRQHandler+0xc8>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d109      	bne.n	8000eee <USER_UART_IRQHandler+0xa2>
				{
					memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8000eda:	224c      	movs	r2, #76	; 0x4c
 8000edc:	2100      	movs	r1, #0
 8000ede:	480b      	ldr	r0, [pc, #44]	; (8000f0c <USER_UART_IRQHandler+0xc0>)
 8000ee0:	f00a ff3c 	bl	800bd5c <memset>
					HAL_UART_Receive_DMA(&huart1, SIM800BuffRx, BUFF_SIM_SIZE);
 8000ee4:	224c      	movs	r2, #76	; 0x4c
 8000ee6:	4909      	ldr	r1, [pc, #36]	; (8000f0c <USER_UART_IRQHandler+0xc0>)
 8000ee8:	4803      	ldr	r0, [pc, #12]	; (8000ef8 <USER_UART_IRQHandler+0xac>)
 8000eea:	f005 fcad 	bl	8006848 <HAL_UART_Receive_DMA>

			}
			//HAL_UART_DMAStop(&huart1);
		}
	}
}
 8000eee:	bf00      	nop
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000164 	.word	0x20000164
 8000efc:	200003b3 	.word	0x200003b3
 8000f00:	200003b4 	.word	0x200003b4
 8000f04:	0800d10c 	.word	0x0800d10c
 8000f08:	200005f8 	.word	0x200005f8
 8000f0c:	2000041c 	.word	0x2000041c
 8000f10:	20000398 	.word	0x20000398
 8000f14:	200003b5 	.word	0x200003b5

08000f18 <SIM800_Ans>:
  * @brief  Waiting special answer from SIM800.
  * @param  exm[] String, that we expect.
  * @retval Is special answer in Receive buffer SIM800.
  */
uint8_t SIM800_Ans(uint8_t exm[])
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
	RX = 0;
 8000f20:	4b20      	ldr	r3, [pc, #128]	; (8000fa4 <SIM800_Ans+0x8c>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	701a      	strb	r2, [r3, #0]
	Tech_ans_wait = 1;
 8000f26:	4b20      	ldr	r3, [pc, #128]	; (8000fa8 <SIM800_Ans+0x90>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart1, SIM800BuffRx, BUFF_SIM_SIZE);
 8000f2c:	224c      	movs	r2, #76	; 0x4c
 8000f2e:	491f      	ldr	r1, [pc, #124]	; (8000fac <SIM800_Ans+0x94>)
 8000f30:	481f      	ldr	r0, [pc, #124]	; (8000fb0 <SIM800_Ans+0x98>)
 8000f32:	f005 fc89 	bl	8006848 <HAL_UART_Receive_DMA>

	SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // permission counter
 8000f36:	4b1f      	ldr	r3, [pc, #124]	; (8000fb4 <SIM800_Ans+0x9c>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a1e      	ldr	r2, [pc, #120]	; (8000fb4 <SIM800_Ans+0x9c>)
 8000f3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f40:	6013      	str	r3, [r2, #0]
	DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;   // start counter
 8000f42:	4b1d      	ldr	r3, [pc, #116]	; (8000fb8 <SIM800_Ans+0xa0>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a1c      	ldr	r2, [pc, #112]	; (8000fb8 <SIM800_Ans+0xa0>)
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	6013      	str	r3, [r2, #0]

	uint32_t tacts = HAL_RCC_GetSysClockFreq() / 1000000;
 8000f4e:	f003 ffb1 	bl	8004eb4 <HAL_RCC_GetSysClockFreq>
 8000f52:	4603      	mov	r3, r0
 8000f54:	4a19      	ldr	r2, [pc, #100]	; (8000fbc <SIM800_Ans+0xa4>)
 8000f56:	fba2 2303 	umull	r2, r3, r2, r3
 8000f5a:	0c9b      	lsrs	r3, r3, #18
 8000f5c:	60fb      	str	r3, [r7, #12]
	tacts *= 6000000; //timeout - 6s
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	4a17      	ldr	r2, [pc, #92]	; (8000fc0 <SIM800_Ans+0xa8>)
 8000f62:	fb02 f303 	mul.w	r3, r2, r3
 8000f66:	60fb      	str	r3, [r7, #12]
	DWT->CYCCNT = 0; // clear counter
 8000f68:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <SIM800_Ans+0xa0>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	605a      	str	r2, [r3, #4]
	while (RX != 1 && DWT->CYCCNT < tacts) {};
 8000f6e:	bf00      	nop
 8000f70:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <SIM800_Ans+0x8c>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d004      	beq.n	8000f82 <SIM800_Ans+0x6a>
 8000f78:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <SIM800_Ans+0xa0>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	68fa      	ldr	r2, [r7, #12]
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d8f6      	bhi.n	8000f70 <SIM800_Ans+0x58>
	Tech_ans_wait = 0;
 8000f82:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <SIM800_Ans+0x90>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	701a      	strb	r2, [r3, #0]
	if (!String_in_SIM800BuffRx(exm))
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f7ff fed3 	bl	8000d34 <String_in_SIM800BuffRx>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d101      	bne.n	8000f98 <SIM800_Ans+0x80>
	{
		return 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	e000      	b.n	8000f9a <SIM800_Ans+0x82>
	}
	else
	{
		return 1;
 8000f98:	2301      	movs	r3, #1
	}
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	200003b3 	.word	0x200003b3
 8000fa8:	200003b5 	.word	0x200003b5
 8000fac:	2000041c 	.word	0x2000041c
 8000fb0:	20000164 	.word	0x20000164
 8000fb4:	e000edfc 	.word	0xe000edfc
 8000fb8:	e0001000 	.word	0xe0001000
 8000fbc:	431bde83 	.word	0x431bde83
 8000fc0:	005b8d80 	.word	0x005b8d80

08000fc4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if (!Start_SIM800 && Error_init) //if we have problems with SIM800, restart it
 8000fcc:	4b15      	ldr	r3, [pc, #84]	; (8001024 <StartDefaultTask+0x60>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d10e      	bne.n	8000ff2 <StartDefaultTask+0x2e>
 8000fd4:	4b14      	ldr	r3, [pc, #80]	; (8001028 <StartDefaultTask+0x64>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d00a      	beq.n	8000ff2 <StartDefaultTask+0x2e>
	  {
		  Error_init = 0;
 8000fdc:	4b12      	ldr	r3, [pc, #72]	; (8001028 <StartDefaultTask+0x64>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	701a      	strb	r2, [r3, #0]
		  SIM800StartTaskHandle = osThreadNew(StartSIM800Task, NULL, &SIM800StartTask_attributes);
 8000fe2:	4a12      	ldr	r2, [pc, #72]	; (800102c <StartDefaultTask+0x68>)
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4812      	ldr	r0, [pc, #72]	; (8001030 <StartDefaultTask+0x6c>)
 8000fe8:	f006 feb6 	bl	8007d58 <osThreadNew>
 8000fec:	4603      	mov	r3, r0
 8000fee:	4a11      	ldr	r2, [pc, #68]	; (8001034 <StartDefaultTask+0x70>)
 8000ff0:	6013      	str	r3, [r2, #0]
	  }

	  //show that program works
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8000ff2:	2140      	movs	r1, #64	; 0x40
 8000ff4:	4810      	ldr	r0, [pc, #64]	; (8001038 <StartDefaultTask+0x74>)
 8000ff6:	f003 fcb2 	bl	800495e <HAL_GPIO_TogglePin>
	  osDelay(500);
 8000ffa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ffe:	f006 ff6a 	bl	8007ed6 <osDelay>

	  //if we have flag, start getting data
	  if (Get_data && Broker_connect)
 8001002:	4b0e      	ldr	r3, [pc, #56]	; (800103c <StartDefaultTask+0x78>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d0e0      	beq.n	8000fcc <StartDefaultTask+0x8>
 800100a:	4b0d      	ldr	r3, [pc, #52]	; (8001040 <StartDefaultTask+0x7c>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d0dc      	beq.n	8000fcc <StartDefaultTask+0x8>
	  {
		osSemaphoreRelease(SemGetDataHandle);
 8001012:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <StartDefaultTask+0x80>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4618      	mov	r0, r3
 8001018:	f007 fa22 	bl	8008460 <osSemaphoreRelease>
		Get_data = 0;
 800101c:	4b07      	ldr	r3, [pc, #28]	; (800103c <StartDefaultTask+0x78>)
 800101e:	2200      	movs	r2, #0
 8001020:	701a      	strb	r2, [r3, #0]
	  if (!Start_SIM800 && Error_init) //if we have problems with SIM800, restart it
 8001022:	e7d3      	b.n	8000fcc <StartDefaultTask+0x8>
 8001024:	200003b2 	.word	0x200003b2
 8001028:	200003b0 	.word	0x200003b0
 800102c:	0800db2c 	.word	0x0800db2c
 8001030:	080016bd 	.word	0x080016bd
 8001034:	20000380 	.word	0x20000380
 8001038:	40020000 	.word	0x40020000
 800103c:	200003b6 	.word	0x200003b6
 8001040:	200003b4 	.word	0x200003b4
 8001044:	200003ac 	.word	0x200003ac

08001048 <StartGetDataTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGetDataTask */
void StartGetDataTask(void *argument)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b09a      	sub	sp, #104	; 0x68
 800104c:	af02      	add	r7, sp, #8
 800104e:	6078      	str	r0, [r7, #4]
	uint16_t RS485CRC;
  /* Infinite loop */
  for(;;)
  {
	  // wait semaphore for measuring temperature
	  if (osSemaphoreAcquire(SemGetDataHandle, osWaitForever) == osOK)
 8001050:	4b7e      	ldr	r3, [pc, #504]	; (800124c <StartGetDataTask+0x204>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f04f 31ff 	mov.w	r1, #4294967295
 8001058:	4618      	mov	r0, r3
 800105a:	f007 f9af 	bl	80083bc <osSemaphoreAcquire>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d1f5      	bne.n	8001050 <StartGetDataTask+0x8>
	  {


		  SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // permission counter
 8001064:	4b7a      	ldr	r3, [pc, #488]	; (8001250 <StartGetDataTask+0x208>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a79      	ldr	r2, [pc, #484]	; (8001250 <StartGetDataTask+0x208>)
 800106a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800106e:	6013      	str	r3, [r2, #0]
		  DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;   // start counter
 8001070:	4b78      	ldr	r3, [pc, #480]	; (8001254 <StartGetDataTask+0x20c>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a77      	ldr	r2, [pc, #476]	; (8001254 <StartGetDataTask+0x20c>)
 8001076:	f043 0301 	orr.w	r3, r3, #1
 800107a:	6013      	str	r3, [r2, #0]

		  // get temp and humidity
		  // make string
		  RS485_buf[0] = 0x01; //slave address
 800107c:	4b76      	ldr	r3, [pc, #472]	; (8001258 <StartGetDataTask+0x210>)
 800107e:	2201      	movs	r2, #1
 8001080:	701a      	strb	r2, [r3, #0]
		  RS485_buf[1] = 0x04; //function code
 8001082:	4b75      	ldr	r3, [pc, #468]	; (8001258 <StartGetDataTask+0x210>)
 8001084:	2204      	movs	r2, #4
 8001086:	705a      	strb	r2, [r3, #1]
		  RS485_buf[2] = 0x00; //
 8001088:	4b73      	ldr	r3, [pc, #460]	; (8001258 <StartGetDataTask+0x210>)
 800108a:	2200      	movs	r2, #0
 800108c:	709a      	strb	r2, [r3, #2]
		  RS485_buf[3] = 0x01; // starting address
 800108e:	4b72      	ldr	r3, [pc, #456]	; (8001258 <StartGetDataTask+0x210>)
 8001090:	2201      	movs	r2, #1
 8001092:	70da      	strb	r2, [r3, #3]
		  RS485_buf[4] = 0x00; //
 8001094:	4b70      	ldr	r3, [pc, #448]	; (8001258 <StartGetDataTask+0x210>)
 8001096:	2200      	movs	r2, #0
 8001098:	711a      	strb	r2, [r3, #4]
		  RS485_buf[5] = 0x02; // count of register
 800109a:	4b6f      	ldr	r3, [pc, #444]	; (8001258 <StartGetDataTask+0x210>)
 800109c:	2202      	movs	r2, #2
 800109e:	715a      	strb	r2, [r3, #5]

		  // calculate CRC
		  RS485CRC = usMBCRC16(RS485_buf, 6);
 80010a0:	2106      	movs	r1, #6
 80010a2:	486d      	ldr	r0, [pc, #436]	; (8001258 <StartGetDataTask+0x210>)
 80010a4:	f7ff fa8e 	bl	80005c4 <usMBCRC16>
 80010a8:	4603      	mov	r3, r0
 80010aa:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
		  RS485_buf[6] = RS485CRC;
 80010ae:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80010b2:	b2da      	uxtb	r2, r3
 80010b4:	4b68      	ldr	r3, [pc, #416]	; (8001258 <StartGetDataTask+0x210>)
 80010b6:	719a      	strb	r2, [r3, #6]
		  RS485CRC >>= 8;
 80010b8:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80010bc:	0a1b      	lsrs	r3, r3, #8
 80010be:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
		  RS485_buf[7] = RS485CRC;
 80010c2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	4b63      	ldr	r3, [pc, #396]	; (8001258 <StartGetDataTask+0x210>)
 80010ca:	71da      	strb	r2, [r3, #7]

		  // send request
		  UART2_TX_finish = 0;
 80010cc:	4b63      	ldr	r3, [pc, #396]	; (800125c <StartGetDataTask+0x214>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
 80010d2:	2201      	movs	r2, #1
 80010d4:	2108      	movs	r1, #8
 80010d6:	4862      	ldr	r0, [pc, #392]	; (8001260 <StartGetDataTask+0x218>)
 80010d8:	f003 fc28 	bl	800492c <HAL_GPIO_WritePin>
		  HAL_UART_Transmit_DMA(&huart2, RS485_buf, 8);
 80010dc:	2208      	movs	r2, #8
 80010de:	495e      	ldr	r1, [pc, #376]	; (8001258 <StartGetDataTask+0x210>)
 80010e0:	4860      	ldr	r0, [pc, #384]	; (8001264 <StartGetDataTask+0x21c>)
 80010e2:	f005 fb33 	bl	800674c <HAL_UART_Transmit_DMA>

		  uint32_t tacts = HAL_RCC_GetSysClockFreq() / 1000000;
 80010e6:	f003 fee5 	bl	8004eb4 <HAL_RCC_GetSysClockFreq>
 80010ea:	4603      	mov	r3, r0
 80010ec:	4a5e      	ldr	r2, [pc, #376]	; (8001268 <StartGetDataTask+0x220>)
 80010ee:	fba2 2303 	umull	r2, r3, r2, r3
 80010f2:	0c9b      	lsrs	r3, r3, #18
 80010f4:	657b      	str	r3, [r7, #84]	; 0x54
		  tacts *= 3000000; //timeout - 3s
 80010f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010f8:	4a5c      	ldr	r2, [pc, #368]	; (800126c <StartGetDataTask+0x224>)
 80010fa:	fb02 f303 	mul.w	r3, r2, r3
 80010fe:	657b      	str	r3, [r7, #84]	; 0x54
		  DWT->CYCCNT = 0; // clear counter
 8001100:	4b54      	ldr	r3, [pc, #336]	; (8001254 <StartGetDataTask+0x20c>)
 8001102:	2200      	movs	r2, #0
 8001104:	605a      	str	r2, [r3, #4]
		  while (!UART2_TX_finish && DWT->CYCCNT < tacts) {}
 8001106:	bf00      	nop
 8001108:	4b54      	ldr	r3, [pc, #336]	; (800125c <StartGetDataTask+0x214>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d104      	bne.n	800111a <StartGetDataTask+0xd2>
 8001110:	4b50      	ldr	r3, [pc, #320]	; (8001254 <StartGetDataTask+0x20c>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001116:	429a      	cmp	r2, r3
 8001118:	d8f6      	bhi.n	8001108 <StartGetDataTask+0xc0>

		  // get ans
		  UART2_RX_finish = 0;
 800111a:	4b55      	ldr	r3, [pc, #340]	; (8001270 <StartGetDataTask+0x228>)
 800111c:	2200      	movs	r2, #0
 800111e:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 8001120:	2200      	movs	r2, #0
 8001122:	2108      	movs	r1, #8
 8001124:	484e      	ldr	r0, [pc, #312]	; (8001260 <StartGetDataTask+0x218>)
 8001126:	f003 fc01 	bl	800492c <HAL_GPIO_WritePin>
		  HAL_UART_Receive_DMA(&huart2, RS485_buf, 9);
 800112a:	2209      	movs	r2, #9
 800112c:	494a      	ldr	r1, [pc, #296]	; (8001258 <StartGetDataTask+0x210>)
 800112e:	484d      	ldr	r0, [pc, #308]	; (8001264 <StartGetDataTask+0x21c>)
 8001130:	f005 fb8a 	bl	8006848 <HAL_UART_Receive_DMA>
		  tacts = HAL_RCC_GetSysClockFreq() / 1000000;
 8001134:	f003 febe 	bl	8004eb4 <HAL_RCC_GetSysClockFreq>
 8001138:	4603      	mov	r3, r0
 800113a:	4a4b      	ldr	r2, [pc, #300]	; (8001268 <StartGetDataTask+0x220>)
 800113c:	fba2 2303 	umull	r2, r3, r2, r3
 8001140:	0c9b      	lsrs	r3, r3, #18
 8001142:	657b      	str	r3, [r7, #84]	; 0x54
		  tacts *= 3000000; //timeout - 3s
 8001144:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001146:	4a49      	ldr	r2, [pc, #292]	; (800126c <StartGetDataTask+0x224>)
 8001148:	fb02 f303 	mul.w	r3, r2, r3
 800114c:	657b      	str	r3, [r7, #84]	; 0x54
		  DWT->CYCCNT = 0; // clear counter
 800114e:	4b41      	ldr	r3, [pc, #260]	; (8001254 <StartGetDataTask+0x20c>)
 8001150:	2200      	movs	r2, #0
 8001152:	605a      	str	r2, [r3, #4]
		  while (!UART2_RX_finish && DWT->CYCCNT < tacts) {}
 8001154:	bf00      	nop
 8001156:	4b46      	ldr	r3, [pc, #280]	; (8001270 <StartGetDataTask+0x228>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d104      	bne.n	8001168 <StartGetDataTask+0x120>
 800115e:	4b3d      	ldr	r3, [pc, #244]	; (8001254 <StartGetDataTask+0x20c>)
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001164:	429a      	cmp	r2, r3
 8001166:	d8f6      	bhi.n	8001156 <StartGetDataTask+0x10e>

		  // calculate CRC
		  RS485CRC = usMBCRC16(RS485_buf, 7);
 8001168:	2107      	movs	r1, #7
 800116a:	483b      	ldr	r0, [pc, #236]	; (8001258 <StartGetDataTask+0x210>)
 800116c:	f7ff fa2a 	bl	80005c4 <usMBCRC16>
 8001170:	4603      	mov	r3, r0
 8001172:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
		  uint16_t RS485CRC1 = (uint16_t)( RS485_buf[8] << 8 | RS485_buf[7] );
 8001176:	4b38      	ldr	r3, [pc, #224]	; (8001258 <StartGetDataTask+0x210>)
 8001178:	7a1b      	ldrb	r3, [r3, #8]
 800117a:	021b      	lsls	r3, r3, #8
 800117c:	b21a      	sxth	r2, r3
 800117e:	4b36      	ldr	r3, [pc, #216]	; (8001258 <StartGetDataTask+0x210>)
 8001180:	79db      	ldrb	r3, [r3, #7]
 8001182:	b21b      	sxth	r3, r3
 8001184:	4313      	orrs	r3, r2
 8001186:	b21b      	sxth	r3, r3
 8001188:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
		  uint8_t ok = (RS485CRC1 == RS485CRC) ? 1 : 0;
 800118c:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8001190:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8001194:	429a      	cmp	r2, r3
 8001196:	bf0c      	ite	eq
 8001198:	2301      	moveq	r3, #1
 800119a:	2300      	movne	r3, #0
 800119c:	b2db      	uxtb	r3, r3
 800119e:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51

		  if (ok)
 80011a2:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d026      	beq.n	80011f8 <StartGetDataTask+0x1b0>
		  {
			  temp = (uint16_t)( RS485_buf[3] << 8 | RS485_buf[4] );
 80011aa:	4b2b      	ldr	r3, [pc, #172]	; (8001258 <StartGetDataTask+0x210>)
 80011ac:	78db      	ldrb	r3, [r3, #3]
 80011ae:	021b      	lsls	r3, r3, #8
 80011b0:	b21a      	sxth	r2, r3
 80011b2:	4b29      	ldr	r3, [pc, #164]	; (8001258 <StartGetDataTask+0x210>)
 80011b4:	791b      	ldrb	r3, [r3, #4]
 80011b6:	b21b      	sxth	r3, r3
 80011b8:	4313      	orrs	r3, r2
 80011ba:	b21b      	sxth	r3, r3
 80011bc:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
			  humidity = (uint16_t)( RS485_buf[5] << 8 | RS485_buf[6] );
 80011c0:	4b25      	ldr	r3, [pc, #148]	; (8001258 <StartGetDataTask+0x210>)
 80011c2:	795b      	ldrb	r3, [r3, #5]
 80011c4:	021b      	lsls	r3, r3, #8
 80011c6:	b21a      	sxth	r2, r3
 80011c8:	4b23      	ldr	r3, [pc, #140]	; (8001258 <StartGetDataTask+0x210>)
 80011ca:	799b      	ldrb	r3, [r3, #6]
 80011cc:	b21b      	sxth	r3, r3
 80011ce:	4313      	orrs	r3, r2
 80011d0:	b21b      	sxth	r3, r3
 80011d2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

			  temp /= 10;
 80011d6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80011da:	4a26      	ldr	r2, [pc, #152]	; (8001274 <StartGetDataTask+0x22c>)
 80011dc:	fba2 2303 	umull	r2, r3, r2, r3
 80011e0:	08db      	lsrs	r3, r3, #3
 80011e2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
			  humidity /= 10;
 80011e6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80011ea:	4a22      	ldr	r2, [pc, #136]	; (8001274 <StartGetDataTask+0x22c>)
 80011ec:	fba2 2303 	umull	r2, r3, r2, r3
 80011f0:	08db      	lsrs	r3, r3, #3
 80011f2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80011f6:	e005      	b.n	8001204 <StartGetDataTask+0x1bc>
		  }
		  else
		  {
			  temp = 146;
 80011f8:	2392      	movs	r3, #146	; 0x92
 80011fa:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
			  humidity = 146;
 80011fe:	2392      	movs	r3, #146	; 0x92
 8001200:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

		  // get smoke and move


		  // get power
		  power = !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);
 8001204:	2104      	movs	r1, #4
 8001206:	4816      	ldr	r0, [pc, #88]	; (8001260 <StartGetDataTask+0x218>)
 8001208:	f003 fb78 	bl	80048fc <HAL_GPIO_ReadPin>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	bf0c      	ite	eq
 8001212:	2301      	moveq	r3, #1
 8001214:	2300      	movne	r3, #0
 8001216:	b2db      	uxtb	r3, r3
 8001218:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50

		  // put string with data to queue
		  sprintf(&(msg.str), "{\"temp\":%d,\"humidity\":%d,\"power\":%d}\r\n\0", temp, humidity, power);
 800121c:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8001220:	f8b7 105c 	ldrh.w	r1, [r7, #92]	; 0x5c
 8001224:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001228:	f107 0008 	add.w	r0, r7, #8
 800122c:	9300      	str	r3, [sp, #0]
 800122e:	460b      	mov	r3, r1
 8001230:	4911      	ldr	r1, [pc, #68]	; (8001278 <StartGetDataTask+0x230>)
 8001232:	f00a fdcf 	bl	800bdd4 <siprintf>
		  osMessageQueuePut(SIM800SendQueueHandle, &msg, 0, osWaitForever);
 8001236:	4b11      	ldr	r3, [pc, #68]	; (800127c <StartGetDataTask+0x234>)
 8001238:	6818      	ldr	r0, [r3, #0]
 800123a:	f107 0108 	add.w	r1, r7, #8
 800123e:	f04f 33ff 	mov.w	r3, #4294967295
 8001242:	2200      	movs	r2, #0
 8001244:	f007 f9c4 	bl	80085d0 <osMessageQueuePut>
	  if (osSemaphoreAcquire(SemGetDataHandle, osWaitForever) == osOK)
 8001248:	e702      	b.n	8001050 <StartGetDataTask+0x8>
 800124a:	bf00      	nop
 800124c:	200003ac 	.word	0x200003ac
 8001250:	e000edfc 	.word	0xe000edfc
 8001254:	e0001000 	.word	0xe0001000
 8001258:	200003bc 	.word	0x200003bc
 800125c:	200003b7 	.word	0x200003b7
 8001260:	40020800 	.word	0x40020800
 8001264:	200001a8 	.word	0x200001a8
 8001268:	431bde83 	.word	0x431bde83
 800126c:	002dc6c0 	.word	0x002dc6c0
 8001270:	200003b8 	.word	0x200003b8
 8001274:	cccccccd 	.word	0xcccccccd
 8001278:	0800d110 	.word	0x0800d110
 800127c:	20000394 	.word	0x20000394

08001280 <StartDebugTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDebugTask */
void StartDebugTask(void *argument)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b094      	sub	sp, #80	; 0x50
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDebugTask */
	message_type msg;
  /* Infinite loop */
  for(;;)
  {
	  if (osMessageQueueGet(debugQueueHandle, &msg, 0, osWaitForever) == osOK)
 8001288:	4b04      	ldr	r3, [pc, #16]	; (800129c <StartDebugTask+0x1c>)
 800128a:	6818      	ldr	r0, [r3, #0]
 800128c:	f107 0108 	add.w	r1, r7, #8
 8001290:	f04f 33ff 	mov.w	r3, #4294967295
 8001294:	2200      	movs	r2, #0
 8001296:	f007 f9fb 	bl	8008690 <osMessageQueueGet>
 800129a:	e7f5      	b.n	8001288 <StartDebugTask+0x8>
 800129c:	20000390 	.word	0x20000390

080012a0 <StartSIM800SendTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSIM800SendTask */
void StartSIM800SendTask(void *argument)
{
 80012a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012a2:	b0b9      	sub	sp, #228	; 0xe4
 80012a4:	af10      	add	r7, sp, #64	; 0x40
 80012a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSIM800SendTask */
	message_type msg;

	//+ message_len(1 byte) + topic_len(2 bytes) + topic + message
    uint8_t send_MQTT_message[BUFF_SIM_SIZE] = {};
 80012a8:	2300      	movs	r3, #0
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	f107 0310 	add.w	r3, r7, #16
 80012b0:	2248      	movs	r2, #72	; 0x48
 80012b2:	2100      	movs	r1, #0
 80012b4:	4618      	mov	r0, r3
 80012b6:	f00a fd51 	bl	800bd5c <memset>
    uint8_t ans;
  /* Infinite loop */
  for(;;)
  {
	  if (osMessageQueueGet(SIM800SendQueueHandle, &msg, 0, osWaitForever) == osOK)
 80012ba:	4b50      	ldr	r3, [pc, #320]	; (80013fc <StartSIM800SendTask+0x15c>)
 80012bc:	6818      	ldr	r0, [r3, #0]
 80012be:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80012c2:	f04f 33ff 	mov.w	r3, #4294967295
 80012c6:	2200      	movs	r2, #0
 80012c8:	f007 f9e2 	bl	8008690 <osMessageQueueGet>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1f3      	bne.n	80012ba <StartSIM800SendTask+0x1a>
	  {
		  if (osMutexAcquire(UART1MutexHandle, osWaitForever) == osOK)
 80012d2:	4b4b      	ldr	r3, [pc, #300]	; (8001400 <StartSIM800SendTask+0x160>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f04f 31ff 	mov.w	r1, #4294967295
 80012da:	4618      	mov	r0, r3
 80012dc:	f006 ff5c 	bl	8008198 <osMutexAcquire>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1e9      	bne.n	80012ba <StartSIM800SendTask+0x1a>
		  {
			  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 80012e6:	4b47      	ldr	r3, [pc, #284]	; (8001404 <StartSIM800SendTask+0x164>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	68da      	ldr	r2, [r3, #12]
 80012ec:	4b45      	ldr	r3, [pc, #276]	; (8001404 <StartSIM800SendTask+0x164>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f042 0210 	orr.w	r2, r2, #16
 80012f4:	60da      	str	r2, [r3, #12]

			  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80012f6:	224c      	movs	r2, #76	; 0x4c
 80012f8:	2100      	movs	r1, #0
 80012fa:	4843      	ldr	r0, [pc, #268]	; (8001408 <StartSIM800SendTask+0x168>)
 80012fc:	f00a fd2e 	bl	800bd5c <memset>
			  sprintf(send_MQTT_message,"AT+CIPSEND=%d\r\n\0",strlen(msg.str) + strlen(TOPIC) + 4);
 8001300:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001304:	4618      	mov	r0, r3
 8001306:	f7fe ff83 	bl	8000210 <strlen>
 800130a:	4604      	mov	r4, r0
 800130c:	483f      	ldr	r0, [pc, #252]	; (800140c <StartSIM800SendTask+0x16c>)
 800130e:	f7fe ff7f 	bl	8000210 <strlen>
 8001312:	4603      	mov	r3, r0
 8001314:	4423      	add	r3, r4
 8001316:	1d1a      	adds	r2, r3, #4
 8001318:	f107 030c 	add.w	r3, r7, #12
 800131c:	493c      	ldr	r1, [pc, #240]	; (8001410 <StartSIM800SendTask+0x170>)
 800131e:	4618      	mov	r0, r3
 8001320:	f00a fd58 	bl	800bdd4 <siprintf>
			  HAL_UART_Transmit_DMA(&huart1, send_MQTT_message, strlen(send_MQTT_message));
 8001324:	f107 030c 	add.w	r3, r7, #12
 8001328:	4618      	mov	r0, r3
 800132a:	f7fe ff71 	bl	8000210 <strlen>
 800132e:	4603      	mov	r3, r0
 8001330:	b29a      	uxth	r2, r3
 8001332:	f107 030c 	add.w	r3, r7, #12
 8001336:	4619      	mov	r1, r3
 8001338:	4832      	ldr	r0, [pc, #200]	; (8001404 <StartSIM800SendTask+0x164>)
 800133a:	f005 fa07 	bl	800674c <HAL_UART_Transmit_DMA>
			  ans = SIM800_Ans(">");
 800133e:	4835      	ldr	r0, [pc, #212]	; (8001414 <StartSIM800SendTask+0x174>)
 8001340:	f7ff fdea 	bl	8000f18 <SIM800_Ans>
 8001344:	4603      	mov	r3, r0
 8001346:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			  if (!ans)
			  {

			  }
			  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 800134a:	224c      	movs	r2, #76	; 0x4c
 800134c:	2100      	movs	r1, #0
 800134e:	482e      	ldr	r0, [pc, #184]	; (8001408 <StartSIM800SendTask+0x168>)
 8001350:	f00a fd04 	bl	800bd5c <memset>
			  osDelay(100);
 8001354:	2064      	movs	r0, #100	; 0x64
 8001356:	f006 fdbe 	bl	8007ed6 <osDelay>

			  //make string for transmit
			  Make_MQTT_send_string(send_MQTT_message, msg);
 800135a:	f107 060c 	add.w	r6, r7, #12
 800135e:	466c      	mov	r4, sp
 8001360:	f107 0564 	add.w	r5, r7, #100	; 0x64
 8001364:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001366:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001368:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800136a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800136c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800136e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001370:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001374:	c403      	stmia	r4!, {r0, r1}
 8001376:	8022      	strh	r2, [r4, #0]
 8001378:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800137c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800137e:	4630      	mov	r0, r6
 8001380:	f7ff fc8e 	bl	8000ca0 <Make_MQTT_send_string>
			  HAL_UART_Transmit_DMA(&huart1, send_MQTT_message, strlen(msg.str) + strlen(TOPIC) + 4);
 8001384:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001388:	4618      	mov	r0, r3
 800138a:	f7fe ff41 	bl	8000210 <strlen>
 800138e:	4603      	mov	r3, r0
 8001390:	b29c      	uxth	r4, r3
 8001392:	481e      	ldr	r0, [pc, #120]	; (800140c <StartSIM800SendTask+0x16c>)
 8001394:	f7fe ff3c 	bl	8000210 <strlen>
 8001398:	4603      	mov	r3, r0
 800139a:	b29b      	uxth	r3, r3
 800139c:	4423      	add	r3, r4
 800139e:	b29b      	uxth	r3, r3
 80013a0:	3304      	adds	r3, #4
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	f107 030c 	add.w	r3, r7, #12
 80013a8:	4619      	mov	r1, r3
 80013aa:	4816      	ldr	r0, [pc, #88]	; (8001404 <StartSIM800SendTask+0x164>)
 80013ac:	f005 f9ce 	bl	800674c <HAL_UART_Transmit_DMA>

			  ans = SIM800_Ans("\x30"); //our transmited message
 80013b0:	4819      	ldr	r0, [pc, #100]	; (8001418 <StartSIM800SendTask+0x178>)
 80013b2:	f7ff fdb1 	bl	8000f18 <SIM800_Ans>
 80013b6:	4603      	mov	r3, r0
 80013b8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			  if (!ans)
 80013bc:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d10a      	bne.n	80013da <StartSIM800SendTask+0x13a>
			  {
				  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80013c4:	224c      	movs	r2, #76	; 0x4c
 80013c6:	2100      	movs	r1, #0
 80013c8:	480f      	ldr	r0, [pc, #60]	; (8001408 <StartSIM800SendTask+0x168>)
 80013ca:	f00a fcc7 	bl	800bd5c <memset>
				  ans = SIM800_Ans("\x30"); //our transmited message
 80013ce:	4812      	ldr	r0, [pc, #72]	; (8001418 <StartSIM800SendTask+0x178>)
 80013d0:	f7ff fda2 	bl	8000f18 <SIM800_Ans>
 80013d4:	4603      	mov	r3, r0
 80013d6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				  {

				  }
			  }

			  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80013da:	224c      	movs	r2, #76	; 0x4c
 80013dc:	2100      	movs	r1, #0
 80013de:	480a      	ldr	r0, [pc, #40]	; (8001408 <StartSIM800SendTask+0x168>)
 80013e0:	f00a fcbc 	bl	800bd5c <memset>
			  HAL_UART_Receive_DMA(&huart1, SIM800BuffRx, BUFF_SIM_SIZE);
 80013e4:	224c      	movs	r2, #76	; 0x4c
 80013e6:	4908      	ldr	r1, [pc, #32]	; (8001408 <StartSIM800SendTask+0x168>)
 80013e8:	4806      	ldr	r0, [pc, #24]	; (8001404 <StartSIM800SendTask+0x164>)
 80013ea:	f005 fa2d 	bl	8006848 <HAL_UART_Receive_DMA>
			  osMutexRelease(UART1MutexHandle); //release UART for SIM800
 80013ee:	4b04      	ldr	r3, [pc, #16]	; (8001400 <StartSIM800SendTask+0x160>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f006 ff1b 	bl	800822e <osMutexRelease>
	  if (osMessageQueueGet(SIM800SendQueueHandle, &msg, 0, osWaitForever) == osOK)
 80013f8:	e75f      	b.n	80012ba <StartSIM800SendTask+0x1a>
 80013fa:	bf00      	nop
 80013fc:	20000394 	.word	0x20000394
 8001400:	200003a4 	.word	0x200003a4
 8001404:	20000164 	.word	0x20000164
 8001408:	2000041c 	.word	0x2000041c
 800140c:	20000010 	.word	0x20000010
 8001410:	0800d138 	.word	0x0800d138
 8001414:	0800d14c 	.word	0x0800d14c
 8001418:	0800d150 	.word	0x0800d150

0800141c <PINGStartTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_PINGStartTask */
void PINGStartTask(void *argument)
{
 800141c:	b5b0      	push	{r4, r5, r7, lr}
 800141e:	b0a8      	sub	sp, #160	; 0xa0
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PINGStartTask */
	message_type msg;
	uint8_t send_MQTT_message[BUFF_SIM_SIZE] = {};
 8001424:	2300      	movs	r3, #0
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	f107 0310 	add.w	r3, r7, #16
 800142c:	2248      	movs	r2, #72	; 0x48
 800142e:	2100      	movs	r1, #0
 8001430:	4618      	mov	r0, r3
 8001432:	f00a fc93 	bl	800bd5c <memset>
	uint8_t ans = 0;
 8001436:	2300      	movs	r3, #0
 8001438:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
  /* Infinite loop */
  for(;;)
  {
	  if (osSemaphoreAcquire(PINGSemHandle, osWaitForever) == osOK)
 800143c:	4b8c      	ldr	r3, [pc, #560]	; (8001670 <PINGStartTask+0x254>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f04f 31ff 	mov.w	r1, #4294967295
 8001444:	4618      	mov	r0, r3
 8001446:	f006 ffb9 	bl	80083bc <osSemaphoreAcquire>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d1f5      	bne.n	800143c <PINGStartTask+0x20>
	  {
		  if (osMutexAcquire(UART1MutexHandle, osWaitForever) == osOK)
 8001450:	4b88      	ldr	r3, [pc, #544]	; (8001674 <PINGStartTask+0x258>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f04f 31ff 	mov.w	r1, #4294967295
 8001458:	4618      	mov	r0, r3
 800145a:	f006 fe9d 	bl	8008198 <osMutexAcquire>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d1eb      	bne.n	800143c <PINGStartTask+0x20>
		  {

			  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001464:	224c      	movs	r2, #76	; 0x4c
 8001466:	2100      	movs	r1, #0
 8001468:	4883      	ldr	r0, [pc, #524]	; (8001678 <PINGStartTask+0x25c>)
 800146a:	f00a fc77 	bl	800bd5c <memset>
			  sprintf(send_MQTT_message,"AT+CIPSEND=2\r\n\0");
 800146e:	f107 030c 	add.w	r3, r7, #12
 8001472:	4982      	ldr	r1, [pc, #520]	; (800167c <PINGStartTask+0x260>)
 8001474:	4618      	mov	r0, r3
 8001476:	f00a fcad 	bl	800bdd4 <siprintf>
			  HAL_UART_Transmit_DMA(&huart1, send_MQTT_message, strlen(send_MQTT_message));
 800147a:	f107 030c 	add.w	r3, r7, #12
 800147e:	4618      	mov	r0, r3
 8001480:	f7fe fec6 	bl	8000210 <strlen>
 8001484:	4603      	mov	r3, r0
 8001486:	b29a      	uxth	r2, r3
 8001488:	f107 030c 	add.w	r3, r7, #12
 800148c:	4619      	mov	r1, r3
 800148e:	487c      	ldr	r0, [pc, #496]	; (8001680 <PINGStartTask+0x264>)
 8001490:	f005 f95c 	bl	800674c <HAL_UART_Transmit_DMA>
			  ans = SIM800_Ans(">");
 8001494:	487b      	ldr	r0, [pc, #492]	; (8001684 <PINGStartTask+0x268>)
 8001496:	f7ff fd3f 	bl	8000f18 <SIM800_Ans>
 800149a:	4603      	mov	r3, r0
 800149c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			  if (!ans)
 80014a0:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d12f      	bne.n	8001508 <PINGStartTask+0xec>
			  {
				  strcpy(&(msg.str), "FAILE_send_PING1\r\n\0");
 80014a8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80014ac:	4a76      	ldr	r2, [pc, #472]	; (8001688 <PINGStartTask+0x26c>)
 80014ae:	461c      	mov	r4, r3
 80014b0:	4615      	mov	r5, r2
 80014b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014b6:	682b      	ldr	r3, [r5, #0]
 80014b8:	461a      	mov	r2, r3
 80014ba:	8022      	strh	r2, [r4, #0]
 80014bc:	3402      	adds	r4, #2
 80014be:	0c1b      	lsrs	r3, r3, #16
 80014c0:	7023      	strb	r3, [r4, #0]
				  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 80014c2:	4b72      	ldr	r3, [pc, #456]	; (800168c <PINGStartTask+0x270>)
 80014c4:	6818      	ldr	r0, [r3, #0]
 80014c6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80014ca:	f04f 33ff 	mov.w	r3, #4294967295
 80014ce:	2200      	movs	r2, #0
 80014d0:	f007 f87e 	bl	80085d0 <osMessageQueuePut>
				  Error_ping = 1;
 80014d4:	4b6e      	ldr	r3, [pc, #440]	; (8001690 <PINGStartTask+0x274>)
 80014d6:	2201      	movs	r2, #1
 80014d8:	701a      	strb	r2, [r3, #0]
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1); //signal for error
 80014da:	2201      	movs	r2, #1
 80014dc:	2108      	movs	r1, #8
 80014de:	486d      	ldr	r0, [pc, #436]	; (8001694 <PINGStartTask+0x278>)
 80014e0:	f003 fa24 	bl	800492c <HAL_GPIO_WritePin>
				  osMutexRelease(UART1MutexHandle); //release UART for SIM800
 80014e4:	4b63      	ldr	r3, [pc, #396]	; (8001674 <PINGStartTask+0x258>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f006 fea0 	bl	800822e <osMutexRelease>
				  //start task to try reconnect
				  MQTTConnectTaskHandle = osThreadNew(StartMQTTConnectTask, NULL, &MQTTConnectTask_attributes);
 80014ee:	4a6a      	ldr	r2, [pc, #424]	; (8001698 <PINGStartTask+0x27c>)
 80014f0:	2100      	movs	r1, #0
 80014f2:	486a      	ldr	r0, [pc, #424]	; (800169c <PINGStartTask+0x280>)
 80014f4:	f006 fc30 	bl	8007d58 <osThreadNew>
 80014f8:	4603      	mov	r3, r0
 80014fa:	4a69      	ldr	r2, [pc, #420]	; (80016a0 <PINGStartTask+0x284>)
 80014fc:	6013      	str	r3, [r2, #0]
				  //delete this thread
				  osThreadTerminate(PINGTaskHandle);
 80014fe:	4b69      	ldr	r3, [pc, #420]	; (80016a4 <PINGStartTask+0x288>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f006 fcba 	bl	8007e7c <osThreadTerminate>
			  }
			  osDelay(200);
 8001508:	20c8      	movs	r0, #200	; 0xc8
 800150a:	f006 fce4 	bl	8007ed6 <osDelay>
			  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 800150e:	224c      	movs	r2, #76	; 0x4c
 8001510:	2100      	movs	r1, #0
 8001512:	4859      	ldr	r0, [pc, #356]	; (8001678 <PINGStartTask+0x25c>)
 8001514:	f00a fc22 	bl	800bd5c <memset>
			  HAL_UART_Transmit_DMA(&huart1, PING, 2);
 8001518:	2202      	movs	r2, #2
 800151a:	4963      	ldr	r1, [pc, #396]	; (80016a8 <PINGStartTask+0x28c>)
 800151c:	4858      	ldr	r0, [pc, #352]	; (8001680 <PINGStartTask+0x264>)
 800151e:	f005 f915 	bl	800674c <HAL_UART_Transmit_DMA>
			  ans = SIM800_Ans(PING);
 8001522:	4861      	ldr	r0, [pc, #388]	; (80016a8 <PINGStartTask+0x28c>)
 8001524:	f7ff fcf8 	bl	8000f18 <SIM800_Ans>
 8001528:	4603      	mov	r3, r0
 800152a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			  if (!ans)
 800152e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001532:	2b00      	cmp	r3, #0
 8001534:	d12f      	bne.n	8001596 <PINGStartTask+0x17a>
			  {
				  strcpy(&(msg.str), "FAILE_send_PING2\r\n\0");
 8001536:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800153a:	4a5c      	ldr	r2, [pc, #368]	; (80016ac <PINGStartTask+0x290>)
 800153c:	461c      	mov	r4, r3
 800153e:	4615      	mov	r5, r2
 8001540:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001542:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001544:	682b      	ldr	r3, [r5, #0]
 8001546:	461a      	mov	r2, r3
 8001548:	8022      	strh	r2, [r4, #0]
 800154a:	3402      	adds	r4, #2
 800154c:	0c1b      	lsrs	r3, r3, #16
 800154e:	7023      	strb	r3, [r4, #0]
				  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001550:	4b4e      	ldr	r3, [pc, #312]	; (800168c <PINGStartTask+0x270>)
 8001552:	6818      	ldr	r0, [r3, #0]
 8001554:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001558:	f04f 33ff 	mov.w	r3, #4294967295
 800155c:	2200      	movs	r2, #0
 800155e:	f007 f837 	bl	80085d0 <osMessageQueuePut>
				  Error_ping = 1;
 8001562:	4b4b      	ldr	r3, [pc, #300]	; (8001690 <PINGStartTask+0x274>)
 8001564:	2201      	movs	r2, #1
 8001566:	701a      	strb	r2, [r3, #0]
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
 8001568:	2201      	movs	r2, #1
 800156a:	2108      	movs	r1, #8
 800156c:	4849      	ldr	r0, [pc, #292]	; (8001694 <PINGStartTask+0x278>)
 800156e:	f003 f9dd 	bl	800492c <HAL_GPIO_WritePin>
				  osMutexRelease(UART1MutexHandle);
 8001572:	4b40      	ldr	r3, [pc, #256]	; (8001674 <PINGStartTask+0x258>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f006 fe59 	bl	800822e <osMutexRelease>
				  MQTTConnectTaskHandle = osThreadNew(StartMQTTConnectTask, NULL, &MQTTConnectTask_attributes);
 800157c:	4a46      	ldr	r2, [pc, #280]	; (8001698 <PINGStartTask+0x27c>)
 800157e:	2100      	movs	r1, #0
 8001580:	4846      	ldr	r0, [pc, #280]	; (800169c <PINGStartTask+0x280>)
 8001582:	f006 fbe9 	bl	8007d58 <osThreadNew>
 8001586:	4603      	mov	r3, r0
 8001588:	4a45      	ldr	r2, [pc, #276]	; (80016a0 <PINGStartTask+0x284>)
 800158a:	6013      	str	r3, [r2, #0]
				  osThreadTerminate(PINGTaskHandle);
 800158c:	4b45      	ldr	r3, [pc, #276]	; (80016a4 <PINGStartTask+0x288>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4618      	mov	r0, r3
 8001592:	f006 fc73 	bl	8007e7c <osThreadTerminate>
			  }
			  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001596:	224c      	movs	r2, #76	; 0x4c
 8001598:	2100      	movs	r1, #0
 800159a:	4837      	ldr	r0, [pc, #220]	; (8001678 <PINGStartTask+0x25c>)
 800159c:	f00a fbde 	bl	800bd5c <memset>
			  ans = SIM800_Ans(PING_ASK);
 80015a0:	4843      	ldr	r0, [pc, #268]	; (80016b0 <PINGStartTask+0x294>)
 80015a2:	f7ff fcb9 	bl	8000f18 <SIM800_Ans>
 80015a6:	4603      	mov	r3, r0
 80015a8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			  if (!ans)
 80015ac:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d13e      	bne.n	8001632 <PINGStartTask+0x216>
			  {
				  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80015b4:	224c      	movs	r2, #76	; 0x4c
 80015b6:	2100      	movs	r1, #0
 80015b8:	482f      	ldr	r0, [pc, #188]	; (8001678 <PINGStartTask+0x25c>)
 80015ba:	f00a fbcf 	bl	800bd5c <memset>
				  ans = SIM800_Ans(PING_ASK);
 80015be:	483c      	ldr	r0, [pc, #240]	; (80016b0 <PINGStartTask+0x294>)
 80015c0:	f7ff fcaa 	bl	8000f18 <SIM800_Ans>
 80015c4:	4603      	mov	r3, r0
 80015c6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				  if (!ans)
 80015ca:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d12f      	bne.n	8001632 <PINGStartTask+0x216>
				  {
					  strcpy(&(msg.str), "FAILE_send_PING3\r\n\0");
 80015d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80015d6:	4a37      	ldr	r2, [pc, #220]	; (80016b4 <PINGStartTask+0x298>)
 80015d8:	461c      	mov	r4, r3
 80015da:	4615      	mov	r5, r2
 80015dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015e0:	682b      	ldr	r3, [r5, #0]
 80015e2:	461a      	mov	r2, r3
 80015e4:	8022      	strh	r2, [r4, #0]
 80015e6:	3402      	adds	r4, #2
 80015e8:	0c1b      	lsrs	r3, r3, #16
 80015ea:	7023      	strb	r3, [r4, #0]
					  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 80015ec:	4b27      	ldr	r3, [pc, #156]	; (800168c <PINGStartTask+0x270>)
 80015ee:	6818      	ldr	r0, [r3, #0]
 80015f0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80015f4:	f04f 33ff 	mov.w	r3, #4294967295
 80015f8:	2200      	movs	r2, #0
 80015fa:	f006 ffe9 	bl	80085d0 <osMessageQueuePut>
					  Error_ping = 1;
 80015fe:	4b24      	ldr	r3, [pc, #144]	; (8001690 <PINGStartTask+0x274>)
 8001600:	2201      	movs	r2, #1
 8001602:	701a      	strb	r2, [r3, #0]
					  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
 8001604:	2201      	movs	r2, #1
 8001606:	2108      	movs	r1, #8
 8001608:	4822      	ldr	r0, [pc, #136]	; (8001694 <PINGStartTask+0x278>)
 800160a:	f003 f98f 	bl	800492c <HAL_GPIO_WritePin>
					  osMutexRelease(UART1MutexHandle);
 800160e:	4b19      	ldr	r3, [pc, #100]	; (8001674 <PINGStartTask+0x258>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f006 fe0b 	bl	800822e <osMutexRelease>
					  MQTTConnectTaskHandle = osThreadNew(StartMQTTConnectTask, NULL, &MQTTConnectTask_attributes);
 8001618:	4a1f      	ldr	r2, [pc, #124]	; (8001698 <PINGStartTask+0x27c>)
 800161a:	2100      	movs	r1, #0
 800161c:	481f      	ldr	r0, [pc, #124]	; (800169c <PINGStartTask+0x280>)
 800161e:	f006 fb9b 	bl	8007d58 <osThreadNew>
 8001622:	4603      	mov	r3, r0
 8001624:	4a1e      	ldr	r2, [pc, #120]	; (80016a0 <PINGStartTask+0x284>)
 8001626:	6013      	str	r3, [r2, #0]
					  osThreadTerminate(PINGTaskHandle);
 8001628:	4b1e      	ldr	r3, [pc, #120]	; (80016a4 <PINGStartTask+0x288>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4618      	mov	r0, r3
 800162e:	f006 fc25 	bl	8007e7c <osThreadTerminate>
				  }
			  }

			  strcpy(&(msg.str), "PING_SEND_OK\r\n\0");
 8001632:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001636:	4a20      	ldr	r2, [pc, #128]	; (80016b8 <PINGStartTask+0x29c>)
 8001638:	461c      	mov	r4, r3
 800163a:	4613      	mov	r3, r2
 800163c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800163e:	c407      	stmia	r4!, {r0, r1, r2}
 8001640:	8023      	strh	r3, [r4, #0]
 8001642:	3402      	adds	r4, #2
 8001644:	0c1b      	lsrs	r3, r3, #16
 8001646:	7023      	strb	r3, [r4, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001648:	4b10      	ldr	r3, [pc, #64]	; (800168c <PINGStartTask+0x270>)
 800164a:	6818      	ldr	r0, [r3, #0]
 800164c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001650:	f04f 33ff 	mov.w	r3, #4294967295
 8001654:	2200      	movs	r2, #0
 8001656:	f006 ffbb 	bl	80085d0 <osMessageQueuePut>

			  HAL_UART_Receive_DMA(&huart1, SIM800BuffRx, BUFF_SIM_SIZE);
 800165a:	224c      	movs	r2, #76	; 0x4c
 800165c:	4906      	ldr	r1, [pc, #24]	; (8001678 <PINGStartTask+0x25c>)
 800165e:	4808      	ldr	r0, [pc, #32]	; (8001680 <PINGStartTask+0x264>)
 8001660:	f005 f8f2 	bl	8006848 <HAL_UART_Receive_DMA>
			  osMutexRelease(UART1MutexHandle);
 8001664:	4b03      	ldr	r3, [pc, #12]	; (8001674 <PINGStartTask+0x258>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4618      	mov	r0, r3
 800166a:	f006 fde0 	bl	800822e <osMutexRelease>
	  if (osSemaphoreAcquire(PINGSemHandle, osWaitForever) == osOK)
 800166e:	e6e5      	b.n	800143c <PINGStartTask+0x20>
 8001670:	200003a8 	.word	0x200003a8
 8001674:	200003a4 	.word	0x200003a4
 8001678:	2000041c 	.word	0x2000041c
 800167c:	0800d154 	.word	0x0800d154
 8001680:	20000164 	.word	0x20000164
 8001684:	0800d14c 	.word	0x0800d14c
 8001688:	0800d164 	.word	0x0800d164
 800168c:	20000390 	.word	0x20000390
 8001690:	200003b1 	.word	0x200003b1
 8001694:	40020800 	.word	0x40020800
 8001698:	0800db50 	.word	0x0800db50
 800169c:	08001c21 	.word	0x08001c21
 80016a0:	20000384 	.word	0x20000384
 80016a4:	2000037c 	.word	0x2000037c
 80016a8:	20000000 	.word	0x20000000
 80016ac:	0800d178 	.word	0x0800d178
 80016b0:	20000004 	.word	0x20000004
 80016b4:	0800d18c 	.word	0x0800d18c
 80016b8:	0800d1a0 	.word	0x0800d1a0

080016bc <StartSIM800Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSIM800Task */
void StartSIM800Task(void *argument)
{
 80016bc:	b5b0      	push	{r4, r5, r7, lr}
 80016be:	b094      	sub	sp, #80	; 0x50
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSIM800Task */

	message_type msg; // string for debug message
	uint8_t ans = 0; //is one string in another
 80016c4:	2300      	movs	r3, #0
 80016c6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  /* Infinite loop */
  for(;;)
  {
	  Error_init = 0;
 80016ca:	4bb1      	ldr	r3, [pc, #708]	; (8001990 <StartSIM800Task+0x2d4>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	701a      	strb	r2, [r3, #0]
	  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 80016d0:	4bb0      	ldr	r3, [pc, #704]	; (8001994 <StartSIM800Task+0x2d8>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	68da      	ldr	r2, [r3, #12]
 80016d6:	4baf      	ldr	r3, [pc, #700]	; (8001994 <StartSIM800Task+0x2d8>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f042 0210 	orr.w	r2, r2, #16
 80016de:	60da      	str	r2, [r3, #12]

start:

		//Hardware reset of module

		HAL_GPIO_WritePin(SIM_START_GPIO_Port, SIM_START_Pin, RESET);
 80016e0:	2200      	movs	r2, #0
 80016e2:	2110      	movs	r1, #16
 80016e4:	48ac      	ldr	r0, [pc, #688]	; (8001998 <StartSIM800Task+0x2dc>)
 80016e6:	f003 f921 	bl	800492c <HAL_GPIO_WritePin>
		osDelay(500);
 80016ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016ee:	f006 fbf2 	bl	8007ed6 <osDelay>
		HAL_GPIO_WritePin(SIM_START_GPIO_Port, SIM_START_Pin, SET);
 80016f2:	2201      	movs	r2, #1
 80016f4:	2110      	movs	r1, #16
 80016f6:	48a8      	ldr	r0, [pc, #672]	; (8001998 <StartSIM800Task+0x2dc>)
 80016f8:	f003 f918 	bl	800492c <HAL_GPIO_WritePin>
		osDelay(8000);
 80016fc:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8001700:	f006 fbe9 	bl	8007ed6 <osDelay>

	  	//send initializing data

	  	sprintf(str_SIM800,"ATZ\r\n\0");
 8001704:	49a5      	ldr	r1, [pc, #660]	; (800199c <StartSIM800Task+0x2e0>)
 8001706:	48a6      	ldr	r0, [pc, #664]	; (80019a0 <StartSIM800Task+0x2e4>)
 8001708:	f00a fb64 	bl	800bdd4 <siprintf>
	  	HAL_UART_Transmit_IT(&huart1, str_SIM800, strlen(str_SIM800));
 800170c:	48a4      	ldr	r0, [pc, #656]	; (80019a0 <StartSIM800Task+0x2e4>)
 800170e:	f7fe fd7f 	bl	8000210 <strlen>
 8001712:	4603      	mov	r3, r0
 8001714:	b29b      	uxth	r3, r3
 8001716:	461a      	mov	r2, r3
 8001718:	49a1      	ldr	r1, [pc, #644]	; (80019a0 <StartSIM800Task+0x2e4>)
 800171a:	489e      	ldr	r0, [pc, #632]	; (8001994 <StartSIM800Task+0x2d8>)
 800171c:	f004 ffd1 	bl	80066c2 <HAL_UART_Transmit_IT>
	  	osDelay(6000);
 8001720:	f241 7070 	movw	r0, #6000	; 0x1770
 8001724:	f006 fbd7 	bl	8007ed6 <osDelay>

	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE); //clear receive buffer
 8001728:	224c      	movs	r2, #76	; 0x4c
 800172a:	2100      	movs	r1, #0
 800172c:	489d      	ldr	r0, [pc, #628]	; (80019a4 <StartSIM800Task+0x2e8>)
 800172e:	f00a fb15 	bl	800bd5c <memset>
	  	sprintf(str_SIM800,"AT+CIPMODE=0\r\n\0"); //make string for send
 8001732:	499d      	ldr	r1, [pc, #628]	; (80019a8 <StartSIM800Task+0x2ec>)
 8001734:	489a      	ldr	r0, [pc, #616]	; (80019a0 <StartSIM800Task+0x2e4>)
 8001736:	f00a fb4d 	bl	800bdd4 <siprintf>
	  	HAL_UART_Transmit_IT(&huart1, str_SIM800, strlen(str_SIM800)); //send string
 800173a:	4899      	ldr	r0, [pc, #612]	; (80019a0 <StartSIM800Task+0x2e4>)
 800173c:	f7fe fd68 	bl	8000210 <strlen>
 8001740:	4603      	mov	r3, r0
 8001742:	b29b      	uxth	r3, r3
 8001744:	461a      	mov	r2, r3
 8001746:	4996      	ldr	r1, [pc, #600]	; (80019a0 <StartSIM800Task+0x2e4>)
 8001748:	4892      	ldr	r0, [pc, #584]	; (8001994 <StartSIM800Task+0x2d8>)
 800174a:	f004 ffba 	bl	80066c2 <HAL_UART_Transmit_IT>
	  	ans = SIM800_Ans("OK"); //waiting answer, that we transmit in function
 800174e:	4897      	ldr	r0, [pc, #604]	; (80019ac <StartSIM800Task+0x2f0>)
 8001750:	f7ff fbe2 	bl	8000f18 <SIM800_Ans>
 8001754:	4603      	mov	r3, r0
 8001756:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  	if (!ans)
 800175a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800175e:	2b00      	cmp	r3, #0
 8001760:	d111      	bne.n	8001786 <StartSIM800Task+0xca>
	  	{
	  		strcpy(&(msg.str), "FAILE_CIPMODE\r\n\0");
 8001762:	f107 0308 	add.w	r3, r7, #8
 8001766:	4a92      	ldr	r2, [pc, #584]	; (80019b0 <StartSIM800Task+0x2f4>)
 8001768:	461c      	mov	r4, r3
 800176a:	4613      	mov	r3, r2
 800176c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800176e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  		osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001772:	4b90      	ldr	r3, [pc, #576]	; (80019b4 <StartSIM800Task+0x2f8>)
 8001774:	6818      	ldr	r0, [r3, #0]
 8001776:	f107 0108 	add.w	r1, r7, #8
 800177a:	f04f 33ff 	mov.w	r3, #4294967295
 800177e:	2200      	movs	r2, #0
 8001780:	f006 ff26 	bl	80085d0 <osMessageQueuePut>
	  		goto start;
 8001784:	e7ac      	b.n	80016e0 <StartSIM800Task+0x24>
	  	}
	  	osDelay(300);
 8001786:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800178a:	f006 fba4 	bl	8007ed6 <osDelay>

	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 800178e:	224c      	movs	r2, #76	; 0x4c
 8001790:	2100      	movs	r1, #0
 8001792:	4884      	ldr	r0, [pc, #528]	; (80019a4 <StartSIM800Task+0x2e8>)
 8001794:	f00a fae2 	bl	800bd5c <memset>
	  	sprintf(str_SIM800,"AT+CIPMUX=0\r\n\0");
 8001798:	4987      	ldr	r1, [pc, #540]	; (80019b8 <StartSIM800Task+0x2fc>)
 800179a:	4881      	ldr	r0, [pc, #516]	; (80019a0 <StartSIM800Task+0x2e4>)
 800179c:	f00a fb1a 	bl	800bdd4 <siprintf>
	  	HAL_UART_Transmit_IT(&huart1, str_SIM800, strlen(str_SIM800));
 80017a0:	487f      	ldr	r0, [pc, #508]	; (80019a0 <StartSIM800Task+0x2e4>)
 80017a2:	f7fe fd35 	bl	8000210 <strlen>
 80017a6:	4603      	mov	r3, r0
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	461a      	mov	r2, r3
 80017ac:	497c      	ldr	r1, [pc, #496]	; (80019a0 <StartSIM800Task+0x2e4>)
 80017ae:	4879      	ldr	r0, [pc, #484]	; (8001994 <StartSIM800Task+0x2d8>)
 80017b0:	f004 ff87 	bl	80066c2 <HAL_UART_Transmit_IT>
	  	ans = SIM800_Ans("OK");
 80017b4:	487d      	ldr	r0, [pc, #500]	; (80019ac <StartSIM800Task+0x2f0>)
 80017b6:	f7ff fbaf 	bl	8000f18 <SIM800_Ans>
 80017ba:	4603      	mov	r3, r0
 80017bc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  	if (!ans)
 80017c0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d114      	bne.n	80017f2 <StartSIM800Task+0x136>
		{
			strcpy(&(msg.str), "FAILE_CIPMUX\r\n\0");
 80017c8:	f107 0308 	add.w	r3, r7, #8
 80017cc:	4a7b      	ldr	r2, [pc, #492]	; (80019bc <StartSIM800Task+0x300>)
 80017ce:	461c      	mov	r4, r3
 80017d0:	4613      	mov	r3, r2
 80017d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017d4:	c407      	stmia	r4!, {r0, r1, r2}
 80017d6:	8023      	strh	r3, [r4, #0]
 80017d8:	3402      	adds	r4, #2
 80017da:	0c1b      	lsrs	r3, r3, #16
 80017dc:	7023      	strb	r3, [r4, #0]
			osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 80017de:	4b75      	ldr	r3, [pc, #468]	; (80019b4 <StartSIM800Task+0x2f8>)
 80017e0:	6818      	ldr	r0, [r3, #0]
 80017e2:	f107 0108 	add.w	r1, r7, #8
 80017e6:	f04f 33ff 	mov.w	r3, #4294967295
 80017ea:	2200      	movs	r2, #0
 80017ec:	f006 fef0 	bl	80085d0 <osMessageQueuePut>
			goto start;
 80017f0:	e776      	b.n	80016e0 <StartSIM800Task+0x24>
		}
		osDelay(300);
 80017f2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80017f6:	f006 fb6e 	bl	8007ed6 <osDelay>

	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80017fa:	224c      	movs	r2, #76	; 0x4c
 80017fc:	2100      	movs	r1, #0
 80017fe:	4869      	ldr	r0, [pc, #420]	; (80019a4 <StartSIM800Task+0x2e8>)
 8001800:	f00a faac 	bl	800bd5c <memset>
	  	sprintf(str_SIM800,"AT+CIPSTATUS\r\n\0");
 8001804:	496e      	ldr	r1, [pc, #440]	; (80019c0 <StartSIM800Task+0x304>)
 8001806:	4866      	ldr	r0, [pc, #408]	; (80019a0 <StartSIM800Task+0x2e4>)
 8001808:	f00a fae4 	bl	800bdd4 <siprintf>
	  	HAL_UART_Transmit_IT(&huart1, str_SIM800, strlen(str_SIM800));
 800180c:	4864      	ldr	r0, [pc, #400]	; (80019a0 <StartSIM800Task+0x2e4>)
 800180e:	f7fe fcff 	bl	8000210 <strlen>
 8001812:	4603      	mov	r3, r0
 8001814:	b29b      	uxth	r3, r3
 8001816:	461a      	mov	r2, r3
 8001818:	4961      	ldr	r1, [pc, #388]	; (80019a0 <StartSIM800Task+0x2e4>)
 800181a:	485e      	ldr	r0, [pc, #376]	; (8001994 <StartSIM800Task+0x2d8>)
 800181c:	f004 ff51 	bl	80066c2 <HAL_UART_Transmit_IT>
	  	ans = SIM800_Ans("OK");
 8001820:	4862      	ldr	r0, [pc, #392]	; (80019ac <StartSIM800Task+0x2f0>)
 8001822:	f7ff fb79 	bl	8000f18 <SIM800_Ans>
 8001826:	4603      	mov	r3, r0
 8001828:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  	if (!ans)
 800182c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001830:	2b00      	cmp	r3, #0
 8001832:	d112      	bne.n	800185a <StartSIM800Task+0x19e>
		{
			strcpy(&(msg.str), "FAILE_CIPSTATUS\r\n\0");
 8001834:	f107 0308 	add.w	r3, r7, #8
 8001838:	4a62      	ldr	r2, [pc, #392]	; (80019c4 <StartSIM800Task+0x308>)
 800183a:	461c      	mov	r4, r3
 800183c:	4615      	mov	r5, r2
 800183e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001840:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001842:	682b      	ldr	r3, [r5, #0]
 8001844:	8023      	strh	r3, [r4, #0]
			osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001846:	4b5b      	ldr	r3, [pc, #364]	; (80019b4 <StartSIM800Task+0x2f8>)
 8001848:	6818      	ldr	r0, [r3, #0]
 800184a:	f107 0108 	add.w	r1, r7, #8
 800184e:	f04f 33ff 	mov.w	r3, #4294967295
 8001852:	2200      	movs	r2, #0
 8001854:	f006 febc 	bl	80085d0 <osMessageQueuePut>
			goto start;
 8001858:	e742      	b.n	80016e0 <StartSIM800Task+0x24>
		}
		osDelay(300);
 800185a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800185e:	f006 fb3a 	bl	8007ed6 <osDelay>

	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001862:	224c      	movs	r2, #76	; 0x4c
 8001864:	2100      	movs	r1, #0
 8001866:	484f      	ldr	r0, [pc, #316]	; (80019a4 <StartSIM800Task+0x2e8>)
 8001868:	f00a fa78 	bl	800bd5c <memset>
	  	sprintf(str_SIM800,"AT+CIPRXGET=0\r\n\0");
 800186c:	4956      	ldr	r1, [pc, #344]	; (80019c8 <StartSIM800Task+0x30c>)
 800186e:	484c      	ldr	r0, [pc, #304]	; (80019a0 <StartSIM800Task+0x2e4>)
 8001870:	f00a fab0 	bl	800bdd4 <siprintf>
	  	HAL_UART_Transmit_IT(&huart1, str_SIM800, strlen(str_SIM800));
 8001874:	484a      	ldr	r0, [pc, #296]	; (80019a0 <StartSIM800Task+0x2e4>)
 8001876:	f7fe fccb 	bl	8000210 <strlen>
 800187a:	4603      	mov	r3, r0
 800187c:	b29b      	uxth	r3, r3
 800187e:	461a      	mov	r2, r3
 8001880:	4947      	ldr	r1, [pc, #284]	; (80019a0 <StartSIM800Task+0x2e4>)
 8001882:	4844      	ldr	r0, [pc, #272]	; (8001994 <StartSIM800Task+0x2d8>)
 8001884:	f004 ff1d 	bl	80066c2 <HAL_UART_Transmit_IT>
	  	ans = SIM800_Ans("OK");
 8001888:	4848      	ldr	r0, [pc, #288]	; (80019ac <StartSIM800Task+0x2f0>)
 800188a:	f7ff fb45 	bl	8000f18 <SIM800_Ans>
 800188e:	4603      	mov	r3, r0
 8001890:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  	if (!ans)
 8001894:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001898:	2b00      	cmp	r3, #0
 800189a:	d112      	bne.n	80018c2 <StartSIM800Task+0x206>
		{
			strcpy(&(msg.str), "FAILE_CIPRXGET\r\n\0");
 800189c:	f107 0308 	add.w	r3, r7, #8
 80018a0:	4a4a      	ldr	r2, [pc, #296]	; (80019cc <StartSIM800Task+0x310>)
 80018a2:	461c      	mov	r4, r3
 80018a4:	4615      	mov	r5, r2
 80018a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018aa:	682b      	ldr	r3, [r5, #0]
 80018ac:	7023      	strb	r3, [r4, #0]
			osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 80018ae:	4b41      	ldr	r3, [pc, #260]	; (80019b4 <StartSIM800Task+0x2f8>)
 80018b0:	6818      	ldr	r0, [r3, #0]
 80018b2:	f107 0108 	add.w	r1, r7, #8
 80018b6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ba:	2200      	movs	r2, #0
 80018bc:	f006 fe88 	bl	80085d0 <osMessageQueuePut>
			goto start;
 80018c0:	e70e      	b.n	80016e0 <StartSIM800Task+0x24>
		}
		osDelay(300);
 80018c2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80018c6:	f006 fb06 	bl	8007ed6 <osDelay>

	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80018ca:	224c      	movs	r2, #76	; 0x4c
 80018cc:	2100      	movs	r1, #0
 80018ce:	4835      	ldr	r0, [pc, #212]	; (80019a4 <StartSIM800Task+0x2e8>)
 80018d0:	f00a fa44 	bl	800bd5c <memset>
	  	sprintf(str_SIM800,"AT+CSTT=\"internet.beeline.ru\",\"beeline\",\"beeline\"\r\n\0");
 80018d4:	493e      	ldr	r1, [pc, #248]	; (80019d0 <StartSIM800Task+0x314>)
 80018d6:	4832      	ldr	r0, [pc, #200]	; (80019a0 <StartSIM800Task+0x2e4>)
 80018d8:	f00a fa7c 	bl	800bdd4 <siprintf>
	  	HAL_UART_Transmit_IT(&huart1, str_SIM800, strlen(str_SIM800));
 80018dc:	4830      	ldr	r0, [pc, #192]	; (80019a0 <StartSIM800Task+0x2e4>)
 80018de:	f7fe fc97 	bl	8000210 <strlen>
 80018e2:	4603      	mov	r3, r0
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	461a      	mov	r2, r3
 80018e8:	492d      	ldr	r1, [pc, #180]	; (80019a0 <StartSIM800Task+0x2e4>)
 80018ea:	482a      	ldr	r0, [pc, #168]	; (8001994 <StartSIM800Task+0x2d8>)
 80018ec:	f004 fee9 	bl	80066c2 <HAL_UART_Transmit_IT>
	  	ans = SIM800_Ans("OK");
 80018f0:	482e      	ldr	r0, [pc, #184]	; (80019ac <StartSIM800Task+0x2f0>)
 80018f2:	f7ff fb11 	bl	8000f18 <SIM800_Ans>
 80018f6:	4603      	mov	r3, r0
 80018f8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  	if (!ans)
 80018fc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001900:	2b00      	cmp	r3, #0
 8001902:	d111      	bne.n	8001928 <StartSIM800Task+0x26c>
		{
			strcpy(&(msg.str), "FAILE_CSTT\r\n\0");
 8001904:	f107 0308 	add.w	r3, r7, #8
 8001908:	4a32      	ldr	r2, [pc, #200]	; (80019d4 <StartSIM800Task+0x318>)
 800190a:	461c      	mov	r4, r3
 800190c:	4613      	mov	r3, r2
 800190e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001910:	c407      	stmia	r4!, {r0, r1, r2}
 8001912:	7023      	strb	r3, [r4, #0]
			osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001914:	4b27      	ldr	r3, [pc, #156]	; (80019b4 <StartSIM800Task+0x2f8>)
 8001916:	6818      	ldr	r0, [r3, #0]
 8001918:	f107 0108 	add.w	r1, r7, #8
 800191c:	f04f 33ff 	mov.w	r3, #4294967295
 8001920:	2200      	movs	r2, #0
 8001922:	f006 fe55 	bl	80085d0 <osMessageQueuePut>
			goto start;
 8001926:	e6db      	b.n	80016e0 <StartSIM800Task+0x24>
		}
		osDelay(300);
 8001928:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800192c:	f006 fad3 	bl	8007ed6 <osDelay>

	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001930:	224c      	movs	r2, #76	; 0x4c
 8001932:	2100      	movs	r1, #0
 8001934:	481b      	ldr	r0, [pc, #108]	; (80019a4 <StartSIM800Task+0x2e8>)
 8001936:	f00a fa11 	bl	800bd5c <memset>
	  	sprintf(str_SIM800,"AT+CIPSTATUS\r\n\0");
 800193a:	4921      	ldr	r1, [pc, #132]	; (80019c0 <StartSIM800Task+0x304>)
 800193c:	4818      	ldr	r0, [pc, #96]	; (80019a0 <StartSIM800Task+0x2e4>)
 800193e:	f00a fa49 	bl	800bdd4 <siprintf>
	  	HAL_UART_Transmit_IT(&huart1, str_SIM800, strlen(str_SIM800));
 8001942:	4817      	ldr	r0, [pc, #92]	; (80019a0 <StartSIM800Task+0x2e4>)
 8001944:	f7fe fc64 	bl	8000210 <strlen>
 8001948:	4603      	mov	r3, r0
 800194a:	b29b      	uxth	r3, r3
 800194c:	461a      	mov	r2, r3
 800194e:	4914      	ldr	r1, [pc, #80]	; (80019a0 <StartSIM800Task+0x2e4>)
 8001950:	4810      	ldr	r0, [pc, #64]	; (8001994 <StartSIM800Task+0x2d8>)
 8001952:	f004 feb6 	bl	80066c2 <HAL_UART_Transmit_IT>
	  	ans = SIM800_Ans("OK");
 8001956:	4815      	ldr	r0, [pc, #84]	; (80019ac <StartSIM800Task+0x2f0>)
 8001958:	f7ff fade 	bl	8000f18 <SIM800_Ans>
 800195c:	4603      	mov	r3, r0
 800195e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  	if (!ans)
 8001962:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001966:	2b00      	cmp	r3, #0
 8001968:	d136      	bne.n	80019d8 <StartSIM800Task+0x31c>
		{
			strcpy(&(msg.str), "FAILE_CIPSTATUS\r\n\0");
 800196a:	f107 0308 	add.w	r3, r7, #8
 800196e:	4a15      	ldr	r2, [pc, #84]	; (80019c4 <StartSIM800Task+0x308>)
 8001970:	461c      	mov	r4, r3
 8001972:	4615      	mov	r5, r2
 8001974:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001976:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001978:	682b      	ldr	r3, [r5, #0]
 800197a:	8023      	strh	r3, [r4, #0]
			osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 800197c:	4b0d      	ldr	r3, [pc, #52]	; (80019b4 <StartSIM800Task+0x2f8>)
 800197e:	6818      	ldr	r0, [r3, #0]
 8001980:	f107 0108 	add.w	r1, r7, #8
 8001984:	f04f 33ff 	mov.w	r3, #4294967295
 8001988:	2200      	movs	r2, #0
 800198a:	f006 fe21 	bl	80085d0 <osMessageQueuePut>
			goto start;
 800198e:	e6a7      	b.n	80016e0 <StartSIM800Task+0x24>
 8001990:	200003b0 	.word	0x200003b0
 8001994:	20000164 	.word	0x20000164
 8001998:	40020800 	.word	0x40020800
 800199c:	0800d1b0 	.word	0x0800d1b0
 80019a0:	200003d0 	.word	0x200003d0
 80019a4:	2000041c 	.word	0x2000041c
 80019a8:	0800d1b8 	.word	0x0800d1b8
 80019ac:	0800d1c8 	.word	0x0800d1c8
 80019b0:	0800d1cc 	.word	0x0800d1cc
 80019b4:	20000390 	.word	0x20000390
 80019b8:	0800d1e0 	.word	0x0800d1e0
 80019bc:	0800d1f0 	.word	0x0800d1f0
 80019c0:	0800d200 	.word	0x0800d200
 80019c4:	0800d210 	.word	0x0800d210
 80019c8:	0800d224 	.word	0x0800d224
 80019cc:	0800d238 	.word	0x0800d238
 80019d0:	0800d24c 	.word	0x0800d24c
 80019d4:	0800d284 	.word	0x0800d284
		}
		osDelay(300);
 80019d8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80019dc:	f006 fa7b 	bl	8007ed6 <osDelay>

	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80019e0:	224c      	movs	r2, #76	; 0x4c
 80019e2:	2100      	movs	r1, #0
 80019e4:	487a      	ldr	r0, [pc, #488]	; (8001bd0 <StartSIM800Task+0x514>)
 80019e6:	f00a f9b9 	bl	800bd5c <memset>
	  	sprintf(str_SIM800,"AT+CIICR\r\n\0");
 80019ea:	497a      	ldr	r1, [pc, #488]	; (8001bd4 <StartSIM800Task+0x518>)
 80019ec:	487a      	ldr	r0, [pc, #488]	; (8001bd8 <StartSIM800Task+0x51c>)
 80019ee:	f00a f9f1 	bl	800bdd4 <siprintf>
	  	HAL_UART_Transmit_IT(&huart1, str_SIM800, strlen(str_SIM800));
 80019f2:	4879      	ldr	r0, [pc, #484]	; (8001bd8 <StartSIM800Task+0x51c>)
 80019f4:	f7fe fc0c 	bl	8000210 <strlen>
 80019f8:	4603      	mov	r3, r0
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	461a      	mov	r2, r3
 80019fe:	4976      	ldr	r1, [pc, #472]	; (8001bd8 <StartSIM800Task+0x51c>)
 8001a00:	4876      	ldr	r0, [pc, #472]	; (8001bdc <StartSIM800Task+0x520>)
 8001a02:	f004 fe5e 	bl	80066c2 <HAL_UART_Transmit_IT>
	  	ans = SIM800_Ans("AT+CIICR");
 8001a06:	4876      	ldr	r0, [pc, #472]	; (8001be0 <StartSIM800Task+0x524>)
 8001a08:	f7ff fa86 	bl	8000f18 <SIM800_Ans>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001a12:	224c      	movs	r2, #76	; 0x4c
 8001a14:	2100      	movs	r1, #0
 8001a16:	486e      	ldr	r0, [pc, #440]	; (8001bd0 <StartSIM800Task+0x514>)
 8001a18:	f00a f9a0 	bl	800bd5c <memset>
	  	ans = SIM800_Ans("OK");
 8001a1c:	4871      	ldr	r0, [pc, #452]	; (8001be4 <StartSIM800Task+0x528>)
 8001a1e:	f7ff fa7b 	bl	8000f18 <SIM800_Ans>
 8001a22:	4603      	mov	r3, r0
 8001a24:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  	if (!ans)
 8001a28:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d111      	bne.n	8001a54 <StartSIM800Task+0x398>
		{
			strcpy(&(msg.str), "FAILE_CIICR\r\n\0");
 8001a30:	f107 0308 	add.w	r3, r7, #8
 8001a34:	4a6c      	ldr	r2, [pc, #432]	; (8001be8 <StartSIM800Task+0x52c>)
 8001a36:	461c      	mov	r4, r3
 8001a38:	4613      	mov	r3, r2
 8001a3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a3c:	c407      	stmia	r4!, {r0, r1, r2}
 8001a3e:	8023      	strh	r3, [r4, #0]
			osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001a40:	4b6a      	ldr	r3, [pc, #424]	; (8001bec <StartSIM800Task+0x530>)
 8001a42:	6818      	ldr	r0, [r3, #0]
 8001a44:	f107 0108 	add.w	r1, r7, #8
 8001a48:	f04f 33ff 	mov.w	r3, #4294967295
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f006 fdbf 	bl	80085d0 <osMessageQueuePut>
			goto start;
 8001a52:	e645      	b.n	80016e0 <StartSIM800Task+0x24>
		}
		osDelay(500);
 8001a54:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a58:	f006 fa3d 	bl	8007ed6 <osDelay>

	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001a5c:	224c      	movs	r2, #76	; 0x4c
 8001a5e:	2100      	movs	r1, #0
 8001a60:	485b      	ldr	r0, [pc, #364]	; (8001bd0 <StartSIM800Task+0x514>)
 8001a62:	f00a f97b 	bl	800bd5c <memset>
	  	sprintf(str_SIM800,"AT+CIPSTATUS\r\n\0");
 8001a66:	4962      	ldr	r1, [pc, #392]	; (8001bf0 <StartSIM800Task+0x534>)
 8001a68:	485b      	ldr	r0, [pc, #364]	; (8001bd8 <StartSIM800Task+0x51c>)
 8001a6a:	f00a f9b3 	bl	800bdd4 <siprintf>
	  	HAL_UART_Transmit_IT(&huart1, str_SIM800, strlen(str_SIM800));
 8001a6e:	485a      	ldr	r0, [pc, #360]	; (8001bd8 <StartSIM800Task+0x51c>)
 8001a70:	f7fe fbce 	bl	8000210 <strlen>
 8001a74:	4603      	mov	r3, r0
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4957      	ldr	r1, [pc, #348]	; (8001bd8 <StartSIM800Task+0x51c>)
 8001a7c:	4857      	ldr	r0, [pc, #348]	; (8001bdc <StartSIM800Task+0x520>)
 8001a7e:	f004 fe20 	bl	80066c2 <HAL_UART_Transmit_IT>
	  	ans = SIM800_Ans("OK");
 8001a82:	4858      	ldr	r0, [pc, #352]	; (8001be4 <StartSIM800Task+0x528>)
 8001a84:	f7ff fa48 	bl	8000f18 <SIM800_Ans>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  	if (!ans)
 8001a8e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d112      	bne.n	8001abc <StartSIM800Task+0x400>
		{
			strcpy(&(msg.str), "FAILE_CIPSTATUS\r\n\0");
 8001a96:	f107 0308 	add.w	r3, r7, #8
 8001a9a:	4a56      	ldr	r2, [pc, #344]	; (8001bf4 <StartSIM800Task+0x538>)
 8001a9c:	461c      	mov	r4, r3
 8001a9e:	4615      	mov	r5, r2
 8001aa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001aa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001aa4:	682b      	ldr	r3, [r5, #0]
 8001aa6:	8023      	strh	r3, [r4, #0]
			osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001aa8:	4b50      	ldr	r3, [pc, #320]	; (8001bec <StartSIM800Task+0x530>)
 8001aaa:	6818      	ldr	r0, [r3, #0]
 8001aac:	f107 0108 	add.w	r1, r7, #8
 8001ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f006 fd8b 	bl	80085d0 <osMessageQueuePut>
			goto start;
 8001aba:	e611      	b.n	80016e0 <StartSIM800Task+0x24>
		}
		osDelay(300);
 8001abc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001ac0:	f006 fa09 	bl	8007ed6 <osDelay>

	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001ac4:	224c      	movs	r2, #76	; 0x4c
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	4841      	ldr	r0, [pc, #260]	; (8001bd0 <StartSIM800Task+0x514>)
 8001aca:	f00a f947 	bl	800bd5c <memset>
	  	sprintf(str_SIM800,"AT+CIFSR\r\n\0");
 8001ace:	494a      	ldr	r1, [pc, #296]	; (8001bf8 <StartSIM800Task+0x53c>)
 8001ad0:	4841      	ldr	r0, [pc, #260]	; (8001bd8 <StartSIM800Task+0x51c>)
 8001ad2:	f00a f97f 	bl	800bdd4 <siprintf>
	  	HAL_UART_Transmit_IT(&huart1, str_SIM800, strlen(str_SIM800));
 8001ad6:	4840      	ldr	r0, [pc, #256]	; (8001bd8 <StartSIM800Task+0x51c>)
 8001ad8:	f7fe fb9a 	bl	8000210 <strlen>
 8001adc:	4603      	mov	r3, r0
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	493d      	ldr	r1, [pc, #244]	; (8001bd8 <StartSIM800Task+0x51c>)
 8001ae4:	483d      	ldr	r0, [pc, #244]	; (8001bdc <StartSIM800Task+0x520>)
 8001ae6:	f004 fdec 	bl	80066c2 <HAL_UART_Transmit_IT>
	  	RX = 0;
 8001aea:	4b44      	ldr	r3, [pc, #272]	; (8001bfc <StartSIM800Task+0x540>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	701a      	strb	r2, [r3, #0]
	  	HAL_UART_Receive_DMA(&huart1, SIM800BuffRx, BUFF_SIM_SIZE);
 8001af0:	224c      	movs	r2, #76	; 0x4c
 8001af2:	4937      	ldr	r1, [pc, #220]	; (8001bd0 <StartSIM800Task+0x514>)
 8001af4:	4839      	ldr	r0, [pc, #228]	; (8001bdc <StartSIM800Task+0x520>)
 8001af6:	f004 fea7 	bl	8006848 <HAL_UART_Receive_DMA>
	  	while (RX < 1) {};
 8001afa:	bf00      	nop
 8001afc:	4b3f      	ldr	r3, [pc, #252]	; (8001bfc <StartSIM800Task+0x540>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d0fb      	beq.n	8001afc <StartSIM800Task+0x440>
	  	osDelay(300);
 8001b04:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001b08:	f006 f9e5 	bl	8007ed6 <osDelay>

	  	memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001b0c:	224c      	movs	r2, #76	; 0x4c
 8001b0e:	2100      	movs	r1, #0
 8001b10:	482f      	ldr	r0, [pc, #188]	; (8001bd0 <StartSIM800Task+0x514>)
 8001b12:	f00a f923 	bl	800bd5c <memset>
	  	sprintf(str_SIM800,"AT+CIPSTATUS\r\n\0");
 8001b16:	4936      	ldr	r1, [pc, #216]	; (8001bf0 <StartSIM800Task+0x534>)
 8001b18:	482f      	ldr	r0, [pc, #188]	; (8001bd8 <StartSIM800Task+0x51c>)
 8001b1a:	f00a f95b 	bl	800bdd4 <siprintf>
	  	HAL_UART_Transmit_IT(&huart1, str_SIM800, strlen(str_SIM800));
 8001b1e:	482e      	ldr	r0, [pc, #184]	; (8001bd8 <StartSIM800Task+0x51c>)
 8001b20:	f7fe fb76 	bl	8000210 <strlen>
 8001b24:	4603      	mov	r3, r0
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	461a      	mov	r2, r3
 8001b2a:	492b      	ldr	r1, [pc, #172]	; (8001bd8 <StartSIM800Task+0x51c>)
 8001b2c:	482b      	ldr	r0, [pc, #172]	; (8001bdc <StartSIM800Task+0x520>)
 8001b2e:	f004 fdc8 	bl	80066c2 <HAL_UART_Transmit_IT>
	  	ans = SIM800_Ans("OK");
 8001b32:	482c      	ldr	r0, [pc, #176]	; (8001be4 <StartSIM800Task+0x528>)
 8001b34:	f7ff f9f0 	bl	8000f18 <SIM800_Ans>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  	if (!ans)
 8001b3e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d112      	bne.n	8001b6c <StartSIM800Task+0x4b0>
		{
			strcpy(&(msg.str), "FAILE_CIPSTATUS\r\n\0");
 8001b46:	f107 0308 	add.w	r3, r7, #8
 8001b4a:	4a2a      	ldr	r2, [pc, #168]	; (8001bf4 <StartSIM800Task+0x538>)
 8001b4c:	461c      	mov	r4, r3
 8001b4e:	4615      	mov	r5, r2
 8001b50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b54:	682b      	ldr	r3, [r5, #0]
 8001b56:	8023      	strh	r3, [r4, #0]
			osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001b58:	4b24      	ldr	r3, [pc, #144]	; (8001bec <StartSIM800Task+0x530>)
 8001b5a:	6818      	ldr	r0, [r3, #0]
 8001b5c:	f107 0108 	add.w	r1, r7, #8
 8001b60:	f04f 33ff 	mov.w	r3, #4294967295
 8001b64:	2200      	movs	r2, #0
 8001b66:	f006 fd33 	bl	80085d0 <osMessageQueuePut>
			goto start;
 8001b6a:	e5b9      	b.n	80016e0 <StartSIM800Task+0x24>
		}
		osDelay(300);
 8001b6c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001b70:	f006 f9b1 	bl	8007ed6 <osDelay>

		strcpy(&(msg.str), "START_SIM800_OK\r\n\0");
 8001b74:	f107 0308 	add.w	r3, r7, #8
 8001b78:	4a21      	ldr	r2, [pc, #132]	; (8001c00 <StartSIM800Task+0x544>)
 8001b7a:	461c      	mov	r4, r3
 8001b7c:	4615      	mov	r5, r2
 8001b7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b82:	682b      	ldr	r3, [r5, #0]
 8001b84:	8023      	strh	r3, [r4, #0]
		osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001b86:	4b19      	ldr	r3, [pc, #100]	; (8001bec <StartSIM800Task+0x530>)
 8001b88:	6818      	ldr	r0, [r3, #0]
 8001b8a:	f107 0108 	add.w	r1, r7, #8
 8001b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b92:	2200      	movs	r2, #0
 8001b94:	f006 fd1c 	bl	80085d0 <osMessageQueuePut>

	  	Start_SIM800 = 1; //module starting good
 8001b98:	4b1a      	ldr	r3, [pc, #104]	; (8001c04 <StartSIM800Task+0x548>)
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	701a      	strb	r2, [r3, #0]
	  	osMutexRelease(UART1MutexHandle); //release UART1
 8001b9e:	4b1a      	ldr	r3, [pc, #104]	; (8001c08 <StartSIM800Task+0x54c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f006 fb43 	bl	800822e <osMutexRelease>
	  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 8001ba8:	2200      	movs	r2, #0
 8001baa:	2104      	movs	r1, #4
 8001bac:	4817      	ldr	r0, [pc, #92]	; (8001c0c <StartSIM800Task+0x550>)
 8001bae:	f002 febd 	bl	800492c <HAL_GPIO_WritePin>
	  	//start thread to connect to broker
	  	MQTTConnectTaskHandle = osThreadNew(StartMQTTConnectTask, NULL, &MQTTConnectTask_attributes);
 8001bb2:	4a17      	ldr	r2, [pc, #92]	; (8001c10 <StartSIM800Task+0x554>)
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	4817      	ldr	r0, [pc, #92]	; (8001c14 <StartSIM800Task+0x558>)
 8001bb8:	f006 f8ce 	bl	8007d58 <osThreadNew>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	4a16      	ldr	r2, [pc, #88]	; (8001c18 <StartSIM800Task+0x55c>)
 8001bc0:	6013      	str	r3, [r2, #0]
	  	osThreadTerminate(SIM800StartTaskHandle); //execute this thread
 8001bc2:	4b16      	ldr	r3, [pc, #88]	; (8001c1c <StartSIM800Task+0x560>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f006 f958 	bl	8007e7c <osThreadTerminate>
  {
 8001bcc:	e57d      	b.n	80016ca <StartSIM800Task+0xe>
 8001bce:	bf00      	nop
 8001bd0:	2000041c 	.word	0x2000041c
 8001bd4:	0800d294 	.word	0x0800d294
 8001bd8:	200003d0 	.word	0x200003d0
 8001bdc:	20000164 	.word	0x20000164
 8001be0:	0800d2a0 	.word	0x0800d2a0
 8001be4:	0800d1c8 	.word	0x0800d1c8
 8001be8:	0800d2ac 	.word	0x0800d2ac
 8001bec:	20000390 	.word	0x20000390
 8001bf0:	0800d200 	.word	0x0800d200
 8001bf4:	0800d210 	.word	0x0800d210
 8001bf8:	0800d2bc 	.word	0x0800d2bc
 8001bfc:	200003b3 	.word	0x200003b3
 8001c00:	0800d2c8 	.word	0x0800d2c8
 8001c04:	200003b2 	.word	0x200003b2
 8001c08:	200003a4 	.word	0x200003a4
 8001c0c:	40020800 	.word	0x40020800
 8001c10:	0800db50 	.word	0x0800db50
 8001c14:	08001c21 	.word	0x08001c21
 8001c18:	20000384 	.word	0x20000384
 8001c1c:	20000380 	.word	0x20000380

08001c20 <StartMQTTConnectTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMQTTConnectTask */
void StartMQTTConnectTask(void *argument)
{
 8001c20:	b5b0      	push	{r4, r5, r7, lr}
 8001c22:	b0b4      	sub	sp, #208	; 0xd0
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMQTTConnectTask */

	message_type msg; // string for debug message
	uint8_t ans; //is one string in another
	uint8_t send_MQTT_message[BUFF_SIM_SIZE] = {}; //message to SIM800
 8001c28:	2300      	movs	r3, #0
 8001c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c2c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c30:	2248      	movs	r2, #72	; 0x48
 8001c32:	2100      	movs	r1, #0
 8001c34:	4618      	mov	r0, r3
 8001c36:	f00a f891 	bl	800bd5c <memset>
	uint8_t counter = 0; //counter of bad trying to connect to broker
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
  /* Infinite loop */
  for(;;)
  {

	  // waiting mutex
	  if (osMutexAcquire(UART1MutexHandle, osWaitForever) == osOK)
 8001c40:	4bc3      	ldr	r3, [pc, #780]	; (8001f50 <StartMQTTConnectTask+0x330>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f04f 31ff 	mov.w	r1, #4294967295
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f006 faa5 	bl	8008198 <osMutexAcquire>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d1f5      	bne.n	8001c40 <StartMQTTConnectTask+0x20>
	  {
	  start:
 8001c54:	bf00      	nop
		  if (counter > 5)
 8001c56:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8001c5a:	2b05      	cmp	r3, #5
 8001c5c:	d914      	bls.n	8001c88 <StartMQTTConnectTask+0x68>
		  {
			  Error_init = 1;
 8001c5e:	4bbd      	ldr	r3, [pc, #756]	; (8001f54 <StartMQTTConnectTask+0x334>)
 8001c60:	2201      	movs	r2, #1
 8001c62:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 1);
 8001c64:	2201      	movs	r2, #1
 8001c66:	2104      	movs	r1, #4
 8001c68:	48bb      	ldr	r0, [pc, #748]	; (8001f58 <StartMQTTConnectTask+0x338>)
 8001c6a:	f002 fe5f 	bl	800492c <HAL_GPIO_WritePin>
			  Start_SIM800 = 0;
 8001c6e:	4bbb      	ldr	r3, [pc, #748]	; (8001f5c <StartMQTTConnectTask+0x33c>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	701a      	strb	r2, [r3, #0]
			  osMutexRelease(UART1MutexHandle);
 8001c74:	4bb6      	ldr	r3, [pc, #728]	; (8001f50 <StartMQTTConnectTask+0x330>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f006 fad8 	bl	800822e <osMutexRelease>
			  osThreadTerminate(MQTTConnectTaskHandle);
 8001c7e:	4bb8      	ldr	r3, [pc, #736]	; (8001f60 <StartMQTTConnectTask+0x340>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f006 f8fa 	bl	8007e7c <osThreadTerminate>
		  }

		  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8001c88:	4bb6      	ldr	r3, [pc, #728]	; (8001f64 <StartMQTTConnectTask+0x344>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	68da      	ldr	r2, [r3, #12]
 8001c8e:	4bb5      	ldr	r3, [pc, #724]	; (8001f64 <StartMQTTConnectTask+0x344>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f042 0210 	orr.w	r2, r2, #16
 8001c96:	60da      	str	r2, [r3, #12]
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001c98:	224c      	movs	r2, #76	; 0x4c
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	48b2      	ldr	r0, [pc, #712]	; (8001f68 <StartMQTTConnectTask+0x348>)
 8001c9e:	f00a f85d 	bl	800bd5c <memset>
		  //sprintf(str_SIM800,"AT+CIPSTART=\"TCP\",\"broker.hivemq.com\",1883\r\0");
		  sprintf(str_SIM800,"AT+CIPSTART=\"TCP\",\"broker.emqx.io\",1883\r\n\0");
 8001ca2:	49b2      	ldr	r1, [pc, #712]	; (8001f6c <StartMQTTConnectTask+0x34c>)
 8001ca4:	48b2      	ldr	r0, [pc, #712]	; (8001f70 <StartMQTTConnectTask+0x350>)
 8001ca6:	f00a f895 	bl	800bdd4 <siprintf>
		  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 8001caa:	48b1      	ldr	r0, [pc, #708]	; (8001f70 <StartMQTTConnectTask+0x350>)
 8001cac:	f7fe fab0 	bl	8000210 <strlen>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	49ae      	ldr	r1, [pc, #696]	; (8001f70 <StartMQTTConnectTask+0x350>)
 8001cb8:	48aa      	ldr	r0, [pc, #680]	; (8001f64 <StartMQTTConnectTask+0x344>)
 8001cba:	f004 fd47 	bl	800674c <HAL_UART_Transmit_DMA>
		  ans = SIM800_Ans("OK");
 8001cbe:	48ad      	ldr	r0, [pc, #692]	; (8001f74 <StartMQTTConnectTask+0x354>)
 8001cc0:	f7ff f92a 	bl	8000f18 <SIM800_Ans>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
		  if (!ans)
 8001cca:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d117      	bne.n	8001d02 <StartMQTTConnectTask+0xe2>
		  {
			  strcpy(&(msg.str), "FAILE_connect1\r\n\0");
 8001cd2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001cd6:	4aa8      	ldr	r2, [pc, #672]	; (8001f78 <StartMQTTConnectTask+0x358>)
 8001cd8:	461c      	mov	r4, r3
 8001cda:	4615      	mov	r5, r2
 8001cdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ce0:	682b      	ldr	r3, [r5, #0]
 8001ce2:	7023      	strb	r3, [r4, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001ce4:	4ba5      	ldr	r3, [pc, #660]	; (8001f7c <StartMQTTConnectTask+0x35c>)
 8001ce6:	6818      	ldr	r0, [r3, #0]
 8001ce8:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001cec:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f006 fc6d 	bl	80085d0 <osMessageQueuePut>
			  counter++;
 8001cf6:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			  goto start;
 8001d00:	e7a9      	b.n	8001c56 <StartMQTTConnectTask+0x36>
		  }
		  osDelay(300);
 8001d02:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001d06:	f006 f8e6 	bl	8007ed6 <osDelay>

		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001d0a:	224c      	movs	r2, #76	; 0x4c
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	4896      	ldr	r0, [pc, #600]	; (8001f68 <StartMQTTConnectTask+0x348>)
 8001d10:	f00a f824 	bl	800bd5c <memset>
		  ans = SIM800_Ans("OK");
 8001d14:	4897      	ldr	r0, [pc, #604]	; (8001f74 <StartMQTTConnectTask+0x354>)
 8001d16:	f7ff f8ff 	bl	8000f18 <SIM800_Ans>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
		  if (!ans)
 8001d20:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d117      	bne.n	8001d58 <StartMQTTConnectTask+0x138>
		  {
			  strcpy(&(msg.str), "FAILE_connect2\r\n\0");
 8001d28:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001d2c:	4a94      	ldr	r2, [pc, #592]	; (8001f80 <StartMQTTConnectTask+0x360>)
 8001d2e:	461c      	mov	r4, r3
 8001d30:	4615      	mov	r5, r2
 8001d32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d36:	682b      	ldr	r3, [r5, #0]
 8001d38:	7023      	strb	r3, [r4, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001d3a:	4b90      	ldr	r3, [pc, #576]	; (8001f7c <StartMQTTConnectTask+0x35c>)
 8001d3c:	6818      	ldr	r0, [r3, #0]
 8001d3e:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001d42:	f04f 33ff 	mov.w	r3, #4294967295
 8001d46:	2200      	movs	r2, #0
 8001d48:	f006 fc42 	bl	80085d0 <osMessageQueuePut>
			  counter++;
 8001d4c:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8001d50:	3301      	adds	r3, #1
 8001d52:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			  goto start;
 8001d56:	e77e      	b.n	8001c56 <StartMQTTConnectTask+0x36>
		  }
		  osDelay(300);
 8001d58:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001d5c:	f006 f8bb 	bl	8007ed6 <osDelay>

		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001d60:	224c      	movs	r2, #76	; 0x4c
 8001d62:	2100      	movs	r1, #0
 8001d64:	4880      	ldr	r0, [pc, #512]	; (8001f68 <StartMQTTConnectTask+0x348>)
 8001d66:	f009 fff9 	bl	800bd5c <memset>
		  sprintf(str_SIM800,"AT+CIPSEND=14\r\n\0");
 8001d6a:	4986      	ldr	r1, [pc, #536]	; (8001f84 <StartMQTTConnectTask+0x364>)
 8001d6c:	4880      	ldr	r0, [pc, #512]	; (8001f70 <StartMQTTConnectTask+0x350>)
 8001d6e:	f00a f831 	bl	800bdd4 <siprintf>
		  //sprintf(str_SIM800,"AT+CIPSEND=24\r\0");
		  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 8001d72:	487f      	ldr	r0, [pc, #508]	; (8001f70 <StartMQTTConnectTask+0x350>)
 8001d74:	f7fe fa4c 	bl	8000210 <strlen>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	497c      	ldr	r1, [pc, #496]	; (8001f70 <StartMQTTConnectTask+0x350>)
 8001d80:	4878      	ldr	r0, [pc, #480]	; (8001f64 <StartMQTTConnectTask+0x344>)
 8001d82:	f004 fce3 	bl	800674c <HAL_UART_Transmit_DMA>
		  ans = SIM800_Ans(">");
 8001d86:	4880      	ldr	r0, [pc, #512]	; (8001f88 <StartMQTTConnectTask+0x368>)
 8001d88:	f7ff f8c6 	bl	8000f18 <SIM800_Ans>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
		  if (!ans)
 8001d92:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d116      	bne.n	8001dc8 <StartMQTTConnectTask+0x1a8>
		  {
			  strcpy(&(msg.str), "FAILE_send\r\n\0");
 8001d9a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001d9e:	4a7b      	ldr	r2, [pc, #492]	; (8001f8c <StartMQTTConnectTask+0x36c>)
 8001da0:	461c      	mov	r4, r3
 8001da2:	4613      	mov	r3, r2
 8001da4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001da6:	c407      	stmia	r4!, {r0, r1, r2}
 8001da8:	7023      	strb	r3, [r4, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001daa:	4b74      	ldr	r3, [pc, #464]	; (8001f7c <StartMQTTConnectTask+0x35c>)
 8001dac:	6818      	ldr	r0, [r3, #0]
 8001dae:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001db2:	f04f 33ff 	mov.w	r3, #4294967295
 8001db6:	2200      	movs	r2, #0
 8001db8:	f006 fc0a 	bl	80085d0 <osMessageQueuePut>
			  counter++;
 8001dbc:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			  goto start;
 8001dc6:	e746      	b.n	8001c56 <StartMQTTConnectTask+0x36>
		  }
		  osDelay(300);
 8001dc8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001dcc:	f006 f883 	bl	8007ed6 <osDelay>

		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001dd0:	224c      	movs	r2, #76	; 0x4c
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	4864      	ldr	r0, [pc, #400]	; (8001f68 <StartMQTTConnectTask+0x348>)
 8001dd6:	f009 ffc1 	bl	800bd5c <memset>
		  uint8_t send_MQTT_init[50] = "\x10\x0C\0\x04MQTT\x04\x02\0\x3C\0\0\0";
 8001dda:	4b6d      	ldr	r3, [pc, #436]	; (8001f90 <StartMQTTConnectTask+0x370>)
 8001ddc:	f107 0408 	add.w	r4, r7, #8
 8001de0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001de2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001de6:	f107 0318 	add.w	r3, r7, #24
 8001dea:	2222      	movs	r2, #34	; 0x22
 8001dec:	2100      	movs	r1, #0
 8001dee:	4618      	mov	r0, r3
 8001df0:	f009 ffb4 	bl	800bd5c <memset>
		  HAL_UART_Transmit_DMA(&huart1, send_MQTT_init, 14);
 8001df4:	f107 0308 	add.w	r3, r7, #8
 8001df8:	220e      	movs	r2, #14
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4859      	ldr	r0, [pc, #356]	; (8001f64 <StartMQTTConnectTask+0x344>)
 8001dfe:	f004 fca5 	bl	800674c <HAL_UART_Transmit_DMA>
		  //uint8_t send_MQTT_init[50] = "\x10\x16\0\x04MQTT\x04\x02\0\x3C\0\x0A\x34\x62\x58\x34\x56\x66\x47\x42\x51\x75\0";
		  //HAL_UART_Transmit_DMA(&huart1, send_MQTT_init, 24);
		  //osDelay(2000);

		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001e02:	224c      	movs	r2, #76	; 0x4c
 8001e04:	2100      	movs	r1, #0
 8001e06:	4858      	ldr	r0, [pc, #352]	; (8001f68 <StartMQTTConnectTask+0x348>)
 8001e08:	f009 ffa8 	bl	800bd5c <memset>
		  ans = SIM800_Ans("\x10\x0C\0\x04MQTT\x04\x02\0\x3C\0\0\0");
 8001e0c:	4861      	ldr	r0, [pc, #388]	; (8001f94 <StartMQTTConnectTask+0x374>)
 8001e0e:	f7ff f883 	bl	8000f18 <SIM800_Ans>
 8001e12:	4603      	mov	r3, r0
 8001e14:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
		  if (!ans)
 8001e18:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d11b      	bne.n	8001e58 <StartMQTTConnectTask+0x238>
		  {
			  strcpy(&(msg.str), "FAILE_init_mqtt1\r\n\0");
 8001e20:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001e24:	4a5c      	ldr	r2, [pc, #368]	; (8001f98 <StartMQTTConnectTask+0x378>)
 8001e26:	461c      	mov	r4, r3
 8001e28:	4615      	mov	r5, r2
 8001e2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e2e:	682b      	ldr	r3, [r5, #0]
 8001e30:	461a      	mov	r2, r3
 8001e32:	8022      	strh	r2, [r4, #0]
 8001e34:	3402      	adds	r4, #2
 8001e36:	0c1b      	lsrs	r3, r3, #16
 8001e38:	7023      	strb	r3, [r4, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001e3a:	4b50      	ldr	r3, [pc, #320]	; (8001f7c <StartMQTTConnectTask+0x35c>)
 8001e3c:	6818      	ldr	r0, [r3, #0]
 8001e3e:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001e42:	f04f 33ff 	mov.w	r3, #4294967295
 8001e46:	2200      	movs	r2, #0
 8001e48:	f006 fbc2 	bl	80085d0 <osMessageQueuePut>
			  counter++;
 8001e4c:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8001e50:	3301      	adds	r3, #1
 8001e52:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			  goto start;
 8001e56:	e6fe      	b.n	8001c56 <StartMQTTConnectTask+0x36>
		  }

		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001e58:	224c      	movs	r2, #76	; 0x4c
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	4842      	ldr	r0, [pc, #264]	; (8001f68 <StartMQTTConnectTask+0x348>)
 8001e5e:	f009 ff7d 	bl	800bd5c <memset>
		  ans = SIM800_Ans(MQTT_CONNECT_ASK);
 8001e62:	484e      	ldr	r0, [pc, #312]	; (8001f9c <StartMQTTConnectTask+0x37c>)
 8001e64:	f7ff f858 	bl	8000f18 <SIM800_Ans>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
		  if (!ans)
 8001e6e:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d12a      	bne.n	8001ecc <StartMQTTConnectTask+0x2ac>
		  {
			  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001e76:	224c      	movs	r2, #76	; 0x4c
 8001e78:	2100      	movs	r1, #0
 8001e7a:	483b      	ldr	r0, [pc, #236]	; (8001f68 <StartMQTTConnectTask+0x348>)
 8001e7c:	f009 ff6e 	bl	800bd5c <memset>
			  ans = SIM800_Ans(MQTT_CONNECT_ASK);
 8001e80:	4846      	ldr	r0, [pc, #280]	; (8001f9c <StartMQTTConnectTask+0x37c>)
 8001e82:	f7ff f849 	bl	8000f18 <SIM800_Ans>
 8001e86:	4603      	mov	r3, r0
 8001e88:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
			  if (!ans)
 8001e8c:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d11b      	bne.n	8001ecc <StartMQTTConnectTask+0x2ac>
			  {
				  strcpy(&(msg.str), "FAILE_init_mqtt2\r\n\0");
 8001e94:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001e98:	4a41      	ldr	r2, [pc, #260]	; (8001fa0 <StartMQTTConnectTask+0x380>)
 8001e9a:	461c      	mov	r4, r3
 8001e9c:	4615      	mov	r5, r2
 8001e9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ea0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ea2:	682b      	ldr	r3, [r5, #0]
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	8022      	strh	r2, [r4, #0]
 8001ea8:	3402      	adds	r4, #2
 8001eaa:	0c1b      	lsrs	r3, r3, #16
 8001eac:	7023      	strb	r3, [r4, #0]
				  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001eae:	4b33      	ldr	r3, [pc, #204]	; (8001f7c <StartMQTTConnectTask+0x35c>)
 8001eb0:	6818      	ldr	r0, [r3, #0]
 8001eb2:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f006 fb88 	bl	80085d0 <osMessageQueuePut>
				  counter++;
 8001ec0:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
				  goto start;
 8001eca:	e6c4      	b.n	8001c56 <StartMQTTConnectTask+0x36>
			  }
		  }
		  osDelay(100);
 8001ecc:	2064      	movs	r0, #100	; 0x64
 8001ece:	f006 f802 	bl	8007ed6 <osDelay>

		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001ed2:	224c      	movs	r2, #76	; 0x4c
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	4824      	ldr	r0, [pc, #144]	; (8001f68 <StartMQTTConnectTask+0x348>)
 8001ed8:	f009 ff40 	bl	800bd5c <memset>
		  sprintf(send_MQTT_message,"AT+CIPSEND=%d\r\n\0", strlen(TOPIC) + 7);
 8001edc:	4831      	ldr	r0, [pc, #196]	; (8001fa4 <StartMQTTConnectTask+0x384>)
 8001ede:	f7fe f997 	bl	8000210 <strlen>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	1dda      	adds	r2, r3, #7
 8001ee6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001eea:	492f      	ldr	r1, [pc, #188]	; (8001fa8 <StartMQTTConnectTask+0x388>)
 8001eec:	4618      	mov	r0, r3
 8001eee:	f009 ff71 	bl	800bdd4 <siprintf>
		  HAL_UART_Transmit_DMA(&huart1, send_MQTT_message, strlen(send_MQTT_message));
 8001ef2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7fe f98a 	bl	8000210 <strlen>
 8001efc:	4603      	mov	r3, r0
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f04:	4619      	mov	r1, r3
 8001f06:	4817      	ldr	r0, [pc, #92]	; (8001f64 <StartMQTTConnectTask+0x344>)
 8001f08:	f004 fc20 	bl	800674c <HAL_UART_Transmit_DMA>
		  ans = SIM800_Ans(">");
 8001f0c:	481e      	ldr	r0, [pc, #120]	; (8001f88 <StartMQTTConnectTask+0x368>)
 8001f0e:	f7ff f803 	bl	8000f18 <SIM800_Ans>
 8001f12:	4603      	mov	r3, r0
 8001f14:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
		  if (!ans)
 8001f18:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d147      	bne.n	8001fb0 <StartMQTTConnectTask+0x390>
		  {
			  strcpy(&(msg.str), "FAILE_send1\r\n\0");
 8001f20:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001f24:	4a21      	ldr	r2, [pc, #132]	; (8001fac <StartMQTTConnectTask+0x38c>)
 8001f26:	461c      	mov	r4, r3
 8001f28:	4613      	mov	r3, r2
 8001f2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f2c:	c407      	stmia	r4!, {r0, r1, r2}
 8001f2e:	8023      	strh	r3, [r4, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8001f30:	4b12      	ldr	r3, [pc, #72]	; (8001f7c <StartMQTTConnectTask+0x35c>)
 8001f32:	6818      	ldr	r0, [r3, #0]
 8001f34:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001f38:	f04f 33ff 	mov.w	r3, #4294967295
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f006 fb47 	bl	80085d0 <osMessageQueuePut>
			  counter++;
 8001f42:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8001f46:	3301      	adds	r3, #1
 8001f48:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			  goto start;
 8001f4c:	e683      	b.n	8001c56 <StartMQTTConnectTask+0x36>
 8001f4e:	bf00      	nop
 8001f50:	200003a4 	.word	0x200003a4
 8001f54:	200003b0 	.word	0x200003b0
 8001f58:	40020800 	.word	0x40020800
 8001f5c:	200003b2 	.word	0x200003b2
 8001f60:	20000384 	.word	0x20000384
 8001f64:	20000164 	.word	0x20000164
 8001f68:	2000041c 	.word	0x2000041c
 8001f6c:	0800d2dc 	.word	0x0800d2dc
 8001f70:	200003d0 	.word	0x200003d0
 8001f74:	0800d1c8 	.word	0x0800d1c8
 8001f78:	0800d308 	.word	0x0800d308
 8001f7c:	20000390 	.word	0x20000390
 8001f80:	0800d31c 	.word	0x0800d31c
 8001f84:	0800d330 	.word	0x0800d330
 8001f88:	0800d14c 	.word	0x0800d14c
 8001f8c:	0800d344 	.word	0x0800d344
 8001f90:	0800d3f4 	.word	0x0800d3f4
 8001f94:	0800d354 	.word	0x0800d354
 8001f98:	0800d364 	.word	0x0800d364
 8001f9c:	20000008 	.word	0x20000008
 8001fa0:	0800d378 	.word	0x0800d378
 8001fa4:	20000010 	.word	0x20000010
 8001fa8:	0800d138 	.word	0x0800d138
 8001fac:	0800d38c 	.word	0x0800d38c
		  }
		  osDelay(100);
 8001fb0:	2064      	movs	r0, #100	; 0x64
 8001fb2:	f005 ff90 	bl	8007ed6 <osDelay>
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8001fb6:	224c      	movs	r2, #76	; 0x4c
 8001fb8:	2100      	movs	r1, #0
 8001fba:	486f      	ldr	r0, [pc, #444]	; (8002178 <StartMQTTConnectTask+0x558>)
 8001fbc:	f009 fece 	bl	800bd5c <memset>

		  //create packet to subscribe on topic
		  send_MQTT_message[0] = 0x82;
 8001fc0:	2382      	movs	r3, #130	; 0x82
 8001fc2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
		  send_MQTT_message[1] = strlen(TOPIC) + 5;
 8001fc6:	486d      	ldr	r0, [pc, #436]	; (800217c <StartMQTTConnectTask+0x55c>)
 8001fc8:	f7fe f922 	bl	8000210 <strlen>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	3305      	adds	r3, #5
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
		  send_MQTT_message[2] = 0;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		  send_MQTT_message[3] = 1;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		  send_MQTT_message[4] = 0;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
		  send_MQTT_message[5] = strlen(TOPIC);
 8001fea:	4864      	ldr	r0, [pc, #400]	; (800217c <StartMQTTConnectTask+0x55c>)
 8001fec:	f7fe f910 	bl	8000210 <strlen>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
		  sprintf(send_MQTT_message + 6,"%s\0",TOPIC);
 8001ff8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ffc:	3306      	adds	r3, #6
 8001ffe:	4a5f      	ldr	r2, [pc, #380]	; (800217c <StartMQTTConnectTask+0x55c>)
 8002000:	495f      	ldr	r1, [pc, #380]	; (8002180 <StartMQTTConnectTask+0x560>)
 8002002:	4618      	mov	r0, r3
 8002004:	f009 fee6 	bl	800bdd4 <siprintf>
		  HAL_UART_Transmit_DMA(&huart1, send_MQTT_message, strlen(TOPIC) + 7);
 8002008:	485c      	ldr	r0, [pc, #368]	; (800217c <StartMQTTConnectTask+0x55c>)
 800200a:	f7fe f901 	bl	8000210 <strlen>
 800200e:	4603      	mov	r3, r0
 8002010:	b29b      	uxth	r3, r3
 8002012:	3307      	adds	r3, #7
 8002014:	b29a      	uxth	r2, r3
 8002016:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800201a:	4619      	mov	r1, r3
 800201c:	4859      	ldr	r0, [pc, #356]	; (8002184 <StartMQTTConnectTask+0x564>)
 800201e:	f004 fb95 	bl	800674c <HAL_UART_Transmit_DMA>
		  ans = SIM800_Ans(send_MQTT_message);
 8002022:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002026:	4618      	mov	r0, r3
 8002028:	f7fe ff76 	bl	8000f18 <SIM800_Ans>
 800202c:	4603      	mov	r3, r0
 800202e:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
		  if (!ans)
 8002032:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8002036:	2b00      	cmp	r3, #0
 8002038:	d116      	bne.n	8002068 <StartMQTTConnectTask+0x448>
		  {
			  strcpy(&(msg.str), "FAILE_send2\r\n\0");
 800203a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800203e:	4a52      	ldr	r2, [pc, #328]	; (8002188 <StartMQTTConnectTask+0x568>)
 8002040:	461c      	mov	r4, r3
 8002042:	4613      	mov	r3, r2
 8002044:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002046:	c407      	stmia	r4!, {r0, r1, r2}
 8002048:	8023      	strh	r3, [r4, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 800204a:	4b50      	ldr	r3, [pc, #320]	; (800218c <StartMQTTConnectTask+0x56c>)
 800204c:	6818      	ldr	r0, [r3, #0]
 800204e:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002052:	f04f 33ff 	mov.w	r3, #4294967295
 8002056:	2200      	movs	r2, #0
 8002058:	f006 faba 	bl	80085d0 <osMessageQueuePut>
			  counter++;
 800205c:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8002060:	3301      	adds	r3, #1
 8002062:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			  goto start;
 8002066:	e5f6      	b.n	8001c56 <StartMQTTConnectTask+0x36>
		  }
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002068:	224c      	movs	r2, #76	; 0x4c
 800206a:	2100      	movs	r1, #0
 800206c:	4842      	ldr	r0, [pc, #264]	; (8002178 <StartMQTTConnectTask+0x558>)
 800206e:	f009 fe75 	bl	800bd5c <memset>
		  ans = SIM800_Ans(TOPIC_ASK);
 8002072:	4847      	ldr	r0, [pc, #284]	; (8002190 <StartMQTTConnectTask+0x570>)
 8002074:	f7fe ff50 	bl	8000f18 <SIM800_Ans>
 8002078:	4603      	mov	r3, r0
 800207a:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
		  if (!ans)
 800207e:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8002082:	2b00      	cmp	r3, #0
 8002084:	d125      	bne.n	80020d2 <StartMQTTConnectTask+0x4b2>
		  {
			  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002086:	224c      	movs	r2, #76	; 0x4c
 8002088:	2100      	movs	r1, #0
 800208a:	483b      	ldr	r0, [pc, #236]	; (8002178 <StartMQTTConnectTask+0x558>)
 800208c:	f009 fe66 	bl	800bd5c <memset>
			  ans = SIM800_Ans(TOPIC_ASK);
 8002090:	483f      	ldr	r0, [pc, #252]	; (8002190 <StartMQTTConnectTask+0x570>)
 8002092:	f7fe ff41 	bl	8000f18 <SIM800_Ans>
 8002096:	4603      	mov	r3, r0
 8002098:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
			  if (!ans)
 800209c:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d116      	bne.n	80020d2 <StartMQTTConnectTask+0x4b2>
			  {
				  strcpy(&(msg.str), "FAILE_send3\r\n\0");
 80020a4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80020a8:	4a3a      	ldr	r2, [pc, #232]	; (8002194 <StartMQTTConnectTask+0x574>)
 80020aa:	461c      	mov	r4, r3
 80020ac:	4613      	mov	r3, r2
 80020ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020b0:	c407      	stmia	r4!, {r0, r1, r2}
 80020b2:	8023      	strh	r3, [r4, #0]
				  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 80020b4:	4b35      	ldr	r3, [pc, #212]	; (800218c <StartMQTTConnectTask+0x56c>)
 80020b6:	6818      	ldr	r0, [r3, #0]
 80020b8:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80020bc:	f04f 33ff 	mov.w	r3, #4294967295
 80020c0:	2200      	movs	r2, #0
 80020c2:	f006 fa85 	bl	80085d0 <osMessageQueuePut>
				  counter++;
 80020c6:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80020ca:	3301      	adds	r3, #1
 80020cc:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
				  goto start;
 80020d0:	e5c1      	b.n	8001c56 <StartMQTTConnectTask+0x36>
			  }
		  }


		  strcpy(&(msg.str), "MQTT_connect_OK\r\n\0");
 80020d2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80020d6:	4a30      	ldr	r2, [pc, #192]	; (8002198 <StartMQTTConnectTask+0x578>)
 80020d8:	461c      	mov	r4, r3
 80020da:	4615      	mov	r5, r2
 80020dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020e0:	682b      	ldr	r3, [r5, #0]
 80020e2:	8023      	strh	r3, [r4, #0]
		  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 80020e4:	4b29      	ldr	r3, [pc, #164]	; (800218c <StartMQTTConnectTask+0x56c>)
 80020e6:	6818      	ldr	r0, [r3, #0]
 80020e8:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80020ec:	f04f 33ff 	mov.w	r3, #4294967295
 80020f0:	2200      	movs	r2, #0
 80020f2:	f006 fa6d 	bl	80085d0 <osMessageQueuePut>

		  Broker_connect = 1;
 80020f6:	4b29      	ldr	r3, [pc, #164]	; (800219c <StartMQTTConnectTask+0x57c>)
 80020f8:	2201      	movs	r2, #1
 80020fa:	701a      	strb	r2, [r3, #0]
		  osTimerStart(PingTimerHandle, PING_TIME); //start ping timer
 80020fc:	4b28      	ldr	r3, [pc, #160]	; (80021a0 <StartMQTTConnectTask+0x580>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f24c 3150 	movw	r1, #50000	; 0xc350
 8002104:	4618      	mov	r0, r3
 8002106:	f005 ff93 	bl	8008030 <osTimerStart>
		  osTimerStart(DataTimerHandle, GET_DATA_PERIOD); //start ping timer
 800210a:	4b26      	ldr	r3, [pc, #152]	; (80021a4 <StartMQTTConnectTask+0x584>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f247 5130 	movw	r1, #30000	; 0x7530
 8002112:	4618      	mov	r0, r3
 8002114:	f005 ff8c 	bl	8008030 <osTimerStart>
		  HAL_UART_Receive_DMA(&huart1, SIM800BuffRx, BUFF_SIM_SIZE); //start receive messages
 8002118:	224c      	movs	r2, #76	; 0x4c
 800211a:	4917      	ldr	r1, [pc, #92]	; (8002178 <StartMQTTConnectTask+0x558>)
 800211c:	4819      	ldr	r0, [pc, #100]	; (8002184 <StartMQTTConnectTask+0x564>)
 800211e:	f004 fb93 	bl	8006848 <HAL_UART_Receive_DMA>
		  Tech_ans_wait = 0;
 8002122:	4b21      	ldr	r3, [pc, #132]	; (80021a8 <StartMQTTConnectTask+0x588>)
 8002124:	2200      	movs	r2, #0
 8002126:	701a      	strb	r2, [r3, #0]

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 8002128:	2200      	movs	r2, #0
 800212a:	2108      	movs	r1, #8
 800212c:	481f      	ldr	r0, [pc, #124]	; (80021ac <StartMQTTConnectTask+0x58c>)
 800212e:	f002 fbfd 	bl	800492c <HAL_GPIO_WritePin>
		  //start receiving data from broker
		  osMutexRelease(UART1MutexHandle);
 8002132:	4b1f      	ldr	r3, [pc, #124]	; (80021b0 <StartMQTTConnectTask+0x590>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f006 f879 	bl	800822e <osMutexRelease>
		  PINGTaskHandle = osThreadNew(PINGStartTask, NULL, &PINGTask_attributes);
 800213c:	4a1d      	ldr	r2, [pc, #116]	; (80021b4 <StartMQTTConnectTask+0x594>)
 800213e:	2100      	movs	r1, #0
 8002140:	481d      	ldr	r0, [pc, #116]	; (80021b8 <StartMQTTConnectTask+0x598>)
 8002142:	f005 fe09 	bl	8007d58 <osThreadNew>
 8002146:	4603      	mov	r3, r0
 8002148:	4a1c      	ldr	r2, [pc, #112]	; (80021bc <StartMQTTConnectTask+0x59c>)
 800214a:	6013      	str	r3, [r2, #0]
		  sprintf(&(msg.str), "On the line, Firmware V0.93\r\n\0");
 800214c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002150:	491b      	ldr	r1, [pc, #108]	; (80021c0 <StartMQTTConnectTask+0x5a0>)
 8002152:	4618      	mov	r0, r3
 8002154:	f009 fe3e 	bl	800bdd4 <siprintf>
		  osMessageQueuePut(SIM800SendQueueHandle, &msg, 0, osWaitForever);
 8002158:	4b1a      	ldr	r3, [pc, #104]	; (80021c4 <StartMQTTConnectTask+0x5a4>)
 800215a:	6818      	ldr	r0, [r3, #0]
 800215c:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002160:	f04f 33ff 	mov.w	r3, #4294967295
 8002164:	2200      	movs	r2, #0
 8002166:	f006 fa33 	bl	80085d0 <osMessageQueuePut>
		  //HAL_UART_Receive_DMA(&huart1, SIM800BuffRx, BUFF_SIM_SIZE); //start receive messages
		  osThreadTerminate(MQTTConnectTaskHandle);
 800216a:	4b17      	ldr	r3, [pc, #92]	; (80021c8 <StartMQTTConnectTask+0x5a8>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f005 fe84 	bl	8007e7c <osThreadTerminate>
	  if (osMutexAcquire(UART1MutexHandle, osWaitForever) == osOK)
 8002174:	e564      	b.n	8001c40 <StartMQTTConnectTask+0x20>
 8002176:	bf00      	nop
 8002178:	2000041c 	.word	0x2000041c
 800217c:	20000010 	.word	0x20000010
 8002180:	0800d39c 	.word	0x0800d39c
 8002184:	20000164 	.word	0x20000164
 8002188:	0800d3a0 	.word	0x0800d3a0
 800218c:	20000390 	.word	0x20000390
 8002190:	20000024 	.word	0x20000024
 8002194:	0800d3b0 	.word	0x0800d3b0
 8002198:	0800d3c0 	.word	0x0800d3c0
 800219c:	200003b4 	.word	0x200003b4
 80021a0:	2000039c 	.word	0x2000039c
 80021a4:	200003a0 	.word	0x200003a0
 80021a8:	200003b5 	.word	0x200003b5
 80021ac:	40020800 	.word	0x40020800
 80021b0:	200003a4 	.word	0x200003a4
 80021b4:	0800db08 	.word	0x0800db08
 80021b8:	0800141d 	.word	0x0800141d
 80021bc:	2000037c 	.word	0x2000037c
 80021c0:	0800d3d4 	.word	0x0800d3d4
 80021c4:	20000394 	.word	0x20000394
 80021c8:	20000384 	.word	0x20000384

080021cc <StartMessHandlerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMessHandlerTask */
void StartMessHandlerTask(void *argument)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b0a6      	sub	sp, #152	; 0x98
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
	message_type msg;
	message_type msg2;
  /* Infinite loop */
  for(;;)
  {
	  if (osMessageQueueGet(RxSIM800QueueHandle, &msg, 0, osWaitForever) == osOK)
 80021d4:	4b48      	ldr	r3, [pc, #288]	; (80022f8 <StartMessHandlerTask+0x12c>)
 80021d6:	6818      	ldr	r0, [r3, #0]
 80021d8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80021dc:	f04f 33ff 	mov.w	r3, #4294967295
 80021e0:	2200      	movs	r2, #0
 80021e2:	f006 fa55 	bl	8008690 <osMessageQueueGet>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1f3      	bne.n	80021d4 <StartMessHandlerTask+0x8>
	  {

		sprintf(&(msg2.str), "RX\r\n\0");
 80021ec:	f107 0308 	add.w	r3, r7, #8
 80021f0:	4942      	ldr	r1, [pc, #264]	; (80022fc <StartMessHandlerTask+0x130>)
 80021f2:	4618      	mov	r0, r3
 80021f4:	f009 fdee 	bl	800bdd4 <siprintf>
		osMessageQueuePut(SIM800SendQueueHandle, &msg2, 0, osWaitForever);
 80021f8:	4b41      	ldr	r3, [pc, #260]	; (8002300 <StartMessHandlerTask+0x134>)
 80021fa:	6818      	ldr	r0, [r3, #0]
 80021fc:	f107 0108 	add.w	r1, r7, #8
 8002200:	f04f 33ff 	mov.w	r3, #4294967295
 8002204:	2200      	movs	r2, #0
 8002206:	f006 f9e3 	bl	80085d0 <osMessageQueuePut>
		if (String_in_String(msg.str,MESSAGE_TYPE_BUFF_SIZE,";;on"))
 800220a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800220e:	4a3d      	ldr	r2, [pc, #244]	; (8002304 <StartMessHandlerTask+0x138>)
 8002210:	2146      	movs	r1, #70	; 0x46
 8002212:	4618      	mov	r0, r3
 8002214:	f7fe fdd2 	bl	8000dbc <String_in_String>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d005      	beq.n	800222a <StartMessHandlerTask+0x5e>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 800221e:	2200      	movs	r2, #0
 8002220:	2102      	movs	r1, #2
 8002222:	4839      	ldr	r0, [pc, #228]	; (8002308 <StartMessHandlerTask+0x13c>)
 8002224:	f002 fb82 	bl	800492c <HAL_GPIO_WritePin>
 8002228:	e7d4      	b.n	80021d4 <StartMessHandlerTask+0x8>
		}
		else if (String_in_String(msg.str,MESSAGE_TYPE_BUFF_SIZE,";;off"))
 800222a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800222e:	4a37      	ldr	r2, [pc, #220]	; (800230c <StartMessHandlerTask+0x140>)
 8002230:	2146      	movs	r1, #70	; 0x46
 8002232:	4618      	mov	r0, r3
 8002234:	f7fe fdc2 	bl	8000dbc <String_in_String>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d005      	beq.n	800224a <StartMessHandlerTask+0x7e>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1);
 800223e:	2201      	movs	r2, #1
 8002240:	2102      	movs	r1, #2
 8002242:	4831      	ldr	r0, [pc, #196]	; (8002308 <StartMessHandlerTask+0x13c>)
 8002244:	f002 fb72 	bl	800492c <HAL_GPIO_WritePin>
 8002248:	e7c4      	b.n	80021d4 <StartMessHandlerTask+0x8>
		}
		else if (String_in_String(msg.str,MESSAGE_TYPE_BUFF_SIZE,";;data"))
 800224a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800224e:	4a30      	ldr	r2, [pc, #192]	; (8002310 <StartMessHandlerTask+0x144>)
 8002250:	2146      	movs	r1, #70	; 0x46
 8002252:	4618      	mov	r0, r3
 8002254:	f7fe fdb2 	bl	8000dbc <String_in_String>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d003      	beq.n	8002266 <StartMessHandlerTask+0x9a>
		{
			Get_data = 1;
 800225e:	4b2d      	ldr	r3, [pc, #180]	; (8002314 <StartMessHandlerTask+0x148>)
 8002260:	2201      	movs	r2, #1
 8002262:	701a      	strb	r2, [r3, #0]
 8002264:	e7b6      	b.n	80021d4 <StartMessHandlerTask+0x8>
		}
		else if (String_in_String(msg.str,MESSAGE_TYPE_BUFF_SIZE,";;updt"))
 8002266:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800226a:	4a2b      	ldr	r2, [pc, #172]	; (8002318 <StartMessHandlerTask+0x14c>)
 800226c:	2146      	movs	r1, #70	; 0x46
 800226e:	4618      	mov	r0, r3
 8002270:	f7fe fda4 	bl	8000dbc <String_in_String>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d0ac      	beq.n	80021d4 <StartMessHandlerTask+0x8>
		{
			if (osMutexAcquire(UART1MutexHandle, osWaitForever) == osOK)
 800227a:	4b28      	ldr	r3, [pc, #160]	; (800231c <StartMessHandlerTask+0x150>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f04f 31ff 	mov.w	r1, #4294967295
 8002282:	4618      	mov	r0, r3
 8002284:	f005 ff88 	bl	8008198 <osMutexAcquire>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1a2      	bne.n	80021d4 <StartMessHandlerTask+0x8>
		    {
				memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 800228e:	224c      	movs	r2, #76	; 0x4c
 8002290:	2100      	movs	r1, #0
 8002292:	4823      	ldr	r0, [pc, #140]	; (8002320 <StartMessHandlerTask+0x154>)
 8002294:	f009 fd62 	bl	800bd5c <memset>
				sprintf(str_SIM800,"AT+CIPCLOSE\r\n\0");
 8002298:	4922      	ldr	r1, [pc, #136]	; (8002324 <StartMessHandlerTask+0x158>)
 800229a:	4823      	ldr	r0, [pc, #140]	; (8002328 <StartMessHandlerTask+0x15c>)
 800229c:	f009 fd9a 	bl	800bdd4 <siprintf>
				HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 80022a0:	4821      	ldr	r0, [pc, #132]	; (8002328 <StartMessHandlerTask+0x15c>)
 80022a2:	f7fd ffb5 	bl	8000210 <strlen>
 80022a6:	4603      	mov	r3, r0
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	461a      	mov	r2, r3
 80022ac:	491e      	ldr	r1, [pc, #120]	; (8002328 <StartMessHandlerTask+0x15c>)
 80022ae:	481f      	ldr	r0, [pc, #124]	; (800232c <StartMessHandlerTask+0x160>)
 80022b0:	f004 fa4c 	bl	800674c <HAL_UART_Transmit_DMA>
				osDelay(1000);
 80022b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022b8:	f005 fe0d 	bl	8007ed6 <osDelay>
				osThreadTerminate(PINGTaskHandle);
 80022bc:	4b1c      	ldr	r3, [pc, #112]	; (8002330 <StartMessHandlerTask+0x164>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f005 fddb 	bl	8007e7c <osThreadTerminate>
				osThreadTerminate(SIM800SendTaskHandle);
 80022c6:	4b1b      	ldr	r3, [pc, #108]	; (8002334 <StartMessHandlerTask+0x168>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f005 fdd6 	bl	8007e7c <osThreadTerminate>
				osThreadTerminate(defaultTaskHandle);
 80022d0:	4b19      	ldr	r3, [pc, #100]	; (8002338 <StartMessHandlerTask+0x16c>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f005 fdd1 	bl	8007e7c <osThreadTerminate>
				osMutexRelease(UART1MutexHandle); //release UART for SIM800
 80022da:	4b10      	ldr	r3, [pc, #64]	; (800231c <StartMessHandlerTask+0x150>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f005 ffa5 	bl	800822e <osMutexRelease>
				myTaskGetFirmHandle = osThreadNew(StartGetFirmware, NULL, &myTaskGetFirm_attributes);
 80022e4:	4a15      	ldr	r2, [pc, #84]	; (800233c <StartMessHandlerTask+0x170>)
 80022e6:	2100      	movs	r1, #0
 80022e8:	4815      	ldr	r0, [pc, #84]	; (8002340 <StartMessHandlerTask+0x174>)
 80022ea:	f005 fd35 	bl	8007d58 <osThreadNew>
 80022ee:	4603      	mov	r3, r0
 80022f0:	4a14      	ldr	r2, [pc, #80]	; (8002344 <StartMessHandlerTask+0x178>)
 80022f2:	6013      	str	r3, [r2, #0]
	  if (osMessageQueueGet(RxSIM800QueueHandle, &msg, 0, osWaitForever) == osOK)
 80022f4:	e76e      	b.n	80021d4 <StartMessHandlerTask+0x8>
 80022f6:	bf00      	nop
 80022f8:	20000398 	.word	0x20000398
 80022fc:	0800d428 	.word	0x0800d428
 8002300:	20000394 	.word	0x20000394
 8002304:	0800d430 	.word	0x0800d430
 8002308:	40020800 	.word	0x40020800
 800230c:	0800d438 	.word	0x0800d438
 8002310:	0800d440 	.word	0x0800d440
 8002314:	200003b6 	.word	0x200003b6
 8002318:	0800d448 	.word	0x0800d448
 800231c:	200003a4 	.word	0x200003a4
 8002320:	2000041c 	.word	0x2000041c
 8002324:	0800d450 	.word	0x0800d450
 8002328:	200003d0 	.word	0x200003d0
 800232c:	20000164 	.word	0x20000164
 8002330:	2000037c 	.word	0x2000037c
 8002334:	20000378 	.word	0x20000378
 8002338:	2000036c 	.word	0x2000036c
 800233c:	0800db98 	.word	0x0800db98
 8002340:	08002349 	.word	0x08002349
 8002344:	2000038c 	.word	0x2000038c

08002348 <StartGetFirmware>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGetFirmware */
void StartGetFirmware(void *argument)
{
 8002348:	b590      	push	{r4, r7, lr}
 800234a:	b0c5      	sub	sp, #276	; 0x114
 800234c:	af02      	add	r7, sp, #8
 800234e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002352:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002356:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartGetFirmware */
	message_type msg; // string for debug message
	uint8_t ans; //is one string in another
	uint8_t send_MQTT_message[BUFF_SIM_SIZE] = {}; //message to SIM800
 8002358:	2300      	movs	r3, #0
 800235a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800235c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002360:	2248      	movs	r2, #72	; 0x48
 8002362:	2100      	movs	r1, #0
 8002364:	4618      	mov	r0, r3
 8002366:	f009 fcf9 	bl	800bd5c <memset>
	uint32_t sector_of_firmware = 30;
 800236a:	231e      	movs	r3, #30
 800236c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	uint8_t tmp2[30];
	uint8_t tmp3[30];
  /* Infinite loop */
  for(;;)
  {
	  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8002370:	4bc0      	ldr	r3, [pc, #768]	; (8002674 <StartGetFirmware+0x32c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68da      	ldr	r2, [r3, #12]
 8002376:	4bbf      	ldr	r3, [pc, #764]	; (8002674 <StartGetFirmware+0x32c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f042 0210 	orr.w	r2, r2, #16
 800237e:	60da      	str	r2, [r3, #12]
	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002380:	224c      	movs	r2, #76	; 0x4c
 8002382:	2100      	movs	r1, #0
 8002384:	48bc      	ldr	r0, [pc, #752]	; (8002678 <StartGetFirmware+0x330>)
 8002386:	f009 fce9 	bl	800bd5c <memset>
	  sprintf(str_SIM800,"AT+FTPMODE=1\r\n\0");
 800238a:	49bc      	ldr	r1, [pc, #752]	; (800267c <StartGetFirmware+0x334>)
 800238c:	48bc      	ldr	r0, [pc, #752]	; (8002680 <StartGetFirmware+0x338>)
 800238e:	f009 fd21 	bl	800bdd4 <siprintf>
	  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 8002392:	48bb      	ldr	r0, [pc, #748]	; (8002680 <StartGetFirmware+0x338>)
 8002394:	f7fd ff3c 	bl	8000210 <strlen>
 8002398:	4603      	mov	r3, r0
 800239a:	b29b      	uxth	r3, r3
 800239c:	461a      	mov	r2, r3
 800239e:	49b8      	ldr	r1, [pc, #736]	; (8002680 <StartGetFirmware+0x338>)
 80023a0:	48b4      	ldr	r0, [pc, #720]	; (8002674 <StartGetFirmware+0x32c>)
 80023a2:	f004 f9d3 	bl	800674c <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 80023a6:	48b7      	ldr	r0, [pc, #732]	; (8002684 <StartGetFirmware+0x33c>)
 80023a8:	f7fe fdb6 	bl	8000f18 <SIM800_Ans>
 80023ac:	4603      	mov	r3, r0
 80023ae:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	  if (!ans)
 80023b2:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d11d      	bne.n	80023f6 <StartGetFirmware+0xae>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80023ba:	224c      	movs	r2, #76	; 0x4c
 80023bc:	2100      	movs	r1, #0
 80023be:	48ae      	ldr	r0, [pc, #696]	; (8002678 <StartGetFirmware+0x330>)
 80023c0:	f009 fccc 	bl	800bd5c <memset>
		  ans = SIM800_Ans("OK");
 80023c4:	48af      	ldr	r0, [pc, #700]	; (8002684 <StartGetFirmware+0x33c>)
 80023c6:	f7fe fda7 	bl	8000f18 <SIM800_Ans>
 80023ca:	4603      	mov	r3, r0
 80023cc:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
		  if (!ans)
 80023d0:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d10e      	bne.n	80023f6 <StartGetFirmware+0xae>
		  {
			  strcpy(&(msg.str), "FTPMODE\r\n\0");
 80023d8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80023dc:	4aaa      	ldr	r2, [pc, #680]	; (8002688 <StartGetFirmware+0x340>)
 80023de:	ca07      	ldmia	r2, {r0, r1, r2}
 80023e0:	c303      	stmia	r3!, {r0, r1}
 80023e2:	801a      	strh	r2, [r3, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 80023e4:	4ba9      	ldr	r3, [pc, #676]	; (800268c <StartGetFirmware+0x344>)
 80023e6:	6818      	ldr	r0, [r3, #0]
 80023e8:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80023ec:	f04f 33ff 	mov.w	r3, #4294967295
 80023f0:	2200      	movs	r2, #0
 80023f2:	f006 f8ed 	bl	80085d0 <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 80023f6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80023fa:	f005 fd6c 	bl	8007ed6 <osDelay>
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
		  }
	  }
	  osDelay(300);*/

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80023fe:	224c      	movs	r2, #76	; 0x4c
 8002400:	2100      	movs	r1, #0
 8002402:	489d      	ldr	r0, [pc, #628]	; (8002678 <StartGetFirmware+0x330>)
 8002404:	f009 fcaa 	bl	800bd5c <memset>
	  sprintf(str_SIM800,"AT+FTPTYPE=I\r\n\0");
 8002408:	49a1      	ldr	r1, [pc, #644]	; (8002690 <StartGetFirmware+0x348>)
 800240a:	489d      	ldr	r0, [pc, #628]	; (8002680 <StartGetFirmware+0x338>)
 800240c:	f009 fce2 	bl	800bdd4 <siprintf>
	  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 8002410:	489b      	ldr	r0, [pc, #620]	; (8002680 <StartGetFirmware+0x338>)
 8002412:	f7fd fefd 	bl	8000210 <strlen>
 8002416:	4603      	mov	r3, r0
 8002418:	b29b      	uxth	r3, r3
 800241a:	461a      	mov	r2, r3
 800241c:	4998      	ldr	r1, [pc, #608]	; (8002680 <StartGetFirmware+0x338>)
 800241e:	4895      	ldr	r0, [pc, #596]	; (8002674 <StartGetFirmware+0x32c>)
 8002420:	f004 f994 	bl	800674c <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 8002424:	4897      	ldr	r0, [pc, #604]	; (8002684 <StartGetFirmware+0x33c>)
 8002426:	f7fe fd77 	bl	8000f18 <SIM800_Ans>
 800242a:	4603      	mov	r3, r0
 800242c:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	  if (!ans)
 8002430:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8002434:	2b00      	cmp	r3, #0
 8002436:	d11d      	bne.n	8002474 <StartGetFirmware+0x12c>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002438:	224c      	movs	r2, #76	; 0x4c
 800243a:	2100      	movs	r1, #0
 800243c:	488e      	ldr	r0, [pc, #568]	; (8002678 <StartGetFirmware+0x330>)
 800243e:	f009 fc8d 	bl	800bd5c <memset>
		  ans = SIM800_Ans("OK");
 8002442:	4890      	ldr	r0, [pc, #576]	; (8002684 <StartGetFirmware+0x33c>)
 8002444:	f7fe fd68 	bl	8000f18 <SIM800_Ans>
 8002448:	4603      	mov	r3, r0
 800244a:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
		  if (!ans)
 800244e:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8002452:	2b00      	cmp	r3, #0
 8002454:	d10e      	bne.n	8002474 <StartGetFirmware+0x12c>
		  {
			  strcpy(&(msg.str), "FTPTYPE\r\n\0");
 8002456:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800245a:	4a8e      	ldr	r2, [pc, #568]	; (8002694 <StartGetFirmware+0x34c>)
 800245c:	ca07      	ldmia	r2, {r0, r1, r2}
 800245e:	c303      	stmia	r3!, {r0, r1}
 8002460:	801a      	strh	r2, [r3, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8002462:	4b8a      	ldr	r3, [pc, #552]	; (800268c <StartGetFirmware+0x344>)
 8002464:	6818      	ldr	r0, [r3, #0]
 8002466:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800246a:	f04f 33ff 	mov.w	r3, #4294967295
 800246e:	2200      	movs	r2, #0
 8002470:	f006 f8ae 	bl	80085d0 <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 8002474:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002478:	f005 fd2d 	bl	8007ed6 <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 800247c:	224c      	movs	r2, #76	; 0x4c
 800247e:	2100      	movs	r1, #0
 8002480:	487d      	ldr	r0, [pc, #500]	; (8002678 <StartGetFirmware+0x330>)
 8002482:	f009 fc6b 	bl	800bd5c <memset>
	  sprintf(str_SIM800,"AT+SAPBR=3,1,CONTYPE,GPRS\r\n\0");
 8002486:	4984      	ldr	r1, [pc, #528]	; (8002698 <StartGetFirmware+0x350>)
 8002488:	487d      	ldr	r0, [pc, #500]	; (8002680 <StartGetFirmware+0x338>)
 800248a:	f009 fca3 	bl	800bdd4 <siprintf>
	  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 800248e:	487c      	ldr	r0, [pc, #496]	; (8002680 <StartGetFirmware+0x338>)
 8002490:	f7fd febe 	bl	8000210 <strlen>
 8002494:	4603      	mov	r3, r0
 8002496:	b29b      	uxth	r3, r3
 8002498:	461a      	mov	r2, r3
 800249a:	4979      	ldr	r1, [pc, #484]	; (8002680 <StartGetFirmware+0x338>)
 800249c:	4875      	ldr	r0, [pc, #468]	; (8002674 <StartGetFirmware+0x32c>)
 800249e:	f004 f955 	bl	800674c <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 80024a2:	4878      	ldr	r0, [pc, #480]	; (8002684 <StartGetFirmware+0x33c>)
 80024a4:	f7fe fd38 	bl	8000f18 <SIM800_Ans>
 80024a8:	4603      	mov	r3, r0
 80024aa:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	  if (!ans)
 80024ae:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d11e      	bne.n	80024f4 <StartGetFirmware+0x1ac>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80024b6:	224c      	movs	r2, #76	; 0x4c
 80024b8:	2100      	movs	r1, #0
 80024ba:	486f      	ldr	r0, [pc, #444]	; (8002678 <StartGetFirmware+0x330>)
 80024bc:	f009 fc4e 	bl	800bd5c <memset>
		  ans = SIM800_Ans("OK");
 80024c0:	4870      	ldr	r0, [pc, #448]	; (8002684 <StartGetFirmware+0x33c>)
 80024c2:	f7fe fd29 	bl	8000f18 <SIM800_Ans>
 80024c6:	4603      	mov	r3, r0
 80024c8:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
		  if (!ans)
 80024cc:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d10f      	bne.n	80024f4 <StartGetFirmware+0x1ac>
		  {
			  strcpy(&(msg.str), "SAPBR\r\n\0");
 80024d4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80024d8:	4a70      	ldr	r2, [pc, #448]	; (800269c <StartGetFirmware+0x354>)
 80024da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024de:	e883 0003 	stmia.w	r3, {r0, r1}
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 80024e2:	4b6a      	ldr	r3, [pc, #424]	; (800268c <StartGetFirmware+0x344>)
 80024e4:	6818      	ldr	r0, [r3, #0]
 80024e6:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80024ea:	f04f 33ff 	mov.w	r3, #4294967295
 80024ee:	2200      	movs	r2, #0
 80024f0:	f006 f86e 	bl	80085d0 <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 80024f4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80024f8:	f005 fced 	bl	8007ed6 <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80024fc:	224c      	movs	r2, #76	; 0x4c
 80024fe:	2100      	movs	r1, #0
 8002500:	485d      	ldr	r0, [pc, #372]	; (8002678 <StartGetFirmware+0x330>)
 8002502:	f009 fc2b 	bl	800bd5c <memset>
	  sprintf(str_SIM800,"AT+SAPBR=3,1,APN,internet.beeline.ru\r\n\0");
 8002506:	4966      	ldr	r1, [pc, #408]	; (80026a0 <StartGetFirmware+0x358>)
 8002508:	485d      	ldr	r0, [pc, #372]	; (8002680 <StartGetFirmware+0x338>)
 800250a:	f009 fc63 	bl	800bdd4 <siprintf>
	  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 800250e:	485c      	ldr	r0, [pc, #368]	; (8002680 <StartGetFirmware+0x338>)
 8002510:	f7fd fe7e 	bl	8000210 <strlen>
 8002514:	4603      	mov	r3, r0
 8002516:	b29b      	uxth	r3, r3
 8002518:	461a      	mov	r2, r3
 800251a:	4959      	ldr	r1, [pc, #356]	; (8002680 <StartGetFirmware+0x338>)
 800251c:	4855      	ldr	r0, [pc, #340]	; (8002674 <StartGetFirmware+0x32c>)
 800251e:	f004 f915 	bl	800674c <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 8002522:	4858      	ldr	r0, [pc, #352]	; (8002684 <StartGetFirmware+0x33c>)
 8002524:	f7fe fcf8 	bl	8000f18 <SIM800_Ans>
 8002528:	4603      	mov	r3, r0
 800252a:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	  if (!ans)
 800252e:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8002532:	2b00      	cmp	r3, #0
 8002534:	d11e      	bne.n	8002574 <StartGetFirmware+0x22c>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002536:	224c      	movs	r2, #76	; 0x4c
 8002538:	2100      	movs	r1, #0
 800253a:	484f      	ldr	r0, [pc, #316]	; (8002678 <StartGetFirmware+0x330>)
 800253c:	f009 fc0e 	bl	800bd5c <memset>
		  ans = SIM800_Ans("OK");
 8002540:	4850      	ldr	r0, [pc, #320]	; (8002684 <StartGetFirmware+0x33c>)
 8002542:	f7fe fce9 	bl	8000f18 <SIM800_Ans>
 8002546:	4603      	mov	r3, r0
 8002548:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
		  if (!ans)
 800254c:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8002550:	2b00      	cmp	r3, #0
 8002552:	d10f      	bne.n	8002574 <StartGetFirmware+0x22c>
		  {
			  strcpy(&(msg.str), "SAPBR\r\n\0");
 8002554:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002558:	4a50      	ldr	r2, [pc, #320]	; (800269c <StartGetFirmware+0x354>)
 800255a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800255e:	e883 0003 	stmia.w	r3, {r0, r1}
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8002562:	4b4a      	ldr	r3, [pc, #296]	; (800268c <StartGetFirmware+0x344>)
 8002564:	6818      	ldr	r0, [r3, #0]
 8002566:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800256a:	f04f 33ff 	mov.w	r3, #4294967295
 800256e:	2200      	movs	r2, #0
 8002570:	f006 f82e 	bl	80085d0 <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 8002574:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002578:	f005 fcad 	bl	8007ed6 <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 800257c:	224c      	movs	r2, #76	; 0x4c
 800257e:	2100      	movs	r1, #0
 8002580:	483d      	ldr	r0, [pc, #244]	; (8002678 <StartGetFirmware+0x330>)
 8002582:	f009 fbeb 	bl	800bd5c <memset>
	  sprintf(str_SIM800,"AT+SAPBR=1,1\r\n\0");
 8002586:	4947      	ldr	r1, [pc, #284]	; (80026a4 <StartGetFirmware+0x35c>)
 8002588:	483d      	ldr	r0, [pc, #244]	; (8002680 <StartGetFirmware+0x338>)
 800258a:	f009 fc23 	bl	800bdd4 <siprintf>
	  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 800258e:	483c      	ldr	r0, [pc, #240]	; (8002680 <StartGetFirmware+0x338>)
 8002590:	f7fd fe3e 	bl	8000210 <strlen>
 8002594:	4603      	mov	r3, r0
 8002596:	b29b      	uxth	r3, r3
 8002598:	461a      	mov	r2, r3
 800259a:	4939      	ldr	r1, [pc, #228]	; (8002680 <StartGetFirmware+0x338>)
 800259c:	4835      	ldr	r0, [pc, #212]	; (8002674 <StartGetFirmware+0x32c>)
 800259e:	f004 f8d5 	bl	800674c <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 80025a2:	4838      	ldr	r0, [pc, #224]	; (8002684 <StartGetFirmware+0x33c>)
 80025a4:	f7fe fcb8 	bl	8000f18 <SIM800_Ans>
 80025a8:	4603      	mov	r3, r0
 80025aa:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	  if (!ans)
 80025ae:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d11e      	bne.n	80025f4 <StartGetFirmware+0x2ac>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80025b6:	224c      	movs	r2, #76	; 0x4c
 80025b8:	2100      	movs	r1, #0
 80025ba:	482f      	ldr	r0, [pc, #188]	; (8002678 <StartGetFirmware+0x330>)
 80025bc:	f009 fbce 	bl	800bd5c <memset>
		  ans = SIM800_Ans("OK");
 80025c0:	4830      	ldr	r0, [pc, #192]	; (8002684 <StartGetFirmware+0x33c>)
 80025c2:	f7fe fca9 	bl	8000f18 <SIM800_Ans>
 80025c6:	4603      	mov	r3, r0
 80025c8:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
		  if (!ans)
 80025cc:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d10f      	bne.n	80025f4 <StartGetFirmware+0x2ac>
		  {
			  strcpy(&(msg.str), "SAPBR\r\n\0");
 80025d4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80025d8:	4a30      	ldr	r2, [pc, #192]	; (800269c <StartGetFirmware+0x354>)
 80025da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80025de:	e883 0003 	stmia.w	r3, {r0, r1}
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 80025e2:	4b2a      	ldr	r3, [pc, #168]	; (800268c <StartGetFirmware+0x344>)
 80025e4:	6818      	ldr	r0, [r3, #0]
 80025e6:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80025ea:	f04f 33ff 	mov.w	r3, #4294967295
 80025ee:	2200      	movs	r2, #0
 80025f0:	f005 ffee 	bl	80085d0 <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 80025f4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80025f8:	f005 fc6d 	bl	8007ed6 <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80025fc:	224c      	movs	r2, #76	; 0x4c
 80025fe:	2100      	movs	r1, #0
 8002600:	481d      	ldr	r0, [pc, #116]	; (8002678 <StartGetFirmware+0x330>)
 8002602:	f009 fbab 	bl	800bd5c <memset>
	  sprintf(str_SIM800,"AT+FTPCID=1\r\n\0");
 8002606:	4928      	ldr	r1, [pc, #160]	; (80026a8 <StartGetFirmware+0x360>)
 8002608:	481d      	ldr	r0, [pc, #116]	; (8002680 <StartGetFirmware+0x338>)
 800260a:	f009 fbe3 	bl	800bdd4 <siprintf>
	  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 800260e:	481c      	ldr	r0, [pc, #112]	; (8002680 <StartGetFirmware+0x338>)
 8002610:	f7fd fdfe 	bl	8000210 <strlen>
 8002614:	4603      	mov	r3, r0
 8002616:	b29b      	uxth	r3, r3
 8002618:	461a      	mov	r2, r3
 800261a:	4919      	ldr	r1, [pc, #100]	; (8002680 <StartGetFirmware+0x338>)
 800261c:	4815      	ldr	r0, [pc, #84]	; (8002674 <StartGetFirmware+0x32c>)
 800261e:	f004 f895 	bl	800674c <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 8002622:	4818      	ldr	r0, [pc, #96]	; (8002684 <StartGetFirmware+0x33c>)
 8002624:	f7fe fc78 	bl	8000f18 <SIM800_Ans>
 8002628:	4603      	mov	r3, r0
 800262a:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	  if (!ans)
 800262e:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8002632:	2b00      	cmp	r3, #0
 8002634:	d13c      	bne.n	80026b0 <StartGetFirmware+0x368>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002636:	224c      	movs	r2, #76	; 0x4c
 8002638:	2100      	movs	r1, #0
 800263a:	480f      	ldr	r0, [pc, #60]	; (8002678 <StartGetFirmware+0x330>)
 800263c:	f009 fb8e 	bl	800bd5c <memset>
		  ans = SIM800_Ans("OK");
 8002640:	4810      	ldr	r0, [pc, #64]	; (8002684 <StartGetFirmware+0x33c>)
 8002642:	f7fe fc69 	bl	8000f18 <SIM800_Ans>
 8002646:	4603      	mov	r3, r0
 8002648:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
		  if (!ans)
 800264c:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8002650:	2b00      	cmp	r3, #0
 8002652:	d12d      	bne.n	80026b0 <StartGetFirmware+0x368>
		  {
			  strcpy(&(msg.str), "FTPCID\r\n\0");
 8002654:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002658:	4a14      	ldr	r2, [pc, #80]	; (80026ac <StartGetFirmware+0x364>)
 800265a:	ca07      	ldmia	r2, {r0, r1, r2}
 800265c:	c303      	stmia	r3!, {r0, r1}
 800265e:	701a      	strb	r2, [r3, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8002660:	4b0a      	ldr	r3, [pc, #40]	; (800268c <StartGetFirmware+0x344>)
 8002662:	6818      	ldr	r0, [r3, #0]
 8002664:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002668:	f04f 33ff 	mov.w	r3, #4294967295
 800266c:	2200      	movs	r2, #0
 800266e:	f005 ffaf 	bl	80085d0 <osMessageQueuePut>
 8002672:	e01d      	b.n	80026b0 <StartGetFirmware+0x368>
 8002674:	20000164 	.word	0x20000164
 8002678:	2000041c 	.word	0x2000041c
 800267c:	0800d460 	.word	0x0800d460
 8002680:	200003d0 	.word	0x200003d0
 8002684:	0800d1c8 	.word	0x0800d1c8
 8002688:	0800d470 	.word	0x0800d470
 800268c:	20000390 	.word	0x20000390
 8002690:	0800d47c 	.word	0x0800d47c
 8002694:	0800d48c 	.word	0x0800d48c
 8002698:	0800d498 	.word	0x0800d498
 800269c:	0800d4b8 	.word	0x0800d4b8
 80026a0:	0800d4c4 	.word	0x0800d4c4
 80026a4:	0800d4ec 	.word	0x0800d4ec
 80026a8:	0800d4fc 	.word	0x0800d4fc
 80026ac:	0800d50c 	.word	0x0800d50c
		  }
	  }
	  osDelay(300);
 80026b0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80026b4:	f005 fc0f 	bl	8007ed6 <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80026b8:	224c      	movs	r2, #76	; 0x4c
 80026ba:	2100      	movs	r1, #0
 80026bc:	48c4      	ldr	r0, [pc, #784]	; (80029d0 <StartGetFirmware+0x688>)
 80026be:	f009 fb4d 	bl	800bd5c <memset>
	  sprintf(str_SIM800,"AT+FTPSERV=%s\r\n\0", DEF_IP_FTP);
 80026c2:	4ac4      	ldr	r2, [pc, #784]	; (80029d4 <StartGetFirmware+0x68c>)
 80026c4:	49c4      	ldr	r1, [pc, #784]	; (80029d8 <StartGetFirmware+0x690>)
 80026c6:	48c5      	ldr	r0, [pc, #788]	; (80029dc <StartGetFirmware+0x694>)
 80026c8:	f009 fb84 	bl	800bdd4 <siprintf>
	  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 80026cc:	48c3      	ldr	r0, [pc, #780]	; (80029dc <StartGetFirmware+0x694>)
 80026ce:	f7fd fd9f 	bl	8000210 <strlen>
 80026d2:	4603      	mov	r3, r0
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	461a      	mov	r2, r3
 80026d8:	49c0      	ldr	r1, [pc, #768]	; (80029dc <StartGetFirmware+0x694>)
 80026da:	48c1      	ldr	r0, [pc, #772]	; (80029e0 <StartGetFirmware+0x698>)
 80026dc:	f004 f836 	bl	800674c <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 80026e0:	48c0      	ldr	r0, [pc, #768]	; (80029e4 <StartGetFirmware+0x69c>)
 80026e2:	f7fe fc19 	bl	8000f18 <SIM800_Ans>
 80026e6:	4603      	mov	r3, r0
 80026e8:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	  if (!ans)
 80026ec:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d11d      	bne.n	8002730 <StartGetFirmware+0x3e8>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80026f4:	224c      	movs	r2, #76	; 0x4c
 80026f6:	2100      	movs	r1, #0
 80026f8:	48b5      	ldr	r0, [pc, #724]	; (80029d0 <StartGetFirmware+0x688>)
 80026fa:	f009 fb2f 	bl	800bd5c <memset>
		  ans = SIM800_Ans("OK");
 80026fe:	48b9      	ldr	r0, [pc, #740]	; (80029e4 <StartGetFirmware+0x69c>)
 8002700:	f7fe fc0a 	bl	8000f18 <SIM800_Ans>
 8002704:	4603      	mov	r3, r0
 8002706:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
		  if (!ans)
 800270a:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10e      	bne.n	8002730 <StartGetFirmware+0x3e8>
		  {
			  strcpy(&(msg.str), "FTPSERV\r\n\0");
 8002712:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002716:	4ab4      	ldr	r2, [pc, #720]	; (80029e8 <StartGetFirmware+0x6a0>)
 8002718:	ca07      	ldmia	r2, {r0, r1, r2}
 800271a:	c303      	stmia	r3!, {r0, r1}
 800271c:	801a      	strh	r2, [r3, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 800271e:	4bb3      	ldr	r3, [pc, #716]	; (80029ec <StartGetFirmware+0x6a4>)
 8002720:	6818      	ldr	r0, [r3, #0]
 8002722:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002726:	f04f 33ff 	mov.w	r3, #4294967295
 800272a:	2200      	movs	r2, #0
 800272c:	f005 ff50 	bl	80085d0 <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 8002730:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002734:	f005 fbcf 	bl	8007ed6 <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002738:	224c      	movs	r2, #76	; 0x4c
 800273a:	2100      	movs	r1, #0
 800273c:	48a4      	ldr	r0, [pc, #656]	; (80029d0 <StartGetFirmware+0x688>)
 800273e:	f009 fb0d 	bl	800bd5c <memset>
	  sprintf(str_SIM800,"AT+FTPUN=%s\r\n\0", DEF_USER_FTP);
 8002742:	4aab      	ldr	r2, [pc, #684]	; (80029f0 <StartGetFirmware+0x6a8>)
 8002744:	49ab      	ldr	r1, [pc, #684]	; (80029f4 <StartGetFirmware+0x6ac>)
 8002746:	48a5      	ldr	r0, [pc, #660]	; (80029dc <StartGetFirmware+0x694>)
 8002748:	f009 fb44 	bl	800bdd4 <siprintf>
	  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 800274c:	48a3      	ldr	r0, [pc, #652]	; (80029dc <StartGetFirmware+0x694>)
 800274e:	f7fd fd5f 	bl	8000210 <strlen>
 8002752:	4603      	mov	r3, r0
 8002754:	b29b      	uxth	r3, r3
 8002756:	461a      	mov	r2, r3
 8002758:	49a0      	ldr	r1, [pc, #640]	; (80029dc <StartGetFirmware+0x694>)
 800275a:	48a1      	ldr	r0, [pc, #644]	; (80029e0 <StartGetFirmware+0x698>)
 800275c:	f003 fff6 	bl	800674c <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 8002760:	48a0      	ldr	r0, [pc, #640]	; (80029e4 <StartGetFirmware+0x69c>)
 8002762:	f7fe fbd9 	bl	8000f18 <SIM800_Ans>
 8002766:	4603      	mov	r3, r0
 8002768:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	  if (!ans)
 800276c:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8002770:	2b00      	cmp	r3, #0
 8002772:	d11e      	bne.n	80027b2 <StartGetFirmware+0x46a>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002774:	224c      	movs	r2, #76	; 0x4c
 8002776:	2100      	movs	r1, #0
 8002778:	4895      	ldr	r0, [pc, #596]	; (80029d0 <StartGetFirmware+0x688>)
 800277a:	f009 faef 	bl	800bd5c <memset>
		  ans = SIM800_Ans("OK");
 800277e:	4899      	ldr	r0, [pc, #612]	; (80029e4 <StartGetFirmware+0x69c>)
 8002780:	f7fe fbca 	bl	8000f18 <SIM800_Ans>
 8002784:	4603      	mov	r3, r0
 8002786:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
		  if (!ans)
 800278a:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10f      	bne.n	80027b2 <StartGetFirmware+0x46a>
		  {
			  strcpy(&(msg.str), "FTPUN\r\n\0");
 8002792:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002796:	4a98      	ldr	r2, [pc, #608]	; (80029f8 <StartGetFirmware+0x6b0>)
 8002798:	e892 0003 	ldmia.w	r2, {r0, r1}
 800279c:	e883 0003 	stmia.w	r3, {r0, r1}
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 80027a0:	4b92      	ldr	r3, [pc, #584]	; (80029ec <StartGetFirmware+0x6a4>)
 80027a2:	6818      	ldr	r0, [r3, #0]
 80027a4:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80027a8:	f04f 33ff 	mov.w	r3, #4294967295
 80027ac:	2200      	movs	r2, #0
 80027ae:	f005 ff0f 	bl	80085d0 <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 80027b2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80027b6:	f005 fb8e 	bl	8007ed6 <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80027ba:	224c      	movs	r2, #76	; 0x4c
 80027bc:	2100      	movs	r1, #0
 80027be:	4884      	ldr	r0, [pc, #528]	; (80029d0 <StartGetFirmware+0x688>)
 80027c0:	f009 facc 	bl	800bd5c <memset>
	  sprintf(str_SIM800,"AT+FTPPW=%s\r\n\0", DEF_PASSWORD_FTP);
 80027c4:	4a8d      	ldr	r2, [pc, #564]	; (80029fc <StartGetFirmware+0x6b4>)
 80027c6:	498e      	ldr	r1, [pc, #568]	; (8002a00 <StartGetFirmware+0x6b8>)
 80027c8:	4884      	ldr	r0, [pc, #528]	; (80029dc <StartGetFirmware+0x694>)
 80027ca:	f009 fb03 	bl	800bdd4 <siprintf>
	  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 80027ce:	4883      	ldr	r0, [pc, #524]	; (80029dc <StartGetFirmware+0x694>)
 80027d0:	f7fd fd1e 	bl	8000210 <strlen>
 80027d4:	4603      	mov	r3, r0
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	461a      	mov	r2, r3
 80027da:	4980      	ldr	r1, [pc, #512]	; (80029dc <StartGetFirmware+0x694>)
 80027dc:	4880      	ldr	r0, [pc, #512]	; (80029e0 <StartGetFirmware+0x698>)
 80027de:	f003 ffb5 	bl	800674c <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 80027e2:	4880      	ldr	r0, [pc, #512]	; (80029e4 <StartGetFirmware+0x69c>)
 80027e4:	f7fe fb98 	bl	8000f18 <SIM800_Ans>
 80027e8:	4603      	mov	r3, r0
 80027ea:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	  if (!ans)
 80027ee:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d11e      	bne.n	8002834 <StartGetFirmware+0x4ec>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80027f6:	224c      	movs	r2, #76	; 0x4c
 80027f8:	2100      	movs	r1, #0
 80027fa:	4875      	ldr	r0, [pc, #468]	; (80029d0 <StartGetFirmware+0x688>)
 80027fc:	f009 faae 	bl	800bd5c <memset>
		  ans = SIM800_Ans("OK");
 8002800:	4878      	ldr	r0, [pc, #480]	; (80029e4 <StartGetFirmware+0x69c>)
 8002802:	f7fe fb89 	bl	8000f18 <SIM800_Ans>
 8002806:	4603      	mov	r3, r0
 8002808:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
		  if (!ans)
 800280c:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8002810:	2b00      	cmp	r3, #0
 8002812:	d10f      	bne.n	8002834 <StartGetFirmware+0x4ec>
		  {
			  strcpy(&(msg.str), "FTPPW\r\n\0");
 8002814:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002818:	4a7a      	ldr	r2, [pc, #488]	; (8002a04 <StartGetFirmware+0x6bc>)
 800281a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800281e:	e883 0003 	stmia.w	r3, {r0, r1}
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8002822:	4b72      	ldr	r3, [pc, #456]	; (80029ec <StartGetFirmware+0x6a4>)
 8002824:	6818      	ldr	r0, [r3, #0]
 8002826:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800282a:	f04f 33ff 	mov.w	r3, #4294967295
 800282e:	2200      	movs	r2, #0
 8002830:	f005 fece 	bl	80085d0 <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 8002834:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002838:	f005 fb4d 	bl	8007ed6 <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 800283c:	224c      	movs	r2, #76	; 0x4c
 800283e:	2100      	movs	r1, #0
 8002840:	4863      	ldr	r0, [pc, #396]	; (80029d0 <StartGetFirmware+0x688>)
 8002842:	f009 fa8b 	bl	800bd5c <memset>
	  sprintf(str_SIM800,"AT+FTPGETPATH=/firmware/\r\n\0");
 8002846:	4970      	ldr	r1, [pc, #448]	; (8002a08 <StartGetFirmware+0x6c0>)
 8002848:	4864      	ldr	r0, [pc, #400]	; (80029dc <StartGetFirmware+0x694>)
 800284a:	f009 fac3 	bl	800bdd4 <siprintf>
	  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 800284e:	4863      	ldr	r0, [pc, #396]	; (80029dc <StartGetFirmware+0x694>)
 8002850:	f7fd fcde 	bl	8000210 <strlen>
 8002854:	4603      	mov	r3, r0
 8002856:	b29b      	uxth	r3, r3
 8002858:	461a      	mov	r2, r3
 800285a:	4960      	ldr	r1, [pc, #384]	; (80029dc <StartGetFirmware+0x694>)
 800285c:	4860      	ldr	r0, [pc, #384]	; (80029e0 <StartGetFirmware+0x698>)
 800285e:	f003 ff75 	bl	800674c <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 8002862:	4860      	ldr	r0, [pc, #384]	; (80029e4 <StartGetFirmware+0x69c>)
 8002864:	f7fe fb58 	bl	8000f18 <SIM800_Ans>
 8002868:	4603      	mov	r3, r0
 800286a:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	  if (!ans)
 800286e:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8002872:	2b00      	cmp	r3, #0
 8002874:	d11f      	bne.n	80028b6 <StartGetFirmware+0x56e>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002876:	224c      	movs	r2, #76	; 0x4c
 8002878:	2100      	movs	r1, #0
 800287a:	4855      	ldr	r0, [pc, #340]	; (80029d0 <StartGetFirmware+0x688>)
 800287c:	f009 fa6e 	bl	800bd5c <memset>
		  ans = SIM800_Ans("OK");
 8002880:	4858      	ldr	r0, [pc, #352]	; (80029e4 <StartGetFirmware+0x69c>)
 8002882:	f7fe fb49 	bl	8000f18 <SIM800_Ans>
 8002886:	4603      	mov	r3, r0
 8002888:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
		  if (!ans)
 800288c:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8002890:	2b00      	cmp	r3, #0
 8002892:	d110      	bne.n	80028b6 <StartGetFirmware+0x56e>
		  {
			  strcpy(&(msg.str), "FTPGETPATH\r\n\0");
 8002894:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002898:	4a5c      	ldr	r2, [pc, #368]	; (8002a0c <StartGetFirmware+0x6c4>)
 800289a:	461c      	mov	r4, r3
 800289c:	4613      	mov	r3, r2
 800289e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028a0:	c407      	stmia	r4!, {r0, r1, r2}
 80028a2:	7023      	strb	r3, [r4, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 80028a4:	4b51      	ldr	r3, [pc, #324]	; (80029ec <StartGetFirmware+0x6a4>)
 80028a6:	6818      	ldr	r0, [r3, #0]
 80028a8:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80028ac:	f04f 33ff 	mov.w	r3, #4294967295
 80028b0:	2200      	movs	r2, #0
 80028b2:	f005 fe8d 	bl	80085d0 <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 80028b6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80028ba:	f005 fb0c 	bl	8007ed6 <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80028be:	224c      	movs	r2, #76	; 0x4c
 80028c0:	2100      	movs	r1, #0
 80028c2:	4843      	ldr	r0, [pc, #268]	; (80029d0 <StartGetFirmware+0x688>)
 80028c4:	f009 fa4a 	bl	800bd5c <memset>
	  sprintf(str_SIM800,"AT+FTPGETNAME=Firmware.txt\r\n\0");
 80028c8:	4951      	ldr	r1, [pc, #324]	; (8002a10 <StartGetFirmware+0x6c8>)
 80028ca:	4844      	ldr	r0, [pc, #272]	; (80029dc <StartGetFirmware+0x694>)
 80028cc:	f009 fa82 	bl	800bdd4 <siprintf>
	  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 80028d0:	4842      	ldr	r0, [pc, #264]	; (80029dc <StartGetFirmware+0x694>)
 80028d2:	f7fd fc9d 	bl	8000210 <strlen>
 80028d6:	4603      	mov	r3, r0
 80028d8:	b29b      	uxth	r3, r3
 80028da:	461a      	mov	r2, r3
 80028dc:	493f      	ldr	r1, [pc, #252]	; (80029dc <StartGetFirmware+0x694>)
 80028de:	4840      	ldr	r0, [pc, #256]	; (80029e0 <StartGetFirmware+0x698>)
 80028e0:	f003 ff34 	bl	800674c <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 80028e4:	483f      	ldr	r0, [pc, #252]	; (80029e4 <StartGetFirmware+0x69c>)
 80028e6:	f7fe fb17 	bl	8000f18 <SIM800_Ans>
 80028ea:	4603      	mov	r3, r0
 80028ec:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	  if (!ans)
 80028f0:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d11f      	bne.n	8002938 <StartGetFirmware+0x5f0>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80028f8:	224c      	movs	r2, #76	; 0x4c
 80028fa:	2100      	movs	r1, #0
 80028fc:	4834      	ldr	r0, [pc, #208]	; (80029d0 <StartGetFirmware+0x688>)
 80028fe:	f009 fa2d 	bl	800bd5c <memset>
		  ans = SIM800_Ans("OK");
 8002902:	4838      	ldr	r0, [pc, #224]	; (80029e4 <StartGetFirmware+0x69c>)
 8002904:	f7fe fb08 	bl	8000f18 <SIM800_Ans>
 8002908:	4603      	mov	r3, r0
 800290a:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
		  if (!ans)
 800290e:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8002912:	2b00      	cmp	r3, #0
 8002914:	d110      	bne.n	8002938 <StartGetFirmware+0x5f0>
		  {
			  strcpy(&(msg.str), "FTPGETNAME\r\n\0");
 8002916:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800291a:	4a3e      	ldr	r2, [pc, #248]	; (8002a14 <StartGetFirmware+0x6cc>)
 800291c:	461c      	mov	r4, r3
 800291e:	4613      	mov	r3, r2
 8002920:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002922:	c407      	stmia	r4!, {r0, r1, r2}
 8002924:	7023      	strb	r3, [r4, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 8002926:	4b31      	ldr	r3, [pc, #196]	; (80029ec <StartGetFirmware+0x6a4>)
 8002928:	6818      	ldr	r0, [r3, #0]
 800292a:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800292e:	f04f 33ff 	mov.w	r3, #4294967295
 8002932:	2200      	movs	r2, #0
 8002934:	f005 fe4c 	bl	80085d0 <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 8002938:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800293c:	f005 facb 	bl	8007ed6 <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 8002940:	224c      	movs	r2, #76	; 0x4c
 8002942:	2100      	movs	r1, #0
 8002944:	4822      	ldr	r0, [pc, #136]	; (80029d0 <StartGetFirmware+0x688>)
 8002946:	f009 fa09 	bl	800bd5c <memset>
	  sprintf(str_SIM800,"AT+FTPGETTOFS=0,Firmware.txt\r\n\0");
 800294a:	4933      	ldr	r1, [pc, #204]	; (8002a18 <StartGetFirmware+0x6d0>)
 800294c:	4823      	ldr	r0, [pc, #140]	; (80029dc <StartGetFirmware+0x694>)
 800294e:	f009 fa41 	bl	800bdd4 <siprintf>
	  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 8002952:	4822      	ldr	r0, [pc, #136]	; (80029dc <StartGetFirmware+0x694>)
 8002954:	f7fd fc5c 	bl	8000210 <strlen>
 8002958:	4603      	mov	r3, r0
 800295a:	b29b      	uxth	r3, r3
 800295c:	461a      	mov	r2, r3
 800295e:	491f      	ldr	r1, [pc, #124]	; (80029dc <StartGetFirmware+0x694>)
 8002960:	481f      	ldr	r0, [pc, #124]	; (80029e0 <StartGetFirmware+0x698>)
 8002962:	f003 fef3 	bl	800674c <HAL_UART_Transmit_DMA>
	  ans = SIM800_Ans("OK");
 8002966:	481f      	ldr	r0, [pc, #124]	; (80029e4 <StartGetFirmware+0x69c>)
 8002968:	f7fe fad6 	bl	8000f18 <SIM800_Ans>
 800296c:	4603      	mov	r3, r0
 800296e:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	  if (!ans)
 8002972:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8002976:	2b00      	cmp	r3, #0
 8002978:	d11f      	bne.n	80029ba <StartGetFirmware+0x672>
	  {
		  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 800297a:	224c      	movs	r2, #76	; 0x4c
 800297c:	2100      	movs	r1, #0
 800297e:	4814      	ldr	r0, [pc, #80]	; (80029d0 <StartGetFirmware+0x688>)
 8002980:	f009 f9ec 	bl	800bd5c <memset>
		  ans = SIM800_Ans("OK");
 8002984:	4817      	ldr	r0, [pc, #92]	; (80029e4 <StartGetFirmware+0x69c>)
 8002986:	f7fe fac7 	bl	8000f18 <SIM800_Ans>
 800298a:	4603      	mov	r3, r0
 800298c:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
		  if (!ans)
 8002990:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8002994:	2b00      	cmp	r3, #0
 8002996:	d110      	bne.n	80029ba <StartGetFirmware+0x672>
		  {
			  strcpy(&(msg.str), "FTPGETTOFS\r\n\0");
 8002998:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800299c:	4a1f      	ldr	r2, [pc, #124]	; (8002a1c <StartGetFirmware+0x6d4>)
 800299e:	461c      	mov	r4, r3
 80029a0:	4613      	mov	r3, r2
 80029a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029a4:	c407      	stmia	r4!, {r0, r1, r2}
 80029a6:	7023      	strb	r3, [r4, #0]
			  osMessageQueuePut(debugQueueHandle, &msg, 0, osWaitForever);
 80029a8:	4b10      	ldr	r3, [pc, #64]	; (80029ec <StartGetFirmware+0x6a4>)
 80029aa:	6818      	ldr	r0, [r3, #0]
 80029ac:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80029b0:	f04f 33ff 	mov.w	r3, #4294967295
 80029b4:	2200      	movs	r2, #0
 80029b6:	f005 fe0b 	bl	80085d0 <osMessageQueuePut>
		  }
	  }
	  osDelay(300);
 80029ba:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80029be:	f005 fa8a 	bl	8007ed6 <osDelay>

	  memset(SIM800BuffRx, 0, BUFF_SIM_SIZE);
 80029c2:	224c      	movs	r2, #76	; 0x4c
 80029c4:	2100      	movs	r1, #0
 80029c6:	4802      	ldr	r0, [pc, #8]	; (80029d0 <StartGetFirmware+0x688>)
 80029c8:	f009 f9c8 	bl	800bd5c <memset>
 80029cc:	e028      	b.n	8002a20 <StartGetFirmware+0x6d8>
 80029ce:	bf00      	nop
 80029d0:	2000041c 	.word	0x2000041c
 80029d4:	0800d518 	.word	0x0800d518
 80029d8:	0800d528 	.word	0x0800d528
 80029dc:	200003d0 	.word	0x200003d0
 80029e0:	20000164 	.word	0x20000164
 80029e4:	0800d1c8 	.word	0x0800d1c8
 80029e8:	0800d53c 	.word	0x0800d53c
 80029ec:	20000390 	.word	0x20000390
 80029f0:	0800d548 	.word	0x0800d548
 80029f4:	0800d554 	.word	0x0800d554
 80029f8:	0800d564 	.word	0x0800d564
 80029fc:	0800d570 	.word	0x0800d570
 8002a00:	0800d57c 	.word	0x0800d57c
 8002a04:	0800d58c 	.word	0x0800d58c
 8002a08:	0800d598 	.word	0x0800d598
 8002a0c:	0800d5b4 	.word	0x0800d5b4
 8002a10:	0800d5c4 	.word	0x0800d5c4
 8002a14:	0800d5e4 	.word	0x0800d5e4
 8002a18:	0800d5f4 	.word	0x0800d5f4
 8002a1c:	0800d614 	.word	0x0800d614
	  RX = 0;
 8002a20:	4b88      	ldr	r3, [pc, #544]	; (8002c44 <StartGetFirmware+0x8fc>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	701a      	strb	r2, [r3, #0]
	  Tech_ans_wait = 1;
 8002a26:	4b88      	ldr	r3, [pc, #544]	; (8002c48 <StartGetFirmware+0x900>)
 8002a28:	2201      	movs	r2, #1
 8002a2a:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Receive_DMA(&huart1, SIM800BuffRx, BUFF_SIM_SIZE);
 8002a2c:	224c      	movs	r2, #76	; 0x4c
 8002a2e:	4987      	ldr	r1, [pc, #540]	; (8002c4c <StartGetFirmware+0x904>)
 8002a30:	4887      	ldr	r0, [pc, #540]	; (8002c50 <StartGetFirmware+0x908>)
 8002a32:	f003 ff09 	bl	8006848 <HAL_UART_Receive_DMA>
	  while (RX != 1) {};
 8002a36:	bf00      	nop
 8002a38:	4b82      	ldr	r3, [pc, #520]	; (8002c44 <StartGetFirmware+0x8fc>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d1fb      	bne.n	8002a38 <StartGetFirmware+0x6f0>
	  Tech_ans_wait = 0;
 8002a40:	4b81      	ldr	r3, [pc, #516]	; (8002c48 <StartGetFirmware+0x900>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	701a      	strb	r2, [r3, #0]



	  //good download
	  if (String_in_SIM800BuffRx("+FTPGETTOFS: "))
 8002a46:	4883      	ldr	r0, [pc, #524]	; (8002c54 <StartGetFirmware+0x90c>)
 8002a48:	f7fe f974 	bl	8000d34 <String_in_SIM800BuffRx>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f43f ac8e 	beq.w	8002370 <StartGetFirmware+0x28>
	  {
		  sscanf(SIM800BuffRx, "%s%2s%d", tmp2, tmp3, &firmware_count_bytes);
 8002a54:	f107 0108 	add.w	r1, r7, #8
 8002a58:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a5c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002a60:	9300      	str	r3, [sp, #0]
 8002a62:	460b      	mov	r3, r1
 8002a64:	497c      	ldr	r1, [pc, #496]	; (8002c58 <StartGetFirmware+0x910>)
 8002a66:	4879      	ldr	r0, [pc, #484]	; (8002c4c <StartGetFirmware+0x904>)
 8002a68:	f009 f9d4 	bl	800be14 <siscanf>

		  SPI2_Init_Master();
 8002a6c:	f7fe f8e6 	bl	8000c3c <SPI2_Init_Master>
		  HAL_Delay(200);
 8002a70:	20c8      	movs	r0, #200	; 0xc8
 8002a72:	f001 f88b 	bl	8003b8c <HAL_Delay>

		  W25qxx_Init();
 8002a76:	f000 fce1 	bl	800343c <W25qxx_Init>

		  uint32_t count_of_pages = (firmware_count_bytes / 256) + ((firmware_count_bytes % 256) ? 1 : 0);
 8002a7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a7c:	0a1b      	lsrs	r3, r3, #8
 8002a7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a80:	b2d2      	uxtb	r2, r2
 8002a82:	2a00      	cmp	r2, #0
 8002a84:	d001      	beq.n	8002a8a <StartGetFirmware+0x742>
 8002a86:	2201      	movs	r2, #1
 8002a88:	e000      	b.n	8002a8c <StartGetFirmware+0x744>
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	4413      	add	r3, r2
 8002a8e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		  uint32_t count_of_sectors = (firmware_count_bytes / 4096) + ((firmware_count_bytes % 4096) ? 1 : 0);
 8002a92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a94:	0b1b      	lsrs	r3, r3, #12
 8002a96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a98:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002a9c:	2a00      	cmp	r2, #0
 8002a9e:	d001      	beq.n	8002aa4 <StartGetFirmware+0x75c>
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	e000      	b.n	8002aa6 <StartGetFirmware+0x75e>
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	4413      	add	r3, r2
 8002aa8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
		  count_of_sectors++;
 8002aac:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

		  //start write from 30 sector
		  for (uint32_t i = 0; i <= count_of_sectors; i++)
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002abc:	e010      	b.n	8002ae0 <StartGetFirmware+0x798>
		  {
			  // sectors for clear
			  uint32_t tmp = i + sector_of_firmware - 1;
 8002abe:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8002ac2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ac6:	4413      	add	r3, r2
 8002ac8:	3b01      	subs	r3, #1
 8002aca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
			  W25qxx_EraseSector(tmp);
 8002ace:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8002ad2:	f000 ff17 	bl	8003904 <W25qxx_EraseSector>
		  for (uint32_t i = 0; i <= count_of_sectors; i++)
 8002ad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002ada:	3301      	adds	r3, #1
 8002adc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002ae0:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8002ae4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d9e8      	bls.n	8002abe <StartGetFirmware+0x776>
		  }

		  //writes size of firmware
		  tmp4 = (firmware_count_bytes & 0xFF0000) >> 16;
 8002aec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002aee:	0c1b      	lsrs	r3, r3, #16
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	4a5a      	ldr	r2, [pc, #360]	; (8002c5c <StartGetFirmware+0x914>)
 8002af4:	6013      	str	r3, [r2, #0]
		  tmp5 = (firmware_count_bytes & 0xFF00) >> 8;
 8002af6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002af8:	0a1b      	lsrs	r3, r3, #8
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	4a58      	ldr	r2, [pc, #352]	; (8002c60 <StartGetFirmware+0x918>)
 8002afe:	6013      	str	r3, [r2, #0]
		  tmp6 = (firmware_count_bytes & 0xFF);
 8002b00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	4a57      	ldr	r2, [pc, #348]	; (8002c64 <StartGetFirmware+0x91c>)
 8002b06:	6013      	str	r3, [r2, #0]
		  Size_of_firmwware[0] = tmp4;
 8002b08:	4b54      	ldr	r3, [pc, #336]	; (8002c5c <StartGetFirmware+0x914>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	b2da      	uxtb	r2, r3
 8002b0e:	4b56      	ldr	r3, [pc, #344]	; (8002c68 <StartGetFirmware+0x920>)
 8002b10:	701a      	strb	r2, [r3, #0]
		  Size_of_firmwware[1] = tmp5;
 8002b12:	4b53      	ldr	r3, [pc, #332]	; (8002c60 <StartGetFirmware+0x918>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	b2da      	uxtb	r2, r3
 8002b18:	4b53      	ldr	r3, [pc, #332]	; (8002c68 <StartGetFirmware+0x920>)
 8002b1a:	705a      	strb	r2, [r3, #1]
		  Size_of_firmwware[2] = tmp6;
 8002b1c:	4b51      	ldr	r3, [pc, #324]	; (8002c64 <StartGetFirmware+0x91c>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	b2da      	uxtb	r2, r3
 8002b22:	4b51      	ldr	r3, [pc, #324]	; (8002c68 <StartGetFirmware+0x920>)
 8002b24:	709a      	strb	r2, [r3, #2]

		  int32_t page_start1 = 16 * (sector_of_firmware - 1);
 8002b26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	011b      	lsls	r3, r3, #4
 8002b2e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

		  W25qxx_WritePage(Size_of_firmwware, page_start1, 0, 3);
 8002b32:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8002b36:	2303      	movs	r3, #3
 8002b38:	2200      	movs	r2, #0
 8002b3a:	484b      	ldr	r0, [pc, #300]	; (8002c68 <StartGetFirmware+0x920>)
 8002b3c:	f000 ff38 	bl	80039b0 <W25qxx_WritePage>

		  for (uint32_t i = 0; i < count_of_pages; i++)
 8002b40:	2300      	movs	r3, #0
 8002b42:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002b46:	e054      	b.n	8002bf2 <StartGetFirmware+0x8aa>
		  {
			  int32_t start = i * 256;
 8002b48:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002b4c:	021b      	lsls	r3, r3, #8
 8002b4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
			  //start += (i > 0) ? 1 : 0;

			  memset(firmware_buf, 0, 399);
 8002b52:	f240 128f 	movw	r2, #399	; 0x18f
 8002b56:	2100      	movs	r1, #0
 8002b58:	4844      	ldr	r0, [pc, #272]	; (8002c6c <StartGetFirmware+0x924>)
 8002b5a:	f009 f8ff 	bl	800bd5c <memset>
			  sprintf(str_SIM800,"AT+FSREAD=C:\\User\\FTP\\Firmware.txt,1,256,%d\r\n\0", start);
 8002b5e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002b62:	4943      	ldr	r1, [pc, #268]	; (8002c70 <StartGetFirmware+0x928>)
 8002b64:	4843      	ldr	r0, [pc, #268]	; (8002c74 <StartGetFirmware+0x92c>)
 8002b66:	f009 f935 	bl	800bdd4 <siprintf>
			  HAL_UART_Transmit_DMA(&huart1, str_SIM800, strlen(str_SIM800));
 8002b6a:	4842      	ldr	r0, [pc, #264]	; (8002c74 <StartGetFirmware+0x92c>)
 8002b6c:	f7fd fb50 	bl	8000210 <strlen>
 8002b70:	4603      	mov	r3, r0
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	461a      	mov	r2, r3
 8002b76:	493f      	ldr	r1, [pc, #252]	; (8002c74 <StartGetFirmware+0x92c>)
 8002b78:	4835      	ldr	r0, [pc, #212]	; (8002c50 <StartGetFirmware+0x908>)
 8002b7a:	f003 fde7 	bl	800674c <HAL_UART_Transmit_DMA>
			  RX = 0;
 8002b7e:	4b31      	ldr	r3, [pc, #196]	; (8002c44 <StartGetFirmware+0x8fc>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	701a      	strb	r2, [r3, #0]
			  Tech_ans_wait = 1;
 8002b84:	4b30      	ldr	r3, [pc, #192]	; (8002c48 <StartGetFirmware+0x900>)
 8002b86:	2201      	movs	r2, #1
 8002b88:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Receive_DMA(&huart1, firmware_buf, 390);
 8002b8a:	f44f 72c3 	mov.w	r2, #390	; 0x186
 8002b8e:	4937      	ldr	r1, [pc, #220]	; (8002c6c <StartGetFirmware+0x924>)
 8002b90:	482f      	ldr	r0, [pc, #188]	; (8002c50 <StartGetFirmware+0x908>)
 8002b92:	f003 fe59 	bl	8006848 <HAL_UART_Receive_DMA>
			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8002b96:	2140      	movs	r1, #64	; 0x40
 8002b98:	4837      	ldr	r0, [pc, #220]	; (8002c78 <StartGetFirmware+0x930>)
 8002b9a:	f001 fee0 	bl	800495e <HAL_GPIO_TogglePin>
			  while (RX != 1) {};
 8002b9e:	bf00      	nop
 8002ba0:	4b28      	ldr	r3, [pc, #160]	; (8002c44 <StartGetFirmware+0x8fc>)
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d1fb      	bne.n	8002ba0 <StartGetFirmware+0x858>
			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8002ba8:	2140      	movs	r1, #64	; 0x40
 8002baa:	4833      	ldr	r0, [pc, #204]	; (8002c78 <StartGetFirmware+0x930>)
 8002bac:	f001 fed7 	bl	800495e <HAL_GPIO_TogglePin>
			  Tech_ans_wait = 0;
 8002bb0:	4b25      	ldr	r3, [pc, #148]	; (8002c48 <StartGetFirmware+0x900>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	701a      	strb	r2, [r3, #0]

			  int32_t page_start =  i + 16 * sector_of_firmware; // number of start page
 8002bb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bba:	011a      	lsls	r2, r3, #4
 8002bbc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002bc0:	4413      	add	r3, r2
 8002bc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
			  W25qxx_WritePage(firmware_buf + strlen(str_SIM800) + 1, page_start, 0, 256);
 8002bc6:	482b      	ldr	r0, [pc, #172]	; (8002c74 <StartGetFirmware+0x92c>)
 8002bc8:	f7fd fb22 	bl	8000210 <strlen>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	3301      	adds	r3, #1
 8002bd0:	4a26      	ldr	r2, [pc, #152]	; (8002c6c <StartGetFirmware+0x924>)
 8002bd2:	1898      	adds	r0, r3, r2
 8002bd4:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8002bd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f000 fee7 	bl	80039b0 <W25qxx_WritePage>
			  osDelay(10); //importent!!!
 8002be2:	200a      	movs	r0, #10
 8002be4:	f005 f977 	bl	8007ed6 <osDelay>
		  for (uint32_t i = 0; i < count_of_pages; i++)
 8002be8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002bec:	3301      	adds	r3, #1
 8002bee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002bf2:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8002bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d3a4      	bcc.n	8002b48 <StartGetFirmware+0x800>
		  }
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8002bfe:	2140      	movs	r1, #64	; 0x40
 8002c00:	481d      	ldr	r0, [pc, #116]	; (8002c78 <StartGetFirmware+0x930>)
 8002c02:	f001 feac 	bl	800495e <HAL_GPIO_TogglePin>
		  osDelay(2000);
 8002c06:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002c0a:	f005 f964 	bl	8007ed6 <osDelay>
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8002c0e:	2140      	movs	r1, #64	; 0x40
 8002c10:	4819      	ldr	r0, [pc, #100]	; (8002c78 <StartGetFirmware+0x930>)
 8002c12:	f001 fea4 	bl	800495e <HAL_GPIO_TogglePin>

		  HAL_Delay(200);
 8002c16:	20c8      	movs	r0, #200	; 0xc8
 8002c18:	f000 ffb8 	bl	8003b8c <HAL_Delay>
		  //";start"
		  strcpy(&(msg.str), ";start");
 8002c1c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002c20:	4a16      	ldr	r2, [pc, #88]	; (8002c7c <StartGetFirmware+0x934>)
 8002c22:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c26:	6018      	str	r0, [r3, #0]
 8002c28:	3304      	adds	r3, #4
 8002c2a:	8019      	strh	r1, [r3, #0]
 8002c2c:	3302      	adds	r3, #2
 8002c2e:	0c0a      	lsrs	r2, r1, #16
 8002c30:	701a      	strb	r2, [r3, #0]
		  //HAL_UART_Transmit_DMA(&huart2, msg.str, MESSAGE_TYPE_BUFF_SIZE);
		  HAL_Delay(1000);
 8002c32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c36:	f000 ffa9 	bl	8003b8c <HAL_Delay>
		  HAL_NVIC_SystemReset();
 8002c3a:	f001 f8c4 	bl	8003dc6 <HAL_NVIC_SystemReset>
  {
 8002c3e:	f7ff bb97 	b.w	8002370 <StartGetFirmware+0x28>
 8002c42:	bf00      	nop
 8002c44:	200003b3 	.word	0x200003b3
 8002c48:	200003b5 	.word	0x200003b5
 8002c4c:	2000041c 	.word	0x2000041c
 8002c50:	20000164 	.word	0x20000164
 8002c54:	0800d624 	.word	0x0800d624
 8002c58:	0800d634 	.word	0x0800d634
 8002c5c:	20000640 	.word	0x20000640
 8002c60:	20000644 	.word	0x20000644
 8002c64:	20000648 	.word	0x20000648
 8002c68:	2000064c 	.word	0x2000064c
 8002c6c:	20000468 	.word	0x20000468
 8002c70:	0800d63c 	.word	0x0800d63c
 8002c74:	200003d0 	.word	0x200003d0
 8002c78:	40020000 	.word	0x40020000
 8002c7c:	0800d66c 	.word	0x0800d66c

08002c80 <CallbackPingTimer>:
  /* USER CODE END StartGetFirmware */
}

/* CallbackPingTimer function */
void CallbackPingTimer(void *argument)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackPingTimer */
	osSemaphoreRelease(PINGSemHandle);
 8002c88:	4b04      	ldr	r3, [pc, #16]	; (8002c9c <CallbackPingTimer+0x1c>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f005 fbe7 	bl	8008460 <osSemaphoreRelease>
  /* USER CODE END CallbackPingTimer */
}
 8002c92:	bf00      	nop
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	200003a8 	.word	0x200003a8

08002ca0 <CallbackDataTimer>:

/* CallbackDataTimer function */
void CallbackDataTimer(void *argument)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackDataTimer */
	Get_data = 1;
 8002ca8:	4b04      	ldr	r3, [pc, #16]	; (8002cbc <CallbackDataTimer+0x1c>)
 8002caa:	2201      	movs	r2, #1
 8002cac:	701a      	strb	r2, [r3, #0]
  /* USER CODE END CallbackDataTimer */
}
 8002cae:	bf00      	nop
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	200003b6 	.word	0x200003b6

08002cc0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a04      	ldr	r2, [pc, #16]	; (8002ce0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d101      	bne.n	8002cd6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002cd2:	f000 ff3b 	bl	8003b4c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002cd6:	bf00      	nop
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	40010000 	.word	0x40010000

08002ce4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ce8:	b672      	cpsid	i
}
 8002cea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002cec:	e7fe      	b.n	8002cec <Error_Handler+0x8>
	...

08002cf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	607b      	str	r3, [r7, #4]
 8002cfa:	4b12      	ldr	r3, [pc, #72]	; (8002d44 <HAL_MspInit+0x54>)
 8002cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfe:	4a11      	ldr	r2, [pc, #68]	; (8002d44 <HAL_MspInit+0x54>)
 8002d00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d04:	6453      	str	r3, [r2, #68]	; 0x44
 8002d06:	4b0f      	ldr	r3, [pc, #60]	; (8002d44 <HAL_MspInit+0x54>)
 8002d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d0e:	607b      	str	r3, [r7, #4]
 8002d10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d12:	2300      	movs	r3, #0
 8002d14:	603b      	str	r3, [r7, #0]
 8002d16:	4b0b      	ldr	r3, [pc, #44]	; (8002d44 <HAL_MspInit+0x54>)
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	4a0a      	ldr	r2, [pc, #40]	; (8002d44 <HAL_MspInit+0x54>)
 8002d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d20:	6413      	str	r3, [r2, #64]	; 0x40
 8002d22:	4b08      	ldr	r3, [pc, #32]	; (8002d44 <HAL_MspInit+0x54>)
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d2a:	603b      	str	r3, [r7, #0]
 8002d2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002d2e:	2200      	movs	r2, #0
 8002d30:	210f      	movs	r1, #15
 8002d32:	f06f 0001 	mvn.w	r0, #1
 8002d36:	f001 f81c 	bl	8003d72 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d3a:	bf00      	nop
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	40023800 	.word	0x40023800

08002d48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b08a      	sub	sp, #40	; 0x28
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d50:	f107 0314 	add.w	r3, r7, #20
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]
 8002d58:	605a      	str	r2, [r3, #4]
 8002d5a:	609a      	str	r2, [r3, #8]
 8002d5c:	60da      	str	r2, [r3, #12]
 8002d5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a19      	ldr	r2, [pc, #100]	; (8002dcc <HAL_I2C_MspInit+0x84>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d12b      	bne.n	8002dc2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	613b      	str	r3, [r7, #16]
 8002d6e:	4b18      	ldr	r3, [pc, #96]	; (8002dd0 <HAL_I2C_MspInit+0x88>)
 8002d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d72:	4a17      	ldr	r2, [pc, #92]	; (8002dd0 <HAL_I2C_MspInit+0x88>)
 8002d74:	f043 0302 	orr.w	r3, r3, #2
 8002d78:	6313      	str	r3, [r2, #48]	; 0x30
 8002d7a:	4b15      	ldr	r3, [pc, #84]	; (8002dd0 <HAL_I2C_MspInit+0x88>)
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	613b      	str	r3, [r7, #16]
 8002d84:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d86:	23c0      	movs	r3, #192	; 0xc0
 8002d88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d8a:	2312      	movs	r3, #18
 8002d8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d92:	2303      	movs	r3, #3
 8002d94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d96:	2304      	movs	r3, #4
 8002d98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d9a:	f107 0314 	add.w	r3, r7, #20
 8002d9e:	4619      	mov	r1, r3
 8002da0:	480c      	ldr	r0, [pc, #48]	; (8002dd4 <HAL_I2C_MspInit+0x8c>)
 8002da2:	f001 fc17 	bl	80045d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002da6:	2300      	movs	r3, #0
 8002da8:	60fb      	str	r3, [r7, #12]
 8002daa:	4b09      	ldr	r3, [pc, #36]	; (8002dd0 <HAL_I2C_MspInit+0x88>)
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	4a08      	ldr	r2, [pc, #32]	; (8002dd0 <HAL_I2C_MspInit+0x88>)
 8002db0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002db4:	6413      	str	r3, [r2, #64]	; 0x40
 8002db6:	4b06      	ldr	r3, [pc, #24]	; (8002dd0 <HAL_I2C_MspInit+0x88>)
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dbe:	60fb      	str	r3, [r7, #12]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002dc2:	bf00      	nop
 8002dc4:	3728      	adds	r7, #40	; 0x28
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	40005400 	.word	0x40005400
 8002dd0:	40023800 	.word	0x40023800
 8002dd4:	40020400 	.word	0x40020400

08002dd8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b08a      	sub	sp, #40	; 0x28
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de0:	f107 0314 	add.w	r3, r7, #20
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	605a      	str	r2, [r3, #4]
 8002dea:	609a      	str	r2, [r3, #8]
 8002dec:	60da      	str	r2, [r3, #12]
 8002dee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a19      	ldr	r2, [pc, #100]	; (8002e5c <HAL_SPI_MspInit+0x84>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d12c      	bne.n	8002e54 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	613b      	str	r3, [r7, #16]
 8002dfe:	4b18      	ldr	r3, [pc, #96]	; (8002e60 <HAL_SPI_MspInit+0x88>)
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	4a17      	ldr	r2, [pc, #92]	; (8002e60 <HAL_SPI_MspInit+0x88>)
 8002e04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e08:	6413      	str	r3, [r2, #64]	; 0x40
 8002e0a:	4b15      	ldr	r3, [pc, #84]	; (8002e60 <HAL_SPI_MspInit+0x88>)
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e12:	613b      	str	r3, [r7, #16]
 8002e14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e16:	2300      	movs	r3, #0
 8002e18:	60fb      	str	r3, [r7, #12]
 8002e1a:	4b11      	ldr	r3, [pc, #68]	; (8002e60 <HAL_SPI_MspInit+0x88>)
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1e:	4a10      	ldr	r2, [pc, #64]	; (8002e60 <HAL_SPI_MspInit+0x88>)
 8002e20:	f043 0302 	orr.w	r3, r3, #2
 8002e24:	6313      	str	r3, [r2, #48]	; 0x30
 8002e26:	4b0e      	ldr	r3, [pc, #56]	; (8002e60 <HAL_SPI_MspInit+0x88>)
 8002e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	60fb      	str	r3, [r7, #12]
 8002e30:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8002e32:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8002e36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e38:	2302      	movs	r3, #2
 8002e3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e40:	2303      	movs	r3, #3
 8002e42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002e44:	2305      	movs	r3, #5
 8002e46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e48:	f107 0314 	add.w	r3, r7, #20
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	4805      	ldr	r0, [pc, #20]	; (8002e64 <HAL_SPI_MspInit+0x8c>)
 8002e50:	f001 fbc0 	bl	80045d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002e54:	bf00      	nop
 8002e56:	3728      	adds	r7, #40	; 0x28
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	40003800 	.word	0x40003800
 8002e60:	40023800 	.word	0x40023800
 8002e64:	40020400 	.word	0x40020400

08002e68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b08c      	sub	sp, #48	; 0x30
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e70:	f107 031c 	add.w	r3, r7, #28
 8002e74:	2200      	movs	r2, #0
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	605a      	str	r2, [r3, #4]
 8002e7a:	609a      	str	r2, [r3, #8]
 8002e7c:	60da      	str	r2, [r3, #12]
 8002e7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a97      	ldr	r2, [pc, #604]	; (80030e4 <HAL_UART_MspInit+0x27c>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	f040 8092 	bne.w	8002fb0 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	61bb      	str	r3, [r7, #24]
 8002e90:	4b95      	ldr	r3, [pc, #596]	; (80030e8 <HAL_UART_MspInit+0x280>)
 8002e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e94:	4a94      	ldr	r2, [pc, #592]	; (80030e8 <HAL_UART_MspInit+0x280>)
 8002e96:	f043 0310 	orr.w	r3, r3, #16
 8002e9a:	6453      	str	r3, [r2, #68]	; 0x44
 8002e9c:	4b92      	ldr	r3, [pc, #584]	; (80030e8 <HAL_UART_MspInit+0x280>)
 8002e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea0:	f003 0310 	and.w	r3, r3, #16
 8002ea4:	61bb      	str	r3, [r7, #24]
 8002ea6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	617b      	str	r3, [r7, #20]
 8002eac:	4b8e      	ldr	r3, [pc, #568]	; (80030e8 <HAL_UART_MspInit+0x280>)
 8002eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb0:	4a8d      	ldr	r2, [pc, #564]	; (80030e8 <HAL_UART_MspInit+0x280>)
 8002eb2:	f043 0301 	orr.w	r3, r3, #1
 8002eb6:	6313      	str	r3, [r2, #48]	; 0x30
 8002eb8:	4b8b      	ldr	r3, [pc, #556]	; (80030e8 <HAL_UART_MspInit+0x280>)
 8002eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebc:	f003 0301 	and.w	r3, r3, #1
 8002ec0:	617b      	str	r3, [r7, #20]
 8002ec2:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002ec4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002ec8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eca:	2302      	movs	r3, #2
 8002ecc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ed6:	2307      	movs	r3, #7
 8002ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eda:	f107 031c 	add.w	r3, r7, #28
 8002ede:	4619      	mov	r1, r3
 8002ee0:	4882      	ldr	r0, [pc, #520]	; (80030ec <HAL_UART_MspInit+0x284>)
 8002ee2:	f001 fb77 	bl	80045d4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002ee6:	4b82      	ldr	r3, [pc, #520]	; (80030f0 <HAL_UART_MspInit+0x288>)
 8002ee8:	4a82      	ldr	r2, [pc, #520]	; (80030f4 <HAL_UART_MspInit+0x28c>)
 8002eea:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002eec:	4b80      	ldr	r3, [pc, #512]	; (80030f0 <HAL_UART_MspInit+0x288>)
 8002eee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ef2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ef4:	4b7e      	ldr	r3, [pc, #504]	; (80030f0 <HAL_UART_MspInit+0x288>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002efa:	4b7d      	ldr	r3, [pc, #500]	; (80030f0 <HAL_UART_MspInit+0x288>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f00:	4b7b      	ldr	r3, [pc, #492]	; (80030f0 <HAL_UART_MspInit+0x288>)
 8002f02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f06:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f08:	4b79      	ldr	r3, [pc, #484]	; (80030f0 <HAL_UART_MspInit+0x288>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f0e:	4b78      	ldr	r3, [pc, #480]	; (80030f0 <HAL_UART_MspInit+0x288>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002f14:	4b76      	ldr	r3, [pc, #472]	; (80030f0 <HAL_UART_MspInit+0x288>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002f1a:	4b75      	ldr	r3, [pc, #468]	; (80030f0 <HAL_UART_MspInit+0x288>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f20:	4b73      	ldr	r3, [pc, #460]	; (80030f0 <HAL_UART_MspInit+0x288>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002f26:	4872      	ldr	r0, [pc, #456]	; (80030f0 <HAL_UART_MspInit+0x288>)
 8002f28:	f000 ff52 	bl	8003dd0 <HAL_DMA_Init>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002f32:	f7ff fed7 	bl	8002ce4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a6d      	ldr	r2, [pc, #436]	; (80030f0 <HAL_UART_MspInit+0x288>)
 8002f3a:	639a      	str	r2, [r3, #56]	; 0x38
 8002f3c:	4a6c      	ldr	r2, [pc, #432]	; (80030f0 <HAL_UART_MspInit+0x288>)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002f42:	4b6d      	ldr	r3, [pc, #436]	; (80030f8 <HAL_UART_MspInit+0x290>)
 8002f44:	4a6d      	ldr	r2, [pc, #436]	; (80030fc <HAL_UART_MspInit+0x294>)
 8002f46:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002f48:	4b6b      	ldr	r3, [pc, #428]	; (80030f8 <HAL_UART_MspInit+0x290>)
 8002f4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f4e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f50:	4b69      	ldr	r3, [pc, #420]	; (80030f8 <HAL_UART_MspInit+0x290>)
 8002f52:	2240      	movs	r2, #64	; 0x40
 8002f54:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f56:	4b68      	ldr	r3, [pc, #416]	; (80030f8 <HAL_UART_MspInit+0x290>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f5c:	4b66      	ldr	r3, [pc, #408]	; (80030f8 <HAL_UART_MspInit+0x290>)
 8002f5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f62:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f64:	4b64      	ldr	r3, [pc, #400]	; (80030f8 <HAL_UART_MspInit+0x290>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f6a:	4b63      	ldr	r3, [pc, #396]	; (80030f8 <HAL_UART_MspInit+0x290>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002f70:	4b61      	ldr	r3, [pc, #388]	; (80030f8 <HAL_UART_MspInit+0x290>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f76:	4b60      	ldr	r3, [pc, #384]	; (80030f8 <HAL_UART_MspInit+0x290>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f7c:	4b5e      	ldr	r3, [pc, #376]	; (80030f8 <HAL_UART_MspInit+0x290>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002f82:	485d      	ldr	r0, [pc, #372]	; (80030f8 <HAL_UART_MspInit+0x290>)
 8002f84:	f000 ff24 	bl	8003dd0 <HAL_DMA_Init>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8002f8e:	f7ff fea9 	bl	8002ce4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a58      	ldr	r2, [pc, #352]	; (80030f8 <HAL_UART_MspInit+0x290>)
 8002f96:	635a      	str	r2, [r3, #52]	; 0x34
 8002f98:	4a57      	ldr	r2, [pc, #348]	; (80030f8 <HAL_UART_MspInit+0x290>)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	2105      	movs	r1, #5
 8002fa2:	2025      	movs	r0, #37	; 0x25
 8002fa4:	f000 fee5 	bl	8003d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002fa8:	2025      	movs	r0, #37	; 0x25
 8002faa:	f000 fefe 	bl	8003daa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002fae:	e095      	b.n	80030dc <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART2)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a52      	ldr	r2, [pc, #328]	; (8003100 <HAL_UART_MspInit+0x298>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	f040 8090 	bne.w	80030dc <HAL_UART_MspInit+0x274>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	613b      	str	r3, [r7, #16]
 8002fc0:	4b49      	ldr	r3, [pc, #292]	; (80030e8 <HAL_UART_MspInit+0x280>)
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc4:	4a48      	ldr	r2, [pc, #288]	; (80030e8 <HAL_UART_MspInit+0x280>)
 8002fc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fca:	6413      	str	r3, [r2, #64]	; 0x40
 8002fcc:	4b46      	ldr	r3, [pc, #280]	; (80030e8 <HAL_UART_MspInit+0x280>)
 8002fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd4:	613b      	str	r3, [r7, #16]
 8002fd6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fd8:	2300      	movs	r3, #0
 8002fda:	60fb      	str	r3, [r7, #12]
 8002fdc:	4b42      	ldr	r3, [pc, #264]	; (80030e8 <HAL_UART_MspInit+0x280>)
 8002fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe0:	4a41      	ldr	r2, [pc, #260]	; (80030e8 <HAL_UART_MspInit+0x280>)
 8002fe2:	f043 0301 	orr.w	r3, r3, #1
 8002fe6:	6313      	str	r3, [r2, #48]	; 0x30
 8002fe8:	4b3f      	ldr	r3, [pc, #252]	; (80030e8 <HAL_UART_MspInit+0x280>)
 8002fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	60fb      	str	r3, [r7, #12]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002ff4:	230c      	movs	r3, #12
 8002ff6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003000:	2303      	movs	r3, #3
 8003002:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003004:	2307      	movs	r3, #7
 8003006:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003008:	f107 031c 	add.w	r3, r7, #28
 800300c:	4619      	mov	r1, r3
 800300e:	4837      	ldr	r0, [pc, #220]	; (80030ec <HAL_UART_MspInit+0x284>)
 8003010:	f001 fae0 	bl	80045d4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003014:	4b3b      	ldr	r3, [pc, #236]	; (8003104 <HAL_UART_MspInit+0x29c>)
 8003016:	4a3c      	ldr	r2, [pc, #240]	; (8003108 <HAL_UART_MspInit+0x2a0>)
 8003018:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800301a:	4b3a      	ldr	r3, [pc, #232]	; (8003104 <HAL_UART_MspInit+0x29c>)
 800301c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003020:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003022:	4b38      	ldr	r3, [pc, #224]	; (8003104 <HAL_UART_MspInit+0x29c>)
 8003024:	2200      	movs	r2, #0
 8003026:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003028:	4b36      	ldr	r3, [pc, #216]	; (8003104 <HAL_UART_MspInit+0x29c>)
 800302a:	2200      	movs	r2, #0
 800302c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800302e:	4b35      	ldr	r3, [pc, #212]	; (8003104 <HAL_UART_MspInit+0x29c>)
 8003030:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003034:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003036:	4b33      	ldr	r3, [pc, #204]	; (8003104 <HAL_UART_MspInit+0x29c>)
 8003038:	2200      	movs	r2, #0
 800303a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800303c:	4b31      	ldr	r3, [pc, #196]	; (8003104 <HAL_UART_MspInit+0x29c>)
 800303e:	2200      	movs	r2, #0
 8003040:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003042:	4b30      	ldr	r3, [pc, #192]	; (8003104 <HAL_UART_MspInit+0x29c>)
 8003044:	2200      	movs	r2, #0
 8003046:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003048:	4b2e      	ldr	r3, [pc, #184]	; (8003104 <HAL_UART_MspInit+0x29c>)
 800304a:	2200      	movs	r2, #0
 800304c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800304e:	4b2d      	ldr	r3, [pc, #180]	; (8003104 <HAL_UART_MspInit+0x29c>)
 8003050:	2200      	movs	r2, #0
 8003052:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003054:	482b      	ldr	r0, [pc, #172]	; (8003104 <HAL_UART_MspInit+0x29c>)
 8003056:	f000 febb 	bl	8003dd0 <HAL_DMA_Init>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 8003060:	f7ff fe40 	bl	8002ce4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a27      	ldr	r2, [pc, #156]	; (8003104 <HAL_UART_MspInit+0x29c>)
 8003068:	639a      	str	r2, [r3, #56]	; 0x38
 800306a:	4a26      	ldr	r2, [pc, #152]	; (8003104 <HAL_UART_MspInit+0x29c>)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003070:	4b26      	ldr	r3, [pc, #152]	; (800310c <HAL_UART_MspInit+0x2a4>)
 8003072:	4a27      	ldr	r2, [pc, #156]	; (8003110 <HAL_UART_MspInit+0x2a8>)
 8003074:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003076:	4b25      	ldr	r3, [pc, #148]	; (800310c <HAL_UART_MspInit+0x2a4>)
 8003078:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800307c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800307e:	4b23      	ldr	r3, [pc, #140]	; (800310c <HAL_UART_MspInit+0x2a4>)
 8003080:	2240      	movs	r2, #64	; 0x40
 8003082:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003084:	4b21      	ldr	r3, [pc, #132]	; (800310c <HAL_UART_MspInit+0x2a4>)
 8003086:	2200      	movs	r2, #0
 8003088:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800308a:	4b20      	ldr	r3, [pc, #128]	; (800310c <HAL_UART_MspInit+0x2a4>)
 800308c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003090:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003092:	4b1e      	ldr	r3, [pc, #120]	; (800310c <HAL_UART_MspInit+0x2a4>)
 8003094:	2200      	movs	r2, #0
 8003096:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003098:	4b1c      	ldr	r3, [pc, #112]	; (800310c <HAL_UART_MspInit+0x2a4>)
 800309a:	2200      	movs	r2, #0
 800309c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800309e:	4b1b      	ldr	r3, [pc, #108]	; (800310c <HAL_UART_MspInit+0x2a4>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80030a4:	4b19      	ldr	r3, [pc, #100]	; (800310c <HAL_UART_MspInit+0x2a4>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030aa:	4b18      	ldr	r3, [pc, #96]	; (800310c <HAL_UART_MspInit+0x2a4>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80030b0:	4816      	ldr	r0, [pc, #88]	; (800310c <HAL_UART_MspInit+0x2a4>)
 80030b2:	f000 fe8d 	bl	8003dd0 <HAL_DMA_Init>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <HAL_UART_MspInit+0x258>
      Error_Handler();
 80030bc:	f7ff fe12 	bl	8002ce4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a12      	ldr	r2, [pc, #72]	; (800310c <HAL_UART_MspInit+0x2a4>)
 80030c4:	635a      	str	r2, [r3, #52]	; 0x34
 80030c6:	4a11      	ldr	r2, [pc, #68]	; (800310c <HAL_UART_MspInit+0x2a4>)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80030cc:	2200      	movs	r2, #0
 80030ce:	2105      	movs	r1, #5
 80030d0:	2026      	movs	r0, #38	; 0x26
 80030d2:	f000 fe4e 	bl	8003d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80030d6:	2026      	movs	r0, #38	; 0x26
 80030d8:	f000 fe67 	bl	8003daa <HAL_NVIC_EnableIRQ>
}
 80030dc:	bf00      	nop
 80030de:	3730      	adds	r7, #48	; 0x30
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	40011000 	.word	0x40011000
 80030e8:	40023800 	.word	0x40023800
 80030ec:	40020000 	.word	0x40020000
 80030f0:	200001ec 	.word	0x200001ec
 80030f4:	40026440 	.word	0x40026440
 80030f8:	2000024c 	.word	0x2000024c
 80030fc:	400264b8 	.word	0x400264b8
 8003100:	40004400 	.word	0x40004400
 8003104:	200002ac 	.word	0x200002ac
 8003108:	40026088 	.word	0x40026088
 800310c:	2000030c 	.word	0x2000030c
 8003110:	400260a0 	.word	0x400260a0

08003114 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b08c      	sub	sp, #48	; 0x30
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800311c:	2300      	movs	r3, #0
 800311e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003120:	2300      	movs	r3, #0
 8003122:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8003124:	2200      	movs	r2, #0
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	2019      	movs	r0, #25
 800312a:	f000 fe22 	bl	8003d72 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800312e:	2019      	movs	r0, #25
 8003130:	f000 fe3b 	bl	8003daa <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003134:	2300      	movs	r3, #0
 8003136:	60fb      	str	r3, [r7, #12]
 8003138:	4b1f      	ldr	r3, [pc, #124]	; (80031b8 <HAL_InitTick+0xa4>)
 800313a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313c:	4a1e      	ldr	r2, [pc, #120]	; (80031b8 <HAL_InitTick+0xa4>)
 800313e:	f043 0301 	orr.w	r3, r3, #1
 8003142:	6453      	str	r3, [r2, #68]	; 0x44
 8003144:	4b1c      	ldr	r3, [pc, #112]	; (80031b8 <HAL_InitTick+0xa4>)
 8003146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	60fb      	str	r3, [r7, #12]
 800314e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003150:	f107 0210 	add.w	r2, r7, #16
 8003154:	f107 0314 	add.w	r3, r7, #20
 8003158:	4611      	mov	r1, r2
 800315a:	4618      	mov	r0, r3
 800315c:	f001 fe78 	bl	8004e50 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003160:	f001 fe62 	bl	8004e28 <HAL_RCC_GetPCLK2Freq>
 8003164:	4603      	mov	r3, r0
 8003166:	005b      	lsls	r3, r3, #1
 8003168:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800316a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800316c:	4a13      	ldr	r2, [pc, #76]	; (80031bc <HAL_InitTick+0xa8>)
 800316e:	fba2 2303 	umull	r2, r3, r2, r3
 8003172:	0c9b      	lsrs	r3, r3, #18
 8003174:	3b01      	subs	r3, #1
 8003176:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003178:	4b11      	ldr	r3, [pc, #68]	; (80031c0 <HAL_InitTick+0xac>)
 800317a:	4a12      	ldr	r2, [pc, #72]	; (80031c4 <HAL_InitTick+0xb0>)
 800317c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800317e:	4b10      	ldr	r3, [pc, #64]	; (80031c0 <HAL_InitTick+0xac>)
 8003180:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003184:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003186:	4a0e      	ldr	r2, [pc, #56]	; (80031c0 <HAL_InitTick+0xac>)
 8003188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800318a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800318c:	4b0c      	ldr	r3, [pc, #48]	; (80031c0 <HAL_InitTick+0xac>)
 800318e:	2200      	movs	r2, #0
 8003190:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003192:	4b0b      	ldr	r3, [pc, #44]	; (80031c0 <HAL_InitTick+0xac>)
 8003194:	2200      	movs	r2, #0
 8003196:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003198:	4809      	ldr	r0, [pc, #36]	; (80031c0 <HAL_InitTick+0xac>)
 800319a:	f002 ff05 	bl	8005fa8 <HAL_TIM_Base_Init>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d104      	bne.n	80031ae <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80031a4:	4806      	ldr	r0, [pc, #24]	; (80031c0 <HAL_InitTick+0xac>)
 80031a6:	f002 ff59 	bl	800605c <HAL_TIM_Base_Start_IT>
 80031aa:	4603      	mov	r3, r0
 80031ac:	e000      	b.n	80031b0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3730      	adds	r7, #48	; 0x30
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	40023800 	.word	0x40023800
 80031bc:	431bde83 	.word	0x431bde83
 80031c0:	20000654 	.word	0x20000654
 80031c4:	40010000 	.word	0x40010000

080031c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031cc:	e7fe      	b.n	80031cc <NMI_Handler+0x4>

080031ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031ce:	b480      	push	{r7}
 80031d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031d2:	e7fe      	b.n	80031d2 <HardFault_Handler+0x4>

080031d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031d8:	e7fe      	b.n	80031d8 <MemManage_Handler+0x4>

080031da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031da:	b480      	push	{r7}
 80031dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031de:	e7fe      	b.n	80031de <BusFault_Handler+0x4>

080031e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031e4:	e7fe      	b.n	80031e4 <UsageFault_Handler+0x4>

080031e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031e6:	b480      	push	{r7}
 80031e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031ea:	bf00      	nop
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80031f8:	4802      	ldr	r0, [pc, #8]	; (8003204 <DMA1_Stream5_IRQHandler+0x10>)
 80031fa:	f000 ff81 	bl	8004100 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80031fe:	bf00      	nop
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	200002ac 	.word	0x200002ac

08003208 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800320c:	4802      	ldr	r0, [pc, #8]	; (8003218 <DMA1_Stream6_IRQHandler+0x10>)
 800320e:	f000 ff77 	bl	8004100 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003212:	bf00      	nop
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	2000030c 	.word	0x2000030c

0800321c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003220:	4802      	ldr	r0, [pc, #8]	; (800322c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003222:	f002 ff8b 	bl	800613c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003226:	bf00      	nop
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	20000654 	.word	0x20000654

08003230 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003234:	4803      	ldr	r0, [pc, #12]	; (8003244 <USART1_IRQHandler+0x14>)
 8003236:	f003 fbb7 	bl	80069a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  USER_UART_IRQHandler(&huart1);
 800323a:	4802      	ldr	r0, [pc, #8]	; (8003244 <USART1_IRQHandler+0x14>)
 800323c:	f7fd fe06 	bl	8000e4c <USER_UART_IRQHandler>
  /* USER CODE END USART1_IRQn 1 */
}
 8003240:	bf00      	nop
 8003242:	bd80      	pop	{r7, pc}
 8003244:	20000164 	.word	0x20000164

08003248 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800324c:	4803      	ldr	r0, [pc, #12]	; (800325c <USART2_IRQHandler+0x14>)
 800324e:	f003 fbab 	bl	80069a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  USER_UART_IRQHandler(&huart2);
 8003252:	4802      	ldr	r0, [pc, #8]	; (800325c <USART2_IRQHandler+0x14>)
 8003254:	f7fd fdfa 	bl	8000e4c <USER_UART_IRQHandler>
  /* USER CODE END USART2_IRQn 1 */
}
 8003258:	bf00      	nop
 800325a:	bd80      	pop	{r7, pc}
 800325c:	200001a8 	.word	0x200001a8

08003260 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003264:	4802      	ldr	r0, [pc, #8]	; (8003270 <DMA2_Stream2_IRQHandler+0x10>)
 8003266:	f000 ff4b 	bl	8004100 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800326a:	bf00      	nop
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	200001ec 	.word	0x200001ec

08003274 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003278:	4802      	ldr	r0, [pc, #8]	; (8003284 <DMA2_Stream7_IRQHandler+0x10>)
 800327a:	f000 ff41 	bl	8004100 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800327e:	bf00      	nop
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	2000024c 	.word	0x2000024c

08003288 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003290:	4a14      	ldr	r2, [pc, #80]	; (80032e4 <_sbrk+0x5c>)
 8003292:	4b15      	ldr	r3, [pc, #84]	; (80032e8 <_sbrk+0x60>)
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800329c:	4b13      	ldr	r3, [pc, #76]	; (80032ec <_sbrk+0x64>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d102      	bne.n	80032aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032a4:	4b11      	ldr	r3, [pc, #68]	; (80032ec <_sbrk+0x64>)
 80032a6:	4a12      	ldr	r2, [pc, #72]	; (80032f0 <_sbrk+0x68>)
 80032a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032aa:	4b10      	ldr	r3, [pc, #64]	; (80032ec <_sbrk+0x64>)
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4413      	add	r3, r2
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d207      	bcs.n	80032c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032b8:	f008 fd18 	bl	800bcec <__errno>
 80032bc:	4603      	mov	r3, r0
 80032be:	220c      	movs	r2, #12
 80032c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032c2:	f04f 33ff 	mov.w	r3, #4294967295
 80032c6:	e009      	b.n	80032dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032c8:	4b08      	ldr	r3, [pc, #32]	; (80032ec <_sbrk+0x64>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032ce:	4b07      	ldr	r3, [pc, #28]	; (80032ec <_sbrk+0x64>)
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4413      	add	r3, r2
 80032d6:	4a05      	ldr	r2, [pc, #20]	; (80032ec <_sbrk+0x64>)
 80032d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032da:	68fb      	ldr	r3, [r7, #12]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3718      	adds	r7, #24
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	20020000 	.word	0x20020000
 80032e8:	00000400 	.word	0x00000400
 80032ec:	2000069c 	.word	0x2000069c
 80032f0:	20005070 	.word	0x20005070

080032f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032f8:	4b06      	ldr	r3, [pc, #24]	; (8003314 <SystemInit+0x20>)
 80032fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032fe:	4a05      	ldr	r2, [pc, #20]	; (8003314 <SystemInit+0x20>)
 8003300:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003304:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003308:	bf00      	nop
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	e000ed00 	.word	0xe000ed00

08003318 <W25qxx_Spi>:



//###################################################################################################################
uint8_t	W25qxx_Spi(uint8_t	Data)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af02      	add	r7, sp, #8
 800331e:	4603      	mov	r3, r0
 8003320:	71fb      	strb	r3, [r7, #7]
	uint8_t	ret;

	HAL_SPI_TransmitReceive(W25QXX_SPI_PTR, &Data, &ret, 1, 100); // spi2
 8003322:	f107 020f 	add.w	r2, r7, #15
 8003326:	1df9      	adds	r1, r7, #7
 8003328:	2364      	movs	r3, #100	; 0x64
 800332a:	9300      	str	r3, [sp, #0]
 800332c:	2301      	movs	r3, #1
 800332e:	4804      	ldr	r0, [pc, #16]	; (8003340 <W25qxx_Spi+0x28>)
 8003330:	f002 fbcd 	bl	8005ace <HAL_SPI_TransmitReceive>
	ret = W25QXX_SPI->DR;*/

	//while((W25QXX_SPI->SR & SPI_SR_BSY));
	//__HAL_SPI_CLEAR_OVRFLAG(&hspi2);

	return ret;
 8003334:	7bfb      	ldrb	r3, [r7, #15]
}
 8003336:	4618      	mov	r0, r3
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	2000010c 	.word	0x2000010c

08003344 <W25qxx_ReadID>:

//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 800334a:	2300      	movs	r3, #0
 800334c:	60fb      	str	r3, [r7, #12]
 800334e:	2300      	movs	r3, #0
 8003350:	60bb      	str	r3, [r7, #8]
 8003352:	2300      	movs	r3, #0
 8003354:	607b      	str	r3, [r7, #4]
 8003356:	2300      	movs	r3, #0
 8003358:	603b      	str	r3, [r7, #0]

	W25QFLASH_CS_SELECT;
 800335a:	2200      	movs	r2, #0
 800335c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003360:	4813      	ldr	r0, [pc, #76]	; (80033b0 <W25qxx_ReadID+0x6c>)
 8003362:	f001 fae3 	bl	800492c <HAL_GPIO_WritePin>

	W25qxx_Spi(W25_GET_JEDEC_ID);
 8003366:	209f      	movs	r0, #159	; 0x9f
 8003368:	f7ff ffd6 	bl	8003318 <W25qxx_Spi>

	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800336c:	20a5      	movs	r0, #165	; 0xa5
 800336e:	f7ff ffd3 	bl	8003318 <W25qxx_Spi>
 8003372:	4603      	mov	r3, r0
 8003374:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003376:	20a5      	movs	r0, #165	; 0xa5
 8003378:	f7ff ffce 	bl	8003318 <W25qxx_Spi>
 800337c:	4603      	mov	r3, r0
 800337e:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003380:	20a5      	movs	r0, #165	; 0xa5
 8003382:	f7ff ffc9 	bl	8003318 <W25qxx_Spi>
 8003386:	4603      	mov	r3, r0
 8003388:	603b      	str	r3, [r7, #0]

	W25QFLASH_CS_UNSELECT;
 800338a:	2201      	movs	r2, #1
 800338c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003390:	4807      	ldr	r0, [pc, #28]	; (80033b0 <W25qxx_ReadID+0x6c>)
 8003392:	f001 facb 	bl	800492c <HAL_GPIO_WritePin>

	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	041a      	lsls	r2, r3, #16
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	021b      	lsls	r3, r3, #8
 800339e:	4313      	orrs	r3, r2
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	60fb      	str	r3, [r7, #12]

	return Temp;
 80033a6:	68fb      	ldr	r3, [r7, #12]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	40020400 	.word	0x40020400

080033b4 <W25qxx_WriteEnable>:
	W25QFLASH_CS_UNSELECT;
}*/

//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
	W25QFLASH_CS_SELECT;
 80033b8:	2200      	movs	r2, #0
 80033ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80033be:	4808      	ldr	r0, [pc, #32]	; (80033e0 <W25qxx_WriteEnable+0x2c>)
 80033c0:	f001 fab4 	bl	800492c <HAL_GPIO_WritePin>
	W25qxx_Spi(W25_WRITE_ENABLE);
 80033c4:	2006      	movs	r0, #6
 80033c6:	f7ff ffa7 	bl	8003318 <W25qxx_Spi>
	W25QFLASH_CS_UNSELECT;
 80033ca:	2201      	movs	r2, #1
 80033cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80033d0:	4803      	ldr	r0, [pc, #12]	; (80033e0 <W25qxx_WriteEnable+0x2c>)
 80033d2:	f001 faab 	bl	800492c <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 80033d6:	2001      	movs	r0, #1
 80033d8:	f000 fbd8 	bl	8003b8c <HAL_Delay>
}
 80033dc:	bf00      	nop
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	40020400 	.word	0x40020400

080033e4 <W25qxx_WaitForWriteEnd>:
	W25QFLASH_CS_UNSELECT;
}*/

//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 80033e8:	2001      	movs	r0, #1
 80033ea:	f000 fbcf 	bl	8003b8c <HAL_Delay>
	W25QFLASH_CS_SELECT;
 80033ee:	2200      	movs	r2, #0
 80033f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80033f4:	480f      	ldr	r0, [pc, #60]	; (8003434 <W25qxx_WaitForWriteEnd+0x50>)
 80033f6:	f001 fa99 	bl	800492c <HAL_GPIO_WritePin>
	W25qxx_Spi(W25_READ_STATUS_1);
 80033fa:	2005      	movs	r0, #5
 80033fc:	f7ff ff8c 	bl	8003318 <W25qxx_Spi>

	do{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003400:	20a5      	movs	r0, #165	; 0xa5
 8003402:	f7ff ff89 	bl	8003318 <W25qxx_Spi>
 8003406:	4603      	mov	r3, r0
 8003408:	461a      	mov	r2, r3
 800340a:	4b0b      	ldr	r3, [pc, #44]	; (8003438 <W25qxx_WaitForWriteEnd+0x54>)
 800340c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8003410:	2001      	movs	r0, #1
 8003412:	f000 fbbb 	bl	8003b8c <HAL_Delay>
	}
	while((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8003416:	4b08      	ldr	r3, [pc, #32]	; (8003438 <W25qxx_WaitForWriteEnd+0x54>)
 8003418:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800341c:	f003 0301 	and.w	r3, r3, #1
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1ed      	bne.n	8003400 <W25qxx_WaitForWriteEnd+0x1c>

	W25QFLASH_CS_UNSELECT;
 8003424:	2201      	movs	r2, #1
 8003426:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800342a:	4802      	ldr	r0, [pc, #8]	; (8003434 <W25qxx_WaitForWriteEnd+0x50>)
 800342c:	f001 fa7e 	bl	800492c <HAL_GPIO_WritePin>
}
 8003430:	bf00      	nop
 8003432:	bd80      	pop	{r7, pc}
 8003434:	40020400 	.word	0x40020400
 8003438:	200006e0 	.word	0x200006e0

0800343c <W25qxx_Init>:

//###################################################################################################################
uint8_t W25qxx_Init(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8003442:	4bb2      	ldr	r3, [pc, #712]	; (800370c <W25qxx_Init+0x2d0>)
 8003444:	2201      	movs	r2, #1
 8003446:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while(HAL_GetTick() < 100)
 800344a:	e002      	b.n	8003452 <W25qxx_Init+0x16>
	W25qxx_Delay(1);
 800344c:	2001      	movs	r0, #1
 800344e:	f000 fb9d 	bl	8003b8c <HAL_Delay>
	while(HAL_GetTick() < 100)
 8003452:	f000 fb8f 	bl	8003b74 <HAL_GetTick>
 8003456:	4603      	mov	r3, r0
 8003458:	2b63      	cmp	r3, #99	; 0x63
 800345a:	d9f7      	bls.n	800344c <W25qxx_Init+0x10>

	W25QFLASH_CS_UNSELECT;
 800345c:	2201      	movs	r2, #1
 800345e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003462:	48ab      	ldr	r0, [pc, #684]	; (8003710 <W25qxx_Init+0x2d4>)
 8003464:	f001 fa62 	bl	800492c <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8003468:	2064      	movs	r0, #100	; 0x64
 800346a:	f000 fb8f 	bl	8003b8c <HAL_Delay>

	uint32_t id;

	#if (INIT_DEBUG == 1)
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Init Begin...\n", 14, 1000);
 800346e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003472:	220e      	movs	r2, #14
 8003474:	49a7      	ldr	r1, [pc, #668]	; (8003714 <W25qxx_Init+0x2d8>)
 8003476:	48a8      	ldr	r0, [pc, #672]	; (8003718 <W25qxx_Init+0x2dc>)
 8003478:	f003 f891 	bl	800659e <HAL_UART_Transmit>
	#endif
	
	id = W25qxx_ReadID();
 800347c:	f7ff ff62 	bl	8003344 <W25qxx_ReadID>
 8003480:	6078      	str	r0, [r7, #4]

	#if (INIT_DEBUG == 1)
	snprintf(buf, 64, "ID:0x%lX\n", id);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4aa5      	ldr	r2, [pc, #660]	; (800371c <W25qxx_Init+0x2e0>)
 8003486:	2140      	movs	r1, #64	; 0x40
 8003488:	48a5      	ldr	r0, [pc, #660]	; (8003720 <W25qxx_Init+0x2e4>)
 800348a:	f008 fc6f 	bl	800bd6c <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 800348e:	48a4      	ldr	r0, [pc, #656]	; (8003720 <W25qxx_Init+0x2e4>)
 8003490:	f7fc febe 	bl	8000210 <strlen>
 8003494:	4603      	mov	r3, r0
 8003496:	b29a      	uxth	r2, r3
 8003498:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800349c:	49a0      	ldr	r1, [pc, #640]	; (8003720 <W25qxx_Init+0x2e4>)
 800349e:	489e      	ldr	r0, [pc, #632]	; (8003718 <W25qxx_Init+0x2dc>)
 80034a0:	f003 f87d 	bl	800659e <HAL_UART_Transmit>
	#endif

	switch(id & 0x0000FFFF)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	f243 0217 	movw	r2, #12311	; 0x3017
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d839      	bhi.n	8003524 <W25qxx_Init+0xe8>
 80034b0:	f243 0211 	movw	r2, #12305	; 0x3011
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d21d      	bcs.n	80034f4 <W25qxx_Init+0xb8>
 80034b8:	e11a      	b.n	80036f0 <W25qxx_Init+0x2b4>
 80034ba:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80034be:	3b11      	subs	r3, #17
 80034c0:	2b09      	cmp	r3, #9
 80034c2:	f200 8115 	bhi.w	80036f0 <W25qxx_Init+0x2b4>
 80034c6:	a201      	add	r2, pc, #4	; (adr r2, 80034cc <W25qxx_Init+0x90>)
 80034c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034cc:	0800363b 	.word	0x0800363b
 80034d0:	0800361f 	.word	0x0800361f
 80034d4:	08003603 	.word	0x08003603
 80034d8:	080035e7 	.word	0x080035e7
 80034dc:	080035cb 	.word	0x080035cb
 80034e0:	080035af 	.word	0x080035af
 80034e4:	08003593 	.word	0x08003593
 80034e8:	08003575 	.word	0x08003575
 80034ec:	08003557 	.word	0x08003557
 80034f0:	08003539 	.word	0x08003539
 80034f4:	f5a3 5340 	sub.w	r3, r3, #12288	; 0x3000
 80034f8:	3b11      	subs	r3, #17
 80034fa:	2b06      	cmp	r3, #6
 80034fc:	f200 80f8 	bhi.w	80036f0 <W25qxx_Init+0x2b4>
 8003500:	a201      	add	r2, pc, #4	; (adr r2, 8003508 <W25qxx_Init+0xcc>)
 8003502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003506:	bf00      	nop
 8003508:	080036db 	.word	0x080036db
 800350c:	080036c5 	.word	0x080036c5
 8003510:	080036af 	.word	0x080036af
 8003514:	08003699 	.word	0x08003699
 8003518:	08003683 	.word	0x08003683
 800351c:	0800366d 	.word	0x0800366d
 8003520:	08003657 	.word	0x08003657
 8003524:	f244 021a 	movw	r2, #16410	; 0x401a
 8003528:	4293      	cmp	r3, r2
 800352a:	f200 80e1 	bhi.w	80036f0 <W25qxx_Init+0x2b4>
 800352e:	f244 0211 	movw	r2, #16401	; 0x4011
 8003532:	4293      	cmp	r3, r2
 8003534:	d2c1      	bcs.n	80034ba <W25qxx_Init+0x7e>
 8003536:	e0db      	b.n	80036f0 <W25qxx_Init+0x2b4>
	{
		case 0x401A:	// 	w25q512
			w25qxx.ID = W25Q512;
 8003538:	4b74      	ldr	r3, [pc, #464]	; (800370c <W25qxx_Init+0x2d0>)
 800353a:	220a      	movs	r2, #10
 800353c:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 1024;
 800353e:	4b73      	ldr	r3, [pc, #460]	; (800370c <W25qxx_Init+0x2d0>)
 8003540:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003544:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q512\n", 14, 1000);
 8003546:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800354a:	220e      	movs	r2, #14
 800354c:	4975      	ldr	r1, [pc, #468]	; (8003724 <W25qxx_Init+0x2e8>)
 800354e:	4872      	ldr	r0, [pc, #456]	; (8003718 <W25qxx_Init+0x2dc>)
 8003550:	f003 f825 	bl	800659e <HAL_UART_Transmit>
			#endif
		break;
 8003554:	e10a      	b.n	800376c <W25qxx_Init+0x330>

		case 0x4019:	// 	w25q256
			w25qxx.ID = W25Q256;
 8003556:	4b6d      	ldr	r3, [pc, #436]	; (800370c <W25qxx_Init+0x2d0>)
 8003558:	2209      	movs	r2, #9
 800355a:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 512;
 800355c:	4b6b      	ldr	r3, [pc, #428]	; (800370c <W25qxx_Init+0x2d0>)
 800355e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003562:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q256\n", 14, 1000);
 8003564:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003568:	220e      	movs	r2, #14
 800356a:	496f      	ldr	r1, [pc, #444]	; (8003728 <W25qxx_Init+0x2ec>)
 800356c:	486a      	ldr	r0, [pc, #424]	; (8003718 <W25qxx_Init+0x2dc>)
 800356e:	f003 f816 	bl	800659e <HAL_UART_Transmit>
			#endif
		break;
 8003572:	e0fb      	b.n	800376c <W25qxx_Init+0x330>

		case 0x4018:	// 	w25q128
			w25qxx.ID = W25Q128;
 8003574:	4b65      	ldr	r3, [pc, #404]	; (800370c <W25qxx_Init+0x2d0>)
 8003576:	2208      	movs	r2, #8
 8003578:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 256;
 800357a:	4b64      	ldr	r3, [pc, #400]	; (800370c <W25qxx_Init+0x2d0>)
 800357c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003580:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q128\n", 14, 1000);
 8003582:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003586:	220e      	movs	r2, #14
 8003588:	4968      	ldr	r1, [pc, #416]	; (800372c <W25qxx_Init+0x2f0>)
 800358a:	4863      	ldr	r0, [pc, #396]	; (8003718 <W25qxx_Init+0x2dc>)
 800358c:	f003 f807 	bl	800659e <HAL_UART_Transmit>
			#endif
		break;
 8003590:	e0ec      	b.n	800376c <W25qxx_Init+0x330>

		case 0x4017:	//	w25q64
			w25qxx.ID = W25Q64;
 8003592:	4b5e      	ldr	r3, [pc, #376]	; (800370c <W25qxx_Init+0x2d0>)
 8003594:	2207      	movs	r2, #7
 8003596:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 128;
 8003598:	4b5c      	ldr	r3, [pc, #368]	; (800370c <W25qxx_Init+0x2d0>)
 800359a:	2280      	movs	r2, #128	; 0x80
 800359c:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q64\n", 13, 1000);
 800359e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035a2:	220d      	movs	r2, #13
 80035a4:	4962      	ldr	r1, [pc, #392]	; (8003730 <W25qxx_Init+0x2f4>)
 80035a6:	485c      	ldr	r0, [pc, #368]	; (8003718 <W25qxx_Init+0x2dc>)
 80035a8:	f002 fff9 	bl	800659e <HAL_UART_Transmit>
			#endif
		break;
 80035ac:	e0de      	b.n	800376c <W25qxx_Init+0x330>

		case 0x4016:	//	w25q32
			w25qxx.ID = W25Q32;
 80035ae:	4b57      	ldr	r3, [pc, #348]	; (800370c <W25qxx_Init+0x2d0>)
 80035b0:	2206      	movs	r2, #6
 80035b2:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 64;
 80035b4:	4b55      	ldr	r3, [pc, #340]	; (800370c <W25qxx_Init+0x2d0>)
 80035b6:	2240      	movs	r2, #64	; 0x40
 80035b8:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q32\n", 13, 1000);
 80035ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035be:	220d      	movs	r2, #13
 80035c0:	495c      	ldr	r1, [pc, #368]	; (8003734 <W25qxx_Init+0x2f8>)
 80035c2:	4855      	ldr	r0, [pc, #340]	; (8003718 <W25qxx_Init+0x2dc>)
 80035c4:	f002 ffeb 	bl	800659e <HAL_UART_Transmit>
			#endif
		break;
 80035c8:	e0d0      	b.n	800376c <W25qxx_Init+0x330>

		case 0x4015:	//	w25q16
			w25qxx.ID = W25Q16;
 80035ca:	4b50      	ldr	r3, [pc, #320]	; (800370c <W25qxx_Init+0x2d0>)
 80035cc:	2205      	movs	r2, #5
 80035ce:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 32;
 80035d0:	4b4e      	ldr	r3, [pc, #312]	; (800370c <W25qxx_Init+0x2d0>)
 80035d2:	2220      	movs	r2, #32
 80035d4:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q16\n", 13, 1000);
 80035d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035da:	220d      	movs	r2, #13
 80035dc:	4956      	ldr	r1, [pc, #344]	; (8003738 <W25qxx_Init+0x2fc>)
 80035de:	484e      	ldr	r0, [pc, #312]	; (8003718 <W25qxx_Init+0x2dc>)
 80035e0:	f002 ffdd 	bl	800659e <HAL_UART_Transmit>
			#endif
		break;
 80035e4:	e0c2      	b.n	800376c <W25qxx_Init+0x330>

		case 0x4014:	//	w25q80
			w25qxx.ID = W25Q80;
 80035e6:	4b49      	ldr	r3, [pc, #292]	; (800370c <W25qxx_Init+0x2d0>)
 80035e8:	2204      	movs	r2, #4
 80035ea:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 16;
 80035ec:	4b47      	ldr	r3, [pc, #284]	; (800370c <W25qxx_Init+0x2d0>)
 80035ee:	2210      	movs	r2, #16
 80035f0:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q80\n", 13, 1000);
 80035f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035f6:	220d      	movs	r2, #13
 80035f8:	4950      	ldr	r1, [pc, #320]	; (800373c <W25qxx_Init+0x300>)
 80035fa:	4847      	ldr	r0, [pc, #284]	; (8003718 <W25qxx_Init+0x2dc>)
 80035fc:	f002 ffcf 	bl	800659e <HAL_UART_Transmit>
			#endif
		break;
 8003600:	e0b4      	b.n	800376c <W25qxx_Init+0x330>

		case 0x4013:	//	w25q40
			w25qxx.ID = W25Q40;
 8003602:	4b42      	ldr	r3, [pc, #264]	; (800370c <W25qxx_Init+0x2d0>)
 8003604:	2203      	movs	r2, #3
 8003606:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 8;
 8003608:	4b40      	ldr	r3, [pc, #256]	; (800370c <W25qxx_Init+0x2d0>)
 800360a:	2208      	movs	r2, #8
 800360c:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q40\n", 13, 1000);
 800360e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003612:	220d      	movs	r2, #13
 8003614:	494a      	ldr	r1, [pc, #296]	; (8003740 <W25qxx_Init+0x304>)
 8003616:	4840      	ldr	r0, [pc, #256]	; (8003718 <W25qxx_Init+0x2dc>)
 8003618:	f002 ffc1 	bl	800659e <HAL_UART_Transmit>
			#endif
		break;
 800361c:	e0a6      	b.n	800376c <W25qxx_Init+0x330>

		case 0x4012:	//	w25q20
			w25qxx.ID = W25Q20;
 800361e:	4b3b      	ldr	r3, [pc, #236]	; (800370c <W25qxx_Init+0x2d0>)
 8003620:	2202      	movs	r2, #2
 8003622:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 4;
 8003624:	4b39      	ldr	r3, [pc, #228]	; (800370c <W25qxx_Init+0x2d0>)
 8003626:	2204      	movs	r2, #4
 8003628:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q20\n", 13, 1000);
 800362a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800362e:	220d      	movs	r2, #13
 8003630:	4944      	ldr	r1, [pc, #272]	; (8003744 <W25qxx_Init+0x308>)
 8003632:	4839      	ldr	r0, [pc, #228]	; (8003718 <W25qxx_Init+0x2dc>)
 8003634:	f002 ffb3 	bl	800659e <HAL_UART_Transmit>
			#endif
		break;
 8003638:	e098      	b.n	800376c <W25qxx_Init+0x330>

		case 0x4011:	//	w25q10
			w25qxx.ID = W25Q10;
 800363a:	4b34      	ldr	r3, [pc, #208]	; (800370c <W25qxx_Init+0x2d0>)
 800363c:	2201      	movs	r2, #1
 800363e:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 2;
 8003640:	4b32      	ldr	r3, [pc, #200]	; (800370c <W25qxx_Init+0x2d0>)
 8003642:	2202      	movs	r2, #2
 8003644:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q10\n", 13, 1000);
 8003646:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800364a:	220d      	movs	r2, #13
 800364c:	493e      	ldr	r1, [pc, #248]	; (8003748 <W25qxx_Init+0x30c>)
 800364e:	4832      	ldr	r0, [pc, #200]	; (8003718 <W25qxx_Init+0x2dc>)
 8003650:	f002 ffa5 	bl	800659e <HAL_UART_Transmit>
			#endif
		break;
 8003654:	e08a      	b.n	800376c <W25qxx_Init+0x330>

		////////////////////////////////////////////////////////////////////////////////

		case 0x3017:	//	w25x64
			//w25qxx.ID = W25Q64;
			w25qxx.BlockCount = 128;
 8003656:	4b2d      	ldr	r3, [pc, #180]	; (800370c <W25qxx_Init+0x2d0>)
 8003658:	2280      	movs	r2, #128	; 0x80
 800365a:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x64\n", 13, 1000);
 800365c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003660:	220d      	movs	r2, #13
 8003662:	493a      	ldr	r1, [pc, #232]	; (800374c <W25qxx_Init+0x310>)
 8003664:	482c      	ldr	r0, [pc, #176]	; (8003718 <W25qxx_Init+0x2dc>)
 8003666:	f002 ff9a 	bl	800659e <HAL_UART_Transmit>
			#endif
		break;
 800366a:	e07f      	b.n	800376c <W25qxx_Init+0x330>

		case 0x3016:	//	w25x32
			//w25qxx.ID = W25Q32;
			w25qxx.BlockCount = 64;
 800366c:	4b27      	ldr	r3, [pc, #156]	; (800370c <W25qxx_Init+0x2d0>)
 800366e:	2240      	movs	r2, #64	; 0x40
 8003670:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x32\n", 13, 1000);
 8003672:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003676:	220d      	movs	r2, #13
 8003678:	4935      	ldr	r1, [pc, #212]	; (8003750 <W25qxx_Init+0x314>)
 800367a:	4827      	ldr	r0, [pc, #156]	; (8003718 <W25qxx_Init+0x2dc>)
 800367c:	f002 ff8f 	bl	800659e <HAL_UART_Transmit>
			#endif
		break;
 8003680:	e074      	b.n	800376c <W25qxx_Init+0x330>

		case 0x3015:	//	w25q16
			//w25qxx.ID = W25Q16;
			w25qxx.BlockCount = 32;
 8003682:	4b22      	ldr	r3, [pc, #136]	; (800370c <W25qxx_Init+0x2d0>)
 8003684:	2220      	movs	r2, #32
 8003686:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x16\n", 13, 1000);
 8003688:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800368c:	220d      	movs	r2, #13
 800368e:	4931      	ldr	r1, [pc, #196]	; (8003754 <W25qxx_Init+0x318>)
 8003690:	4821      	ldr	r0, [pc, #132]	; (8003718 <W25qxx_Init+0x2dc>)
 8003692:	f002 ff84 	bl	800659e <HAL_UART_Transmit>
			#endif
		break;
 8003696:	e069      	b.n	800376c <W25qxx_Init+0x330>

		////////////////////////////////////////////////////////////////////////////////
		case 0x3014:	//	w25x80
			//w25qxx.ID = W25Q80;
			w25qxx.BlockCount = 16;
 8003698:	4b1c      	ldr	r3, [pc, #112]	; (800370c <W25qxx_Init+0x2d0>)
 800369a:	2210      	movs	r2, #16
 800369c:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x80\n", 13, 1000);
 800369e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036a2:	220d      	movs	r2, #13
 80036a4:	492c      	ldr	r1, [pc, #176]	; (8003758 <W25qxx_Init+0x31c>)
 80036a6:	481c      	ldr	r0, [pc, #112]	; (8003718 <W25qxx_Init+0x2dc>)
 80036a8:	f002 ff79 	bl	800659e <HAL_UART_Transmit>
			#endif
		break;
 80036ac:	e05e      	b.n	800376c <W25qxx_Init+0x330>

		case 0x3013:	//	w25x40
			//w25qxx.ID = W25Q40;
			w25qxx.BlockCount = 8;
 80036ae:	4b17      	ldr	r3, [pc, #92]	; (800370c <W25qxx_Init+0x2d0>)
 80036b0:	2208      	movs	r2, #8
 80036b2:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x40\n", 13, 1000);
 80036b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036b8:	220d      	movs	r2, #13
 80036ba:	4928      	ldr	r1, [pc, #160]	; (800375c <W25qxx_Init+0x320>)
 80036bc:	4816      	ldr	r0, [pc, #88]	; (8003718 <W25qxx_Init+0x2dc>)
 80036be:	f002 ff6e 	bl	800659e <HAL_UART_Transmit>
			#endif
		break;
 80036c2:	e053      	b.n	800376c <W25qxx_Init+0x330>

		case 0x3012:	//	w25x20
			//w25qxx.ID = W25Q20;
			w25qxx.BlockCount = 4;
 80036c4:	4b11      	ldr	r3, [pc, #68]	; (800370c <W25qxx_Init+0x2d0>)
 80036c6:	2204      	movs	r2, #4
 80036c8:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x20\n", 13, 1000);
 80036ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036ce:	220d      	movs	r2, #13
 80036d0:	4923      	ldr	r1, [pc, #140]	; (8003760 <W25qxx_Init+0x324>)
 80036d2:	4811      	ldr	r0, [pc, #68]	; (8003718 <W25qxx_Init+0x2dc>)
 80036d4:	f002 ff63 	bl	800659e <HAL_UART_Transmit>
			#endif
		break;
 80036d8:	e048      	b.n	800376c <W25qxx_Init+0x330>

		case 0x3011:	//	w25x10
			//w25qxx.ID = W25Q10;
			w25qxx.BlockCount = 2;
 80036da:	4b0c      	ldr	r3, [pc, #48]	; (800370c <W25qxx_Init+0x2d0>)
 80036dc:	2202      	movs	r2, #2
 80036de:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x10\n", 13, 1000);
 80036e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036e4:	220d      	movs	r2, #13
 80036e6:	491f      	ldr	r1, [pc, #124]	; (8003764 <W25qxx_Init+0x328>)
 80036e8:	480b      	ldr	r0, [pc, #44]	; (8003718 <W25qxx_Init+0x2dc>)
 80036ea:	f002 ff58 	bl	800659e <HAL_UART_Transmit>
			#endif
		break;
 80036ee:	e03d      	b.n	800376c <W25qxx_Init+0x330>



		default:
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Unknown ID\n", 11, 1000);
 80036f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036f4:	220b      	movs	r2, #11
 80036f6:	491c      	ldr	r1, [pc, #112]	; (8003768 <W25qxx_Init+0x32c>)
 80036f8:	4807      	ldr	r0, [pc, #28]	; (8003718 <W25qxx_Init+0x2dc>)
 80036fa:	f002 ff50 	bl	800659e <HAL_UART_Transmit>
			#endif

			w25qxx.Lock = 0;
 80036fe:	4b03      	ldr	r3, [pc, #12]	; (800370c <W25qxx_Init+0x2d0>)
 8003700:	2200      	movs	r2, #0
 8003702:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			return 0;
 8003706:	2300      	movs	r3, #0
 8003708:	e0e1      	b.n	80038ce <W25qxx_Init+0x492>
 800370a:	bf00      	nop
 800370c:	200006e0 	.word	0x200006e0
 8003710:	40020400 	.word	0x40020400
 8003714:	0800d674 	.word	0x0800d674
 8003718:	200001a8 	.word	0x200001a8
 800371c:	0800d684 	.word	0x0800d684
 8003720:	200006a0 	.word	0x200006a0
 8003724:	0800d690 	.word	0x0800d690
 8003728:	0800d6a0 	.word	0x0800d6a0
 800372c:	0800d6b0 	.word	0x0800d6b0
 8003730:	0800d6c0 	.word	0x0800d6c0
 8003734:	0800d6d0 	.word	0x0800d6d0
 8003738:	0800d6e0 	.word	0x0800d6e0
 800373c:	0800d6f0 	.word	0x0800d6f0
 8003740:	0800d700 	.word	0x0800d700
 8003744:	0800d710 	.word	0x0800d710
 8003748:	0800d720 	.word	0x0800d720
 800374c:	0800d730 	.word	0x0800d730
 8003750:	0800d740 	.word	0x0800d740
 8003754:	0800d750 	.word	0x0800d750
 8003758:	0800d760 	.word	0x0800d760
 800375c:	0800d770 	.word	0x0800d770
 8003760:	0800d780 	.word	0x0800d780
 8003764:	0800d790 	.word	0x0800d790
 8003768:	0800d7a0 	.word	0x0800d7a0
	}


	w25qxx.PageSize = 256;
 800376c:	4b5a      	ldr	r3, [pc, #360]	; (80038d8 <W25qxx_Init+0x49c>)
 800376e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003772:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8003774:	4b58      	ldr	r3, [pc, #352]	; (80038d8 <W25qxx_Init+0x49c>)
 8003776:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800377a:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 800377c:	4b56      	ldr	r3, [pc, #344]	; (80038d8 <W25qxx_Init+0x49c>)
 800377e:	69db      	ldr	r3, [r3, #28]
 8003780:	011b      	lsls	r3, r3, #4
 8003782:	4a55      	ldr	r2, [pc, #340]	; (80038d8 <W25qxx_Init+0x49c>)
 8003784:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8003786:	4b54      	ldr	r3, [pc, #336]	; (80038d8 <W25qxx_Init+0x49c>)
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	4a53      	ldr	r2, [pc, #332]	; (80038d8 <W25qxx_Init+0x49c>)
 800378c:	6912      	ldr	r2, [r2, #16]
 800378e:	fb02 f303 	mul.w	r3, r2, r3
 8003792:	4a51      	ldr	r2, [pc, #324]	; (80038d8 <W25qxx_Init+0x49c>)
 8003794:	8952      	ldrh	r2, [r2, #10]
 8003796:	fbb3 f3f2 	udiv	r3, r3, r2
 800379a:	4a4f      	ldr	r2, [pc, #316]	; (80038d8 <W25qxx_Init+0x49c>)
 800379c:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 800379e:	4b4e      	ldr	r3, [pc, #312]	; (80038d8 <W25qxx_Init+0x49c>)
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	011b      	lsls	r3, r3, #4
 80037a4:	4a4c      	ldr	r2, [pc, #304]	; (80038d8 <W25qxx_Init+0x49c>)
 80037a6:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 80037a8:	4b4b      	ldr	r3, [pc, #300]	; (80038d8 <W25qxx_Init+0x49c>)
 80037aa:	695b      	ldr	r3, [r3, #20]
 80037ac:	4a4a      	ldr	r2, [pc, #296]	; (80038d8 <W25qxx_Init+0x49c>)
 80037ae:	6912      	ldr	r2, [r2, #16]
 80037b0:	fb02 f303 	mul.w	r3, r2, r3
 80037b4:	0a9b      	lsrs	r3, r3, #10
 80037b6:	4a48      	ldr	r2, [pc, #288]	; (80038d8 <W25qxx_Init+0x49c>)
 80037b8:	6213      	str	r3, [r2, #32]
	//W25qxx_ReadStatusRegister(1);
	//W25qxx_ReadStatusRegister(2);
	//W25qxx_ReadStatusRegister(3);

	#if (INIT_DEBUG == 1)
	snprintf(buf, 64, "Page Size: %d Bytes\n", w25qxx.PageSize);
 80037ba:	4b47      	ldr	r3, [pc, #284]	; (80038d8 <W25qxx_Init+0x49c>)
 80037bc:	895b      	ldrh	r3, [r3, #10]
 80037be:	4a47      	ldr	r2, [pc, #284]	; (80038dc <W25qxx_Init+0x4a0>)
 80037c0:	2140      	movs	r1, #64	; 0x40
 80037c2:	4847      	ldr	r0, [pc, #284]	; (80038e0 <W25qxx_Init+0x4a4>)
 80037c4:	f008 fad2 	bl	800bd6c <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 80037c8:	4845      	ldr	r0, [pc, #276]	; (80038e0 <W25qxx_Init+0x4a4>)
 80037ca:	f7fc fd21 	bl	8000210 <strlen>
 80037ce:	4603      	mov	r3, r0
 80037d0:	b29a      	uxth	r2, r3
 80037d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037d6:	4942      	ldr	r1, [pc, #264]	; (80038e0 <W25qxx_Init+0x4a4>)
 80037d8:	4842      	ldr	r0, [pc, #264]	; (80038e4 <W25qxx_Init+0x4a8>)
 80037da:	f002 fee0 	bl	800659e <HAL_UART_Transmit>

	snprintf(buf, 64, "Page Count: %lu\n", w25qxx.PageCount);
 80037de:	4b3e      	ldr	r3, [pc, #248]	; (80038d8 <W25qxx_Init+0x49c>)
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	4a41      	ldr	r2, [pc, #260]	; (80038e8 <W25qxx_Init+0x4ac>)
 80037e4:	2140      	movs	r1, #64	; 0x40
 80037e6:	483e      	ldr	r0, [pc, #248]	; (80038e0 <W25qxx_Init+0x4a4>)
 80037e8:	f008 fac0 	bl	800bd6c <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 80037ec:	483c      	ldr	r0, [pc, #240]	; (80038e0 <W25qxx_Init+0x4a4>)
 80037ee:	f7fc fd0f 	bl	8000210 <strlen>
 80037f2:	4603      	mov	r3, r0
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037fa:	4939      	ldr	r1, [pc, #228]	; (80038e0 <W25qxx_Init+0x4a4>)
 80037fc:	4839      	ldr	r0, [pc, #228]	; (80038e4 <W25qxx_Init+0x4a8>)
 80037fe:	f002 fece 	bl	800659e <HAL_UART_Transmit>

	snprintf(buf, 64, "Sector Size: %lu Bytes\n", w25qxx.SectorSize);
 8003802:	4b35      	ldr	r3, [pc, #212]	; (80038d8 <W25qxx_Init+0x49c>)
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	4a39      	ldr	r2, [pc, #228]	; (80038ec <W25qxx_Init+0x4b0>)
 8003808:	2140      	movs	r1, #64	; 0x40
 800380a:	4835      	ldr	r0, [pc, #212]	; (80038e0 <W25qxx_Init+0x4a4>)
 800380c:	f008 faae 	bl	800bd6c <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 8003810:	4833      	ldr	r0, [pc, #204]	; (80038e0 <W25qxx_Init+0x4a4>)
 8003812:	f7fc fcfd 	bl	8000210 <strlen>
 8003816:	4603      	mov	r3, r0
 8003818:	b29a      	uxth	r2, r3
 800381a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800381e:	4930      	ldr	r1, [pc, #192]	; (80038e0 <W25qxx_Init+0x4a4>)
 8003820:	4830      	ldr	r0, [pc, #192]	; (80038e4 <W25qxx_Init+0x4a8>)
 8003822:	f002 febc 	bl	800659e <HAL_UART_Transmit>

	snprintf(buf, 64, "Sector Count: %lu\n", w25qxx.SectorCount);
 8003826:	4b2c      	ldr	r3, [pc, #176]	; (80038d8 <W25qxx_Init+0x49c>)
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	4a31      	ldr	r2, [pc, #196]	; (80038f0 <W25qxx_Init+0x4b4>)
 800382c:	2140      	movs	r1, #64	; 0x40
 800382e:	482c      	ldr	r0, [pc, #176]	; (80038e0 <W25qxx_Init+0x4a4>)
 8003830:	f008 fa9c 	bl	800bd6c <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 8003834:	482a      	ldr	r0, [pc, #168]	; (80038e0 <W25qxx_Init+0x4a4>)
 8003836:	f7fc fceb 	bl	8000210 <strlen>
 800383a:	4603      	mov	r3, r0
 800383c:	b29a      	uxth	r2, r3
 800383e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003842:	4927      	ldr	r1, [pc, #156]	; (80038e0 <W25qxx_Init+0x4a4>)
 8003844:	4827      	ldr	r0, [pc, #156]	; (80038e4 <W25qxx_Init+0x4a8>)
 8003846:	f002 feaa 	bl	800659e <HAL_UART_Transmit>

	snprintf(buf, 64, "Block Size: %lu Bytes\n", w25qxx.BlockSize);
 800384a:	4b23      	ldr	r3, [pc, #140]	; (80038d8 <W25qxx_Init+0x49c>)
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	4a29      	ldr	r2, [pc, #164]	; (80038f4 <W25qxx_Init+0x4b8>)
 8003850:	2140      	movs	r1, #64	; 0x40
 8003852:	4823      	ldr	r0, [pc, #140]	; (80038e0 <W25qxx_Init+0x4a4>)
 8003854:	f008 fa8a 	bl	800bd6c <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 8003858:	4821      	ldr	r0, [pc, #132]	; (80038e0 <W25qxx_Init+0x4a4>)
 800385a:	f7fc fcd9 	bl	8000210 <strlen>
 800385e:	4603      	mov	r3, r0
 8003860:	b29a      	uxth	r2, r3
 8003862:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003866:	491e      	ldr	r1, [pc, #120]	; (80038e0 <W25qxx_Init+0x4a4>)
 8003868:	481e      	ldr	r0, [pc, #120]	; (80038e4 <W25qxx_Init+0x4a8>)
 800386a:	f002 fe98 	bl	800659e <HAL_UART_Transmit>

	snprintf(buf, 64, "Block Count: %lu\n", w25qxx.BlockCount);
 800386e:	4b1a      	ldr	r3, [pc, #104]	; (80038d8 <W25qxx_Init+0x49c>)
 8003870:	69db      	ldr	r3, [r3, #28]
 8003872:	4a21      	ldr	r2, [pc, #132]	; (80038f8 <W25qxx_Init+0x4bc>)
 8003874:	2140      	movs	r1, #64	; 0x40
 8003876:	481a      	ldr	r0, [pc, #104]	; (80038e0 <W25qxx_Init+0x4a4>)
 8003878:	f008 fa78 	bl	800bd6c <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 800387c:	4818      	ldr	r0, [pc, #96]	; (80038e0 <W25qxx_Init+0x4a4>)
 800387e:	f7fc fcc7 	bl	8000210 <strlen>
 8003882:	4603      	mov	r3, r0
 8003884:	b29a      	uxth	r2, r3
 8003886:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800388a:	4915      	ldr	r1, [pc, #84]	; (80038e0 <W25qxx_Init+0x4a4>)
 800388c:	4815      	ldr	r0, [pc, #84]	; (80038e4 <W25qxx_Init+0x4a8>)
 800388e:	f002 fe86 	bl	800659e <HAL_UART_Transmit>

	snprintf(buf, 64, "Capacity: %lu KBytes\n", w25qxx.CapacityInKiloByte);
 8003892:	4b11      	ldr	r3, [pc, #68]	; (80038d8 <W25qxx_Init+0x49c>)
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	4a19      	ldr	r2, [pc, #100]	; (80038fc <W25qxx_Init+0x4c0>)
 8003898:	2140      	movs	r1, #64	; 0x40
 800389a:	4811      	ldr	r0, [pc, #68]	; (80038e0 <W25qxx_Init+0x4a4>)
 800389c:	f008 fa66 	bl	800bd6c <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 80038a0:	480f      	ldr	r0, [pc, #60]	; (80038e0 <W25qxx_Init+0x4a4>)
 80038a2:	f7fc fcb5 	bl	8000210 <strlen>
 80038a6:	4603      	mov	r3, r0
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038ae:	490c      	ldr	r1, [pc, #48]	; (80038e0 <W25qxx_Init+0x4a4>)
 80038b0:	480c      	ldr	r0, [pc, #48]	; (80038e4 <W25qxx_Init+0x4a8>)
 80038b2:	f002 fe74 	bl	800659e <HAL_UART_Transmit>

	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Init Done\n", 10, 1000);
 80038b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038ba:	220a      	movs	r2, #10
 80038bc:	4910      	ldr	r1, [pc, #64]	; (8003900 <W25qxx_Init+0x4c4>)
 80038be:	4809      	ldr	r0, [pc, #36]	; (80038e4 <W25qxx_Init+0x4a8>)
 80038c0:	f002 fe6d 	bl	800659e <HAL_UART_Transmit>
	#endif

	w25qxx.Lock = 0;
 80038c4:	4b04      	ldr	r3, [pc, #16]	; (80038d8 <W25qxx_Init+0x49c>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return 1;
 80038cc:	2301      	movs	r3, #1
}	
 80038ce:	4618      	mov	r0, r3
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	200006e0 	.word	0x200006e0
 80038dc:	0800d7ac 	.word	0x0800d7ac
 80038e0:	200006a0 	.word	0x200006a0
 80038e4:	200001a8 	.word	0x200001a8
 80038e8:	0800d7c4 	.word	0x0800d7c4
 80038ec:	0800d7d8 	.word	0x0800d7d8
 80038f0:	0800d7f0 	.word	0x0800d7f0
 80038f4:	0800d804 	.word	0x0800d804
 80038f8:	0800d81c 	.word	0x0800d81c
 80038fc:	0800d830 	.word	0x0800d830
 8003900:	0800d848 	.word	0x0800d848

08003904 <W25qxx_EraseSector>:
	w25qxx.Lock = 0;
}

//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
	while(w25qxx.Lock == 1)
 800390c:	e002      	b.n	8003914 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 800390e:	2001      	movs	r0, #1
 8003910:	f000 f93c 	bl	8003b8c <HAL_Delay>
	while(w25qxx.Lock == 1)
 8003914:	4b24      	ldr	r3, [pc, #144]	; (80039a8 <W25qxx_EraseSector+0xa4>)
 8003916:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800391a:	2b01      	cmp	r3, #1
 800391c:	d0f7      	beq.n	800390e <W25qxx_EraseSector+0xa>

	w25qxx.Lock = 1;
 800391e:	4b22      	ldr	r3, [pc, #136]	; (80039a8 <W25qxx_EraseSector+0xa4>)
 8003920:	2201      	movs	r2, #1
 8003922:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	W25qxx_WaitForWriteEnd();
 8003926:	f7ff fd5d 	bl	80033e4 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 800392a:	4b1f      	ldr	r3, [pc, #124]	; (80039a8 <W25qxx_EraseSector+0xa4>)
 800392c:	691a      	ldr	r2, [r3, #16]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	fb02 f303 	mul.w	r3, r2, r3
 8003934:	607b      	str	r3, [r7, #4]

	W25qxx_WriteEnable();
 8003936:	f7ff fd3d 	bl	80033b4 <W25qxx_WriteEnable>

	W25QFLASH_CS_SELECT;
 800393a:	2200      	movs	r2, #0
 800393c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003940:	481a      	ldr	r0, [pc, #104]	; (80039ac <W25qxx_EraseSector+0xa8>)
 8003942:	f000 fff3 	bl	800492c <HAL_GPIO_WritePin>

	W25qxx_Spi(W25_SECTOR_ERASE);
 8003946:	2020      	movs	r0, #32
 8003948:	f7ff fce6 	bl	8003318 <W25qxx_Spi>

	if(w25qxx.ID >= W25Q256)
 800394c:	4b16      	ldr	r3, [pc, #88]	; (80039a8 <W25qxx_EraseSector+0xa4>)
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	2b08      	cmp	r3, #8
 8003952:	d905      	bls.n	8003960 <W25qxx_EraseSector+0x5c>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	0e1b      	lsrs	r3, r3, #24
 8003958:	b2db      	uxtb	r3, r3
 800395a:	4618      	mov	r0, r3
 800395c:	f7ff fcdc 	bl	8003318 <W25qxx_Spi>

	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	0c1b      	lsrs	r3, r3, #16
 8003964:	b2db      	uxtb	r3, r3
 8003966:	4618      	mov	r0, r3
 8003968:	f7ff fcd6 	bl	8003318 <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	0a1b      	lsrs	r3, r3, #8
 8003970:	b2db      	uxtb	r3, r3
 8003972:	4618      	mov	r0, r3
 8003974:	f7ff fcd0 	bl	8003318 <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	b2db      	uxtb	r3, r3
 800397c:	4618      	mov	r0, r3
 800397e:	f7ff fccb 	bl	8003318 <W25qxx_Spi>

	W25QFLASH_CS_UNSELECT;
 8003982:	2201      	movs	r2, #1
 8003984:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003988:	4808      	ldr	r0, [pc, #32]	; (80039ac <W25qxx_EraseSector+0xa8>)
 800398a:	f000 ffcf 	bl	800492c <HAL_GPIO_WritePin>

	W25qxx_WaitForWriteEnd();
 800398e:	f7ff fd29 	bl	80033e4 <W25qxx_WaitForWriteEnd>

	W25qxx_Delay(1);
 8003992:	2001      	movs	r0, #1
 8003994:	f000 f8fa 	bl	8003b8c <HAL_Delay>
	w25qxx.Lock = 0;
 8003998:	4b03      	ldr	r3, [pc, #12]	; (80039a8 <W25qxx_EraseSector+0xa4>)
 800399a:	2200      	movs	r2, #0
 800399c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80039a0:	bf00      	nop
 80039a2:	3708      	adds	r7, #8
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	200006e0 	.word	0x200006e0
 80039ac:	40020400 	.word	0x40020400

080039b0 <W25qxx_WritePage>:
	w25qxx.Lock = 0;
}

//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
 80039bc:	603b      	str	r3, [r7, #0]
	while(w25qxx.Lock == 1)
 80039be:	e002      	b.n	80039c6 <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 80039c0:	2001      	movs	r0, #1
 80039c2:	f000 f8e3 	bl	8003b8c <HAL_Delay>
	while(w25qxx.Lock == 1)
 80039c6:	4b38      	ldr	r3, [pc, #224]	; (8003aa8 <W25qxx_WritePage+0xf8>)
 80039c8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d0f7      	beq.n	80039c0 <W25qxx_WritePage+0x10>

	w25qxx.Lock = 1;
 80039d0:	4b35      	ldr	r3, [pc, #212]	; (8003aa8 <W25qxx_WritePage+0xf8>)
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	if(((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 80039d8:	683a      	ldr	r2, [r7, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4413      	add	r3, r2
 80039de:	4a32      	ldr	r2, [pc, #200]	; (8003aa8 <W25qxx_WritePage+0xf8>)
 80039e0:	8952      	ldrh	r2, [r2, #10]
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d802      	bhi.n	80039ec <W25qxx_WritePage+0x3c>
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d105      	bne.n	80039f8 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80039ec:	4b2e      	ldr	r3, [pc, #184]	; (8003aa8 <W25qxx_WritePage+0xf8>)
 80039ee:	895b      	ldrh	r3, [r3, #10]
 80039f0:	461a      	mov	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	603b      	str	r3, [r7, #0]

	if((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	4413      	add	r3, r2
 80039fe:	4a2a      	ldr	r2, [pc, #168]	; (8003aa8 <W25qxx_WritePage+0xf8>)
 8003a00:	8952      	ldrh	r2, [r2, #10]
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d905      	bls.n	8003a12 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8003a06:	4b28      	ldr	r3, [pc, #160]	; (8003aa8 <W25qxx_WritePage+0xf8>)
 8003a08:	895b      	ldrh	r3, [r3, #10]
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	603b      	str	r3, [r7, #0]


	W25qxx_WaitForWriteEnd();
 8003a12:	f7ff fce7 	bl	80033e4 <W25qxx_WaitForWriteEnd>

	W25qxx_WriteEnable();
 8003a16:	f7ff fccd 	bl	80033b4 <W25qxx_WriteEnable>

	W25QFLASH_CS_SELECT;
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003a20:	4822      	ldr	r0, [pc, #136]	; (8003aac <W25qxx_WritePage+0xfc>)
 8003a22:	f000 ff83 	bl	800492c <HAL_GPIO_WritePin>

	W25qxx_Spi(W25_PAGE_PROGRAMM);
 8003a26:	2002      	movs	r0, #2
 8003a28:	f7ff fc76 	bl	8003318 <W25qxx_Spi>

	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8003a2c:	4b1e      	ldr	r3, [pc, #120]	; (8003aa8 <W25qxx_WritePage+0xf8>)
 8003a2e:	895b      	ldrh	r3, [r3, #10]
 8003a30:	461a      	mov	r2, r3
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	fb02 f303 	mul.w	r3, r2, r3
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	60bb      	str	r3, [r7, #8]

	if(w25qxx.ID >= W25Q256)
 8003a3e:	4b1a      	ldr	r3, [pc, #104]	; (8003aa8 <W25qxx_WritePage+0xf8>)
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	2b08      	cmp	r3, #8
 8003a44:	d905      	bls.n	8003a52 <W25qxx_WritePage+0xa2>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	0e1b      	lsrs	r3, r3, #24
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7ff fc63 	bl	8003318 <W25qxx_Spi>

	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	0c1b      	lsrs	r3, r3, #16
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7ff fc5d 	bl	8003318 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	0a1b      	lsrs	r3, r3, #8
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7ff fc57 	bl	8003318 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7ff fc52 	bl	8003318 <W25qxx_Spi>

	HAL_SPI_Transmit(W25QXX_SPI_PTR, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	2364      	movs	r3, #100	; 0x64
 8003a7a:	68f9      	ldr	r1, [r7, #12]
 8003a7c:	480c      	ldr	r0, [pc, #48]	; (8003ab0 <W25qxx_WritePage+0x100>)
 8003a7e:	f001 feea 	bl	8005856 <HAL_SPI_Transmit>

	W25QFLASH_CS_UNSELECT;
 8003a82:	2201      	movs	r2, #1
 8003a84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003a88:	4808      	ldr	r0, [pc, #32]	; (8003aac <W25qxx_WritePage+0xfc>)
 8003a8a:	f000 ff4f 	bl	800492c <HAL_GPIO_WritePin>

	W25qxx_WaitForWriteEnd();
 8003a8e:	f7ff fca9 	bl	80033e4 <W25qxx_WaitForWriteEnd>

	W25qxx_Delay(1);
 8003a92:	2001      	movs	r0, #1
 8003a94:	f000 f87a 	bl	8003b8c <HAL_Delay>
	w25qxx.Lock = 0;
 8003a98:	4b03      	ldr	r3, [pc, #12]	; (8003aa8 <W25qxx_WritePage+0xf8>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8003aa0:	bf00      	nop
 8003aa2:	3710      	adds	r7, #16
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	200006e0 	.word	0x200006e0
 8003aac:	40020400 	.word	0x40020400
 8003ab0:	2000010c 	.word	0x2000010c

08003ab4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003ab4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003aec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ab8:	480d      	ldr	r0, [pc, #52]	; (8003af0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003aba:	490e      	ldr	r1, [pc, #56]	; (8003af4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003abc:	4a0e      	ldr	r2, [pc, #56]	; (8003af8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003abe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ac0:	e002      	b.n	8003ac8 <LoopCopyDataInit>

08003ac2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ac2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ac4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ac6:	3304      	adds	r3, #4

08003ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ac8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003aca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003acc:	d3f9      	bcc.n	8003ac2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ace:	4a0b      	ldr	r2, [pc, #44]	; (8003afc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003ad0:	4c0b      	ldr	r4, [pc, #44]	; (8003b00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003ad2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ad4:	e001      	b.n	8003ada <LoopFillZerobss>

08003ad6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ad6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ad8:	3204      	adds	r2, #4

08003ada <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ada:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003adc:	d3fb      	bcc.n	8003ad6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003ade:	f7ff fc09 	bl	80032f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003ae2:	f008 f909 	bl	800bcf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ae6:	f7fc fda3 	bl	8000630 <main>
  bx  lr    
 8003aea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003aec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003af0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003af4:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8003af8:	0800de34 	.word	0x0800de34
  ldr r2, =_sbss
 8003afc:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8003b00:	2000506c 	.word	0x2000506c

08003b04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b04:	e7fe      	b.n	8003b04 <ADC_IRQHandler>
	...

08003b08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b0c:	4b0e      	ldr	r3, [pc, #56]	; (8003b48 <HAL_Init+0x40>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a0d      	ldr	r2, [pc, #52]	; (8003b48 <HAL_Init+0x40>)
 8003b12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b18:	4b0b      	ldr	r3, [pc, #44]	; (8003b48 <HAL_Init+0x40>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a0a      	ldr	r2, [pc, #40]	; (8003b48 <HAL_Init+0x40>)
 8003b1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b24:	4b08      	ldr	r3, [pc, #32]	; (8003b48 <HAL_Init+0x40>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a07      	ldr	r2, [pc, #28]	; (8003b48 <HAL_Init+0x40>)
 8003b2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b30:	2003      	movs	r0, #3
 8003b32:	f000 f913 	bl	8003d5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b36:	2000      	movs	r0, #0
 8003b38:	f7ff faec 	bl	8003114 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b3c:	f7ff f8d8 	bl	8002cf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	40023c00 	.word	0x40023c00

08003b4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b50:	4b06      	ldr	r3, [pc, #24]	; (8003b6c <HAL_IncTick+0x20>)
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	461a      	mov	r2, r3
 8003b56:	4b06      	ldr	r3, [pc, #24]	; (8003b70 <HAL_IncTick+0x24>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	4a04      	ldr	r2, [pc, #16]	; (8003b70 <HAL_IncTick+0x24>)
 8003b5e:	6013      	str	r3, [r2, #0]
}
 8003b60:	bf00      	nop
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	20000030 	.word	0x20000030
 8003b70:	20000708 	.word	0x20000708

08003b74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b74:	b480      	push	{r7}
 8003b76:	af00      	add	r7, sp, #0
  return uwTick;
 8003b78:	4b03      	ldr	r3, [pc, #12]	; (8003b88 <HAL_GetTick+0x14>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	20000708 	.word	0x20000708

08003b8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b94:	f7ff ffee 	bl	8003b74 <HAL_GetTick>
 8003b98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba4:	d005      	beq.n	8003bb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ba6:	4b0a      	ldr	r3, [pc, #40]	; (8003bd0 <HAL_Delay+0x44>)
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	461a      	mov	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	4413      	add	r3, r2
 8003bb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003bb2:	bf00      	nop
 8003bb4:	f7ff ffde 	bl	8003b74 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d8f7      	bhi.n	8003bb4 <HAL_Delay+0x28>
  {
  }
}
 8003bc4:	bf00      	nop
 8003bc6:	bf00      	nop
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	20000030 	.word	0x20000030

08003bd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f003 0307 	and.w	r3, r3, #7
 8003be2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003be4:	4b0c      	ldr	r3, [pc, #48]	; (8003c18 <__NVIC_SetPriorityGrouping+0x44>)
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bea:	68ba      	ldr	r2, [r7, #8]
 8003bec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c06:	4a04      	ldr	r2, [pc, #16]	; (8003c18 <__NVIC_SetPriorityGrouping+0x44>)
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	60d3      	str	r3, [r2, #12]
}
 8003c0c:	bf00      	nop
 8003c0e:	3714      	adds	r7, #20
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr
 8003c18:	e000ed00 	.word	0xe000ed00

08003c1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c20:	4b04      	ldr	r3, [pc, #16]	; (8003c34 <__NVIC_GetPriorityGrouping+0x18>)
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	0a1b      	lsrs	r3, r3, #8
 8003c26:	f003 0307 	and.w	r3, r3, #7
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr
 8003c34:	e000ed00 	.word	0xe000ed00

08003c38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	4603      	mov	r3, r0
 8003c40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	db0b      	blt.n	8003c62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c4a:	79fb      	ldrb	r3, [r7, #7]
 8003c4c:	f003 021f 	and.w	r2, r3, #31
 8003c50:	4907      	ldr	r1, [pc, #28]	; (8003c70 <__NVIC_EnableIRQ+0x38>)
 8003c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c56:	095b      	lsrs	r3, r3, #5
 8003c58:	2001      	movs	r0, #1
 8003c5a:	fa00 f202 	lsl.w	r2, r0, r2
 8003c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c62:	bf00      	nop
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	e000e100 	.word	0xe000e100

08003c74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	6039      	str	r1, [r7, #0]
 8003c7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	db0a      	blt.n	8003c9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	b2da      	uxtb	r2, r3
 8003c8c:	490c      	ldr	r1, [pc, #48]	; (8003cc0 <__NVIC_SetPriority+0x4c>)
 8003c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c92:	0112      	lsls	r2, r2, #4
 8003c94:	b2d2      	uxtb	r2, r2
 8003c96:	440b      	add	r3, r1
 8003c98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c9c:	e00a      	b.n	8003cb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	b2da      	uxtb	r2, r3
 8003ca2:	4908      	ldr	r1, [pc, #32]	; (8003cc4 <__NVIC_SetPriority+0x50>)
 8003ca4:	79fb      	ldrb	r3, [r7, #7]
 8003ca6:	f003 030f 	and.w	r3, r3, #15
 8003caa:	3b04      	subs	r3, #4
 8003cac:	0112      	lsls	r2, r2, #4
 8003cae:	b2d2      	uxtb	r2, r2
 8003cb0:	440b      	add	r3, r1
 8003cb2:	761a      	strb	r2, [r3, #24]
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr
 8003cc0:	e000e100 	.word	0xe000e100
 8003cc4:	e000ed00 	.word	0xe000ed00

08003cc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b089      	sub	sp, #36	; 0x24
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f003 0307 	and.w	r3, r3, #7
 8003cda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	f1c3 0307 	rsb	r3, r3, #7
 8003ce2:	2b04      	cmp	r3, #4
 8003ce4:	bf28      	it	cs
 8003ce6:	2304      	movcs	r3, #4
 8003ce8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	3304      	adds	r3, #4
 8003cee:	2b06      	cmp	r3, #6
 8003cf0:	d902      	bls.n	8003cf8 <NVIC_EncodePriority+0x30>
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	3b03      	subs	r3, #3
 8003cf6:	e000      	b.n	8003cfa <NVIC_EncodePriority+0x32>
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	fa02 f303 	lsl.w	r3, r2, r3
 8003d06:	43da      	mvns	r2, r3
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	401a      	ands	r2, r3
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d10:	f04f 31ff 	mov.w	r1, #4294967295
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	fa01 f303 	lsl.w	r3, r1, r3
 8003d1a:	43d9      	mvns	r1, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d20:	4313      	orrs	r3, r2
         );
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3724      	adds	r7, #36	; 0x24
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
	...

08003d30 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003d34:	f3bf 8f4f 	dsb	sy
}
 8003d38:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003d3a:	4b06      	ldr	r3, [pc, #24]	; (8003d54 <__NVIC_SystemReset+0x24>)
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003d42:	4904      	ldr	r1, [pc, #16]	; (8003d54 <__NVIC_SystemReset+0x24>)
 8003d44:	4b04      	ldr	r3, [pc, #16]	; (8003d58 <__NVIC_SystemReset+0x28>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003d4a:	f3bf 8f4f 	dsb	sy
}
 8003d4e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003d50:	bf00      	nop
 8003d52:	e7fd      	b.n	8003d50 <__NVIC_SystemReset+0x20>
 8003d54:	e000ed00 	.word	0xe000ed00
 8003d58:	05fa0004 	.word	0x05fa0004

08003d5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f7ff ff35 	bl	8003bd4 <__NVIC_SetPriorityGrouping>
}
 8003d6a:	bf00      	nop
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b086      	sub	sp, #24
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	4603      	mov	r3, r0
 8003d7a:	60b9      	str	r1, [r7, #8]
 8003d7c:	607a      	str	r2, [r7, #4]
 8003d7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d80:	2300      	movs	r3, #0
 8003d82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d84:	f7ff ff4a 	bl	8003c1c <__NVIC_GetPriorityGrouping>
 8003d88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	68b9      	ldr	r1, [r7, #8]
 8003d8e:	6978      	ldr	r0, [r7, #20]
 8003d90:	f7ff ff9a 	bl	8003cc8 <NVIC_EncodePriority>
 8003d94:	4602      	mov	r2, r0
 8003d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d9a:	4611      	mov	r1, r2
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7ff ff69 	bl	8003c74 <__NVIC_SetPriority>
}
 8003da2:	bf00      	nop
 8003da4:	3718      	adds	r7, #24
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b082      	sub	sp, #8
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	4603      	mov	r3, r0
 8003db2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7ff ff3d 	bl	8003c38 <__NVIC_EnableIRQ>
}
 8003dbe:	bf00      	nop
 8003dc0:	3708      	adds	r7, #8
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8003dca:	f7ff ffb1 	bl	8003d30 <__NVIC_SystemReset>
	...

08003dd0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003ddc:	f7ff feca 	bl	8003b74 <HAL_GetTick>
 8003de0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d101      	bne.n	8003dec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e099      	b.n	8003f20 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2202      	movs	r2, #2
 8003df0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f022 0201 	bic.w	r2, r2, #1
 8003e0a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e0c:	e00f      	b.n	8003e2e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e0e:	f7ff feb1 	bl	8003b74 <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	2b05      	cmp	r3, #5
 8003e1a:	d908      	bls.n	8003e2e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2220      	movs	r2, #32
 8003e20:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2203      	movs	r2, #3
 8003e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e078      	b.n	8003f20 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0301 	and.w	r3, r3, #1
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d1e8      	bne.n	8003e0e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	4b38      	ldr	r3, [pc, #224]	; (8003f28 <HAL_DMA_Init+0x158>)
 8003e48:	4013      	ands	r3, r2
 8003e4a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685a      	ldr	r2, [r3, #4]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	699b      	ldr	r3, [r3, #24]
 8003e6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a1b      	ldr	r3, [r3, #32]
 8003e78:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e84:	2b04      	cmp	r3, #4
 8003e86:	d107      	bne.n	8003e98 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e90:	4313      	orrs	r3, r2
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	f023 0307 	bic.w	r3, r3, #7
 8003eae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebe:	2b04      	cmp	r3, #4
 8003ec0:	d117      	bne.n	8003ef2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec6:	697a      	ldr	r2, [r7, #20]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00e      	beq.n	8003ef2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f000 fb01 	bl	80044dc <DMA_CheckFifoParam>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d008      	beq.n	8003ef2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2240      	movs	r2, #64	; 0x40
 8003ee4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e016      	b.n	8003f20 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	697a      	ldr	r2, [r7, #20]
 8003ef8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 fab8 	bl	8004470 <DMA_CalcBaseAndBitshift>
 8003f00:	4603      	mov	r3, r0
 8003f02:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f08:	223f      	movs	r2, #63	; 0x3f
 8003f0a:	409a      	lsls	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3718      	adds	r7, #24
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	f010803f 	.word	0xf010803f

08003f2c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
 8003f38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f42:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d101      	bne.n	8003f52 <HAL_DMA_Start_IT+0x26>
 8003f4e:	2302      	movs	r3, #2
 8003f50:	e040      	b.n	8003fd4 <HAL_DMA_Start_IT+0xa8>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2201      	movs	r2, #1
 8003f56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d12f      	bne.n	8003fc6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2202      	movs	r2, #2
 8003f6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	68b9      	ldr	r1, [r7, #8]
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f000 fa4a 	bl	8004414 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f84:	223f      	movs	r2, #63	; 0x3f
 8003f86:	409a      	lsls	r2, r3
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f042 0216 	orr.w	r2, r2, #22
 8003f9a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d007      	beq.n	8003fb4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f042 0208 	orr.w	r2, r2, #8
 8003fb2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f042 0201 	orr.w	r2, r2, #1
 8003fc2:	601a      	str	r2, [r3, #0]
 8003fc4:	e005      	b.n	8003fd2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003fce:	2302      	movs	r3, #2
 8003fd0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003fd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3718      	adds	r7, #24
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003fea:	f7ff fdc3 	bl	8003b74 <HAL_GetTick>
 8003fee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d008      	beq.n	800400e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2280      	movs	r2, #128	; 0x80
 8004000:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e052      	b.n	80040b4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f022 0216 	bic.w	r2, r2, #22
 800401c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	695a      	ldr	r2, [r3, #20]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800402c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004032:	2b00      	cmp	r3, #0
 8004034:	d103      	bne.n	800403e <HAL_DMA_Abort+0x62>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800403a:	2b00      	cmp	r3, #0
 800403c:	d007      	beq.n	800404e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f022 0208 	bic.w	r2, r2, #8
 800404c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f022 0201 	bic.w	r2, r2, #1
 800405c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800405e:	e013      	b.n	8004088 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004060:	f7ff fd88 	bl	8003b74 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b05      	cmp	r3, #5
 800406c:	d90c      	bls.n	8004088 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2220      	movs	r2, #32
 8004072:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2203      	movs	r2, #3
 8004078:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e015      	b.n	80040b4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1e4      	bne.n	8004060 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800409a:	223f      	movs	r2, #63	; 0x3f
 800409c:	409a      	lsls	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2201      	movs	r2, #1
 80040a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80040b2:	2300      	movs	r3, #0
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3710      	adds	r7, #16
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d004      	beq.n	80040da <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2280      	movs	r2, #128	; 0x80
 80040d4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e00c      	b.n	80040f4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2205      	movs	r2, #5
 80040de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f022 0201 	bic.w	r2, r2, #1
 80040f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b086      	sub	sp, #24
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004108:	2300      	movs	r3, #0
 800410a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800410c:	4b8e      	ldr	r3, [pc, #568]	; (8004348 <HAL_DMA_IRQHandler+0x248>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a8e      	ldr	r2, [pc, #568]	; (800434c <HAL_DMA_IRQHandler+0x24c>)
 8004112:	fba2 2303 	umull	r2, r3, r2, r3
 8004116:	0a9b      	lsrs	r3, r3, #10
 8004118:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800411e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800412a:	2208      	movs	r2, #8
 800412c:	409a      	lsls	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	4013      	ands	r3, r2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d01a      	beq.n	800416c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0304 	and.w	r3, r3, #4
 8004140:	2b00      	cmp	r3, #0
 8004142:	d013      	beq.n	800416c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f022 0204 	bic.w	r2, r2, #4
 8004152:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004158:	2208      	movs	r2, #8
 800415a:	409a      	lsls	r2, r3
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004164:	f043 0201 	orr.w	r2, r3, #1
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004170:	2201      	movs	r2, #1
 8004172:	409a      	lsls	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	4013      	ands	r3, r2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d012      	beq.n	80041a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00b      	beq.n	80041a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800418e:	2201      	movs	r2, #1
 8004190:	409a      	lsls	r2, r3
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800419a:	f043 0202 	orr.w	r2, r3, #2
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041a6:	2204      	movs	r2, #4
 80041a8:	409a      	lsls	r2, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	4013      	ands	r3, r2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d012      	beq.n	80041d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0302 	and.w	r3, r3, #2
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00b      	beq.n	80041d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041c4:	2204      	movs	r2, #4
 80041c6:	409a      	lsls	r2, r3
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d0:	f043 0204 	orr.w	r2, r3, #4
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041dc:	2210      	movs	r2, #16
 80041de:	409a      	lsls	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	4013      	ands	r3, r2
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d043      	beq.n	8004270 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0308 	and.w	r3, r3, #8
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d03c      	beq.n	8004270 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041fa:	2210      	movs	r2, #16
 80041fc:	409a      	lsls	r2, r3
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d018      	beq.n	8004242 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d108      	bne.n	8004230 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004222:	2b00      	cmp	r3, #0
 8004224:	d024      	beq.n	8004270 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	4798      	blx	r3
 800422e:	e01f      	b.n	8004270 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004234:	2b00      	cmp	r3, #0
 8004236:	d01b      	beq.n	8004270 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	4798      	blx	r3
 8004240:	e016      	b.n	8004270 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800424c:	2b00      	cmp	r3, #0
 800424e:	d107      	bne.n	8004260 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f022 0208 	bic.w	r2, r2, #8
 800425e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004264:	2b00      	cmp	r3, #0
 8004266:	d003      	beq.n	8004270 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004274:	2220      	movs	r2, #32
 8004276:	409a      	lsls	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	4013      	ands	r3, r2
 800427c:	2b00      	cmp	r3, #0
 800427e:	f000 808f 	beq.w	80043a0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0310 	and.w	r3, r3, #16
 800428c:	2b00      	cmp	r3, #0
 800428e:	f000 8087 	beq.w	80043a0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004296:	2220      	movs	r2, #32
 8004298:	409a      	lsls	r2, r3
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b05      	cmp	r3, #5
 80042a8:	d136      	bne.n	8004318 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f022 0216 	bic.w	r2, r2, #22
 80042b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	695a      	ldr	r2, [r3, #20]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d103      	bne.n	80042da <HAL_DMA_IRQHandler+0x1da>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d007      	beq.n	80042ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f022 0208 	bic.w	r2, r2, #8
 80042e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ee:	223f      	movs	r2, #63	; 0x3f
 80042f0:	409a      	lsls	r2, r3
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800430a:	2b00      	cmp	r3, #0
 800430c:	d07e      	beq.n	800440c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	4798      	blx	r3
        }
        return;
 8004316:	e079      	b.n	800440c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d01d      	beq.n	8004362 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d10d      	bne.n	8004350 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004338:	2b00      	cmp	r3, #0
 800433a:	d031      	beq.n	80043a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	4798      	blx	r3
 8004344:	e02c      	b.n	80043a0 <HAL_DMA_IRQHandler+0x2a0>
 8004346:	bf00      	nop
 8004348:	20000028 	.word	0x20000028
 800434c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004354:	2b00      	cmp	r3, #0
 8004356:	d023      	beq.n	80043a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	4798      	blx	r3
 8004360:	e01e      	b.n	80043a0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800436c:	2b00      	cmp	r3, #0
 800436e:	d10f      	bne.n	8004390 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f022 0210 	bic.w	r2, r2, #16
 800437e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004394:	2b00      	cmp	r3, #0
 8004396:	d003      	beq.n	80043a0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d032      	beq.n	800440e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ac:	f003 0301 	and.w	r3, r3, #1
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d022      	beq.n	80043fa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2205      	movs	r2, #5
 80043b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f022 0201 	bic.w	r2, r2, #1
 80043ca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	3301      	adds	r3, #1
 80043d0:	60bb      	str	r3, [r7, #8]
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d307      	bcc.n	80043e8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1f2      	bne.n	80043cc <HAL_DMA_IRQHandler+0x2cc>
 80043e6:	e000      	b.n	80043ea <HAL_DMA_IRQHandler+0x2ea>
          break;
 80043e8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2201      	movs	r2, #1
 80043ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d005      	beq.n	800440e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	4798      	blx	r3
 800440a:	e000      	b.n	800440e <HAL_DMA_IRQHandler+0x30e>
        return;
 800440c:	bf00      	nop
    }
  }
}
 800440e:	3718      	adds	r7, #24
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004414:	b480      	push	{r7}
 8004416:	b085      	sub	sp, #20
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
 8004420:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004430:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	683a      	ldr	r2, [r7, #0]
 8004438:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	2b40      	cmp	r3, #64	; 0x40
 8004440:	d108      	bne.n	8004454 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68ba      	ldr	r2, [r7, #8]
 8004450:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004452:	e007      	b.n	8004464 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68ba      	ldr	r2, [r7, #8]
 800445a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	60da      	str	r2, [r3, #12]
}
 8004464:	bf00      	nop
 8004466:	3714      	adds	r7, #20
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004470:	b480      	push	{r7}
 8004472:	b085      	sub	sp, #20
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	b2db      	uxtb	r3, r3
 800447e:	3b10      	subs	r3, #16
 8004480:	4a14      	ldr	r2, [pc, #80]	; (80044d4 <DMA_CalcBaseAndBitshift+0x64>)
 8004482:	fba2 2303 	umull	r2, r3, r2, r3
 8004486:	091b      	lsrs	r3, r3, #4
 8004488:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800448a:	4a13      	ldr	r2, [pc, #76]	; (80044d8 <DMA_CalcBaseAndBitshift+0x68>)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	4413      	add	r3, r2
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	461a      	mov	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2b03      	cmp	r3, #3
 800449c:	d909      	bls.n	80044b2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80044a6:	f023 0303 	bic.w	r3, r3, #3
 80044aa:	1d1a      	adds	r2, r3, #4
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	659a      	str	r2, [r3, #88]	; 0x58
 80044b0:	e007      	b.n	80044c2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80044ba:	f023 0303 	bic.w	r3, r3, #3
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3714      	adds	r7, #20
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	aaaaaaab 	.word	0xaaaaaaab
 80044d8:	0800dc6c 	.word	0x0800dc6c

080044dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80044dc:	b480      	push	{r7}
 80044de:	b085      	sub	sp, #20
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044e4:	2300      	movs	r3, #0
 80044e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d11f      	bne.n	8004536 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	2b03      	cmp	r3, #3
 80044fa:	d856      	bhi.n	80045aa <DMA_CheckFifoParam+0xce>
 80044fc:	a201      	add	r2, pc, #4	; (adr r2, 8004504 <DMA_CheckFifoParam+0x28>)
 80044fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004502:	bf00      	nop
 8004504:	08004515 	.word	0x08004515
 8004508:	08004527 	.word	0x08004527
 800450c:	08004515 	.word	0x08004515
 8004510:	080045ab 	.word	0x080045ab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004518:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d046      	beq.n	80045ae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004524:	e043      	b.n	80045ae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800452e:	d140      	bne.n	80045b2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004534:	e03d      	b.n	80045b2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800453e:	d121      	bne.n	8004584 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	2b03      	cmp	r3, #3
 8004544:	d837      	bhi.n	80045b6 <DMA_CheckFifoParam+0xda>
 8004546:	a201      	add	r2, pc, #4	; (adr r2, 800454c <DMA_CheckFifoParam+0x70>)
 8004548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800454c:	0800455d 	.word	0x0800455d
 8004550:	08004563 	.word	0x08004563
 8004554:	0800455d 	.word	0x0800455d
 8004558:	08004575 	.word	0x08004575
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	73fb      	strb	r3, [r7, #15]
      break;
 8004560:	e030      	b.n	80045c4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004566:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d025      	beq.n	80045ba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004572:	e022      	b.n	80045ba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004578:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800457c:	d11f      	bne.n	80045be <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004582:	e01c      	b.n	80045be <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	2b02      	cmp	r3, #2
 8004588:	d903      	bls.n	8004592 <DMA_CheckFifoParam+0xb6>
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	2b03      	cmp	r3, #3
 800458e:	d003      	beq.n	8004598 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004590:	e018      	b.n	80045c4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	73fb      	strb	r3, [r7, #15]
      break;
 8004596:	e015      	b.n	80045c4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00e      	beq.n	80045c2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	73fb      	strb	r3, [r7, #15]
      break;
 80045a8:	e00b      	b.n	80045c2 <DMA_CheckFifoParam+0xe6>
      break;
 80045aa:	bf00      	nop
 80045ac:	e00a      	b.n	80045c4 <DMA_CheckFifoParam+0xe8>
      break;
 80045ae:	bf00      	nop
 80045b0:	e008      	b.n	80045c4 <DMA_CheckFifoParam+0xe8>
      break;
 80045b2:	bf00      	nop
 80045b4:	e006      	b.n	80045c4 <DMA_CheckFifoParam+0xe8>
      break;
 80045b6:	bf00      	nop
 80045b8:	e004      	b.n	80045c4 <DMA_CheckFifoParam+0xe8>
      break;
 80045ba:	bf00      	nop
 80045bc:	e002      	b.n	80045c4 <DMA_CheckFifoParam+0xe8>
      break;   
 80045be:	bf00      	nop
 80045c0:	e000      	b.n	80045c4 <DMA_CheckFifoParam+0xe8>
      break;
 80045c2:	bf00      	nop
    }
  } 
  
  return status; 
 80045c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3714      	adds	r7, #20
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop

080045d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b089      	sub	sp, #36	; 0x24
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80045de:	2300      	movs	r3, #0
 80045e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80045e2:	2300      	movs	r3, #0
 80045e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80045e6:	2300      	movs	r3, #0
 80045e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045ea:	2300      	movs	r3, #0
 80045ec:	61fb      	str	r3, [r7, #28]
 80045ee:	e165      	b.n	80048bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80045f0:	2201      	movs	r2, #1
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	fa02 f303 	lsl.w	r3, r2, r3
 80045f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	4013      	ands	r3, r2
 8004602:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	429a      	cmp	r2, r3
 800460a:	f040 8154 	bne.w	80048b6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f003 0303 	and.w	r3, r3, #3
 8004616:	2b01      	cmp	r3, #1
 8004618:	d005      	beq.n	8004626 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004622:	2b02      	cmp	r3, #2
 8004624:	d130      	bne.n	8004688 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	005b      	lsls	r3, r3, #1
 8004630:	2203      	movs	r2, #3
 8004632:	fa02 f303 	lsl.w	r3, r2, r3
 8004636:	43db      	mvns	r3, r3
 8004638:	69ba      	ldr	r2, [r7, #24]
 800463a:	4013      	ands	r3, r2
 800463c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	68da      	ldr	r2, [r3, #12]
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	005b      	lsls	r3, r3, #1
 8004646:	fa02 f303 	lsl.w	r3, r2, r3
 800464a:	69ba      	ldr	r2, [r7, #24]
 800464c:	4313      	orrs	r3, r2
 800464e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	69ba      	ldr	r2, [r7, #24]
 8004654:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800465c:	2201      	movs	r2, #1
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	fa02 f303 	lsl.w	r3, r2, r3
 8004664:	43db      	mvns	r3, r3
 8004666:	69ba      	ldr	r2, [r7, #24]
 8004668:	4013      	ands	r3, r2
 800466a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	091b      	lsrs	r3, r3, #4
 8004672:	f003 0201 	and.w	r2, r3, #1
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	fa02 f303 	lsl.w	r3, r2, r3
 800467c:	69ba      	ldr	r2, [r7, #24]
 800467e:	4313      	orrs	r3, r2
 8004680:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	69ba      	ldr	r2, [r7, #24]
 8004686:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f003 0303 	and.w	r3, r3, #3
 8004690:	2b03      	cmp	r3, #3
 8004692:	d017      	beq.n	80046c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	005b      	lsls	r3, r3, #1
 800469e:	2203      	movs	r2, #3
 80046a0:	fa02 f303 	lsl.w	r3, r2, r3
 80046a4:	43db      	mvns	r3, r3
 80046a6:	69ba      	ldr	r2, [r7, #24]
 80046a8:	4013      	ands	r3, r2
 80046aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	689a      	ldr	r2, [r3, #8]
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	005b      	lsls	r3, r3, #1
 80046b4:	fa02 f303 	lsl.w	r3, r2, r3
 80046b8:	69ba      	ldr	r2, [r7, #24]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	69ba      	ldr	r2, [r7, #24]
 80046c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f003 0303 	and.w	r3, r3, #3
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d123      	bne.n	8004718 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	08da      	lsrs	r2, r3, #3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	3208      	adds	r2, #8
 80046d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	f003 0307 	and.w	r3, r3, #7
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	220f      	movs	r2, #15
 80046e8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ec:	43db      	mvns	r3, r3
 80046ee:	69ba      	ldr	r2, [r7, #24]
 80046f0:	4013      	ands	r3, r2
 80046f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	691a      	ldr	r2, [r3, #16]
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	f003 0307 	and.w	r3, r3, #7
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	fa02 f303 	lsl.w	r3, r2, r3
 8004704:	69ba      	ldr	r2, [r7, #24]
 8004706:	4313      	orrs	r3, r2
 8004708:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	08da      	lsrs	r2, r3, #3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	3208      	adds	r2, #8
 8004712:	69b9      	ldr	r1, [r7, #24]
 8004714:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	005b      	lsls	r3, r3, #1
 8004722:	2203      	movs	r2, #3
 8004724:	fa02 f303 	lsl.w	r3, r2, r3
 8004728:	43db      	mvns	r3, r3
 800472a:	69ba      	ldr	r2, [r7, #24]
 800472c:	4013      	ands	r3, r2
 800472e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f003 0203 	and.w	r2, r3, #3
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	005b      	lsls	r3, r3, #1
 800473c:	fa02 f303 	lsl.w	r3, r2, r3
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	4313      	orrs	r3, r2
 8004744:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	69ba      	ldr	r2, [r7, #24]
 800474a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004754:	2b00      	cmp	r3, #0
 8004756:	f000 80ae 	beq.w	80048b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800475a:	2300      	movs	r3, #0
 800475c:	60fb      	str	r3, [r7, #12]
 800475e:	4b5d      	ldr	r3, [pc, #372]	; (80048d4 <HAL_GPIO_Init+0x300>)
 8004760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004762:	4a5c      	ldr	r2, [pc, #368]	; (80048d4 <HAL_GPIO_Init+0x300>)
 8004764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004768:	6453      	str	r3, [r2, #68]	; 0x44
 800476a:	4b5a      	ldr	r3, [pc, #360]	; (80048d4 <HAL_GPIO_Init+0x300>)
 800476c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800476e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004772:	60fb      	str	r3, [r7, #12]
 8004774:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004776:	4a58      	ldr	r2, [pc, #352]	; (80048d8 <HAL_GPIO_Init+0x304>)
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	089b      	lsrs	r3, r3, #2
 800477c:	3302      	adds	r3, #2
 800477e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004782:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	f003 0303 	and.w	r3, r3, #3
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	220f      	movs	r2, #15
 800478e:	fa02 f303 	lsl.w	r3, r2, r3
 8004792:	43db      	mvns	r3, r3
 8004794:	69ba      	ldr	r2, [r7, #24]
 8004796:	4013      	ands	r3, r2
 8004798:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a4f      	ldr	r2, [pc, #316]	; (80048dc <HAL_GPIO_Init+0x308>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d025      	beq.n	80047ee <HAL_GPIO_Init+0x21a>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a4e      	ldr	r2, [pc, #312]	; (80048e0 <HAL_GPIO_Init+0x30c>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d01f      	beq.n	80047ea <HAL_GPIO_Init+0x216>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a4d      	ldr	r2, [pc, #308]	; (80048e4 <HAL_GPIO_Init+0x310>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d019      	beq.n	80047e6 <HAL_GPIO_Init+0x212>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a4c      	ldr	r2, [pc, #304]	; (80048e8 <HAL_GPIO_Init+0x314>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d013      	beq.n	80047e2 <HAL_GPIO_Init+0x20e>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a4b      	ldr	r2, [pc, #300]	; (80048ec <HAL_GPIO_Init+0x318>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d00d      	beq.n	80047de <HAL_GPIO_Init+0x20a>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a4a      	ldr	r2, [pc, #296]	; (80048f0 <HAL_GPIO_Init+0x31c>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d007      	beq.n	80047da <HAL_GPIO_Init+0x206>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a49      	ldr	r2, [pc, #292]	; (80048f4 <HAL_GPIO_Init+0x320>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d101      	bne.n	80047d6 <HAL_GPIO_Init+0x202>
 80047d2:	2306      	movs	r3, #6
 80047d4:	e00c      	b.n	80047f0 <HAL_GPIO_Init+0x21c>
 80047d6:	2307      	movs	r3, #7
 80047d8:	e00a      	b.n	80047f0 <HAL_GPIO_Init+0x21c>
 80047da:	2305      	movs	r3, #5
 80047dc:	e008      	b.n	80047f0 <HAL_GPIO_Init+0x21c>
 80047de:	2304      	movs	r3, #4
 80047e0:	e006      	b.n	80047f0 <HAL_GPIO_Init+0x21c>
 80047e2:	2303      	movs	r3, #3
 80047e4:	e004      	b.n	80047f0 <HAL_GPIO_Init+0x21c>
 80047e6:	2302      	movs	r3, #2
 80047e8:	e002      	b.n	80047f0 <HAL_GPIO_Init+0x21c>
 80047ea:	2301      	movs	r3, #1
 80047ec:	e000      	b.n	80047f0 <HAL_GPIO_Init+0x21c>
 80047ee:	2300      	movs	r3, #0
 80047f0:	69fa      	ldr	r2, [r7, #28]
 80047f2:	f002 0203 	and.w	r2, r2, #3
 80047f6:	0092      	lsls	r2, r2, #2
 80047f8:	4093      	lsls	r3, r2
 80047fa:	69ba      	ldr	r2, [r7, #24]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004800:	4935      	ldr	r1, [pc, #212]	; (80048d8 <HAL_GPIO_Init+0x304>)
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	089b      	lsrs	r3, r3, #2
 8004806:	3302      	adds	r3, #2
 8004808:	69ba      	ldr	r2, [r7, #24]
 800480a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800480e:	4b3a      	ldr	r3, [pc, #232]	; (80048f8 <HAL_GPIO_Init+0x324>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	43db      	mvns	r3, r3
 8004818:	69ba      	ldr	r2, [r7, #24]
 800481a:	4013      	ands	r3, r2
 800481c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d003      	beq.n	8004832 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800482a:	69ba      	ldr	r2, [r7, #24]
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	4313      	orrs	r3, r2
 8004830:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004832:	4a31      	ldr	r2, [pc, #196]	; (80048f8 <HAL_GPIO_Init+0x324>)
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004838:	4b2f      	ldr	r3, [pc, #188]	; (80048f8 <HAL_GPIO_Init+0x324>)
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	43db      	mvns	r3, r3
 8004842:	69ba      	ldr	r2, [r7, #24]
 8004844:	4013      	ands	r3, r2
 8004846:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d003      	beq.n	800485c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004854:	69ba      	ldr	r2, [r7, #24]
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	4313      	orrs	r3, r2
 800485a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800485c:	4a26      	ldr	r2, [pc, #152]	; (80048f8 <HAL_GPIO_Init+0x324>)
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004862:	4b25      	ldr	r3, [pc, #148]	; (80048f8 <HAL_GPIO_Init+0x324>)
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	43db      	mvns	r3, r3
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	4013      	ands	r3, r2
 8004870:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d003      	beq.n	8004886 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800487e:	69ba      	ldr	r2, [r7, #24]
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	4313      	orrs	r3, r2
 8004884:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004886:	4a1c      	ldr	r2, [pc, #112]	; (80048f8 <HAL_GPIO_Init+0x324>)
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800488c:	4b1a      	ldr	r3, [pc, #104]	; (80048f8 <HAL_GPIO_Init+0x324>)
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	43db      	mvns	r3, r3
 8004896:	69ba      	ldr	r2, [r7, #24]
 8004898:	4013      	ands	r3, r2
 800489a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d003      	beq.n	80048b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80048a8:	69ba      	ldr	r2, [r7, #24]
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80048b0:	4a11      	ldr	r2, [pc, #68]	; (80048f8 <HAL_GPIO_Init+0x324>)
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	3301      	adds	r3, #1
 80048ba:	61fb      	str	r3, [r7, #28]
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	2b0f      	cmp	r3, #15
 80048c0:	f67f ae96 	bls.w	80045f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80048c4:	bf00      	nop
 80048c6:	bf00      	nop
 80048c8:	3724      	adds	r7, #36	; 0x24
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	40023800 	.word	0x40023800
 80048d8:	40013800 	.word	0x40013800
 80048dc:	40020000 	.word	0x40020000
 80048e0:	40020400 	.word	0x40020400
 80048e4:	40020800 	.word	0x40020800
 80048e8:	40020c00 	.word	0x40020c00
 80048ec:	40021000 	.word	0x40021000
 80048f0:	40021400 	.word	0x40021400
 80048f4:	40021800 	.word	0x40021800
 80048f8:	40013c00 	.word	0x40013c00

080048fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	460b      	mov	r3, r1
 8004906:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	691a      	ldr	r2, [r3, #16]
 800490c:	887b      	ldrh	r3, [r7, #2]
 800490e:	4013      	ands	r3, r2
 8004910:	2b00      	cmp	r3, #0
 8004912:	d002      	beq.n	800491a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004914:	2301      	movs	r3, #1
 8004916:	73fb      	strb	r3, [r7, #15]
 8004918:	e001      	b.n	800491e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800491a:	2300      	movs	r3, #0
 800491c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800491e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004920:	4618      	mov	r0, r3
 8004922:	3714      	adds	r7, #20
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	460b      	mov	r3, r1
 8004936:	807b      	strh	r3, [r7, #2]
 8004938:	4613      	mov	r3, r2
 800493a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800493c:	787b      	ldrb	r3, [r7, #1]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d003      	beq.n	800494a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004942:	887a      	ldrh	r2, [r7, #2]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004948:	e003      	b.n	8004952 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800494a:	887b      	ldrh	r3, [r7, #2]
 800494c:	041a      	lsls	r2, r3, #16
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	619a      	str	r2, [r3, #24]
}
 8004952:	bf00      	nop
 8004954:	370c      	adds	r7, #12
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr

0800495e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800495e:	b480      	push	{r7}
 8004960:	b085      	sub	sp, #20
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
 8004966:	460b      	mov	r3, r1
 8004968:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004970:	887a      	ldrh	r2, [r7, #2]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	4013      	ands	r3, r2
 8004976:	041a      	lsls	r2, r3, #16
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	43d9      	mvns	r1, r3
 800497c:	887b      	ldrh	r3, [r7, #2]
 800497e:	400b      	ands	r3, r1
 8004980:	431a      	orrs	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	619a      	str	r2, [r3, #24]
}
 8004986:	bf00      	nop
 8004988:	3714      	adds	r7, #20
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
	...

08004994 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d101      	bne.n	80049a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e12b      	b.n	8004bfe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d106      	bne.n	80049c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f7fe f9c4 	bl	8002d48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2224      	movs	r2, #36	; 0x24
 80049c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f022 0201 	bic.w	r2, r2, #1
 80049d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80049f8:	f000 fa02 	bl	8004e00 <HAL_RCC_GetPCLK1Freq>
 80049fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	4a81      	ldr	r2, [pc, #516]	; (8004c08 <HAL_I2C_Init+0x274>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d807      	bhi.n	8004a18 <HAL_I2C_Init+0x84>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	4a80      	ldr	r2, [pc, #512]	; (8004c0c <HAL_I2C_Init+0x278>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	bf94      	ite	ls
 8004a10:	2301      	movls	r3, #1
 8004a12:	2300      	movhi	r3, #0
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	e006      	b.n	8004a26 <HAL_I2C_Init+0x92>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	4a7d      	ldr	r2, [pc, #500]	; (8004c10 <HAL_I2C_Init+0x27c>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	bf94      	ite	ls
 8004a20:	2301      	movls	r3, #1
 8004a22:	2300      	movhi	r3, #0
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d001      	beq.n	8004a2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e0e7      	b.n	8004bfe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	4a78      	ldr	r2, [pc, #480]	; (8004c14 <HAL_I2C_Init+0x280>)
 8004a32:	fba2 2303 	umull	r2, r3, r2, r3
 8004a36:	0c9b      	lsrs	r3, r3, #18
 8004a38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68ba      	ldr	r2, [r7, #8]
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	6a1b      	ldr	r3, [r3, #32]
 8004a54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	4a6a      	ldr	r2, [pc, #424]	; (8004c08 <HAL_I2C_Init+0x274>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d802      	bhi.n	8004a68 <HAL_I2C_Init+0xd4>
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	3301      	adds	r3, #1
 8004a66:	e009      	b.n	8004a7c <HAL_I2C_Init+0xe8>
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004a6e:	fb02 f303 	mul.w	r3, r2, r3
 8004a72:	4a69      	ldr	r2, [pc, #420]	; (8004c18 <HAL_I2C_Init+0x284>)
 8004a74:	fba2 2303 	umull	r2, r3, r2, r3
 8004a78:	099b      	lsrs	r3, r3, #6
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	6812      	ldr	r2, [r2, #0]
 8004a80:	430b      	orrs	r3, r1
 8004a82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	69db      	ldr	r3, [r3, #28]
 8004a8a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004a8e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	495c      	ldr	r1, [pc, #368]	; (8004c08 <HAL_I2C_Init+0x274>)
 8004a98:	428b      	cmp	r3, r1
 8004a9a:	d819      	bhi.n	8004ad0 <HAL_I2C_Init+0x13c>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	1e59      	subs	r1, r3, #1
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	005b      	lsls	r3, r3, #1
 8004aa6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004aaa:	1c59      	adds	r1, r3, #1
 8004aac:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004ab0:	400b      	ands	r3, r1
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00a      	beq.n	8004acc <HAL_I2C_Init+0x138>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	1e59      	subs	r1, r3, #1
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	005b      	lsls	r3, r3, #1
 8004ac0:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004aca:	e051      	b.n	8004b70 <HAL_I2C_Init+0x1dc>
 8004acc:	2304      	movs	r3, #4
 8004ace:	e04f      	b.n	8004b70 <HAL_I2C_Init+0x1dc>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d111      	bne.n	8004afc <HAL_I2C_Init+0x168>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	1e58      	subs	r0, r3, #1
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6859      	ldr	r1, [r3, #4]
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	005b      	lsls	r3, r3, #1
 8004ae4:	440b      	add	r3, r1
 8004ae6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004aea:	3301      	adds	r3, #1
 8004aec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	bf0c      	ite	eq
 8004af4:	2301      	moveq	r3, #1
 8004af6:	2300      	movne	r3, #0
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	e012      	b.n	8004b22 <HAL_I2C_Init+0x18e>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	1e58      	subs	r0, r3, #1
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6859      	ldr	r1, [r3, #4]
 8004b04:	460b      	mov	r3, r1
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	440b      	add	r3, r1
 8004b0a:	0099      	lsls	r1, r3, #2
 8004b0c:	440b      	add	r3, r1
 8004b0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b12:	3301      	adds	r3, #1
 8004b14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	bf0c      	ite	eq
 8004b1c:	2301      	moveq	r3, #1
 8004b1e:	2300      	movne	r3, #0
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <HAL_I2C_Init+0x196>
 8004b26:	2301      	movs	r3, #1
 8004b28:	e022      	b.n	8004b70 <HAL_I2C_Init+0x1dc>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d10e      	bne.n	8004b50 <HAL_I2C_Init+0x1bc>
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	1e58      	subs	r0, r3, #1
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6859      	ldr	r1, [r3, #4]
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	005b      	lsls	r3, r3, #1
 8004b3e:	440b      	add	r3, r1
 8004b40:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b44:	3301      	adds	r3, #1
 8004b46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b4e:	e00f      	b.n	8004b70 <HAL_I2C_Init+0x1dc>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	1e58      	subs	r0, r3, #1
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6859      	ldr	r1, [r3, #4]
 8004b58:	460b      	mov	r3, r1
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	440b      	add	r3, r1
 8004b5e:	0099      	lsls	r1, r3, #2
 8004b60:	440b      	add	r3, r1
 8004b62:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b66:	3301      	adds	r3, #1
 8004b68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b70:	6879      	ldr	r1, [r7, #4]
 8004b72:	6809      	ldr	r1, [r1, #0]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	69da      	ldr	r2, [r3, #28]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a1b      	ldr	r3, [r3, #32]
 8004b8a:	431a      	orrs	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	430a      	orrs	r2, r1
 8004b92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004b9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	6911      	ldr	r1, [r2, #16]
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	68d2      	ldr	r2, [r2, #12]
 8004baa:	4311      	orrs	r1, r2
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	6812      	ldr	r2, [r2, #0]
 8004bb0:	430b      	orrs	r3, r1
 8004bb2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	695a      	ldr	r2, [r3, #20]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	431a      	orrs	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f042 0201 	orr.w	r2, r2, #1
 8004bde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2220      	movs	r2, #32
 8004bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3710      	adds	r7, #16
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	000186a0 	.word	0x000186a0
 8004c0c:	001e847f 	.word	0x001e847f
 8004c10:	003d08ff 	.word	0x003d08ff
 8004c14:	431bde83 	.word	0x431bde83
 8004c18:	10624dd3 	.word	0x10624dd3

08004c1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d101      	bne.n	8004c30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e0cc      	b.n	8004dca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c30:	4b68      	ldr	r3, [pc, #416]	; (8004dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 030f 	and.w	r3, r3, #15
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d90c      	bls.n	8004c58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c3e:	4b65      	ldr	r3, [pc, #404]	; (8004dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c40:	683a      	ldr	r2, [r7, #0]
 8004c42:	b2d2      	uxtb	r2, r2
 8004c44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c46:	4b63      	ldr	r3, [pc, #396]	; (8004dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 030f 	and.w	r3, r3, #15
 8004c4e:	683a      	ldr	r2, [r7, #0]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d001      	beq.n	8004c58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e0b8      	b.n	8004dca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0302 	and.w	r3, r3, #2
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d020      	beq.n	8004ca6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0304 	and.w	r3, r3, #4
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d005      	beq.n	8004c7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c70:	4b59      	ldr	r3, [pc, #356]	; (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	4a58      	ldr	r2, [pc, #352]	; (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0308 	and.w	r3, r3, #8
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d005      	beq.n	8004c94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c88:	4b53      	ldr	r3, [pc, #332]	; (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	4a52      	ldr	r2, [pc, #328]	; (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c94:	4b50      	ldr	r3, [pc, #320]	; (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	494d      	ldr	r1, [pc, #308]	; (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d044      	beq.n	8004d3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d107      	bne.n	8004cca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cba:	4b47      	ldr	r3, [pc, #284]	; (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d119      	bne.n	8004cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e07f      	b.n	8004dca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d003      	beq.n	8004cda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cd6:	2b03      	cmp	r3, #3
 8004cd8:	d107      	bne.n	8004cea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cda:	4b3f      	ldr	r3, [pc, #252]	; (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d109      	bne.n	8004cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e06f      	b.n	8004dca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cea:	4b3b      	ldr	r3, [pc, #236]	; (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0302 	and.w	r3, r3, #2
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d101      	bne.n	8004cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e067      	b.n	8004dca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cfa:	4b37      	ldr	r3, [pc, #220]	; (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f023 0203 	bic.w	r2, r3, #3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	4934      	ldr	r1, [pc, #208]	; (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d0c:	f7fe ff32 	bl	8003b74 <HAL_GetTick>
 8004d10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d12:	e00a      	b.n	8004d2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d14:	f7fe ff2e 	bl	8003b74 <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d901      	bls.n	8004d2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e04f      	b.n	8004dca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d2a:	4b2b      	ldr	r3, [pc, #172]	; (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f003 020c 	and.w	r2, r3, #12
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d1eb      	bne.n	8004d14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d3c:	4b25      	ldr	r3, [pc, #148]	; (8004dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 030f 	and.w	r3, r3, #15
 8004d44:	683a      	ldr	r2, [r7, #0]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d20c      	bcs.n	8004d64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d4a:	4b22      	ldr	r3, [pc, #136]	; (8004dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d4c:	683a      	ldr	r2, [r7, #0]
 8004d4e:	b2d2      	uxtb	r2, r2
 8004d50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d52:	4b20      	ldr	r3, [pc, #128]	; (8004dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 030f 	and.w	r3, r3, #15
 8004d5a:	683a      	ldr	r2, [r7, #0]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d001      	beq.n	8004d64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e032      	b.n	8004dca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0304 	and.w	r3, r3, #4
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d008      	beq.n	8004d82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d70:	4b19      	ldr	r3, [pc, #100]	; (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	4916      	ldr	r1, [pc, #88]	; (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0308 	and.w	r3, r3, #8
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d009      	beq.n	8004da2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d8e:	4b12      	ldr	r3, [pc, #72]	; (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	00db      	lsls	r3, r3, #3
 8004d9c:	490e      	ldr	r1, [pc, #56]	; (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004da2:	f000 f887 	bl	8004eb4 <HAL_RCC_GetSysClockFreq>
 8004da6:	4602      	mov	r2, r0
 8004da8:	4b0b      	ldr	r3, [pc, #44]	; (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	091b      	lsrs	r3, r3, #4
 8004dae:	f003 030f 	and.w	r3, r3, #15
 8004db2:	490a      	ldr	r1, [pc, #40]	; (8004ddc <HAL_RCC_ClockConfig+0x1c0>)
 8004db4:	5ccb      	ldrb	r3, [r1, r3]
 8004db6:	fa22 f303 	lsr.w	r3, r2, r3
 8004dba:	4a09      	ldr	r2, [pc, #36]	; (8004de0 <HAL_RCC_ClockConfig+0x1c4>)
 8004dbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004dbe:	4b09      	ldr	r3, [pc, #36]	; (8004de4 <HAL_RCC_ClockConfig+0x1c8>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f7fe f9a6 	bl	8003114 <HAL_InitTick>

  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3710      	adds	r7, #16
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	40023c00 	.word	0x40023c00
 8004dd8:	40023800 	.word	0x40023800
 8004ddc:	0800dc54 	.word	0x0800dc54
 8004de0:	20000028 	.word	0x20000028
 8004de4:	2000002c 	.word	0x2000002c

08004de8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004de8:	b480      	push	{r7}
 8004dea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004dec:	4b03      	ldr	r3, [pc, #12]	; (8004dfc <HAL_RCC_GetHCLKFreq+0x14>)
 8004dee:	681b      	ldr	r3, [r3, #0]
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	20000028 	.word	0x20000028

08004e00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e04:	f7ff fff0 	bl	8004de8 <HAL_RCC_GetHCLKFreq>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	4b05      	ldr	r3, [pc, #20]	; (8004e20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	0a9b      	lsrs	r3, r3, #10
 8004e10:	f003 0307 	and.w	r3, r3, #7
 8004e14:	4903      	ldr	r1, [pc, #12]	; (8004e24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e16:	5ccb      	ldrb	r3, [r1, r3]
 8004e18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	40023800 	.word	0x40023800
 8004e24:	0800dc64 	.word	0x0800dc64

08004e28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004e2c:	f7ff ffdc 	bl	8004de8 <HAL_RCC_GetHCLKFreq>
 8004e30:	4602      	mov	r2, r0
 8004e32:	4b05      	ldr	r3, [pc, #20]	; (8004e48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	0b5b      	lsrs	r3, r3, #13
 8004e38:	f003 0307 	and.w	r3, r3, #7
 8004e3c:	4903      	ldr	r1, [pc, #12]	; (8004e4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e3e:	5ccb      	ldrb	r3, [r1, r3]
 8004e40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	40023800 	.word	0x40023800
 8004e4c:	0800dc64 	.word	0x0800dc64

08004e50 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	220f      	movs	r2, #15
 8004e5e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004e60:	4b12      	ldr	r3, [pc, #72]	; (8004eac <HAL_RCC_GetClockConfig+0x5c>)
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f003 0203 	and.w	r2, r3, #3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004e6c:	4b0f      	ldr	r3, [pc, #60]	; (8004eac <HAL_RCC_GetClockConfig+0x5c>)
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004e78:	4b0c      	ldr	r3, [pc, #48]	; (8004eac <HAL_RCC_GetClockConfig+0x5c>)
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004e84:	4b09      	ldr	r3, [pc, #36]	; (8004eac <HAL_RCC_GetClockConfig+0x5c>)
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	08db      	lsrs	r3, r3, #3
 8004e8a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004e92:	4b07      	ldr	r3, [pc, #28]	; (8004eb0 <HAL_RCC_GetClockConfig+0x60>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 020f 	and.w	r2, r3, #15
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	601a      	str	r2, [r3, #0]
}
 8004e9e:	bf00      	nop
 8004ea0:	370c      	adds	r7, #12
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	40023800 	.word	0x40023800
 8004eb0:	40023c00 	.word	0x40023c00

08004eb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004eb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004eb8:	b0a6      	sub	sp, #152	; 0x98
 8004eba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004eda:	4bc8      	ldr	r3, [pc, #800]	; (80051fc <HAL_RCC_GetSysClockFreq+0x348>)
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	f003 030c 	and.w	r3, r3, #12
 8004ee2:	2b0c      	cmp	r3, #12
 8004ee4:	f200 817e 	bhi.w	80051e4 <HAL_RCC_GetSysClockFreq+0x330>
 8004ee8:	a201      	add	r2, pc, #4	; (adr r2, 8004ef0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eee:	bf00      	nop
 8004ef0:	08004f25 	.word	0x08004f25
 8004ef4:	080051e5 	.word	0x080051e5
 8004ef8:	080051e5 	.word	0x080051e5
 8004efc:	080051e5 	.word	0x080051e5
 8004f00:	08004f2d 	.word	0x08004f2d
 8004f04:	080051e5 	.word	0x080051e5
 8004f08:	080051e5 	.word	0x080051e5
 8004f0c:	080051e5 	.word	0x080051e5
 8004f10:	08004f35 	.word	0x08004f35
 8004f14:	080051e5 	.word	0x080051e5
 8004f18:	080051e5 	.word	0x080051e5
 8004f1c:	080051e5 	.word	0x080051e5
 8004f20:	0800509f 	.word	0x0800509f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f24:	4bb6      	ldr	r3, [pc, #728]	; (8005200 <HAL_RCC_GetSysClockFreq+0x34c>)
 8004f26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8004f2a:	e15f      	b.n	80051ec <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f2c:	4bb5      	ldr	r3, [pc, #724]	; (8005204 <HAL_RCC_GetSysClockFreq+0x350>)
 8004f2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004f32:	e15b      	b.n	80051ec <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f34:	4bb1      	ldr	r3, [pc, #708]	; (80051fc <HAL_RCC_GetSysClockFreq+0x348>)
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f3c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f40:	4bae      	ldr	r3, [pc, #696]	; (80051fc <HAL_RCC_GetSysClockFreq+0x348>)
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d031      	beq.n	8004fb0 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f4c:	4bab      	ldr	r3, [pc, #684]	; (80051fc <HAL_RCC_GetSysClockFreq+0x348>)
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	099b      	lsrs	r3, r3, #6
 8004f52:	2200      	movs	r2, #0
 8004f54:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f56:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004f58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f5e:	663b      	str	r3, [r7, #96]	; 0x60
 8004f60:	2300      	movs	r3, #0
 8004f62:	667b      	str	r3, [r7, #100]	; 0x64
 8004f64:	4ba7      	ldr	r3, [pc, #668]	; (8005204 <HAL_RCC_GetSysClockFreq+0x350>)
 8004f66:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004f6a:	462a      	mov	r2, r5
 8004f6c:	fb03 f202 	mul.w	r2, r3, r2
 8004f70:	2300      	movs	r3, #0
 8004f72:	4621      	mov	r1, r4
 8004f74:	fb01 f303 	mul.w	r3, r1, r3
 8004f78:	4413      	add	r3, r2
 8004f7a:	4aa2      	ldr	r2, [pc, #648]	; (8005204 <HAL_RCC_GetSysClockFreq+0x350>)
 8004f7c:	4621      	mov	r1, r4
 8004f7e:	fba1 1202 	umull	r1, r2, r1, r2
 8004f82:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004f84:	460a      	mov	r2, r1
 8004f86:	67ba      	str	r2, [r7, #120]	; 0x78
 8004f88:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004f8a:	4413      	add	r3, r2
 8004f8c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004f8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f92:	2200      	movs	r2, #0
 8004f94:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f96:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004f98:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004f9c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8004fa0:	f7fb f98e 	bl	80002c0 <__aeabi_uldivmod>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	4613      	mov	r3, r2
 8004faa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004fae:	e064      	b.n	800507a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fb0:	4b92      	ldr	r3, [pc, #584]	; (80051fc <HAL_RCC_GetSysClockFreq+0x348>)
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	099b      	lsrs	r3, r3, #6
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	653b      	str	r3, [r7, #80]	; 0x50
 8004fba:	657a      	str	r2, [r7, #84]	; 0x54
 8004fbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fc8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8004fcc:	4622      	mov	r2, r4
 8004fce:	462b      	mov	r3, r5
 8004fd0:	f04f 0000 	mov.w	r0, #0
 8004fd4:	f04f 0100 	mov.w	r1, #0
 8004fd8:	0159      	lsls	r1, r3, #5
 8004fda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fde:	0150      	lsls	r0, r2, #5
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	4621      	mov	r1, r4
 8004fe6:	1a51      	subs	r1, r2, r1
 8004fe8:	6139      	str	r1, [r7, #16]
 8004fea:	4629      	mov	r1, r5
 8004fec:	eb63 0301 	sbc.w	r3, r3, r1
 8004ff0:	617b      	str	r3, [r7, #20]
 8004ff2:	f04f 0200 	mov.w	r2, #0
 8004ff6:	f04f 0300 	mov.w	r3, #0
 8004ffa:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ffe:	4659      	mov	r1, fp
 8005000:	018b      	lsls	r3, r1, #6
 8005002:	4651      	mov	r1, sl
 8005004:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005008:	4651      	mov	r1, sl
 800500a:	018a      	lsls	r2, r1, #6
 800500c:	4651      	mov	r1, sl
 800500e:	ebb2 0801 	subs.w	r8, r2, r1
 8005012:	4659      	mov	r1, fp
 8005014:	eb63 0901 	sbc.w	r9, r3, r1
 8005018:	f04f 0200 	mov.w	r2, #0
 800501c:	f04f 0300 	mov.w	r3, #0
 8005020:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005024:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005028:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800502c:	4690      	mov	r8, r2
 800502e:	4699      	mov	r9, r3
 8005030:	4623      	mov	r3, r4
 8005032:	eb18 0303 	adds.w	r3, r8, r3
 8005036:	60bb      	str	r3, [r7, #8]
 8005038:	462b      	mov	r3, r5
 800503a:	eb49 0303 	adc.w	r3, r9, r3
 800503e:	60fb      	str	r3, [r7, #12]
 8005040:	f04f 0200 	mov.w	r2, #0
 8005044:	f04f 0300 	mov.w	r3, #0
 8005048:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800504c:	4629      	mov	r1, r5
 800504e:	028b      	lsls	r3, r1, #10
 8005050:	4621      	mov	r1, r4
 8005052:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005056:	4621      	mov	r1, r4
 8005058:	028a      	lsls	r2, r1, #10
 800505a:	4610      	mov	r0, r2
 800505c:	4619      	mov	r1, r3
 800505e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005062:	2200      	movs	r2, #0
 8005064:	643b      	str	r3, [r7, #64]	; 0x40
 8005066:	647a      	str	r2, [r7, #68]	; 0x44
 8005068:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800506c:	f7fb f928 	bl	80002c0 <__aeabi_uldivmod>
 8005070:	4602      	mov	r2, r0
 8005072:	460b      	mov	r3, r1
 8005074:	4613      	mov	r3, r2
 8005076:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800507a:	4b60      	ldr	r3, [pc, #384]	; (80051fc <HAL_RCC_GetSysClockFreq+0x348>)
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	0c1b      	lsrs	r3, r3, #16
 8005080:	f003 0303 	and.w	r3, r3, #3
 8005084:	3301      	adds	r3, #1
 8005086:	005b      	lsls	r3, r3, #1
 8005088:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 800508c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005090:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005094:	fbb2 f3f3 	udiv	r3, r2, r3
 8005098:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800509c:	e0a6      	b.n	80051ec <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800509e:	4b57      	ldr	r3, [pc, #348]	; (80051fc <HAL_RCC_GetSysClockFreq+0x348>)
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050aa:	4b54      	ldr	r3, [pc, #336]	; (80051fc <HAL_RCC_GetSysClockFreq+0x348>)
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d02a      	beq.n	800510c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050b6:	4b51      	ldr	r3, [pc, #324]	; (80051fc <HAL_RCC_GetSysClockFreq+0x348>)
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	099b      	lsrs	r3, r3, #6
 80050bc:	2200      	movs	r2, #0
 80050be:	63bb      	str	r3, [r7, #56]	; 0x38
 80050c0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80050c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80050c8:	2100      	movs	r1, #0
 80050ca:	4b4e      	ldr	r3, [pc, #312]	; (8005204 <HAL_RCC_GetSysClockFreq+0x350>)
 80050cc:	fb03 f201 	mul.w	r2, r3, r1
 80050d0:	2300      	movs	r3, #0
 80050d2:	fb00 f303 	mul.w	r3, r0, r3
 80050d6:	4413      	add	r3, r2
 80050d8:	4a4a      	ldr	r2, [pc, #296]	; (8005204 <HAL_RCC_GetSysClockFreq+0x350>)
 80050da:	fba0 1202 	umull	r1, r2, r0, r2
 80050de:	677a      	str	r2, [r7, #116]	; 0x74
 80050e0:	460a      	mov	r2, r1
 80050e2:	673a      	str	r2, [r7, #112]	; 0x70
 80050e4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80050e6:	4413      	add	r3, r2
 80050e8:	677b      	str	r3, [r7, #116]	; 0x74
 80050ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80050ee:	2200      	movs	r2, #0
 80050f0:	633b      	str	r3, [r7, #48]	; 0x30
 80050f2:	637a      	str	r2, [r7, #52]	; 0x34
 80050f4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80050f8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80050fc:	f7fb f8e0 	bl	80002c0 <__aeabi_uldivmod>
 8005100:	4602      	mov	r2, r0
 8005102:	460b      	mov	r3, r1
 8005104:	4613      	mov	r3, r2
 8005106:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800510a:	e05b      	b.n	80051c4 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800510c:	4b3b      	ldr	r3, [pc, #236]	; (80051fc <HAL_RCC_GetSysClockFreq+0x348>)
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	099b      	lsrs	r3, r3, #6
 8005112:	2200      	movs	r2, #0
 8005114:	62bb      	str	r3, [r7, #40]	; 0x28
 8005116:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800511a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800511e:	623b      	str	r3, [r7, #32]
 8005120:	2300      	movs	r3, #0
 8005122:	627b      	str	r3, [r7, #36]	; 0x24
 8005124:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005128:	4642      	mov	r2, r8
 800512a:	464b      	mov	r3, r9
 800512c:	f04f 0000 	mov.w	r0, #0
 8005130:	f04f 0100 	mov.w	r1, #0
 8005134:	0159      	lsls	r1, r3, #5
 8005136:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800513a:	0150      	lsls	r0, r2, #5
 800513c:	4602      	mov	r2, r0
 800513e:	460b      	mov	r3, r1
 8005140:	4641      	mov	r1, r8
 8005142:	ebb2 0a01 	subs.w	sl, r2, r1
 8005146:	4649      	mov	r1, r9
 8005148:	eb63 0b01 	sbc.w	fp, r3, r1
 800514c:	f04f 0200 	mov.w	r2, #0
 8005150:	f04f 0300 	mov.w	r3, #0
 8005154:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005158:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800515c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005160:	ebb2 040a 	subs.w	r4, r2, sl
 8005164:	eb63 050b 	sbc.w	r5, r3, fp
 8005168:	f04f 0200 	mov.w	r2, #0
 800516c:	f04f 0300 	mov.w	r3, #0
 8005170:	00eb      	lsls	r3, r5, #3
 8005172:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005176:	00e2      	lsls	r2, r4, #3
 8005178:	4614      	mov	r4, r2
 800517a:	461d      	mov	r5, r3
 800517c:	4643      	mov	r3, r8
 800517e:	18e3      	adds	r3, r4, r3
 8005180:	603b      	str	r3, [r7, #0]
 8005182:	464b      	mov	r3, r9
 8005184:	eb45 0303 	adc.w	r3, r5, r3
 8005188:	607b      	str	r3, [r7, #4]
 800518a:	f04f 0200 	mov.w	r2, #0
 800518e:	f04f 0300 	mov.w	r3, #0
 8005192:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005196:	4629      	mov	r1, r5
 8005198:	028b      	lsls	r3, r1, #10
 800519a:	4621      	mov	r1, r4
 800519c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80051a0:	4621      	mov	r1, r4
 80051a2:	028a      	lsls	r2, r1, #10
 80051a4:	4610      	mov	r0, r2
 80051a6:	4619      	mov	r1, r3
 80051a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80051ac:	2200      	movs	r2, #0
 80051ae:	61bb      	str	r3, [r7, #24]
 80051b0:	61fa      	str	r2, [r7, #28]
 80051b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051b6:	f7fb f883 	bl	80002c0 <__aeabi_uldivmod>
 80051ba:	4602      	mov	r2, r0
 80051bc:	460b      	mov	r3, r1
 80051be:	4613      	mov	r3, r2
 80051c0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80051c4:	4b0d      	ldr	r3, [pc, #52]	; (80051fc <HAL_RCC_GetSysClockFreq+0x348>)
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	0f1b      	lsrs	r3, r3, #28
 80051ca:	f003 0307 	and.w	r3, r3, #7
 80051ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 80051d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80051d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051da:	fbb2 f3f3 	udiv	r3, r2, r3
 80051de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80051e2:	e003      	b.n	80051ec <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80051e4:	4b06      	ldr	r3, [pc, #24]	; (8005200 <HAL_RCC_GetSysClockFreq+0x34c>)
 80051e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80051ea:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3798      	adds	r7, #152	; 0x98
 80051f4:	46bd      	mov	sp, r7
 80051f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051fa:	bf00      	nop
 80051fc:	40023800 	.word	0x40023800
 8005200:	00f42400 	.word	0x00f42400
 8005204:	017d7840 	.word	0x017d7840

08005208 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b086      	sub	sp, #24
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d101      	bne.n	800521a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e28d      	b.n	8005736 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0301 	and.w	r3, r3, #1
 8005222:	2b00      	cmp	r3, #0
 8005224:	f000 8083 	beq.w	800532e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005228:	4b94      	ldr	r3, [pc, #592]	; (800547c <HAL_RCC_OscConfig+0x274>)
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f003 030c 	and.w	r3, r3, #12
 8005230:	2b04      	cmp	r3, #4
 8005232:	d019      	beq.n	8005268 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005234:	4b91      	ldr	r3, [pc, #580]	; (800547c <HAL_RCC_OscConfig+0x274>)
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800523c:	2b08      	cmp	r3, #8
 800523e:	d106      	bne.n	800524e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005240:	4b8e      	ldr	r3, [pc, #568]	; (800547c <HAL_RCC_OscConfig+0x274>)
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005248:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800524c:	d00c      	beq.n	8005268 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800524e:	4b8b      	ldr	r3, [pc, #556]	; (800547c <HAL_RCC_OscConfig+0x274>)
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005256:	2b0c      	cmp	r3, #12
 8005258:	d112      	bne.n	8005280 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800525a:	4b88      	ldr	r3, [pc, #544]	; (800547c <HAL_RCC_OscConfig+0x274>)
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005262:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005266:	d10b      	bne.n	8005280 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005268:	4b84      	ldr	r3, [pc, #528]	; (800547c <HAL_RCC_OscConfig+0x274>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005270:	2b00      	cmp	r3, #0
 8005272:	d05b      	beq.n	800532c <HAL_RCC_OscConfig+0x124>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d157      	bne.n	800532c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e25a      	b.n	8005736 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005288:	d106      	bne.n	8005298 <HAL_RCC_OscConfig+0x90>
 800528a:	4b7c      	ldr	r3, [pc, #496]	; (800547c <HAL_RCC_OscConfig+0x274>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a7b      	ldr	r2, [pc, #492]	; (800547c <HAL_RCC_OscConfig+0x274>)
 8005290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005294:	6013      	str	r3, [r2, #0]
 8005296:	e01d      	b.n	80052d4 <HAL_RCC_OscConfig+0xcc>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052a0:	d10c      	bne.n	80052bc <HAL_RCC_OscConfig+0xb4>
 80052a2:	4b76      	ldr	r3, [pc, #472]	; (800547c <HAL_RCC_OscConfig+0x274>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a75      	ldr	r2, [pc, #468]	; (800547c <HAL_RCC_OscConfig+0x274>)
 80052a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052ac:	6013      	str	r3, [r2, #0]
 80052ae:	4b73      	ldr	r3, [pc, #460]	; (800547c <HAL_RCC_OscConfig+0x274>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a72      	ldr	r2, [pc, #456]	; (800547c <HAL_RCC_OscConfig+0x274>)
 80052b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052b8:	6013      	str	r3, [r2, #0]
 80052ba:	e00b      	b.n	80052d4 <HAL_RCC_OscConfig+0xcc>
 80052bc:	4b6f      	ldr	r3, [pc, #444]	; (800547c <HAL_RCC_OscConfig+0x274>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a6e      	ldr	r2, [pc, #440]	; (800547c <HAL_RCC_OscConfig+0x274>)
 80052c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052c6:	6013      	str	r3, [r2, #0]
 80052c8:	4b6c      	ldr	r3, [pc, #432]	; (800547c <HAL_RCC_OscConfig+0x274>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a6b      	ldr	r2, [pc, #428]	; (800547c <HAL_RCC_OscConfig+0x274>)
 80052ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d013      	beq.n	8005304 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052dc:	f7fe fc4a 	bl	8003b74 <HAL_GetTick>
 80052e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052e2:	e008      	b.n	80052f6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052e4:	f7fe fc46 	bl	8003b74 <HAL_GetTick>
 80052e8:	4602      	mov	r2, r0
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	2b64      	cmp	r3, #100	; 0x64
 80052f0:	d901      	bls.n	80052f6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e21f      	b.n	8005736 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052f6:	4b61      	ldr	r3, [pc, #388]	; (800547c <HAL_RCC_OscConfig+0x274>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d0f0      	beq.n	80052e4 <HAL_RCC_OscConfig+0xdc>
 8005302:	e014      	b.n	800532e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005304:	f7fe fc36 	bl	8003b74 <HAL_GetTick>
 8005308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800530a:	e008      	b.n	800531e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800530c:	f7fe fc32 	bl	8003b74 <HAL_GetTick>
 8005310:	4602      	mov	r2, r0
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	2b64      	cmp	r3, #100	; 0x64
 8005318:	d901      	bls.n	800531e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	e20b      	b.n	8005736 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800531e:	4b57      	ldr	r3, [pc, #348]	; (800547c <HAL_RCC_OscConfig+0x274>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d1f0      	bne.n	800530c <HAL_RCC_OscConfig+0x104>
 800532a:	e000      	b.n	800532e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800532c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0302 	and.w	r3, r3, #2
 8005336:	2b00      	cmp	r3, #0
 8005338:	d06f      	beq.n	800541a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800533a:	4b50      	ldr	r3, [pc, #320]	; (800547c <HAL_RCC_OscConfig+0x274>)
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f003 030c 	and.w	r3, r3, #12
 8005342:	2b00      	cmp	r3, #0
 8005344:	d017      	beq.n	8005376 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005346:	4b4d      	ldr	r3, [pc, #308]	; (800547c <HAL_RCC_OscConfig+0x274>)
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800534e:	2b08      	cmp	r3, #8
 8005350:	d105      	bne.n	800535e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005352:	4b4a      	ldr	r3, [pc, #296]	; (800547c <HAL_RCC_OscConfig+0x274>)
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00b      	beq.n	8005376 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800535e:	4b47      	ldr	r3, [pc, #284]	; (800547c <HAL_RCC_OscConfig+0x274>)
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005366:	2b0c      	cmp	r3, #12
 8005368:	d11c      	bne.n	80053a4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800536a:	4b44      	ldr	r3, [pc, #272]	; (800547c <HAL_RCC_OscConfig+0x274>)
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d116      	bne.n	80053a4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005376:	4b41      	ldr	r3, [pc, #260]	; (800547c <HAL_RCC_OscConfig+0x274>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0302 	and.w	r3, r3, #2
 800537e:	2b00      	cmp	r3, #0
 8005380:	d005      	beq.n	800538e <HAL_RCC_OscConfig+0x186>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	2b01      	cmp	r3, #1
 8005388:	d001      	beq.n	800538e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e1d3      	b.n	8005736 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800538e:	4b3b      	ldr	r3, [pc, #236]	; (800547c <HAL_RCC_OscConfig+0x274>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	00db      	lsls	r3, r3, #3
 800539c:	4937      	ldr	r1, [pc, #220]	; (800547c <HAL_RCC_OscConfig+0x274>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053a2:	e03a      	b.n	800541a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d020      	beq.n	80053ee <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053ac:	4b34      	ldr	r3, [pc, #208]	; (8005480 <HAL_RCC_OscConfig+0x278>)
 80053ae:	2201      	movs	r2, #1
 80053b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053b2:	f7fe fbdf 	bl	8003b74 <HAL_GetTick>
 80053b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053b8:	e008      	b.n	80053cc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053ba:	f7fe fbdb 	bl	8003b74 <HAL_GetTick>
 80053be:	4602      	mov	r2, r0
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d901      	bls.n	80053cc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80053c8:	2303      	movs	r3, #3
 80053ca:	e1b4      	b.n	8005736 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053cc:	4b2b      	ldr	r3, [pc, #172]	; (800547c <HAL_RCC_OscConfig+0x274>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0302 	and.w	r3, r3, #2
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d0f0      	beq.n	80053ba <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053d8:	4b28      	ldr	r3, [pc, #160]	; (800547c <HAL_RCC_OscConfig+0x274>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	00db      	lsls	r3, r3, #3
 80053e6:	4925      	ldr	r1, [pc, #148]	; (800547c <HAL_RCC_OscConfig+0x274>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	600b      	str	r3, [r1, #0]
 80053ec:	e015      	b.n	800541a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053ee:	4b24      	ldr	r3, [pc, #144]	; (8005480 <HAL_RCC_OscConfig+0x278>)
 80053f0:	2200      	movs	r2, #0
 80053f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053f4:	f7fe fbbe 	bl	8003b74 <HAL_GetTick>
 80053f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053fa:	e008      	b.n	800540e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053fc:	f7fe fbba 	bl	8003b74 <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	2b02      	cmp	r3, #2
 8005408:	d901      	bls.n	800540e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e193      	b.n	8005736 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800540e:	4b1b      	ldr	r3, [pc, #108]	; (800547c <HAL_RCC_OscConfig+0x274>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0302 	and.w	r3, r3, #2
 8005416:	2b00      	cmp	r3, #0
 8005418:	d1f0      	bne.n	80053fc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 0308 	and.w	r3, r3, #8
 8005422:	2b00      	cmp	r3, #0
 8005424:	d036      	beq.n	8005494 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d016      	beq.n	800545c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800542e:	4b15      	ldr	r3, [pc, #84]	; (8005484 <HAL_RCC_OscConfig+0x27c>)
 8005430:	2201      	movs	r2, #1
 8005432:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005434:	f7fe fb9e 	bl	8003b74 <HAL_GetTick>
 8005438:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800543a:	e008      	b.n	800544e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800543c:	f7fe fb9a 	bl	8003b74 <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	2b02      	cmp	r3, #2
 8005448:	d901      	bls.n	800544e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e173      	b.n	8005736 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800544e:	4b0b      	ldr	r3, [pc, #44]	; (800547c <HAL_RCC_OscConfig+0x274>)
 8005450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005452:	f003 0302 	and.w	r3, r3, #2
 8005456:	2b00      	cmp	r3, #0
 8005458:	d0f0      	beq.n	800543c <HAL_RCC_OscConfig+0x234>
 800545a:	e01b      	b.n	8005494 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800545c:	4b09      	ldr	r3, [pc, #36]	; (8005484 <HAL_RCC_OscConfig+0x27c>)
 800545e:	2200      	movs	r2, #0
 8005460:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005462:	f7fe fb87 	bl	8003b74 <HAL_GetTick>
 8005466:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005468:	e00e      	b.n	8005488 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800546a:	f7fe fb83 	bl	8003b74 <HAL_GetTick>
 800546e:	4602      	mov	r2, r0
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	2b02      	cmp	r3, #2
 8005476:	d907      	bls.n	8005488 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e15c      	b.n	8005736 <HAL_RCC_OscConfig+0x52e>
 800547c:	40023800 	.word	0x40023800
 8005480:	42470000 	.word	0x42470000
 8005484:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005488:	4b8a      	ldr	r3, [pc, #552]	; (80056b4 <HAL_RCC_OscConfig+0x4ac>)
 800548a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800548c:	f003 0302 	and.w	r3, r3, #2
 8005490:	2b00      	cmp	r3, #0
 8005492:	d1ea      	bne.n	800546a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0304 	and.w	r3, r3, #4
 800549c:	2b00      	cmp	r3, #0
 800549e:	f000 8097 	beq.w	80055d0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054a2:	2300      	movs	r3, #0
 80054a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054a6:	4b83      	ldr	r3, [pc, #524]	; (80056b4 <HAL_RCC_OscConfig+0x4ac>)
 80054a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d10f      	bne.n	80054d2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054b2:	2300      	movs	r3, #0
 80054b4:	60bb      	str	r3, [r7, #8]
 80054b6:	4b7f      	ldr	r3, [pc, #508]	; (80056b4 <HAL_RCC_OscConfig+0x4ac>)
 80054b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ba:	4a7e      	ldr	r2, [pc, #504]	; (80056b4 <HAL_RCC_OscConfig+0x4ac>)
 80054bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054c0:	6413      	str	r3, [r2, #64]	; 0x40
 80054c2:	4b7c      	ldr	r3, [pc, #496]	; (80056b4 <HAL_RCC_OscConfig+0x4ac>)
 80054c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054ca:	60bb      	str	r3, [r7, #8]
 80054cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054ce:	2301      	movs	r3, #1
 80054d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054d2:	4b79      	ldr	r3, [pc, #484]	; (80056b8 <HAL_RCC_OscConfig+0x4b0>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d118      	bne.n	8005510 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054de:	4b76      	ldr	r3, [pc, #472]	; (80056b8 <HAL_RCC_OscConfig+0x4b0>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a75      	ldr	r2, [pc, #468]	; (80056b8 <HAL_RCC_OscConfig+0x4b0>)
 80054e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054ea:	f7fe fb43 	bl	8003b74 <HAL_GetTick>
 80054ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054f0:	e008      	b.n	8005504 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054f2:	f7fe fb3f 	bl	8003b74 <HAL_GetTick>
 80054f6:	4602      	mov	r2, r0
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	d901      	bls.n	8005504 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e118      	b.n	8005736 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005504:	4b6c      	ldr	r3, [pc, #432]	; (80056b8 <HAL_RCC_OscConfig+0x4b0>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800550c:	2b00      	cmp	r3, #0
 800550e:	d0f0      	beq.n	80054f2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	2b01      	cmp	r3, #1
 8005516:	d106      	bne.n	8005526 <HAL_RCC_OscConfig+0x31e>
 8005518:	4b66      	ldr	r3, [pc, #408]	; (80056b4 <HAL_RCC_OscConfig+0x4ac>)
 800551a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800551c:	4a65      	ldr	r2, [pc, #404]	; (80056b4 <HAL_RCC_OscConfig+0x4ac>)
 800551e:	f043 0301 	orr.w	r3, r3, #1
 8005522:	6713      	str	r3, [r2, #112]	; 0x70
 8005524:	e01c      	b.n	8005560 <HAL_RCC_OscConfig+0x358>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	2b05      	cmp	r3, #5
 800552c:	d10c      	bne.n	8005548 <HAL_RCC_OscConfig+0x340>
 800552e:	4b61      	ldr	r3, [pc, #388]	; (80056b4 <HAL_RCC_OscConfig+0x4ac>)
 8005530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005532:	4a60      	ldr	r2, [pc, #384]	; (80056b4 <HAL_RCC_OscConfig+0x4ac>)
 8005534:	f043 0304 	orr.w	r3, r3, #4
 8005538:	6713      	str	r3, [r2, #112]	; 0x70
 800553a:	4b5e      	ldr	r3, [pc, #376]	; (80056b4 <HAL_RCC_OscConfig+0x4ac>)
 800553c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800553e:	4a5d      	ldr	r2, [pc, #372]	; (80056b4 <HAL_RCC_OscConfig+0x4ac>)
 8005540:	f043 0301 	orr.w	r3, r3, #1
 8005544:	6713      	str	r3, [r2, #112]	; 0x70
 8005546:	e00b      	b.n	8005560 <HAL_RCC_OscConfig+0x358>
 8005548:	4b5a      	ldr	r3, [pc, #360]	; (80056b4 <HAL_RCC_OscConfig+0x4ac>)
 800554a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800554c:	4a59      	ldr	r2, [pc, #356]	; (80056b4 <HAL_RCC_OscConfig+0x4ac>)
 800554e:	f023 0301 	bic.w	r3, r3, #1
 8005552:	6713      	str	r3, [r2, #112]	; 0x70
 8005554:	4b57      	ldr	r3, [pc, #348]	; (80056b4 <HAL_RCC_OscConfig+0x4ac>)
 8005556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005558:	4a56      	ldr	r2, [pc, #344]	; (80056b4 <HAL_RCC_OscConfig+0x4ac>)
 800555a:	f023 0304 	bic.w	r3, r3, #4
 800555e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d015      	beq.n	8005594 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005568:	f7fe fb04 	bl	8003b74 <HAL_GetTick>
 800556c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800556e:	e00a      	b.n	8005586 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005570:	f7fe fb00 	bl	8003b74 <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	f241 3288 	movw	r2, #5000	; 0x1388
 800557e:	4293      	cmp	r3, r2
 8005580:	d901      	bls.n	8005586 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e0d7      	b.n	8005736 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005586:	4b4b      	ldr	r3, [pc, #300]	; (80056b4 <HAL_RCC_OscConfig+0x4ac>)
 8005588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800558a:	f003 0302 	and.w	r3, r3, #2
 800558e:	2b00      	cmp	r3, #0
 8005590:	d0ee      	beq.n	8005570 <HAL_RCC_OscConfig+0x368>
 8005592:	e014      	b.n	80055be <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005594:	f7fe faee 	bl	8003b74 <HAL_GetTick>
 8005598:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800559a:	e00a      	b.n	80055b2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800559c:	f7fe faea 	bl	8003b74 <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d901      	bls.n	80055b2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e0c1      	b.n	8005736 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055b2:	4b40      	ldr	r3, [pc, #256]	; (80056b4 <HAL_RCC_OscConfig+0x4ac>)
 80055b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055b6:	f003 0302 	and.w	r3, r3, #2
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d1ee      	bne.n	800559c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055be:	7dfb      	ldrb	r3, [r7, #23]
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d105      	bne.n	80055d0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055c4:	4b3b      	ldr	r3, [pc, #236]	; (80056b4 <HAL_RCC_OscConfig+0x4ac>)
 80055c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c8:	4a3a      	ldr	r2, [pc, #232]	; (80056b4 <HAL_RCC_OscConfig+0x4ac>)
 80055ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	699b      	ldr	r3, [r3, #24]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f000 80ad 	beq.w	8005734 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055da:	4b36      	ldr	r3, [pc, #216]	; (80056b4 <HAL_RCC_OscConfig+0x4ac>)
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	f003 030c 	and.w	r3, r3, #12
 80055e2:	2b08      	cmp	r3, #8
 80055e4:	d060      	beq.n	80056a8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d145      	bne.n	800567a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055ee:	4b33      	ldr	r3, [pc, #204]	; (80056bc <HAL_RCC_OscConfig+0x4b4>)
 80055f0:	2200      	movs	r2, #0
 80055f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055f4:	f7fe fabe 	bl	8003b74 <HAL_GetTick>
 80055f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055fa:	e008      	b.n	800560e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055fc:	f7fe faba 	bl	8003b74 <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	2b02      	cmp	r3, #2
 8005608:	d901      	bls.n	800560e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e093      	b.n	8005736 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800560e:	4b29      	ldr	r3, [pc, #164]	; (80056b4 <HAL_RCC_OscConfig+0x4ac>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d1f0      	bne.n	80055fc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	69da      	ldr	r2, [r3, #28]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a1b      	ldr	r3, [r3, #32]
 8005622:	431a      	orrs	r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005628:	019b      	lsls	r3, r3, #6
 800562a:	431a      	orrs	r2, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005630:	085b      	lsrs	r3, r3, #1
 8005632:	3b01      	subs	r3, #1
 8005634:	041b      	lsls	r3, r3, #16
 8005636:	431a      	orrs	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800563c:	061b      	lsls	r3, r3, #24
 800563e:	431a      	orrs	r2, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005644:	071b      	lsls	r3, r3, #28
 8005646:	491b      	ldr	r1, [pc, #108]	; (80056b4 <HAL_RCC_OscConfig+0x4ac>)
 8005648:	4313      	orrs	r3, r2
 800564a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800564c:	4b1b      	ldr	r3, [pc, #108]	; (80056bc <HAL_RCC_OscConfig+0x4b4>)
 800564e:	2201      	movs	r2, #1
 8005650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005652:	f7fe fa8f 	bl	8003b74 <HAL_GetTick>
 8005656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005658:	e008      	b.n	800566c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800565a:	f7fe fa8b 	bl	8003b74 <HAL_GetTick>
 800565e:	4602      	mov	r2, r0
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	2b02      	cmp	r3, #2
 8005666:	d901      	bls.n	800566c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e064      	b.n	8005736 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800566c:	4b11      	ldr	r3, [pc, #68]	; (80056b4 <HAL_RCC_OscConfig+0x4ac>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d0f0      	beq.n	800565a <HAL_RCC_OscConfig+0x452>
 8005678:	e05c      	b.n	8005734 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800567a:	4b10      	ldr	r3, [pc, #64]	; (80056bc <HAL_RCC_OscConfig+0x4b4>)
 800567c:	2200      	movs	r2, #0
 800567e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005680:	f7fe fa78 	bl	8003b74 <HAL_GetTick>
 8005684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005686:	e008      	b.n	800569a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005688:	f7fe fa74 	bl	8003b74 <HAL_GetTick>
 800568c:	4602      	mov	r2, r0
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	2b02      	cmp	r3, #2
 8005694:	d901      	bls.n	800569a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e04d      	b.n	8005736 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800569a:	4b06      	ldr	r3, [pc, #24]	; (80056b4 <HAL_RCC_OscConfig+0x4ac>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1f0      	bne.n	8005688 <HAL_RCC_OscConfig+0x480>
 80056a6:	e045      	b.n	8005734 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d107      	bne.n	80056c0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e040      	b.n	8005736 <HAL_RCC_OscConfig+0x52e>
 80056b4:	40023800 	.word	0x40023800
 80056b8:	40007000 	.word	0x40007000
 80056bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80056c0:	4b1f      	ldr	r3, [pc, #124]	; (8005740 <HAL_RCC_OscConfig+0x538>)
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	699b      	ldr	r3, [r3, #24]
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d030      	beq.n	8005730 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056d8:	429a      	cmp	r2, r3
 80056da:	d129      	bne.n	8005730 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d122      	bne.n	8005730 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80056f0:	4013      	ands	r3, r2
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80056f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d119      	bne.n	8005730 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005706:	085b      	lsrs	r3, r3, #1
 8005708:	3b01      	subs	r3, #1
 800570a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800570c:	429a      	cmp	r2, r3
 800570e:	d10f      	bne.n	8005730 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800571a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800571c:	429a      	cmp	r2, r3
 800571e:	d107      	bne.n	8005730 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800572c:	429a      	cmp	r2, r3
 800572e:	d001      	beq.n	8005734 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e000      	b.n	8005736 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3718      	adds	r7, #24
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	40023800 	.word	0x40023800

08005744 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d101      	bne.n	8005756 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e07b      	b.n	800584e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575a:	2b00      	cmp	r3, #0
 800575c:	d108      	bne.n	8005770 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005766:	d009      	beq.n	800577c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	61da      	str	r2, [r3, #28]
 800576e:	e005      	b.n	800577c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005788:	b2db      	uxtb	r3, r3
 800578a:	2b00      	cmp	r3, #0
 800578c:	d106      	bne.n	800579c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f7fd fb1e 	bl	8002dd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2202      	movs	r2, #2
 80057a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80057c4:	431a      	orrs	r2, r3
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057ce:	431a      	orrs	r2, r3
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	f003 0302 	and.w	r3, r3, #2
 80057d8:	431a      	orrs	r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	695b      	ldr	r3, [r3, #20]
 80057de:	f003 0301 	and.w	r3, r3, #1
 80057e2:	431a      	orrs	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	699b      	ldr	r3, [r3, #24]
 80057e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057ec:	431a      	orrs	r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	69db      	ldr	r3, [r3, #28]
 80057f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057f6:	431a      	orrs	r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a1b      	ldr	r3, [r3, #32]
 80057fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005800:	ea42 0103 	orr.w	r1, r2, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005808:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	430a      	orrs	r2, r1
 8005812:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	699b      	ldr	r3, [r3, #24]
 8005818:	0c1b      	lsrs	r3, r3, #16
 800581a:	f003 0104 	and.w	r1, r3, #4
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005822:	f003 0210 	and.w	r2, r3, #16
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	430a      	orrs	r2, r1
 800582c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	69da      	ldr	r2, [r3, #28]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800583c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	3708      	adds	r7, #8
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}

08005856 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005856:	b580      	push	{r7, lr}
 8005858:	b088      	sub	sp, #32
 800585a:	af00      	add	r7, sp, #0
 800585c:	60f8      	str	r0, [r7, #12]
 800585e:	60b9      	str	r1, [r7, #8]
 8005860:	603b      	str	r3, [r7, #0]
 8005862:	4613      	mov	r3, r2
 8005864:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005866:	2300      	movs	r3, #0
 8005868:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005870:	2b01      	cmp	r3, #1
 8005872:	d101      	bne.n	8005878 <HAL_SPI_Transmit+0x22>
 8005874:	2302      	movs	r3, #2
 8005876:	e126      	b.n	8005ac6 <HAL_SPI_Transmit+0x270>
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005880:	f7fe f978 	bl	8003b74 <HAL_GetTick>
 8005884:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005886:	88fb      	ldrh	r3, [r7, #6]
 8005888:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005890:	b2db      	uxtb	r3, r3
 8005892:	2b01      	cmp	r3, #1
 8005894:	d002      	beq.n	800589c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005896:	2302      	movs	r3, #2
 8005898:	77fb      	strb	r3, [r7, #31]
    goto error;
 800589a:	e10b      	b.n	8005ab4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d002      	beq.n	80058a8 <HAL_SPI_Transmit+0x52>
 80058a2:	88fb      	ldrh	r3, [r7, #6]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d102      	bne.n	80058ae <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80058ac:	e102      	b.n	8005ab4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2203      	movs	r2, #3
 80058b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2200      	movs	r2, #0
 80058ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	68ba      	ldr	r2, [r7, #8]
 80058c0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	88fa      	ldrh	r2, [r7, #6]
 80058c6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	88fa      	ldrh	r2, [r7, #6]
 80058cc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2200      	movs	r2, #0
 80058d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2200      	movs	r2, #0
 80058d8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2200      	movs	r2, #0
 80058de:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2200      	movs	r2, #0
 80058e4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2200      	movs	r2, #0
 80058ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058f4:	d10f      	bne.n	8005916 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005904:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005914:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005920:	2b40      	cmp	r3, #64	; 0x40
 8005922:	d007      	beq.n	8005934 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005932:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800593c:	d14b      	bne.n	80059d6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d002      	beq.n	800594c <HAL_SPI_Transmit+0xf6>
 8005946:	8afb      	ldrh	r3, [r7, #22]
 8005948:	2b01      	cmp	r3, #1
 800594a:	d13e      	bne.n	80059ca <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005950:	881a      	ldrh	r2, [r3, #0]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595c:	1c9a      	adds	r2, r3, #2
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005966:	b29b      	uxth	r3, r3
 8005968:	3b01      	subs	r3, #1
 800596a:	b29a      	uxth	r2, r3
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005970:	e02b      	b.n	80059ca <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	f003 0302 	and.w	r3, r3, #2
 800597c:	2b02      	cmp	r3, #2
 800597e:	d112      	bne.n	80059a6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005984:	881a      	ldrh	r2, [r3, #0]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005990:	1c9a      	adds	r2, r3, #2
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800599a:	b29b      	uxth	r3, r3
 800599c:	3b01      	subs	r3, #1
 800599e:	b29a      	uxth	r2, r3
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	86da      	strh	r2, [r3, #54]	; 0x36
 80059a4:	e011      	b.n	80059ca <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059a6:	f7fe f8e5 	bl	8003b74 <HAL_GetTick>
 80059aa:	4602      	mov	r2, r0
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	1ad3      	subs	r3, r2, r3
 80059b0:	683a      	ldr	r2, [r7, #0]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d803      	bhi.n	80059be <HAL_SPI_Transmit+0x168>
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059bc:	d102      	bne.n	80059c4 <HAL_SPI_Transmit+0x16e>
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d102      	bne.n	80059ca <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80059c4:	2303      	movs	r3, #3
 80059c6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80059c8:	e074      	b.n	8005ab4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d1ce      	bne.n	8005972 <HAL_SPI_Transmit+0x11c>
 80059d4:	e04c      	b.n	8005a70 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d002      	beq.n	80059e4 <HAL_SPI_Transmit+0x18e>
 80059de:	8afb      	ldrh	r3, [r7, #22]
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d140      	bne.n	8005a66 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	330c      	adds	r3, #12
 80059ee:	7812      	ldrb	r2, [r2, #0]
 80059f0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f6:	1c5a      	adds	r2, r3, #1
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	3b01      	subs	r3, #1
 8005a04:	b29a      	uxth	r2, r3
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005a0a:	e02c      	b.n	8005a66 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	f003 0302 	and.w	r3, r3, #2
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	d113      	bne.n	8005a42 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	330c      	adds	r3, #12
 8005a24:	7812      	ldrb	r2, [r2, #0]
 8005a26:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a2c:	1c5a      	adds	r2, r3, #1
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	3b01      	subs	r3, #1
 8005a3a:	b29a      	uxth	r2, r3
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005a40:	e011      	b.n	8005a66 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a42:	f7fe f897 	bl	8003b74 <HAL_GetTick>
 8005a46:	4602      	mov	r2, r0
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	1ad3      	subs	r3, r2, r3
 8005a4c:	683a      	ldr	r2, [r7, #0]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d803      	bhi.n	8005a5a <HAL_SPI_Transmit+0x204>
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a58:	d102      	bne.n	8005a60 <HAL_SPI_Transmit+0x20a>
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d102      	bne.n	8005a66 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005a60:	2303      	movs	r3, #3
 8005a62:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005a64:	e026      	b.n	8005ab4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d1cd      	bne.n	8005a0c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a70:	69ba      	ldr	r2, [r7, #24]
 8005a72:	6839      	ldr	r1, [r7, #0]
 8005a74:	68f8      	ldr	r0, [r7, #12]
 8005a76:	f000 fa55 	bl	8005f24 <SPI_EndRxTxTransaction>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d002      	beq.n	8005a86 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2220      	movs	r2, #32
 8005a84:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d10a      	bne.n	8005aa4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a8e:	2300      	movs	r3, #0
 8005a90:	613b      	str	r3, [r7, #16]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	613b      	str	r3, [r7, #16]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	613b      	str	r3, [r7, #16]
 8005aa2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d002      	beq.n	8005ab2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	77fb      	strb	r3, [r7, #31]
 8005ab0:	e000      	b.n	8005ab4 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005ab2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005ac4:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3720      	adds	r7, #32
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}

08005ace <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005ace:	b580      	push	{r7, lr}
 8005ad0:	b08c      	sub	sp, #48	; 0x30
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	60f8      	str	r0, [r7, #12]
 8005ad6:	60b9      	str	r1, [r7, #8]
 8005ad8:	607a      	str	r2, [r7, #4]
 8005ada:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005adc:	2301      	movs	r3, #1
 8005ade:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d101      	bne.n	8005af4 <HAL_SPI_TransmitReceive+0x26>
 8005af0:	2302      	movs	r3, #2
 8005af2:	e18a      	b.n	8005e0a <HAL_SPI_TransmitReceive+0x33c>
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005afc:	f7fe f83a 	bl	8003b74 <HAL_GetTick>
 8005b00:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005b12:	887b      	ldrh	r3, [r7, #2]
 8005b14:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005b16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d00f      	beq.n	8005b3e <HAL_SPI_TransmitReceive+0x70>
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b24:	d107      	bne.n	8005b36 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d103      	bne.n	8005b36 <HAL_SPI_TransmitReceive+0x68>
 8005b2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b32:	2b04      	cmp	r3, #4
 8005b34:	d003      	beq.n	8005b3e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005b36:	2302      	movs	r3, #2
 8005b38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005b3c:	e15b      	b.n	8005df6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d005      	beq.n	8005b50 <HAL_SPI_TransmitReceive+0x82>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d002      	beq.n	8005b50 <HAL_SPI_TransmitReceive+0x82>
 8005b4a:	887b      	ldrh	r3, [r7, #2]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d103      	bne.n	8005b58 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005b56:	e14e      	b.n	8005df6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	2b04      	cmp	r3, #4
 8005b62:	d003      	beq.n	8005b6c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2205      	movs	r2, #5
 8005b68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	887a      	ldrh	r2, [r7, #2]
 8005b7c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	887a      	ldrh	r2, [r7, #2]
 8005b82:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	68ba      	ldr	r2, [r7, #8]
 8005b88:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	887a      	ldrh	r2, [r7, #2]
 8005b8e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	887a      	ldrh	r2, [r7, #2]
 8005b94:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bac:	2b40      	cmp	r3, #64	; 0x40
 8005bae:	d007      	beq.n	8005bc0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bbe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bc8:	d178      	bne.n	8005cbc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d002      	beq.n	8005bd8 <HAL_SPI_TransmitReceive+0x10a>
 8005bd2:	8b7b      	ldrh	r3, [r7, #26]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d166      	bne.n	8005ca6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bdc:	881a      	ldrh	r2, [r3, #0]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be8:	1c9a      	adds	r2, r3, #2
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	3b01      	subs	r3, #1
 8005bf6:	b29a      	uxth	r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bfc:	e053      	b.n	8005ca6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	f003 0302 	and.w	r3, r3, #2
 8005c08:	2b02      	cmp	r3, #2
 8005c0a:	d11b      	bne.n	8005c44 <HAL_SPI_TransmitReceive+0x176>
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d016      	beq.n	8005c44 <HAL_SPI_TransmitReceive+0x176>
 8005c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d113      	bne.n	8005c44 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c20:	881a      	ldrh	r2, [r3, #0]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c2c:	1c9a      	adds	r2, r3, #2
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	3b01      	subs	r3, #1
 8005c3a:	b29a      	uxth	r2, r3
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c40:	2300      	movs	r3, #0
 8005c42:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	f003 0301 	and.w	r3, r3, #1
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d119      	bne.n	8005c86 <HAL_SPI_TransmitReceive+0x1b8>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d014      	beq.n	8005c86 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68da      	ldr	r2, [r3, #12]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c66:	b292      	uxth	r2, r2
 8005c68:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c6e:	1c9a      	adds	r2, r3, #2
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	b29a      	uxth	r2, r3
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c82:	2301      	movs	r3, #1
 8005c84:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005c86:	f7fd ff75 	bl	8003b74 <HAL_GetTick>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d807      	bhi.n	8005ca6 <HAL_SPI_TransmitReceive+0x1d8>
 8005c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c9c:	d003      	beq.n	8005ca6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005c9e:	2303      	movs	r3, #3
 8005ca0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005ca4:	e0a7      	b.n	8005df6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d1a6      	bne.n	8005bfe <HAL_SPI_TransmitReceive+0x130>
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d1a1      	bne.n	8005bfe <HAL_SPI_TransmitReceive+0x130>
 8005cba:	e07c      	b.n	8005db6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d002      	beq.n	8005cca <HAL_SPI_TransmitReceive+0x1fc>
 8005cc4:	8b7b      	ldrh	r3, [r7, #26]
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d16b      	bne.n	8005da2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	330c      	adds	r3, #12
 8005cd4:	7812      	ldrb	r2, [r2, #0]
 8005cd6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cdc:	1c5a      	adds	r2, r3, #1
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	3b01      	subs	r3, #1
 8005cea:	b29a      	uxth	r2, r3
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cf0:	e057      	b.n	8005da2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	f003 0302 	and.w	r3, r3, #2
 8005cfc:	2b02      	cmp	r3, #2
 8005cfe:	d11c      	bne.n	8005d3a <HAL_SPI_TransmitReceive+0x26c>
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d017      	beq.n	8005d3a <HAL_SPI_TransmitReceive+0x26c>
 8005d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d114      	bne.n	8005d3a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	330c      	adds	r3, #12
 8005d1a:	7812      	ldrb	r2, [r2, #0]
 8005d1c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d22:	1c5a      	adds	r2, r3, #1
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	3b01      	subs	r3, #1
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d36:	2300      	movs	r3, #0
 8005d38:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	f003 0301 	and.w	r3, r3, #1
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d119      	bne.n	8005d7c <HAL_SPI_TransmitReceive+0x2ae>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d014      	beq.n	8005d7c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68da      	ldr	r2, [r3, #12]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d5c:	b2d2      	uxtb	r2, r2
 8005d5e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d64:	1c5a      	adds	r2, r3, #1
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	3b01      	subs	r3, #1
 8005d72:	b29a      	uxth	r2, r3
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005d7c:	f7fd fefa 	bl	8003b74 <HAL_GetTick>
 8005d80:	4602      	mov	r2, r0
 8005d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d84:	1ad3      	subs	r3, r2, r3
 8005d86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d803      	bhi.n	8005d94 <HAL_SPI_TransmitReceive+0x2c6>
 8005d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d92:	d102      	bne.n	8005d9a <HAL_SPI_TransmitReceive+0x2cc>
 8005d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d103      	bne.n	8005da2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005da0:	e029      	b.n	8005df6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d1a2      	bne.n	8005cf2 <HAL_SPI_TransmitReceive+0x224>
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d19d      	bne.n	8005cf2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005db8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005dba:	68f8      	ldr	r0, [r7, #12]
 8005dbc:	f000 f8b2 	bl	8005f24 <SPI_EndRxTxTransaction>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d006      	beq.n	8005dd4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2220      	movs	r2, #32
 8005dd0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005dd2:	e010      	b.n	8005df6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d10b      	bne.n	8005df4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ddc:	2300      	movs	r3, #0
 8005dde:	617b      	str	r3, [r7, #20]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	617b      	str	r3, [r7, #20]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	617b      	str	r3, [r7, #20]
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	e000      	b.n	8005df6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005df4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005e06:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3730      	adds	r7, #48	; 0x30
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
	...

08005e14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b088      	sub	sp, #32
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	60b9      	str	r1, [r7, #8]
 8005e1e:	603b      	str	r3, [r7, #0]
 8005e20:	4613      	mov	r3, r2
 8005e22:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e24:	f7fd fea6 	bl	8003b74 <HAL_GetTick>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e2c:	1a9b      	subs	r3, r3, r2
 8005e2e:	683a      	ldr	r2, [r7, #0]
 8005e30:	4413      	add	r3, r2
 8005e32:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e34:	f7fd fe9e 	bl	8003b74 <HAL_GetTick>
 8005e38:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e3a:	4b39      	ldr	r3, [pc, #228]	; (8005f20 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	015b      	lsls	r3, r3, #5
 8005e40:	0d1b      	lsrs	r3, r3, #20
 8005e42:	69fa      	ldr	r2, [r7, #28]
 8005e44:	fb02 f303 	mul.w	r3, r2, r3
 8005e48:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e4a:	e054      	b.n	8005ef6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e52:	d050      	beq.n	8005ef6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e54:	f7fd fe8e 	bl	8003b74 <HAL_GetTick>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	69fa      	ldr	r2, [r7, #28]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d902      	bls.n	8005e6a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d13d      	bne.n	8005ee6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	685a      	ldr	r2, [r3, #4]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005e78:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e82:	d111      	bne.n	8005ea8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e8c:	d004      	beq.n	8005e98 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e96:	d107      	bne.n	8005ea8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ea6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eb0:	d10f      	bne.n	8005ed2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ec0:	601a      	str	r2, [r3, #0]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ed0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	e017      	b.n	8005f16 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d101      	bne.n	8005ef0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005eec:	2300      	movs	r3, #0
 8005eee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	3b01      	subs	r3, #1
 8005ef4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	689a      	ldr	r2, [r3, #8]
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	4013      	ands	r3, r2
 8005f00:	68ba      	ldr	r2, [r7, #8]
 8005f02:	429a      	cmp	r2, r3
 8005f04:	bf0c      	ite	eq
 8005f06:	2301      	moveq	r3, #1
 8005f08:	2300      	movne	r3, #0
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	79fb      	ldrb	r3, [r7, #7]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d19b      	bne.n	8005e4c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3720      	adds	r7, #32
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	20000028 	.word	0x20000028

08005f24 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b088      	sub	sp, #32
 8005f28:	af02      	add	r7, sp, #8
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005f30:	4b1b      	ldr	r3, [pc, #108]	; (8005fa0 <SPI_EndRxTxTransaction+0x7c>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a1b      	ldr	r2, [pc, #108]	; (8005fa4 <SPI_EndRxTxTransaction+0x80>)
 8005f36:	fba2 2303 	umull	r2, r3, r2, r3
 8005f3a:	0d5b      	lsrs	r3, r3, #21
 8005f3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005f40:	fb02 f303 	mul.w	r3, r2, r3
 8005f44:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f4e:	d112      	bne.n	8005f76 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	9300      	str	r3, [sp, #0]
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	2200      	movs	r2, #0
 8005f58:	2180      	movs	r1, #128	; 0x80
 8005f5a:	68f8      	ldr	r0, [r7, #12]
 8005f5c:	f7ff ff5a 	bl	8005e14 <SPI_WaitFlagStateUntilTimeout>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d016      	beq.n	8005f94 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f6a:	f043 0220 	orr.w	r2, r3, #32
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e00f      	b.n	8005f96 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d00a      	beq.n	8005f92 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	3b01      	subs	r3, #1
 8005f80:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f8c:	2b80      	cmp	r3, #128	; 0x80
 8005f8e:	d0f2      	beq.n	8005f76 <SPI_EndRxTxTransaction+0x52>
 8005f90:	e000      	b.n	8005f94 <SPI_EndRxTxTransaction+0x70>
        break;
 8005f92:	bf00      	nop
  }

  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3718      	adds	r7, #24
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	20000028 	.word	0x20000028
 8005fa4:	165e9f81 	.word	0x165e9f81

08005fa8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d101      	bne.n	8005fba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e041      	b.n	800603e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d106      	bne.n	8005fd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 f839 	bl	8006046 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2202      	movs	r2, #2
 8005fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	3304      	adds	r3, #4
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	4610      	mov	r0, r2
 8005fe8:	f000 f9d8 	bl	800639c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800603c:	2300      	movs	r3, #0
}
 800603e:	4618      	mov	r0, r3
 8006040:	3708      	adds	r7, #8
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}

08006046 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006046:	b480      	push	{r7}
 8006048:	b083      	sub	sp, #12
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800604e:	bf00      	nop
 8006050:	370c      	adds	r7, #12
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr
	...

0800605c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800605c:	b480      	push	{r7}
 800605e:	b085      	sub	sp, #20
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800606a:	b2db      	uxtb	r3, r3
 800606c:	2b01      	cmp	r3, #1
 800606e:	d001      	beq.n	8006074 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e04e      	b.n	8006112 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2202      	movs	r2, #2
 8006078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68da      	ldr	r2, [r3, #12]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f042 0201 	orr.w	r2, r2, #1
 800608a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a23      	ldr	r2, [pc, #140]	; (8006120 <HAL_TIM_Base_Start_IT+0xc4>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d022      	beq.n	80060dc <HAL_TIM_Base_Start_IT+0x80>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800609e:	d01d      	beq.n	80060dc <HAL_TIM_Base_Start_IT+0x80>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a1f      	ldr	r2, [pc, #124]	; (8006124 <HAL_TIM_Base_Start_IT+0xc8>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d018      	beq.n	80060dc <HAL_TIM_Base_Start_IT+0x80>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a1e      	ldr	r2, [pc, #120]	; (8006128 <HAL_TIM_Base_Start_IT+0xcc>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d013      	beq.n	80060dc <HAL_TIM_Base_Start_IT+0x80>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a1c      	ldr	r2, [pc, #112]	; (800612c <HAL_TIM_Base_Start_IT+0xd0>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d00e      	beq.n	80060dc <HAL_TIM_Base_Start_IT+0x80>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a1b      	ldr	r2, [pc, #108]	; (8006130 <HAL_TIM_Base_Start_IT+0xd4>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d009      	beq.n	80060dc <HAL_TIM_Base_Start_IT+0x80>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a19      	ldr	r2, [pc, #100]	; (8006134 <HAL_TIM_Base_Start_IT+0xd8>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d004      	beq.n	80060dc <HAL_TIM_Base_Start_IT+0x80>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a18      	ldr	r2, [pc, #96]	; (8006138 <HAL_TIM_Base_Start_IT+0xdc>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d111      	bne.n	8006100 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	f003 0307 	and.w	r3, r3, #7
 80060e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2b06      	cmp	r3, #6
 80060ec:	d010      	beq.n	8006110 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f042 0201 	orr.w	r2, r2, #1
 80060fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060fe:	e007      	b.n	8006110 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f042 0201 	orr.w	r2, r2, #1
 800610e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	3714      	adds	r7, #20
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr
 800611e:	bf00      	nop
 8006120:	40010000 	.word	0x40010000
 8006124:	40000400 	.word	0x40000400
 8006128:	40000800 	.word	0x40000800
 800612c:	40000c00 	.word	0x40000c00
 8006130:	40010400 	.word	0x40010400
 8006134:	40014000 	.word	0x40014000
 8006138:	40001800 	.word	0x40001800

0800613c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	f003 0302 	and.w	r3, r3, #2
 800614e:	2b02      	cmp	r3, #2
 8006150:	d122      	bne.n	8006198 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	f003 0302 	and.w	r3, r3, #2
 800615c:	2b02      	cmp	r3, #2
 800615e:	d11b      	bne.n	8006198 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f06f 0202 	mvn.w	r2, #2
 8006168:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2201      	movs	r2, #1
 800616e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	699b      	ldr	r3, [r3, #24]
 8006176:	f003 0303 	and.w	r3, r3, #3
 800617a:	2b00      	cmp	r3, #0
 800617c:	d003      	beq.n	8006186 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 f8ee 	bl	8006360 <HAL_TIM_IC_CaptureCallback>
 8006184:	e005      	b.n	8006192 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f000 f8e0 	bl	800634c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f000 f8f1 	bl	8006374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	f003 0304 	and.w	r3, r3, #4
 80061a2:	2b04      	cmp	r3, #4
 80061a4:	d122      	bne.n	80061ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	f003 0304 	and.w	r3, r3, #4
 80061b0:	2b04      	cmp	r3, #4
 80061b2:	d11b      	bne.n	80061ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f06f 0204 	mvn.w	r2, #4
 80061bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2202      	movs	r2, #2
 80061c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	699b      	ldr	r3, [r3, #24]
 80061ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d003      	beq.n	80061da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 f8c4 	bl	8006360 <HAL_TIM_IC_CaptureCallback>
 80061d8:	e005      	b.n	80061e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 f8b6 	bl	800634c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 f8c7 	bl	8006374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	f003 0308 	and.w	r3, r3, #8
 80061f6:	2b08      	cmp	r3, #8
 80061f8:	d122      	bne.n	8006240 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	f003 0308 	and.w	r3, r3, #8
 8006204:	2b08      	cmp	r3, #8
 8006206:	d11b      	bne.n	8006240 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f06f 0208 	mvn.w	r2, #8
 8006210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2204      	movs	r2, #4
 8006216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	69db      	ldr	r3, [r3, #28]
 800621e:	f003 0303 	and.w	r3, r3, #3
 8006222:	2b00      	cmp	r3, #0
 8006224:	d003      	beq.n	800622e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 f89a 	bl	8006360 <HAL_TIM_IC_CaptureCallback>
 800622c:	e005      	b.n	800623a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 f88c 	bl	800634c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 f89d 	bl	8006374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	f003 0310 	and.w	r3, r3, #16
 800624a:	2b10      	cmp	r3, #16
 800624c:	d122      	bne.n	8006294 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	f003 0310 	and.w	r3, r3, #16
 8006258:	2b10      	cmp	r3, #16
 800625a:	d11b      	bne.n	8006294 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f06f 0210 	mvn.w	r2, #16
 8006264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2208      	movs	r2, #8
 800626a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	69db      	ldr	r3, [r3, #28]
 8006272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006276:	2b00      	cmp	r3, #0
 8006278:	d003      	beq.n	8006282 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 f870 	bl	8006360 <HAL_TIM_IC_CaptureCallback>
 8006280:	e005      	b.n	800628e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 f862 	bl	800634c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f000 f873 	bl	8006374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	f003 0301 	and.w	r3, r3, #1
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d10e      	bne.n	80062c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	f003 0301 	and.w	r3, r3, #1
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d107      	bne.n	80062c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f06f 0201 	mvn.w	r2, #1
 80062b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f7fc fd00 	bl	8002cc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ca:	2b80      	cmp	r3, #128	; 0x80
 80062cc:	d10e      	bne.n	80062ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062d8:	2b80      	cmp	r3, #128	; 0x80
 80062da:	d107      	bne.n	80062ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80062e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 f902 	bl	80064f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f6:	2b40      	cmp	r3, #64	; 0x40
 80062f8:	d10e      	bne.n	8006318 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006304:	2b40      	cmp	r3, #64	; 0x40
 8006306:	d107      	bne.n	8006318 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 f838 	bl	8006388 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	f003 0320 	and.w	r3, r3, #32
 8006322:	2b20      	cmp	r3, #32
 8006324:	d10e      	bne.n	8006344 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	f003 0320 	and.w	r3, r3, #32
 8006330:	2b20      	cmp	r3, #32
 8006332:	d107      	bne.n	8006344 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f06f 0220 	mvn.w	r2, #32
 800633c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 f8cc 	bl	80064dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006344:	bf00      	nop
 8006346:	3708      	adds	r7, #8
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006354:	bf00      	nop
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006368:	bf00      	nop
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800637c:	bf00      	nop
 800637e:	370c      	adds	r7, #12
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006390:	bf00      	nop
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800639c:	b480      	push	{r7}
 800639e:	b085      	sub	sp, #20
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4a40      	ldr	r2, [pc, #256]	; (80064b0 <TIM_Base_SetConfig+0x114>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d013      	beq.n	80063dc <TIM_Base_SetConfig+0x40>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063ba:	d00f      	beq.n	80063dc <TIM_Base_SetConfig+0x40>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a3d      	ldr	r2, [pc, #244]	; (80064b4 <TIM_Base_SetConfig+0x118>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d00b      	beq.n	80063dc <TIM_Base_SetConfig+0x40>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a3c      	ldr	r2, [pc, #240]	; (80064b8 <TIM_Base_SetConfig+0x11c>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d007      	beq.n	80063dc <TIM_Base_SetConfig+0x40>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a3b      	ldr	r2, [pc, #236]	; (80064bc <TIM_Base_SetConfig+0x120>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d003      	beq.n	80063dc <TIM_Base_SetConfig+0x40>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4a3a      	ldr	r2, [pc, #232]	; (80064c0 <TIM_Base_SetConfig+0x124>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d108      	bne.n	80063ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	68fa      	ldr	r2, [r7, #12]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a2f      	ldr	r2, [pc, #188]	; (80064b0 <TIM_Base_SetConfig+0x114>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d02b      	beq.n	800644e <TIM_Base_SetConfig+0xb2>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063fc:	d027      	beq.n	800644e <TIM_Base_SetConfig+0xb2>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a2c      	ldr	r2, [pc, #176]	; (80064b4 <TIM_Base_SetConfig+0x118>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d023      	beq.n	800644e <TIM_Base_SetConfig+0xb2>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a2b      	ldr	r2, [pc, #172]	; (80064b8 <TIM_Base_SetConfig+0x11c>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d01f      	beq.n	800644e <TIM_Base_SetConfig+0xb2>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a2a      	ldr	r2, [pc, #168]	; (80064bc <TIM_Base_SetConfig+0x120>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d01b      	beq.n	800644e <TIM_Base_SetConfig+0xb2>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a29      	ldr	r2, [pc, #164]	; (80064c0 <TIM_Base_SetConfig+0x124>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d017      	beq.n	800644e <TIM_Base_SetConfig+0xb2>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a28      	ldr	r2, [pc, #160]	; (80064c4 <TIM_Base_SetConfig+0x128>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d013      	beq.n	800644e <TIM_Base_SetConfig+0xb2>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a27      	ldr	r2, [pc, #156]	; (80064c8 <TIM_Base_SetConfig+0x12c>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d00f      	beq.n	800644e <TIM_Base_SetConfig+0xb2>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a26      	ldr	r2, [pc, #152]	; (80064cc <TIM_Base_SetConfig+0x130>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d00b      	beq.n	800644e <TIM_Base_SetConfig+0xb2>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a25      	ldr	r2, [pc, #148]	; (80064d0 <TIM_Base_SetConfig+0x134>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d007      	beq.n	800644e <TIM_Base_SetConfig+0xb2>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a24      	ldr	r2, [pc, #144]	; (80064d4 <TIM_Base_SetConfig+0x138>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d003      	beq.n	800644e <TIM_Base_SetConfig+0xb2>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a23      	ldr	r2, [pc, #140]	; (80064d8 <TIM_Base_SetConfig+0x13c>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d108      	bne.n	8006460 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006454:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	68fa      	ldr	r2, [r7, #12]
 800645c:	4313      	orrs	r3, r2
 800645e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	695b      	ldr	r3, [r3, #20]
 800646a:	4313      	orrs	r3, r2
 800646c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	68fa      	ldr	r2, [r7, #12]
 8006472:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	689a      	ldr	r2, [r3, #8]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a0a      	ldr	r2, [pc, #40]	; (80064b0 <TIM_Base_SetConfig+0x114>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d003      	beq.n	8006494 <TIM_Base_SetConfig+0xf8>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a0c      	ldr	r2, [pc, #48]	; (80064c0 <TIM_Base_SetConfig+0x124>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d103      	bne.n	800649c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	691a      	ldr	r2, [r3, #16]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	615a      	str	r2, [r3, #20]
}
 80064a2:	bf00      	nop
 80064a4:	3714      	adds	r7, #20
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr
 80064ae:	bf00      	nop
 80064b0:	40010000 	.word	0x40010000
 80064b4:	40000400 	.word	0x40000400
 80064b8:	40000800 	.word	0x40000800
 80064bc:	40000c00 	.word	0x40000c00
 80064c0:	40010400 	.word	0x40010400
 80064c4:	40014000 	.word	0x40014000
 80064c8:	40014400 	.word	0x40014400
 80064cc:	40014800 	.word	0x40014800
 80064d0:	40001800 	.word	0x40001800
 80064d4:	40001c00 	.word	0x40001c00
 80064d8:	40002000 	.word	0x40002000

080064dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064e4:	bf00      	nop
 80064e6:	370c      	adds	r7, #12
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064f8:	bf00      	nop
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d101      	bne.n	8006516 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e03f      	b.n	8006596 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800651c:	b2db      	uxtb	r3, r3
 800651e:	2b00      	cmp	r3, #0
 8006520:	d106      	bne.n	8006530 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f7fc fc9c 	bl	8002e68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2224      	movs	r2, #36	; 0x24
 8006534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68da      	ldr	r2, [r3, #12]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006546:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f001 f903 	bl	8007754 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	691a      	ldr	r2, [r3, #16]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800655c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	695a      	ldr	r2, [r3, #20]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800656c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68da      	ldr	r2, [r3, #12]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800657c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2220      	movs	r2, #32
 8006588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2220      	movs	r2, #32
 8006590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	3708      	adds	r7, #8
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}

0800659e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800659e:	b580      	push	{r7, lr}
 80065a0:	b08a      	sub	sp, #40	; 0x28
 80065a2:	af02      	add	r7, sp, #8
 80065a4:	60f8      	str	r0, [r7, #12]
 80065a6:	60b9      	str	r1, [r7, #8]
 80065a8:	603b      	str	r3, [r7, #0]
 80065aa:	4613      	mov	r3, r2
 80065ac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80065ae:	2300      	movs	r3, #0
 80065b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	2b20      	cmp	r3, #32
 80065bc:	d17c      	bne.n	80066b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d002      	beq.n	80065ca <HAL_UART_Transmit+0x2c>
 80065c4:	88fb      	ldrh	r3, [r7, #6]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d101      	bne.n	80065ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e075      	b.n	80066ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d101      	bne.n	80065dc <HAL_UART_Transmit+0x3e>
 80065d8:	2302      	movs	r3, #2
 80065da:	e06e      	b.n	80066ba <HAL_UART_Transmit+0x11c>
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2200      	movs	r2, #0
 80065e8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2221      	movs	r2, #33	; 0x21
 80065ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80065f2:	f7fd fabf 	bl	8003b74 <HAL_GetTick>
 80065f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	88fa      	ldrh	r2, [r7, #6]
 80065fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	88fa      	ldrh	r2, [r7, #6]
 8006602:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800660c:	d108      	bne.n	8006620 <HAL_UART_Transmit+0x82>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	691b      	ldr	r3, [r3, #16]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d104      	bne.n	8006620 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006616:	2300      	movs	r3, #0
 8006618:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	61bb      	str	r3, [r7, #24]
 800661e:	e003      	b.n	8006628 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006624:	2300      	movs	r3, #0
 8006626:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2200      	movs	r2, #0
 800662c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006630:	e02a      	b.n	8006688 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	9300      	str	r3, [sp, #0]
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	2200      	movs	r2, #0
 800663a:	2180      	movs	r1, #128	; 0x80
 800663c:	68f8      	ldr	r0, [r7, #12]
 800663e:	f000 fdbe 	bl	80071be <UART_WaitOnFlagUntilTimeout>
 8006642:	4603      	mov	r3, r0
 8006644:	2b00      	cmp	r3, #0
 8006646:	d001      	beq.n	800664c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006648:	2303      	movs	r3, #3
 800664a:	e036      	b.n	80066ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800664c:	69fb      	ldr	r3, [r7, #28]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d10b      	bne.n	800666a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	881b      	ldrh	r3, [r3, #0]
 8006656:	461a      	mov	r2, r3
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006660:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	3302      	adds	r3, #2
 8006666:	61bb      	str	r3, [r7, #24]
 8006668:	e007      	b.n	800667a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	781a      	ldrb	r2, [r3, #0]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006674:	69fb      	ldr	r3, [r7, #28]
 8006676:	3301      	adds	r3, #1
 8006678:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800667e:	b29b      	uxth	r3, r3
 8006680:	3b01      	subs	r3, #1
 8006682:	b29a      	uxth	r2, r3
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800668c:	b29b      	uxth	r3, r3
 800668e:	2b00      	cmp	r3, #0
 8006690:	d1cf      	bne.n	8006632 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	9300      	str	r3, [sp, #0]
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	2200      	movs	r2, #0
 800669a:	2140      	movs	r1, #64	; 0x40
 800669c:	68f8      	ldr	r0, [r7, #12]
 800669e:	f000 fd8e 	bl	80071be <UART_WaitOnFlagUntilTimeout>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d001      	beq.n	80066ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80066a8:	2303      	movs	r3, #3
 80066aa:	e006      	b.n	80066ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2220      	movs	r2, #32
 80066b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80066b4:	2300      	movs	r3, #0
 80066b6:	e000      	b.n	80066ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80066b8:	2302      	movs	r3, #2
  }
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3720      	adds	r7, #32
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}

080066c2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80066c2:	b480      	push	{r7}
 80066c4:	b085      	sub	sp, #20
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	60f8      	str	r0, [r7, #12]
 80066ca:	60b9      	str	r1, [r7, #8]
 80066cc:	4613      	mov	r3, r2
 80066ce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	2b20      	cmp	r3, #32
 80066da:	d130      	bne.n	800673e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d002      	beq.n	80066e8 <HAL_UART_Transmit_IT+0x26>
 80066e2:	88fb      	ldrh	r3, [r7, #6]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d101      	bne.n	80066ec <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	e029      	b.n	8006740 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d101      	bne.n	80066fa <HAL_UART_Transmit_IT+0x38>
 80066f6:	2302      	movs	r3, #2
 80066f8:	e022      	b.n	8006740 <HAL_UART_Transmit_IT+0x7e>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2201      	movs	r2, #1
 80066fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	68ba      	ldr	r2, [r7, #8]
 8006706:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	88fa      	ldrh	r2, [r7, #6]
 800670c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	88fa      	ldrh	r2, [r7, #6]
 8006712:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2200      	movs	r2, #0
 8006718:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2221      	movs	r2, #33	; 0x21
 800671e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68da      	ldr	r2, [r3, #12]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006738:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800673a:	2300      	movs	r3, #0
 800673c:	e000      	b.n	8006740 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800673e:	2302      	movs	r3, #2
  }
}
 8006740:	4618      	mov	r0, r3
 8006742:	3714      	adds	r7, #20
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr

0800674c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b08c      	sub	sp, #48	; 0x30
 8006750:	af00      	add	r7, sp, #0
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	60b9      	str	r1, [r7, #8]
 8006756:	4613      	mov	r3, r2
 8006758:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006760:	b2db      	uxtb	r3, r3
 8006762:	2b20      	cmp	r3, #32
 8006764:	d165      	bne.n	8006832 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d002      	beq.n	8006772 <HAL_UART_Transmit_DMA+0x26>
 800676c:	88fb      	ldrh	r3, [r7, #6]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d101      	bne.n	8006776 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	e05e      	b.n	8006834 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800677c:	2b01      	cmp	r3, #1
 800677e:	d101      	bne.n	8006784 <HAL_UART_Transmit_DMA+0x38>
 8006780:	2302      	movs	r3, #2
 8006782:	e057      	b.n	8006834 <HAL_UART_Transmit_DMA+0xe8>
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800678c:	68ba      	ldr	r2, [r7, #8]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	88fa      	ldrh	r2, [r7, #6]
 8006796:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	88fa      	ldrh	r2, [r7, #6]
 800679c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2200      	movs	r2, #0
 80067a2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2221      	movs	r2, #33	; 0x21
 80067a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067b0:	4a22      	ldr	r2, [pc, #136]	; (800683c <HAL_UART_Transmit_DMA+0xf0>)
 80067b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067b8:	4a21      	ldr	r2, [pc, #132]	; (8006840 <HAL_UART_Transmit_DMA+0xf4>)
 80067ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067c0:	4a20      	ldr	r2, [pc, #128]	; (8006844 <HAL_UART_Transmit_DMA+0xf8>)
 80067c2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067c8:	2200      	movs	r2, #0
 80067ca:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80067cc:	f107 0308 	add.w	r3, r7, #8
 80067d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80067d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d8:	6819      	ldr	r1, [r3, #0]
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	3304      	adds	r3, #4
 80067e0:	461a      	mov	r2, r3
 80067e2:	88fb      	ldrh	r3, [r7, #6]
 80067e4:	f7fd fba2 	bl	8003f2c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80067f0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	3314      	adds	r3, #20
 8006800:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	e853 3f00 	ldrex	r3, [r3]
 8006808:	617b      	str	r3, [r7, #20]
   return(result);
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006810:	62bb      	str	r3, [r7, #40]	; 0x28
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	3314      	adds	r3, #20
 8006818:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800681a:	627a      	str	r2, [r7, #36]	; 0x24
 800681c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800681e:	6a39      	ldr	r1, [r7, #32]
 8006820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006822:	e841 2300 	strex	r3, r2, [r1]
 8006826:	61fb      	str	r3, [r7, #28]
   return(result);
 8006828:	69fb      	ldr	r3, [r7, #28]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d1e5      	bne.n	80067fa <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800682e:	2300      	movs	r3, #0
 8006830:	e000      	b.n	8006834 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8006832:	2302      	movs	r3, #2
  }
}
 8006834:	4618      	mov	r0, r3
 8006836:	3730      	adds	r7, #48	; 0x30
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}
 800683c:	08006f19 	.word	0x08006f19
 8006840:	08006fb3 	.word	0x08006fb3
 8006844:	0800712b 	.word	0x0800712b

08006848 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	4613      	mov	r3, r2
 8006854:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800685c:	b2db      	uxtb	r3, r3
 800685e:	2b20      	cmp	r3, #32
 8006860:	d11d      	bne.n	800689e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d002      	beq.n	800686e <HAL_UART_Receive_DMA+0x26>
 8006868:	88fb      	ldrh	r3, [r7, #6]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d101      	bne.n	8006872 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	e016      	b.n	80068a0 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006878:	2b01      	cmp	r3, #1
 800687a:	d101      	bne.n	8006880 <HAL_UART_Receive_DMA+0x38>
 800687c:	2302      	movs	r3, #2
 800687e:	e00f      	b.n	80068a0 <HAL_UART_Receive_DMA+0x58>
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2200      	movs	r2, #0
 800688c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800688e:	88fb      	ldrh	r3, [r7, #6]
 8006890:	461a      	mov	r2, r3
 8006892:	68b9      	ldr	r1, [r7, #8]
 8006894:	68f8      	ldr	r0, [r7, #12]
 8006896:	f000 fd01 	bl	800729c <UART_Start_Receive_DMA>
 800689a:	4603      	mov	r3, r0
 800689c:	e000      	b.n	80068a0 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800689e:	2302      	movs	r3, #2
  }
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3710      	adds	r7, #16
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b090      	sub	sp, #64	; 0x40
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80068b0:	2300      	movs	r3, #0
 80068b2:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	695b      	ldr	r3, [r3, #20]
 80068ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068be:	2b80      	cmp	r3, #128	; 0x80
 80068c0:	bf0c      	ite	eq
 80068c2:	2301      	moveq	r3, #1
 80068c4:	2300      	movne	r3, #0
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	2b21      	cmp	r3, #33	; 0x21
 80068d4:	d128      	bne.n	8006928 <HAL_UART_DMAStop+0x80>
 80068d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d025      	beq.n	8006928 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	3314      	adds	r3, #20
 80068e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e6:	e853 3f00 	ldrex	r3, [r3]
 80068ea:	623b      	str	r3, [r7, #32]
   return(result);
 80068ec:	6a3b      	ldr	r3, [r7, #32]
 80068ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	3314      	adds	r3, #20
 80068fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068fc:	633a      	str	r2, [r7, #48]	; 0x30
 80068fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006900:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006902:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006904:	e841 2300 	strex	r3, r2, [r1]
 8006908:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800690a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800690c:	2b00      	cmp	r3, #0
 800690e:	d1e5      	bne.n	80068dc <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006914:	2b00      	cmp	r3, #0
 8006916:	d004      	beq.n	8006922 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800691c:	4618      	mov	r0, r3
 800691e:	f7fd fb5d 	bl	8003fdc <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 fd54 	bl	80073d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	695b      	ldr	r3, [r3, #20]
 800692e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006932:	2b40      	cmp	r3, #64	; 0x40
 8006934:	bf0c      	ite	eq
 8006936:	2301      	moveq	r3, #1
 8006938:	2300      	movne	r3, #0
 800693a:	b2db      	uxtb	r3, r3
 800693c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006944:	b2db      	uxtb	r3, r3
 8006946:	2b22      	cmp	r3, #34	; 0x22
 8006948:	d128      	bne.n	800699c <HAL_UART_DMAStop+0xf4>
 800694a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800694c:	2b00      	cmp	r3, #0
 800694e:	d025      	beq.n	800699c <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	3314      	adds	r3, #20
 8006956:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	e853 3f00 	ldrex	r3, [r3]
 800695e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006966:	637b      	str	r3, [r7, #52]	; 0x34
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	3314      	adds	r3, #20
 800696e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006970:	61fa      	str	r2, [r7, #28]
 8006972:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006974:	69b9      	ldr	r1, [r7, #24]
 8006976:	69fa      	ldr	r2, [r7, #28]
 8006978:	e841 2300 	strex	r3, r2, [r1]
 800697c:	617b      	str	r3, [r7, #20]
   return(result);
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d1e5      	bne.n	8006950 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006988:	2b00      	cmp	r3, #0
 800698a:	d004      	beq.n	8006996 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006990:	4618      	mov	r0, r3
 8006992:	f7fd fb23 	bl	8003fdc <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 fd42 	bl	8007420 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800699c:	2300      	movs	r3, #0
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3740      	adds	r7, #64	; 0x40
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
	...

080069a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b0ba      	sub	sp, #232	; 0xe8
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	695b      	ldr	r3, [r3, #20]
 80069ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80069ce:	2300      	movs	r3, #0
 80069d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80069d4:	2300      	movs	r3, #0
 80069d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80069da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069de:	f003 030f 	and.w	r3, r3, #15
 80069e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80069e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d10f      	bne.n	8006a0e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80069ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069f2:	f003 0320 	and.w	r3, r3, #32
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d009      	beq.n	8006a0e <HAL_UART_IRQHandler+0x66>
 80069fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069fe:	f003 0320 	and.w	r3, r3, #32
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d003      	beq.n	8006a0e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 fde9 	bl	80075de <UART_Receive_IT>
      return;
 8006a0c:	e256      	b.n	8006ebc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006a0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	f000 80de 	beq.w	8006bd4 <HAL_UART_IRQHandler+0x22c>
 8006a18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a1c:	f003 0301 	and.w	r3, r3, #1
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d106      	bne.n	8006a32 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006a24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a28:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	f000 80d1 	beq.w	8006bd4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a36:	f003 0301 	and.w	r3, r3, #1
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d00b      	beq.n	8006a56 <HAL_UART_IRQHandler+0xae>
 8006a3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d005      	beq.n	8006a56 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a4e:	f043 0201 	orr.w	r2, r3, #1
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a5a:	f003 0304 	and.w	r3, r3, #4
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d00b      	beq.n	8006a7a <HAL_UART_IRQHandler+0xd2>
 8006a62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a66:	f003 0301 	and.w	r3, r3, #1
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d005      	beq.n	8006a7a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a72:	f043 0202 	orr.w	r2, r3, #2
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a7e:	f003 0302 	and.w	r3, r3, #2
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d00b      	beq.n	8006a9e <HAL_UART_IRQHandler+0xf6>
 8006a86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a8a:	f003 0301 	and.w	r3, r3, #1
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d005      	beq.n	8006a9e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a96:	f043 0204 	orr.w	r2, r3, #4
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aa2:	f003 0308 	and.w	r3, r3, #8
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d011      	beq.n	8006ace <HAL_UART_IRQHandler+0x126>
 8006aaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006aae:	f003 0320 	and.w	r3, r3, #32
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d105      	bne.n	8006ac2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006ab6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006aba:	f003 0301 	and.w	r3, r3, #1
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d005      	beq.n	8006ace <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac6:	f043 0208 	orr.w	r2, r3, #8
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	f000 81ed 	beq.w	8006eb2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006ad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006adc:	f003 0320 	and.w	r3, r3, #32
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d008      	beq.n	8006af6 <HAL_UART_IRQHandler+0x14e>
 8006ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ae8:	f003 0320 	and.w	r3, r3, #32
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d002      	beq.n	8006af6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 fd74 	bl	80075de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	695b      	ldr	r3, [r3, #20]
 8006afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b00:	2b40      	cmp	r3, #64	; 0x40
 8006b02:	bf0c      	ite	eq
 8006b04:	2301      	moveq	r3, #1
 8006b06:	2300      	movne	r3, #0
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b12:	f003 0308 	and.w	r3, r3, #8
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d103      	bne.n	8006b22 <HAL_UART_IRQHandler+0x17a>
 8006b1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d04f      	beq.n	8006bc2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 fc7c 	bl	8007420 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	695b      	ldr	r3, [r3, #20]
 8006b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b32:	2b40      	cmp	r3, #64	; 0x40
 8006b34:	d141      	bne.n	8006bba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	3314      	adds	r3, #20
 8006b3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b44:	e853 3f00 	ldrex	r3, [r3]
 8006b48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006b4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	3314      	adds	r3, #20
 8006b5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006b62:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006b66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006b6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006b72:	e841 2300 	strex	r3, r2, [r1]
 8006b76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006b7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d1d9      	bne.n	8006b36 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d013      	beq.n	8006bb2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b8e:	4a7d      	ldr	r2, [pc, #500]	; (8006d84 <HAL_UART_IRQHandler+0x3dc>)
 8006b90:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b96:	4618      	mov	r0, r3
 8006b98:	f7fd fa90 	bl	80040bc <HAL_DMA_Abort_IT>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d016      	beq.n	8006bd0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ba8:	687a      	ldr	r2, [r7, #4]
 8006baa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006bac:	4610      	mov	r0, r2
 8006bae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bb0:	e00e      	b.n	8006bd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 f99a 	bl	8006eec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bb8:	e00a      	b.n	8006bd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 f996 	bl	8006eec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bc0:	e006      	b.n	8006bd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 f992 	bl	8006eec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006bce:	e170      	b.n	8006eb2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bd0:	bf00      	nop
    return;
 8006bd2:	e16e      	b.n	8006eb2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	f040 814a 	bne.w	8006e72 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006be2:	f003 0310 	and.w	r3, r3, #16
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	f000 8143 	beq.w	8006e72 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006bec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bf0:	f003 0310 	and.w	r3, r3, #16
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	f000 813c 	beq.w	8006e72 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	60bb      	str	r3, [r7, #8]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	60bb      	str	r3, [r7, #8]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	60bb      	str	r3, [r7, #8]
 8006c0e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	695b      	ldr	r3, [r3, #20]
 8006c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c1a:	2b40      	cmp	r3, #64	; 0x40
 8006c1c:	f040 80b4 	bne.w	8006d88 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006c2c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	f000 8140 	beq.w	8006eb6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006c3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	f080 8139 	bcs.w	8006eb6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006c4a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c50:	69db      	ldr	r3, [r3, #28]
 8006c52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c56:	f000 8088 	beq.w	8006d6a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	330c      	adds	r3, #12
 8006c60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c68:	e853 3f00 	ldrex	r3, [r3]
 8006c6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006c70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	330c      	adds	r3, #12
 8006c82:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006c86:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006c8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c8e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006c92:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006c96:	e841 2300 	strex	r3, r2, [r1]
 8006c9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006c9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d1d9      	bne.n	8006c5a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	3314      	adds	r3, #20
 8006cac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cb0:	e853 3f00 	ldrex	r3, [r3]
 8006cb4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006cb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006cb8:	f023 0301 	bic.w	r3, r3, #1
 8006cbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	3314      	adds	r3, #20
 8006cc6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006cca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006cce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006cd2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006cd6:	e841 2300 	strex	r3, r2, [r1]
 8006cda:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006cdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d1e1      	bne.n	8006ca6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	3314      	adds	r3, #20
 8006ce8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006cec:	e853 3f00 	ldrex	r3, [r3]
 8006cf0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006cf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cf8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	3314      	adds	r3, #20
 8006d02:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006d06:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006d08:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d0a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006d0c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006d0e:	e841 2300 	strex	r3, r2, [r1]
 8006d12:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006d14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d1e3      	bne.n	8006ce2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2220      	movs	r2, #32
 8006d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	330c      	adds	r3, #12
 8006d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d32:	e853 3f00 	ldrex	r3, [r3]
 8006d36:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006d38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d3a:	f023 0310 	bic.w	r3, r3, #16
 8006d3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	330c      	adds	r3, #12
 8006d48:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006d4c:	65ba      	str	r2, [r7, #88]	; 0x58
 8006d4e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d50:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006d52:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006d54:	e841 2300 	strex	r3, r2, [r1]
 8006d58:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006d5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d1e3      	bne.n	8006d28 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d64:	4618      	mov	r0, r3
 8006d66:	f7fd f939 	bl	8003fdc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	1ad3      	subs	r3, r2, r3
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	4619      	mov	r1, r3
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 f8c0 	bl	8006f00 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d80:	e099      	b.n	8006eb6 <HAL_UART_IRQHandler+0x50e>
 8006d82:	bf00      	nop
 8006d84:	080074e7 	.word	0x080074e7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	f000 808b 	beq.w	8006eba <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006da4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	f000 8086 	beq.w	8006eba <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	330c      	adds	r3, #12
 8006db4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db8:	e853 3f00 	ldrex	r3, [r3]
 8006dbc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006dc4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	330c      	adds	r3, #12
 8006dce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006dd2:	647a      	str	r2, [r7, #68]	; 0x44
 8006dd4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006dd8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006dda:	e841 2300 	strex	r3, r2, [r1]
 8006dde:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006de0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d1e3      	bne.n	8006dae <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	3314      	adds	r3, #20
 8006dec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df0:	e853 3f00 	ldrex	r3, [r3]
 8006df4:	623b      	str	r3, [r7, #32]
   return(result);
 8006df6:	6a3b      	ldr	r3, [r7, #32]
 8006df8:	f023 0301 	bic.w	r3, r3, #1
 8006dfc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	3314      	adds	r3, #20
 8006e06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006e0a:	633a      	str	r2, [r7, #48]	; 0x30
 8006e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e12:	e841 2300 	strex	r3, r2, [r1]
 8006e16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d1e3      	bne.n	8006de6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2220      	movs	r2, #32
 8006e22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	330c      	adds	r3, #12
 8006e32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	e853 3f00 	ldrex	r3, [r3]
 8006e3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f023 0310 	bic.w	r3, r3, #16
 8006e42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	330c      	adds	r3, #12
 8006e4c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006e50:	61fa      	str	r2, [r7, #28]
 8006e52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e54:	69b9      	ldr	r1, [r7, #24]
 8006e56:	69fa      	ldr	r2, [r7, #28]
 8006e58:	e841 2300 	strex	r3, r2, [r1]
 8006e5c:	617b      	str	r3, [r7, #20]
   return(result);
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d1e3      	bne.n	8006e2c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e68:	4619      	mov	r1, r3
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 f848 	bl	8006f00 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006e70:	e023      	b.n	8006eba <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d009      	beq.n	8006e92 <HAL_UART_IRQHandler+0x4ea>
 8006e7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d003      	beq.n	8006e92 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 fb3f 	bl	800750e <UART_Transmit_IT>
    return;
 8006e90:	e014      	b.n	8006ebc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d00e      	beq.n	8006ebc <HAL_UART_IRQHandler+0x514>
 8006e9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d008      	beq.n	8006ebc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 fb7f 	bl	80075ae <UART_EndTransmit_IT>
    return;
 8006eb0:	e004      	b.n	8006ebc <HAL_UART_IRQHandler+0x514>
    return;
 8006eb2:	bf00      	nop
 8006eb4:	e002      	b.n	8006ebc <HAL_UART_IRQHandler+0x514>
      return;
 8006eb6:	bf00      	nop
 8006eb8:	e000      	b.n	8006ebc <HAL_UART_IRQHandler+0x514>
      return;
 8006eba:	bf00      	nop
  }
}
 8006ebc:	37e8      	adds	r7, #232	; 0xe8
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	bf00      	nop

08006ec4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006ecc:	bf00      	nop
 8006ece:	370c      	adds	r7, #12
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006ee0:	bf00      	nop
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006ef4:	bf00      	nop
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	460b      	mov	r3, r1
 8006f0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f0c:	bf00      	nop
 8006f0e:	370c      	adds	r7, #12
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b090      	sub	sp, #64	; 0x40
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f24:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d137      	bne.n	8006fa4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006f34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f36:	2200      	movs	r2, #0
 8006f38:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006f3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	3314      	adds	r3, #20
 8006f40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f44:	e853 3f00 	ldrex	r3, [r3]
 8006f48:	623b      	str	r3, [r7, #32]
   return(result);
 8006f4a:	6a3b      	ldr	r3, [r7, #32]
 8006f4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f50:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	3314      	adds	r3, #20
 8006f58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f5a:	633a      	str	r2, [r7, #48]	; 0x30
 8006f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f62:	e841 2300 	strex	r3, r2, [r1]
 8006f66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d1e5      	bne.n	8006f3a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	330c      	adds	r3, #12
 8006f74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	e853 3f00 	ldrex	r3, [r3]
 8006f7c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f84:	637b      	str	r3, [r7, #52]	; 0x34
 8006f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	330c      	adds	r3, #12
 8006f8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f8e:	61fa      	str	r2, [r7, #28]
 8006f90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f92:	69b9      	ldr	r1, [r7, #24]
 8006f94:	69fa      	ldr	r2, [r7, #28]
 8006f96:	e841 2300 	strex	r3, r2, [r1]
 8006f9a:	617b      	str	r3, [r7, #20]
   return(result);
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d1e5      	bne.n	8006f6e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006fa2:	e002      	b.n	8006faa <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006fa4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006fa6:	f7f9 fe33 	bl	8000c10 <HAL_UART_TxCpltCallback>
}
 8006faa:	bf00      	nop
 8006fac:	3740      	adds	r7, #64	; 0x40
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}

08006fb2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006fb2:	b580      	push	{r7, lr}
 8006fb4:	b084      	sub	sp, #16
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fbe:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006fc0:	68f8      	ldr	r0, [r7, #12]
 8006fc2:	f7ff ff7f 	bl	8006ec4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fc6:	bf00      	nop
 8006fc8:	3710      	adds	r7, #16
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}

08006fce <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006fce:	b580      	push	{r7, lr}
 8006fd0:	b09c      	sub	sp, #112	; 0x70
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fda:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d172      	bne.n	80070d0 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006fea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fec:	2200      	movs	r2, #0
 8006fee:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ff0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	330c      	adds	r3, #12
 8006ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ffa:	e853 3f00 	ldrex	r3, [r3]
 8006ffe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007000:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007002:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007006:	66bb      	str	r3, [r7, #104]	; 0x68
 8007008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	330c      	adds	r3, #12
 800700e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007010:	65ba      	str	r2, [r7, #88]	; 0x58
 8007012:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007014:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007016:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007018:	e841 2300 	strex	r3, r2, [r1]
 800701c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800701e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007020:	2b00      	cmp	r3, #0
 8007022:	d1e5      	bne.n	8006ff0 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007024:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	3314      	adds	r3, #20
 800702a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800702c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800702e:	e853 3f00 	ldrex	r3, [r3]
 8007032:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007036:	f023 0301 	bic.w	r3, r3, #1
 800703a:	667b      	str	r3, [r7, #100]	; 0x64
 800703c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	3314      	adds	r3, #20
 8007042:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007044:	647a      	str	r2, [r7, #68]	; 0x44
 8007046:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007048:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800704a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800704c:	e841 2300 	strex	r3, r2, [r1]
 8007050:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007054:	2b00      	cmp	r3, #0
 8007056:	d1e5      	bne.n	8007024 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007058:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	3314      	adds	r3, #20
 800705e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007062:	e853 3f00 	ldrex	r3, [r3]
 8007066:	623b      	str	r3, [r7, #32]
   return(result);
 8007068:	6a3b      	ldr	r3, [r7, #32]
 800706a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800706e:	663b      	str	r3, [r7, #96]	; 0x60
 8007070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	3314      	adds	r3, #20
 8007076:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007078:	633a      	str	r2, [r7, #48]	; 0x30
 800707a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800707c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800707e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007080:	e841 2300 	strex	r3, r2, [r1]
 8007084:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007088:	2b00      	cmp	r3, #0
 800708a:	d1e5      	bne.n	8007058 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800708c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800708e:	2220      	movs	r2, #32
 8007090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007094:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007098:	2b01      	cmp	r3, #1
 800709a:	d119      	bne.n	80070d0 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800709c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	330c      	adds	r3, #12
 80070a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	e853 3f00 	ldrex	r3, [r3]
 80070aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f023 0310 	bic.w	r3, r3, #16
 80070b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80070b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	330c      	adds	r3, #12
 80070ba:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80070bc:	61fa      	str	r2, [r7, #28]
 80070be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c0:	69b9      	ldr	r1, [r7, #24]
 80070c2:	69fa      	ldr	r2, [r7, #28]
 80070c4:	e841 2300 	strex	r3, r2, [r1]
 80070c8:	617b      	str	r3, [r7, #20]
   return(result);
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d1e5      	bne.n	800709c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d106      	bne.n	80070e6 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070da:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80070dc:	4619      	mov	r1, r3
 80070de:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80070e0:	f7ff ff0e 	bl	8006f00 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80070e4:	e002      	b.n	80070ec <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80070e6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80070e8:	f7f9 fd7c 	bl	8000be4 <HAL_UART_RxCpltCallback>
}
 80070ec:	bf00      	nop
 80070ee:	3770      	adds	r7, #112	; 0x70
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b084      	sub	sp, #16
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007100:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007106:	2b01      	cmp	r3, #1
 8007108:	d108      	bne.n	800711c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800710e:	085b      	lsrs	r3, r3, #1
 8007110:	b29b      	uxth	r3, r3
 8007112:	4619      	mov	r1, r3
 8007114:	68f8      	ldr	r0, [r7, #12]
 8007116:	f7ff fef3 	bl	8006f00 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800711a:	e002      	b.n	8007122 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800711c:	68f8      	ldr	r0, [r7, #12]
 800711e:	f7ff fedb 	bl	8006ed8 <HAL_UART_RxHalfCpltCallback>
}
 8007122:	bf00      	nop
 8007124:	3710      	adds	r7, #16
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}

0800712a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800712a:	b580      	push	{r7, lr}
 800712c:	b084      	sub	sp, #16
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007132:	2300      	movs	r3, #0
 8007134:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800713a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	695b      	ldr	r3, [r3, #20]
 8007142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007146:	2b80      	cmp	r3, #128	; 0x80
 8007148:	bf0c      	ite	eq
 800714a:	2301      	moveq	r3, #1
 800714c:	2300      	movne	r3, #0
 800714e:	b2db      	uxtb	r3, r3
 8007150:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007158:	b2db      	uxtb	r3, r3
 800715a:	2b21      	cmp	r3, #33	; 0x21
 800715c:	d108      	bne.n	8007170 <UART_DMAError+0x46>
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d005      	beq.n	8007170 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	2200      	movs	r2, #0
 8007168:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800716a:	68b8      	ldr	r0, [r7, #8]
 800716c:	f000 f930 	bl	80073d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	695b      	ldr	r3, [r3, #20]
 8007176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800717a:	2b40      	cmp	r3, #64	; 0x40
 800717c:	bf0c      	ite	eq
 800717e:	2301      	moveq	r3, #1
 8007180:	2300      	movne	r3, #0
 8007182:	b2db      	uxtb	r3, r3
 8007184:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800718c:	b2db      	uxtb	r3, r3
 800718e:	2b22      	cmp	r3, #34	; 0x22
 8007190:	d108      	bne.n	80071a4 <UART_DMAError+0x7a>
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d005      	beq.n	80071a4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	2200      	movs	r2, #0
 800719c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800719e:	68b8      	ldr	r0, [r7, #8]
 80071a0:	f000 f93e 	bl	8007420 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a8:	f043 0210 	orr.w	r2, r3, #16
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80071b0:	68b8      	ldr	r0, [r7, #8]
 80071b2:	f7ff fe9b 	bl	8006eec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071b6:	bf00      	nop
 80071b8:	3710      	adds	r7, #16
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}

080071be <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80071be:	b580      	push	{r7, lr}
 80071c0:	b090      	sub	sp, #64	; 0x40
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	60f8      	str	r0, [r7, #12]
 80071c6:	60b9      	str	r1, [r7, #8]
 80071c8:	603b      	str	r3, [r7, #0]
 80071ca:	4613      	mov	r3, r2
 80071cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071ce:	e050      	b.n	8007272 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071d6:	d04c      	beq.n	8007272 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80071d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d007      	beq.n	80071ee <UART_WaitOnFlagUntilTimeout+0x30>
 80071de:	f7fc fcc9 	bl	8003b74 <HAL_GetTick>
 80071e2:	4602      	mov	r2, r0
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	1ad3      	subs	r3, r2, r3
 80071e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d241      	bcs.n	8007272 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	330c      	adds	r3, #12
 80071f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f8:	e853 3f00 	ldrex	r3, [r3]
 80071fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007200:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007204:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	330c      	adds	r3, #12
 800720c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800720e:	637a      	str	r2, [r7, #52]	; 0x34
 8007210:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007212:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007214:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007216:	e841 2300 	strex	r3, r2, [r1]
 800721a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800721c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800721e:	2b00      	cmp	r3, #0
 8007220:	d1e5      	bne.n	80071ee <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	3314      	adds	r3, #20
 8007228:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	e853 3f00 	ldrex	r3, [r3]
 8007230:	613b      	str	r3, [r7, #16]
   return(result);
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	f023 0301 	bic.w	r3, r3, #1
 8007238:	63bb      	str	r3, [r7, #56]	; 0x38
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	3314      	adds	r3, #20
 8007240:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007242:	623a      	str	r2, [r7, #32]
 8007244:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007246:	69f9      	ldr	r1, [r7, #28]
 8007248:	6a3a      	ldr	r2, [r7, #32]
 800724a:	e841 2300 	strex	r3, r2, [r1]
 800724e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007250:	69bb      	ldr	r3, [r7, #24]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d1e5      	bne.n	8007222 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2220      	movs	r2, #32
 800725a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2220      	movs	r2, #32
 8007262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2200      	movs	r2, #0
 800726a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800726e:	2303      	movs	r3, #3
 8007270:	e00f      	b.n	8007292 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	4013      	ands	r3, r2
 800727c:	68ba      	ldr	r2, [r7, #8]
 800727e:	429a      	cmp	r2, r3
 8007280:	bf0c      	ite	eq
 8007282:	2301      	moveq	r3, #1
 8007284:	2300      	movne	r3, #0
 8007286:	b2db      	uxtb	r3, r3
 8007288:	461a      	mov	r2, r3
 800728a:	79fb      	ldrb	r3, [r7, #7]
 800728c:	429a      	cmp	r2, r3
 800728e:	d09f      	beq.n	80071d0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	3740      	adds	r7, #64	; 0x40
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
	...

0800729c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b098      	sub	sp, #96	; 0x60
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	4613      	mov	r3, r2
 80072a8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80072aa:	68ba      	ldr	r2, [r7, #8]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	88fa      	ldrh	r2, [r7, #6]
 80072b4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2200      	movs	r2, #0
 80072ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2222      	movs	r2, #34	; 0x22
 80072c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c8:	4a3e      	ldr	r2, [pc, #248]	; (80073c4 <UART_Start_Receive_DMA+0x128>)
 80072ca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d0:	4a3d      	ldr	r2, [pc, #244]	; (80073c8 <UART_Start_Receive_DMA+0x12c>)
 80072d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d8:	4a3c      	ldr	r2, [pc, #240]	; (80073cc <UART_Start_Receive_DMA+0x130>)
 80072da:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e0:	2200      	movs	r2, #0
 80072e2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80072e4:	f107 0308 	add.w	r3, r7, #8
 80072e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	3304      	adds	r3, #4
 80072f4:	4619      	mov	r1, r3
 80072f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	88fb      	ldrh	r3, [r7, #6]
 80072fc:	f7fc fe16 	bl	8003f2c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007300:	2300      	movs	r3, #0
 8007302:	613b      	str	r3, [r7, #16]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	613b      	str	r3, [r7, #16]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	613b      	str	r3, [r7, #16]
 8007314:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2200      	movs	r2, #0
 800731a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	330c      	adds	r3, #12
 8007324:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007326:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007328:	e853 3f00 	ldrex	r3, [r3]
 800732c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800732e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007334:	65bb      	str	r3, [r7, #88]	; 0x58
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	330c      	adds	r3, #12
 800733c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800733e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007340:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007342:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007344:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007346:	e841 2300 	strex	r3, r2, [r1]
 800734a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800734c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800734e:	2b00      	cmp	r3, #0
 8007350:	d1e5      	bne.n	800731e <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	3314      	adds	r3, #20
 8007358:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800735a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800735c:	e853 3f00 	ldrex	r3, [r3]
 8007360:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007364:	f043 0301 	orr.w	r3, r3, #1
 8007368:	657b      	str	r3, [r7, #84]	; 0x54
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	3314      	adds	r3, #20
 8007370:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007372:	63ba      	str	r2, [r7, #56]	; 0x38
 8007374:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007376:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007378:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800737a:	e841 2300 	strex	r3, r2, [r1]
 800737e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007382:	2b00      	cmp	r3, #0
 8007384:	d1e5      	bne.n	8007352 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	3314      	adds	r3, #20
 800738c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800738e:	69bb      	ldr	r3, [r7, #24]
 8007390:	e853 3f00 	ldrex	r3, [r3]
 8007394:	617b      	str	r3, [r7, #20]
   return(result);
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800739c:	653b      	str	r3, [r7, #80]	; 0x50
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	3314      	adds	r3, #20
 80073a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80073a6:	627a      	str	r2, [r7, #36]	; 0x24
 80073a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073aa:	6a39      	ldr	r1, [r7, #32]
 80073ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073ae:	e841 2300 	strex	r3, r2, [r1]
 80073b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80073b4:	69fb      	ldr	r3, [r7, #28]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d1e5      	bne.n	8007386 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80073ba:	2300      	movs	r3, #0
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3760      	adds	r7, #96	; 0x60
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}
 80073c4:	08006fcf 	.word	0x08006fcf
 80073c8:	080070f5 	.word	0x080070f5
 80073cc:	0800712b 	.word	0x0800712b

080073d0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b089      	sub	sp, #36	; 0x24
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	330c      	adds	r3, #12
 80073de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	e853 3f00 	ldrex	r3, [r3]
 80073e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80073ee:	61fb      	str	r3, [r7, #28]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	330c      	adds	r3, #12
 80073f6:	69fa      	ldr	r2, [r7, #28]
 80073f8:	61ba      	str	r2, [r7, #24]
 80073fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fc:	6979      	ldr	r1, [r7, #20]
 80073fe:	69ba      	ldr	r2, [r7, #24]
 8007400:	e841 2300 	strex	r3, r2, [r1]
 8007404:	613b      	str	r3, [r7, #16]
   return(result);
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d1e5      	bne.n	80073d8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2220      	movs	r2, #32
 8007410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007414:	bf00      	nop
 8007416:	3724      	adds	r7, #36	; 0x24
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007420:	b480      	push	{r7}
 8007422:	b095      	sub	sp, #84	; 0x54
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	330c      	adds	r3, #12
 800742e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007432:	e853 3f00 	ldrex	r3, [r3]
 8007436:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800743e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	330c      	adds	r3, #12
 8007446:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007448:	643a      	str	r2, [r7, #64]	; 0x40
 800744a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800744c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800744e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007450:	e841 2300 	strex	r3, r2, [r1]
 8007454:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007458:	2b00      	cmp	r3, #0
 800745a:	d1e5      	bne.n	8007428 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	3314      	adds	r3, #20
 8007462:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007464:	6a3b      	ldr	r3, [r7, #32]
 8007466:	e853 3f00 	ldrex	r3, [r3]
 800746a:	61fb      	str	r3, [r7, #28]
   return(result);
 800746c:	69fb      	ldr	r3, [r7, #28]
 800746e:	f023 0301 	bic.w	r3, r3, #1
 8007472:	64bb      	str	r3, [r7, #72]	; 0x48
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	3314      	adds	r3, #20
 800747a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800747c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800747e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007480:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007482:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007484:	e841 2300 	strex	r3, r2, [r1]
 8007488:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800748a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748c:	2b00      	cmp	r3, #0
 800748e:	d1e5      	bne.n	800745c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007494:	2b01      	cmp	r3, #1
 8007496:	d119      	bne.n	80074cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	330c      	adds	r3, #12
 800749e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	e853 3f00 	ldrex	r3, [r3]
 80074a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	f023 0310 	bic.w	r3, r3, #16
 80074ae:	647b      	str	r3, [r7, #68]	; 0x44
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	330c      	adds	r3, #12
 80074b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074b8:	61ba      	str	r2, [r7, #24]
 80074ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074bc:	6979      	ldr	r1, [r7, #20]
 80074be:	69ba      	ldr	r2, [r7, #24]
 80074c0:	e841 2300 	strex	r3, r2, [r1]
 80074c4:	613b      	str	r3, [r7, #16]
   return(result);
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d1e5      	bne.n	8007498 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2220      	movs	r2, #32
 80074d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80074da:	bf00      	nop
 80074dc:	3754      	adds	r7, #84	; 0x54
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr

080074e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80074e6:	b580      	push	{r7, lr}
 80074e8:	b084      	sub	sp, #16
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2200      	movs	r2, #0
 80074f8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2200      	movs	r2, #0
 80074fe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007500:	68f8      	ldr	r0, [r7, #12]
 8007502:	f7ff fcf3 	bl	8006eec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007506:	bf00      	nop
 8007508:	3710      	adds	r7, #16
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}

0800750e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800750e:	b480      	push	{r7}
 8007510:	b085      	sub	sp, #20
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800751c:	b2db      	uxtb	r3, r3
 800751e:	2b21      	cmp	r3, #33	; 0x21
 8007520:	d13e      	bne.n	80075a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800752a:	d114      	bne.n	8007556 <UART_Transmit_IT+0x48>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	691b      	ldr	r3, [r3, #16]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d110      	bne.n	8007556 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6a1b      	ldr	r3, [r3, #32]
 8007538:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	881b      	ldrh	r3, [r3, #0]
 800753e:	461a      	mov	r2, r3
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007548:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a1b      	ldr	r3, [r3, #32]
 800754e:	1c9a      	adds	r2, r3, #2
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	621a      	str	r2, [r3, #32]
 8007554:	e008      	b.n	8007568 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6a1b      	ldr	r3, [r3, #32]
 800755a:	1c59      	adds	r1, r3, #1
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	6211      	str	r1, [r2, #32]
 8007560:	781a      	ldrb	r2, [r3, #0]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800756c:	b29b      	uxth	r3, r3
 800756e:	3b01      	subs	r3, #1
 8007570:	b29b      	uxth	r3, r3
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	4619      	mov	r1, r3
 8007576:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007578:	2b00      	cmp	r3, #0
 800757a:	d10f      	bne.n	800759c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	68da      	ldr	r2, [r3, #12]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800758a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	68da      	ldr	r2, [r3, #12]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800759a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800759c:	2300      	movs	r3, #0
 800759e:	e000      	b.n	80075a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80075a0:	2302      	movs	r3, #2
  }
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3714      	adds	r7, #20
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr

080075ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80075ae:	b580      	push	{r7, lr}
 80075b0:	b082      	sub	sp, #8
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	68da      	ldr	r2, [r3, #12]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2220      	movs	r2, #32
 80075ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f7f9 fb1e 	bl	8000c10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80075d4:	2300      	movs	r3, #0
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3708      	adds	r7, #8
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}

080075de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80075de:	b580      	push	{r7, lr}
 80075e0:	b08c      	sub	sp, #48	; 0x30
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	2b22      	cmp	r3, #34	; 0x22
 80075f0:	f040 80ab 	bne.w	800774a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075fc:	d117      	bne.n	800762e <UART_Receive_IT+0x50>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	691b      	ldr	r3, [r3, #16]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d113      	bne.n	800762e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007606:	2300      	movs	r3, #0
 8007608:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800760e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	b29b      	uxth	r3, r3
 8007618:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800761c:	b29a      	uxth	r2, r3
 800761e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007620:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007626:	1c9a      	adds	r2, r3, #2
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	629a      	str	r2, [r3, #40]	; 0x28
 800762c:	e026      	b.n	800767c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007632:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007634:	2300      	movs	r3, #0
 8007636:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007640:	d007      	beq.n	8007652 <UART_Receive_IT+0x74>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d10a      	bne.n	8007660 <UART_Receive_IT+0x82>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	691b      	ldr	r3, [r3, #16]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d106      	bne.n	8007660 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	b2da      	uxtb	r2, r3
 800765a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800765c:	701a      	strb	r2, [r3, #0]
 800765e:	e008      	b.n	8007672 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	b2db      	uxtb	r3, r3
 8007668:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800766c:	b2da      	uxtb	r2, r3
 800766e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007670:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007676:	1c5a      	adds	r2, r3, #1
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007680:	b29b      	uxth	r3, r3
 8007682:	3b01      	subs	r3, #1
 8007684:	b29b      	uxth	r3, r3
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	4619      	mov	r1, r3
 800768a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800768c:	2b00      	cmp	r3, #0
 800768e:	d15a      	bne.n	8007746 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	68da      	ldr	r2, [r3, #12]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f022 0220 	bic.w	r2, r2, #32
 800769e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	68da      	ldr	r2, [r3, #12]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80076ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	695a      	ldr	r2, [r3, #20]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f022 0201 	bic.w	r2, r2, #1
 80076be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2220      	movs	r2, #32
 80076c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d135      	bne.n	800773c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	330c      	adds	r3, #12
 80076dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	e853 3f00 	ldrex	r3, [r3]
 80076e4:	613b      	str	r3, [r7, #16]
   return(result);
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	f023 0310 	bic.w	r3, r3, #16
 80076ec:	627b      	str	r3, [r7, #36]	; 0x24
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	330c      	adds	r3, #12
 80076f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076f6:	623a      	str	r2, [r7, #32]
 80076f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076fa:	69f9      	ldr	r1, [r7, #28]
 80076fc:	6a3a      	ldr	r2, [r7, #32]
 80076fe:	e841 2300 	strex	r3, r2, [r1]
 8007702:	61bb      	str	r3, [r7, #24]
   return(result);
 8007704:	69bb      	ldr	r3, [r7, #24]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d1e5      	bne.n	80076d6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f003 0310 	and.w	r3, r3, #16
 8007714:	2b10      	cmp	r3, #16
 8007716:	d10a      	bne.n	800772e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007718:	2300      	movs	r3, #0
 800771a:	60fb      	str	r3, [r7, #12]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	60fb      	str	r3, [r7, #12]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	60fb      	str	r3, [r7, #12]
 800772c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007732:	4619      	mov	r1, r3
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f7ff fbe3 	bl	8006f00 <HAL_UARTEx_RxEventCallback>
 800773a:	e002      	b.n	8007742 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f7f9 fa51 	bl	8000be4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007742:	2300      	movs	r3, #0
 8007744:	e002      	b.n	800774c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007746:	2300      	movs	r3, #0
 8007748:	e000      	b.n	800774c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800774a:	2302      	movs	r3, #2
  }
}
 800774c:	4618      	mov	r0, r3
 800774e:	3730      	adds	r7, #48	; 0x30
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007754:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007758:	b0c0      	sub	sp, #256	; 0x100
 800775a:	af00      	add	r7, sp, #0
 800775c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	691b      	ldr	r3, [r3, #16]
 8007768:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800776c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007770:	68d9      	ldr	r1, [r3, #12]
 8007772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	ea40 0301 	orr.w	r3, r0, r1
 800777c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800777e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007782:	689a      	ldr	r2, [r3, #8]
 8007784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007788:	691b      	ldr	r3, [r3, #16]
 800778a:	431a      	orrs	r2, r3
 800778c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007790:	695b      	ldr	r3, [r3, #20]
 8007792:	431a      	orrs	r2, r3
 8007794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007798:	69db      	ldr	r3, [r3, #28]
 800779a:	4313      	orrs	r3, r2
 800779c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80077a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80077ac:	f021 010c 	bic.w	r1, r1, #12
 80077b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80077ba:	430b      	orrs	r3, r1
 80077bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80077be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	695b      	ldr	r3, [r3, #20]
 80077c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80077ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077ce:	6999      	ldr	r1, [r3, #24]
 80077d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	ea40 0301 	orr.w	r3, r0, r1
 80077da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80077dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077e0:	681a      	ldr	r2, [r3, #0]
 80077e2:	4b8f      	ldr	r3, [pc, #572]	; (8007a20 <UART_SetConfig+0x2cc>)
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d005      	beq.n	80077f4 <UART_SetConfig+0xa0>
 80077e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	4b8d      	ldr	r3, [pc, #564]	; (8007a24 <UART_SetConfig+0x2d0>)
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d104      	bne.n	80077fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80077f4:	f7fd fb18 	bl	8004e28 <HAL_RCC_GetPCLK2Freq>
 80077f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80077fc:	e003      	b.n	8007806 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80077fe:	f7fd faff 	bl	8004e00 <HAL_RCC_GetPCLK1Freq>
 8007802:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800780a:	69db      	ldr	r3, [r3, #28]
 800780c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007810:	f040 810c 	bne.w	8007a2c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007814:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007818:	2200      	movs	r2, #0
 800781a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800781e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007822:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007826:	4622      	mov	r2, r4
 8007828:	462b      	mov	r3, r5
 800782a:	1891      	adds	r1, r2, r2
 800782c:	65b9      	str	r1, [r7, #88]	; 0x58
 800782e:	415b      	adcs	r3, r3
 8007830:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007832:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007836:	4621      	mov	r1, r4
 8007838:	eb12 0801 	adds.w	r8, r2, r1
 800783c:	4629      	mov	r1, r5
 800783e:	eb43 0901 	adc.w	r9, r3, r1
 8007842:	f04f 0200 	mov.w	r2, #0
 8007846:	f04f 0300 	mov.w	r3, #0
 800784a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800784e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007852:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007856:	4690      	mov	r8, r2
 8007858:	4699      	mov	r9, r3
 800785a:	4623      	mov	r3, r4
 800785c:	eb18 0303 	adds.w	r3, r8, r3
 8007860:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007864:	462b      	mov	r3, r5
 8007866:	eb49 0303 	adc.w	r3, r9, r3
 800786a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800786e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800787a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800787e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007882:	460b      	mov	r3, r1
 8007884:	18db      	adds	r3, r3, r3
 8007886:	653b      	str	r3, [r7, #80]	; 0x50
 8007888:	4613      	mov	r3, r2
 800788a:	eb42 0303 	adc.w	r3, r2, r3
 800788e:	657b      	str	r3, [r7, #84]	; 0x54
 8007890:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007894:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007898:	f7f8 fd12 	bl	80002c0 <__aeabi_uldivmod>
 800789c:	4602      	mov	r2, r0
 800789e:	460b      	mov	r3, r1
 80078a0:	4b61      	ldr	r3, [pc, #388]	; (8007a28 <UART_SetConfig+0x2d4>)
 80078a2:	fba3 2302 	umull	r2, r3, r3, r2
 80078a6:	095b      	lsrs	r3, r3, #5
 80078a8:	011c      	lsls	r4, r3, #4
 80078aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078ae:	2200      	movs	r2, #0
 80078b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80078b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80078b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80078bc:	4642      	mov	r2, r8
 80078be:	464b      	mov	r3, r9
 80078c0:	1891      	adds	r1, r2, r2
 80078c2:	64b9      	str	r1, [r7, #72]	; 0x48
 80078c4:	415b      	adcs	r3, r3
 80078c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80078c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80078cc:	4641      	mov	r1, r8
 80078ce:	eb12 0a01 	adds.w	sl, r2, r1
 80078d2:	4649      	mov	r1, r9
 80078d4:	eb43 0b01 	adc.w	fp, r3, r1
 80078d8:	f04f 0200 	mov.w	r2, #0
 80078dc:	f04f 0300 	mov.w	r3, #0
 80078e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80078e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80078e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80078ec:	4692      	mov	sl, r2
 80078ee:	469b      	mov	fp, r3
 80078f0:	4643      	mov	r3, r8
 80078f2:	eb1a 0303 	adds.w	r3, sl, r3
 80078f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80078fa:	464b      	mov	r3, r9
 80078fc:	eb4b 0303 	adc.w	r3, fp, r3
 8007900:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007910:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007914:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007918:	460b      	mov	r3, r1
 800791a:	18db      	adds	r3, r3, r3
 800791c:	643b      	str	r3, [r7, #64]	; 0x40
 800791e:	4613      	mov	r3, r2
 8007920:	eb42 0303 	adc.w	r3, r2, r3
 8007924:	647b      	str	r3, [r7, #68]	; 0x44
 8007926:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800792a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800792e:	f7f8 fcc7 	bl	80002c0 <__aeabi_uldivmod>
 8007932:	4602      	mov	r2, r0
 8007934:	460b      	mov	r3, r1
 8007936:	4611      	mov	r1, r2
 8007938:	4b3b      	ldr	r3, [pc, #236]	; (8007a28 <UART_SetConfig+0x2d4>)
 800793a:	fba3 2301 	umull	r2, r3, r3, r1
 800793e:	095b      	lsrs	r3, r3, #5
 8007940:	2264      	movs	r2, #100	; 0x64
 8007942:	fb02 f303 	mul.w	r3, r2, r3
 8007946:	1acb      	subs	r3, r1, r3
 8007948:	00db      	lsls	r3, r3, #3
 800794a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800794e:	4b36      	ldr	r3, [pc, #216]	; (8007a28 <UART_SetConfig+0x2d4>)
 8007950:	fba3 2302 	umull	r2, r3, r3, r2
 8007954:	095b      	lsrs	r3, r3, #5
 8007956:	005b      	lsls	r3, r3, #1
 8007958:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800795c:	441c      	add	r4, r3
 800795e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007962:	2200      	movs	r2, #0
 8007964:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007968:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800796c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007970:	4642      	mov	r2, r8
 8007972:	464b      	mov	r3, r9
 8007974:	1891      	adds	r1, r2, r2
 8007976:	63b9      	str	r1, [r7, #56]	; 0x38
 8007978:	415b      	adcs	r3, r3
 800797a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800797c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007980:	4641      	mov	r1, r8
 8007982:	1851      	adds	r1, r2, r1
 8007984:	6339      	str	r1, [r7, #48]	; 0x30
 8007986:	4649      	mov	r1, r9
 8007988:	414b      	adcs	r3, r1
 800798a:	637b      	str	r3, [r7, #52]	; 0x34
 800798c:	f04f 0200 	mov.w	r2, #0
 8007990:	f04f 0300 	mov.w	r3, #0
 8007994:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007998:	4659      	mov	r1, fp
 800799a:	00cb      	lsls	r3, r1, #3
 800799c:	4651      	mov	r1, sl
 800799e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80079a2:	4651      	mov	r1, sl
 80079a4:	00ca      	lsls	r2, r1, #3
 80079a6:	4610      	mov	r0, r2
 80079a8:	4619      	mov	r1, r3
 80079aa:	4603      	mov	r3, r0
 80079ac:	4642      	mov	r2, r8
 80079ae:	189b      	adds	r3, r3, r2
 80079b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80079b4:	464b      	mov	r3, r9
 80079b6:	460a      	mov	r2, r1
 80079b8:	eb42 0303 	adc.w	r3, r2, r3
 80079bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80079c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	2200      	movs	r2, #0
 80079c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80079cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80079d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80079d4:	460b      	mov	r3, r1
 80079d6:	18db      	adds	r3, r3, r3
 80079d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80079da:	4613      	mov	r3, r2
 80079dc:	eb42 0303 	adc.w	r3, r2, r3
 80079e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80079e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80079ea:	f7f8 fc69 	bl	80002c0 <__aeabi_uldivmod>
 80079ee:	4602      	mov	r2, r0
 80079f0:	460b      	mov	r3, r1
 80079f2:	4b0d      	ldr	r3, [pc, #52]	; (8007a28 <UART_SetConfig+0x2d4>)
 80079f4:	fba3 1302 	umull	r1, r3, r3, r2
 80079f8:	095b      	lsrs	r3, r3, #5
 80079fa:	2164      	movs	r1, #100	; 0x64
 80079fc:	fb01 f303 	mul.w	r3, r1, r3
 8007a00:	1ad3      	subs	r3, r2, r3
 8007a02:	00db      	lsls	r3, r3, #3
 8007a04:	3332      	adds	r3, #50	; 0x32
 8007a06:	4a08      	ldr	r2, [pc, #32]	; (8007a28 <UART_SetConfig+0x2d4>)
 8007a08:	fba2 2303 	umull	r2, r3, r2, r3
 8007a0c:	095b      	lsrs	r3, r3, #5
 8007a0e:	f003 0207 	and.w	r2, r3, #7
 8007a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4422      	add	r2, r4
 8007a1a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007a1c:	e105      	b.n	8007c2a <UART_SetConfig+0x4d6>
 8007a1e:	bf00      	nop
 8007a20:	40011000 	.word	0x40011000
 8007a24:	40011400 	.word	0x40011400
 8007a28:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007a2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a30:	2200      	movs	r2, #0
 8007a32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007a36:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007a3a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007a3e:	4642      	mov	r2, r8
 8007a40:	464b      	mov	r3, r9
 8007a42:	1891      	adds	r1, r2, r2
 8007a44:	6239      	str	r1, [r7, #32]
 8007a46:	415b      	adcs	r3, r3
 8007a48:	627b      	str	r3, [r7, #36]	; 0x24
 8007a4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007a4e:	4641      	mov	r1, r8
 8007a50:	1854      	adds	r4, r2, r1
 8007a52:	4649      	mov	r1, r9
 8007a54:	eb43 0501 	adc.w	r5, r3, r1
 8007a58:	f04f 0200 	mov.w	r2, #0
 8007a5c:	f04f 0300 	mov.w	r3, #0
 8007a60:	00eb      	lsls	r3, r5, #3
 8007a62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007a66:	00e2      	lsls	r2, r4, #3
 8007a68:	4614      	mov	r4, r2
 8007a6a:	461d      	mov	r5, r3
 8007a6c:	4643      	mov	r3, r8
 8007a6e:	18e3      	adds	r3, r4, r3
 8007a70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007a74:	464b      	mov	r3, r9
 8007a76:	eb45 0303 	adc.w	r3, r5, r3
 8007a7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007a8a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007a8e:	f04f 0200 	mov.w	r2, #0
 8007a92:	f04f 0300 	mov.w	r3, #0
 8007a96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007a9a:	4629      	mov	r1, r5
 8007a9c:	008b      	lsls	r3, r1, #2
 8007a9e:	4621      	mov	r1, r4
 8007aa0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007aa4:	4621      	mov	r1, r4
 8007aa6:	008a      	lsls	r2, r1, #2
 8007aa8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007aac:	f7f8 fc08 	bl	80002c0 <__aeabi_uldivmod>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	460b      	mov	r3, r1
 8007ab4:	4b60      	ldr	r3, [pc, #384]	; (8007c38 <UART_SetConfig+0x4e4>)
 8007ab6:	fba3 2302 	umull	r2, r3, r3, r2
 8007aba:	095b      	lsrs	r3, r3, #5
 8007abc:	011c      	lsls	r4, r3, #4
 8007abe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007ac8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007acc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007ad0:	4642      	mov	r2, r8
 8007ad2:	464b      	mov	r3, r9
 8007ad4:	1891      	adds	r1, r2, r2
 8007ad6:	61b9      	str	r1, [r7, #24]
 8007ad8:	415b      	adcs	r3, r3
 8007ada:	61fb      	str	r3, [r7, #28]
 8007adc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ae0:	4641      	mov	r1, r8
 8007ae2:	1851      	adds	r1, r2, r1
 8007ae4:	6139      	str	r1, [r7, #16]
 8007ae6:	4649      	mov	r1, r9
 8007ae8:	414b      	adcs	r3, r1
 8007aea:	617b      	str	r3, [r7, #20]
 8007aec:	f04f 0200 	mov.w	r2, #0
 8007af0:	f04f 0300 	mov.w	r3, #0
 8007af4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007af8:	4659      	mov	r1, fp
 8007afa:	00cb      	lsls	r3, r1, #3
 8007afc:	4651      	mov	r1, sl
 8007afe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b02:	4651      	mov	r1, sl
 8007b04:	00ca      	lsls	r2, r1, #3
 8007b06:	4610      	mov	r0, r2
 8007b08:	4619      	mov	r1, r3
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	4642      	mov	r2, r8
 8007b0e:	189b      	adds	r3, r3, r2
 8007b10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007b14:	464b      	mov	r3, r9
 8007b16:	460a      	mov	r2, r1
 8007b18:	eb42 0303 	adc.w	r3, r2, r3
 8007b1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	67bb      	str	r3, [r7, #120]	; 0x78
 8007b2a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007b2c:	f04f 0200 	mov.w	r2, #0
 8007b30:	f04f 0300 	mov.w	r3, #0
 8007b34:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007b38:	4649      	mov	r1, r9
 8007b3a:	008b      	lsls	r3, r1, #2
 8007b3c:	4641      	mov	r1, r8
 8007b3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b42:	4641      	mov	r1, r8
 8007b44:	008a      	lsls	r2, r1, #2
 8007b46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007b4a:	f7f8 fbb9 	bl	80002c0 <__aeabi_uldivmod>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	460b      	mov	r3, r1
 8007b52:	4b39      	ldr	r3, [pc, #228]	; (8007c38 <UART_SetConfig+0x4e4>)
 8007b54:	fba3 1302 	umull	r1, r3, r3, r2
 8007b58:	095b      	lsrs	r3, r3, #5
 8007b5a:	2164      	movs	r1, #100	; 0x64
 8007b5c:	fb01 f303 	mul.w	r3, r1, r3
 8007b60:	1ad3      	subs	r3, r2, r3
 8007b62:	011b      	lsls	r3, r3, #4
 8007b64:	3332      	adds	r3, #50	; 0x32
 8007b66:	4a34      	ldr	r2, [pc, #208]	; (8007c38 <UART_SetConfig+0x4e4>)
 8007b68:	fba2 2303 	umull	r2, r3, r2, r3
 8007b6c:	095b      	lsrs	r3, r3, #5
 8007b6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b72:	441c      	add	r4, r3
 8007b74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b78:	2200      	movs	r2, #0
 8007b7a:	673b      	str	r3, [r7, #112]	; 0x70
 8007b7c:	677a      	str	r2, [r7, #116]	; 0x74
 8007b7e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007b82:	4642      	mov	r2, r8
 8007b84:	464b      	mov	r3, r9
 8007b86:	1891      	adds	r1, r2, r2
 8007b88:	60b9      	str	r1, [r7, #8]
 8007b8a:	415b      	adcs	r3, r3
 8007b8c:	60fb      	str	r3, [r7, #12]
 8007b8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007b92:	4641      	mov	r1, r8
 8007b94:	1851      	adds	r1, r2, r1
 8007b96:	6039      	str	r1, [r7, #0]
 8007b98:	4649      	mov	r1, r9
 8007b9a:	414b      	adcs	r3, r1
 8007b9c:	607b      	str	r3, [r7, #4]
 8007b9e:	f04f 0200 	mov.w	r2, #0
 8007ba2:	f04f 0300 	mov.w	r3, #0
 8007ba6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007baa:	4659      	mov	r1, fp
 8007bac:	00cb      	lsls	r3, r1, #3
 8007bae:	4651      	mov	r1, sl
 8007bb0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007bb4:	4651      	mov	r1, sl
 8007bb6:	00ca      	lsls	r2, r1, #3
 8007bb8:	4610      	mov	r0, r2
 8007bba:	4619      	mov	r1, r3
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	4642      	mov	r2, r8
 8007bc0:	189b      	adds	r3, r3, r2
 8007bc2:	66bb      	str	r3, [r7, #104]	; 0x68
 8007bc4:	464b      	mov	r3, r9
 8007bc6:	460a      	mov	r2, r1
 8007bc8:	eb42 0303 	adc.w	r3, r2, r3
 8007bcc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	663b      	str	r3, [r7, #96]	; 0x60
 8007bd8:	667a      	str	r2, [r7, #100]	; 0x64
 8007bda:	f04f 0200 	mov.w	r2, #0
 8007bde:	f04f 0300 	mov.w	r3, #0
 8007be2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007be6:	4649      	mov	r1, r9
 8007be8:	008b      	lsls	r3, r1, #2
 8007bea:	4641      	mov	r1, r8
 8007bec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007bf0:	4641      	mov	r1, r8
 8007bf2:	008a      	lsls	r2, r1, #2
 8007bf4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007bf8:	f7f8 fb62 	bl	80002c0 <__aeabi_uldivmod>
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	460b      	mov	r3, r1
 8007c00:	4b0d      	ldr	r3, [pc, #52]	; (8007c38 <UART_SetConfig+0x4e4>)
 8007c02:	fba3 1302 	umull	r1, r3, r3, r2
 8007c06:	095b      	lsrs	r3, r3, #5
 8007c08:	2164      	movs	r1, #100	; 0x64
 8007c0a:	fb01 f303 	mul.w	r3, r1, r3
 8007c0e:	1ad3      	subs	r3, r2, r3
 8007c10:	011b      	lsls	r3, r3, #4
 8007c12:	3332      	adds	r3, #50	; 0x32
 8007c14:	4a08      	ldr	r2, [pc, #32]	; (8007c38 <UART_SetConfig+0x4e4>)
 8007c16:	fba2 2303 	umull	r2, r3, r2, r3
 8007c1a:	095b      	lsrs	r3, r3, #5
 8007c1c:	f003 020f 	and.w	r2, r3, #15
 8007c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4422      	add	r2, r4
 8007c28:	609a      	str	r2, [r3, #8]
}
 8007c2a:	bf00      	nop
 8007c2c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007c30:	46bd      	mov	sp, r7
 8007c32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c36:	bf00      	nop
 8007c38:	51eb851f 	.word	0x51eb851f

08007c3c <__NVIC_SetPriority>:
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b083      	sub	sp, #12
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	4603      	mov	r3, r0
 8007c44:	6039      	str	r1, [r7, #0]
 8007c46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	db0a      	blt.n	8007c66 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	b2da      	uxtb	r2, r3
 8007c54:	490c      	ldr	r1, [pc, #48]	; (8007c88 <__NVIC_SetPriority+0x4c>)
 8007c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c5a:	0112      	lsls	r2, r2, #4
 8007c5c:	b2d2      	uxtb	r2, r2
 8007c5e:	440b      	add	r3, r1
 8007c60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007c64:	e00a      	b.n	8007c7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	b2da      	uxtb	r2, r3
 8007c6a:	4908      	ldr	r1, [pc, #32]	; (8007c8c <__NVIC_SetPriority+0x50>)
 8007c6c:	79fb      	ldrb	r3, [r7, #7]
 8007c6e:	f003 030f 	and.w	r3, r3, #15
 8007c72:	3b04      	subs	r3, #4
 8007c74:	0112      	lsls	r2, r2, #4
 8007c76:	b2d2      	uxtb	r2, r2
 8007c78:	440b      	add	r3, r1
 8007c7a:	761a      	strb	r2, [r3, #24]
}
 8007c7c:	bf00      	nop
 8007c7e:	370c      	adds	r7, #12
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr
 8007c88:	e000e100 	.word	0xe000e100
 8007c8c:	e000ed00 	.word	0xe000ed00

08007c90 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007c90:	b580      	push	{r7, lr}
 8007c92:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007c94:	4b05      	ldr	r3, [pc, #20]	; (8007cac <SysTick_Handler+0x1c>)
 8007c96:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007c98:	f002 fe0a 	bl	800a8b0 <xTaskGetSchedulerState>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d001      	beq.n	8007ca6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007ca2:	f003 fda9 	bl	800b7f8 <xPortSysTickHandler>
  }
}
 8007ca6:	bf00      	nop
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	bf00      	nop
 8007cac:	e000e010 	.word	0xe000e010

08007cb0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007cb4:	2100      	movs	r1, #0
 8007cb6:	f06f 0004 	mvn.w	r0, #4
 8007cba:	f7ff ffbf 	bl	8007c3c <__NVIC_SetPriority>
#endif
}
 8007cbe:	bf00      	nop
 8007cc0:	bd80      	pop	{r7, pc}
	...

08007cc4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007cca:	f3ef 8305 	mrs	r3, IPSR
 8007cce:	603b      	str	r3, [r7, #0]
  return(result);
 8007cd0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d003      	beq.n	8007cde <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007cd6:	f06f 0305 	mvn.w	r3, #5
 8007cda:	607b      	str	r3, [r7, #4]
 8007cdc:	e00c      	b.n	8007cf8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007cde:	4b0a      	ldr	r3, [pc, #40]	; (8007d08 <osKernelInitialize+0x44>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d105      	bne.n	8007cf2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007ce6:	4b08      	ldr	r3, [pc, #32]	; (8007d08 <osKernelInitialize+0x44>)
 8007ce8:	2201      	movs	r2, #1
 8007cea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007cec:	2300      	movs	r3, #0
 8007cee:	607b      	str	r3, [r7, #4]
 8007cf0:	e002      	b.n	8007cf8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8007cf6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007cf8:	687b      	ldr	r3, [r7, #4]
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	370c      	adds	r7, #12
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr
 8007d06:	bf00      	nop
 8007d08:	2000070c 	.word	0x2000070c

08007d0c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b082      	sub	sp, #8
 8007d10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d12:	f3ef 8305 	mrs	r3, IPSR
 8007d16:	603b      	str	r3, [r7, #0]
  return(result);
 8007d18:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d003      	beq.n	8007d26 <osKernelStart+0x1a>
    stat = osErrorISR;
 8007d1e:	f06f 0305 	mvn.w	r3, #5
 8007d22:	607b      	str	r3, [r7, #4]
 8007d24:	e010      	b.n	8007d48 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007d26:	4b0b      	ldr	r3, [pc, #44]	; (8007d54 <osKernelStart+0x48>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d109      	bne.n	8007d42 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007d2e:	f7ff ffbf 	bl	8007cb0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007d32:	4b08      	ldr	r3, [pc, #32]	; (8007d54 <osKernelStart+0x48>)
 8007d34:	2202      	movs	r2, #2
 8007d36:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007d38:	f002 f962 	bl	800a000 <vTaskStartScheduler>
      stat = osOK;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	607b      	str	r3, [r7, #4]
 8007d40:	e002      	b.n	8007d48 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007d42:	f04f 33ff 	mov.w	r3, #4294967295
 8007d46:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007d48:	687b      	ldr	r3, [r7, #4]
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3708      	adds	r7, #8
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}
 8007d52:	bf00      	nop
 8007d54:	2000070c 	.word	0x2000070c

08007d58 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b08e      	sub	sp, #56	; 0x38
 8007d5c:	af04      	add	r7, sp, #16
 8007d5e:	60f8      	str	r0, [r7, #12]
 8007d60:	60b9      	str	r1, [r7, #8]
 8007d62:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007d64:	2300      	movs	r3, #0
 8007d66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d68:	f3ef 8305 	mrs	r3, IPSR
 8007d6c:	617b      	str	r3, [r7, #20]
  return(result);
 8007d6e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d17e      	bne.n	8007e72 <osThreadNew+0x11a>
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d07b      	beq.n	8007e72 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007d7a:	2380      	movs	r3, #128	; 0x80
 8007d7c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007d7e:	2318      	movs	r3, #24
 8007d80:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007d82:	2300      	movs	r3, #0
 8007d84:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007d86:	f04f 33ff 	mov.w	r3, #4294967295
 8007d8a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d045      	beq.n	8007e1e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d002      	beq.n	8007da0 <osThreadNew+0x48>
        name = attr->name;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	699b      	ldr	r3, [r3, #24]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d002      	beq.n	8007dae <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	699b      	ldr	r3, [r3, #24]
 8007dac:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007dae:	69fb      	ldr	r3, [r7, #28]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d008      	beq.n	8007dc6 <osThreadNew+0x6e>
 8007db4:	69fb      	ldr	r3, [r7, #28]
 8007db6:	2b38      	cmp	r3, #56	; 0x38
 8007db8:	d805      	bhi.n	8007dc6 <osThreadNew+0x6e>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	f003 0301 	and.w	r3, r3, #1
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d001      	beq.n	8007dca <osThreadNew+0x72>
        return (NULL);
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	e054      	b.n	8007e74 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	695b      	ldr	r3, [r3, #20]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d003      	beq.n	8007dda <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	695b      	ldr	r3, [r3, #20]
 8007dd6:	089b      	lsrs	r3, r3, #2
 8007dd8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	689b      	ldr	r3, [r3, #8]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d00e      	beq.n	8007e00 <osThreadNew+0xa8>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	68db      	ldr	r3, [r3, #12]
 8007de6:	2b5b      	cmp	r3, #91	; 0x5b
 8007de8:	d90a      	bls.n	8007e00 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d006      	beq.n	8007e00 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	695b      	ldr	r3, [r3, #20]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d002      	beq.n	8007e00 <osThreadNew+0xa8>
        mem = 1;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	61bb      	str	r3, [r7, #24]
 8007dfe:	e010      	b.n	8007e22 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d10c      	bne.n	8007e22 <osThreadNew+0xca>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	68db      	ldr	r3, [r3, #12]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d108      	bne.n	8007e22 <osThreadNew+0xca>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	691b      	ldr	r3, [r3, #16]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d104      	bne.n	8007e22 <osThreadNew+0xca>
          mem = 0;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	61bb      	str	r3, [r7, #24]
 8007e1c:	e001      	b.n	8007e22 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007e22:	69bb      	ldr	r3, [r7, #24]
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d110      	bne.n	8007e4a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007e2c:	687a      	ldr	r2, [r7, #4]
 8007e2e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007e30:	9202      	str	r2, [sp, #8]
 8007e32:	9301      	str	r3, [sp, #4]
 8007e34:	69fb      	ldr	r3, [r7, #28]
 8007e36:	9300      	str	r3, [sp, #0]
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	6a3a      	ldr	r2, [r7, #32]
 8007e3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e3e:	68f8      	ldr	r0, [r7, #12]
 8007e40:	f001 fe30 	bl	8009aa4 <xTaskCreateStatic>
 8007e44:	4603      	mov	r3, r0
 8007e46:	613b      	str	r3, [r7, #16]
 8007e48:	e013      	b.n	8007e72 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007e4a:	69bb      	ldr	r3, [r7, #24]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d110      	bne.n	8007e72 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007e50:	6a3b      	ldr	r3, [r7, #32]
 8007e52:	b29a      	uxth	r2, r3
 8007e54:	f107 0310 	add.w	r3, r7, #16
 8007e58:	9301      	str	r3, [sp, #4]
 8007e5a:	69fb      	ldr	r3, [r7, #28]
 8007e5c:	9300      	str	r3, [sp, #0]
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e62:	68f8      	ldr	r0, [r7, #12]
 8007e64:	f001 fe7b 	bl	8009b5e <xTaskCreate>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d001      	beq.n	8007e72 <osThreadNew+0x11a>
            hTask = NULL;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007e72:	693b      	ldr	r3, [r7, #16]
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3728      	adds	r7, #40	; 0x28
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b086      	sub	sp, #24
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e88:	f3ef 8305 	mrs	r3, IPSR
 8007e8c:	60bb      	str	r3, [r7, #8]
  return(result);
 8007e8e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d003      	beq.n	8007e9c <osThreadTerminate+0x20>
    stat = osErrorISR;
 8007e94:	f06f 0305 	mvn.w	r3, #5
 8007e98:	617b      	str	r3, [r7, #20]
 8007e9a:	e017      	b.n	8007ecc <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d103      	bne.n	8007eaa <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 8007ea2:	f06f 0303 	mvn.w	r3, #3
 8007ea6:	617b      	str	r3, [r7, #20]
 8007ea8:	e010      	b.n	8007ecc <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 8007eaa:	6938      	ldr	r0, [r7, #16]
 8007eac:	f002 f842 	bl	8009f34 <eTaskGetState>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 8007eb4:	7bfb      	ldrb	r3, [r7, #15]
 8007eb6:	2b04      	cmp	r3, #4
 8007eb8:	d005      	beq.n	8007ec6 <osThreadTerminate+0x4a>
      stat = osOK;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 8007ebe:	6938      	ldr	r0, [r7, #16]
 8007ec0:	f001 ff92 	bl	8009de8 <vTaskDelete>
 8007ec4:	e002      	b.n	8007ecc <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 8007ec6:	f06f 0302 	mvn.w	r3, #2
 8007eca:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 8007ecc:	697b      	ldr	r3, [r7, #20]
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3718      	adds	r7, #24
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}

08007ed6 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007ed6:	b580      	push	{r7, lr}
 8007ed8:	b084      	sub	sp, #16
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ede:	f3ef 8305 	mrs	r3, IPSR
 8007ee2:	60bb      	str	r3, [r7, #8]
  return(result);
 8007ee4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d003      	beq.n	8007ef2 <osDelay+0x1c>
    stat = osErrorISR;
 8007eea:	f06f 0305 	mvn.w	r3, #5
 8007eee:	60fb      	str	r3, [r7, #12]
 8007ef0:	e007      	b.n	8007f02 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d002      	beq.n	8007f02 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f001 ffe5 	bl	8009ecc <vTaskDelay>
    }
  }

  return (stat);
 8007f02:	68fb      	ldr	r3, [r7, #12]
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3710      	adds	r7, #16
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f003 fa91 	bl	800b43c <pvTimerGetTimerID>
 8007f1a:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d005      	beq.n	8007f2e <TimerCallback+0x22>
    callb->func (callb->arg);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	68fa      	ldr	r2, [r7, #12]
 8007f28:	6852      	ldr	r2, [r2, #4]
 8007f2a:	4610      	mov	r0, r2
 8007f2c:	4798      	blx	r3
  }
}
 8007f2e:	bf00      	nop
 8007f30:	3710      	adds	r7, #16
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
	...

08007f38 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b08c      	sub	sp, #48	; 0x30
 8007f3c:	af02      	add	r7, sp, #8
 8007f3e:	60f8      	str	r0, [r7, #12]
 8007f40:	607a      	str	r2, [r7, #4]
 8007f42:	603b      	str	r3, [r7, #0]
 8007f44:	460b      	mov	r3, r1
 8007f46:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f4c:	f3ef 8305 	mrs	r3, IPSR
 8007f50:	613b      	str	r3, [r7, #16]
  return(result);
 8007f52:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d163      	bne.n	8008020 <osTimerNew+0xe8>
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d060      	beq.n	8008020 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8007f5e:	2008      	movs	r0, #8
 8007f60:	f003 fcda 	bl	800b918 <pvPortMalloc>
 8007f64:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d059      	beq.n	8008020 <osTimerNew+0xe8>
      callb->func = func;
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	68fa      	ldr	r2, [r7, #12]
 8007f70:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8007f78:	7afb      	ldrb	r3, [r7, #11]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d102      	bne.n	8007f84 <osTimerNew+0x4c>
        reload = pdFALSE;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	61fb      	str	r3, [r7, #28]
 8007f82:	e001      	b.n	8007f88 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8007f84:	2301      	movs	r3, #1
 8007f86:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8007f88:	f04f 33ff 	mov.w	r3, #4294967295
 8007f8c:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d01c      	beq.n	8007fd2 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d002      	beq.n	8007fa6 <osTimerNew+0x6e>
          name = attr->name;
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d006      	beq.n	8007fbc <osTimerNew+0x84>
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	68db      	ldr	r3, [r3, #12]
 8007fb2:	2b2b      	cmp	r3, #43	; 0x2b
 8007fb4:	d902      	bls.n	8007fbc <osTimerNew+0x84>
          mem = 1;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	61bb      	str	r3, [r7, #24]
 8007fba:	e00c      	b.n	8007fd6 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	689b      	ldr	r3, [r3, #8]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d108      	bne.n	8007fd6 <osTimerNew+0x9e>
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	68db      	ldr	r3, [r3, #12]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d104      	bne.n	8007fd6 <osTimerNew+0x9e>
            mem = 0;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	61bb      	str	r3, [r7, #24]
 8007fd0:	e001      	b.n	8007fd6 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8007fd6:	69bb      	ldr	r3, [r7, #24]
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d10c      	bne.n	8007ff6 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	689b      	ldr	r3, [r3, #8]
 8007fe0:	9301      	str	r3, [sp, #4]
 8007fe2:	4b12      	ldr	r3, [pc, #72]	; (800802c <osTimerNew+0xf4>)
 8007fe4:	9300      	str	r3, [sp, #0]
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	69fa      	ldr	r2, [r7, #28]
 8007fea:	2101      	movs	r1, #1
 8007fec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007fee:	f002 fea6 	bl	800ad3e <xTimerCreateStatic>
 8007ff2:	6238      	str	r0, [r7, #32]
 8007ff4:	e00b      	b.n	800800e <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8007ff6:	69bb      	ldr	r3, [r7, #24]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d108      	bne.n	800800e <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8007ffc:	4b0b      	ldr	r3, [pc, #44]	; (800802c <osTimerNew+0xf4>)
 8007ffe:	9300      	str	r3, [sp, #0]
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	69fa      	ldr	r2, [r7, #28]
 8008004:	2101      	movs	r1, #1
 8008006:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008008:	f002 fe78 	bl	800acfc <xTimerCreate>
 800800c:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800800e:	6a3b      	ldr	r3, [r7, #32]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d105      	bne.n	8008020 <osTimerNew+0xe8>
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d002      	beq.n	8008020 <osTimerNew+0xe8>
        vPortFree (callb);
 800801a:	6978      	ldr	r0, [r7, #20]
 800801c:	f003 fd48 	bl	800bab0 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8008020:	6a3b      	ldr	r3, [r7, #32]
}
 8008022:	4618      	mov	r0, r3
 8008024:	3728      	adds	r7, #40	; 0x28
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
 800802a:	bf00      	nop
 800802c:	08007f0d 	.word	0x08007f0d

08008030 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8008030:	b580      	push	{r7, lr}
 8008032:	b088      	sub	sp, #32
 8008034:	af02      	add	r7, sp, #8
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800803e:	f3ef 8305 	mrs	r3, IPSR
 8008042:	60fb      	str	r3, [r7, #12]
  return(result);
 8008044:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008046:	2b00      	cmp	r3, #0
 8008048:	d003      	beq.n	8008052 <osTimerStart+0x22>
    stat = osErrorISR;
 800804a:	f06f 0305 	mvn.w	r3, #5
 800804e:	617b      	str	r3, [r7, #20]
 8008050:	e017      	b.n	8008082 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d103      	bne.n	8008060 <osTimerStart+0x30>
    stat = osErrorParameter;
 8008058:	f06f 0303 	mvn.w	r3, #3
 800805c:	617b      	str	r3, [r7, #20]
 800805e:	e010      	b.n	8008082 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8008060:	2300      	movs	r3, #0
 8008062:	9300      	str	r3, [sp, #0]
 8008064:	2300      	movs	r3, #0
 8008066:	683a      	ldr	r2, [r7, #0]
 8008068:	2104      	movs	r1, #4
 800806a:	6938      	ldr	r0, [r7, #16]
 800806c:	f002 fee0 	bl	800ae30 <xTimerGenericCommand>
 8008070:	4603      	mov	r3, r0
 8008072:	2b01      	cmp	r3, #1
 8008074:	d102      	bne.n	800807c <osTimerStart+0x4c>
      stat = osOK;
 8008076:	2300      	movs	r3, #0
 8008078:	617b      	str	r3, [r7, #20]
 800807a:	e002      	b.n	8008082 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800807c:	f06f 0302 	mvn.w	r3, #2
 8008080:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8008082:	697b      	ldr	r3, [r7, #20]
}
 8008084:	4618      	mov	r0, r3
 8008086:	3718      	adds	r7, #24
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800808c:	b580      	push	{r7, lr}
 800808e:	b088      	sub	sp, #32
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8008094:	2300      	movs	r3, #0
 8008096:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008098:	f3ef 8305 	mrs	r3, IPSR
 800809c:	60bb      	str	r3, [r7, #8]
  return(result);
 800809e:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d174      	bne.n	800818e <osMutexNew+0x102>
    if (attr != NULL) {
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d003      	beq.n	80080b2 <osMutexNew+0x26>
      type = attr->attr_bits;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	61bb      	str	r3, [r7, #24]
 80080b0:	e001      	b.n	80080b6 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80080b2:	2300      	movs	r3, #0
 80080b4:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80080b6:	69bb      	ldr	r3, [r7, #24]
 80080b8:	f003 0301 	and.w	r3, r3, #1
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d002      	beq.n	80080c6 <osMutexNew+0x3a>
      rmtx = 1U;
 80080c0:	2301      	movs	r3, #1
 80080c2:	617b      	str	r3, [r7, #20]
 80080c4:	e001      	b.n	80080ca <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80080c6:	2300      	movs	r3, #0
 80080c8:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80080ca:	69bb      	ldr	r3, [r7, #24]
 80080cc:	f003 0308 	and.w	r3, r3, #8
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d15c      	bne.n	800818e <osMutexNew+0x102>
      mem = -1;
 80080d4:	f04f 33ff 	mov.w	r3, #4294967295
 80080d8:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d015      	beq.n	800810c <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	689b      	ldr	r3, [r3, #8]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d006      	beq.n	80080f6 <osMutexNew+0x6a>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	68db      	ldr	r3, [r3, #12]
 80080ec:	2b4f      	cmp	r3, #79	; 0x4f
 80080ee:	d902      	bls.n	80080f6 <osMutexNew+0x6a>
          mem = 1;
 80080f0:	2301      	movs	r3, #1
 80080f2:	613b      	str	r3, [r7, #16]
 80080f4:	e00c      	b.n	8008110 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	689b      	ldr	r3, [r3, #8]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d108      	bne.n	8008110 <osMutexNew+0x84>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	68db      	ldr	r3, [r3, #12]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d104      	bne.n	8008110 <osMutexNew+0x84>
            mem = 0;
 8008106:	2300      	movs	r3, #0
 8008108:	613b      	str	r3, [r7, #16]
 800810a:	e001      	b.n	8008110 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800810c:	2300      	movs	r3, #0
 800810e:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	2b01      	cmp	r3, #1
 8008114:	d112      	bne.n	800813c <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d007      	beq.n	800812c <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	689b      	ldr	r3, [r3, #8]
 8008120:	4619      	mov	r1, r3
 8008122:	2004      	movs	r0, #4
 8008124:	f000 fd69 	bl	8008bfa <xQueueCreateMutexStatic>
 8008128:	61f8      	str	r0, [r7, #28]
 800812a:	e016      	b.n	800815a <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	689b      	ldr	r3, [r3, #8]
 8008130:	4619      	mov	r1, r3
 8008132:	2001      	movs	r0, #1
 8008134:	f000 fd61 	bl	8008bfa <xQueueCreateMutexStatic>
 8008138:	61f8      	str	r0, [r7, #28]
 800813a:	e00e      	b.n	800815a <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d10b      	bne.n	800815a <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d004      	beq.n	8008152 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8008148:	2004      	movs	r0, #4
 800814a:	f000 fd3e 	bl	8008bca <xQueueCreateMutex>
 800814e:	61f8      	str	r0, [r7, #28]
 8008150:	e003      	b.n	800815a <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8008152:	2001      	movs	r0, #1
 8008154:	f000 fd39 	bl	8008bca <xQueueCreateMutex>
 8008158:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800815a:	69fb      	ldr	r3, [r7, #28]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d00c      	beq.n	800817a <osMutexNew+0xee>
        if (attr != NULL) {
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d003      	beq.n	800816e <osMutexNew+0xe2>
          name = attr->name;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	60fb      	str	r3, [r7, #12]
 800816c:	e001      	b.n	8008172 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800816e:	2300      	movs	r3, #0
 8008170:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8008172:	68f9      	ldr	r1, [r7, #12]
 8008174:	69f8      	ldr	r0, [r7, #28]
 8008176:	f001 fc0d 	bl	8009994 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800817a:	69fb      	ldr	r3, [r7, #28]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d006      	beq.n	800818e <osMutexNew+0x102>
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d003      	beq.n	800818e <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008186:	69fb      	ldr	r3, [r7, #28]
 8008188:	f043 0301 	orr.w	r3, r3, #1
 800818c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800818e:	69fb      	ldr	r3, [r7, #28]
}
 8008190:	4618      	mov	r0, r3
 8008192:	3720      	adds	r7, #32
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8008198:	b580      	push	{r7, lr}
 800819a:	b086      	sub	sp, #24
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f023 0301 	bic.w	r3, r3, #1
 80081a8:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f003 0301 	and.w	r3, r3, #1
 80081b0:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80081b2:	2300      	movs	r3, #0
 80081b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081b6:	f3ef 8305 	mrs	r3, IPSR
 80081ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80081bc:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d003      	beq.n	80081ca <osMutexAcquire+0x32>
    stat = osErrorISR;
 80081c2:	f06f 0305 	mvn.w	r3, #5
 80081c6:	617b      	str	r3, [r7, #20]
 80081c8:	e02c      	b.n	8008224 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d103      	bne.n	80081d8 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80081d0:	f06f 0303 	mvn.w	r3, #3
 80081d4:	617b      	str	r3, [r7, #20]
 80081d6:	e025      	b.n	8008224 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d011      	beq.n	8008202 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80081de:	6839      	ldr	r1, [r7, #0]
 80081e0:	6938      	ldr	r0, [r7, #16]
 80081e2:	f000 fd59 	bl	8008c98 <xQueueTakeMutexRecursive>
 80081e6:	4603      	mov	r3, r0
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d01b      	beq.n	8008224 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d003      	beq.n	80081fa <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80081f2:	f06f 0301 	mvn.w	r3, #1
 80081f6:	617b      	str	r3, [r7, #20]
 80081f8:	e014      	b.n	8008224 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80081fa:	f06f 0302 	mvn.w	r3, #2
 80081fe:	617b      	str	r3, [r7, #20]
 8008200:	e010      	b.n	8008224 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8008202:	6839      	ldr	r1, [r7, #0]
 8008204:	6938      	ldr	r0, [r7, #16]
 8008206:	f001 f8ed 	bl	80093e4 <xQueueSemaphoreTake>
 800820a:	4603      	mov	r3, r0
 800820c:	2b01      	cmp	r3, #1
 800820e:	d009      	beq.n	8008224 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d003      	beq.n	800821e <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8008216:	f06f 0301 	mvn.w	r3, #1
 800821a:	617b      	str	r3, [r7, #20]
 800821c:	e002      	b.n	8008224 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800821e:	f06f 0302 	mvn.w	r3, #2
 8008222:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8008224:	697b      	ldr	r3, [r7, #20]
}
 8008226:	4618      	mov	r0, r3
 8008228:	3718      	adds	r7, #24
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}

0800822e <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800822e:	b580      	push	{r7, lr}
 8008230:	b086      	sub	sp, #24
 8008232:	af00      	add	r7, sp, #0
 8008234:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f023 0301 	bic.w	r3, r3, #1
 800823c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f003 0301 	and.w	r3, r3, #1
 8008244:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008246:	2300      	movs	r3, #0
 8008248:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800824a:	f3ef 8305 	mrs	r3, IPSR
 800824e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008250:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8008252:	2b00      	cmp	r3, #0
 8008254:	d003      	beq.n	800825e <osMutexRelease+0x30>
    stat = osErrorISR;
 8008256:	f06f 0305 	mvn.w	r3, #5
 800825a:	617b      	str	r3, [r7, #20]
 800825c:	e01f      	b.n	800829e <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d103      	bne.n	800826c <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8008264:	f06f 0303 	mvn.w	r3, #3
 8008268:	617b      	str	r3, [r7, #20]
 800826a:	e018      	b.n	800829e <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d009      	beq.n	8008286 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8008272:	6938      	ldr	r0, [r7, #16]
 8008274:	f000 fcdc 	bl	8008c30 <xQueueGiveMutexRecursive>
 8008278:	4603      	mov	r3, r0
 800827a:	2b01      	cmp	r3, #1
 800827c:	d00f      	beq.n	800829e <osMutexRelease+0x70>
        stat = osErrorResource;
 800827e:	f06f 0302 	mvn.w	r3, #2
 8008282:	617b      	str	r3, [r7, #20]
 8008284:	e00b      	b.n	800829e <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8008286:	2300      	movs	r3, #0
 8008288:	2200      	movs	r2, #0
 800828a:	2100      	movs	r1, #0
 800828c:	6938      	ldr	r0, [r7, #16]
 800828e:	f000 fda3 	bl	8008dd8 <xQueueGenericSend>
 8008292:	4603      	mov	r3, r0
 8008294:	2b01      	cmp	r3, #1
 8008296:	d002      	beq.n	800829e <osMutexRelease+0x70>
        stat = osErrorResource;
 8008298:	f06f 0302 	mvn.w	r3, #2
 800829c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800829e:	697b      	ldr	r3, [r7, #20]
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3718      	adds	r7, #24
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b08a      	sub	sp, #40	; 0x28
 80082ac:	af02      	add	r7, sp, #8
 80082ae:	60f8      	str	r0, [r7, #12]
 80082b0:	60b9      	str	r1, [r7, #8]
 80082b2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80082b4:	2300      	movs	r3, #0
 80082b6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082b8:	f3ef 8305 	mrs	r3, IPSR
 80082bc:	613b      	str	r3, [r7, #16]
  return(result);
 80082be:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d175      	bne.n	80083b0 <osSemaphoreNew+0x108>
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d072      	beq.n	80083b0 <osSemaphoreNew+0x108>
 80082ca:	68ba      	ldr	r2, [r7, #8]
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d86e      	bhi.n	80083b0 <osSemaphoreNew+0x108>
    mem = -1;
 80082d2:	f04f 33ff 	mov.w	r3, #4294967295
 80082d6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d015      	beq.n	800830a <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	689b      	ldr	r3, [r3, #8]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d006      	beq.n	80082f4 <osSemaphoreNew+0x4c>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	68db      	ldr	r3, [r3, #12]
 80082ea:	2b4f      	cmp	r3, #79	; 0x4f
 80082ec:	d902      	bls.n	80082f4 <osSemaphoreNew+0x4c>
        mem = 1;
 80082ee:	2301      	movs	r3, #1
 80082f0:	61bb      	str	r3, [r7, #24]
 80082f2:	e00c      	b.n	800830e <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d108      	bne.n	800830e <osSemaphoreNew+0x66>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	68db      	ldr	r3, [r3, #12]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d104      	bne.n	800830e <osSemaphoreNew+0x66>
          mem = 0;
 8008304:	2300      	movs	r3, #0
 8008306:	61bb      	str	r3, [r7, #24]
 8008308:	e001      	b.n	800830e <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800830a:	2300      	movs	r3, #0
 800830c:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800830e:	69bb      	ldr	r3, [r7, #24]
 8008310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008314:	d04c      	beq.n	80083b0 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2b01      	cmp	r3, #1
 800831a:	d128      	bne.n	800836e <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800831c:	69bb      	ldr	r3, [r7, #24]
 800831e:	2b01      	cmp	r3, #1
 8008320:	d10a      	bne.n	8008338 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	689b      	ldr	r3, [r3, #8]
 8008326:	2203      	movs	r2, #3
 8008328:	9200      	str	r2, [sp, #0]
 800832a:	2200      	movs	r2, #0
 800832c:	2100      	movs	r1, #0
 800832e:	2001      	movs	r0, #1
 8008330:	f000 fb5c 	bl	80089ec <xQueueGenericCreateStatic>
 8008334:	61f8      	str	r0, [r7, #28]
 8008336:	e005      	b.n	8008344 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8008338:	2203      	movs	r2, #3
 800833a:	2100      	movs	r1, #0
 800833c:	2001      	movs	r0, #1
 800833e:	f000 fbcd 	bl	8008adc <xQueueGenericCreate>
 8008342:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008344:	69fb      	ldr	r3, [r7, #28]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d022      	beq.n	8008390 <osSemaphoreNew+0xe8>
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d01f      	beq.n	8008390 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008350:	2300      	movs	r3, #0
 8008352:	2200      	movs	r2, #0
 8008354:	2100      	movs	r1, #0
 8008356:	69f8      	ldr	r0, [r7, #28]
 8008358:	f000 fd3e 	bl	8008dd8 <xQueueGenericSend>
 800835c:	4603      	mov	r3, r0
 800835e:	2b01      	cmp	r3, #1
 8008360:	d016      	beq.n	8008390 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8008362:	69f8      	ldr	r0, [r7, #28]
 8008364:	f001 f9ca 	bl	80096fc <vQueueDelete>
            hSemaphore = NULL;
 8008368:	2300      	movs	r3, #0
 800836a:	61fb      	str	r3, [r7, #28]
 800836c:	e010      	b.n	8008390 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800836e:	69bb      	ldr	r3, [r7, #24]
 8008370:	2b01      	cmp	r3, #1
 8008372:	d108      	bne.n	8008386 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	689b      	ldr	r3, [r3, #8]
 8008378:	461a      	mov	r2, r3
 800837a:	68b9      	ldr	r1, [r7, #8]
 800837c:	68f8      	ldr	r0, [r7, #12]
 800837e:	f000 fcc1 	bl	8008d04 <xQueueCreateCountingSemaphoreStatic>
 8008382:	61f8      	str	r0, [r7, #28]
 8008384:	e004      	b.n	8008390 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008386:	68b9      	ldr	r1, [r7, #8]
 8008388:	68f8      	ldr	r0, [r7, #12]
 800838a:	f000 fcf2 	bl	8008d72 <xQueueCreateCountingSemaphore>
 800838e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008390:	69fb      	ldr	r3, [r7, #28]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d00c      	beq.n	80083b0 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d003      	beq.n	80083a4 <osSemaphoreNew+0xfc>
          name = attr->name;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	617b      	str	r3, [r7, #20]
 80083a2:	e001      	b.n	80083a8 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80083a4:	2300      	movs	r3, #0
 80083a6:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80083a8:	6979      	ldr	r1, [r7, #20]
 80083aa:	69f8      	ldr	r0, [r7, #28]
 80083ac:	f001 faf2 	bl	8009994 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80083b0:	69fb      	ldr	r3, [r7, #28]
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3720      	adds	r7, #32
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}
	...

080083bc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80083bc:	b580      	push	{r7, lr}
 80083be:	b086      	sub	sp, #24
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80083ca:	2300      	movs	r3, #0
 80083cc:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d103      	bne.n	80083dc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80083d4:	f06f 0303 	mvn.w	r3, #3
 80083d8:	617b      	str	r3, [r7, #20]
 80083da:	e039      	b.n	8008450 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083dc:	f3ef 8305 	mrs	r3, IPSR
 80083e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80083e2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d022      	beq.n	800842e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d003      	beq.n	80083f6 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80083ee:	f06f 0303 	mvn.w	r3, #3
 80083f2:	617b      	str	r3, [r7, #20]
 80083f4:	e02c      	b.n	8008450 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80083f6:	2300      	movs	r3, #0
 80083f8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80083fa:	f107 0308 	add.w	r3, r7, #8
 80083fe:	461a      	mov	r2, r3
 8008400:	2100      	movs	r1, #0
 8008402:	6938      	ldr	r0, [r7, #16]
 8008404:	f001 f8fa 	bl	80095fc <xQueueReceiveFromISR>
 8008408:	4603      	mov	r3, r0
 800840a:	2b01      	cmp	r3, #1
 800840c:	d003      	beq.n	8008416 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800840e:	f06f 0302 	mvn.w	r3, #2
 8008412:	617b      	str	r3, [r7, #20]
 8008414:	e01c      	b.n	8008450 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d019      	beq.n	8008450 <osSemaphoreAcquire+0x94>
 800841c:	4b0f      	ldr	r3, [pc, #60]	; (800845c <osSemaphoreAcquire+0xa0>)
 800841e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008422:	601a      	str	r2, [r3, #0]
 8008424:	f3bf 8f4f 	dsb	sy
 8008428:	f3bf 8f6f 	isb	sy
 800842c:	e010      	b.n	8008450 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800842e:	6839      	ldr	r1, [r7, #0]
 8008430:	6938      	ldr	r0, [r7, #16]
 8008432:	f000 ffd7 	bl	80093e4 <xQueueSemaphoreTake>
 8008436:	4603      	mov	r3, r0
 8008438:	2b01      	cmp	r3, #1
 800843a:	d009      	beq.n	8008450 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d003      	beq.n	800844a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8008442:	f06f 0301 	mvn.w	r3, #1
 8008446:	617b      	str	r3, [r7, #20]
 8008448:	e002      	b.n	8008450 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800844a:	f06f 0302 	mvn.w	r3, #2
 800844e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008450:	697b      	ldr	r3, [r7, #20]
}
 8008452:	4618      	mov	r0, r3
 8008454:	3718      	adds	r7, #24
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}
 800845a:	bf00      	nop
 800845c:	e000ed04 	.word	0xe000ed04

08008460 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008460:	b580      	push	{r7, lr}
 8008462:	b086      	sub	sp, #24
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800846c:	2300      	movs	r3, #0
 800846e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d103      	bne.n	800847e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8008476:	f06f 0303 	mvn.w	r3, #3
 800847a:	617b      	str	r3, [r7, #20]
 800847c:	e02c      	b.n	80084d8 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800847e:	f3ef 8305 	mrs	r3, IPSR
 8008482:	60fb      	str	r3, [r7, #12]
  return(result);
 8008484:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008486:	2b00      	cmp	r3, #0
 8008488:	d01a      	beq.n	80084c0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800848a:	2300      	movs	r3, #0
 800848c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800848e:	f107 0308 	add.w	r3, r7, #8
 8008492:	4619      	mov	r1, r3
 8008494:	6938      	ldr	r0, [r7, #16]
 8008496:	f000 fe38 	bl	800910a <xQueueGiveFromISR>
 800849a:	4603      	mov	r3, r0
 800849c:	2b01      	cmp	r3, #1
 800849e:	d003      	beq.n	80084a8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80084a0:	f06f 0302 	mvn.w	r3, #2
 80084a4:	617b      	str	r3, [r7, #20]
 80084a6:	e017      	b.n	80084d8 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d014      	beq.n	80084d8 <osSemaphoreRelease+0x78>
 80084ae:	4b0d      	ldr	r3, [pc, #52]	; (80084e4 <osSemaphoreRelease+0x84>)
 80084b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084b4:	601a      	str	r2, [r3, #0]
 80084b6:	f3bf 8f4f 	dsb	sy
 80084ba:	f3bf 8f6f 	isb	sy
 80084be:	e00b      	b.n	80084d8 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80084c0:	2300      	movs	r3, #0
 80084c2:	2200      	movs	r2, #0
 80084c4:	2100      	movs	r1, #0
 80084c6:	6938      	ldr	r0, [r7, #16]
 80084c8:	f000 fc86 	bl	8008dd8 <xQueueGenericSend>
 80084cc:	4603      	mov	r3, r0
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	d002      	beq.n	80084d8 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80084d2:	f06f 0302 	mvn.w	r3, #2
 80084d6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80084d8:	697b      	ldr	r3, [r7, #20]
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3718      	adds	r7, #24
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
 80084e2:	bf00      	nop
 80084e4:	e000ed04 	.word	0xe000ed04

080084e8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b08a      	sub	sp, #40	; 0x28
 80084ec:	af02      	add	r7, sp, #8
 80084ee:	60f8      	str	r0, [r7, #12]
 80084f0:	60b9      	str	r1, [r7, #8]
 80084f2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80084f4:	2300      	movs	r3, #0
 80084f6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084f8:	f3ef 8305 	mrs	r3, IPSR
 80084fc:	613b      	str	r3, [r7, #16]
  return(result);
 80084fe:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008500:	2b00      	cmp	r3, #0
 8008502:	d15f      	bne.n	80085c4 <osMessageQueueNew+0xdc>
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d05c      	beq.n	80085c4 <osMessageQueueNew+0xdc>
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d059      	beq.n	80085c4 <osMessageQueueNew+0xdc>
    mem = -1;
 8008510:	f04f 33ff 	mov.w	r3, #4294967295
 8008514:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d029      	beq.n	8008570 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	689b      	ldr	r3, [r3, #8]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d012      	beq.n	800854a <osMessageQueueNew+0x62>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	68db      	ldr	r3, [r3, #12]
 8008528:	2b4f      	cmp	r3, #79	; 0x4f
 800852a:	d90e      	bls.n	800854a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008530:	2b00      	cmp	r3, #0
 8008532:	d00a      	beq.n	800854a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	695a      	ldr	r2, [r3, #20]
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	68b9      	ldr	r1, [r7, #8]
 800853c:	fb01 f303 	mul.w	r3, r1, r3
 8008540:	429a      	cmp	r2, r3
 8008542:	d302      	bcc.n	800854a <osMessageQueueNew+0x62>
        mem = 1;
 8008544:	2301      	movs	r3, #1
 8008546:	61bb      	str	r3, [r7, #24]
 8008548:	e014      	b.n	8008574 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	689b      	ldr	r3, [r3, #8]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d110      	bne.n	8008574 <osMessageQueueNew+0x8c>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	68db      	ldr	r3, [r3, #12]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d10c      	bne.n	8008574 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800855e:	2b00      	cmp	r3, #0
 8008560:	d108      	bne.n	8008574 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	695b      	ldr	r3, [r3, #20]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d104      	bne.n	8008574 <osMessageQueueNew+0x8c>
          mem = 0;
 800856a:	2300      	movs	r3, #0
 800856c:	61bb      	str	r3, [r7, #24]
 800856e:	e001      	b.n	8008574 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8008570:	2300      	movs	r3, #0
 8008572:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008574:	69bb      	ldr	r3, [r7, #24]
 8008576:	2b01      	cmp	r3, #1
 8008578:	d10b      	bne.n	8008592 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	691a      	ldr	r2, [r3, #16]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	689b      	ldr	r3, [r3, #8]
 8008582:	2100      	movs	r1, #0
 8008584:	9100      	str	r1, [sp, #0]
 8008586:	68b9      	ldr	r1, [r7, #8]
 8008588:	68f8      	ldr	r0, [r7, #12]
 800858a:	f000 fa2f 	bl	80089ec <xQueueGenericCreateStatic>
 800858e:	61f8      	str	r0, [r7, #28]
 8008590:	e008      	b.n	80085a4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8008592:	69bb      	ldr	r3, [r7, #24]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d105      	bne.n	80085a4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8008598:	2200      	movs	r2, #0
 800859a:	68b9      	ldr	r1, [r7, #8]
 800859c:	68f8      	ldr	r0, [r7, #12]
 800859e:	f000 fa9d 	bl	8008adc <xQueueGenericCreate>
 80085a2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80085a4:	69fb      	ldr	r3, [r7, #28]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d00c      	beq.n	80085c4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d003      	beq.n	80085b8 <osMessageQueueNew+0xd0>
        name = attr->name;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	617b      	str	r3, [r7, #20]
 80085b6:	e001      	b.n	80085bc <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80085b8:	2300      	movs	r3, #0
 80085ba:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80085bc:	6979      	ldr	r1, [r7, #20]
 80085be:	69f8      	ldr	r0, [r7, #28]
 80085c0:	f001 f9e8 	bl	8009994 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80085c4:	69fb      	ldr	r3, [r7, #28]
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3720      	adds	r7, #32
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
	...

080085d0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b088      	sub	sp, #32
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	60f8      	str	r0, [r7, #12]
 80085d8:	60b9      	str	r1, [r7, #8]
 80085da:	603b      	str	r3, [r7, #0]
 80085dc:	4613      	mov	r3, r2
 80085de:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80085e4:	2300      	movs	r3, #0
 80085e6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80085e8:	f3ef 8305 	mrs	r3, IPSR
 80085ec:	617b      	str	r3, [r7, #20]
  return(result);
 80085ee:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d028      	beq.n	8008646 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80085f4:	69bb      	ldr	r3, [r7, #24]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d005      	beq.n	8008606 <osMessageQueuePut+0x36>
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d002      	beq.n	8008606 <osMessageQueuePut+0x36>
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d003      	beq.n	800860e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8008606:	f06f 0303 	mvn.w	r3, #3
 800860a:	61fb      	str	r3, [r7, #28]
 800860c:	e038      	b.n	8008680 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800860e:	2300      	movs	r3, #0
 8008610:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008612:	f107 0210 	add.w	r2, r7, #16
 8008616:	2300      	movs	r3, #0
 8008618:	68b9      	ldr	r1, [r7, #8]
 800861a:	69b8      	ldr	r0, [r7, #24]
 800861c:	f000 fcda 	bl	8008fd4 <xQueueGenericSendFromISR>
 8008620:	4603      	mov	r3, r0
 8008622:	2b01      	cmp	r3, #1
 8008624:	d003      	beq.n	800862e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8008626:	f06f 0302 	mvn.w	r3, #2
 800862a:	61fb      	str	r3, [r7, #28]
 800862c:	e028      	b.n	8008680 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d025      	beq.n	8008680 <osMessageQueuePut+0xb0>
 8008634:	4b15      	ldr	r3, [pc, #84]	; (800868c <osMessageQueuePut+0xbc>)
 8008636:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800863a:	601a      	str	r2, [r3, #0]
 800863c:	f3bf 8f4f 	dsb	sy
 8008640:	f3bf 8f6f 	isb	sy
 8008644:	e01c      	b.n	8008680 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008646:	69bb      	ldr	r3, [r7, #24]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d002      	beq.n	8008652 <osMessageQueuePut+0x82>
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d103      	bne.n	800865a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8008652:	f06f 0303 	mvn.w	r3, #3
 8008656:	61fb      	str	r3, [r7, #28]
 8008658:	e012      	b.n	8008680 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800865a:	2300      	movs	r3, #0
 800865c:	683a      	ldr	r2, [r7, #0]
 800865e:	68b9      	ldr	r1, [r7, #8]
 8008660:	69b8      	ldr	r0, [r7, #24]
 8008662:	f000 fbb9 	bl	8008dd8 <xQueueGenericSend>
 8008666:	4603      	mov	r3, r0
 8008668:	2b01      	cmp	r3, #1
 800866a:	d009      	beq.n	8008680 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d003      	beq.n	800867a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8008672:	f06f 0301 	mvn.w	r3, #1
 8008676:	61fb      	str	r3, [r7, #28]
 8008678:	e002      	b.n	8008680 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800867a:	f06f 0302 	mvn.w	r3, #2
 800867e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008680:	69fb      	ldr	r3, [r7, #28]
}
 8008682:	4618      	mov	r0, r3
 8008684:	3720      	adds	r7, #32
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}
 800868a:	bf00      	nop
 800868c:	e000ed04 	.word	0xe000ed04

08008690 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008690:	b580      	push	{r7, lr}
 8008692:	b088      	sub	sp, #32
 8008694:	af00      	add	r7, sp, #0
 8008696:	60f8      	str	r0, [r7, #12]
 8008698:	60b9      	str	r1, [r7, #8]
 800869a:	607a      	str	r2, [r7, #4]
 800869c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80086a2:	2300      	movs	r3, #0
 80086a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80086a6:	f3ef 8305 	mrs	r3, IPSR
 80086aa:	617b      	str	r3, [r7, #20]
  return(result);
 80086ac:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d028      	beq.n	8008704 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80086b2:	69bb      	ldr	r3, [r7, #24]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d005      	beq.n	80086c4 <osMessageQueueGet+0x34>
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d002      	beq.n	80086c4 <osMessageQueueGet+0x34>
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d003      	beq.n	80086cc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80086c4:	f06f 0303 	mvn.w	r3, #3
 80086c8:	61fb      	str	r3, [r7, #28]
 80086ca:	e037      	b.n	800873c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80086cc:	2300      	movs	r3, #0
 80086ce:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80086d0:	f107 0310 	add.w	r3, r7, #16
 80086d4:	461a      	mov	r2, r3
 80086d6:	68b9      	ldr	r1, [r7, #8]
 80086d8:	69b8      	ldr	r0, [r7, #24]
 80086da:	f000 ff8f 	bl	80095fc <xQueueReceiveFromISR>
 80086de:	4603      	mov	r3, r0
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d003      	beq.n	80086ec <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80086e4:	f06f 0302 	mvn.w	r3, #2
 80086e8:	61fb      	str	r3, [r7, #28]
 80086ea:	e027      	b.n	800873c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d024      	beq.n	800873c <osMessageQueueGet+0xac>
 80086f2:	4b15      	ldr	r3, [pc, #84]	; (8008748 <osMessageQueueGet+0xb8>)
 80086f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086f8:	601a      	str	r2, [r3, #0]
 80086fa:	f3bf 8f4f 	dsb	sy
 80086fe:	f3bf 8f6f 	isb	sy
 8008702:	e01b      	b.n	800873c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008704:	69bb      	ldr	r3, [r7, #24]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d002      	beq.n	8008710 <osMessageQueueGet+0x80>
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d103      	bne.n	8008718 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8008710:	f06f 0303 	mvn.w	r3, #3
 8008714:	61fb      	str	r3, [r7, #28]
 8008716:	e011      	b.n	800873c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008718:	683a      	ldr	r2, [r7, #0]
 800871a:	68b9      	ldr	r1, [r7, #8]
 800871c:	69b8      	ldr	r0, [r7, #24]
 800871e:	f000 fd81 	bl	8009224 <xQueueReceive>
 8008722:	4603      	mov	r3, r0
 8008724:	2b01      	cmp	r3, #1
 8008726:	d009      	beq.n	800873c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d003      	beq.n	8008736 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800872e:	f06f 0301 	mvn.w	r3, #1
 8008732:	61fb      	str	r3, [r7, #28]
 8008734:	e002      	b.n	800873c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8008736:	f06f 0302 	mvn.w	r3, #2
 800873a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800873c:	69fb      	ldr	r3, [r7, #28]
}
 800873e:	4618      	mov	r0, r3
 8008740:	3720      	adds	r7, #32
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}
 8008746:	bf00      	nop
 8008748:	e000ed04 	.word	0xe000ed04

0800874c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800874c:	b480      	push	{r7}
 800874e:	b085      	sub	sp, #20
 8008750:	af00      	add	r7, sp, #0
 8008752:	60f8      	str	r0, [r7, #12]
 8008754:	60b9      	str	r1, [r7, #8]
 8008756:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	4a07      	ldr	r2, [pc, #28]	; (8008778 <vApplicationGetIdleTaskMemory+0x2c>)
 800875c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	4a06      	ldr	r2, [pc, #24]	; (800877c <vApplicationGetIdleTaskMemory+0x30>)
 8008762:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2280      	movs	r2, #128	; 0x80
 8008768:	601a      	str	r2, [r3, #0]
}
 800876a:	bf00      	nop
 800876c:	3714      	adds	r7, #20
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr
 8008776:	bf00      	nop
 8008778:	20000710 	.word	0x20000710
 800877c:	2000076c 	.word	0x2000076c

08008780 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008780:	b480      	push	{r7}
 8008782:	b085      	sub	sp, #20
 8008784:	af00      	add	r7, sp, #0
 8008786:	60f8      	str	r0, [r7, #12]
 8008788:	60b9      	str	r1, [r7, #8]
 800878a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	4a07      	ldr	r2, [pc, #28]	; (80087ac <vApplicationGetTimerTaskMemory+0x2c>)
 8008790:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	4a06      	ldr	r2, [pc, #24]	; (80087b0 <vApplicationGetTimerTaskMemory+0x30>)
 8008796:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800879e:	601a      	str	r2, [r3, #0]
}
 80087a0:	bf00      	nop
 80087a2:	3714      	adds	r7, #20
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr
 80087ac:	2000096c 	.word	0x2000096c
 80087b0:	200009c8 	.word	0x200009c8

080087b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80087b4:	b480      	push	{r7}
 80087b6:	b083      	sub	sp, #12
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f103 0208 	add.w	r2, r3, #8
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f04f 32ff 	mov.w	r2, #4294967295
 80087cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f103 0208 	add.w	r2, r3, #8
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f103 0208 	add.w	r2, r3, #8
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2200      	movs	r2, #0
 80087e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80087e8:	bf00      	nop
 80087ea:	370c      	adds	r7, #12
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr

080087f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80087f4:	b480      	push	{r7}
 80087f6:	b083      	sub	sp, #12
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2200      	movs	r2, #0
 8008800:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008802:	bf00      	nop
 8008804:	370c      	adds	r7, #12
 8008806:	46bd      	mov	sp, r7
 8008808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880c:	4770      	bx	lr

0800880e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800880e:	b480      	push	{r7}
 8008810:	b085      	sub	sp, #20
 8008812:	af00      	add	r7, sp, #0
 8008814:	6078      	str	r0, [r7, #4]
 8008816:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	68fa      	ldr	r2, [r7, #12]
 8008822:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	689a      	ldr	r2, [r3, #8]
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	689b      	ldr	r3, [r3, #8]
 8008830:	683a      	ldr	r2, [r7, #0]
 8008832:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	683a      	ldr	r2, [r7, #0]
 8008838:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	1c5a      	adds	r2, r3, #1
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	601a      	str	r2, [r3, #0]
}
 800884a:	bf00      	nop
 800884c:	3714      	adds	r7, #20
 800884e:	46bd      	mov	sp, r7
 8008850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008854:	4770      	bx	lr

08008856 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008856:	b480      	push	{r7}
 8008858:	b085      	sub	sp, #20
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
 800885e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800886c:	d103      	bne.n	8008876 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	691b      	ldr	r3, [r3, #16]
 8008872:	60fb      	str	r3, [r7, #12]
 8008874:	e00c      	b.n	8008890 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	3308      	adds	r3, #8
 800887a:	60fb      	str	r3, [r7, #12]
 800887c:	e002      	b.n	8008884 <vListInsert+0x2e>
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	60fb      	str	r3, [r7, #12]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	68ba      	ldr	r2, [r7, #8]
 800888c:	429a      	cmp	r2, r3
 800888e:	d2f6      	bcs.n	800887e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	685a      	ldr	r2, [r3, #4]
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	683a      	ldr	r2, [r7, #0]
 800889e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	68fa      	ldr	r2, [r7, #12]
 80088a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	683a      	ldr	r2, [r7, #0]
 80088aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	687a      	ldr	r2, [r7, #4]
 80088b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	1c5a      	adds	r2, r3, #1
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	601a      	str	r2, [r3, #0]
}
 80088bc:	bf00      	nop
 80088be:	3714      	adds	r7, #20
 80088c0:	46bd      	mov	sp, r7
 80088c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c6:	4770      	bx	lr

080088c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80088c8:	b480      	push	{r7}
 80088ca:	b085      	sub	sp, #20
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	691b      	ldr	r3, [r3, #16]
 80088d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	6892      	ldr	r2, [r2, #8]
 80088de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	687a      	ldr	r2, [r7, #4]
 80088e6:	6852      	ldr	r2, [r2, #4]
 80088e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	687a      	ldr	r2, [r7, #4]
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d103      	bne.n	80088fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	689a      	ldr	r2, [r3, #8]
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2200      	movs	r2, #0
 8008900:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	1e5a      	subs	r2, r3, #1
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
}
 8008910:	4618      	mov	r0, r3
 8008912:	3714      	adds	r7, #20
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr

0800891c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b084      	sub	sp, #16
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d10a      	bne.n	8008946 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008934:	f383 8811 	msr	BASEPRI, r3
 8008938:	f3bf 8f6f 	isb	sy
 800893c:	f3bf 8f4f 	dsb	sy
 8008940:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008942:	bf00      	nop
 8008944:	e7fe      	b.n	8008944 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008946:	f002 fec5 	bl	800b6d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681a      	ldr	r2, [r3, #0]
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008952:	68f9      	ldr	r1, [r7, #12]
 8008954:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008956:	fb01 f303 	mul.w	r3, r1, r3
 800895a:	441a      	add	r2, r3
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2200      	movs	r2, #0
 8008964:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681a      	ldr	r2, [r3, #0]
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681a      	ldr	r2, [r3, #0]
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008976:	3b01      	subs	r3, #1
 8008978:	68f9      	ldr	r1, [r7, #12]
 800897a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800897c:	fb01 f303 	mul.w	r3, r1, r3
 8008980:	441a      	add	r2, r3
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	22ff      	movs	r2, #255	; 0xff
 800898a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	22ff      	movs	r2, #255	; 0xff
 8008992:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d114      	bne.n	80089c6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	691b      	ldr	r3, [r3, #16]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d01a      	beq.n	80089da <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	3310      	adds	r3, #16
 80089a8:	4618      	mov	r0, r3
 80089aa:	f001 fdb3 	bl	800a514 <xTaskRemoveFromEventList>
 80089ae:	4603      	mov	r3, r0
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d012      	beq.n	80089da <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80089b4:	4b0c      	ldr	r3, [pc, #48]	; (80089e8 <xQueueGenericReset+0xcc>)
 80089b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089ba:	601a      	str	r2, [r3, #0]
 80089bc:	f3bf 8f4f 	dsb	sy
 80089c0:	f3bf 8f6f 	isb	sy
 80089c4:	e009      	b.n	80089da <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	3310      	adds	r3, #16
 80089ca:	4618      	mov	r0, r3
 80089cc:	f7ff fef2 	bl	80087b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	3324      	adds	r3, #36	; 0x24
 80089d4:	4618      	mov	r0, r3
 80089d6:	f7ff feed 	bl	80087b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80089da:	f002 feab 	bl	800b734 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80089de:	2301      	movs	r3, #1
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3710      	adds	r7, #16
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}
 80089e8:	e000ed04 	.word	0xe000ed04

080089ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b08e      	sub	sp, #56	; 0x38
 80089f0:	af02      	add	r7, sp, #8
 80089f2:	60f8      	str	r0, [r7, #12]
 80089f4:	60b9      	str	r1, [r7, #8]
 80089f6:	607a      	str	r2, [r7, #4]
 80089f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d10a      	bne.n	8008a16 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a04:	f383 8811 	msr	BASEPRI, r3
 8008a08:	f3bf 8f6f 	isb	sy
 8008a0c:	f3bf 8f4f 	dsb	sy
 8008a10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008a12:	bf00      	nop
 8008a14:	e7fe      	b.n	8008a14 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d10a      	bne.n	8008a32 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a20:	f383 8811 	msr	BASEPRI, r3
 8008a24:	f3bf 8f6f 	isb	sy
 8008a28:	f3bf 8f4f 	dsb	sy
 8008a2c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008a2e:	bf00      	nop
 8008a30:	e7fe      	b.n	8008a30 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d002      	beq.n	8008a3e <xQueueGenericCreateStatic+0x52>
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d001      	beq.n	8008a42 <xQueueGenericCreateStatic+0x56>
 8008a3e:	2301      	movs	r3, #1
 8008a40:	e000      	b.n	8008a44 <xQueueGenericCreateStatic+0x58>
 8008a42:	2300      	movs	r3, #0
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d10a      	bne.n	8008a5e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a4c:	f383 8811 	msr	BASEPRI, r3
 8008a50:	f3bf 8f6f 	isb	sy
 8008a54:	f3bf 8f4f 	dsb	sy
 8008a58:	623b      	str	r3, [r7, #32]
}
 8008a5a:	bf00      	nop
 8008a5c:	e7fe      	b.n	8008a5c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d102      	bne.n	8008a6a <xQueueGenericCreateStatic+0x7e>
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d101      	bne.n	8008a6e <xQueueGenericCreateStatic+0x82>
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	e000      	b.n	8008a70 <xQueueGenericCreateStatic+0x84>
 8008a6e:	2300      	movs	r3, #0
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d10a      	bne.n	8008a8a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a78:	f383 8811 	msr	BASEPRI, r3
 8008a7c:	f3bf 8f6f 	isb	sy
 8008a80:	f3bf 8f4f 	dsb	sy
 8008a84:	61fb      	str	r3, [r7, #28]
}
 8008a86:	bf00      	nop
 8008a88:	e7fe      	b.n	8008a88 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008a8a:	2350      	movs	r3, #80	; 0x50
 8008a8c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	2b50      	cmp	r3, #80	; 0x50
 8008a92:	d00a      	beq.n	8008aaa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a98:	f383 8811 	msr	BASEPRI, r3
 8008a9c:	f3bf 8f6f 	isb	sy
 8008aa0:	f3bf 8f4f 	dsb	sy
 8008aa4:	61bb      	str	r3, [r7, #24]
}
 8008aa6:	bf00      	nop
 8008aa8:	e7fe      	b.n	8008aa8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008aaa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d00d      	beq.n	8008ad2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab8:	2201      	movs	r2, #1
 8008aba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008abe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac4:	9300      	str	r3, [sp, #0]
 8008ac6:	4613      	mov	r3, r2
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	68b9      	ldr	r1, [r7, #8]
 8008acc:	68f8      	ldr	r0, [r7, #12]
 8008ace:	f000 f83f 	bl	8008b50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3730      	adds	r7, #48	; 0x30
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b08a      	sub	sp, #40	; 0x28
 8008ae0:	af02      	add	r7, sp, #8
 8008ae2:	60f8      	str	r0, [r7, #12]
 8008ae4:	60b9      	str	r1, [r7, #8]
 8008ae6:	4613      	mov	r3, r2
 8008ae8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d10a      	bne.n	8008b06 <xQueueGenericCreate+0x2a>
	__asm volatile
 8008af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af4:	f383 8811 	msr	BASEPRI, r3
 8008af8:	f3bf 8f6f 	isb	sy
 8008afc:	f3bf 8f4f 	dsb	sy
 8008b00:	613b      	str	r3, [r7, #16]
}
 8008b02:	bf00      	nop
 8008b04:	e7fe      	b.n	8008b04 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	68ba      	ldr	r2, [r7, #8]
 8008b0a:	fb02 f303 	mul.w	r3, r2, r3
 8008b0e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008b10:	69fb      	ldr	r3, [r7, #28]
 8008b12:	3350      	adds	r3, #80	; 0x50
 8008b14:	4618      	mov	r0, r3
 8008b16:	f002 feff 	bl	800b918 <pvPortMalloc>
 8008b1a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008b1c:	69bb      	ldr	r3, [r7, #24]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d011      	beq.n	8008b46 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008b22:	69bb      	ldr	r3, [r7, #24]
 8008b24:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	3350      	adds	r3, #80	; 0x50
 8008b2a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008b2c:	69bb      	ldr	r3, [r7, #24]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008b34:	79fa      	ldrb	r2, [r7, #7]
 8008b36:	69bb      	ldr	r3, [r7, #24]
 8008b38:	9300      	str	r3, [sp, #0]
 8008b3a:	4613      	mov	r3, r2
 8008b3c:	697a      	ldr	r2, [r7, #20]
 8008b3e:	68b9      	ldr	r1, [r7, #8]
 8008b40:	68f8      	ldr	r0, [r7, #12]
 8008b42:	f000 f805 	bl	8008b50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008b46:	69bb      	ldr	r3, [r7, #24]
	}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3720      	adds	r7, #32
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b084      	sub	sp, #16
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	60f8      	str	r0, [r7, #12]
 8008b58:	60b9      	str	r1, [r7, #8]
 8008b5a:	607a      	str	r2, [r7, #4]
 8008b5c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d103      	bne.n	8008b6c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008b64:	69bb      	ldr	r3, [r7, #24]
 8008b66:	69ba      	ldr	r2, [r7, #24]
 8008b68:	601a      	str	r2, [r3, #0]
 8008b6a:	e002      	b.n	8008b72 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008b6c:	69bb      	ldr	r3, [r7, #24]
 8008b6e:	687a      	ldr	r2, [r7, #4]
 8008b70:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008b72:	69bb      	ldr	r3, [r7, #24]
 8008b74:	68fa      	ldr	r2, [r7, #12]
 8008b76:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008b78:	69bb      	ldr	r3, [r7, #24]
 8008b7a:	68ba      	ldr	r2, [r7, #8]
 8008b7c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008b7e:	2101      	movs	r1, #1
 8008b80:	69b8      	ldr	r0, [r7, #24]
 8008b82:	f7ff fecb 	bl	800891c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008b86:	69bb      	ldr	r3, [r7, #24]
 8008b88:	78fa      	ldrb	r2, [r7, #3]
 8008b8a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008b8e:	bf00      	nop
 8008b90:	3710      	adds	r7, #16
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}

08008b96 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008b96:	b580      	push	{r7, lr}
 8008b98:	b082      	sub	sp, #8
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d00e      	beq.n	8008bc2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2200      	movs	r2, #0
 8008bae:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	2200      	movs	r2, #0
 8008bba:	2100      	movs	r1, #0
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f000 f90b 	bl	8008dd8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008bc2:	bf00      	nop
 8008bc4:	3708      	adds	r7, #8
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}

08008bca <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008bca:	b580      	push	{r7, lr}
 8008bcc:	b086      	sub	sp, #24
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	617b      	str	r3, [r7, #20]
 8008bd8:	2300      	movs	r3, #0
 8008bda:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008bdc:	79fb      	ldrb	r3, [r7, #7]
 8008bde:	461a      	mov	r2, r3
 8008be0:	6939      	ldr	r1, [r7, #16]
 8008be2:	6978      	ldr	r0, [r7, #20]
 8008be4:	f7ff ff7a 	bl	8008adc <xQueueGenericCreate>
 8008be8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008bea:	68f8      	ldr	r0, [r7, #12]
 8008bec:	f7ff ffd3 	bl	8008b96 <prvInitialiseMutex>

		return xNewQueue;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
	}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3718      	adds	r7, #24
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}

08008bfa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8008bfa:	b580      	push	{r7, lr}
 8008bfc:	b088      	sub	sp, #32
 8008bfe:	af02      	add	r7, sp, #8
 8008c00:	4603      	mov	r3, r0
 8008c02:	6039      	str	r1, [r7, #0]
 8008c04:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008c06:	2301      	movs	r3, #1
 8008c08:	617b      	str	r3, [r7, #20]
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008c0e:	79fb      	ldrb	r3, [r7, #7]
 8008c10:	9300      	str	r3, [sp, #0]
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	2200      	movs	r2, #0
 8008c16:	6939      	ldr	r1, [r7, #16]
 8008c18:	6978      	ldr	r0, [r7, #20]
 8008c1a:	f7ff fee7 	bl	80089ec <xQueueGenericCreateStatic>
 8008c1e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008c20:	68f8      	ldr	r0, [r7, #12]
 8008c22:	f7ff ffb8 	bl	8008b96 <prvInitialiseMutex>

		return xNewQueue;
 8008c26:	68fb      	ldr	r3, [r7, #12]
	}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3718      	adds	r7, #24
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}

08008c30 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8008c30:	b590      	push	{r4, r7, lr}
 8008c32:	b087      	sub	sp, #28
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d10a      	bne.n	8008c58 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8008c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c46:	f383 8811 	msr	BASEPRI, r3
 8008c4a:	f3bf 8f6f 	isb	sy
 8008c4e:	f3bf 8f4f 	dsb	sy
 8008c52:	60fb      	str	r3, [r7, #12]
}
 8008c54:	bf00      	nop
 8008c56:	e7fe      	b.n	8008c56 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	689c      	ldr	r4, [r3, #8]
 8008c5c:	f001 fe18 	bl	800a890 <xTaskGetCurrentTaskHandle>
 8008c60:	4603      	mov	r3, r0
 8008c62:	429c      	cmp	r4, r3
 8008c64:	d111      	bne.n	8008c8a <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	68db      	ldr	r3, [r3, #12]
 8008c6a:	1e5a      	subs	r2, r3, #1
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	68db      	ldr	r3, [r3, #12]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d105      	bne.n	8008c84 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8008c78:	2300      	movs	r3, #0
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	2100      	movs	r1, #0
 8008c7e:	6938      	ldr	r0, [r7, #16]
 8008c80:	f000 f8aa 	bl	8008dd8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8008c84:	2301      	movs	r3, #1
 8008c86:	617b      	str	r3, [r7, #20]
 8008c88:	e001      	b.n	8008c8e <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8008c8e:	697b      	ldr	r3, [r7, #20]
	}
 8008c90:	4618      	mov	r0, r3
 8008c92:	371c      	adds	r7, #28
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd90      	pop	{r4, r7, pc}

08008c98 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8008c98:	b590      	push	{r4, r7, lr}
 8008c9a:	b087      	sub	sp, #28
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d10a      	bne.n	8008cc2 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8008cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb0:	f383 8811 	msr	BASEPRI, r3
 8008cb4:	f3bf 8f6f 	isb	sy
 8008cb8:	f3bf 8f4f 	dsb	sy
 8008cbc:	60fb      	str	r3, [r7, #12]
}
 8008cbe:	bf00      	nop
 8008cc0:	e7fe      	b.n	8008cc0 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	689c      	ldr	r4, [r3, #8]
 8008cc6:	f001 fde3 	bl	800a890 <xTaskGetCurrentTaskHandle>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	429c      	cmp	r4, r3
 8008cce:	d107      	bne.n	8008ce0 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	68db      	ldr	r3, [r3, #12]
 8008cd4:	1c5a      	adds	r2, r3, #1
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	617b      	str	r3, [r7, #20]
 8008cde:	e00c      	b.n	8008cfa <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8008ce0:	6839      	ldr	r1, [r7, #0]
 8008ce2:	6938      	ldr	r0, [r7, #16]
 8008ce4:	f000 fb7e 	bl	80093e4 <xQueueSemaphoreTake>
 8008ce8:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d004      	beq.n	8008cfa <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	68db      	ldr	r3, [r3, #12]
 8008cf4:	1c5a      	adds	r2, r3, #1
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8008cfa:	697b      	ldr	r3, [r7, #20]
	}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	371c      	adds	r7, #28
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd90      	pop	{r4, r7, pc}

08008d04 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b08a      	sub	sp, #40	; 0x28
 8008d08:	af02      	add	r7, sp, #8
 8008d0a:	60f8      	str	r0, [r7, #12]
 8008d0c:	60b9      	str	r1, [r7, #8]
 8008d0e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d10a      	bne.n	8008d2c <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8008d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d1a:	f383 8811 	msr	BASEPRI, r3
 8008d1e:	f3bf 8f6f 	isb	sy
 8008d22:	f3bf 8f4f 	dsb	sy
 8008d26:	61bb      	str	r3, [r7, #24]
}
 8008d28:	bf00      	nop
 8008d2a:	e7fe      	b.n	8008d2a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008d2c:	68ba      	ldr	r2, [r7, #8]
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d90a      	bls.n	8008d4a <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8008d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d38:	f383 8811 	msr	BASEPRI, r3
 8008d3c:	f3bf 8f6f 	isb	sy
 8008d40:	f3bf 8f4f 	dsb	sy
 8008d44:	617b      	str	r3, [r7, #20]
}
 8008d46:	bf00      	nop
 8008d48:	e7fe      	b.n	8008d48 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008d4a:	2302      	movs	r3, #2
 8008d4c:	9300      	str	r3, [sp, #0]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2200      	movs	r2, #0
 8008d52:	2100      	movs	r1, #0
 8008d54:	68f8      	ldr	r0, [r7, #12]
 8008d56:	f7ff fe49 	bl	80089ec <xQueueGenericCreateStatic>
 8008d5a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008d5c:	69fb      	ldr	r3, [r7, #28]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d002      	beq.n	8008d68 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008d62:	69fb      	ldr	r3, [r7, #28]
 8008d64:	68ba      	ldr	r2, [r7, #8]
 8008d66:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008d68:	69fb      	ldr	r3, [r7, #28]
	}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3720      	adds	r7, #32
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}

08008d72 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008d72:	b580      	push	{r7, lr}
 8008d74:	b086      	sub	sp, #24
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	6078      	str	r0, [r7, #4]
 8008d7a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d10a      	bne.n	8008d98 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8008d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d86:	f383 8811 	msr	BASEPRI, r3
 8008d8a:	f3bf 8f6f 	isb	sy
 8008d8e:	f3bf 8f4f 	dsb	sy
 8008d92:	613b      	str	r3, [r7, #16]
}
 8008d94:	bf00      	nop
 8008d96:	e7fe      	b.n	8008d96 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008d98:	683a      	ldr	r2, [r7, #0]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d90a      	bls.n	8008db6 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8008da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da4:	f383 8811 	msr	BASEPRI, r3
 8008da8:	f3bf 8f6f 	isb	sy
 8008dac:	f3bf 8f4f 	dsb	sy
 8008db0:	60fb      	str	r3, [r7, #12]
}
 8008db2:	bf00      	nop
 8008db4:	e7fe      	b.n	8008db4 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008db6:	2202      	movs	r2, #2
 8008db8:	2100      	movs	r1, #0
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f7ff fe8e 	bl	8008adc <xQueueGenericCreate>
 8008dc0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d002      	beq.n	8008dce <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	683a      	ldr	r2, [r7, #0]
 8008dcc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008dce:	697b      	ldr	r3, [r7, #20]
	}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3718      	adds	r7, #24
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}

08008dd8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b08e      	sub	sp, #56	; 0x38
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	60f8      	str	r0, [r7, #12]
 8008de0:	60b9      	str	r1, [r7, #8]
 8008de2:	607a      	str	r2, [r7, #4]
 8008de4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008de6:	2300      	movs	r3, #0
 8008de8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d10a      	bne.n	8008e0a <xQueueGenericSend+0x32>
	__asm volatile
 8008df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df8:	f383 8811 	msr	BASEPRI, r3
 8008dfc:	f3bf 8f6f 	isb	sy
 8008e00:	f3bf 8f4f 	dsb	sy
 8008e04:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008e06:	bf00      	nop
 8008e08:	e7fe      	b.n	8008e08 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d103      	bne.n	8008e18 <xQueueGenericSend+0x40>
 8008e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d101      	bne.n	8008e1c <xQueueGenericSend+0x44>
 8008e18:	2301      	movs	r3, #1
 8008e1a:	e000      	b.n	8008e1e <xQueueGenericSend+0x46>
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d10a      	bne.n	8008e38 <xQueueGenericSend+0x60>
	__asm volatile
 8008e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e26:	f383 8811 	msr	BASEPRI, r3
 8008e2a:	f3bf 8f6f 	isb	sy
 8008e2e:	f3bf 8f4f 	dsb	sy
 8008e32:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008e34:	bf00      	nop
 8008e36:	e7fe      	b.n	8008e36 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	2b02      	cmp	r3, #2
 8008e3c:	d103      	bne.n	8008e46 <xQueueGenericSend+0x6e>
 8008e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e42:	2b01      	cmp	r3, #1
 8008e44:	d101      	bne.n	8008e4a <xQueueGenericSend+0x72>
 8008e46:	2301      	movs	r3, #1
 8008e48:	e000      	b.n	8008e4c <xQueueGenericSend+0x74>
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d10a      	bne.n	8008e66 <xQueueGenericSend+0x8e>
	__asm volatile
 8008e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e54:	f383 8811 	msr	BASEPRI, r3
 8008e58:	f3bf 8f6f 	isb	sy
 8008e5c:	f3bf 8f4f 	dsb	sy
 8008e60:	623b      	str	r3, [r7, #32]
}
 8008e62:	bf00      	nop
 8008e64:	e7fe      	b.n	8008e64 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008e66:	f001 fd23 	bl	800a8b0 <xTaskGetSchedulerState>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d102      	bne.n	8008e76 <xQueueGenericSend+0x9e>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d101      	bne.n	8008e7a <xQueueGenericSend+0xa2>
 8008e76:	2301      	movs	r3, #1
 8008e78:	e000      	b.n	8008e7c <xQueueGenericSend+0xa4>
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d10a      	bne.n	8008e96 <xQueueGenericSend+0xbe>
	__asm volatile
 8008e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e84:	f383 8811 	msr	BASEPRI, r3
 8008e88:	f3bf 8f6f 	isb	sy
 8008e8c:	f3bf 8f4f 	dsb	sy
 8008e90:	61fb      	str	r3, [r7, #28]
}
 8008e92:	bf00      	nop
 8008e94:	e7fe      	b.n	8008e94 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008e96:	f002 fc1d 	bl	800b6d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d302      	bcc.n	8008eac <xQueueGenericSend+0xd4>
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	2b02      	cmp	r3, #2
 8008eaa:	d129      	bne.n	8008f00 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008eac:	683a      	ldr	r2, [r7, #0]
 8008eae:	68b9      	ldr	r1, [r7, #8]
 8008eb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008eb2:	f000 fc5e 	bl	8009772 <prvCopyDataToQueue>
 8008eb6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d010      	beq.n	8008ee2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec2:	3324      	adds	r3, #36	; 0x24
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f001 fb25 	bl	800a514 <xTaskRemoveFromEventList>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d013      	beq.n	8008ef8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008ed0:	4b3f      	ldr	r3, [pc, #252]	; (8008fd0 <xQueueGenericSend+0x1f8>)
 8008ed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ed6:	601a      	str	r2, [r3, #0]
 8008ed8:	f3bf 8f4f 	dsb	sy
 8008edc:	f3bf 8f6f 	isb	sy
 8008ee0:	e00a      	b.n	8008ef8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d007      	beq.n	8008ef8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008ee8:	4b39      	ldr	r3, [pc, #228]	; (8008fd0 <xQueueGenericSend+0x1f8>)
 8008eea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008eee:	601a      	str	r2, [r3, #0]
 8008ef0:	f3bf 8f4f 	dsb	sy
 8008ef4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008ef8:	f002 fc1c 	bl	800b734 <vPortExitCritical>
				return pdPASS;
 8008efc:	2301      	movs	r3, #1
 8008efe:	e063      	b.n	8008fc8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d103      	bne.n	8008f0e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008f06:	f002 fc15 	bl	800b734 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	e05c      	b.n	8008fc8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d106      	bne.n	8008f22 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008f14:	f107 0314 	add.w	r3, r7, #20
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f001 fb5f 	bl	800a5dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008f22:	f002 fc07 	bl	800b734 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008f26:	f001 f8d1 	bl	800a0cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008f2a:	f002 fbd3 	bl	800b6d4 <vPortEnterCritical>
 8008f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f34:	b25b      	sxtb	r3, r3
 8008f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f3a:	d103      	bne.n	8008f44 <xQueueGenericSend+0x16c>
 8008f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f3e:	2200      	movs	r2, #0
 8008f40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f4a:	b25b      	sxtb	r3, r3
 8008f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f50:	d103      	bne.n	8008f5a <xQueueGenericSend+0x182>
 8008f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f54:	2200      	movs	r2, #0
 8008f56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f5a:	f002 fbeb 	bl	800b734 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008f5e:	1d3a      	adds	r2, r7, #4
 8008f60:	f107 0314 	add.w	r3, r7, #20
 8008f64:	4611      	mov	r1, r2
 8008f66:	4618      	mov	r0, r3
 8008f68:	f001 fb4e 	bl	800a608 <xTaskCheckForTimeOut>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d124      	bne.n	8008fbc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008f72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f74:	f000 fcf5 	bl	8009962 <prvIsQueueFull>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d018      	beq.n	8008fb0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f80:	3310      	adds	r3, #16
 8008f82:	687a      	ldr	r2, [r7, #4]
 8008f84:	4611      	mov	r1, r2
 8008f86:	4618      	mov	r0, r3
 8008f88:	f001 fa74 	bl	800a474 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008f8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f8e:	f000 fc80 	bl	8009892 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008f92:	f001 f8a9 	bl	800a0e8 <xTaskResumeAll>
 8008f96:	4603      	mov	r3, r0
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	f47f af7c 	bne.w	8008e96 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008f9e:	4b0c      	ldr	r3, [pc, #48]	; (8008fd0 <xQueueGenericSend+0x1f8>)
 8008fa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fa4:	601a      	str	r2, [r3, #0]
 8008fa6:	f3bf 8f4f 	dsb	sy
 8008faa:	f3bf 8f6f 	isb	sy
 8008fae:	e772      	b.n	8008e96 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008fb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008fb2:	f000 fc6e 	bl	8009892 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008fb6:	f001 f897 	bl	800a0e8 <xTaskResumeAll>
 8008fba:	e76c      	b.n	8008e96 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008fbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008fbe:	f000 fc68 	bl	8009892 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008fc2:	f001 f891 	bl	800a0e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008fc6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3738      	adds	r7, #56	; 0x38
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}
 8008fd0:	e000ed04 	.word	0xe000ed04

08008fd4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b090      	sub	sp, #64	; 0x40
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	60f8      	str	r0, [r7, #12]
 8008fdc:	60b9      	str	r1, [r7, #8]
 8008fde:	607a      	str	r2, [r7, #4]
 8008fe0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d10a      	bne.n	8009002 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff0:	f383 8811 	msr	BASEPRI, r3
 8008ff4:	f3bf 8f6f 	isb	sy
 8008ff8:	f3bf 8f4f 	dsb	sy
 8008ffc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008ffe:	bf00      	nop
 8009000:	e7fe      	b.n	8009000 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d103      	bne.n	8009010 <xQueueGenericSendFromISR+0x3c>
 8009008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800900a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800900c:	2b00      	cmp	r3, #0
 800900e:	d101      	bne.n	8009014 <xQueueGenericSendFromISR+0x40>
 8009010:	2301      	movs	r3, #1
 8009012:	e000      	b.n	8009016 <xQueueGenericSendFromISR+0x42>
 8009014:	2300      	movs	r3, #0
 8009016:	2b00      	cmp	r3, #0
 8009018:	d10a      	bne.n	8009030 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800901a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800901e:	f383 8811 	msr	BASEPRI, r3
 8009022:	f3bf 8f6f 	isb	sy
 8009026:	f3bf 8f4f 	dsb	sy
 800902a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800902c:	bf00      	nop
 800902e:	e7fe      	b.n	800902e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	2b02      	cmp	r3, #2
 8009034:	d103      	bne.n	800903e <xQueueGenericSendFromISR+0x6a>
 8009036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800903a:	2b01      	cmp	r3, #1
 800903c:	d101      	bne.n	8009042 <xQueueGenericSendFromISR+0x6e>
 800903e:	2301      	movs	r3, #1
 8009040:	e000      	b.n	8009044 <xQueueGenericSendFromISR+0x70>
 8009042:	2300      	movs	r3, #0
 8009044:	2b00      	cmp	r3, #0
 8009046:	d10a      	bne.n	800905e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800904c:	f383 8811 	msr	BASEPRI, r3
 8009050:	f3bf 8f6f 	isb	sy
 8009054:	f3bf 8f4f 	dsb	sy
 8009058:	623b      	str	r3, [r7, #32]
}
 800905a:	bf00      	nop
 800905c:	e7fe      	b.n	800905c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800905e:	f002 fc1b 	bl	800b898 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009062:	f3ef 8211 	mrs	r2, BASEPRI
 8009066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800906a:	f383 8811 	msr	BASEPRI, r3
 800906e:	f3bf 8f6f 	isb	sy
 8009072:	f3bf 8f4f 	dsb	sy
 8009076:	61fa      	str	r2, [r7, #28]
 8009078:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800907a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800907c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800907e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009080:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009086:	429a      	cmp	r2, r3
 8009088:	d302      	bcc.n	8009090 <xQueueGenericSendFromISR+0xbc>
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	2b02      	cmp	r3, #2
 800908e:	d12f      	bne.n	80090f0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009092:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009096:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800909a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800909c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800909e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80090a0:	683a      	ldr	r2, [r7, #0]
 80090a2:	68b9      	ldr	r1, [r7, #8]
 80090a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80090a6:	f000 fb64 	bl	8009772 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80090aa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80090ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090b2:	d112      	bne.n	80090da <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80090b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d016      	beq.n	80090ea <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80090bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090be:	3324      	adds	r3, #36	; 0x24
 80090c0:	4618      	mov	r0, r3
 80090c2:	f001 fa27 	bl	800a514 <xTaskRemoveFromEventList>
 80090c6:	4603      	mov	r3, r0
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d00e      	beq.n	80090ea <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d00b      	beq.n	80090ea <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2201      	movs	r2, #1
 80090d6:	601a      	str	r2, [r3, #0]
 80090d8:	e007      	b.n	80090ea <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80090da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80090de:	3301      	adds	r3, #1
 80090e0:	b2db      	uxtb	r3, r3
 80090e2:	b25a      	sxtb	r2, r3
 80090e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80090ea:	2301      	movs	r3, #1
 80090ec:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80090ee:	e001      	b.n	80090f4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80090f0:	2300      	movs	r3, #0
 80090f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090f6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80090fe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009102:	4618      	mov	r0, r3
 8009104:	3740      	adds	r7, #64	; 0x40
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}

0800910a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800910a:	b580      	push	{r7, lr}
 800910c:	b08e      	sub	sp, #56	; 0x38
 800910e:	af00      	add	r7, sp, #0
 8009110:	6078      	str	r0, [r7, #4]
 8009112:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800911a:	2b00      	cmp	r3, #0
 800911c:	d10a      	bne.n	8009134 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800911e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009122:	f383 8811 	msr	BASEPRI, r3
 8009126:	f3bf 8f6f 	isb	sy
 800912a:	f3bf 8f4f 	dsb	sy
 800912e:	623b      	str	r3, [r7, #32]
}
 8009130:	bf00      	nop
 8009132:	e7fe      	b.n	8009132 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009138:	2b00      	cmp	r3, #0
 800913a:	d00a      	beq.n	8009152 <xQueueGiveFromISR+0x48>
	__asm volatile
 800913c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009140:	f383 8811 	msr	BASEPRI, r3
 8009144:	f3bf 8f6f 	isb	sy
 8009148:	f3bf 8f4f 	dsb	sy
 800914c:	61fb      	str	r3, [r7, #28]
}
 800914e:	bf00      	nop
 8009150:	e7fe      	b.n	8009150 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d103      	bne.n	8009162 <xQueueGiveFromISR+0x58>
 800915a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800915c:	689b      	ldr	r3, [r3, #8]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d101      	bne.n	8009166 <xQueueGiveFromISR+0x5c>
 8009162:	2301      	movs	r3, #1
 8009164:	e000      	b.n	8009168 <xQueueGiveFromISR+0x5e>
 8009166:	2300      	movs	r3, #0
 8009168:	2b00      	cmp	r3, #0
 800916a:	d10a      	bne.n	8009182 <xQueueGiveFromISR+0x78>
	__asm volatile
 800916c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009170:	f383 8811 	msr	BASEPRI, r3
 8009174:	f3bf 8f6f 	isb	sy
 8009178:	f3bf 8f4f 	dsb	sy
 800917c:	61bb      	str	r3, [r7, #24]
}
 800917e:	bf00      	nop
 8009180:	e7fe      	b.n	8009180 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009182:	f002 fb89 	bl	800b898 <vPortValidateInterruptPriority>
	__asm volatile
 8009186:	f3ef 8211 	mrs	r2, BASEPRI
 800918a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800918e:	f383 8811 	msr	BASEPRI, r3
 8009192:	f3bf 8f6f 	isb	sy
 8009196:	f3bf 8f4f 	dsb	sy
 800919a:	617a      	str	r2, [r7, #20]
 800919c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800919e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80091a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80091a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091a6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80091a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091ae:	429a      	cmp	r2, r3
 80091b0:	d22b      	bcs.n	800920a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80091b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80091b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80091bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091be:	1c5a      	adds	r2, r3, #1
 80091c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80091c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80091c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091cc:	d112      	bne.n	80091f4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80091ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d016      	beq.n	8009204 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80091d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d8:	3324      	adds	r3, #36	; 0x24
 80091da:	4618      	mov	r0, r3
 80091dc:	f001 f99a 	bl	800a514 <xTaskRemoveFromEventList>
 80091e0:	4603      	mov	r3, r0
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d00e      	beq.n	8009204 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d00b      	beq.n	8009204 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	2201      	movs	r2, #1
 80091f0:	601a      	str	r2, [r3, #0]
 80091f2:	e007      	b.n	8009204 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80091f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80091f8:	3301      	adds	r3, #1
 80091fa:	b2db      	uxtb	r3, r3
 80091fc:	b25a      	sxtb	r2, r3
 80091fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009200:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009204:	2301      	movs	r3, #1
 8009206:	637b      	str	r3, [r7, #52]	; 0x34
 8009208:	e001      	b.n	800920e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800920a:	2300      	movs	r3, #0
 800920c:	637b      	str	r3, [r7, #52]	; 0x34
 800920e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009210:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	f383 8811 	msr	BASEPRI, r3
}
 8009218:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800921a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800921c:	4618      	mov	r0, r3
 800921e:	3738      	adds	r7, #56	; 0x38
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}

08009224 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b08c      	sub	sp, #48	; 0x30
 8009228:	af00      	add	r7, sp, #0
 800922a:	60f8      	str	r0, [r7, #12]
 800922c:	60b9      	str	r1, [r7, #8]
 800922e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009230:	2300      	movs	r3, #0
 8009232:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800923a:	2b00      	cmp	r3, #0
 800923c:	d10a      	bne.n	8009254 <xQueueReceive+0x30>
	__asm volatile
 800923e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009242:	f383 8811 	msr	BASEPRI, r3
 8009246:	f3bf 8f6f 	isb	sy
 800924a:	f3bf 8f4f 	dsb	sy
 800924e:	623b      	str	r3, [r7, #32]
}
 8009250:	bf00      	nop
 8009252:	e7fe      	b.n	8009252 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d103      	bne.n	8009262 <xQueueReceive+0x3e>
 800925a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800925c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800925e:	2b00      	cmp	r3, #0
 8009260:	d101      	bne.n	8009266 <xQueueReceive+0x42>
 8009262:	2301      	movs	r3, #1
 8009264:	e000      	b.n	8009268 <xQueueReceive+0x44>
 8009266:	2300      	movs	r3, #0
 8009268:	2b00      	cmp	r3, #0
 800926a:	d10a      	bne.n	8009282 <xQueueReceive+0x5e>
	__asm volatile
 800926c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009270:	f383 8811 	msr	BASEPRI, r3
 8009274:	f3bf 8f6f 	isb	sy
 8009278:	f3bf 8f4f 	dsb	sy
 800927c:	61fb      	str	r3, [r7, #28]
}
 800927e:	bf00      	nop
 8009280:	e7fe      	b.n	8009280 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009282:	f001 fb15 	bl	800a8b0 <xTaskGetSchedulerState>
 8009286:	4603      	mov	r3, r0
 8009288:	2b00      	cmp	r3, #0
 800928a:	d102      	bne.n	8009292 <xQueueReceive+0x6e>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d101      	bne.n	8009296 <xQueueReceive+0x72>
 8009292:	2301      	movs	r3, #1
 8009294:	e000      	b.n	8009298 <xQueueReceive+0x74>
 8009296:	2300      	movs	r3, #0
 8009298:	2b00      	cmp	r3, #0
 800929a:	d10a      	bne.n	80092b2 <xQueueReceive+0x8e>
	__asm volatile
 800929c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a0:	f383 8811 	msr	BASEPRI, r3
 80092a4:	f3bf 8f6f 	isb	sy
 80092a8:	f3bf 8f4f 	dsb	sy
 80092ac:	61bb      	str	r3, [r7, #24]
}
 80092ae:	bf00      	nop
 80092b0:	e7fe      	b.n	80092b0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80092b2:	f002 fa0f 	bl	800b6d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80092b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80092bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d01f      	beq.n	8009302 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80092c2:	68b9      	ldr	r1, [r7, #8]
 80092c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092c6:	f000 fabe 	bl	8009846 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80092ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092cc:	1e5a      	subs	r2, r3, #1
 80092ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092d0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80092d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092d4:	691b      	ldr	r3, [r3, #16]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d00f      	beq.n	80092fa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80092da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092dc:	3310      	adds	r3, #16
 80092de:	4618      	mov	r0, r3
 80092e0:	f001 f918 	bl	800a514 <xTaskRemoveFromEventList>
 80092e4:	4603      	mov	r3, r0
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d007      	beq.n	80092fa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80092ea:	4b3d      	ldr	r3, [pc, #244]	; (80093e0 <xQueueReceive+0x1bc>)
 80092ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092f0:	601a      	str	r2, [r3, #0]
 80092f2:	f3bf 8f4f 	dsb	sy
 80092f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80092fa:	f002 fa1b 	bl	800b734 <vPortExitCritical>
				return pdPASS;
 80092fe:	2301      	movs	r3, #1
 8009300:	e069      	b.n	80093d6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d103      	bne.n	8009310 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009308:	f002 fa14 	bl	800b734 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800930c:	2300      	movs	r3, #0
 800930e:	e062      	b.n	80093d6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009312:	2b00      	cmp	r3, #0
 8009314:	d106      	bne.n	8009324 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009316:	f107 0310 	add.w	r3, r7, #16
 800931a:	4618      	mov	r0, r3
 800931c:	f001 f95e 	bl	800a5dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009320:	2301      	movs	r3, #1
 8009322:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009324:	f002 fa06 	bl	800b734 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009328:	f000 fed0 	bl	800a0cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800932c:	f002 f9d2 	bl	800b6d4 <vPortEnterCritical>
 8009330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009332:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009336:	b25b      	sxtb	r3, r3
 8009338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800933c:	d103      	bne.n	8009346 <xQueueReceive+0x122>
 800933e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009340:	2200      	movs	r2, #0
 8009342:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009348:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800934c:	b25b      	sxtb	r3, r3
 800934e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009352:	d103      	bne.n	800935c <xQueueReceive+0x138>
 8009354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009356:	2200      	movs	r2, #0
 8009358:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800935c:	f002 f9ea 	bl	800b734 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009360:	1d3a      	adds	r2, r7, #4
 8009362:	f107 0310 	add.w	r3, r7, #16
 8009366:	4611      	mov	r1, r2
 8009368:	4618      	mov	r0, r3
 800936a:	f001 f94d 	bl	800a608 <xTaskCheckForTimeOut>
 800936e:	4603      	mov	r3, r0
 8009370:	2b00      	cmp	r3, #0
 8009372:	d123      	bne.n	80093bc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009374:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009376:	f000 fade 	bl	8009936 <prvIsQueueEmpty>
 800937a:	4603      	mov	r3, r0
 800937c:	2b00      	cmp	r3, #0
 800937e:	d017      	beq.n	80093b0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009382:	3324      	adds	r3, #36	; 0x24
 8009384:	687a      	ldr	r2, [r7, #4]
 8009386:	4611      	mov	r1, r2
 8009388:	4618      	mov	r0, r3
 800938a:	f001 f873 	bl	800a474 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800938e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009390:	f000 fa7f 	bl	8009892 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009394:	f000 fea8 	bl	800a0e8 <xTaskResumeAll>
 8009398:	4603      	mov	r3, r0
 800939a:	2b00      	cmp	r3, #0
 800939c:	d189      	bne.n	80092b2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800939e:	4b10      	ldr	r3, [pc, #64]	; (80093e0 <xQueueReceive+0x1bc>)
 80093a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093a4:	601a      	str	r2, [r3, #0]
 80093a6:	f3bf 8f4f 	dsb	sy
 80093aa:	f3bf 8f6f 	isb	sy
 80093ae:	e780      	b.n	80092b2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80093b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093b2:	f000 fa6e 	bl	8009892 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80093b6:	f000 fe97 	bl	800a0e8 <xTaskResumeAll>
 80093ba:	e77a      	b.n	80092b2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80093bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093be:	f000 fa68 	bl	8009892 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80093c2:	f000 fe91 	bl	800a0e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80093c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093c8:	f000 fab5 	bl	8009936 <prvIsQueueEmpty>
 80093cc:	4603      	mov	r3, r0
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	f43f af6f 	beq.w	80092b2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80093d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3730      	adds	r7, #48	; 0x30
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}
 80093de:	bf00      	nop
 80093e0:	e000ed04 	.word	0xe000ed04

080093e4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b08e      	sub	sp, #56	; 0x38
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80093ee:	2300      	movs	r3, #0
 80093f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80093f6:	2300      	movs	r3, #0
 80093f8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80093fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d10a      	bne.n	8009416 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009404:	f383 8811 	msr	BASEPRI, r3
 8009408:	f3bf 8f6f 	isb	sy
 800940c:	f3bf 8f4f 	dsb	sy
 8009410:	623b      	str	r3, [r7, #32]
}
 8009412:	bf00      	nop
 8009414:	e7fe      	b.n	8009414 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800941a:	2b00      	cmp	r3, #0
 800941c:	d00a      	beq.n	8009434 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800941e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009422:	f383 8811 	msr	BASEPRI, r3
 8009426:	f3bf 8f6f 	isb	sy
 800942a:	f3bf 8f4f 	dsb	sy
 800942e:	61fb      	str	r3, [r7, #28]
}
 8009430:	bf00      	nop
 8009432:	e7fe      	b.n	8009432 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009434:	f001 fa3c 	bl	800a8b0 <xTaskGetSchedulerState>
 8009438:	4603      	mov	r3, r0
 800943a:	2b00      	cmp	r3, #0
 800943c:	d102      	bne.n	8009444 <xQueueSemaphoreTake+0x60>
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d101      	bne.n	8009448 <xQueueSemaphoreTake+0x64>
 8009444:	2301      	movs	r3, #1
 8009446:	e000      	b.n	800944a <xQueueSemaphoreTake+0x66>
 8009448:	2300      	movs	r3, #0
 800944a:	2b00      	cmp	r3, #0
 800944c:	d10a      	bne.n	8009464 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800944e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009452:	f383 8811 	msr	BASEPRI, r3
 8009456:	f3bf 8f6f 	isb	sy
 800945a:	f3bf 8f4f 	dsb	sy
 800945e:	61bb      	str	r3, [r7, #24]
}
 8009460:	bf00      	nop
 8009462:	e7fe      	b.n	8009462 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009464:	f002 f936 	bl	800b6d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800946a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800946c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800946e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009470:	2b00      	cmp	r3, #0
 8009472:	d024      	beq.n	80094be <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009476:	1e5a      	subs	r2, r3, #1
 8009478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800947a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800947c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d104      	bne.n	800948e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009484:	f001 fb8a 	bl	800ab9c <pvTaskIncrementMutexHeldCount>
 8009488:	4602      	mov	r2, r0
 800948a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800948c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800948e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009490:	691b      	ldr	r3, [r3, #16]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d00f      	beq.n	80094b6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009498:	3310      	adds	r3, #16
 800949a:	4618      	mov	r0, r3
 800949c:	f001 f83a 	bl	800a514 <xTaskRemoveFromEventList>
 80094a0:	4603      	mov	r3, r0
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d007      	beq.n	80094b6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80094a6:	4b54      	ldr	r3, [pc, #336]	; (80095f8 <xQueueSemaphoreTake+0x214>)
 80094a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094ac:	601a      	str	r2, [r3, #0]
 80094ae:	f3bf 8f4f 	dsb	sy
 80094b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80094b6:	f002 f93d 	bl	800b734 <vPortExitCritical>
				return pdPASS;
 80094ba:	2301      	movs	r3, #1
 80094bc:	e097      	b.n	80095ee <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d111      	bne.n	80094e8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80094c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d00a      	beq.n	80094e0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80094ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ce:	f383 8811 	msr	BASEPRI, r3
 80094d2:	f3bf 8f6f 	isb	sy
 80094d6:	f3bf 8f4f 	dsb	sy
 80094da:	617b      	str	r3, [r7, #20]
}
 80094dc:	bf00      	nop
 80094de:	e7fe      	b.n	80094de <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80094e0:	f002 f928 	bl	800b734 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80094e4:	2300      	movs	r3, #0
 80094e6:	e082      	b.n	80095ee <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80094e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d106      	bne.n	80094fc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80094ee:	f107 030c 	add.w	r3, r7, #12
 80094f2:	4618      	mov	r0, r3
 80094f4:	f001 f872 	bl	800a5dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80094f8:	2301      	movs	r3, #1
 80094fa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80094fc:	f002 f91a 	bl	800b734 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009500:	f000 fde4 	bl	800a0cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009504:	f002 f8e6 	bl	800b6d4 <vPortEnterCritical>
 8009508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800950a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800950e:	b25b      	sxtb	r3, r3
 8009510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009514:	d103      	bne.n	800951e <xQueueSemaphoreTake+0x13a>
 8009516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009518:	2200      	movs	r2, #0
 800951a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800951e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009520:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009524:	b25b      	sxtb	r3, r3
 8009526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800952a:	d103      	bne.n	8009534 <xQueueSemaphoreTake+0x150>
 800952c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800952e:	2200      	movs	r2, #0
 8009530:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009534:	f002 f8fe 	bl	800b734 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009538:	463a      	mov	r2, r7
 800953a:	f107 030c 	add.w	r3, r7, #12
 800953e:	4611      	mov	r1, r2
 8009540:	4618      	mov	r0, r3
 8009542:	f001 f861 	bl	800a608 <xTaskCheckForTimeOut>
 8009546:	4603      	mov	r3, r0
 8009548:	2b00      	cmp	r3, #0
 800954a:	d132      	bne.n	80095b2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800954c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800954e:	f000 f9f2 	bl	8009936 <prvIsQueueEmpty>
 8009552:	4603      	mov	r3, r0
 8009554:	2b00      	cmp	r3, #0
 8009556:	d026      	beq.n	80095a6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d109      	bne.n	8009574 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009560:	f002 f8b8 	bl	800b6d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009566:	689b      	ldr	r3, [r3, #8]
 8009568:	4618      	mov	r0, r3
 800956a:	f001 f9bf 	bl	800a8ec <xTaskPriorityInherit>
 800956e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009570:	f002 f8e0 	bl	800b734 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009576:	3324      	adds	r3, #36	; 0x24
 8009578:	683a      	ldr	r2, [r7, #0]
 800957a:	4611      	mov	r1, r2
 800957c:	4618      	mov	r0, r3
 800957e:	f000 ff79 	bl	800a474 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009582:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009584:	f000 f985 	bl	8009892 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009588:	f000 fdae 	bl	800a0e8 <xTaskResumeAll>
 800958c:	4603      	mov	r3, r0
 800958e:	2b00      	cmp	r3, #0
 8009590:	f47f af68 	bne.w	8009464 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009594:	4b18      	ldr	r3, [pc, #96]	; (80095f8 <xQueueSemaphoreTake+0x214>)
 8009596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800959a:	601a      	str	r2, [r3, #0]
 800959c:	f3bf 8f4f 	dsb	sy
 80095a0:	f3bf 8f6f 	isb	sy
 80095a4:	e75e      	b.n	8009464 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80095a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80095a8:	f000 f973 	bl	8009892 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80095ac:	f000 fd9c 	bl	800a0e8 <xTaskResumeAll>
 80095b0:	e758      	b.n	8009464 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80095b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80095b4:	f000 f96d 	bl	8009892 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80095b8:	f000 fd96 	bl	800a0e8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80095bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80095be:	f000 f9ba 	bl	8009936 <prvIsQueueEmpty>
 80095c2:	4603      	mov	r3, r0
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	f43f af4d 	beq.w	8009464 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80095ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d00d      	beq.n	80095ec <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80095d0:	f002 f880 	bl	800b6d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80095d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80095d6:	f000 f8b4 	bl	8009742 <prvGetDisinheritPriorityAfterTimeout>
 80095da:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80095dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095de:	689b      	ldr	r3, [r3, #8]
 80095e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80095e2:	4618      	mov	r0, r3
 80095e4:	f001 fa58 	bl	800aa98 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80095e8:	f002 f8a4 	bl	800b734 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80095ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	3738      	adds	r7, #56	; 0x38
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}
 80095f6:	bf00      	nop
 80095f8:	e000ed04 	.word	0xe000ed04

080095fc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b08e      	sub	sp, #56	; 0x38
 8009600:	af00      	add	r7, sp, #0
 8009602:	60f8      	str	r0, [r7, #12]
 8009604:	60b9      	str	r1, [r7, #8]
 8009606:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800960c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800960e:	2b00      	cmp	r3, #0
 8009610:	d10a      	bne.n	8009628 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8009612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009616:	f383 8811 	msr	BASEPRI, r3
 800961a:	f3bf 8f6f 	isb	sy
 800961e:	f3bf 8f4f 	dsb	sy
 8009622:	623b      	str	r3, [r7, #32]
}
 8009624:	bf00      	nop
 8009626:	e7fe      	b.n	8009626 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d103      	bne.n	8009636 <xQueueReceiveFromISR+0x3a>
 800962e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009632:	2b00      	cmp	r3, #0
 8009634:	d101      	bne.n	800963a <xQueueReceiveFromISR+0x3e>
 8009636:	2301      	movs	r3, #1
 8009638:	e000      	b.n	800963c <xQueueReceiveFromISR+0x40>
 800963a:	2300      	movs	r3, #0
 800963c:	2b00      	cmp	r3, #0
 800963e:	d10a      	bne.n	8009656 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009644:	f383 8811 	msr	BASEPRI, r3
 8009648:	f3bf 8f6f 	isb	sy
 800964c:	f3bf 8f4f 	dsb	sy
 8009650:	61fb      	str	r3, [r7, #28]
}
 8009652:	bf00      	nop
 8009654:	e7fe      	b.n	8009654 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009656:	f002 f91f 	bl	800b898 <vPortValidateInterruptPriority>
	__asm volatile
 800965a:	f3ef 8211 	mrs	r2, BASEPRI
 800965e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009662:	f383 8811 	msr	BASEPRI, r3
 8009666:	f3bf 8f6f 	isb	sy
 800966a:	f3bf 8f4f 	dsb	sy
 800966e:	61ba      	str	r2, [r7, #24]
 8009670:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009672:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009674:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800967a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800967c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800967e:	2b00      	cmp	r3, #0
 8009680:	d02f      	beq.n	80096e2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009684:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009688:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800968c:	68b9      	ldr	r1, [r7, #8]
 800968e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009690:	f000 f8d9 	bl	8009846 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009696:	1e5a      	subs	r2, r3, #1
 8009698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800969a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800969c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80096a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096a4:	d112      	bne.n	80096cc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80096a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a8:	691b      	ldr	r3, [r3, #16]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d016      	beq.n	80096dc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80096ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b0:	3310      	adds	r3, #16
 80096b2:	4618      	mov	r0, r3
 80096b4:	f000 ff2e 	bl	800a514 <xTaskRemoveFromEventList>
 80096b8:	4603      	mov	r3, r0
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d00e      	beq.n	80096dc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d00b      	beq.n	80096dc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2201      	movs	r2, #1
 80096c8:	601a      	str	r2, [r3, #0]
 80096ca:	e007      	b.n	80096dc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80096cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096d0:	3301      	adds	r3, #1
 80096d2:	b2db      	uxtb	r3, r3
 80096d4:	b25a      	sxtb	r2, r3
 80096d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80096dc:	2301      	movs	r3, #1
 80096de:	637b      	str	r3, [r7, #52]	; 0x34
 80096e0:	e001      	b.n	80096e6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80096e2:	2300      	movs	r3, #0
 80096e4:	637b      	str	r3, [r7, #52]	; 0x34
 80096e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096e8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80096ea:	693b      	ldr	r3, [r7, #16]
 80096ec:	f383 8811 	msr	BASEPRI, r3
}
 80096f0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80096f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3738      	adds	r7, #56	; 0x38
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}

080096fc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b084      	sub	sp, #16
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d10a      	bne.n	8009724 <vQueueDelete+0x28>
	__asm volatile
 800970e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009712:	f383 8811 	msr	BASEPRI, r3
 8009716:	f3bf 8f6f 	isb	sy
 800971a:	f3bf 8f4f 	dsb	sy
 800971e:	60bb      	str	r3, [r7, #8]
}
 8009720:	bf00      	nop
 8009722:	e7fe      	b.n	8009722 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009724:	68f8      	ldr	r0, [r7, #12]
 8009726:	f000 f95f 	bl	80099e8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009730:	2b00      	cmp	r3, #0
 8009732:	d102      	bne.n	800973a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8009734:	68f8      	ldr	r0, [r7, #12]
 8009736:	f002 f9bb 	bl	800bab0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800973a:	bf00      	nop
 800973c:	3710      	adds	r7, #16
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}

08009742 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009742:	b480      	push	{r7}
 8009744:	b085      	sub	sp, #20
 8009746:	af00      	add	r7, sp, #0
 8009748:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800974e:	2b00      	cmp	r3, #0
 8009750:	d006      	beq.n	8009760 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800975c:	60fb      	str	r3, [r7, #12]
 800975e:	e001      	b.n	8009764 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009760:	2300      	movs	r3, #0
 8009762:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009764:	68fb      	ldr	r3, [r7, #12]
	}
 8009766:	4618      	mov	r0, r3
 8009768:	3714      	adds	r7, #20
 800976a:	46bd      	mov	sp, r7
 800976c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009770:	4770      	bx	lr

08009772 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009772:	b580      	push	{r7, lr}
 8009774:	b086      	sub	sp, #24
 8009776:	af00      	add	r7, sp, #0
 8009778:	60f8      	str	r0, [r7, #12]
 800977a:	60b9      	str	r1, [r7, #8]
 800977c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800977e:	2300      	movs	r3, #0
 8009780:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009786:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800978c:	2b00      	cmp	r3, #0
 800978e:	d10d      	bne.n	80097ac <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d14d      	bne.n	8009834 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	689b      	ldr	r3, [r3, #8]
 800979c:	4618      	mov	r0, r3
 800979e:	f001 f90d 	bl	800a9bc <xTaskPriorityDisinherit>
 80097a2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	2200      	movs	r2, #0
 80097a8:	609a      	str	r2, [r3, #8]
 80097aa:	e043      	b.n	8009834 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d119      	bne.n	80097e6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	6858      	ldr	r0, [r3, #4]
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ba:	461a      	mov	r2, r3
 80097bc:	68b9      	ldr	r1, [r7, #8]
 80097be:	f002 fabf 	bl	800bd40 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	685a      	ldr	r2, [r3, #4]
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ca:	441a      	add	r2, r3
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	685a      	ldr	r2, [r3, #4]
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	689b      	ldr	r3, [r3, #8]
 80097d8:	429a      	cmp	r2, r3
 80097da:	d32b      	bcc.n	8009834 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681a      	ldr	r2, [r3, #0]
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	605a      	str	r2, [r3, #4]
 80097e4:	e026      	b.n	8009834 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	68d8      	ldr	r0, [r3, #12]
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ee:	461a      	mov	r2, r3
 80097f0:	68b9      	ldr	r1, [r7, #8]
 80097f2:	f002 faa5 	bl	800bd40 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	68da      	ldr	r2, [r3, #12]
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097fe:	425b      	negs	r3, r3
 8009800:	441a      	add	r2, r3
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	68da      	ldr	r2, [r3, #12]
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	429a      	cmp	r2, r3
 8009810:	d207      	bcs.n	8009822 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	689a      	ldr	r2, [r3, #8]
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800981a:	425b      	negs	r3, r3
 800981c:	441a      	add	r2, r3
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2b02      	cmp	r3, #2
 8009826:	d105      	bne.n	8009834 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d002      	beq.n	8009834 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	3b01      	subs	r3, #1
 8009832:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	1c5a      	adds	r2, r3, #1
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800983c:	697b      	ldr	r3, [r7, #20]
}
 800983e:	4618      	mov	r0, r3
 8009840:	3718      	adds	r7, #24
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}

08009846 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009846:	b580      	push	{r7, lr}
 8009848:	b082      	sub	sp, #8
 800984a:	af00      	add	r7, sp, #0
 800984c:	6078      	str	r0, [r7, #4]
 800984e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009854:	2b00      	cmp	r3, #0
 8009856:	d018      	beq.n	800988a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	68da      	ldr	r2, [r3, #12]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009860:	441a      	add	r2, r3
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	68da      	ldr	r2, [r3, #12]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	689b      	ldr	r3, [r3, #8]
 800986e:	429a      	cmp	r2, r3
 8009870:	d303      	bcc.n	800987a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681a      	ldr	r2, [r3, #0]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	68d9      	ldr	r1, [r3, #12]
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009882:	461a      	mov	r2, r3
 8009884:	6838      	ldr	r0, [r7, #0]
 8009886:	f002 fa5b 	bl	800bd40 <memcpy>
	}
}
 800988a:	bf00      	nop
 800988c:	3708      	adds	r7, #8
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}

08009892 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009892:	b580      	push	{r7, lr}
 8009894:	b084      	sub	sp, #16
 8009896:	af00      	add	r7, sp, #0
 8009898:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800989a:	f001 ff1b 	bl	800b6d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80098a4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80098a6:	e011      	b.n	80098cc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d012      	beq.n	80098d6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	3324      	adds	r3, #36	; 0x24
 80098b4:	4618      	mov	r0, r3
 80098b6:	f000 fe2d 	bl	800a514 <xTaskRemoveFromEventList>
 80098ba:	4603      	mov	r3, r0
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d001      	beq.n	80098c4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80098c0:	f000 ff04 	bl	800a6cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80098c4:	7bfb      	ldrb	r3, [r7, #15]
 80098c6:	3b01      	subs	r3, #1
 80098c8:	b2db      	uxtb	r3, r3
 80098ca:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80098cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	dce9      	bgt.n	80098a8 <prvUnlockQueue+0x16>
 80098d4:	e000      	b.n	80098d8 <prvUnlockQueue+0x46>
					break;
 80098d6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	22ff      	movs	r2, #255	; 0xff
 80098dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80098e0:	f001 ff28 	bl	800b734 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80098e4:	f001 fef6 	bl	800b6d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80098ee:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80098f0:	e011      	b.n	8009916 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	691b      	ldr	r3, [r3, #16]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d012      	beq.n	8009920 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	3310      	adds	r3, #16
 80098fe:	4618      	mov	r0, r3
 8009900:	f000 fe08 	bl	800a514 <xTaskRemoveFromEventList>
 8009904:	4603      	mov	r3, r0
 8009906:	2b00      	cmp	r3, #0
 8009908:	d001      	beq.n	800990e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800990a:	f000 fedf 	bl	800a6cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800990e:	7bbb      	ldrb	r3, [r7, #14]
 8009910:	3b01      	subs	r3, #1
 8009912:	b2db      	uxtb	r3, r3
 8009914:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009916:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800991a:	2b00      	cmp	r3, #0
 800991c:	dce9      	bgt.n	80098f2 <prvUnlockQueue+0x60>
 800991e:	e000      	b.n	8009922 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009920:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	22ff      	movs	r2, #255	; 0xff
 8009926:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800992a:	f001 ff03 	bl	800b734 <vPortExitCritical>
}
 800992e:	bf00      	nop
 8009930:	3710      	adds	r7, #16
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}

08009936 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009936:	b580      	push	{r7, lr}
 8009938:	b084      	sub	sp, #16
 800993a:	af00      	add	r7, sp, #0
 800993c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800993e:	f001 fec9 	bl	800b6d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009946:	2b00      	cmp	r3, #0
 8009948:	d102      	bne.n	8009950 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800994a:	2301      	movs	r3, #1
 800994c:	60fb      	str	r3, [r7, #12]
 800994e:	e001      	b.n	8009954 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009950:	2300      	movs	r3, #0
 8009952:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009954:	f001 feee 	bl	800b734 <vPortExitCritical>

	return xReturn;
 8009958:	68fb      	ldr	r3, [r7, #12]
}
 800995a:	4618      	mov	r0, r3
 800995c:	3710      	adds	r7, #16
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}

08009962 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009962:	b580      	push	{r7, lr}
 8009964:	b084      	sub	sp, #16
 8009966:	af00      	add	r7, sp, #0
 8009968:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800996a:	f001 feb3 	bl	800b6d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009976:	429a      	cmp	r2, r3
 8009978:	d102      	bne.n	8009980 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800997a:	2301      	movs	r3, #1
 800997c:	60fb      	str	r3, [r7, #12]
 800997e:	e001      	b.n	8009984 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009980:	2300      	movs	r3, #0
 8009982:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009984:	f001 fed6 	bl	800b734 <vPortExitCritical>

	return xReturn;
 8009988:	68fb      	ldr	r3, [r7, #12]
}
 800998a:	4618      	mov	r0, r3
 800998c:	3710      	adds	r7, #16
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}
	...

08009994 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009994:	b480      	push	{r7}
 8009996:	b085      	sub	sp, #20
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
 800999c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800999e:	2300      	movs	r3, #0
 80099a0:	60fb      	str	r3, [r7, #12]
 80099a2:	e014      	b.n	80099ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80099a4:	4a0f      	ldr	r2, [pc, #60]	; (80099e4 <vQueueAddToRegistry+0x50>)
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d10b      	bne.n	80099c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80099b0:	490c      	ldr	r1, [pc, #48]	; (80099e4 <vQueueAddToRegistry+0x50>)
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	683a      	ldr	r2, [r7, #0]
 80099b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80099ba:	4a0a      	ldr	r2, [pc, #40]	; (80099e4 <vQueueAddToRegistry+0x50>)
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	00db      	lsls	r3, r3, #3
 80099c0:	4413      	add	r3, r2
 80099c2:	687a      	ldr	r2, [r7, #4]
 80099c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80099c6:	e006      	b.n	80099d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	3301      	adds	r3, #1
 80099cc:	60fb      	str	r3, [r7, #12]
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	2b07      	cmp	r3, #7
 80099d2:	d9e7      	bls.n	80099a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80099d4:	bf00      	nop
 80099d6:	bf00      	nop
 80099d8:	3714      	adds	r7, #20
 80099da:	46bd      	mov	sp, r7
 80099dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e0:	4770      	bx	lr
 80099e2:	bf00      	nop
 80099e4:	20000dc8 	.word	0x20000dc8

080099e8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80099e8:	b480      	push	{r7}
 80099ea:	b085      	sub	sp, #20
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80099f0:	2300      	movs	r3, #0
 80099f2:	60fb      	str	r3, [r7, #12]
 80099f4:	e016      	b.n	8009a24 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80099f6:	4a10      	ldr	r2, [pc, #64]	; (8009a38 <vQueueUnregisterQueue+0x50>)
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	00db      	lsls	r3, r3, #3
 80099fc:	4413      	add	r3, r2
 80099fe:	685b      	ldr	r3, [r3, #4]
 8009a00:	687a      	ldr	r2, [r7, #4]
 8009a02:	429a      	cmp	r2, r3
 8009a04:	d10b      	bne.n	8009a1e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009a06:	4a0c      	ldr	r2, [pc, #48]	; (8009a38 <vQueueUnregisterQueue+0x50>)
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2100      	movs	r1, #0
 8009a0c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009a10:	4a09      	ldr	r2, [pc, #36]	; (8009a38 <vQueueUnregisterQueue+0x50>)
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	00db      	lsls	r3, r3, #3
 8009a16:	4413      	add	r3, r2
 8009a18:	2200      	movs	r2, #0
 8009a1a:	605a      	str	r2, [r3, #4]
				break;
 8009a1c:	e006      	b.n	8009a2c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	3301      	adds	r3, #1
 8009a22:	60fb      	str	r3, [r7, #12]
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2b07      	cmp	r3, #7
 8009a28:	d9e5      	bls.n	80099f6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009a2a:	bf00      	nop
 8009a2c:	bf00      	nop
 8009a2e:	3714      	adds	r7, #20
 8009a30:	46bd      	mov	sp, r7
 8009a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a36:	4770      	bx	lr
 8009a38:	20000dc8 	.word	0x20000dc8

08009a3c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b086      	sub	sp, #24
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	60f8      	str	r0, [r7, #12]
 8009a44:	60b9      	str	r1, [r7, #8]
 8009a46:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009a4c:	f001 fe42 	bl	800b6d4 <vPortEnterCritical>
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009a56:	b25b      	sxtb	r3, r3
 8009a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a5c:	d103      	bne.n	8009a66 <vQueueWaitForMessageRestricted+0x2a>
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	2200      	movs	r2, #0
 8009a62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a6c:	b25b      	sxtb	r3, r3
 8009a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a72:	d103      	bne.n	8009a7c <vQueueWaitForMessageRestricted+0x40>
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	2200      	movs	r2, #0
 8009a78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009a7c:	f001 fe5a 	bl	800b734 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d106      	bne.n	8009a96 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	3324      	adds	r3, #36	; 0x24
 8009a8c:	687a      	ldr	r2, [r7, #4]
 8009a8e:	68b9      	ldr	r1, [r7, #8]
 8009a90:	4618      	mov	r0, r3
 8009a92:	f000 fd13 	bl	800a4bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009a96:	6978      	ldr	r0, [r7, #20]
 8009a98:	f7ff fefb 	bl	8009892 <prvUnlockQueue>
	}
 8009a9c:	bf00      	nop
 8009a9e:	3718      	adds	r7, #24
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}

08009aa4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b08e      	sub	sp, #56	; 0x38
 8009aa8:	af04      	add	r7, sp, #16
 8009aaa:	60f8      	str	r0, [r7, #12]
 8009aac:	60b9      	str	r1, [r7, #8]
 8009aae:	607a      	str	r2, [r7, #4]
 8009ab0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d10a      	bne.n	8009ace <xTaskCreateStatic+0x2a>
	__asm volatile
 8009ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009abc:	f383 8811 	msr	BASEPRI, r3
 8009ac0:	f3bf 8f6f 	isb	sy
 8009ac4:	f3bf 8f4f 	dsb	sy
 8009ac8:	623b      	str	r3, [r7, #32]
}
 8009aca:	bf00      	nop
 8009acc:	e7fe      	b.n	8009acc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d10a      	bne.n	8009aea <xTaskCreateStatic+0x46>
	__asm volatile
 8009ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad8:	f383 8811 	msr	BASEPRI, r3
 8009adc:	f3bf 8f6f 	isb	sy
 8009ae0:	f3bf 8f4f 	dsb	sy
 8009ae4:	61fb      	str	r3, [r7, #28]
}
 8009ae6:	bf00      	nop
 8009ae8:	e7fe      	b.n	8009ae8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009aea:	235c      	movs	r3, #92	; 0x5c
 8009aec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	2b5c      	cmp	r3, #92	; 0x5c
 8009af2:	d00a      	beq.n	8009b0a <xTaskCreateStatic+0x66>
	__asm volatile
 8009af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af8:	f383 8811 	msr	BASEPRI, r3
 8009afc:	f3bf 8f6f 	isb	sy
 8009b00:	f3bf 8f4f 	dsb	sy
 8009b04:	61bb      	str	r3, [r7, #24]
}
 8009b06:	bf00      	nop
 8009b08:	e7fe      	b.n	8009b08 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009b0a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d01e      	beq.n	8009b50 <xTaskCreateStatic+0xac>
 8009b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d01b      	beq.n	8009b50 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b1a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b20:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b24:	2202      	movs	r2, #2
 8009b26:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	9303      	str	r3, [sp, #12]
 8009b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b30:	9302      	str	r3, [sp, #8]
 8009b32:	f107 0314 	add.w	r3, r7, #20
 8009b36:	9301      	str	r3, [sp, #4]
 8009b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b3a:	9300      	str	r3, [sp, #0]
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	687a      	ldr	r2, [r7, #4]
 8009b40:	68b9      	ldr	r1, [r7, #8]
 8009b42:	68f8      	ldr	r0, [r7, #12]
 8009b44:	f000 f850 	bl	8009be8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009b48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009b4a:	f000 f8dd 	bl	8009d08 <prvAddNewTaskToReadyList>
 8009b4e:	e001      	b.n	8009b54 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009b50:	2300      	movs	r3, #0
 8009b52:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009b54:	697b      	ldr	r3, [r7, #20]
	}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3728      	adds	r7, #40	; 0x28
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}

08009b5e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009b5e:	b580      	push	{r7, lr}
 8009b60:	b08c      	sub	sp, #48	; 0x30
 8009b62:	af04      	add	r7, sp, #16
 8009b64:	60f8      	str	r0, [r7, #12]
 8009b66:	60b9      	str	r1, [r7, #8]
 8009b68:	603b      	str	r3, [r7, #0]
 8009b6a:	4613      	mov	r3, r2
 8009b6c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009b6e:	88fb      	ldrh	r3, [r7, #6]
 8009b70:	009b      	lsls	r3, r3, #2
 8009b72:	4618      	mov	r0, r3
 8009b74:	f001 fed0 	bl	800b918 <pvPortMalloc>
 8009b78:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d00e      	beq.n	8009b9e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009b80:	205c      	movs	r0, #92	; 0x5c
 8009b82:	f001 fec9 	bl	800b918 <pvPortMalloc>
 8009b86:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009b88:	69fb      	ldr	r3, [r7, #28]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d003      	beq.n	8009b96 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009b8e:	69fb      	ldr	r3, [r7, #28]
 8009b90:	697a      	ldr	r2, [r7, #20]
 8009b92:	631a      	str	r2, [r3, #48]	; 0x30
 8009b94:	e005      	b.n	8009ba2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009b96:	6978      	ldr	r0, [r7, #20]
 8009b98:	f001 ff8a 	bl	800bab0 <vPortFree>
 8009b9c:	e001      	b.n	8009ba2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009ba2:	69fb      	ldr	r3, [r7, #28]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d017      	beq.n	8009bd8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009ba8:	69fb      	ldr	r3, [r7, #28]
 8009baa:	2200      	movs	r2, #0
 8009bac:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009bb0:	88fa      	ldrh	r2, [r7, #6]
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	9303      	str	r3, [sp, #12]
 8009bb6:	69fb      	ldr	r3, [r7, #28]
 8009bb8:	9302      	str	r3, [sp, #8]
 8009bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bbc:	9301      	str	r3, [sp, #4]
 8009bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bc0:	9300      	str	r3, [sp, #0]
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	68b9      	ldr	r1, [r7, #8]
 8009bc6:	68f8      	ldr	r0, [r7, #12]
 8009bc8:	f000 f80e 	bl	8009be8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009bcc:	69f8      	ldr	r0, [r7, #28]
 8009bce:	f000 f89b 	bl	8009d08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	61bb      	str	r3, [r7, #24]
 8009bd6:	e002      	b.n	8009bde <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8009bdc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009bde:	69bb      	ldr	r3, [r7, #24]
	}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3720      	adds	r7, #32
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b088      	sub	sp, #32
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	60f8      	str	r0, [r7, #12]
 8009bf0:	60b9      	str	r1, [r7, #8]
 8009bf2:	607a      	str	r2, [r7, #4]
 8009bf4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bf8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	009b      	lsls	r3, r3, #2
 8009bfe:	461a      	mov	r2, r3
 8009c00:	21a5      	movs	r1, #165	; 0xa5
 8009c02:	f002 f8ab 	bl	800bd5c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009c10:	3b01      	subs	r3, #1
 8009c12:	009b      	lsls	r3, r3, #2
 8009c14:	4413      	add	r3, r2
 8009c16:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009c18:	69bb      	ldr	r3, [r7, #24]
 8009c1a:	f023 0307 	bic.w	r3, r3, #7
 8009c1e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009c20:	69bb      	ldr	r3, [r7, #24]
 8009c22:	f003 0307 	and.w	r3, r3, #7
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d00a      	beq.n	8009c40 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c2e:	f383 8811 	msr	BASEPRI, r3
 8009c32:	f3bf 8f6f 	isb	sy
 8009c36:	f3bf 8f4f 	dsb	sy
 8009c3a:	617b      	str	r3, [r7, #20]
}
 8009c3c:	bf00      	nop
 8009c3e:	e7fe      	b.n	8009c3e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d01f      	beq.n	8009c86 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009c46:	2300      	movs	r3, #0
 8009c48:	61fb      	str	r3, [r7, #28]
 8009c4a:	e012      	b.n	8009c72 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009c4c:	68ba      	ldr	r2, [r7, #8]
 8009c4e:	69fb      	ldr	r3, [r7, #28]
 8009c50:	4413      	add	r3, r2
 8009c52:	7819      	ldrb	r1, [r3, #0]
 8009c54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c56:	69fb      	ldr	r3, [r7, #28]
 8009c58:	4413      	add	r3, r2
 8009c5a:	3334      	adds	r3, #52	; 0x34
 8009c5c:	460a      	mov	r2, r1
 8009c5e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009c60:	68ba      	ldr	r2, [r7, #8]
 8009c62:	69fb      	ldr	r3, [r7, #28]
 8009c64:	4413      	add	r3, r2
 8009c66:	781b      	ldrb	r3, [r3, #0]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d006      	beq.n	8009c7a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009c6c:	69fb      	ldr	r3, [r7, #28]
 8009c6e:	3301      	adds	r3, #1
 8009c70:	61fb      	str	r3, [r7, #28]
 8009c72:	69fb      	ldr	r3, [r7, #28]
 8009c74:	2b0f      	cmp	r3, #15
 8009c76:	d9e9      	bls.n	8009c4c <prvInitialiseNewTask+0x64>
 8009c78:	e000      	b.n	8009c7c <prvInitialiseNewTask+0x94>
			{
				break;
 8009c7a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c7e:	2200      	movs	r2, #0
 8009c80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009c84:	e003      	b.n	8009c8e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c88:	2200      	movs	r2, #0
 8009c8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c90:	2b37      	cmp	r3, #55	; 0x37
 8009c92:	d901      	bls.n	8009c98 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009c94:	2337      	movs	r3, #55	; 0x37
 8009c96:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c9c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ca2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cac:	3304      	adds	r3, #4
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f7fe fda0 	bl	80087f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb6:	3318      	adds	r3, #24
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f7fe fd9b 	bl	80087f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cc2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ccc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cd2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cdc:	2200      	movs	r2, #0
 8009cde:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009ce2:	683a      	ldr	r2, [r7, #0]
 8009ce4:	68f9      	ldr	r1, [r7, #12]
 8009ce6:	69b8      	ldr	r0, [r7, #24]
 8009ce8:	f001 fbc8 	bl	800b47c <pxPortInitialiseStack>
 8009cec:	4602      	mov	r2, r0
 8009cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cf0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d002      	beq.n	8009cfe <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cfc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009cfe:	bf00      	nop
 8009d00:	3720      	adds	r7, #32
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}
	...

08009d08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b082      	sub	sp, #8
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009d10:	f001 fce0 	bl	800b6d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009d14:	4b2d      	ldr	r3, [pc, #180]	; (8009dcc <prvAddNewTaskToReadyList+0xc4>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	3301      	adds	r3, #1
 8009d1a:	4a2c      	ldr	r2, [pc, #176]	; (8009dcc <prvAddNewTaskToReadyList+0xc4>)
 8009d1c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009d1e:	4b2c      	ldr	r3, [pc, #176]	; (8009dd0 <prvAddNewTaskToReadyList+0xc8>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d109      	bne.n	8009d3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009d26:	4a2a      	ldr	r2, [pc, #168]	; (8009dd0 <prvAddNewTaskToReadyList+0xc8>)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009d2c:	4b27      	ldr	r3, [pc, #156]	; (8009dcc <prvAddNewTaskToReadyList+0xc4>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	2b01      	cmp	r3, #1
 8009d32:	d110      	bne.n	8009d56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009d34:	f000 fcee 	bl	800a714 <prvInitialiseTaskLists>
 8009d38:	e00d      	b.n	8009d56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009d3a:	4b26      	ldr	r3, [pc, #152]	; (8009dd4 <prvAddNewTaskToReadyList+0xcc>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d109      	bne.n	8009d56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009d42:	4b23      	ldr	r3, [pc, #140]	; (8009dd0 <prvAddNewTaskToReadyList+0xc8>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d4c:	429a      	cmp	r2, r3
 8009d4e:	d802      	bhi.n	8009d56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009d50:	4a1f      	ldr	r2, [pc, #124]	; (8009dd0 <prvAddNewTaskToReadyList+0xc8>)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009d56:	4b20      	ldr	r3, [pc, #128]	; (8009dd8 <prvAddNewTaskToReadyList+0xd0>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	3301      	adds	r3, #1
 8009d5c:	4a1e      	ldr	r2, [pc, #120]	; (8009dd8 <prvAddNewTaskToReadyList+0xd0>)
 8009d5e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009d60:	4b1d      	ldr	r3, [pc, #116]	; (8009dd8 <prvAddNewTaskToReadyList+0xd0>)
 8009d62:	681a      	ldr	r2, [r3, #0]
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d6c:	4b1b      	ldr	r3, [pc, #108]	; (8009ddc <prvAddNewTaskToReadyList+0xd4>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	429a      	cmp	r2, r3
 8009d72:	d903      	bls.n	8009d7c <prvAddNewTaskToReadyList+0x74>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d78:	4a18      	ldr	r2, [pc, #96]	; (8009ddc <prvAddNewTaskToReadyList+0xd4>)
 8009d7a:	6013      	str	r3, [r2, #0]
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d80:	4613      	mov	r3, r2
 8009d82:	009b      	lsls	r3, r3, #2
 8009d84:	4413      	add	r3, r2
 8009d86:	009b      	lsls	r3, r3, #2
 8009d88:	4a15      	ldr	r2, [pc, #84]	; (8009de0 <prvAddNewTaskToReadyList+0xd8>)
 8009d8a:	441a      	add	r2, r3
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	3304      	adds	r3, #4
 8009d90:	4619      	mov	r1, r3
 8009d92:	4610      	mov	r0, r2
 8009d94:	f7fe fd3b 	bl	800880e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009d98:	f001 fccc 	bl	800b734 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009d9c:	4b0d      	ldr	r3, [pc, #52]	; (8009dd4 <prvAddNewTaskToReadyList+0xcc>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d00e      	beq.n	8009dc2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009da4:	4b0a      	ldr	r3, [pc, #40]	; (8009dd0 <prvAddNewTaskToReadyList+0xc8>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dae:	429a      	cmp	r2, r3
 8009db0:	d207      	bcs.n	8009dc2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009db2:	4b0c      	ldr	r3, [pc, #48]	; (8009de4 <prvAddNewTaskToReadyList+0xdc>)
 8009db4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009db8:	601a      	str	r2, [r3, #0]
 8009dba:	f3bf 8f4f 	dsb	sy
 8009dbe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009dc2:	bf00      	nop
 8009dc4:	3708      	adds	r7, #8
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}
 8009dca:	bf00      	nop
 8009dcc:	200012dc 	.word	0x200012dc
 8009dd0:	20000e08 	.word	0x20000e08
 8009dd4:	200012e8 	.word	0x200012e8
 8009dd8:	200012f8 	.word	0x200012f8
 8009ddc:	200012e4 	.word	0x200012e4
 8009de0:	20000e0c 	.word	0x20000e0c
 8009de4:	e000ed04 	.word	0xe000ed04

08009de8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b084      	sub	sp, #16
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8009df0:	f001 fc70 	bl	800b6d4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d102      	bne.n	8009e00 <vTaskDelete+0x18>
 8009dfa:	4b2c      	ldr	r3, [pc, #176]	; (8009eac <vTaskDelete+0xc4>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	e000      	b.n	8009e02 <vTaskDelete+0x1a>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	3304      	adds	r3, #4
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f7fe fd5d 	bl	80088c8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d004      	beq.n	8009e20 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	3318      	adds	r3, #24
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f7fe fd54 	bl	80088c8 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8009e20:	4b23      	ldr	r3, [pc, #140]	; (8009eb0 <vTaskDelete+0xc8>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	3301      	adds	r3, #1
 8009e26:	4a22      	ldr	r2, [pc, #136]	; (8009eb0 <vTaskDelete+0xc8>)
 8009e28:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8009e2a:	4b20      	ldr	r3, [pc, #128]	; (8009eac <vTaskDelete+0xc4>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	68fa      	ldr	r2, [r7, #12]
 8009e30:	429a      	cmp	r2, r3
 8009e32:	d10b      	bne.n	8009e4c <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	3304      	adds	r3, #4
 8009e38:	4619      	mov	r1, r3
 8009e3a:	481e      	ldr	r0, [pc, #120]	; (8009eb4 <vTaskDelete+0xcc>)
 8009e3c:	f7fe fce7 	bl	800880e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8009e40:	4b1d      	ldr	r3, [pc, #116]	; (8009eb8 <vTaskDelete+0xd0>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	3301      	adds	r3, #1
 8009e46:	4a1c      	ldr	r2, [pc, #112]	; (8009eb8 <vTaskDelete+0xd0>)
 8009e48:	6013      	str	r3, [r2, #0]
 8009e4a:	e009      	b.n	8009e60 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8009e4c:	4b1b      	ldr	r3, [pc, #108]	; (8009ebc <vTaskDelete+0xd4>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	3b01      	subs	r3, #1
 8009e52:	4a1a      	ldr	r2, [pc, #104]	; (8009ebc <vTaskDelete+0xd4>)
 8009e54:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8009e56:	68f8      	ldr	r0, [r7, #12]
 8009e58:	f000 fcca 	bl	800a7f0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8009e5c:	f000 fcf8 	bl	800a850 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8009e60:	f001 fc68 	bl	800b734 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8009e64:	4b16      	ldr	r3, [pc, #88]	; (8009ec0 <vTaskDelete+0xd8>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d01b      	beq.n	8009ea4 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8009e6c:	4b0f      	ldr	r3, [pc, #60]	; (8009eac <vTaskDelete+0xc4>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	68fa      	ldr	r2, [r7, #12]
 8009e72:	429a      	cmp	r2, r3
 8009e74:	d116      	bne.n	8009ea4 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8009e76:	4b13      	ldr	r3, [pc, #76]	; (8009ec4 <vTaskDelete+0xdc>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d00a      	beq.n	8009e94 <vTaskDelete+0xac>
	__asm volatile
 8009e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e82:	f383 8811 	msr	BASEPRI, r3
 8009e86:	f3bf 8f6f 	isb	sy
 8009e8a:	f3bf 8f4f 	dsb	sy
 8009e8e:	60bb      	str	r3, [r7, #8]
}
 8009e90:	bf00      	nop
 8009e92:	e7fe      	b.n	8009e92 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8009e94:	4b0c      	ldr	r3, [pc, #48]	; (8009ec8 <vTaskDelete+0xe0>)
 8009e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e9a:	601a      	str	r2, [r3, #0]
 8009e9c:	f3bf 8f4f 	dsb	sy
 8009ea0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009ea4:	bf00      	nop
 8009ea6:	3710      	adds	r7, #16
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}
 8009eac:	20000e08 	.word	0x20000e08
 8009eb0:	200012f8 	.word	0x200012f8
 8009eb4:	200012b0 	.word	0x200012b0
 8009eb8:	200012c4 	.word	0x200012c4
 8009ebc:	200012dc 	.word	0x200012dc
 8009ec0:	200012e8 	.word	0x200012e8
 8009ec4:	20001304 	.word	0x20001304
 8009ec8:	e000ed04 	.word	0xe000ed04

08009ecc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b084      	sub	sp, #16
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d017      	beq.n	8009f0e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009ede:	4b13      	ldr	r3, [pc, #76]	; (8009f2c <vTaskDelay+0x60>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d00a      	beq.n	8009efc <vTaskDelay+0x30>
	__asm volatile
 8009ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eea:	f383 8811 	msr	BASEPRI, r3
 8009eee:	f3bf 8f6f 	isb	sy
 8009ef2:	f3bf 8f4f 	dsb	sy
 8009ef6:	60bb      	str	r3, [r7, #8]
}
 8009ef8:	bf00      	nop
 8009efa:	e7fe      	b.n	8009efa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009efc:	f000 f8e6 	bl	800a0cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009f00:	2100      	movs	r1, #0
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f000 fe5e 	bl	800abc4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009f08:	f000 f8ee 	bl	800a0e8 <xTaskResumeAll>
 8009f0c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d107      	bne.n	8009f24 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009f14:	4b06      	ldr	r3, [pc, #24]	; (8009f30 <vTaskDelay+0x64>)
 8009f16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f1a:	601a      	str	r2, [r3, #0]
 8009f1c:	f3bf 8f4f 	dsb	sy
 8009f20:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009f24:	bf00      	nop
 8009f26:	3710      	adds	r7, #16
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bd80      	pop	{r7, pc}
 8009f2c:	20001304 	.word	0x20001304
 8009f30:	e000ed04 	.word	0xe000ed04

08009f34 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b088      	sub	sp, #32
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8009f40:	69bb      	ldr	r3, [r7, #24]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d10a      	bne.n	8009f5c <eTaskGetState+0x28>
	__asm volatile
 8009f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f4a:	f383 8811 	msr	BASEPRI, r3
 8009f4e:	f3bf 8f6f 	isb	sy
 8009f52:	f3bf 8f4f 	dsb	sy
 8009f56:	60bb      	str	r3, [r7, #8]
}
 8009f58:	bf00      	nop
 8009f5a:	e7fe      	b.n	8009f5a <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8009f5c:	4b23      	ldr	r3, [pc, #140]	; (8009fec <eTaskGetState+0xb8>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	69ba      	ldr	r2, [r7, #24]
 8009f62:	429a      	cmp	r2, r3
 8009f64:	d102      	bne.n	8009f6c <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8009f66:	2300      	movs	r3, #0
 8009f68:	77fb      	strb	r3, [r7, #31]
 8009f6a:	e03a      	b.n	8009fe2 <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 8009f6c:	f001 fbb2 	bl	800b6d4 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8009f70:	69bb      	ldr	r3, [r7, #24]
 8009f72:	695b      	ldr	r3, [r3, #20]
 8009f74:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8009f76:	4b1e      	ldr	r3, [pc, #120]	; (8009ff0 <eTaskGetState+0xbc>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8009f7c:	4b1d      	ldr	r3, [pc, #116]	; (8009ff4 <eTaskGetState+0xc0>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8009f82:	f001 fbd7 	bl	800b734 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8009f86:	697a      	ldr	r2, [r7, #20]
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	429a      	cmp	r2, r3
 8009f8c:	d003      	beq.n	8009f96 <eTaskGetState+0x62>
 8009f8e:	697a      	ldr	r2, [r7, #20]
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	429a      	cmp	r2, r3
 8009f94:	d102      	bne.n	8009f9c <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8009f96:	2302      	movs	r3, #2
 8009f98:	77fb      	strb	r3, [r7, #31]
 8009f9a:	e022      	b.n	8009fe2 <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	4a16      	ldr	r2, [pc, #88]	; (8009ff8 <eTaskGetState+0xc4>)
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d112      	bne.n	8009fca <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8009fa4:	69bb      	ldr	r3, [r7, #24]
 8009fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d10b      	bne.n	8009fc4 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8009fac:	69bb      	ldr	r3, [r7, #24]
 8009fae:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009fb2:	b2db      	uxtb	r3, r3
 8009fb4:	2b01      	cmp	r3, #1
 8009fb6:	d102      	bne.n	8009fbe <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8009fb8:	2302      	movs	r3, #2
 8009fba:	77fb      	strb	r3, [r7, #31]
 8009fbc:	e011      	b.n	8009fe2 <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 8009fbe:	2303      	movs	r3, #3
 8009fc0:	77fb      	strb	r3, [r7, #31]
 8009fc2:	e00e      	b.n	8009fe2 <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8009fc4:	2302      	movs	r3, #2
 8009fc6:	77fb      	strb	r3, [r7, #31]
 8009fc8:	e00b      	b.n	8009fe2 <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8009fca:	697b      	ldr	r3, [r7, #20]
 8009fcc:	4a0b      	ldr	r2, [pc, #44]	; (8009ffc <eTaskGetState+0xc8>)
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	d002      	beq.n	8009fd8 <eTaskGetState+0xa4>
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d102      	bne.n	8009fde <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8009fd8:	2304      	movs	r3, #4
 8009fda:	77fb      	strb	r3, [r7, #31]
 8009fdc:	e001      	b.n	8009fe2 <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8009fde:	2301      	movs	r3, #1
 8009fe0:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8009fe2:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	3720      	adds	r7, #32
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}
 8009fec:	20000e08 	.word	0x20000e08
 8009ff0:	20001294 	.word	0x20001294
 8009ff4:	20001298 	.word	0x20001298
 8009ff8:	200012c8 	.word	0x200012c8
 8009ffc:	200012b0 	.word	0x200012b0

0800a000 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b08a      	sub	sp, #40	; 0x28
 800a004:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a006:	2300      	movs	r3, #0
 800a008:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a00a:	2300      	movs	r3, #0
 800a00c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a00e:	463a      	mov	r2, r7
 800a010:	1d39      	adds	r1, r7, #4
 800a012:	f107 0308 	add.w	r3, r7, #8
 800a016:	4618      	mov	r0, r3
 800a018:	f7fe fb98 	bl	800874c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a01c:	6839      	ldr	r1, [r7, #0]
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	68ba      	ldr	r2, [r7, #8]
 800a022:	9202      	str	r2, [sp, #8]
 800a024:	9301      	str	r3, [sp, #4]
 800a026:	2300      	movs	r3, #0
 800a028:	9300      	str	r3, [sp, #0]
 800a02a:	2300      	movs	r3, #0
 800a02c:	460a      	mov	r2, r1
 800a02e:	4921      	ldr	r1, [pc, #132]	; (800a0b4 <vTaskStartScheduler+0xb4>)
 800a030:	4821      	ldr	r0, [pc, #132]	; (800a0b8 <vTaskStartScheduler+0xb8>)
 800a032:	f7ff fd37 	bl	8009aa4 <xTaskCreateStatic>
 800a036:	4603      	mov	r3, r0
 800a038:	4a20      	ldr	r2, [pc, #128]	; (800a0bc <vTaskStartScheduler+0xbc>)
 800a03a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a03c:	4b1f      	ldr	r3, [pc, #124]	; (800a0bc <vTaskStartScheduler+0xbc>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d002      	beq.n	800a04a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a044:	2301      	movs	r3, #1
 800a046:	617b      	str	r3, [r7, #20]
 800a048:	e001      	b.n	800a04e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a04a:	2300      	movs	r3, #0
 800a04c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	2b01      	cmp	r3, #1
 800a052:	d102      	bne.n	800a05a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a054:	f000 fe0a 	bl	800ac6c <xTimerCreateTimerTask>
 800a058:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	2b01      	cmp	r3, #1
 800a05e:	d116      	bne.n	800a08e <vTaskStartScheduler+0x8e>
	__asm volatile
 800a060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a064:	f383 8811 	msr	BASEPRI, r3
 800a068:	f3bf 8f6f 	isb	sy
 800a06c:	f3bf 8f4f 	dsb	sy
 800a070:	613b      	str	r3, [r7, #16]
}
 800a072:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a074:	4b12      	ldr	r3, [pc, #72]	; (800a0c0 <vTaskStartScheduler+0xc0>)
 800a076:	f04f 32ff 	mov.w	r2, #4294967295
 800a07a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a07c:	4b11      	ldr	r3, [pc, #68]	; (800a0c4 <vTaskStartScheduler+0xc4>)
 800a07e:	2201      	movs	r2, #1
 800a080:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a082:	4b11      	ldr	r3, [pc, #68]	; (800a0c8 <vTaskStartScheduler+0xc8>)
 800a084:	2200      	movs	r2, #0
 800a086:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a088:	f001 fa82 	bl	800b590 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a08c:	e00e      	b.n	800a0ac <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a094:	d10a      	bne.n	800a0ac <vTaskStartScheduler+0xac>
	__asm volatile
 800a096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a09a:	f383 8811 	msr	BASEPRI, r3
 800a09e:	f3bf 8f6f 	isb	sy
 800a0a2:	f3bf 8f4f 	dsb	sy
 800a0a6:	60fb      	str	r3, [r7, #12]
}
 800a0a8:	bf00      	nop
 800a0aa:	e7fe      	b.n	800a0aa <vTaskStartScheduler+0xaa>
}
 800a0ac:	bf00      	nop
 800a0ae:	3718      	adds	r7, #24
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}
 800a0b4:	0800d854 	.word	0x0800d854
 800a0b8:	0800a6e5 	.word	0x0800a6e5
 800a0bc:	20001300 	.word	0x20001300
 800a0c0:	200012fc 	.word	0x200012fc
 800a0c4:	200012e8 	.word	0x200012e8
 800a0c8:	200012e0 	.word	0x200012e0

0800a0cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a0d0:	4b04      	ldr	r3, [pc, #16]	; (800a0e4 <vTaskSuspendAll+0x18>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	3301      	adds	r3, #1
 800a0d6:	4a03      	ldr	r2, [pc, #12]	; (800a0e4 <vTaskSuspendAll+0x18>)
 800a0d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a0da:	bf00      	nop
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e2:	4770      	bx	lr
 800a0e4:	20001304 	.word	0x20001304

0800a0e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b084      	sub	sp, #16
 800a0ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a0f6:	4b42      	ldr	r3, [pc, #264]	; (800a200 <xTaskResumeAll+0x118>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d10a      	bne.n	800a114 <xTaskResumeAll+0x2c>
	__asm volatile
 800a0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a102:	f383 8811 	msr	BASEPRI, r3
 800a106:	f3bf 8f6f 	isb	sy
 800a10a:	f3bf 8f4f 	dsb	sy
 800a10e:	603b      	str	r3, [r7, #0]
}
 800a110:	bf00      	nop
 800a112:	e7fe      	b.n	800a112 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a114:	f001 fade 	bl	800b6d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a118:	4b39      	ldr	r3, [pc, #228]	; (800a200 <xTaskResumeAll+0x118>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	3b01      	subs	r3, #1
 800a11e:	4a38      	ldr	r2, [pc, #224]	; (800a200 <xTaskResumeAll+0x118>)
 800a120:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a122:	4b37      	ldr	r3, [pc, #220]	; (800a200 <xTaskResumeAll+0x118>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d162      	bne.n	800a1f0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a12a:	4b36      	ldr	r3, [pc, #216]	; (800a204 <xTaskResumeAll+0x11c>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d05e      	beq.n	800a1f0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a132:	e02f      	b.n	800a194 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a134:	4b34      	ldr	r3, [pc, #208]	; (800a208 <xTaskResumeAll+0x120>)
 800a136:	68db      	ldr	r3, [r3, #12]
 800a138:	68db      	ldr	r3, [r3, #12]
 800a13a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	3318      	adds	r3, #24
 800a140:	4618      	mov	r0, r3
 800a142:	f7fe fbc1 	bl	80088c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	3304      	adds	r3, #4
 800a14a:	4618      	mov	r0, r3
 800a14c:	f7fe fbbc 	bl	80088c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a154:	4b2d      	ldr	r3, [pc, #180]	; (800a20c <xTaskResumeAll+0x124>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	429a      	cmp	r2, r3
 800a15a:	d903      	bls.n	800a164 <xTaskResumeAll+0x7c>
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a160:	4a2a      	ldr	r2, [pc, #168]	; (800a20c <xTaskResumeAll+0x124>)
 800a162:	6013      	str	r3, [r2, #0]
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a168:	4613      	mov	r3, r2
 800a16a:	009b      	lsls	r3, r3, #2
 800a16c:	4413      	add	r3, r2
 800a16e:	009b      	lsls	r3, r3, #2
 800a170:	4a27      	ldr	r2, [pc, #156]	; (800a210 <xTaskResumeAll+0x128>)
 800a172:	441a      	add	r2, r3
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	3304      	adds	r3, #4
 800a178:	4619      	mov	r1, r3
 800a17a:	4610      	mov	r0, r2
 800a17c:	f7fe fb47 	bl	800880e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a184:	4b23      	ldr	r3, [pc, #140]	; (800a214 <xTaskResumeAll+0x12c>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a18a:	429a      	cmp	r2, r3
 800a18c:	d302      	bcc.n	800a194 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a18e:	4b22      	ldr	r3, [pc, #136]	; (800a218 <xTaskResumeAll+0x130>)
 800a190:	2201      	movs	r2, #1
 800a192:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a194:	4b1c      	ldr	r3, [pc, #112]	; (800a208 <xTaskResumeAll+0x120>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d1cb      	bne.n	800a134 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d001      	beq.n	800a1a6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a1a2:	f000 fb55 	bl	800a850 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a1a6:	4b1d      	ldr	r3, [pc, #116]	; (800a21c <xTaskResumeAll+0x134>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d010      	beq.n	800a1d4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a1b2:	f000 f847 	bl	800a244 <xTaskIncrementTick>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d002      	beq.n	800a1c2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a1bc:	4b16      	ldr	r3, [pc, #88]	; (800a218 <xTaskResumeAll+0x130>)
 800a1be:	2201      	movs	r2, #1
 800a1c0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	3b01      	subs	r3, #1
 800a1c6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d1f1      	bne.n	800a1b2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a1ce:	4b13      	ldr	r3, [pc, #76]	; (800a21c <xTaskResumeAll+0x134>)
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a1d4:	4b10      	ldr	r3, [pc, #64]	; (800a218 <xTaskResumeAll+0x130>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d009      	beq.n	800a1f0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a1dc:	2301      	movs	r3, #1
 800a1de:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a1e0:	4b0f      	ldr	r3, [pc, #60]	; (800a220 <xTaskResumeAll+0x138>)
 800a1e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1e6:	601a      	str	r2, [r3, #0]
 800a1e8:	f3bf 8f4f 	dsb	sy
 800a1ec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a1f0:	f001 faa0 	bl	800b734 <vPortExitCritical>

	return xAlreadyYielded;
 800a1f4:	68bb      	ldr	r3, [r7, #8]
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3710      	adds	r7, #16
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}
 800a1fe:	bf00      	nop
 800a200:	20001304 	.word	0x20001304
 800a204:	200012dc 	.word	0x200012dc
 800a208:	2000129c 	.word	0x2000129c
 800a20c:	200012e4 	.word	0x200012e4
 800a210:	20000e0c 	.word	0x20000e0c
 800a214:	20000e08 	.word	0x20000e08
 800a218:	200012f0 	.word	0x200012f0
 800a21c:	200012ec 	.word	0x200012ec
 800a220:	e000ed04 	.word	0xe000ed04

0800a224 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a224:	b480      	push	{r7}
 800a226:	b083      	sub	sp, #12
 800a228:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a22a:	4b05      	ldr	r3, [pc, #20]	; (800a240 <xTaskGetTickCount+0x1c>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a230:	687b      	ldr	r3, [r7, #4]
}
 800a232:	4618      	mov	r0, r3
 800a234:	370c      	adds	r7, #12
 800a236:	46bd      	mov	sp, r7
 800a238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23c:	4770      	bx	lr
 800a23e:	bf00      	nop
 800a240:	200012e0 	.word	0x200012e0

0800a244 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b086      	sub	sp, #24
 800a248:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a24a:	2300      	movs	r3, #0
 800a24c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a24e:	4b4f      	ldr	r3, [pc, #316]	; (800a38c <xTaskIncrementTick+0x148>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	2b00      	cmp	r3, #0
 800a254:	f040 808f 	bne.w	800a376 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a258:	4b4d      	ldr	r3, [pc, #308]	; (800a390 <xTaskIncrementTick+0x14c>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	3301      	adds	r3, #1
 800a25e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a260:	4a4b      	ldr	r2, [pc, #300]	; (800a390 <xTaskIncrementTick+0x14c>)
 800a262:	693b      	ldr	r3, [r7, #16]
 800a264:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d120      	bne.n	800a2ae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a26c:	4b49      	ldr	r3, [pc, #292]	; (800a394 <xTaskIncrementTick+0x150>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d00a      	beq.n	800a28c <xTaskIncrementTick+0x48>
	__asm volatile
 800a276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a27a:	f383 8811 	msr	BASEPRI, r3
 800a27e:	f3bf 8f6f 	isb	sy
 800a282:	f3bf 8f4f 	dsb	sy
 800a286:	603b      	str	r3, [r7, #0]
}
 800a288:	bf00      	nop
 800a28a:	e7fe      	b.n	800a28a <xTaskIncrementTick+0x46>
 800a28c:	4b41      	ldr	r3, [pc, #260]	; (800a394 <xTaskIncrementTick+0x150>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	60fb      	str	r3, [r7, #12]
 800a292:	4b41      	ldr	r3, [pc, #260]	; (800a398 <xTaskIncrementTick+0x154>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	4a3f      	ldr	r2, [pc, #252]	; (800a394 <xTaskIncrementTick+0x150>)
 800a298:	6013      	str	r3, [r2, #0]
 800a29a:	4a3f      	ldr	r2, [pc, #252]	; (800a398 <xTaskIncrementTick+0x154>)
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	6013      	str	r3, [r2, #0]
 800a2a0:	4b3e      	ldr	r3, [pc, #248]	; (800a39c <xTaskIncrementTick+0x158>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	3301      	adds	r3, #1
 800a2a6:	4a3d      	ldr	r2, [pc, #244]	; (800a39c <xTaskIncrementTick+0x158>)
 800a2a8:	6013      	str	r3, [r2, #0]
 800a2aa:	f000 fad1 	bl	800a850 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a2ae:	4b3c      	ldr	r3, [pc, #240]	; (800a3a0 <xTaskIncrementTick+0x15c>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	693a      	ldr	r2, [r7, #16]
 800a2b4:	429a      	cmp	r2, r3
 800a2b6:	d349      	bcc.n	800a34c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a2b8:	4b36      	ldr	r3, [pc, #216]	; (800a394 <xTaskIncrementTick+0x150>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d104      	bne.n	800a2cc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2c2:	4b37      	ldr	r3, [pc, #220]	; (800a3a0 <xTaskIncrementTick+0x15c>)
 800a2c4:	f04f 32ff 	mov.w	r2, #4294967295
 800a2c8:	601a      	str	r2, [r3, #0]
					break;
 800a2ca:	e03f      	b.n	800a34c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2cc:	4b31      	ldr	r3, [pc, #196]	; (800a394 <xTaskIncrementTick+0x150>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	68db      	ldr	r3, [r3, #12]
 800a2d2:	68db      	ldr	r3, [r3, #12]
 800a2d4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	685b      	ldr	r3, [r3, #4]
 800a2da:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a2dc:	693a      	ldr	r2, [r7, #16]
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	429a      	cmp	r2, r3
 800a2e2:	d203      	bcs.n	800a2ec <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a2e4:	4a2e      	ldr	r2, [pc, #184]	; (800a3a0 <xTaskIncrementTick+0x15c>)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a2ea:	e02f      	b.n	800a34c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	3304      	adds	r3, #4
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f7fe fae9 	bl	80088c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d004      	beq.n	800a308 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	3318      	adds	r3, #24
 800a302:	4618      	mov	r0, r3
 800a304:	f7fe fae0 	bl	80088c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a30c:	4b25      	ldr	r3, [pc, #148]	; (800a3a4 <xTaskIncrementTick+0x160>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	429a      	cmp	r2, r3
 800a312:	d903      	bls.n	800a31c <xTaskIncrementTick+0xd8>
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a318:	4a22      	ldr	r2, [pc, #136]	; (800a3a4 <xTaskIncrementTick+0x160>)
 800a31a:	6013      	str	r3, [r2, #0]
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a320:	4613      	mov	r3, r2
 800a322:	009b      	lsls	r3, r3, #2
 800a324:	4413      	add	r3, r2
 800a326:	009b      	lsls	r3, r3, #2
 800a328:	4a1f      	ldr	r2, [pc, #124]	; (800a3a8 <xTaskIncrementTick+0x164>)
 800a32a:	441a      	add	r2, r3
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	3304      	adds	r3, #4
 800a330:	4619      	mov	r1, r3
 800a332:	4610      	mov	r0, r2
 800a334:	f7fe fa6b 	bl	800880e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a33c:	4b1b      	ldr	r3, [pc, #108]	; (800a3ac <xTaskIncrementTick+0x168>)
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a342:	429a      	cmp	r2, r3
 800a344:	d3b8      	bcc.n	800a2b8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a346:	2301      	movs	r3, #1
 800a348:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a34a:	e7b5      	b.n	800a2b8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a34c:	4b17      	ldr	r3, [pc, #92]	; (800a3ac <xTaskIncrementTick+0x168>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a352:	4915      	ldr	r1, [pc, #84]	; (800a3a8 <xTaskIncrementTick+0x164>)
 800a354:	4613      	mov	r3, r2
 800a356:	009b      	lsls	r3, r3, #2
 800a358:	4413      	add	r3, r2
 800a35a:	009b      	lsls	r3, r3, #2
 800a35c:	440b      	add	r3, r1
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	2b01      	cmp	r3, #1
 800a362:	d901      	bls.n	800a368 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a364:	2301      	movs	r3, #1
 800a366:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a368:	4b11      	ldr	r3, [pc, #68]	; (800a3b0 <xTaskIncrementTick+0x16c>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d007      	beq.n	800a380 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a370:	2301      	movs	r3, #1
 800a372:	617b      	str	r3, [r7, #20]
 800a374:	e004      	b.n	800a380 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a376:	4b0f      	ldr	r3, [pc, #60]	; (800a3b4 <xTaskIncrementTick+0x170>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	3301      	adds	r3, #1
 800a37c:	4a0d      	ldr	r2, [pc, #52]	; (800a3b4 <xTaskIncrementTick+0x170>)
 800a37e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a380:	697b      	ldr	r3, [r7, #20]
}
 800a382:	4618      	mov	r0, r3
 800a384:	3718      	adds	r7, #24
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}
 800a38a:	bf00      	nop
 800a38c:	20001304 	.word	0x20001304
 800a390:	200012e0 	.word	0x200012e0
 800a394:	20001294 	.word	0x20001294
 800a398:	20001298 	.word	0x20001298
 800a39c:	200012f4 	.word	0x200012f4
 800a3a0:	200012fc 	.word	0x200012fc
 800a3a4:	200012e4 	.word	0x200012e4
 800a3a8:	20000e0c 	.word	0x20000e0c
 800a3ac:	20000e08 	.word	0x20000e08
 800a3b0:	200012f0 	.word	0x200012f0
 800a3b4:	200012ec 	.word	0x200012ec

0800a3b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b085      	sub	sp, #20
 800a3bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a3be:	4b28      	ldr	r3, [pc, #160]	; (800a460 <vTaskSwitchContext+0xa8>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d003      	beq.n	800a3ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a3c6:	4b27      	ldr	r3, [pc, #156]	; (800a464 <vTaskSwitchContext+0xac>)
 800a3c8:	2201      	movs	r2, #1
 800a3ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a3cc:	e041      	b.n	800a452 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800a3ce:	4b25      	ldr	r3, [pc, #148]	; (800a464 <vTaskSwitchContext+0xac>)
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3d4:	4b24      	ldr	r3, [pc, #144]	; (800a468 <vTaskSwitchContext+0xb0>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	60fb      	str	r3, [r7, #12]
 800a3da:	e010      	b.n	800a3fe <vTaskSwitchContext+0x46>
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d10a      	bne.n	800a3f8 <vTaskSwitchContext+0x40>
	__asm volatile
 800a3e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3e6:	f383 8811 	msr	BASEPRI, r3
 800a3ea:	f3bf 8f6f 	isb	sy
 800a3ee:	f3bf 8f4f 	dsb	sy
 800a3f2:	607b      	str	r3, [r7, #4]
}
 800a3f4:	bf00      	nop
 800a3f6:	e7fe      	b.n	800a3f6 <vTaskSwitchContext+0x3e>
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	3b01      	subs	r3, #1
 800a3fc:	60fb      	str	r3, [r7, #12]
 800a3fe:	491b      	ldr	r1, [pc, #108]	; (800a46c <vTaskSwitchContext+0xb4>)
 800a400:	68fa      	ldr	r2, [r7, #12]
 800a402:	4613      	mov	r3, r2
 800a404:	009b      	lsls	r3, r3, #2
 800a406:	4413      	add	r3, r2
 800a408:	009b      	lsls	r3, r3, #2
 800a40a:	440b      	add	r3, r1
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d0e4      	beq.n	800a3dc <vTaskSwitchContext+0x24>
 800a412:	68fa      	ldr	r2, [r7, #12]
 800a414:	4613      	mov	r3, r2
 800a416:	009b      	lsls	r3, r3, #2
 800a418:	4413      	add	r3, r2
 800a41a:	009b      	lsls	r3, r3, #2
 800a41c:	4a13      	ldr	r2, [pc, #76]	; (800a46c <vTaskSwitchContext+0xb4>)
 800a41e:	4413      	add	r3, r2
 800a420:	60bb      	str	r3, [r7, #8]
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	685b      	ldr	r3, [r3, #4]
 800a426:	685a      	ldr	r2, [r3, #4]
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	605a      	str	r2, [r3, #4]
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	685a      	ldr	r2, [r3, #4]
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	3308      	adds	r3, #8
 800a434:	429a      	cmp	r2, r3
 800a436:	d104      	bne.n	800a442 <vTaskSwitchContext+0x8a>
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	685b      	ldr	r3, [r3, #4]
 800a43c:	685a      	ldr	r2, [r3, #4]
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	605a      	str	r2, [r3, #4]
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	685b      	ldr	r3, [r3, #4]
 800a446:	68db      	ldr	r3, [r3, #12]
 800a448:	4a09      	ldr	r2, [pc, #36]	; (800a470 <vTaskSwitchContext+0xb8>)
 800a44a:	6013      	str	r3, [r2, #0]
 800a44c:	4a06      	ldr	r2, [pc, #24]	; (800a468 <vTaskSwitchContext+0xb0>)
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	6013      	str	r3, [r2, #0]
}
 800a452:	bf00      	nop
 800a454:	3714      	adds	r7, #20
 800a456:	46bd      	mov	sp, r7
 800a458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45c:	4770      	bx	lr
 800a45e:	bf00      	nop
 800a460:	20001304 	.word	0x20001304
 800a464:	200012f0 	.word	0x200012f0
 800a468:	200012e4 	.word	0x200012e4
 800a46c:	20000e0c 	.word	0x20000e0c
 800a470:	20000e08 	.word	0x20000e08

0800a474 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b084      	sub	sp, #16
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d10a      	bne.n	800a49a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a484:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a488:	f383 8811 	msr	BASEPRI, r3
 800a48c:	f3bf 8f6f 	isb	sy
 800a490:	f3bf 8f4f 	dsb	sy
 800a494:	60fb      	str	r3, [r7, #12]
}
 800a496:	bf00      	nop
 800a498:	e7fe      	b.n	800a498 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a49a:	4b07      	ldr	r3, [pc, #28]	; (800a4b8 <vTaskPlaceOnEventList+0x44>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	3318      	adds	r3, #24
 800a4a0:	4619      	mov	r1, r3
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f7fe f9d7 	bl	8008856 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a4a8:	2101      	movs	r1, #1
 800a4aa:	6838      	ldr	r0, [r7, #0]
 800a4ac:	f000 fb8a 	bl	800abc4 <prvAddCurrentTaskToDelayedList>
}
 800a4b0:	bf00      	nop
 800a4b2:	3710      	adds	r7, #16
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bd80      	pop	{r7, pc}
 800a4b8:	20000e08 	.word	0x20000e08

0800a4bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b086      	sub	sp, #24
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	60f8      	str	r0, [r7, #12]
 800a4c4:	60b9      	str	r1, [r7, #8]
 800a4c6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d10a      	bne.n	800a4e4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a4ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d2:	f383 8811 	msr	BASEPRI, r3
 800a4d6:	f3bf 8f6f 	isb	sy
 800a4da:	f3bf 8f4f 	dsb	sy
 800a4de:	617b      	str	r3, [r7, #20]
}
 800a4e0:	bf00      	nop
 800a4e2:	e7fe      	b.n	800a4e2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a4e4:	4b0a      	ldr	r3, [pc, #40]	; (800a510 <vTaskPlaceOnEventListRestricted+0x54>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	3318      	adds	r3, #24
 800a4ea:	4619      	mov	r1, r3
 800a4ec:	68f8      	ldr	r0, [r7, #12]
 800a4ee:	f7fe f98e 	bl	800880e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d002      	beq.n	800a4fe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a4f8:	f04f 33ff 	mov.w	r3, #4294967295
 800a4fc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a4fe:	6879      	ldr	r1, [r7, #4]
 800a500:	68b8      	ldr	r0, [r7, #8]
 800a502:	f000 fb5f 	bl	800abc4 <prvAddCurrentTaskToDelayedList>
	}
 800a506:	bf00      	nop
 800a508:	3718      	adds	r7, #24
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}
 800a50e:	bf00      	nop
 800a510:	20000e08 	.word	0x20000e08

0800a514 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b086      	sub	sp, #24
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	68db      	ldr	r3, [r3, #12]
 800a520:	68db      	ldr	r3, [r3, #12]
 800a522:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a524:	693b      	ldr	r3, [r7, #16]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d10a      	bne.n	800a540 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a52a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a52e:	f383 8811 	msr	BASEPRI, r3
 800a532:	f3bf 8f6f 	isb	sy
 800a536:	f3bf 8f4f 	dsb	sy
 800a53a:	60fb      	str	r3, [r7, #12]
}
 800a53c:	bf00      	nop
 800a53e:	e7fe      	b.n	800a53e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a540:	693b      	ldr	r3, [r7, #16]
 800a542:	3318      	adds	r3, #24
 800a544:	4618      	mov	r0, r3
 800a546:	f7fe f9bf 	bl	80088c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a54a:	4b1e      	ldr	r3, [pc, #120]	; (800a5c4 <xTaskRemoveFromEventList+0xb0>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d11d      	bne.n	800a58e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a552:	693b      	ldr	r3, [r7, #16]
 800a554:	3304      	adds	r3, #4
 800a556:	4618      	mov	r0, r3
 800a558:	f7fe f9b6 	bl	80088c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a55c:	693b      	ldr	r3, [r7, #16]
 800a55e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a560:	4b19      	ldr	r3, [pc, #100]	; (800a5c8 <xTaskRemoveFromEventList+0xb4>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	429a      	cmp	r2, r3
 800a566:	d903      	bls.n	800a570 <xTaskRemoveFromEventList+0x5c>
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a56c:	4a16      	ldr	r2, [pc, #88]	; (800a5c8 <xTaskRemoveFromEventList+0xb4>)
 800a56e:	6013      	str	r3, [r2, #0]
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a574:	4613      	mov	r3, r2
 800a576:	009b      	lsls	r3, r3, #2
 800a578:	4413      	add	r3, r2
 800a57a:	009b      	lsls	r3, r3, #2
 800a57c:	4a13      	ldr	r2, [pc, #76]	; (800a5cc <xTaskRemoveFromEventList+0xb8>)
 800a57e:	441a      	add	r2, r3
 800a580:	693b      	ldr	r3, [r7, #16]
 800a582:	3304      	adds	r3, #4
 800a584:	4619      	mov	r1, r3
 800a586:	4610      	mov	r0, r2
 800a588:	f7fe f941 	bl	800880e <vListInsertEnd>
 800a58c:	e005      	b.n	800a59a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a58e:	693b      	ldr	r3, [r7, #16]
 800a590:	3318      	adds	r3, #24
 800a592:	4619      	mov	r1, r3
 800a594:	480e      	ldr	r0, [pc, #56]	; (800a5d0 <xTaskRemoveFromEventList+0xbc>)
 800a596:	f7fe f93a 	bl	800880e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a59a:	693b      	ldr	r3, [r7, #16]
 800a59c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a59e:	4b0d      	ldr	r3, [pc, #52]	; (800a5d4 <xTaskRemoveFromEventList+0xc0>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5a4:	429a      	cmp	r2, r3
 800a5a6:	d905      	bls.n	800a5b4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a5ac:	4b0a      	ldr	r3, [pc, #40]	; (800a5d8 <xTaskRemoveFromEventList+0xc4>)
 800a5ae:	2201      	movs	r2, #1
 800a5b0:	601a      	str	r2, [r3, #0]
 800a5b2:	e001      	b.n	800a5b8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a5b8:	697b      	ldr	r3, [r7, #20]
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3718      	adds	r7, #24
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}
 800a5c2:	bf00      	nop
 800a5c4:	20001304 	.word	0x20001304
 800a5c8:	200012e4 	.word	0x200012e4
 800a5cc:	20000e0c 	.word	0x20000e0c
 800a5d0:	2000129c 	.word	0x2000129c
 800a5d4:	20000e08 	.word	0x20000e08
 800a5d8:	200012f0 	.word	0x200012f0

0800a5dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b083      	sub	sp, #12
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a5e4:	4b06      	ldr	r3, [pc, #24]	; (800a600 <vTaskInternalSetTimeOutState+0x24>)
 800a5e6:	681a      	ldr	r2, [r3, #0]
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a5ec:	4b05      	ldr	r3, [pc, #20]	; (800a604 <vTaskInternalSetTimeOutState+0x28>)
 800a5ee:	681a      	ldr	r2, [r3, #0]
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	605a      	str	r2, [r3, #4]
}
 800a5f4:	bf00      	nop
 800a5f6:	370c      	adds	r7, #12
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fe:	4770      	bx	lr
 800a600:	200012f4 	.word	0x200012f4
 800a604:	200012e0 	.word	0x200012e0

0800a608 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b088      	sub	sp, #32
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
 800a610:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d10a      	bne.n	800a62e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a61c:	f383 8811 	msr	BASEPRI, r3
 800a620:	f3bf 8f6f 	isb	sy
 800a624:	f3bf 8f4f 	dsb	sy
 800a628:	613b      	str	r3, [r7, #16]
}
 800a62a:	bf00      	nop
 800a62c:	e7fe      	b.n	800a62c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d10a      	bne.n	800a64a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a634:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a638:	f383 8811 	msr	BASEPRI, r3
 800a63c:	f3bf 8f6f 	isb	sy
 800a640:	f3bf 8f4f 	dsb	sy
 800a644:	60fb      	str	r3, [r7, #12]
}
 800a646:	bf00      	nop
 800a648:	e7fe      	b.n	800a648 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a64a:	f001 f843 	bl	800b6d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a64e:	4b1d      	ldr	r3, [pc, #116]	; (800a6c4 <xTaskCheckForTimeOut+0xbc>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	685b      	ldr	r3, [r3, #4]
 800a658:	69ba      	ldr	r2, [r7, #24]
 800a65a:	1ad3      	subs	r3, r2, r3
 800a65c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a666:	d102      	bne.n	800a66e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a668:	2300      	movs	r3, #0
 800a66a:	61fb      	str	r3, [r7, #28]
 800a66c:	e023      	b.n	800a6b6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681a      	ldr	r2, [r3, #0]
 800a672:	4b15      	ldr	r3, [pc, #84]	; (800a6c8 <xTaskCheckForTimeOut+0xc0>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	429a      	cmp	r2, r3
 800a678:	d007      	beq.n	800a68a <xTaskCheckForTimeOut+0x82>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	685b      	ldr	r3, [r3, #4]
 800a67e:	69ba      	ldr	r2, [r7, #24]
 800a680:	429a      	cmp	r2, r3
 800a682:	d302      	bcc.n	800a68a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a684:	2301      	movs	r3, #1
 800a686:	61fb      	str	r3, [r7, #28]
 800a688:	e015      	b.n	800a6b6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	697a      	ldr	r2, [r7, #20]
 800a690:	429a      	cmp	r2, r3
 800a692:	d20b      	bcs.n	800a6ac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	681a      	ldr	r2, [r3, #0]
 800a698:	697b      	ldr	r3, [r7, #20]
 800a69a:	1ad2      	subs	r2, r2, r3
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f7ff ff9b 	bl	800a5dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	61fb      	str	r3, [r7, #28]
 800a6aa:	e004      	b.n	800a6b6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a6b6:	f001 f83d 	bl	800b734 <vPortExitCritical>

	return xReturn;
 800a6ba:	69fb      	ldr	r3, [r7, #28]
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	3720      	adds	r7, #32
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd80      	pop	{r7, pc}
 800a6c4:	200012e0 	.word	0x200012e0
 800a6c8:	200012f4 	.word	0x200012f4

0800a6cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a6d0:	4b03      	ldr	r3, [pc, #12]	; (800a6e0 <vTaskMissedYield+0x14>)
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	601a      	str	r2, [r3, #0]
}
 800a6d6:	bf00      	nop
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6de:	4770      	bx	lr
 800a6e0:	200012f0 	.word	0x200012f0

0800a6e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b082      	sub	sp, #8
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a6ec:	f000 f852 	bl	800a794 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a6f0:	4b06      	ldr	r3, [pc, #24]	; (800a70c <prvIdleTask+0x28>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	2b01      	cmp	r3, #1
 800a6f6:	d9f9      	bls.n	800a6ec <prvIdleTask+0x8>
			{
				taskYIELD();
 800a6f8:	4b05      	ldr	r3, [pc, #20]	; (800a710 <prvIdleTask+0x2c>)
 800a6fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6fe:	601a      	str	r2, [r3, #0]
 800a700:	f3bf 8f4f 	dsb	sy
 800a704:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a708:	e7f0      	b.n	800a6ec <prvIdleTask+0x8>
 800a70a:	bf00      	nop
 800a70c:	20000e0c 	.word	0x20000e0c
 800a710:	e000ed04 	.word	0xe000ed04

0800a714 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b082      	sub	sp, #8
 800a718:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a71a:	2300      	movs	r3, #0
 800a71c:	607b      	str	r3, [r7, #4]
 800a71e:	e00c      	b.n	800a73a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a720:	687a      	ldr	r2, [r7, #4]
 800a722:	4613      	mov	r3, r2
 800a724:	009b      	lsls	r3, r3, #2
 800a726:	4413      	add	r3, r2
 800a728:	009b      	lsls	r3, r3, #2
 800a72a:	4a12      	ldr	r2, [pc, #72]	; (800a774 <prvInitialiseTaskLists+0x60>)
 800a72c:	4413      	add	r3, r2
 800a72e:	4618      	mov	r0, r3
 800a730:	f7fe f840 	bl	80087b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	3301      	adds	r3, #1
 800a738:	607b      	str	r3, [r7, #4]
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2b37      	cmp	r3, #55	; 0x37
 800a73e:	d9ef      	bls.n	800a720 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a740:	480d      	ldr	r0, [pc, #52]	; (800a778 <prvInitialiseTaskLists+0x64>)
 800a742:	f7fe f837 	bl	80087b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a746:	480d      	ldr	r0, [pc, #52]	; (800a77c <prvInitialiseTaskLists+0x68>)
 800a748:	f7fe f834 	bl	80087b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a74c:	480c      	ldr	r0, [pc, #48]	; (800a780 <prvInitialiseTaskLists+0x6c>)
 800a74e:	f7fe f831 	bl	80087b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a752:	480c      	ldr	r0, [pc, #48]	; (800a784 <prvInitialiseTaskLists+0x70>)
 800a754:	f7fe f82e 	bl	80087b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a758:	480b      	ldr	r0, [pc, #44]	; (800a788 <prvInitialiseTaskLists+0x74>)
 800a75a:	f7fe f82b 	bl	80087b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a75e:	4b0b      	ldr	r3, [pc, #44]	; (800a78c <prvInitialiseTaskLists+0x78>)
 800a760:	4a05      	ldr	r2, [pc, #20]	; (800a778 <prvInitialiseTaskLists+0x64>)
 800a762:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a764:	4b0a      	ldr	r3, [pc, #40]	; (800a790 <prvInitialiseTaskLists+0x7c>)
 800a766:	4a05      	ldr	r2, [pc, #20]	; (800a77c <prvInitialiseTaskLists+0x68>)
 800a768:	601a      	str	r2, [r3, #0]
}
 800a76a:	bf00      	nop
 800a76c:	3708      	adds	r7, #8
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}
 800a772:	bf00      	nop
 800a774:	20000e0c 	.word	0x20000e0c
 800a778:	2000126c 	.word	0x2000126c
 800a77c:	20001280 	.word	0x20001280
 800a780:	2000129c 	.word	0x2000129c
 800a784:	200012b0 	.word	0x200012b0
 800a788:	200012c8 	.word	0x200012c8
 800a78c:	20001294 	.word	0x20001294
 800a790:	20001298 	.word	0x20001298

0800a794 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b082      	sub	sp, #8
 800a798:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a79a:	e019      	b.n	800a7d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a79c:	f000 ff9a 	bl	800b6d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7a0:	4b10      	ldr	r3, [pc, #64]	; (800a7e4 <prvCheckTasksWaitingTermination+0x50>)
 800a7a2:	68db      	ldr	r3, [r3, #12]
 800a7a4:	68db      	ldr	r3, [r3, #12]
 800a7a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	3304      	adds	r3, #4
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f7fe f88b 	bl	80088c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a7b2:	4b0d      	ldr	r3, [pc, #52]	; (800a7e8 <prvCheckTasksWaitingTermination+0x54>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	3b01      	subs	r3, #1
 800a7b8:	4a0b      	ldr	r2, [pc, #44]	; (800a7e8 <prvCheckTasksWaitingTermination+0x54>)
 800a7ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a7bc:	4b0b      	ldr	r3, [pc, #44]	; (800a7ec <prvCheckTasksWaitingTermination+0x58>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	3b01      	subs	r3, #1
 800a7c2:	4a0a      	ldr	r2, [pc, #40]	; (800a7ec <prvCheckTasksWaitingTermination+0x58>)
 800a7c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a7c6:	f000 ffb5 	bl	800b734 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f000 f810 	bl	800a7f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a7d0:	4b06      	ldr	r3, [pc, #24]	; (800a7ec <prvCheckTasksWaitingTermination+0x58>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d1e1      	bne.n	800a79c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a7d8:	bf00      	nop
 800a7da:	bf00      	nop
 800a7dc:	3708      	adds	r7, #8
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bd80      	pop	{r7, pc}
 800a7e2:	bf00      	nop
 800a7e4:	200012b0 	.word	0x200012b0
 800a7e8:	200012dc 	.word	0x200012dc
 800a7ec:	200012c4 	.word	0x200012c4

0800a7f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b084      	sub	sp, #16
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d108      	bne.n	800a814 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a806:	4618      	mov	r0, r3
 800a808:	f001 f952 	bl	800bab0 <vPortFree>
				vPortFree( pxTCB );
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f001 f94f 	bl	800bab0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a812:	e018      	b.n	800a846 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a81a:	2b01      	cmp	r3, #1
 800a81c:	d103      	bne.n	800a826 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f001 f946 	bl	800bab0 <vPortFree>
	}
 800a824:	e00f      	b.n	800a846 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a82c:	2b02      	cmp	r3, #2
 800a82e:	d00a      	beq.n	800a846 <prvDeleteTCB+0x56>
	__asm volatile
 800a830:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a834:	f383 8811 	msr	BASEPRI, r3
 800a838:	f3bf 8f6f 	isb	sy
 800a83c:	f3bf 8f4f 	dsb	sy
 800a840:	60fb      	str	r3, [r7, #12]
}
 800a842:	bf00      	nop
 800a844:	e7fe      	b.n	800a844 <prvDeleteTCB+0x54>
	}
 800a846:	bf00      	nop
 800a848:	3710      	adds	r7, #16
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd80      	pop	{r7, pc}
	...

0800a850 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a850:	b480      	push	{r7}
 800a852:	b083      	sub	sp, #12
 800a854:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a856:	4b0c      	ldr	r3, [pc, #48]	; (800a888 <prvResetNextTaskUnblockTime+0x38>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d104      	bne.n	800a86a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a860:	4b0a      	ldr	r3, [pc, #40]	; (800a88c <prvResetNextTaskUnblockTime+0x3c>)
 800a862:	f04f 32ff 	mov.w	r2, #4294967295
 800a866:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a868:	e008      	b.n	800a87c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a86a:	4b07      	ldr	r3, [pc, #28]	; (800a888 <prvResetNextTaskUnblockTime+0x38>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	68db      	ldr	r3, [r3, #12]
 800a870:	68db      	ldr	r3, [r3, #12]
 800a872:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	685b      	ldr	r3, [r3, #4]
 800a878:	4a04      	ldr	r2, [pc, #16]	; (800a88c <prvResetNextTaskUnblockTime+0x3c>)
 800a87a:	6013      	str	r3, [r2, #0]
}
 800a87c:	bf00      	nop
 800a87e:	370c      	adds	r7, #12
 800a880:	46bd      	mov	sp, r7
 800a882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a886:	4770      	bx	lr
 800a888:	20001294 	.word	0x20001294
 800a88c:	200012fc 	.word	0x200012fc

0800a890 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800a890:	b480      	push	{r7}
 800a892:	b083      	sub	sp, #12
 800a894:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800a896:	4b05      	ldr	r3, [pc, #20]	; (800a8ac <xTaskGetCurrentTaskHandle+0x1c>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800a89c:	687b      	ldr	r3, [r7, #4]
	}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	370c      	adds	r7, #12
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a8:	4770      	bx	lr
 800a8aa:	bf00      	nop
 800a8ac:	20000e08 	.word	0x20000e08

0800a8b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b083      	sub	sp, #12
 800a8b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a8b6:	4b0b      	ldr	r3, [pc, #44]	; (800a8e4 <xTaskGetSchedulerState+0x34>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d102      	bne.n	800a8c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a8be:	2301      	movs	r3, #1
 800a8c0:	607b      	str	r3, [r7, #4]
 800a8c2:	e008      	b.n	800a8d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a8c4:	4b08      	ldr	r3, [pc, #32]	; (800a8e8 <xTaskGetSchedulerState+0x38>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d102      	bne.n	800a8d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a8cc:	2302      	movs	r3, #2
 800a8ce:	607b      	str	r3, [r7, #4]
 800a8d0:	e001      	b.n	800a8d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a8d6:	687b      	ldr	r3, [r7, #4]
	}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	370c      	adds	r7, #12
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e2:	4770      	bx	lr
 800a8e4:	200012e8 	.word	0x200012e8
 800a8e8:	20001304 	.word	0x20001304

0800a8ec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b084      	sub	sp, #16
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d051      	beq.n	800a9a6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a906:	4b2a      	ldr	r3, [pc, #168]	; (800a9b0 <xTaskPriorityInherit+0xc4>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a90c:	429a      	cmp	r2, r3
 800a90e:	d241      	bcs.n	800a994 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	699b      	ldr	r3, [r3, #24]
 800a914:	2b00      	cmp	r3, #0
 800a916:	db06      	blt.n	800a926 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a918:	4b25      	ldr	r3, [pc, #148]	; (800a9b0 <xTaskPriorityInherit+0xc4>)
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a91e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	6959      	ldr	r1, [r3, #20]
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a92e:	4613      	mov	r3, r2
 800a930:	009b      	lsls	r3, r3, #2
 800a932:	4413      	add	r3, r2
 800a934:	009b      	lsls	r3, r3, #2
 800a936:	4a1f      	ldr	r2, [pc, #124]	; (800a9b4 <xTaskPriorityInherit+0xc8>)
 800a938:	4413      	add	r3, r2
 800a93a:	4299      	cmp	r1, r3
 800a93c:	d122      	bne.n	800a984 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	3304      	adds	r3, #4
 800a942:	4618      	mov	r0, r3
 800a944:	f7fd ffc0 	bl	80088c8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a948:	4b19      	ldr	r3, [pc, #100]	; (800a9b0 <xTaskPriorityInherit+0xc4>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a94e:	68bb      	ldr	r3, [r7, #8]
 800a950:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a956:	4b18      	ldr	r3, [pc, #96]	; (800a9b8 <xTaskPriorityInherit+0xcc>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	429a      	cmp	r2, r3
 800a95c:	d903      	bls.n	800a966 <xTaskPriorityInherit+0x7a>
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a962:	4a15      	ldr	r2, [pc, #84]	; (800a9b8 <xTaskPriorityInherit+0xcc>)
 800a964:	6013      	str	r3, [r2, #0]
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a96a:	4613      	mov	r3, r2
 800a96c:	009b      	lsls	r3, r3, #2
 800a96e:	4413      	add	r3, r2
 800a970:	009b      	lsls	r3, r3, #2
 800a972:	4a10      	ldr	r2, [pc, #64]	; (800a9b4 <xTaskPriorityInherit+0xc8>)
 800a974:	441a      	add	r2, r3
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	3304      	adds	r3, #4
 800a97a:	4619      	mov	r1, r3
 800a97c:	4610      	mov	r0, r2
 800a97e:	f7fd ff46 	bl	800880e <vListInsertEnd>
 800a982:	e004      	b.n	800a98e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a984:	4b0a      	ldr	r3, [pc, #40]	; (800a9b0 <xTaskPriorityInherit+0xc4>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a98e:	2301      	movs	r3, #1
 800a990:	60fb      	str	r3, [r7, #12]
 800a992:	e008      	b.n	800a9a6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a998:	4b05      	ldr	r3, [pc, #20]	; (800a9b0 <xTaskPriorityInherit+0xc4>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a99e:	429a      	cmp	r2, r3
 800a9a0:	d201      	bcs.n	800a9a6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
	}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	3710      	adds	r7, #16
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bd80      	pop	{r7, pc}
 800a9b0:	20000e08 	.word	0x20000e08
 800a9b4:	20000e0c 	.word	0x20000e0c
 800a9b8:	200012e4 	.word	0x200012e4

0800a9bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b086      	sub	sp, #24
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d056      	beq.n	800aa80 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a9d2:	4b2e      	ldr	r3, [pc, #184]	; (800aa8c <xTaskPriorityDisinherit+0xd0>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	693a      	ldr	r2, [r7, #16]
 800a9d8:	429a      	cmp	r2, r3
 800a9da:	d00a      	beq.n	800a9f2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a9dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9e0:	f383 8811 	msr	BASEPRI, r3
 800a9e4:	f3bf 8f6f 	isb	sy
 800a9e8:	f3bf 8f4f 	dsb	sy
 800a9ec:	60fb      	str	r3, [r7, #12]
}
 800a9ee:	bf00      	nop
 800a9f0:	e7fe      	b.n	800a9f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d10a      	bne.n	800aa10 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a9fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9fe:	f383 8811 	msr	BASEPRI, r3
 800aa02:	f3bf 8f6f 	isb	sy
 800aa06:	f3bf 8f4f 	dsb	sy
 800aa0a:	60bb      	str	r3, [r7, #8]
}
 800aa0c:	bf00      	nop
 800aa0e:	e7fe      	b.n	800aa0e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800aa10:	693b      	ldr	r3, [r7, #16]
 800aa12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa14:	1e5a      	subs	r2, r3, #1
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800aa1a:	693b      	ldr	r3, [r7, #16]
 800aa1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa22:	429a      	cmp	r2, r3
 800aa24:	d02c      	beq.n	800aa80 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800aa26:	693b      	ldr	r3, [r7, #16]
 800aa28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d128      	bne.n	800aa80 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa2e:	693b      	ldr	r3, [r7, #16]
 800aa30:	3304      	adds	r3, #4
 800aa32:	4618      	mov	r0, r3
 800aa34:	f7fd ff48 	bl	80088c8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aa3c:	693b      	ldr	r3, [r7, #16]
 800aa3e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa40:	693b      	ldr	r3, [r7, #16]
 800aa42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa44:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aa48:	693b      	ldr	r3, [r7, #16]
 800aa4a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800aa4c:	693b      	ldr	r3, [r7, #16]
 800aa4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa50:	4b0f      	ldr	r3, [pc, #60]	; (800aa90 <xTaskPriorityDisinherit+0xd4>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	429a      	cmp	r2, r3
 800aa56:	d903      	bls.n	800aa60 <xTaskPriorityDisinherit+0xa4>
 800aa58:	693b      	ldr	r3, [r7, #16]
 800aa5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa5c:	4a0c      	ldr	r2, [pc, #48]	; (800aa90 <xTaskPriorityDisinherit+0xd4>)
 800aa5e:	6013      	str	r3, [r2, #0]
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa64:	4613      	mov	r3, r2
 800aa66:	009b      	lsls	r3, r3, #2
 800aa68:	4413      	add	r3, r2
 800aa6a:	009b      	lsls	r3, r3, #2
 800aa6c:	4a09      	ldr	r2, [pc, #36]	; (800aa94 <xTaskPriorityDisinherit+0xd8>)
 800aa6e:	441a      	add	r2, r3
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	3304      	adds	r3, #4
 800aa74:	4619      	mov	r1, r3
 800aa76:	4610      	mov	r0, r2
 800aa78:	f7fd fec9 	bl	800880e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aa80:	697b      	ldr	r3, [r7, #20]
	}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3718      	adds	r7, #24
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}
 800aa8a:	bf00      	nop
 800aa8c:	20000e08 	.word	0x20000e08
 800aa90:	200012e4 	.word	0x200012e4
 800aa94:	20000e0c 	.word	0x20000e0c

0800aa98 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b088      	sub	sp, #32
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
 800aaa0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800aaa6:	2301      	movs	r3, #1
 800aaa8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d06a      	beq.n	800ab86 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800aab0:	69bb      	ldr	r3, [r7, #24]
 800aab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d10a      	bne.n	800aace <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800aab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aabc:	f383 8811 	msr	BASEPRI, r3
 800aac0:	f3bf 8f6f 	isb	sy
 800aac4:	f3bf 8f4f 	dsb	sy
 800aac8:	60fb      	str	r3, [r7, #12]
}
 800aaca:	bf00      	nop
 800aacc:	e7fe      	b.n	800aacc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800aace:	69bb      	ldr	r3, [r7, #24]
 800aad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aad2:	683a      	ldr	r2, [r7, #0]
 800aad4:	429a      	cmp	r2, r3
 800aad6:	d902      	bls.n	800aade <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	61fb      	str	r3, [r7, #28]
 800aadc:	e002      	b.n	800aae4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800aade:	69bb      	ldr	r3, [r7, #24]
 800aae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aae2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800aae4:	69bb      	ldr	r3, [r7, #24]
 800aae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aae8:	69fa      	ldr	r2, [r7, #28]
 800aaea:	429a      	cmp	r2, r3
 800aaec:	d04b      	beq.n	800ab86 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800aaee:	69bb      	ldr	r3, [r7, #24]
 800aaf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aaf2:	697a      	ldr	r2, [r7, #20]
 800aaf4:	429a      	cmp	r2, r3
 800aaf6:	d146      	bne.n	800ab86 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800aaf8:	4b25      	ldr	r3, [pc, #148]	; (800ab90 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	69ba      	ldr	r2, [r7, #24]
 800aafe:	429a      	cmp	r2, r3
 800ab00:	d10a      	bne.n	800ab18 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800ab02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab06:	f383 8811 	msr	BASEPRI, r3
 800ab0a:	f3bf 8f6f 	isb	sy
 800ab0e:	f3bf 8f4f 	dsb	sy
 800ab12:	60bb      	str	r3, [r7, #8]
}
 800ab14:	bf00      	nop
 800ab16:	e7fe      	b.n	800ab16 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ab18:	69bb      	ldr	r3, [r7, #24]
 800ab1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab1c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ab1e:	69bb      	ldr	r3, [r7, #24]
 800ab20:	69fa      	ldr	r2, [r7, #28]
 800ab22:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ab24:	69bb      	ldr	r3, [r7, #24]
 800ab26:	699b      	ldr	r3, [r3, #24]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	db04      	blt.n	800ab36 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab2c:	69fb      	ldr	r3, [r7, #28]
 800ab2e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ab32:	69bb      	ldr	r3, [r7, #24]
 800ab34:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ab36:	69bb      	ldr	r3, [r7, #24]
 800ab38:	6959      	ldr	r1, [r3, #20]
 800ab3a:	693a      	ldr	r2, [r7, #16]
 800ab3c:	4613      	mov	r3, r2
 800ab3e:	009b      	lsls	r3, r3, #2
 800ab40:	4413      	add	r3, r2
 800ab42:	009b      	lsls	r3, r3, #2
 800ab44:	4a13      	ldr	r2, [pc, #76]	; (800ab94 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ab46:	4413      	add	r3, r2
 800ab48:	4299      	cmp	r1, r3
 800ab4a:	d11c      	bne.n	800ab86 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab4c:	69bb      	ldr	r3, [r7, #24]
 800ab4e:	3304      	adds	r3, #4
 800ab50:	4618      	mov	r0, r3
 800ab52:	f7fd feb9 	bl	80088c8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ab56:	69bb      	ldr	r3, [r7, #24]
 800ab58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab5a:	4b0f      	ldr	r3, [pc, #60]	; (800ab98 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	429a      	cmp	r2, r3
 800ab60:	d903      	bls.n	800ab6a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800ab62:	69bb      	ldr	r3, [r7, #24]
 800ab64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab66:	4a0c      	ldr	r2, [pc, #48]	; (800ab98 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ab68:	6013      	str	r3, [r2, #0]
 800ab6a:	69bb      	ldr	r3, [r7, #24]
 800ab6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab6e:	4613      	mov	r3, r2
 800ab70:	009b      	lsls	r3, r3, #2
 800ab72:	4413      	add	r3, r2
 800ab74:	009b      	lsls	r3, r3, #2
 800ab76:	4a07      	ldr	r2, [pc, #28]	; (800ab94 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ab78:	441a      	add	r2, r3
 800ab7a:	69bb      	ldr	r3, [r7, #24]
 800ab7c:	3304      	adds	r3, #4
 800ab7e:	4619      	mov	r1, r3
 800ab80:	4610      	mov	r0, r2
 800ab82:	f7fd fe44 	bl	800880e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ab86:	bf00      	nop
 800ab88:	3720      	adds	r7, #32
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}
 800ab8e:	bf00      	nop
 800ab90:	20000e08 	.word	0x20000e08
 800ab94:	20000e0c 	.word	0x20000e0c
 800ab98:	200012e4 	.word	0x200012e4

0800ab9c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ab9c:	b480      	push	{r7}
 800ab9e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800aba0:	4b07      	ldr	r3, [pc, #28]	; (800abc0 <pvTaskIncrementMutexHeldCount+0x24>)
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d004      	beq.n	800abb2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800aba8:	4b05      	ldr	r3, [pc, #20]	; (800abc0 <pvTaskIncrementMutexHeldCount+0x24>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800abae:	3201      	adds	r2, #1
 800abb0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800abb2:	4b03      	ldr	r3, [pc, #12]	; (800abc0 <pvTaskIncrementMutexHeldCount+0x24>)
 800abb4:	681b      	ldr	r3, [r3, #0]
	}
 800abb6:	4618      	mov	r0, r3
 800abb8:	46bd      	mov	sp, r7
 800abba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbe:	4770      	bx	lr
 800abc0:	20000e08 	.word	0x20000e08

0800abc4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b084      	sub	sp, #16
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
 800abcc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800abce:	4b21      	ldr	r3, [pc, #132]	; (800ac54 <prvAddCurrentTaskToDelayedList+0x90>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800abd4:	4b20      	ldr	r3, [pc, #128]	; (800ac58 <prvAddCurrentTaskToDelayedList+0x94>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	3304      	adds	r3, #4
 800abda:	4618      	mov	r0, r3
 800abdc:	f7fd fe74 	bl	80088c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abe6:	d10a      	bne.n	800abfe <prvAddCurrentTaskToDelayedList+0x3a>
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d007      	beq.n	800abfe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800abee:	4b1a      	ldr	r3, [pc, #104]	; (800ac58 <prvAddCurrentTaskToDelayedList+0x94>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	3304      	adds	r3, #4
 800abf4:	4619      	mov	r1, r3
 800abf6:	4819      	ldr	r0, [pc, #100]	; (800ac5c <prvAddCurrentTaskToDelayedList+0x98>)
 800abf8:	f7fd fe09 	bl	800880e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800abfc:	e026      	b.n	800ac4c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800abfe:	68fa      	ldr	r2, [r7, #12]
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	4413      	add	r3, r2
 800ac04:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ac06:	4b14      	ldr	r3, [pc, #80]	; (800ac58 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	68ba      	ldr	r2, [r7, #8]
 800ac0c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ac0e:	68ba      	ldr	r2, [r7, #8]
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	429a      	cmp	r2, r3
 800ac14:	d209      	bcs.n	800ac2a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac16:	4b12      	ldr	r3, [pc, #72]	; (800ac60 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ac18:	681a      	ldr	r2, [r3, #0]
 800ac1a:	4b0f      	ldr	r3, [pc, #60]	; (800ac58 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	3304      	adds	r3, #4
 800ac20:	4619      	mov	r1, r3
 800ac22:	4610      	mov	r0, r2
 800ac24:	f7fd fe17 	bl	8008856 <vListInsert>
}
 800ac28:	e010      	b.n	800ac4c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac2a:	4b0e      	ldr	r3, [pc, #56]	; (800ac64 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ac2c:	681a      	ldr	r2, [r3, #0]
 800ac2e:	4b0a      	ldr	r3, [pc, #40]	; (800ac58 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	3304      	adds	r3, #4
 800ac34:	4619      	mov	r1, r3
 800ac36:	4610      	mov	r0, r2
 800ac38:	f7fd fe0d 	bl	8008856 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ac3c:	4b0a      	ldr	r3, [pc, #40]	; (800ac68 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	68ba      	ldr	r2, [r7, #8]
 800ac42:	429a      	cmp	r2, r3
 800ac44:	d202      	bcs.n	800ac4c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ac46:	4a08      	ldr	r2, [pc, #32]	; (800ac68 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	6013      	str	r3, [r2, #0]
}
 800ac4c:	bf00      	nop
 800ac4e:	3710      	adds	r7, #16
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}
 800ac54:	200012e0 	.word	0x200012e0
 800ac58:	20000e08 	.word	0x20000e08
 800ac5c:	200012c8 	.word	0x200012c8
 800ac60:	20001298 	.word	0x20001298
 800ac64:	20001294 	.word	0x20001294
 800ac68:	200012fc 	.word	0x200012fc

0800ac6c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b08a      	sub	sp, #40	; 0x28
 800ac70:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ac72:	2300      	movs	r3, #0
 800ac74:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ac76:	f000 fba1 	bl	800b3bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ac7a:	4b1c      	ldr	r3, [pc, #112]	; (800acec <xTimerCreateTimerTask+0x80>)
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d021      	beq.n	800acc6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ac82:	2300      	movs	r3, #0
 800ac84:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ac86:	2300      	movs	r3, #0
 800ac88:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ac8a:	1d3a      	adds	r2, r7, #4
 800ac8c:	f107 0108 	add.w	r1, r7, #8
 800ac90:	f107 030c 	add.w	r3, r7, #12
 800ac94:	4618      	mov	r0, r3
 800ac96:	f7fd fd73 	bl	8008780 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ac9a:	6879      	ldr	r1, [r7, #4]
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	68fa      	ldr	r2, [r7, #12]
 800aca0:	9202      	str	r2, [sp, #8]
 800aca2:	9301      	str	r3, [sp, #4]
 800aca4:	2302      	movs	r3, #2
 800aca6:	9300      	str	r3, [sp, #0]
 800aca8:	2300      	movs	r3, #0
 800acaa:	460a      	mov	r2, r1
 800acac:	4910      	ldr	r1, [pc, #64]	; (800acf0 <xTimerCreateTimerTask+0x84>)
 800acae:	4811      	ldr	r0, [pc, #68]	; (800acf4 <xTimerCreateTimerTask+0x88>)
 800acb0:	f7fe fef8 	bl	8009aa4 <xTaskCreateStatic>
 800acb4:	4603      	mov	r3, r0
 800acb6:	4a10      	ldr	r2, [pc, #64]	; (800acf8 <xTimerCreateTimerTask+0x8c>)
 800acb8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800acba:	4b0f      	ldr	r3, [pc, #60]	; (800acf8 <xTimerCreateTimerTask+0x8c>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d001      	beq.n	800acc6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800acc2:	2301      	movs	r3, #1
 800acc4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800acc6:	697b      	ldr	r3, [r7, #20]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d10a      	bne.n	800ace2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800accc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd0:	f383 8811 	msr	BASEPRI, r3
 800acd4:	f3bf 8f6f 	isb	sy
 800acd8:	f3bf 8f4f 	dsb	sy
 800acdc:	613b      	str	r3, [r7, #16]
}
 800acde:	bf00      	nop
 800ace0:	e7fe      	b.n	800ace0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ace2:	697b      	ldr	r3, [r7, #20]
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3718      	adds	r7, #24
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}
 800acec:	20001338 	.word	0x20001338
 800acf0:	0800d85c 	.word	0x0800d85c
 800acf4:	0800af65 	.word	0x0800af65
 800acf8:	2000133c 	.word	0x2000133c

0800acfc <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b088      	sub	sp, #32
 800ad00:	af02      	add	r7, sp, #8
 800ad02:	60f8      	str	r0, [r7, #12]
 800ad04:	60b9      	str	r1, [r7, #8]
 800ad06:	607a      	str	r2, [r7, #4]
 800ad08:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800ad0a:	202c      	movs	r0, #44	; 0x2c
 800ad0c:	f000 fe04 	bl	800b918 <pvPortMalloc>
 800ad10:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800ad12:	697b      	ldr	r3, [r7, #20]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d00d      	beq.n	800ad34 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800ad18:	697b      	ldr	r3, [r7, #20]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	9301      	str	r3, [sp, #4]
 800ad24:	6a3b      	ldr	r3, [r7, #32]
 800ad26:	9300      	str	r3, [sp, #0]
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	687a      	ldr	r2, [r7, #4]
 800ad2c:	68b9      	ldr	r1, [r7, #8]
 800ad2e:	68f8      	ldr	r0, [r7, #12]
 800ad30:	f000 f843 	bl	800adba <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800ad34:	697b      	ldr	r3, [r7, #20]
	}
 800ad36:	4618      	mov	r0, r3
 800ad38:	3718      	adds	r7, #24
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}

0800ad3e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800ad3e:	b580      	push	{r7, lr}
 800ad40:	b08a      	sub	sp, #40	; 0x28
 800ad42:	af02      	add	r7, sp, #8
 800ad44:	60f8      	str	r0, [r7, #12]
 800ad46:	60b9      	str	r1, [r7, #8]
 800ad48:	607a      	str	r2, [r7, #4]
 800ad4a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800ad4c:	232c      	movs	r3, #44	; 0x2c
 800ad4e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800ad50:	693b      	ldr	r3, [r7, #16]
 800ad52:	2b2c      	cmp	r3, #44	; 0x2c
 800ad54:	d00a      	beq.n	800ad6c <xTimerCreateStatic+0x2e>
	__asm volatile
 800ad56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad5a:	f383 8811 	msr	BASEPRI, r3
 800ad5e:	f3bf 8f6f 	isb	sy
 800ad62:	f3bf 8f4f 	dsb	sy
 800ad66:	61bb      	str	r3, [r7, #24]
}
 800ad68:	bf00      	nop
 800ad6a:	e7fe      	b.n	800ad6a <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ad6c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800ad6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d10a      	bne.n	800ad8a <xTimerCreateStatic+0x4c>
	__asm volatile
 800ad74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad78:	f383 8811 	msr	BASEPRI, r3
 800ad7c:	f3bf 8f6f 	isb	sy
 800ad80:	f3bf 8f4f 	dsb	sy
 800ad84:	617b      	str	r3, [r7, #20]
}
 800ad86:	bf00      	nop
 800ad88:	e7fe      	b.n	800ad88 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800ad8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad8c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800ad8e:	69fb      	ldr	r3, [r7, #28]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d00d      	beq.n	800adb0 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800ad94:	69fb      	ldr	r3, [r7, #28]
 800ad96:	2202      	movs	r2, #2
 800ad98:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800ad9c:	69fb      	ldr	r3, [r7, #28]
 800ad9e:	9301      	str	r3, [sp, #4]
 800ada0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ada2:	9300      	str	r3, [sp, #0]
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	687a      	ldr	r2, [r7, #4]
 800ada8:	68b9      	ldr	r1, [r7, #8]
 800adaa:	68f8      	ldr	r0, [r7, #12]
 800adac:	f000 f805 	bl	800adba <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800adb0:	69fb      	ldr	r3, [r7, #28]
	}
 800adb2:	4618      	mov	r0, r3
 800adb4:	3720      	adds	r7, #32
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}

0800adba <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800adba:	b580      	push	{r7, lr}
 800adbc:	b086      	sub	sp, #24
 800adbe:	af00      	add	r7, sp, #0
 800adc0:	60f8      	str	r0, [r7, #12]
 800adc2:	60b9      	str	r1, [r7, #8]
 800adc4:	607a      	str	r2, [r7, #4]
 800adc6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d10a      	bne.n	800ade4 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800adce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add2:	f383 8811 	msr	BASEPRI, r3
 800add6:	f3bf 8f6f 	isb	sy
 800adda:	f3bf 8f4f 	dsb	sy
 800adde:	617b      	str	r3, [r7, #20]
}
 800ade0:	bf00      	nop
 800ade2:	e7fe      	b.n	800ade2 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800ade4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d01e      	beq.n	800ae28 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800adea:	f000 fae7 	bl	800b3bc <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800adee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf0:	68fa      	ldr	r2, [r7, #12]
 800adf2:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800adf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf6:	68ba      	ldr	r2, [r7, #8]
 800adf8:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800adfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adfc:	683a      	ldr	r2, [r7, #0]
 800adfe:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800ae00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae02:	6a3a      	ldr	r2, [r7, #32]
 800ae04:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800ae06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae08:	3304      	adds	r3, #4
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f7fd fcf2 	bl	80087f4 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d008      	beq.n	800ae28 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800ae16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae1c:	f043 0304 	orr.w	r3, r3, #4
 800ae20:	b2da      	uxtb	r2, r3
 800ae22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae24:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800ae28:	bf00      	nop
 800ae2a:	3718      	adds	r7, #24
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}

0800ae30 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b08a      	sub	sp, #40	; 0x28
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	60f8      	str	r0, [r7, #12]
 800ae38:	60b9      	str	r1, [r7, #8]
 800ae3a:	607a      	str	r2, [r7, #4]
 800ae3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d10a      	bne.n	800ae5e <xTimerGenericCommand+0x2e>
	__asm volatile
 800ae48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae4c:	f383 8811 	msr	BASEPRI, r3
 800ae50:	f3bf 8f6f 	isb	sy
 800ae54:	f3bf 8f4f 	dsb	sy
 800ae58:	623b      	str	r3, [r7, #32]
}
 800ae5a:	bf00      	nop
 800ae5c:	e7fe      	b.n	800ae5c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ae5e:	4b1a      	ldr	r3, [pc, #104]	; (800aec8 <xTimerGenericCommand+0x98>)
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d02a      	beq.n	800aebc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	2b05      	cmp	r3, #5
 800ae76:	dc18      	bgt.n	800aeaa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ae78:	f7ff fd1a 	bl	800a8b0 <xTaskGetSchedulerState>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	2b02      	cmp	r3, #2
 800ae80:	d109      	bne.n	800ae96 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ae82:	4b11      	ldr	r3, [pc, #68]	; (800aec8 <xTimerGenericCommand+0x98>)
 800ae84:	6818      	ldr	r0, [r3, #0]
 800ae86:	f107 0110 	add.w	r1, r7, #16
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae8e:	f7fd ffa3 	bl	8008dd8 <xQueueGenericSend>
 800ae92:	6278      	str	r0, [r7, #36]	; 0x24
 800ae94:	e012      	b.n	800aebc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ae96:	4b0c      	ldr	r3, [pc, #48]	; (800aec8 <xTimerGenericCommand+0x98>)
 800ae98:	6818      	ldr	r0, [r3, #0]
 800ae9a:	f107 0110 	add.w	r1, r7, #16
 800ae9e:	2300      	movs	r3, #0
 800aea0:	2200      	movs	r2, #0
 800aea2:	f7fd ff99 	bl	8008dd8 <xQueueGenericSend>
 800aea6:	6278      	str	r0, [r7, #36]	; 0x24
 800aea8:	e008      	b.n	800aebc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800aeaa:	4b07      	ldr	r3, [pc, #28]	; (800aec8 <xTimerGenericCommand+0x98>)
 800aeac:	6818      	ldr	r0, [r3, #0]
 800aeae:	f107 0110 	add.w	r1, r7, #16
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	683a      	ldr	r2, [r7, #0]
 800aeb6:	f7fe f88d 	bl	8008fd4 <xQueueGenericSendFromISR>
 800aeba:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800aebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	3728      	adds	r7, #40	; 0x28
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}
 800aec6:	bf00      	nop
 800aec8:	20001338 	.word	0x20001338

0800aecc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b088      	sub	sp, #32
 800aed0:	af02      	add	r7, sp, #8
 800aed2:	6078      	str	r0, [r7, #4]
 800aed4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aed6:	4b22      	ldr	r3, [pc, #136]	; (800af60 <prvProcessExpiredTimer+0x94>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	68db      	ldr	r3, [r3, #12]
 800aedc:	68db      	ldr	r3, [r3, #12]
 800aede:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aee0:	697b      	ldr	r3, [r7, #20]
 800aee2:	3304      	adds	r3, #4
 800aee4:	4618      	mov	r0, r3
 800aee6:	f7fd fcef 	bl	80088c8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aeea:	697b      	ldr	r3, [r7, #20]
 800aeec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aef0:	f003 0304 	and.w	r3, r3, #4
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d022      	beq.n	800af3e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800aef8:	697b      	ldr	r3, [r7, #20]
 800aefa:	699a      	ldr	r2, [r3, #24]
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	18d1      	adds	r1, r2, r3
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	683a      	ldr	r2, [r7, #0]
 800af04:	6978      	ldr	r0, [r7, #20]
 800af06:	f000 f8d1 	bl	800b0ac <prvInsertTimerInActiveList>
 800af0a:	4603      	mov	r3, r0
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d01f      	beq.n	800af50 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800af10:	2300      	movs	r3, #0
 800af12:	9300      	str	r3, [sp, #0]
 800af14:	2300      	movs	r3, #0
 800af16:	687a      	ldr	r2, [r7, #4]
 800af18:	2100      	movs	r1, #0
 800af1a:	6978      	ldr	r0, [r7, #20]
 800af1c:	f7ff ff88 	bl	800ae30 <xTimerGenericCommand>
 800af20:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800af22:	693b      	ldr	r3, [r7, #16]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d113      	bne.n	800af50 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800af28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af2c:	f383 8811 	msr	BASEPRI, r3
 800af30:	f3bf 8f6f 	isb	sy
 800af34:	f3bf 8f4f 	dsb	sy
 800af38:	60fb      	str	r3, [r7, #12]
}
 800af3a:	bf00      	nop
 800af3c:	e7fe      	b.n	800af3c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800af3e:	697b      	ldr	r3, [r7, #20]
 800af40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af44:	f023 0301 	bic.w	r3, r3, #1
 800af48:	b2da      	uxtb	r2, r3
 800af4a:	697b      	ldr	r3, [r7, #20]
 800af4c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800af50:	697b      	ldr	r3, [r7, #20]
 800af52:	6a1b      	ldr	r3, [r3, #32]
 800af54:	6978      	ldr	r0, [r7, #20]
 800af56:	4798      	blx	r3
}
 800af58:	bf00      	nop
 800af5a:	3718      	adds	r7, #24
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}
 800af60:	20001330 	.word	0x20001330

0800af64 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b084      	sub	sp, #16
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800af6c:	f107 0308 	add.w	r3, r7, #8
 800af70:	4618      	mov	r0, r3
 800af72:	f000 f857 	bl	800b024 <prvGetNextExpireTime>
 800af76:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	4619      	mov	r1, r3
 800af7c:	68f8      	ldr	r0, [r7, #12]
 800af7e:	f000 f803 	bl	800af88 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800af82:	f000 f8d5 	bl	800b130 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800af86:	e7f1      	b.n	800af6c <prvTimerTask+0x8>

0800af88 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b084      	sub	sp, #16
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
 800af90:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800af92:	f7ff f89b 	bl	800a0cc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800af96:	f107 0308 	add.w	r3, r7, #8
 800af9a:	4618      	mov	r0, r3
 800af9c:	f000 f866 	bl	800b06c <prvSampleTimeNow>
 800afa0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d130      	bne.n	800b00a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d10a      	bne.n	800afc4 <prvProcessTimerOrBlockTask+0x3c>
 800afae:	687a      	ldr	r2, [r7, #4]
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	429a      	cmp	r2, r3
 800afb4:	d806      	bhi.n	800afc4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800afb6:	f7ff f897 	bl	800a0e8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800afba:	68f9      	ldr	r1, [r7, #12]
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f7ff ff85 	bl	800aecc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800afc2:	e024      	b.n	800b00e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d008      	beq.n	800afdc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800afca:	4b13      	ldr	r3, [pc, #76]	; (800b018 <prvProcessTimerOrBlockTask+0x90>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d101      	bne.n	800afd8 <prvProcessTimerOrBlockTask+0x50>
 800afd4:	2301      	movs	r3, #1
 800afd6:	e000      	b.n	800afda <prvProcessTimerOrBlockTask+0x52>
 800afd8:	2300      	movs	r3, #0
 800afda:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800afdc:	4b0f      	ldr	r3, [pc, #60]	; (800b01c <prvProcessTimerOrBlockTask+0x94>)
 800afde:	6818      	ldr	r0, [r3, #0]
 800afe0:	687a      	ldr	r2, [r7, #4]
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	1ad3      	subs	r3, r2, r3
 800afe6:	683a      	ldr	r2, [r7, #0]
 800afe8:	4619      	mov	r1, r3
 800afea:	f7fe fd27 	bl	8009a3c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800afee:	f7ff f87b 	bl	800a0e8 <xTaskResumeAll>
 800aff2:	4603      	mov	r3, r0
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d10a      	bne.n	800b00e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800aff8:	4b09      	ldr	r3, [pc, #36]	; (800b020 <prvProcessTimerOrBlockTask+0x98>)
 800affa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800affe:	601a      	str	r2, [r3, #0]
 800b000:	f3bf 8f4f 	dsb	sy
 800b004:	f3bf 8f6f 	isb	sy
}
 800b008:	e001      	b.n	800b00e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b00a:	f7ff f86d 	bl	800a0e8 <xTaskResumeAll>
}
 800b00e:	bf00      	nop
 800b010:	3710      	adds	r7, #16
 800b012:	46bd      	mov	sp, r7
 800b014:	bd80      	pop	{r7, pc}
 800b016:	bf00      	nop
 800b018:	20001334 	.word	0x20001334
 800b01c:	20001338 	.word	0x20001338
 800b020:	e000ed04 	.word	0xe000ed04

0800b024 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b024:	b480      	push	{r7}
 800b026:	b085      	sub	sp, #20
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b02c:	4b0e      	ldr	r3, [pc, #56]	; (800b068 <prvGetNextExpireTime+0x44>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d101      	bne.n	800b03a <prvGetNextExpireTime+0x16>
 800b036:	2201      	movs	r2, #1
 800b038:	e000      	b.n	800b03c <prvGetNextExpireTime+0x18>
 800b03a:	2200      	movs	r2, #0
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d105      	bne.n	800b054 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b048:	4b07      	ldr	r3, [pc, #28]	; (800b068 <prvGetNextExpireTime+0x44>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	68db      	ldr	r3, [r3, #12]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	60fb      	str	r3, [r7, #12]
 800b052:	e001      	b.n	800b058 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b054:	2300      	movs	r3, #0
 800b056:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b058:	68fb      	ldr	r3, [r7, #12]
}
 800b05a:	4618      	mov	r0, r3
 800b05c:	3714      	adds	r7, #20
 800b05e:	46bd      	mov	sp, r7
 800b060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b064:	4770      	bx	lr
 800b066:	bf00      	nop
 800b068:	20001330 	.word	0x20001330

0800b06c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b084      	sub	sp, #16
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b074:	f7ff f8d6 	bl	800a224 <xTaskGetTickCount>
 800b078:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b07a:	4b0b      	ldr	r3, [pc, #44]	; (800b0a8 <prvSampleTimeNow+0x3c>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	68fa      	ldr	r2, [r7, #12]
 800b080:	429a      	cmp	r2, r3
 800b082:	d205      	bcs.n	800b090 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b084:	f000 f936 	bl	800b2f4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2201      	movs	r2, #1
 800b08c:	601a      	str	r2, [r3, #0]
 800b08e:	e002      	b.n	800b096 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2200      	movs	r2, #0
 800b094:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b096:	4a04      	ldr	r2, [pc, #16]	; (800b0a8 <prvSampleTimeNow+0x3c>)
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b09c:	68fb      	ldr	r3, [r7, #12]
}
 800b09e:	4618      	mov	r0, r3
 800b0a0:	3710      	adds	r7, #16
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bd80      	pop	{r7, pc}
 800b0a6:	bf00      	nop
 800b0a8:	20001340 	.word	0x20001340

0800b0ac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b086      	sub	sp, #24
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	60f8      	str	r0, [r7, #12]
 800b0b4:	60b9      	str	r1, [r7, #8]
 800b0b6:	607a      	str	r2, [r7, #4]
 800b0b8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	68ba      	ldr	r2, [r7, #8]
 800b0c2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	68fa      	ldr	r2, [r7, #12]
 800b0c8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b0ca:	68ba      	ldr	r2, [r7, #8]
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	429a      	cmp	r2, r3
 800b0d0:	d812      	bhi.n	800b0f8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b0d2:	687a      	ldr	r2, [r7, #4]
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	1ad2      	subs	r2, r2, r3
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	699b      	ldr	r3, [r3, #24]
 800b0dc:	429a      	cmp	r2, r3
 800b0de:	d302      	bcc.n	800b0e6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b0e0:	2301      	movs	r3, #1
 800b0e2:	617b      	str	r3, [r7, #20]
 800b0e4:	e01b      	b.n	800b11e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b0e6:	4b10      	ldr	r3, [pc, #64]	; (800b128 <prvInsertTimerInActiveList+0x7c>)
 800b0e8:	681a      	ldr	r2, [r3, #0]
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	3304      	adds	r3, #4
 800b0ee:	4619      	mov	r1, r3
 800b0f0:	4610      	mov	r0, r2
 800b0f2:	f7fd fbb0 	bl	8008856 <vListInsert>
 800b0f6:	e012      	b.n	800b11e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b0f8:	687a      	ldr	r2, [r7, #4]
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d206      	bcs.n	800b10e <prvInsertTimerInActiveList+0x62>
 800b100:	68ba      	ldr	r2, [r7, #8]
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	429a      	cmp	r2, r3
 800b106:	d302      	bcc.n	800b10e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b108:	2301      	movs	r3, #1
 800b10a:	617b      	str	r3, [r7, #20]
 800b10c:	e007      	b.n	800b11e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b10e:	4b07      	ldr	r3, [pc, #28]	; (800b12c <prvInsertTimerInActiveList+0x80>)
 800b110:	681a      	ldr	r2, [r3, #0]
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	3304      	adds	r3, #4
 800b116:	4619      	mov	r1, r3
 800b118:	4610      	mov	r0, r2
 800b11a:	f7fd fb9c 	bl	8008856 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b11e:	697b      	ldr	r3, [r7, #20]
}
 800b120:	4618      	mov	r0, r3
 800b122:	3718      	adds	r7, #24
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}
 800b128:	20001334 	.word	0x20001334
 800b12c:	20001330 	.word	0x20001330

0800b130 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b08e      	sub	sp, #56	; 0x38
 800b134:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b136:	e0ca      	b.n	800b2ce <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	da18      	bge.n	800b170 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b13e:	1d3b      	adds	r3, r7, #4
 800b140:	3304      	adds	r3, #4
 800b142:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b146:	2b00      	cmp	r3, #0
 800b148:	d10a      	bne.n	800b160 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b14a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b14e:	f383 8811 	msr	BASEPRI, r3
 800b152:	f3bf 8f6f 	isb	sy
 800b156:	f3bf 8f4f 	dsb	sy
 800b15a:	61fb      	str	r3, [r7, #28]
}
 800b15c:	bf00      	nop
 800b15e:	e7fe      	b.n	800b15e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b166:	6850      	ldr	r0, [r2, #4]
 800b168:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b16a:	6892      	ldr	r2, [r2, #8]
 800b16c:	4611      	mov	r1, r2
 800b16e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2b00      	cmp	r3, #0
 800b174:	f2c0 80aa 	blt.w	800b2cc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b17e:	695b      	ldr	r3, [r3, #20]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d004      	beq.n	800b18e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b186:	3304      	adds	r3, #4
 800b188:	4618      	mov	r0, r3
 800b18a:	f7fd fb9d 	bl	80088c8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b18e:	463b      	mov	r3, r7
 800b190:	4618      	mov	r0, r3
 800b192:	f7ff ff6b 	bl	800b06c <prvSampleTimeNow>
 800b196:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2b09      	cmp	r3, #9
 800b19c:	f200 8097 	bhi.w	800b2ce <prvProcessReceivedCommands+0x19e>
 800b1a0:	a201      	add	r2, pc, #4	; (adr r2, 800b1a8 <prvProcessReceivedCommands+0x78>)
 800b1a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1a6:	bf00      	nop
 800b1a8:	0800b1d1 	.word	0x0800b1d1
 800b1ac:	0800b1d1 	.word	0x0800b1d1
 800b1b0:	0800b1d1 	.word	0x0800b1d1
 800b1b4:	0800b245 	.word	0x0800b245
 800b1b8:	0800b259 	.word	0x0800b259
 800b1bc:	0800b2a3 	.word	0x0800b2a3
 800b1c0:	0800b1d1 	.word	0x0800b1d1
 800b1c4:	0800b1d1 	.word	0x0800b1d1
 800b1c8:	0800b245 	.word	0x0800b245
 800b1cc:	0800b259 	.word	0x0800b259
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1d6:	f043 0301 	orr.w	r3, r3, #1
 800b1da:	b2da      	uxtb	r2, r3
 800b1dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b1e2:	68ba      	ldr	r2, [r7, #8]
 800b1e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1e6:	699b      	ldr	r3, [r3, #24]
 800b1e8:	18d1      	adds	r1, r2, r3
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1f0:	f7ff ff5c 	bl	800b0ac <prvInsertTimerInActiveList>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d069      	beq.n	800b2ce <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b1fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1fc:	6a1b      	ldr	r3, [r3, #32]
 800b1fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b200:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b204:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b208:	f003 0304 	and.w	r3, r3, #4
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d05e      	beq.n	800b2ce <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b210:	68ba      	ldr	r2, [r7, #8]
 800b212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b214:	699b      	ldr	r3, [r3, #24]
 800b216:	441a      	add	r2, r3
 800b218:	2300      	movs	r3, #0
 800b21a:	9300      	str	r3, [sp, #0]
 800b21c:	2300      	movs	r3, #0
 800b21e:	2100      	movs	r1, #0
 800b220:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b222:	f7ff fe05 	bl	800ae30 <xTimerGenericCommand>
 800b226:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b228:	6a3b      	ldr	r3, [r7, #32]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d14f      	bne.n	800b2ce <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b22e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b232:	f383 8811 	msr	BASEPRI, r3
 800b236:	f3bf 8f6f 	isb	sy
 800b23a:	f3bf 8f4f 	dsb	sy
 800b23e:	61bb      	str	r3, [r7, #24]
}
 800b240:	bf00      	nop
 800b242:	e7fe      	b.n	800b242 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b246:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b24a:	f023 0301 	bic.w	r3, r3, #1
 800b24e:	b2da      	uxtb	r2, r3
 800b250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b252:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b256:	e03a      	b.n	800b2ce <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b25a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b25e:	f043 0301 	orr.w	r3, r3, #1
 800b262:	b2da      	uxtb	r2, r3
 800b264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b266:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b26a:	68ba      	ldr	r2, [r7, #8]
 800b26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b26e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b272:	699b      	ldr	r3, [r3, #24]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d10a      	bne.n	800b28e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b27c:	f383 8811 	msr	BASEPRI, r3
 800b280:	f3bf 8f6f 	isb	sy
 800b284:	f3bf 8f4f 	dsb	sy
 800b288:	617b      	str	r3, [r7, #20]
}
 800b28a:	bf00      	nop
 800b28c:	e7fe      	b.n	800b28c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b290:	699a      	ldr	r2, [r3, #24]
 800b292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b294:	18d1      	adds	r1, r2, r3
 800b296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b29a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b29c:	f7ff ff06 	bl	800b0ac <prvInsertTimerInActiveList>
					break;
 800b2a0:	e015      	b.n	800b2ce <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2a8:	f003 0302 	and.w	r3, r3, #2
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d103      	bne.n	800b2b8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b2b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2b2:	f000 fbfd 	bl	800bab0 <vPortFree>
 800b2b6:	e00a      	b.n	800b2ce <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2be:	f023 0301 	bic.w	r3, r3, #1
 800b2c2:	b2da      	uxtb	r2, r3
 800b2c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b2ca:	e000      	b.n	800b2ce <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b2cc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b2ce:	4b08      	ldr	r3, [pc, #32]	; (800b2f0 <prvProcessReceivedCommands+0x1c0>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	1d39      	adds	r1, r7, #4
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	f7fd ffa4 	bl	8009224 <xQueueReceive>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	f47f af2a 	bne.w	800b138 <prvProcessReceivedCommands+0x8>
	}
}
 800b2e4:	bf00      	nop
 800b2e6:	bf00      	nop
 800b2e8:	3730      	adds	r7, #48	; 0x30
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
 800b2ee:	bf00      	nop
 800b2f0:	20001338 	.word	0x20001338

0800b2f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b088      	sub	sp, #32
 800b2f8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b2fa:	e048      	b.n	800b38e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b2fc:	4b2d      	ldr	r3, [pc, #180]	; (800b3b4 <prvSwitchTimerLists+0xc0>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	68db      	ldr	r3, [r3, #12]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b306:	4b2b      	ldr	r3, [pc, #172]	; (800b3b4 <prvSwitchTimerLists+0xc0>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	68db      	ldr	r3, [r3, #12]
 800b30c:	68db      	ldr	r3, [r3, #12]
 800b30e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	3304      	adds	r3, #4
 800b314:	4618      	mov	r0, r3
 800b316:	f7fd fad7 	bl	80088c8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	6a1b      	ldr	r3, [r3, #32]
 800b31e:	68f8      	ldr	r0, [r7, #12]
 800b320:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b328:	f003 0304 	and.w	r3, r3, #4
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d02e      	beq.n	800b38e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	699b      	ldr	r3, [r3, #24]
 800b334:	693a      	ldr	r2, [r7, #16]
 800b336:	4413      	add	r3, r2
 800b338:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b33a:	68ba      	ldr	r2, [r7, #8]
 800b33c:	693b      	ldr	r3, [r7, #16]
 800b33e:	429a      	cmp	r2, r3
 800b340:	d90e      	bls.n	800b360 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	68ba      	ldr	r2, [r7, #8]
 800b346:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	68fa      	ldr	r2, [r7, #12]
 800b34c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b34e:	4b19      	ldr	r3, [pc, #100]	; (800b3b4 <prvSwitchTimerLists+0xc0>)
 800b350:	681a      	ldr	r2, [r3, #0]
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	3304      	adds	r3, #4
 800b356:	4619      	mov	r1, r3
 800b358:	4610      	mov	r0, r2
 800b35a:	f7fd fa7c 	bl	8008856 <vListInsert>
 800b35e:	e016      	b.n	800b38e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b360:	2300      	movs	r3, #0
 800b362:	9300      	str	r3, [sp, #0]
 800b364:	2300      	movs	r3, #0
 800b366:	693a      	ldr	r2, [r7, #16]
 800b368:	2100      	movs	r1, #0
 800b36a:	68f8      	ldr	r0, [r7, #12]
 800b36c:	f7ff fd60 	bl	800ae30 <xTimerGenericCommand>
 800b370:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d10a      	bne.n	800b38e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b37c:	f383 8811 	msr	BASEPRI, r3
 800b380:	f3bf 8f6f 	isb	sy
 800b384:	f3bf 8f4f 	dsb	sy
 800b388:	603b      	str	r3, [r7, #0]
}
 800b38a:	bf00      	nop
 800b38c:	e7fe      	b.n	800b38c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b38e:	4b09      	ldr	r3, [pc, #36]	; (800b3b4 <prvSwitchTimerLists+0xc0>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d1b1      	bne.n	800b2fc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b398:	4b06      	ldr	r3, [pc, #24]	; (800b3b4 <prvSwitchTimerLists+0xc0>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b39e:	4b06      	ldr	r3, [pc, #24]	; (800b3b8 <prvSwitchTimerLists+0xc4>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	4a04      	ldr	r2, [pc, #16]	; (800b3b4 <prvSwitchTimerLists+0xc0>)
 800b3a4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b3a6:	4a04      	ldr	r2, [pc, #16]	; (800b3b8 <prvSwitchTimerLists+0xc4>)
 800b3a8:	697b      	ldr	r3, [r7, #20]
 800b3aa:	6013      	str	r3, [r2, #0]
}
 800b3ac:	bf00      	nop
 800b3ae:	3718      	adds	r7, #24
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd80      	pop	{r7, pc}
 800b3b4:	20001330 	.word	0x20001330
 800b3b8:	20001334 	.word	0x20001334

0800b3bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b082      	sub	sp, #8
 800b3c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b3c2:	f000 f987 	bl	800b6d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b3c6:	4b15      	ldr	r3, [pc, #84]	; (800b41c <prvCheckForValidListAndQueue+0x60>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d120      	bne.n	800b410 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b3ce:	4814      	ldr	r0, [pc, #80]	; (800b420 <prvCheckForValidListAndQueue+0x64>)
 800b3d0:	f7fd f9f0 	bl	80087b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b3d4:	4813      	ldr	r0, [pc, #76]	; (800b424 <prvCheckForValidListAndQueue+0x68>)
 800b3d6:	f7fd f9ed 	bl	80087b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b3da:	4b13      	ldr	r3, [pc, #76]	; (800b428 <prvCheckForValidListAndQueue+0x6c>)
 800b3dc:	4a10      	ldr	r2, [pc, #64]	; (800b420 <prvCheckForValidListAndQueue+0x64>)
 800b3de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b3e0:	4b12      	ldr	r3, [pc, #72]	; (800b42c <prvCheckForValidListAndQueue+0x70>)
 800b3e2:	4a10      	ldr	r2, [pc, #64]	; (800b424 <prvCheckForValidListAndQueue+0x68>)
 800b3e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	9300      	str	r3, [sp, #0]
 800b3ea:	4b11      	ldr	r3, [pc, #68]	; (800b430 <prvCheckForValidListAndQueue+0x74>)
 800b3ec:	4a11      	ldr	r2, [pc, #68]	; (800b434 <prvCheckForValidListAndQueue+0x78>)
 800b3ee:	2110      	movs	r1, #16
 800b3f0:	200a      	movs	r0, #10
 800b3f2:	f7fd fafb 	bl	80089ec <xQueueGenericCreateStatic>
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	4a08      	ldr	r2, [pc, #32]	; (800b41c <prvCheckForValidListAndQueue+0x60>)
 800b3fa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b3fc:	4b07      	ldr	r3, [pc, #28]	; (800b41c <prvCheckForValidListAndQueue+0x60>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d005      	beq.n	800b410 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b404:	4b05      	ldr	r3, [pc, #20]	; (800b41c <prvCheckForValidListAndQueue+0x60>)
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	490b      	ldr	r1, [pc, #44]	; (800b438 <prvCheckForValidListAndQueue+0x7c>)
 800b40a:	4618      	mov	r0, r3
 800b40c:	f7fe fac2 	bl	8009994 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b410:	f000 f990 	bl	800b734 <vPortExitCritical>
}
 800b414:	bf00      	nop
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}
 800b41a:	bf00      	nop
 800b41c:	20001338 	.word	0x20001338
 800b420:	20001308 	.word	0x20001308
 800b424:	2000131c 	.word	0x2000131c
 800b428:	20001330 	.word	0x20001330
 800b42c:	20001334 	.word	0x20001334
 800b430:	200013e4 	.word	0x200013e4
 800b434:	20001344 	.word	0x20001344
 800b438:	0800d864 	.word	0x0800d864

0800b43c <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b086      	sub	sp, #24
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d10a      	bne.n	800b464 <pvTimerGetTimerID+0x28>
	__asm volatile
 800b44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b452:	f383 8811 	msr	BASEPRI, r3
 800b456:	f3bf 8f6f 	isb	sy
 800b45a:	f3bf 8f4f 	dsb	sy
 800b45e:	60fb      	str	r3, [r7, #12]
}
 800b460:	bf00      	nop
 800b462:	e7fe      	b.n	800b462 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800b464:	f000 f936 	bl	800b6d4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800b468:	697b      	ldr	r3, [r7, #20]
 800b46a:	69db      	ldr	r3, [r3, #28]
 800b46c:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800b46e:	f000 f961 	bl	800b734 <vPortExitCritical>

	return pvReturn;
 800b472:	693b      	ldr	r3, [r7, #16]
}
 800b474:	4618      	mov	r0, r3
 800b476:	3718      	adds	r7, #24
 800b478:	46bd      	mov	sp, r7
 800b47a:	bd80      	pop	{r7, pc}

0800b47c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b47c:	b480      	push	{r7}
 800b47e:	b085      	sub	sp, #20
 800b480:	af00      	add	r7, sp, #0
 800b482:	60f8      	str	r0, [r7, #12]
 800b484:	60b9      	str	r1, [r7, #8]
 800b486:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	3b04      	subs	r3, #4
 800b48c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b494:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	3b04      	subs	r3, #4
 800b49a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	f023 0201 	bic.w	r2, r3, #1
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	3b04      	subs	r3, #4
 800b4aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b4ac:	4a0c      	ldr	r2, [pc, #48]	; (800b4e0 <pxPortInitialiseStack+0x64>)
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	3b14      	subs	r3, #20
 800b4b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b4b8:	687a      	ldr	r2, [r7, #4]
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	3b04      	subs	r3, #4
 800b4c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	f06f 0202 	mvn.w	r2, #2
 800b4ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	3b20      	subs	r3, #32
 800b4d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b4d2:	68fb      	ldr	r3, [r7, #12]
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	3714      	adds	r7, #20
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4de:	4770      	bx	lr
 800b4e0:	0800b4e5 	.word	0x0800b4e5

0800b4e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	b085      	sub	sp, #20
 800b4e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b4ee:	4b12      	ldr	r3, [pc, #72]	; (800b538 <prvTaskExitError+0x54>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4f6:	d00a      	beq.n	800b50e <prvTaskExitError+0x2a>
	__asm volatile
 800b4f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4fc:	f383 8811 	msr	BASEPRI, r3
 800b500:	f3bf 8f6f 	isb	sy
 800b504:	f3bf 8f4f 	dsb	sy
 800b508:	60fb      	str	r3, [r7, #12]
}
 800b50a:	bf00      	nop
 800b50c:	e7fe      	b.n	800b50c <prvTaskExitError+0x28>
	__asm volatile
 800b50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b512:	f383 8811 	msr	BASEPRI, r3
 800b516:	f3bf 8f6f 	isb	sy
 800b51a:	f3bf 8f4f 	dsb	sy
 800b51e:	60bb      	str	r3, [r7, #8]
}
 800b520:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b522:	bf00      	nop
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d0fc      	beq.n	800b524 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b52a:	bf00      	nop
 800b52c:	bf00      	nop
 800b52e:	3714      	adds	r7, #20
 800b530:	46bd      	mov	sp, r7
 800b532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b536:	4770      	bx	lr
 800b538:	20000034 	.word	0x20000034
 800b53c:	00000000 	.word	0x00000000

0800b540 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b540:	4b07      	ldr	r3, [pc, #28]	; (800b560 <pxCurrentTCBConst2>)
 800b542:	6819      	ldr	r1, [r3, #0]
 800b544:	6808      	ldr	r0, [r1, #0]
 800b546:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b54a:	f380 8809 	msr	PSP, r0
 800b54e:	f3bf 8f6f 	isb	sy
 800b552:	f04f 0000 	mov.w	r0, #0
 800b556:	f380 8811 	msr	BASEPRI, r0
 800b55a:	4770      	bx	lr
 800b55c:	f3af 8000 	nop.w

0800b560 <pxCurrentTCBConst2>:
 800b560:	20000e08 	.word	0x20000e08
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b564:	bf00      	nop
 800b566:	bf00      	nop

0800b568 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b568:	4808      	ldr	r0, [pc, #32]	; (800b58c <prvPortStartFirstTask+0x24>)
 800b56a:	6800      	ldr	r0, [r0, #0]
 800b56c:	6800      	ldr	r0, [r0, #0]
 800b56e:	f380 8808 	msr	MSP, r0
 800b572:	f04f 0000 	mov.w	r0, #0
 800b576:	f380 8814 	msr	CONTROL, r0
 800b57a:	b662      	cpsie	i
 800b57c:	b661      	cpsie	f
 800b57e:	f3bf 8f4f 	dsb	sy
 800b582:	f3bf 8f6f 	isb	sy
 800b586:	df00      	svc	0
 800b588:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b58a:	bf00      	nop
 800b58c:	e000ed08 	.word	0xe000ed08

0800b590 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b086      	sub	sp, #24
 800b594:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b596:	4b46      	ldr	r3, [pc, #280]	; (800b6b0 <xPortStartScheduler+0x120>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	4a46      	ldr	r2, [pc, #280]	; (800b6b4 <xPortStartScheduler+0x124>)
 800b59c:	4293      	cmp	r3, r2
 800b59e:	d10a      	bne.n	800b5b6 <xPortStartScheduler+0x26>
	__asm volatile
 800b5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5a4:	f383 8811 	msr	BASEPRI, r3
 800b5a8:	f3bf 8f6f 	isb	sy
 800b5ac:	f3bf 8f4f 	dsb	sy
 800b5b0:	613b      	str	r3, [r7, #16]
}
 800b5b2:	bf00      	nop
 800b5b4:	e7fe      	b.n	800b5b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b5b6:	4b3e      	ldr	r3, [pc, #248]	; (800b6b0 <xPortStartScheduler+0x120>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	4a3f      	ldr	r2, [pc, #252]	; (800b6b8 <xPortStartScheduler+0x128>)
 800b5bc:	4293      	cmp	r3, r2
 800b5be:	d10a      	bne.n	800b5d6 <xPortStartScheduler+0x46>
	__asm volatile
 800b5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c4:	f383 8811 	msr	BASEPRI, r3
 800b5c8:	f3bf 8f6f 	isb	sy
 800b5cc:	f3bf 8f4f 	dsb	sy
 800b5d0:	60fb      	str	r3, [r7, #12]
}
 800b5d2:	bf00      	nop
 800b5d4:	e7fe      	b.n	800b5d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b5d6:	4b39      	ldr	r3, [pc, #228]	; (800b6bc <xPortStartScheduler+0x12c>)
 800b5d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b5da:	697b      	ldr	r3, [r7, #20]
 800b5dc:	781b      	ldrb	r3, [r3, #0]
 800b5de:	b2db      	uxtb	r3, r3
 800b5e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	22ff      	movs	r2, #255	; 0xff
 800b5e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b5e8:	697b      	ldr	r3, [r7, #20]
 800b5ea:	781b      	ldrb	r3, [r3, #0]
 800b5ec:	b2db      	uxtb	r3, r3
 800b5ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b5f0:	78fb      	ldrb	r3, [r7, #3]
 800b5f2:	b2db      	uxtb	r3, r3
 800b5f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b5f8:	b2da      	uxtb	r2, r3
 800b5fa:	4b31      	ldr	r3, [pc, #196]	; (800b6c0 <xPortStartScheduler+0x130>)
 800b5fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b5fe:	4b31      	ldr	r3, [pc, #196]	; (800b6c4 <xPortStartScheduler+0x134>)
 800b600:	2207      	movs	r2, #7
 800b602:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b604:	e009      	b.n	800b61a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b606:	4b2f      	ldr	r3, [pc, #188]	; (800b6c4 <xPortStartScheduler+0x134>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	3b01      	subs	r3, #1
 800b60c:	4a2d      	ldr	r2, [pc, #180]	; (800b6c4 <xPortStartScheduler+0x134>)
 800b60e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b610:	78fb      	ldrb	r3, [r7, #3]
 800b612:	b2db      	uxtb	r3, r3
 800b614:	005b      	lsls	r3, r3, #1
 800b616:	b2db      	uxtb	r3, r3
 800b618:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b61a:	78fb      	ldrb	r3, [r7, #3]
 800b61c:	b2db      	uxtb	r3, r3
 800b61e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b622:	2b80      	cmp	r3, #128	; 0x80
 800b624:	d0ef      	beq.n	800b606 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b626:	4b27      	ldr	r3, [pc, #156]	; (800b6c4 <xPortStartScheduler+0x134>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	f1c3 0307 	rsb	r3, r3, #7
 800b62e:	2b04      	cmp	r3, #4
 800b630:	d00a      	beq.n	800b648 <xPortStartScheduler+0xb8>
	__asm volatile
 800b632:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b636:	f383 8811 	msr	BASEPRI, r3
 800b63a:	f3bf 8f6f 	isb	sy
 800b63e:	f3bf 8f4f 	dsb	sy
 800b642:	60bb      	str	r3, [r7, #8]
}
 800b644:	bf00      	nop
 800b646:	e7fe      	b.n	800b646 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b648:	4b1e      	ldr	r3, [pc, #120]	; (800b6c4 <xPortStartScheduler+0x134>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	021b      	lsls	r3, r3, #8
 800b64e:	4a1d      	ldr	r2, [pc, #116]	; (800b6c4 <xPortStartScheduler+0x134>)
 800b650:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b652:	4b1c      	ldr	r3, [pc, #112]	; (800b6c4 <xPortStartScheduler+0x134>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b65a:	4a1a      	ldr	r2, [pc, #104]	; (800b6c4 <xPortStartScheduler+0x134>)
 800b65c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	b2da      	uxtb	r2, r3
 800b662:	697b      	ldr	r3, [r7, #20]
 800b664:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b666:	4b18      	ldr	r3, [pc, #96]	; (800b6c8 <xPortStartScheduler+0x138>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	4a17      	ldr	r2, [pc, #92]	; (800b6c8 <xPortStartScheduler+0x138>)
 800b66c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b670:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b672:	4b15      	ldr	r3, [pc, #84]	; (800b6c8 <xPortStartScheduler+0x138>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	4a14      	ldr	r2, [pc, #80]	; (800b6c8 <xPortStartScheduler+0x138>)
 800b678:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b67c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b67e:	f000 f8dd 	bl	800b83c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b682:	4b12      	ldr	r3, [pc, #72]	; (800b6cc <xPortStartScheduler+0x13c>)
 800b684:	2200      	movs	r2, #0
 800b686:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b688:	f000 f8fc 	bl	800b884 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b68c:	4b10      	ldr	r3, [pc, #64]	; (800b6d0 <xPortStartScheduler+0x140>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	4a0f      	ldr	r2, [pc, #60]	; (800b6d0 <xPortStartScheduler+0x140>)
 800b692:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b696:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b698:	f7ff ff66 	bl	800b568 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b69c:	f7fe fe8c 	bl	800a3b8 <vTaskSwitchContext>
	prvTaskExitError();
 800b6a0:	f7ff ff20 	bl	800b4e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b6a4:	2300      	movs	r3, #0
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3718      	adds	r7, #24
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}
 800b6ae:	bf00      	nop
 800b6b0:	e000ed00 	.word	0xe000ed00
 800b6b4:	410fc271 	.word	0x410fc271
 800b6b8:	410fc270 	.word	0x410fc270
 800b6bc:	e000e400 	.word	0xe000e400
 800b6c0:	20001434 	.word	0x20001434
 800b6c4:	20001438 	.word	0x20001438
 800b6c8:	e000ed20 	.word	0xe000ed20
 800b6cc:	20000034 	.word	0x20000034
 800b6d0:	e000ef34 	.word	0xe000ef34

0800b6d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	b083      	sub	sp, #12
 800b6d8:	af00      	add	r7, sp, #0
	__asm volatile
 800b6da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6de:	f383 8811 	msr	BASEPRI, r3
 800b6e2:	f3bf 8f6f 	isb	sy
 800b6e6:	f3bf 8f4f 	dsb	sy
 800b6ea:	607b      	str	r3, [r7, #4]
}
 800b6ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b6ee:	4b0f      	ldr	r3, [pc, #60]	; (800b72c <vPortEnterCritical+0x58>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	3301      	adds	r3, #1
 800b6f4:	4a0d      	ldr	r2, [pc, #52]	; (800b72c <vPortEnterCritical+0x58>)
 800b6f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b6f8:	4b0c      	ldr	r3, [pc, #48]	; (800b72c <vPortEnterCritical+0x58>)
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	2b01      	cmp	r3, #1
 800b6fe:	d10f      	bne.n	800b720 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b700:	4b0b      	ldr	r3, [pc, #44]	; (800b730 <vPortEnterCritical+0x5c>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	b2db      	uxtb	r3, r3
 800b706:	2b00      	cmp	r3, #0
 800b708:	d00a      	beq.n	800b720 <vPortEnterCritical+0x4c>
	__asm volatile
 800b70a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b70e:	f383 8811 	msr	BASEPRI, r3
 800b712:	f3bf 8f6f 	isb	sy
 800b716:	f3bf 8f4f 	dsb	sy
 800b71a:	603b      	str	r3, [r7, #0]
}
 800b71c:	bf00      	nop
 800b71e:	e7fe      	b.n	800b71e <vPortEnterCritical+0x4a>
	}
}
 800b720:	bf00      	nop
 800b722:	370c      	adds	r7, #12
 800b724:	46bd      	mov	sp, r7
 800b726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72a:	4770      	bx	lr
 800b72c:	20000034 	.word	0x20000034
 800b730:	e000ed04 	.word	0xe000ed04

0800b734 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b734:	b480      	push	{r7}
 800b736:	b083      	sub	sp, #12
 800b738:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b73a:	4b12      	ldr	r3, [pc, #72]	; (800b784 <vPortExitCritical+0x50>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d10a      	bne.n	800b758 <vPortExitCritical+0x24>
	__asm volatile
 800b742:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b746:	f383 8811 	msr	BASEPRI, r3
 800b74a:	f3bf 8f6f 	isb	sy
 800b74e:	f3bf 8f4f 	dsb	sy
 800b752:	607b      	str	r3, [r7, #4]
}
 800b754:	bf00      	nop
 800b756:	e7fe      	b.n	800b756 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b758:	4b0a      	ldr	r3, [pc, #40]	; (800b784 <vPortExitCritical+0x50>)
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	3b01      	subs	r3, #1
 800b75e:	4a09      	ldr	r2, [pc, #36]	; (800b784 <vPortExitCritical+0x50>)
 800b760:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b762:	4b08      	ldr	r3, [pc, #32]	; (800b784 <vPortExitCritical+0x50>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d105      	bne.n	800b776 <vPortExitCritical+0x42>
 800b76a:	2300      	movs	r3, #0
 800b76c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	f383 8811 	msr	BASEPRI, r3
}
 800b774:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b776:	bf00      	nop
 800b778:	370c      	adds	r7, #12
 800b77a:	46bd      	mov	sp, r7
 800b77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b780:	4770      	bx	lr
 800b782:	bf00      	nop
 800b784:	20000034 	.word	0x20000034
	...

0800b790 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b790:	f3ef 8009 	mrs	r0, PSP
 800b794:	f3bf 8f6f 	isb	sy
 800b798:	4b15      	ldr	r3, [pc, #84]	; (800b7f0 <pxCurrentTCBConst>)
 800b79a:	681a      	ldr	r2, [r3, #0]
 800b79c:	f01e 0f10 	tst.w	lr, #16
 800b7a0:	bf08      	it	eq
 800b7a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b7a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7aa:	6010      	str	r0, [r2, #0]
 800b7ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b7b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b7b4:	f380 8811 	msr	BASEPRI, r0
 800b7b8:	f3bf 8f4f 	dsb	sy
 800b7bc:	f3bf 8f6f 	isb	sy
 800b7c0:	f7fe fdfa 	bl	800a3b8 <vTaskSwitchContext>
 800b7c4:	f04f 0000 	mov.w	r0, #0
 800b7c8:	f380 8811 	msr	BASEPRI, r0
 800b7cc:	bc09      	pop	{r0, r3}
 800b7ce:	6819      	ldr	r1, [r3, #0]
 800b7d0:	6808      	ldr	r0, [r1, #0]
 800b7d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7d6:	f01e 0f10 	tst.w	lr, #16
 800b7da:	bf08      	it	eq
 800b7dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b7e0:	f380 8809 	msr	PSP, r0
 800b7e4:	f3bf 8f6f 	isb	sy
 800b7e8:	4770      	bx	lr
 800b7ea:	bf00      	nop
 800b7ec:	f3af 8000 	nop.w

0800b7f0 <pxCurrentTCBConst>:
 800b7f0:	20000e08 	.word	0x20000e08
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b7f4:	bf00      	nop
 800b7f6:	bf00      	nop

0800b7f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b082      	sub	sp, #8
 800b7fc:	af00      	add	r7, sp, #0
	__asm volatile
 800b7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b802:	f383 8811 	msr	BASEPRI, r3
 800b806:	f3bf 8f6f 	isb	sy
 800b80a:	f3bf 8f4f 	dsb	sy
 800b80e:	607b      	str	r3, [r7, #4]
}
 800b810:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b812:	f7fe fd17 	bl	800a244 <xTaskIncrementTick>
 800b816:	4603      	mov	r3, r0
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d003      	beq.n	800b824 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b81c:	4b06      	ldr	r3, [pc, #24]	; (800b838 <xPortSysTickHandler+0x40>)
 800b81e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b822:	601a      	str	r2, [r3, #0]
 800b824:	2300      	movs	r3, #0
 800b826:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	f383 8811 	msr	BASEPRI, r3
}
 800b82e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b830:	bf00      	nop
 800b832:	3708      	adds	r7, #8
 800b834:	46bd      	mov	sp, r7
 800b836:	bd80      	pop	{r7, pc}
 800b838:	e000ed04 	.word	0xe000ed04

0800b83c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b83c:	b480      	push	{r7}
 800b83e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b840:	4b0b      	ldr	r3, [pc, #44]	; (800b870 <vPortSetupTimerInterrupt+0x34>)
 800b842:	2200      	movs	r2, #0
 800b844:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b846:	4b0b      	ldr	r3, [pc, #44]	; (800b874 <vPortSetupTimerInterrupt+0x38>)
 800b848:	2200      	movs	r2, #0
 800b84a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b84c:	4b0a      	ldr	r3, [pc, #40]	; (800b878 <vPortSetupTimerInterrupt+0x3c>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	4a0a      	ldr	r2, [pc, #40]	; (800b87c <vPortSetupTimerInterrupt+0x40>)
 800b852:	fba2 2303 	umull	r2, r3, r2, r3
 800b856:	099b      	lsrs	r3, r3, #6
 800b858:	4a09      	ldr	r2, [pc, #36]	; (800b880 <vPortSetupTimerInterrupt+0x44>)
 800b85a:	3b01      	subs	r3, #1
 800b85c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b85e:	4b04      	ldr	r3, [pc, #16]	; (800b870 <vPortSetupTimerInterrupt+0x34>)
 800b860:	2207      	movs	r2, #7
 800b862:	601a      	str	r2, [r3, #0]
}
 800b864:	bf00      	nop
 800b866:	46bd      	mov	sp, r7
 800b868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86c:	4770      	bx	lr
 800b86e:	bf00      	nop
 800b870:	e000e010 	.word	0xe000e010
 800b874:	e000e018 	.word	0xe000e018
 800b878:	20000028 	.word	0x20000028
 800b87c:	10624dd3 	.word	0x10624dd3
 800b880:	e000e014 	.word	0xe000e014

0800b884 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b884:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b894 <vPortEnableVFP+0x10>
 800b888:	6801      	ldr	r1, [r0, #0]
 800b88a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b88e:	6001      	str	r1, [r0, #0]
 800b890:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b892:	bf00      	nop
 800b894:	e000ed88 	.word	0xe000ed88

0800b898 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b898:	b480      	push	{r7}
 800b89a:	b085      	sub	sp, #20
 800b89c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b89e:	f3ef 8305 	mrs	r3, IPSR
 800b8a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	2b0f      	cmp	r3, #15
 800b8a8:	d914      	bls.n	800b8d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b8aa:	4a17      	ldr	r2, [pc, #92]	; (800b908 <vPortValidateInterruptPriority+0x70>)
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	4413      	add	r3, r2
 800b8b0:	781b      	ldrb	r3, [r3, #0]
 800b8b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b8b4:	4b15      	ldr	r3, [pc, #84]	; (800b90c <vPortValidateInterruptPriority+0x74>)
 800b8b6:	781b      	ldrb	r3, [r3, #0]
 800b8b8:	7afa      	ldrb	r2, [r7, #11]
 800b8ba:	429a      	cmp	r2, r3
 800b8bc:	d20a      	bcs.n	800b8d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c2:	f383 8811 	msr	BASEPRI, r3
 800b8c6:	f3bf 8f6f 	isb	sy
 800b8ca:	f3bf 8f4f 	dsb	sy
 800b8ce:	607b      	str	r3, [r7, #4]
}
 800b8d0:	bf00      	nop
 800b8d2:	e7fe      	b.n	800b8d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b8d4:	4b0e      	ldr	r3, [pc, #56]	; (800b910 <vPortValidateInterruptPriority+0x78>)
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b8dc:	4b0d      	ldr	r3, [pc, #52]	; (800b914 <vPortValidateInterruptPriority+0x7c>)
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	429a      	cmp	r2, r3
 800b8e2:	d90a      	bls.n	800b8fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b8e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8e8:	f383 8811 	msr	BASEPRI, r3
 800b8ec:	f3bf 8f6f 	isb	sy
 800b8f0:	f3bf 8f4f 	dsb	sy
 800b8f4:	603b      	str	r3, [r7, #0]
}
 800b8f6:	bf00      	nop
 800b8f8:	e7fe      	b.n	800b8f8 <vPortValidateInterruptPriority+0x60>
	}
 800b8fa:	bf00      	nop
 800b8fc:	3714      	adds	r7, #20
 800b8fe:	46bd      	mov	sp, r7
 800b900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b904:	4770      	bx	lr
 800b906:	bf00      	nop
 800b908:	e000e3f0 	.word	0xe000e3f0
 800b90c:	20001434 	.word	0x20001434
 800b910:	e000ed0c 	.word	0xe000ed0c
 800b914:	20001438 	.word	0x20001438

0800b918 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b08a      	sub	sp, #40	; 0x28
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b920:	2300      	movs	r3, #0
 800b922:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b924:	f7fe fbd2 	bl	800a0cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b928:	4b5b      	ldr	r3, [pc, #364]	; (800ba98 <pvPortMalloc+0x180>)
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d101      	bne.n	800b934 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b930:	f000 f920 	bl	800bb74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b934:	4b59      	ldr	r3, [pc, #356]	; (800ba9c <pvPortMalloc+0x184>)
 800b936:	681a      	ldr	r2, [r3, #0]
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	4013      	ands	r3, r2
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	f040 8093 	bne.w	800ba68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d01d      	beq.n	800b984 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b948:	2208      	movs	r2, #8
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	4413      	add	r3, r2
 800b94e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f003 0307 	and.w	r3, r3, #7
 800b956:	2b00      	cmp	r3, #0
 800b958:	d014      	beq.n	800b984 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f023 0307 	bic.w	r3, r3, #7
 800b960:	3308      	adds	r3, #8
 800b962:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f003 0307 	and.w	r3, r3, #7
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d00a      	beq.n	800b984 <pvPortMalloc+0x6c>
	__asm volatile
 800b96e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b972:	f383 8811 	msr	BASEPRI, r3
 800b976:	f3bf 8f6f 	isb	sy
 800b97a:	f3bf 8f4f 	dsb	sy
 800b97e:	617b      	str	r3, [r7, #20]
}
 800b980:	bf00      	nop
 800b982:	e7fe      	b.n	800b982 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d06e      	beq.n	800ba68 <pvPortMalloc+0x150>
 800b98a:	4b45      	ldr	r3, [pc, #276]	; (800baa0 <pvPortMalloc+0x188>)
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	687a      	ldr	r2, [r7, #4]
 800b990:	429a      	cmp	r2, r3
 800b992:	d869      	bhi.n	800ba68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b994:	4b43      	ldr	r3, [pc, #268]	; (800baa4 <pvPortMalloc+0x18c>)
 800b996:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b998:	4b42      	ldr	r3, [pc, #264]	; (800baa4 <pvPortMalloc+0x18c>)
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b99e:	e004      	b.n	800b9aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ac:	685b      	ldr	r3, [r3, #4]
 800b9ae:	687a      	ldr	r2, [r7, #4]
 800b9b0:	429a      	cmp	r2, r3
 800b9b2:	d903      	bls.n	800b9bc <pvPortMalloc+0xa4>
 800b9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d1f1      	bne.n	800b9a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b9bc:	4b36      	ldr	r3, [pc, #216]	; (800ba98 <pvPortMalloc+0x180>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9c2:	429a      	cmp	r2, r3
 800b9c4:	d050      	beq.n	800ba68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b9c6:	6a3b      	ldr	r3, [r7, #32]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	2208      	movs	r2, #8
 800b9cc:	4413      	add	r3, r2
 800b9ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9d2:	681a      	ldr	r2, [r3, #0]
 800b9d4:	6a3b      	ldr	r3, [r7, #32]
 800b9d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9da:	685a      	ldr	r2, [r3, #4]
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	1ad2      	subs	r2, r2, r3
 800b9e0:	2308      	movs	r3, #8
 800b9e2:	005b      	lsls	r3, r3, #1
 800b9e4:	429a      	cmp	r2, r3
 800b9e6:	d91f      	bls.n	800ba28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b9e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	4413      	add	r3, r2
 800b9ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b9f0:	69bb      	ldr	r3, [r7, #24]
 800b9f2:	f003 0307 	and.w	r3, r3, #7
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d00a      	beq.n	800ba10 <pvPortMalloc+0xf8>
	__asm volatile
 800b9fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9fe:	f383 8811 	msr	BASEPRI, r3
 800ba02:	f3bf 8f6f 	isb	sy
 800ba06:	f3bf 8f4f 	dsb	sy
 800ba0a:	613b      	str	r3, [r7, #16]
}
 800ba0c:	bf00      	nop
 800ba0e:	e7fe      	b.n	800ba0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ba10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba12:	685a      	ldr	r2, [r3, #4]
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	1ad2      	subs	r2, r2, r3
 800ba18:	69bb      	ldr	r3, [r7, #24]
 800ba1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ba1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba1e:	687a      	ldr	r2, [r7, #4]
 800ba20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ba22:	69b8      	ldr	r0, [r7, #24]
 800ba24:	f000 f908 	bl	800bc38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ba28:	4b1d      	ldr	r3, [pc, #116]	; (800baa0 <pvPortMalloc+0x188>)
 800ba2a:	681a      	ldr	r2, [r3, #0]
 800ba2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba2e:	685b      	ldr	r3, [r3, #4]
 800ba30:	1ad3      	subs	r3, r2, r3
 800ba32:	4a1b      	ldr	r2, [pc, #108]	; (800baa0 <pvPortMalloc+0x188>)
 800ba34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ba36:	4b1a      	ldr	r3, [pc, #104]	; (800baa0 <pvPortMalloc+0x188>)
 800ba38:	681a      	ldr	r2, [r3, #0]
 800ba3a:	4b1b      	ldr	r3, [pc, #108]	; (800baa8 <pvPortMalloc+0x190>)
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	429a      	cmp	r2, r3
 800ba40:	d203      	bcs.n	800ba4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ba42:	4b17      	ldr	r3, [pc, #92]	; (800baa0 <pvPortMalloc+0x188>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	4a18      	ldr	r2, [pc, #96]	; (800baa8 <pvPortMalloc+0x190>)
 800ba48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ba4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba4c:	685a      	ldr	r2, [r3, #4]
 800ba4e:	4b13      	ldr	r3, [pc, #76]	; (800ba9c <pvPortMalloc+0x184>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	431a      	orrs	r2, r3
 800ba54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ba58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ba5e:	4b13      	ldr	r3, [pc, #76]	; (800baac <pvPortMalloc+0x194>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	3301      	adds	r3, #1
 800ba64:	4a11      	ldr	r2, [pc, #68]	; (800baac <pvPortMalloc+0x194>)
 800ba66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ba68:	f7fe fb3e 	bl	800a0e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba6c:	69fb      	ldr	r3, [r7, #28]
 800ba6e:	f003 0307 	and.w	r3, r3, #7
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d00a      	beq.n	800ba8c <pvPortMalloc+0x174>
	__asm volatile
 800ba76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba7a:	f383 8811 	msr	BASEPRI, r3
 800ba7e:	f3bf 8f6f 	isb	sy
 800ba82:	f3bf 8f4f 	dsb	sy
 800ba86:	60fb      	str	r3, [r7, #12]
}
 800ba88:	bf00      	nop
 800ba8a:	e7fe      	b.n	800ba8a <pvPortMalloc+0x172>
	return pvReturn;
 800ba8c:	69fb      	ldr	r3, [r7, #28]
}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	3728      	adds	r7, #40	; 0x28
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd80      	pop	{r7, pc}
 800ba96:	bf00      	nop
 800ba98:	20005044 	.word	0x20005044
 800ba9c:	20005058 	.word	0x20005058
 800baa0:	20005048 	.word	0x20005048
 800baa4:	2000503c 	.word	0x2000503c
 800baa8:	2000504c 	.word	0x2000504c
 800baac:	20005050 	.word	0x20005050

0800bab0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b086      	sub	sp, #24
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d04d      	beq.n	800bb5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bac2:	2308      	movs	r3, #8
 800bac4:	425b      	negs	r3, r3
 800bac6:	697a      	ldr	r2, [r7, #20]
 800bac8:	4413      	add	r3, r2
 800baca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bacc:	697b      	ldr	r3, [r7, #20]
 800bace:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bad0:	693b      	ldr	r3, [r7, #16]
 800bad2:	685a      	ldr	r2, [r3, #4]
 800bad4:	4b24      	ldr	r3, [pc, #144]	; (800bb68 <vPortFree+0xb8>)
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	4013      	ands	r3, r2
 800bada:	2b00      	cmp	r3, #0
 800badc:	d10a      	bne.n	800baf4 <vPortFree+0x44>
	__asm volatile
 800bade:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bae2:	f383 8811 	msr	BASEPRI, r3
 800bae6:	f3bf 8f6f 	isb	sy
 800baea:	f3bf 8f4f 	dsb	sy
 800baee:	60fb      	str	r3, [r7, #12]
}
 800baf0:	bf00      	nop
 800baf2:	e7fe      	b.n	800baf2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800baf4:	693b      	ldr	r3, [r7, #16]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d00a      	beq.n	800bb12 <vPortFree+0x62>
	__asm volatile
 800bafc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb00:	f383 8811 	msr	BASEPRI, r3
 800bb04:	f3bf 8f6f 	isb	sy
 800bb08:	f3bf 8f4f 	dsb	sy
 800bb0c:	60bb      	str	r3, [r7, #8]
}
 800bb0e:	bf00      	nop
 800bb10:	e7fe      	b.n	800bb10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bb12:	693b      	ldr	r3, [r7, #16]
 800bb14:	685a      	ldr	r2, [r3, #4]
 800bb16:	4b14      	ldr	r3, [pc, #80]	; (800bb68 <vPortFree+0xb8>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	4013      	ands	r3, r2
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d01e      	beq.n	800bb5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bb20:	693b      	ldr	r3, [r7, #16]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d11a      	bne.n	800bb5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bb28:	693b      	ldr	r3, [r7, #16]
 800bb2a:	685a      	ldr	r2, [r3, #4]
 800bb2c:	4b0e      	ldr	r3, [pc, #56]	; (800bb68 <vPortFree+0xb8>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	43db      	mvns	r3, r3
 800bb32:	401a      	ands	r2, r3
 800bb34:	693b      	ldr	r3, [r7, #16]
 800bb36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bb38:	f7fe fac8 	bl	800a0cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bb3c:	693b      	ldr	r3, [r7, #16]
 800bb3e:	685a      	ldr	r2, [r3, #4]
 800bb40:	4b0a      	ldr	r3, [pc, #40]	; (800bb6c <vPortFree+0xbc>)
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	4413      	add	r3, r2
 800bb46:	4a09      	ldr	r2, [pc, #36]	; (800bb6c <vPortFree+0xbc>)
 800bb48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bb4a:	6938      	ldr	r0, [r7, #16]
 800bb4c:	f000 f874 	bl	800bc38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bb50:	4b07      	ldr	r3, [pc, #28]	; (800bb70 <vPortFree+0xc0>)
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	3301      	adds	r3, #1
 800bb56:	4a06      	ldr	r2, [pc, #24]	; (800bb70 <vPortFree+0xc0>)
 800bb58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bb5a:	f7fe fac5 	bl	800a0e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bb5e:	bf00      	nop
 800bb60:	3718      	adds	r7, #24
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}
 800bb66:	bf00      	nop
 800bb68:	20005058 	.word	0x20005058
 800bb6c:	20005048 	.word	0x20005048
 800bb70:	20005054 	.word	0x20005054

0800bb74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bb74:	b480      	push	{r7}
 800bb76:	b085      	sub	sp, #20
 800bb78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bb7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800bb7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bb80:	4b27      	ldr	r3, [pc, #156]	; (800bc20 <prvHeapInit+0xac>)
 800bb82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	f003 0307 	and.w	r3, r3, #7
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d00c      	beq.n	800bba8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	3307      	adds	r3, #7
 800bb92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	f023 0307 	bic.w	r3, r3, #7
 800bb9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bb9c:	68ba      	ldr	r2, [r7, #8]
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	1ad3      	subs	r3, r2, r3
 800bba2:	4a1f      	ldr	r2, [pc, #124]	; (800bc20 <prvHeapInit+0xac>)
 800bba4:	4413      	add	r3, r2
 800bba6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bbac:	4a1d      	ldr	r2, [pc, #116]	; (800bc24 <prvHeapInit+0xb0>)
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bbb2:	4b1c      	ldr	r3, [pc, #112]	; (800bc24 <prvHeapInit+0xb0>)
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	68ba      	ldr	r2, [r7, #8]
 800bbbc:	4413      	add	r3, r2
 800bbbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bbc0:	2208      	movs	r2, #8
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	1a9b      	subs	r3, r3, r2
 800bbc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	f023 0307 	bic.w	r3, r3, #7
 800bbce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	4a15      	ldr	r2, [pc, #84]	; (800bc28 <prvHeapInit+0xb4>)
 800bbd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bbd6:	4b14      	ldr	r3, [pc, #80]	; (800bc28 <prvHeapInit+0xb4>)
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bbde:	4b12      	ldr	r3, [pc, #72]	; (800bc28 <prvHeapInit+0xb4>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	68fa      	ldr	r2, [r7, #12]
 800bbee:	1ad2      	subs	r2, r2, r3
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bbf4:	4b0c      	ldr	r3, [pc, #48]	; (800bc28 <prvHeapInit+0xb4>)
 800bbf6:	681a      	ldr	r2, [r3, #0]
 800bbf8:	683b      	ldr	r3, [r7, #0]
 800bbfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	685b      	ldr	r3, [r3, #4]
 800bc00:	4a0a      	ldr	r2, [pc, #40]	; (800bc2c <prvHeapInit+0xb8>)
 800bc02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	685b      	ldr	r3, [r3, #4]
 800bc08:	4a09      	ldr	r2, [pc, #36]	; (800bc30 <prvHeapInit+0xbc>)
 800bc0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bc0c:	4b09      	ldr	r3, [pc, #36]	; (800bc34 <prvHeapInit+0xc0>)
 800bc0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bc12:	601a      	str	r2, [r3, #0]
}
 800bc14:	bf00      	nop
 800bc16:	3714      	adds	r7, #20
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1e:	4770      	bx	lr
 800bc20:	2000143c 	.word	0x2000143c
 800bc24:	2000503c 	.word	0x2000503c
 800bc28:	20005044 	.word	0x20005044
 800bc2c:	2000504c 	.word	0x2000504c
 800bc30:	20005048 	.word	0x20005048
 800bc34:	20005058 	.word	0x20005058

0800bc38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bc38:	b480      	push	{r7}
 800bc3a:	b085      	sub	sp, #20
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bc40:	4b28      	ldr	r3, [pc, #160]	; (800bce4 <prvInsertBlockIntoFreeList+0xac>)
 800bc42:	60fb      	str	r3, [r7, #12]
 800bc44:	e002      	b.n	800bc4c <prvInsertBlockIntoFreeList+0x14>
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	60fb      	str	r3, [r7, #12]
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	687a      	ldr	r2, [r7, #4]
 800bc52:	429a      	cmp	r2, r3
 800bc54:	d8f7      	bhi.n	800bc46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	685b      	ldr	r3, [r3, #4]
 800bc5e:	68ba      	ldr	r2, [r7, #8]
 800bc60:	4413      	add	r3, r2
 800bc62:	687a      	ldr	r2, [r7, #4]
 800bc64:	429a      	cmp	r2, r3
 800bc66:	d108      	bne.n	800bc7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	685a      	ldr	r2, [r3, #4]
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	685b      	ldr	r3, [r3, #4]
 800bc70:	441a      	add	r2, r3
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	685b      	ldr	r3, [r3, #4]
 800bc82:	68ba      	ldr	r2, [r7, #8]
 800bc84:	441a      	add	r2, r3
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	429a      	cmp	r2, r3
 800bc8c:	d118      	bne.n	800bcc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	681a      	ldr	r2, [r3, #0]
 800bc92:	4b15      	ldr	r3, [pc, #84]	; (800bce8 <prvInsertBlockIntoFreeList+0xb0>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	429a      	cmp	r2, r3
 800bc98:	d00d      	beq.n	800bcb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	685a      	ldr	r2, [r3, #4]
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	685b      	ldr	r3, [r3, #4]
 800bca4:	441a      	add	r2, r3
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	681a      	ldr	r2, [r3, #0]
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	601a      	str	r2, [r3, #0]
 800bcb4:	e008      	b.n	800bcc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bcb6:	4b0c      	ldr	r3, [pc, #48]	; (800bce8 <prvInsertBlockIntoFreeList+0xb0>)
 800bcb8:	681a      	ldr	r2, [r3, #0]
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	601a      	str	r2, [r3, #0]
 800bcbe:	e003      	b.n	800bcc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	681a      	ldr	r2, [r3, #0]
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bcc8:	68fa      	ldr	r2, [r7, #12]
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	429a      	cmp	r2, r3
 800bcce:	d002      	beq.n	800bcd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	687a      	ldr	r2, [r7, #4]
 800bcd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bcd6:	bf00      	nop
 800bcd8:	3714      	adds	r7, #20
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce0:	4770      	bx	lr
 800bce2:	bf00      	nop
 800bce4:	2000503c 	.word	0x2000503c
 800bce8:	20005044 	.word	0x20005044

0800bcec <__errno>:
 800bcec:	4b01      	ldr	r3, [pc, #4]	; (800bcf4 <__errno+0x8>)
 800bcee:	6818      	ldr	r0, [r3, #0]
 800bcf0:	4770      	bx	lr
 800bcf2:	bf00      	nop
 800bcf4:	20000038 	.word	0x20000038

0800bcf8 <__libc_init_array>:
 800bcf8:	b570      	push	{r4, r5, r6, lr}
 800bcfa:	4d0d      	ldr	r5, [pc, #52]	; (800bd30 <__libc_init_array+0x38>)
 800bcfc:	4c0d      	ldr	r4, [pc, #52]	; (800bd34 <__libc_init_array+0x3c>)
 800bcfe:	1b64      	subs	r4, r4, r5
 800bd00:	10a4      	asrs	r4, r4, #2
 800bd02:	2600      	movs	r6, #0
 800bd04:	42a6      	cmp	r6, r4
 800bd06:	d109      	bne.n	800bd1c <__libc_init_array+0x24>
 800bd08:	4d0b      	ldr	r5, [pc, #44]	; (800bd38 <__libc_init_array+0x40>)
 800bd0a:	4c0c      	ldr	r4, [pc, #48]	; (800bd3c <__libc_init_array+0x44>)
 800bd0c:	f001 f97e 	bl	800d00c <_init>
 800bd10:	1b64      	subs	r4, r4, r5
 800bd12:	10a4      	asrs	r4, r4, #2
 800bd14:	2600      	movs	r6, #0
 800bd16:	42a6      	cmp	r6, r4
 800bd18:	d105      	bne.n	800bd26 <__libc_init_array+0x2e>
 800bd1a:	bd70      	pop	{r4, r5, r6, pc}
 800bd1c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd20:	4798      	blx	r3
 800bd22:	3601      	adds	r6, #1
 800bd24:	e7ee      	b.n	800bd04 <__libc_init_array+0xc>
 800bd26:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd2a:	4798      	blx	r3
 800bd2c:	3601      	adds	r6, #1
 800bd2e:	e7f2      	b.n	800bd16 <__libc_init_array+0x1e>
 800bd30:	0800de2c 	.word	0x0800de2c
 800bd34:	0800de2c 	.word	0x0800de2c
 800bd38:	0800de2c 	.word	0x0800de2c
 800bd3c:	0800de30 	.word	0x0800de30

0800bd40 <memcpy>:
 800bd40:	440a      	add	r2, r1
 800bd42:	4291      	cmp	r1, r2
 800bd44:	f100 33ff 	add.w	r3, r0, #4294967295
 800bd48:	d100      	bne.n	800bd4c <memcpy+0xc>
 800bd4a:	4770      	bx	lr
 800bd4c:	b510      	push	{r4, lr}
 800bd4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd52:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd56:	4291      	cmp	r1, r2
 800bd58:	d1f9      	bne.n	800bd4e <memcpy+0xe>
 800bd5a:	bd10      	pop	{r4, pc}

0800bd5c <memset>:
 800bd5c:	4402      	add	r2, r0
 800bd5e:	4603      	mov	r3, r0
 800bd60:	4293      	cmp	r3, r2
 800bd62:	d100      	bne.n	800bd66 <memset+0xa>
 800bd64:	4770      	bx	lr
 800bd66:	f803 1b01 	strb.w	r1, [r3], #1
 800bd6a:	e7f9      	b.n	800bd60 <memset+0x4>

0800bd6c <sniprintf>:
 800bd6c:	b40c      	push	{r2, r3}
 800bd6e:	b530      	push	{r4, r5, lr}
 800bd70:	4b17      	ldr	r3, [pc, #92]	; (800bdd0 <sniprintf+0x64>)
 800bd72:	1e0c      	subs	r4, r1, #0
 800bd74:	681d      	ldr	r5, [r3, #0]
 800bd76:	b09d      	sub	sp, #116	; 0x74
 800bd78:	da08      	bge.n	800bd8c <sniprintf+0x20>
 800bd7a:	238b      	movs	r3, #139	; 0x8b
 800bd7c:	602b      	str	r3, [r5, #0]
 800bd7e:	f04f 30ff 	mov.w	r0, #4294967295
 800bd82:	b01d      	add	sp, #116	; 0x74
 800bd84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bd88:	b002      	add	sp, #8
 800bd8a:	4770      	bx	lr
 800bd8c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800bd90:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bd94:	bf14      	ite	ne
 800bd96:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bd9a:	4623      	moveq	r3, r4
 800bd9c:	9304      	str	r3, [sp, #16]
 800bd9e:	9307      	str	r3, [sp, #28]
 800bda0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bda4:	9002      	str	r0, [sp, #8]
 800bda6:	9006      	str	r0, [sp, #24]
 800bda8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bdac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bdae:	ab21      	add	r3, sp, #132	; 0x84
 800bdb0:	a902      	add	r1, sp, #8
 800bdb2:	4628      	mov	r0, r5
 800bdb4:	9301      	str	r3, [sp, #4]
 800bdb6:	f000 f8b7 	bl	800bf28 <_svfiprintf_r>
 800bdba:	1c43      	adds	r3, r0, #1
 800bdbc:	bfbc      	itt	lt
 800bdbe:	238b      	movlt	r3, #139	; 0x8b
 800bdc0:	602b      	strlt	r3, [r5, #0]
 800bdc2:	2c00      	cmp	r4, #0
 800bdc4:	d0dd      	beq.n	800bd82 <sniprintf+0x16>
 800bdc6:	9b02      	ldr	r3, [sp, #8]
 800bdc8:	2200      	movs	r2, #0
 800bdca:	701a      	strb	r2, [r3, #0]
 800bdcc:	e7d9      	b.n	800bd82 <sniprintf+0x16>
 800bdce:	bf00      	nop
 800bdd0:	20000038 	.word	0x20000038

0800bdd4 <siprintf>:
 800bdd4:	b40e      	push	{r1, r2, r3}
 800bdd6:	b500      	push	{lr}
 800bdd8:	b09c      	sub	sp, #112	; 0x70
 800bdda:	ab1d      	add	r3, sp, #116	; 0x74
 800bddc:	9002      	str	r0, [sp, #8]
 800bdde:	9006      	str	r0, [sp, #24]
 800bde0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bde4:	4809      	ldr	r0, [pc, #36]	; (800be0c <siprintf+0x38>)
 800bde6:	9107      	str	r1, [sp, #28]
 800bde8:	9104      	str	r1, [sp, #16]
 800bdea:	4909      	ldr	r1, [pc, #36]	; (800be10 <siprintf+0x3c>)
 800bdec:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdf0:	9105      	str	r1, [sp, #20]
 800bdf2:	6800      	ldr	r0, [r0, #0]
 800bdf4:	9301      	str	r3, [sp, #4]
 800bdf6:	a902      	add	r1, sp, #8
 800bdf8:	f000 f896 	bl	800bf28 <_svfiprintf_r>
 800bdfc:	9b02      	ldr	r3, [sp, #8]
 800bdfe:	2200      	movs	r2, #0
 800be00:	701a      	strb	r2, [r3, #0]
 800be02:	b01c      	add	sp, #112	; 0x70
 800be04:	f85d eb04 	ldr.w	lr, [sp], #4
 800be08:	b003      	add	sp, #12
 800be0a:	4770      	bx	lr
 800be0c:	20000038 	.word	0x20000038
 800be10:	ffff0208 	.word	0xffff0208

0800be14 <siscanf>:
 800be14:	b40e      	push	{r1, r2, r3}
 800be16:	b510      	push	{r4, lr}
 800be18:	b09f      	sub	sp, #124	; 0x7c
 800be1a:	ac21      	add	r4, sp, #132	; 0x84
 800be1c:	f44f 7101 	mov.w	r1, #516	; 0x204
 800be20:	f854 2b04 	ldr.w	r2, [r4], #4
 800be24:	9201      	str	r2, [sp, #4]
 800be26:	f8ad 101c 	strh.w	r1, [sp, #28]
 800be2a:	9004      	str	r0, [sp, #16]
 800be2c:	9008      	str	r0, [sp, #32]
 800be2e:	f7f4 f9ef 	bl	8000210 <strlen>
 800be32:	4b0c      	ldr	r3, [pc, #48]	; (800be64 <siscanf+0x50>)
 800be34:	9005      	str	r0, [sp, #20]
 800be36:	9009      	str	r0, [sp, #36]	; 0x24
 800be38:	930d      	str	r3, [sp, #52]	; 0x34
 800be3a:	480b      	ldr	r0, [pc, #44]	; (800be68 <siscanf+0x54>)
 800be3c:	9a01      	ldr	r2, [sp, #4]
 800be3e:	6800      	ldr	r0, [r0, #0]
 800be40:	9403      	str	r4, [sp, #12]
 800be42:	2300      	movs	r3, #0
 800be44:	9311      	str	r3, [sp, #68]	; 0x44
 800be46:	9316      	str	r3, [sp, #88]	; 0x58
 800be48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800be4c:	f8ad 301e 	strh.w	r3, [sp, #30]
 800be50:	a904      	add	r1, sp, #16
 800be52:	4623      	mov	r3, r4
 800be54:	f000 f9c2 	bl	800c1dc <__ssvfiscanf_r>
 800be58:	b01f      	add	sp, #124	; 0x7c
 800be5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be5e:	b003      	add	sp, #12
 800be60:	4770      	bx	lr
 800be62:	bf00      	nop
 800be64:	0800be6d 	.word	0x0800be6d
 800be68:	20000038 	.word	0x20000038

0800be6c <__seofread>:
 800be6c:	2000      	movs	r0, #0
 800be6e:	4770      	bx	lr

0800be70 <__ssputs_r>:
 800be70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be74:	688e      	ldr	r6, [r1, #8]
 800be76:	429e      	cmp	r6, r3
 800be78:	4682      	mov	sl, r0
 800be7a:	460c      	mov	r4, r1
 800be7c:	4690      	mov	r8, r2
 800be7e:	461f      	mov	r7, r3
 800be80:	d838      	bhi.n	800bef4 <__ssputs_r+0x84>
 800be82:	898a      	ldrh	r2, [r1, #12]
 800be84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800be88:	d032      	beq.n	800bef0 <__ssputs_r+0x80>
 800be8a:	6825      	ldr	r5, [r4, #0]
 800be8c:	6909      	ldr	r1, [r1, #16]
 800be8e:	eba5 0901 	sub.w	r9, r5, r1
 800be92:	6965      	ldr	r5, [r4, #20]
 800be94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800be98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800be9c:	3301      	adds	r3, #1
 800be9e:	444b      	add	r3, r9
 800bea0:	106d      	asrs	r5, r5, #1
 800bea2:	429d      	cmp	r5, r3
 800bea4:	bf38      	it	cc
 800bea6:	461d      	movcc	r5, r3
 800bea8:	0553      	lsls	r3, r2, #21
 800beaa:	d531      	bpl.n	800bf10 <__ssputs_r+0xa0>
 800beac:	4629      	mov	r1, r5
 800beae:	f000 ffe5 	bl	800ce7c <_malloc_r>
 800beb2:	4606      	mov	r6, r0
 800beb4:	b950      	cbnz	r0, 800becc <__ssputs_r+0x5c>
 800beb6:	230c      	movs	r3, #12
 800beb8:	f8ca 3000 	str.w	r3, [sl]
 800bebc:	89a3      	ldrh	r3, [r4, #12]
 800bebe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bec2:	81a3      	strh	r3, [r4, #12]
 800bec4:	f04f 30ff 	mov.w	r0, #4294967295
 800bec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800becc:	6921      	ldr	r1, [r4, #16]
 800bece:	464a      	mov	r2, r9
 800bed0:	f7ff ff36 	bl	800bd40 <memcpy>
 800bed4:	89a3      	ldrh	r3, [r4, #12]
 800bed6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800beda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bede:	81a3      	strh	r3, [r4, #12]
 800bee0:	6126      	str	r6, [r4, #16]
 800bee2:	6165      	str	r5, [r4, #20]
 800bee4:	444e      	add	r6, r9
 800bee6:	eba5 0509 	sub.w	r5, r5, r9
 800beea:	6026      	str	r6, [r4, #0]
 800beec:	60a5      	str	r5, [r4, #8]
 800beee:	463e      	mov	r6, r7
 800bef0:	42be      	cmp	r6, r7
 800bef2:	d900      	bls.n	800bef6 <__ssputs_r+0x86>
 800bef4:	463e      	mov	r6, r7
 800bef6:	6820      	ldr	r0, [r4, #0]
 800bef8:	4632      	mov	r2, r6
 800befa:	4641      	mov	r1, r8
 800befc:	f000 ff38 	bl	800cd70 <memmove>
 800bf00:	68a3      	ldr	r3, [r4, #8]
 800bf02:	1b9b      	subs	r3, r3, r6
 800bf04:	60a3      	str	r3, [r4, #8]
 800bf06:	6823      	ldr	r3, [r4, #0]
 800bf08:	4433      	add	r3, r6
 800bf0a:	6023      	str	r3, [r4, #0]
 800bf0c:	2000      	movs	r0, #0
 800bf0e:	e7db      	b.n	800bec8 <__ssputs_r+0x58>
 800bf10:	462a      	mov	r2, r5
 800bf12:	f001 f827 	bl	800cf64 <_realloc_r>
 800bf16:	4606      	mov	r6, r0
 800bf18:	2800      	cmp	r0, #0
 800bf1a:	d1e1      	bne.n	800bee0 <__ssputs_r+0x70>
 800bf1c:	6921      	ldr	r1, [r4, #16]
 800bf1e:	4650      	mov	r0, sl
 800bf20:	f000 ff40 	bl	800cda4 <_free_r>
 800bf24:	e7c7      	b.n	800beb6 <__ssputs_r+0x46>
	...

0800bf28 <_svfiprintf_r>:
 800bf28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf2c:	4698      	mov	r8, r3
 800bf2e:	898b      	ldrh	r3, [r1, #12]
 800bf30:	061b      	lsls	r3, r3, #24
 800bf32:	b09d      	sub	sp, #116	; 0x74
 800bf34:	4607      	mov	r7, r0
 800bf36:	460d      	mov	r5, r1
 800bf38:	4614      	mov	r4, r2
 800bf3a:	d50e      	bpl.n	800bf5a <_svfiprintf_r+0x32>
 800bf3c:	690b      	ldr	r3, [r1, #16]
 800bf3e:	b963      	cbnz	r3, 800bf5a <_svfiprintf_r+0x32>
 800bf40:	2140      	movs	r1, #64	; 0x40
 800bf42:	f000 ff9b 	bl	800ce7c <_malloc_r>
 800bf46:	6028      	str	r0, [r5, #0]
 800bf48:	6128      	str	r0, [r5, #16]
 800bf4a:	b920      	cbnz	r0, 800bf56 <_svfiprintf_r+0x2e>
 800bf4c:	230c      	movs	r3, #12
 800bf4e:	603b      	str	r3, [r7, #0]
 800bf50:	f04f 30ff 	mov.w	r0, #4294967295
 800bf54:	e0d1      	b.n	800c0fa <_svfiprintf_r+0x1d2>
 800bf56:	2340      	movs	r3, #64	; 0x40
 800bf58:	616b      	str	r3, [r5, #20]
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	9309      	str	r3, [sp, #36]	; 0x24
 800bf5e:	2320      	movs	r3, #32
 800bf60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bf64:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf68:	2330      	movs	r3, #48	; 0x30
 800bf6a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c114 <_svfiprintf_r+0x1ec>
 800bf6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bf72:	f04f 0901 	mov.w	r9, #1
 800bf76:	4623      	mov	r3, r4
 800bf78:	469a      	mov	sl, r3
 800bf7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf7e:	b10a      	cbz	r2, 800bf84 <_svfiprintf_r+0x5c>
 800bf80:	2a25      	cmp	r2, #37	; 0x25
 800bf82:	d1f9      	bne.n	800bf78 <_svfiprintf_r+0x50>
 800bf84:	ebba 0b04 	subs.w	fp, sl, r4
 800bf88:	d00b      	beq.n	800bfa2 <_svfiprintf_r+0x7a>
 800bf8a:	465b      	mov	r3, fp
 800bf8c:	4622      	mov	r2, r4
 800bf8e:	4629      	mov	r1, r5
 800bf90:	4638      	mov	r0, r7
 800bf92:	f7ff ff6d 	bl	800be70 <__ssputs_r>
 800bf96:	3001      	adds	r0, #1
 800bf98:	f000 80aa 	beq.w	800c0f0 <_svfiprintf_r+0x1c8>
 800bf9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf9e:	445a      	add	r2, fp
 800bfa0:	9209      	str	r2, [sp, #36]	; 0x24
 800bfa2:	f89a 3000 	ldrb.w	r3, [sl]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	f000 80a2 	beq.w	800c0f0 <_svfiprintf_r+0x1c8>
 800bfac:	2300      	movs	r3, #0
 800bfae:	f04f 32ff 	mov.w	r2, #4294967295
 800bfb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bfb6:	f10a 0a01 	add.w	sl, sl, #1
 800bfba:	9304      	str	r3, [sp, #16]
 800bfbc:	9307      	str	r3, [sp, #28]
 800bfbe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bfc2:	931a      	str	r3, [sp, #104]	; 0x68
 800bfc4:	4654      	mov	r4, sl
 800bfc6:	2205      	movs	r2, #5
 800bfc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfcc:	4851      	ldr	r0, [pc, #324]	; (800c114 <_svfiprintf_r+0x1ec>)
 800bfce:	f7f4 f927 	bl	8000220 <memchr>
 800bfd2:	9a04      	ldr	r2, [sp, #16]
 800bfd4:	b9d8      	cbnz	r0, 800c00e <_svfiprintf_r+0xe6>
 800bfd6:	06d0      	lsls	r0, r2, #27
 800bfd8:	bf44      	itt	mi
 800bfda:	2320      	movmi	r3, #32
 800bfdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bfe0:	0711      	lsls	r1, r2, #28
 800bfe2:	bf44      	itt	mi
 800bfe4:	232b      	movmi	r3, #43	; 0x2b
 800bfe6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bfea:	f89a 3000 	ldrb.w	r3, [sl]
 800bfee:	2b2a      	cmp	r3, #42	; 0x2a
 800bff0:	d015      	beq.n	800c01e <_svfiprintf_r+0xf6>
 800bff2:	9a07      	ldr	r2, [sp, #28]
 800bff4:	4654      	mov	r4, sl
 800bff6:	2000      	movs	r0, #0
 800bff8:	f04f 0c0a 	mov.w	ip, #10
 800bffc:	4621      	mov	r1, r4
 800bffe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c002:	3b30      	subs	r3, #48	; 0x30
 800c004:	2b09      	cmp	r3, #9
 800c006:	d94e      	bls.n	800c0a6 <_svfiprintf_r+0x17e>
 800c008:	b1b0      	cbz	r0, 800c038 <_svfiprintf_r+0x110>
 800c00a:	9207      	str	r2, [sp, #28]
 800c00c:	e014      	b.n	800c038 <_svfiprintf_r+0x110>
 800c00e:	eba0 0308 	sub.w	r3, r0, r8
 800c012:	fa09 f303 	lsl.w	r3, r9, r3
 800c016:	4313      	orrs	r3, r2
 800c018:	9304      	str	r3, [sp, #16]
 800c01a:	46a2      	mov	sl, r4
 800c01c:	e7d2      	b.n	800bfc4 <_svfiprintf_r+0x9c>
 800c01e:	9b03      	ldr	r3, [sp, #12]
 800c020:	1d19      	adds	r1, r3, #4
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	9103      	str	r1, [sp, #12]
 800c026:	2b00      	cmp	r3, #0
 800c028:	bfbb      	ittet	lt
 800c02a:	425b      	neglt	r3, r3
 800c02c:	f042 0202 	orrlt.w	r2, r2, #2
 800c030:	9307      	strge	r3, [sp, #28]
 800c032:	9307      	strlt	r3, [sp, #28]
 800c034:	bfb8      	it	lt
 800c036:	9204      	strlt	r2, [sp, #16]
 800c038:	7823      	ldrb	r3, [r4, #0]
 800c03a:	2b2e      	cmp	r3, #46	; 0x2e
 800c03c:	d10c      	bne.n	800c058 <_svfiprintf_r+0x130>
 800c03e:	7863      	ldrb	r3, [r4, #1]
 800c040:	2b2a      	cmp	r3, #42	; 0x2a
 800c042:	d135      	bne.n	800c0b0 <_svfiprintf_r+0x188>
 800c044:	9b03      	ldr	r3, [sp, #12]
 800c046:	1d1a      	adds	r2, r3, #4
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	9203      	str	r2, [sp, #12]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	bfb8      	it	lt
 800c050:	f04f 33ff 	movlt.w	r3, #4294967295
 800c054:	3402      	adds	r4, #2
 800c056:	9305      	str	r3, [sp, #20]
 800c058:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c124 <_svfiprintf_r+0x1fc>
 800c05c:	7821      	ldrb	r1, [r4, #0]
 800c05e:	2203      	movs	r2, #3
 800c060:	4650      	mov	r0, sl
 800c062:	f7f4 f8dd 	bl	8000220 <memchr>
 800c066:	b140      	cbz	r0, 800c07a <_svfiprintf_r+0x152>
 800c068:	2340      	movs	r3, #64	; 0x40
 800c06a:	eba0 000a 	sub.w	r0, r0, sl
 800c06e:	fa03 f000 	lsl.w	r0, r3, r0
 800c072:	9b04      	ldr	r3, [sp, #16]
 800c074:	4303      	orrs	r3, r0
 800c076:	3401      	adds	r4, #1
 800c078:	9304      	str	r3, [sp, #16]
 800c07a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c07e:	4826      	ldr	r0, [pc, #152]	; (800c118 <_svfiprintf_r+0x1f0>)
 800c080:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c084:	2206      	movs	r2, #6
 800c086:	f7f4 f8cb 	bl	8000220 <memchr>
 800c08a:	2800      	cmp	r0, #0
 800c08c:	d038      	beq.n	800c100 <_svfiprintf_r+0x1d8>
 800c08e:	4b23      	ldr	r3, [pc, #140]	; (800c11c <_svfiprintf_r+0x1f4>)
 800c090:	bb1b      	cbnz	r3, 800c0da <_svfiprintf_r+0x1b2>
 800c092:	9b03      	ldr	r3, [sp, #12]
 800c094:	3307      	adds	r3, #7
 800c096:	f023 0307 	bic.w	r3, r3, #7
 800c09a:	3308      	adds	r3, #8
 800c09c:	9303      	str	r3, [sp, #12]
 800c09e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0a0:	4433      	add	r3, r6
 800c0a2:	9309      	str	r3, [sp, #36]	; 0x24
 800c0a4:	e767      	b.n	800bf76 <_svfiprintf_r+0x4e>
 800c0a6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c0aa:	460c      	mov	r4, r1
 800c0ac:	2001      	movs	r0, #1
 800c0ae:	e7a5      	b.n	800bffc <_svfiprintf_r+0xd4>
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	3401      	adds	r4, #1
 800c0b4:	9305      	str	r3, [sp, #20]
 800c0b6:	4619      	mov	r1, r3
 800c0b8:	f04f 0c0a 	mov.w	ip, #10
 800c0bc:	4620      	mov	r0, r4
 800c0be:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c0c2:	3a30      	subs	r2, #48	; 0x30
 800c0c4:	2a09      	cmp	r2, #9
 800c0c6:	d903      	bls.n	800c0d0 <_svfiprintf_r+0x1a8>
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d0c5      	beq.n	800c058 <_svfiprintf_r+0x130>
 800c0cc:	9105      	str	r1, [sp, #20]
 800c0ce:	e7c3      	b.n	800c058 <_svfiprintf_r+0x130>
 800c0d0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c0d4:	4604      	mov	r4, r0
 800c0d6:	2301      	movs	r3, #1
 800c0d8:	e7f0      	b.n	800c0bc <_svfiprintf_r+0x194>
 800c0da:	ab03      	add	r3, sp, #12
 800c0dc:	9300      	str	r3, [sp, #0]
 800c0de:	462a      	mov	r2, r5
 800c0e0:	4b0f      	ldr	r3, [pc, #60]	; (800c120 <_svfiprintf_r+0x1f8>)
 800c0e2:	a904      	add	r1, sp, #16
 800c0e4:	4638      	mov	r0, r7
 800c0e6:	f3af 8000 	nop.w
 800c0ea:	1c42      	adds	r2, r0, #1
 800c0ec:	4606      	mov	r6, r0
 800c0ee:	d1d6      	bne.n	800c09e <_svfiprintf_r+0x176>
 800c0f0:	89ab      	ldrh	r3, [r5, #12]
 800c0f2:	065b      	lsls	r3, r3, #25
 800c0f4:	f53f af2c 	bmi.w	800bf50 <_svfiprintf_r+0x28>
 800c0f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c0fa:	b01d      	add	sp, #116	; 0x74
 800c0fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c100:	ab03      	add	r3, sp, #12
 800c102:	9300      	str	r3, [sp, #0]
 800c104:	462a      	mov	r2, r5
 800c106:	4b06      	ldr	r3, [pc, #24]	; (800c120 <_svfiprintf_r+0x1f8>)
 800c108:	a904      	add	r1, sp, #16
 800c10a:	4638      	mov	r0, r7
 800c10c:	f000 fa4c 	bl	800c5a8 <_printf_i>
 800c110:	e7eb      	b.n	800c0ea <_svfiprintf_r+0x1c2>
 800c112:	bf00      	nop
 800c114:	0800dc74 	.word	0x0800dc74
 800c118:	0800dc7e 	.word	0x0800dc7e
 800c11c:	00000000 	.word	0x00000000
 800c120:	0800be71 	.word	0x0800be71
 800c124:	0800dc7a 	.word	0x0800dc7a

0800c128 <_sungetc_r>:
 800c128:	b538      	push	{r3, r4, r5, lr}
 800c12a:	1c4b      	adds	r3, r1, #1
 800c12c:	4614      	mov	r4, r2
 800c12e:	d103      	bne.n	800c138 <_sungetc_r+0x10>
 800c130:	f04f 35ff 	mov.w	r5, #4294967295
 800c134:	4628      	mov	r0, r5
 800c136:	bd38      	pop	{r3, r4, r5, pc}
 800c138:	8993      	ldrh	r3, [r2, #12]
 800c13a:	f023 0320 	bic.w	r3, r3, #32
 800c13e:	8193      	strh	r3, [r2, #12]
 800c140:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c142:	6852      	ldr	r2, [r2, #4]
 800c144:	b2cd      	uxtb	r5, r1
 800c146:	b18b      	cbz	r3, 800c16c <_sungetc_r+0x44>
 800c148:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c14a:	4293      	cmp	r3, r2
 800c14c:	dd08      	ble.n	800c160 <_sungetc_r+0x38>
 800c14e:	6823      	ldr	r3, [r4, #0]
 800c150:	1e5a      	subs	r2, r3, #1
 800c152:	6022      	str	r2, [r4, #0]
 800c154:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c158:	6863      	ldr	r3, [r4, #4]
 800c15a:	3301      	adds	r3, #1
 800c15c:	6063      	str	r3, [r4, #4]
 800c15e:	e7e9      	b.n	800c134 <_sungetc_r+0xc>
 800c160:	4621      	mov	r1, r4
 800c162:	f000 fdc9 	bl	800ccf8 <__submore>
 800c166:	2800      	cmp	r0, #0
 800c168:	d0f1      	beq.n	800c14e <_sungetc_r+0x26>
 800c16a:	e7e1      	b.n	800c130 <_sungetc_r+0x8>
 800c16c:	6921      	ldr	r1, [r4, #16]
 800c16e:	6823      	ldr	r3, [r4, #0]
 800c170:	b151      	cbz	r1, 800c188 <_sungetc_r+0x60>
 800c172:	4299      	cmp	r1, r3
 800c174:	d208      	bcs.n	800c188 <_sungetc_r+0x60>
 800c176:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800c17a:	42a9      	cmp	r1, r5
 800c17c:	d104      	bne.n	800c188 <_sungetc_r+0x60>
 800c17e:	3b01      	subs	r3, #1
 800c180:	3201      	adds	r2, #1
 800c182:	6023      	str	r3, [r4, #0]
 800c184:	6062      	str	r2, [r4, #4]
 800c186:	e7d5      	b.n	800c134 <_sungetc_r+0xc>
 800c188:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800c18c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c190:	6363      	str	r3, [r4, #52]	; 0x34
 800c192:	2303      	movs	r3, #3
 800c194:	63a3      	str	r3, [r4, #56]	; 0x38
 800c196:	4623      	mov	r3, r4
 800c198:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c19c:	6023      	str	r3, [r4, #0]
 800c19e:	2301      	movs	r3, #1
 800c1a0:	e7dc      	b.n	800c15c <_sungetc_r+0x34>

0800c1a2 <__ssrefill_r>:
 800c1a2:	b510      	push	{r4, lr}
 800c1a4:	460c      	mov	r4, r1
 800c1a6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c1a8:	b169      	cbz	r1, 800c1c6 <__ssrefill_r+0x24>
 800c1aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c1ae:	4299      	cmp	r1, r3
 800c1b0:	d001      	beq.n	800c1b6 <__ssrefill_r+0x14>
 800c1b2:	f000 fdf7 	bl	800cda4 <_free_r>
 800c1b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c1b8:	6063      	str	r3, [r4, #4]
 800c1ba:	2000      	movs	r0, #0
 800c1bc:	6360      	str	r0, [r4, #52]	; 0x34
 800c1be:	b113      	cbz	r3, 800c1c6 <__ssrefill_r+0x24>
 800c1c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c1c2:	6023      	str	r3, [r4, #0]
 800c1c4:	bd10      	pop	{r4, pc}
 800c1c6:	6923      	ldr	r3, [r4, #16]
 800c1c8:	6023      	str	r3, [r4, #0]
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	6063      	str	r3, [r4, #4]
 800c1ce:	89a3      	ldrh	r3, [r4, #12]
 800c1d0:	f043 0320 	orr.w	r3, r3, #32
 800c1d4:	81a3      	strh	r3, [r4, #12]
 800c1d6:	f04f 30ff 	mov.w	r0, #4294967295
 800c1da:	e7f3      	b.n	800c1c4 <__ssrefill_r+0x22>

0800c1dc <__ssvfiscanf_r>:
 800c1dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1e0:	460c      	mov	r4, r1
 800c1e2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800c1e6:	2100      	movs	r1, #0
 800c1e8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800c1ec:	49a6      	ldr	r1, [pc, #664]	; (800c488 <__ssvfiscanf_r+0x2ac>)
 800c1ee:	91a0      	str	r1, [sp, #640]	; 0x280
 800c1f0:	f10d 0804 	add.w	r8, sp, #4
 800c1f4:	49a5      	ldr	r1, [pc, #660]	; (800c48c <__ssvfiscanf_r+0x2b0>)
 800c1f6:	4fa6      	ldr	r7, [pc, #664]	; (800c490 <__ssvfiscanf_r+0x2b4>)
 800c1f8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800c494 <__ssvfiscanf_r+0x2b8>
 800c1fc:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800c200:	4606      	mov	r6, r0
 800c202:	91a1      	str	r1, [sp, #644]	; 0x284
 800c204:	9300      	str	r3, [sp, #0]
 800c206:	7813      	ldrb	r3, [r2, #0]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	f000 815a 	beq.w	800c4c2 <__ssvfiscanf_r+0x2e6>
 800c20e:	5dd9      	ldrb	r1, [r3, r7]
 800c210:	f011 0108 	ands.w	r1, r1, #8
 800c214:	f102 0501 	add.w	r5, r2, #1
 800c218:	d019      	beq.n	800c24e <__ssvfiscanf_r+0x72>
 800c21a:	6863      	ldr	r3, [r4, #4]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	dd0f      	ble.n	800c240 <__ssvfiscanf_r+0x64>
 800c220:	6823      	ldr	r3, [r4, #0]
 800c222:	781a      	ldrb	r2, [r3, #0]
 800c224:	5cba      	ldrb	r2, [r7, r2]
 800c226:	0712      	lsls	r2, r2, #28
 800c228:	d401      	bmi.n	800c22e <__ssvfiscanf_r+0x52>
 800c22a:	462a      	mov	r2, r5
 800c22c:	e7eb      	b.n	800c206 <__ssvfiscanf_r+0x2a>
 800c22e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c230:	3201      	adds	r2, #1
 800c232:	9245      	str	r2, [sp, #276]	; 0x114
 800c234:	6862      	ldr	r2, [r4, #4]
 800c236:	3301      	adds	r3, #1
 800c238:	3a01      	subs	r2, #1
 800c23a:	6062      	str	r2, [r4, #4]
 800c23c:	6023      	str	r3, [r4, #0]
 800c23e:	e7ec      	b.n	800c21a <__ssvfiscanf_r+0x3e>
 800c240:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c242:	4621      	mov	r1, r4
 800c244:	4630      	mov	r0, r6
 800c246:	4798      	blx	r3
 800c248:	2800      	cmp	r0, #0
 800c24a:	d0e9      	beq.n	800c220 <__ssvfiscanf_r+0x44>
 800c24c:	e7ed      	b.n	800c22a <__ssvfiscanf_r+0x4e>
 800c24e:	2b25      	cmp	r3, #37	; 0x25
 800c250:	d012      	beq.n	800c278 <__ssvfiscanf_r+0x9c>
 800c252:	469a      	mov	sl, r3
 800c254:	6863      	ldr	r3, [r4, #4]
 800c256:	2b00      	cmp	r3, #0
 800c258:	f340 8091 	ble.w	800c37e <__ssvfiscanf_r+0x1a2>
 800c25c:	6822      	ldr	r2, [r4, #0]
 800c25e:	7813      	ldrb	r3, [r2, #0]
 800c260:	4553      	cmp	r3, sl
 800c262:	f040 812e 	bne.w	800c4c2 <__ssvfiscanf_r+0x2e6>
 800c266:	6863      	ldr	r3, [r4, #4]
 800c268:	3b01      	subs	r3, #1
 800c26a:	6063      	str	r3, [r4, #4]
 800c26c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c26e:	3201      	adds	r2, #1
 800c270:	3301      	adds	r3, #1
 800c272:	6022      	str	r2, [r4, #0]
 800c274:	9345      	str	r3, [sp, #276]	; 0x114
 800c276:	e7d8      	b.n	800c22a <__ssvfiscanf_r+0x4e>
 800c278:	9141      	str	r1, [sp, #260]	; 0x104
 800c27a:	9143      	str	r1, [sp, #268]	; 0x10c
 800c27c:	7853      	ldrb	r3, [r2, #1]
 800c27e:	2b2a      	cmp	r3, #42	; 0x2a
 800c280:	bf02      	ittt	eq
 800c282:	2310      	moveq	r3, #16
 800c284:	1c95      	addeq	r5, r2, #2
 800c286:	9341      	streq	r3, [sp, #260]	; 0x104
 800c288:	220a      	movs	r2, #10
 800c28a:	46aa      	mov	sl, r5
 800c28c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800c290:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800c294:	2b09      	cmp	r3, #9
 800c296:	d91d      	bls.n	800c2d4 <__ssvfiscanf_r+0xf8>
 800c298:	487e      	ldr	r0, [pc, #504]	; (800c494 <__ssvfiscanf_r+0x2b8>)
 800c29a:	2203      	movs	r2, #3
 800c29c:	f7f3 ffc0 	bl	8000220 <memchr>
 800c2a0:	b140      	cbz	r0, 800c2b4 <__ssvfiscanf_r+0xd8>
 800c2a2:	2301      	movs	r3, #1
 800c2a4:	eba0 0009 	sub.w	r0, r0, r9
 800c2a8:	fa03 f000 	lsl.w	r0, r3, r0
 800c2ac:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c2ae:	4318      	orrs	r0, r3
 800c2b0:	9041      	str	r0, [sp, #260]	; 0x104
 800c2b2:	4655      	mov	r5, sl
 800c2b4:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c2b8:	2b78      	cmp	r3, #120	; 0x78
 800c2ba:	d806      	bhi.n	800c2ca <__ssvfiscanf_r+0xee>
 800c2bc:	2b57      	cmp	r3, #87	; 0x57
 800c2be:	d810      	bhi.n	800c2e2 <__ssvfiscanf_r+0x106>
 800c2c0:	2b25      	cmp	r3, #37	; 0x25
 800c2c2:	d0c6      	beq.n	800c252 <__ssvfiscanf_r+0x76>
 800c2c4:	d856      	bhi.n	800c374 <__ssvfiscanf_r+0x198>
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d064      	beq.n	800c394 <__ssvfiscanf_r+0x1b8>
 800c2ca:	2303      	movs	r3, #3
 800c2cc:	9347      	str	r3, [sp, #284]	; 0x11c
 800c2ce:	230a      	movs	r3, #10
 800c2d0:	9342      	str	r3, [sp, #264]	; 0x108
 800c2d2:	e071      	b.n	800c3b8 <__ssvfiscanf_r+0x1dc>
 800c2d4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c2d6:	fb02 1103 	mla	r1, r2, r3, r1
 800c2da:	3930      	subs	r1, #48	; 0x30
 800c2dc:	9143      	str	r1, [sp, #268]	; 0x10c
 800c2de:	4655      	mov	r5, sl
 800c2e0:	e7d3      	b.n	800c28a <__ssvfiscanf_r+0xae>
 800c2e2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800c2e6:	2a20      	cmp	r2, #32
 800c2e8:	d8ef      	bhi.n	800c2ca <__ssvfiscanf_r+0xee>
 800c2ea:	a101      	add	r1, pc, #4	; (adr r1, 800c2f0 <__ssvfiscanf_r+0x114>)
 800c2ec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c2f0:	0800c3a3 	.word	0x0800c3a3
 800c2f4:	0800c2cb 	.word	0x0800c2cb
 800c2f8:	0800c2cb 	.word	0x0800c2cb
 800c2fc:	0800c401 	.word	0x0800c401
 800c300:	0800c2cb 	.word	0x0800c2cb
 800c304:	0800c2cb 	.word	0x0800c2cb
 800c308:	0800c2cb 	.word	0x0800c2cb
 800c30c:	0800c2cb 	.word	0x0800c2cb
 800c310:	0800c2cb 	.word	0x0800c2cb
 800c314:	0800c2cb 	.word	0x0800c2cb
 800c318:	0800c2cb 	.word	0x0800c2cb
 800c31c:	0800c417 	.word	0x0800c417
 800c320:	0800c3ed 	.word	0x0800c3ed
 800c324:	0800c37b 	.word	0x0800c37b
 800c328:	0800c37b 	.word	0x0800c37b
 800c32c:	0800c37b 	.word	0x0800c37b
 800c330:	0800c2cb 	.word	0x0800c2cb
 800c334:	0800c3f1 	.word	0x0800c3f1
 800c338:	0800c2cb 	.word	0x0800c2cb
 800c33c:	0800c2cb 	.word	0x0800c2cb
 800c340:	0800c2cb 	.word	0x0800c2cb
 800c344:	0800c2cb 	.word	0x0800c2cb
 800c348:	0800c427 	.word	0x0800c427
 800c34c:	0800c3f9 	.word	0x0800c3f9
 800c350:	0800c39b 	.word	0x0800c39b
 800c354:	0800c2cb 	.word	0x0800c2cb
 800c358:	0800c2cb 	.word	0x0800c2cb
 800c35c:	0800c423 	.word	0x0800c423
 800c360:	0800c2cb 	.word	0x0800c2cb
 800c364:	0800c3ed 	.word	0x0800c3ed
 800c368:	0800c2cb 	.word	0x0800c2cb
 800c36c:	0800c2cb 	.word	0x0800c2cb
 800c370:	0800c3a3 	.word	0x0800c3a3
 800c374:	3b45      	subs	r3, #69	; 0x45
 800c376:	2b02      	cmp	r3, #2
 800c378:	d8a7      	bhi.n	800c2ca <__ssvfiscanf_r+0xee>
 800c37a:	2305      	movs	r3, #5
 800c37c:	e01b      	b.n	800c3b6 <__ssvfiscanf_r+0x1da>
 800c37e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c380:	4621      	mov	r1, r4
 800c382:	4630      	mov	r0, r6
 800c384:	4798      	blx	r3
 800c386:	2800      	cmp	r0, #0
 800c388:	f43f af68 	beq.w	800c25c <__ssvfiscanf_r+0x80>
 800c38c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c38e:	2800      	cmp	r0, #0
 800c390:	f040 808d 	bne.w	800c4ae <__ssvfiscanf_r+0x2d2>
 800c394:	f04f 30ff 	mov.w	r0, #4294967295
 800c398:	e08f      	b.n	800c4ba <__ssvfiscanf_r+0x2de>
 800c39a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c39c:	f042 0220 	orr.w	r2, r2, #32
 800c3a0:	9241      	str	r2, [sp, #260]	; 0x104
 800c3a2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c3a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c3a8:	9241      	str	r2, [sp, #260]	; 0x104
 800c3aa:	2210      	movs	r2, #16
 800c3ac:	2b6f      	cmp	r3, #111	; 0x6f
 800c3ae:	9242      	str	r2, [sp, #264]	; 0x108
 800c3b0:	bf34      	ite	cc
 800c3b2:	2303      	movcc	r3, #3
 800c3b4:	2304      	movcs	r3, #4
 800c3b6:	9347      	str	r3, [sp, #284]	; 0x11c
 800c3b8:	6863      	ldr	r3, [r4, #4]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	dd42      	ble.n	800c444 <__ssvfiscanf_r+0x268>
 800c3be:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c3c0:	0659      	lsls	r1, r3, #25
 800c3c2:	d404      	bmi.n	800c3ce <__ssvfiscanf_r+0x1f2>
 800c3c4:	6823      	ldr	r3, [r4, #0]
 800c3c6:	781a      	ldrb	r2, [r3, #0]
 800c3c8:	5cba      	ldrb	r2, [r7, r2]
 800c3ca:	0712      	lsls	r2, r2, #28
 800c3cc:	d441      	bmi.n	800c452 <__ssvfiscanf_r+0x276>
 800c3ce:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800c3d0:	2b02      	cmp	r3, #2
 800c3d2:	dc50      	bgt.n	800c476 <__ssvfiscanf_r+0x29a>
 800c3d4:	466b      	mov	r3, sp
 800c3d6:	4622      	mov	r2, r4
 800c3d8:	a941      	add	r1, sp, #260	; 0x104
 800c3da:	4630      	mov	r0, r6
 800c3dc:	f000 fa0a 	bl	800c7f4 <_scanf_chars>
 800c3e0:	2801      	cmp	r0, #1
 800c3e2:	d06e      	beq.n	800c4c2 <__ssvfiscanf_r+0x2e6>
 800c3e4:	2802      	cmp	r0, #2
 800c3e6:	f47f af20 	bne.w	800c22a <__ssvfiscanf_r+0x4e>
 800c3ea:	e7cf      	b.n	800c38c <__ssvfiscanf_r+0x1b0>
 800c3ec:	220a      	movs	r2, #10
 800c3ee:	e7dd      	b.n	800c3ac <__ssvfiscanf_r+0x1d0>
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	9342      	str	r3, [sp, #264]	; 0x108
 800c3f4:	2303      	movs	r3, #3
 800c3f6:	e7de      	b.n	800c3b6 <__ssvfiscanf_r+0x1da>
 800c3f8:	2308      	movs	r3, #8
 800c3fa:	9342      	str	r3, [sp, #264]	; 0x108
 800c3fc:	2304      	movs	r3, #4
 800c3fe:	e7da      	b.n	800c3b6 <__ssvfiscanf_r+0x1da>
 800c400:	4629      	mov	r1, r5
 800c402:	4640      	mov	r0, r8
 800c404:	f000 fb48 	bl	800ca98 <__sccl>
 800c408:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c40a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c40e:	9341      	str	r3, [sp, #260]	; 0x104
 800c410:	4605      	mov	r5, r0
 800c412:	2301      	movs	r3, #1
 800c414:	e7cf      	b.n	800c3b6 <__ssvfiscanf_r+0x1da>
 800c416:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c418:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c41c:	9341      	str	r3, [sp, #260]	; 0x104
 800c41e:	2300      	movs	r3, #0
 800c420:	e7c9      	b.n	800c3b6 <__ssvfiscanf_r+0x1da>
 800c422:	2302      	movs	r3, #2
 800c424:	e7c7      	b.n	800c3b6 <__ssvfiscanf_r+0x1da>
 800c426:	9841      	ldr	r0, [sp, #260]	; 0x104
 800c428:	06c3      	lsls	r3, r0, #27
 800c42a:	f53f aefe 	bmi.w	800c22a <__ssvfiscanf_r+0x4e>
 800c42e:	9b00      	ldr	r3, [sp, #0]
 800c430:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c432:	1d19      	adds	r1, r3, #4
 800c434:	9100      	str	r1, [sp, #0]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	f010 0f01 	tst.w	r0, #1
 800c43c:	bf14      	ite	ne
 800c43e:	801a      	strhne	r2, [r3, #0]
 800c440:	601a      	streq	r2, [r3, #0]
 800c442:	e6f2      	b.n	800c22a <__ssvfiscanf_r+0x4e>
 800c444:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c446:	4621      	mov	r1, r4
 800c448:	4630      	mov	r0, r6
 800c44a:	4798      	blx	r3
 800c44c:	2800      	cmp	r0, #0
 800c44e:	d0b6      	beq.n	800c3be <__ssvfiscanf_r+0x1e2>
 800c450:	e79c      	b.n	800c38c <__ssvfiscanf_r+0x1b0>
 800c452:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c454:	3201      	adds	r2, #1
 800c456:	9245      	str	r2, [sp, #276]	; 0x114
 800c458:	6862      	ldr	r2, [r4, #4]
 800c45a:	3a01      	subs	r2, #1
 800c45c:	2a00      	cmp	r2, #0
 800c45e:	6062      	str	r2, [r4, #4]
 800c460:	dd02      	ble.n	800c468 <__ssvfiscanf_r+0x28c>
 800c462:	3301      	adds	r3, #1
 800c464:	6023      	str	r3, [r4, #0]
 800c466:	e7ad      	b.n	800c3c4 <__ssvfiscanf_r+0x1e8>
 800c468:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c46a:	4621      	mov	r1, r4
 800c46c:	4630      	mov	r0, r6
 800c46e:	4798      	blx	r3
 800c470:	2800      	cmp	r0, #0
 800c472:	d0a7      	beq.n	800c3c4 <__ssvfiscanf_r+0x1e8>
 800c474:	e78a      	b.n	800c38c <__ssvfiscanf_r+0x1b0>
 800c476:	2b04      	cmp	r3, #4
 800c478:	dc0e      	bgt.n	800c498 <__ssvfiscanf_r+0x2bc>
 800c47a:	466b      	mov	r3, sp
 800c47c:	4622      	mov	r2, r4
 800c47e:	a941      	add	r1, sp, #260	; 0x104
 800c480:	4630      	mov	r0, r6
 800c482:	f000 fa11 	bl	800c8a8 <_scanf_i>
 800c486:	e7ab      	b.n	800c3e0 <__ssvfiscanf_r+0x204>
 800c488:	0800c129 	.word	0x0800c129
 800c48c:	0800c1a3 	.word	0x0800c1a3
 800c490:	0800dcc3 	.word	0x0800dcc3
 800c494:	0800dc7a 	.word	0x0800dc7a
 800c498:	4b0b      	ldr	r3, [pc, #44]	; (800c4c8 <__ssvfiscanf_r+0x2ec>)
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	f43f aec5 	beq.w	800c22a <__ssvfiscanf_r+0x4e>
 800c4a0:	466b      	mov	r3, sp
 800c4a2:	4622      	mov	r2, r4
 800c4a4:	a941      	add	r1, sp, #260	; 0x104
 800c4a6:	4630      	mov	r0, r6
 800c4a8:	f3af 8000 	nop.w
 800c4ac:	e798      	b.n	800c3e0 <__ssvfiscanf_r+0x204>
 800c4ae:	89a3      	ldrh	r3, [r4, #12]
 800c4b0:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c4b4:	bf18      	it	ne
 800c4b6:	f04f 30ff 	movne.w	r0, #4294967295
 800c4ba:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800c4be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4c2:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c4c4:	e7f9      	b.n	800c4ba <__ssvfiscanf_r+0x2de>
 800c4c6:	bf00      	nop
 800c4c8:	00000000 	.word	0x00000000

0800c4cc <_printf_common>:
 800c4cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4d0:	4616      	mov	r6, r2
 800c4d2:	4699      	mov	r9, r3
 800c4d4:	688a      	ldr	r2, [r1, #8]
 800c4d6:	690b      	ldr	r3, [r1, #16]
 800c4d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c4dc:	4293      	cmp	r3, r2
 800c4de:	bfb8      	it	lt
 800c4e0:	4613      	movlt	r3, r2
 800c4e2:	6033      	str	r3, [r6, #0]
 800c4e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c4e8:	4607      	mov	r7, r0
 800c4ea:	460c      	mov	r4, r1
 800c4ec:	b10a      	cbz	r2, 800c4f2 <_printf_common+0x26>
 800c4ee:	3301      	adds	r3, #1
 800c4f0:	6033      	str	r3, [r6, #0]
 800c4f2:	6823      	ldr	r3, [r4, #0]
 800c4f4:	0699      	lsls	r1, r3, #26
 800c4f6:	bf42      	ittt	mi
 800c4f8:	6833      	ldrmi	r3, [r6, #0]
 800c4fa:	3302      	addmi	r3, #2
 800c4fc:	6033      	strmi	r3, [r6, #0]
 800c4fe:	6825      	ldr	r5, [r4, #0]
 800c500:	f015 0506 	ands.w	r5, r5, #6
 800c504:	d106      	bne.n	800c514 <_printf_common+0x48>
 800c506:	f104 0a19 	add.w	sl, r4, #25
 800c50a:	68e3      	ldr	r3, [r4, #12]
 800c50c:	6832      	ldr	r2, [r6, #0]
 800c50e:	1a9b      	subs	r3, r3, r2
 800c510:	42ab      	cmp	r3, r5
 800c512:	dc26      	bgt.n	800c562 <_printf_common+0x96>
 800c514:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c518:	1e13      	subs	r3, r2, #0
 800c51a:	6822      	ldr	r2, [r4, #0]
 800c51c:	bf18      	it	ne
 800c51e:	2301      	movne	r3, #1
 800c520:	0692      	lsls	r2, r2, #26
 800c522:	d42b      	bmi.n	800c57c <_printf_common+0xb0>
 800c524:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c528:	4649      	mov	r1, r9
 800c52a:	4638      	mov	r0, r7
 800c52c:	47c0      	blx	r8
 800c52e:	3001      	adds	r0, #1
 800c530:	d01e      	beq.n	800c570 <_printf_common+0xa4>
 800c532:	6823      	ldr	r3, [r4, #0]
 800c534:	68e5      	ldr	r5, [r4, #12]
 800c536:	6832      	ldr	r2, [r6, #0]
 800c538:	f003 0306 	and.w	r3, r3, #6
 800c53c:	2b04      	cmp	r3, #4
 800c53e:	bf08      	it	eq
 800c540:	1aad      	subeq	r5, r5, r2
 800c542:	68a3      	ldr	r3, [r4, #8]
 800c544:	6922      	ldr	r2, [r4, #16]
 800c546:	bf0c      	ite	eq
 800c548:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c54c:	2500      	movne	r5, #0
 800c54e:	4293      	cmp	r3, r2
 800c550:	bfc4      	itt	gt
 800c552:	1a9b      	subgt	r3, r3, r2
 800c554:	18ed      	addgt	r5, r5, r3
 800c556:	2600      	movs	r6, #0
 800c558:	341a      	adds	r4, #26
 800c55a:	42b5      	cmp	r5, r6
 800c55c:	d11a      	bne.n	800c594 <_printf_common+0xc8>
 800c55e:	2000      	movs	r0, #0
 800c560:	e008      	b.n	800c574 <_printf_common+0xa8>
 800c562:	2301      	movs	r3, #1
 800c564:	4652      	mov	r2, sl
 800c566:	4649      	mov	r1, r9
 800c568:	4638      	mov	r0, r7
 800c56a:	47c0      	blx	r8
 800c56c:	3001      	adds	r0, #1
 800c56e:	d103      	bne.n	800c578 <_printf_common+0xac>
 800c570:	f04f 30ff 	mov.w	r0, #4294967295
 800c574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c578:	3501      	adds	r5, #1
 800c57a:	e7c6      	b.n	800c50a <_printf_common+0x3e>
 800c57c:	18e1      	adds	r1, r4, r3
 800c57e:	1c5a      	adds	r2, r3, #1
 800c580:	2030      	movs	r0, #48	; 0x30
 800c582:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c586:	4422      	add	r2, r4
 800c588:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c58c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c590:	3302      	adds	r3, #2
 800c592:	e7c7      	b.n	800c524 <_printf_common+0x58>
 800c594:	2301      	movs	r3, #1
 800c596:	4622      	mov	r2, r4
 800c598:	4649      	mov	r1, r9
 800c59a:	4638      	mov	r0, r7
 800c59c:	47c0      	blx	r8
 800c59e:	3001      	adds	r0, #1
 800c5a0:	d0e6      	beq.n	800c570 <_printf_common+0xa4>
 800c5a2:	3601      	adds	r6, #1
 800c5a4:	e7d9      	b.n	800c55a <_printf_common+0x8e>
	...

0800c5a8 <_printf_i>:
 800c5a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c5ac:	7e0f      	ldrb	r7, [r1, #24]
 800c5ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c5b0:	2f78      	cmp	r7, #120	; 0x78
 800c5b2:	4691      	mov	r9, r2
 800c5b4:	4680      	mov	r8, r0
 800c5b6:	460c      	mov	r4, r1
 800c5b8:	469a      	mov	sl, r3
 800c5ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c5be:	d807      	bhi.n	800c5d0 <_printf_i+0x28>
 800c5c0:	2f62      	cmp	r7, #98	; 0x62
 800c5c2:	d80a      	bhi.n	800c5da <_printf_i+0x32>
 800c5c4:	2f00      	cmp	r7, #0
 800c5c6:	f000 80d8 	beq.w	800c77a <_printf_i+0x1d2>
 800c5ca:	2f58      	cmp	r7, #88	; 0x58
 800c5cc:	f000 80a3 	beq.w	800c716 <_printf_i+0x16e>
 800c5d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c5d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c5d8:	e03a      	b.n	800c650 <_printf_i+0xa8>
 800c5da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c5de:	2b15      	cmp	r3, #21
 800c5e0:	d8f6      	bhi.n	800c5d0 <_printf_i+0x28>
 800c5e2:	a101      	add	r1, pc, #4	; (adr r1, 800c5e8 <_printf_i+0x40>)
 800c5e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c5e8:	0800c641 	.word	0x0800c641
 800c5ec:	0800c655 	.word	0x0800c655
 800c5f0:	0800c5d1 	.word	0x0800c5d1
 800c5f4:	0800c5d1 	.word	0x0800c5d1
 800c5f8:	0800c5d1 	.word	0x0800c5d1
 800c5fc:	0800c5d1 	.word	0x0800c5d1
 800c600:	0800c655 	.word	0x0800c655
 800c604:	0800c5d1 	.word	0x0800c5d1
 800c608:	0800c5d1 	.word	0x0800c5d1
 800c60c:	0800c5d1 	.word	0x0800c5d1
 800c610:	0800c5d1 	.word	0x0800c5d1
 800c614:	0800c761 	.word	0x0800c761
 800c618:	0800c685 	.word	0x0800c685
 800c61c:	0800c743 	.word	0x0800c743
 800c620:	0800c5d1 	.word	0x0800c5d1
 800c624:	0800c5d1 	.word	0x0800c5d1
 800c628:	0800c783 	.word	0x0800c783
 800c62c:	0800c5d1 	.word	0x0800c5d1
 800c630:	0800c685 	.word	0x0800c685
 800c634:	0800c5d1 	.word	0x0800c5d1
 800c638:	0800c5d1 	.word	0x0800c5d1
 800c63c:	0800c74b 	.word	0x0800c74b
 800c640:	682b      	ldr	r3, [r5, #0]
 800c642:	1d1a      	adds	r2, r3, #4
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	602a      	str	r2, [r5, #0]
 800c648:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c64c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c650:	2301      	movs	r3, #1
 800c652:	e0a3      	b.n	800c79c <_printf_i+0x1f4>
 800c654:	6820      	ldr	r0, [r4, #0]
 800c656:	6829      	ldr	r1, [r5, #0]
 800c658:	0606      	lsls	r6, r0, #24
 800c65a:	f101 0304 	add.w	r3, r1, #4
 800c65e:	d50a      	bpl.n	800c676 <_printf_i+0xce>
 800c660:	680e      	ldr	r6, [r1, #0]
 800c662:	602b      	str	r3, [r5, #0]
 800c664:	2e00      	cmp	r6, #0
 800c666:	da03      	bge.n	800c670 <_printf_i+0xc8>
 800c668:	232d      	movs	r3, #45	; 0x2d
 800c66a:	4276      	negs	r6, r6
 800c66c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c670:	485e      	ldr	r0, [pc, #376]	; (800c7ec <_printf_i+0x244>)
 800c672:	230a      	movs	r3, #10
 800c674:	e019      	b.n	800c6aa <_printf_i+0x102>
 800c676:	680e      	ldr	r6, [r1, #0]
 800c678:	602b      	str	r3, [r5, #0]
 800c67a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c67e:	bf18      	it	ne
 800c680:	b236      	sxthne	r6, r6
 800c682:	e7ef      	b.n	800c664 <_printf_i+0xbc>
 800c684:	682b      	ldr	r3, [r5, #0]
 800c686:	6820      	ldr	r0, [r4, #0]
 800c688:	1d19      	adds	r1, r3, #4
 800c68a:	6029      	str	r1, [r5, #0]
 800c68c:	0601      	lsls	r1, r0, #24
 800c68e:	d501      	bpl.n	800c694 <_printf_i+0xec>
 800c690:	681e      	ldr	r6, [r3, #0]
 800c692:	e002      	b.n	800c69a <_printf_i+0xf2>
 800c694:	0646      	lsls	r6, r0, #25
 800c696:	d5fb      	bpl.n	800c690 <_printf_i+0xe8>
 800c698:	881e      	ldrh	r6, [r3, #0]
 800c69a:	4854      	ldr	r0, [pc, #336]	; (800c7ec <_printf_i+0x244>)
 800c69c:	2f6f      	cmp	r7, #111	; 0x6f
 800c69e:	bf0c      	ite	eq
 800c6a0:	2308      	moveq	r3, #8
 800c6a2:	230a      	movne	r3, #10
 800c6a4:	2100      	movs	r1, #0
 800c6a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c6aa:	6865      	ldr	r5, [r4, #4]
 800c6ac:	60a5      	str	r5, [r4, #8]
 800c6ae:	2d00      	cmp	r5, #0
 800c6b0:	bfa2      	ittt	ge
 800c6b2:	6821      	ldrge	r1, [r4, #0]
 800c6b4:	f021 0104 	bicge.w	r1, r1, #4
 800c6b8:	6021      	strge	r1, [r4, #0]
 800c6ba:	b90e      	cbnz	r6, 800c6c0 <_printf_i+0x118>
 800c6bc:	2d00      	cmp	r5, #0
 800c6be:	d04d      	beq.n	800c75c <_printf_i+0x1b4>
 800c6c0:	4615      	mov	r5, r2
 800c6c2:	fbb6 f1f3 	udiv	r1, r6, r3
 800c6c6:	fb03 6711 	mls	r7, r3, r1, r6
 800c6ca:	5dc7      	ldrb	r7, [r0, r7]
 800c6cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c6d0:	4637      	mov	r7, r6
 800c6d2:	42bb      	cmp	r3, r7
 800c6d4:	460e      	mov	r6, r1
 800c6d6:	d9f4      	bls.n	800c6c2 <_printf_i+0x11a>
 800c6d8:	2b08      	cmp	r3, #8
 800c6da:	d10b      	bne.n	800c6f4 <_printf_i+0x14c>
 800c6dc:	6823      	ldr	r3, [r4, #0]
 800c6de:	07de      	lsls	r6, r3, #31
 800c6e0:	d508      	bpl.n	800c6f4 <_printf_i+0x14c>
 800c6e2:	6923      	ldr	r3, [r4, #16]
 800c6e4:	6861      	ldr	r1, [r4, #4]
 800c6e6:	4299      	cmp	r1, r3
 800c6e8:	bfde      	ittt	le
 800c6ea:	2330      	movle	r3, #48	; 0x30
 800c6ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c6f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c6f4:	1b52      	subs	r2, r2, r5
 800c6f6:	6122      	str	r2, [r4, #16]
 800c6f8:	f8cd a000 	str.w	sl, [sp]
 800c6fc:	464b      	mov	r3, r9
 800c6fe:	aa03      	add	r2, sp, #12
 800c700:	4621      	mov	r1, r4
 800c702:	4640      	mov	r0, r8
 800c704:	f7ff fee2 	bl	800c4cc <_printf_common>
 800c708:	3001      	adds	r0, #1
 800c70a:	d14c      	bne.n	800c7a6 <_printf_i+0x1fe>
 800c70c:	f04f 30ff 	mov.w	r0, #4294967295
 800c710:	b004      	add	sp, #16
 800c712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c716:	4835      	ldr	r0, [pc, #212]	; (800c7ec <_printf_i+0x244>)
 800c718:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c71c:	6829      	ldr	r1, [r5, #0]
 800c71e:	6823      	ldr	r3, [r4, #0]
 800c720:	f851 6b04 	ldr.w	r6, [r1], #4
 800c724:	6029      	str	r1, [r5, #0]
 800c726:	061d      	lsls	r5, r3, #24
 800c728:	d514      	bpl.n	800c754 <_printf_i+0x1ac>
 800c72a:	07df      	lsls	r7, r3, #31
 800c72c:	bf44      	itt	mi
 800c72e:	f043 0320 	orrmi.w	r3, r3, #32
 800c732:	6023      	strmi	r3, [r4, #0]
 800c734:	b91e      	cbnz	r6, 800c73e <_printf_i+0x196>
 800c736:	6823      	ldr	r3, [r4, #0]
 800c738:	f023 0320 	bic.w	r3, r3, #32
 800c73c:	6023      	str	r3, [r4, #0]
 800c73e:	2310      	movs	r3, #16
 800c740:	e7b0      	b.n	800c6a4 <_printf_i+0xfc>
 800c742:	6823      	ldr	r3, [r4, #0]
 800c744:	f043 0320 	orr.w	r3, r3, #32
 800c748:	6023      	str	r3, [r4, #0]
 800c74a:	2378      	movs	r3, #120	; 0x78
 800c74c:	4828      	ldr	r0, [pc, #160]	; (800c7f0 <_printf_i+0x248>)
 800c74e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c752:	e7e3      	b.n	800c71c <_printf_i+0x174>
 800c754:	0659      	lsls	r1, r3, #25
 800c756:	bf48      	it	mi
 800c758:	b2b6      	uxthmi	r6, r6
 800c75a:	e7e6      	b.n	800c72a <_printf_i+0x182>
 800c75c:	4615      	mov	r5, r2
 800c75e:	e7bb      	b.n	800c6d8 <_printf_i+0x130>
 800c760:	682b      	ldr	r3, [r5, #0]
 800c762:	6826      	ldr	r6, [r4, #0]
 800c764:	6961      	ldr	r1, [r4, #20]
 800c766:	1d18      	adds	r0, r3, #4
 800c768:	6028      	str	r0, [r5, #0]
 800c76a:	0635      	lsls	r5, r6, #24
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	d501      	bpl.n	800c774 <_printf_i+0x1cc>
 800c770:	6019      	str	r1, [r3, #0]
 800c772:	e002      	b.n	800c77a <_printf_i+0x1d2>
 800c774:	0670      	lsls	r0, r6, #25
 800c776:	d5fb      	bpl.n	800c770 <_printf_i+0x1c8>
 800c778:	8019      	strh	r1, [r3, #0]
 800c77a:	2300      	movs	r3, #0
 800c77c:	6123      	str	r3, [r4, #16]
 800c77e:	4615      	mov	r5, r2
 800c780:	e7ba      	b.n	800c6f8 <_printf_i+0x150>
 800c782:	682b      	ldr	r3, [r5, #0]
 800c784:	1d1a      	adds	r2, r3, #4
 800c786:	602a      	str	r2, [r5, #0]
 800c788:	681d      	ldr	r5, [r3, #0]
 800c78a:	6862      	ldr	r2, [r4, #4]
 800c78c:	2100      	movs	r1, #0
 800c78e:	4628      	mov	r0, r5
 800c790:	f7f3 fd46 	bl	8000220 <memchr>
 800c794:	b108      	cbz	r0, 800c79a <_printf_i+0x1f2>
 800c796:	1b40      	subs	r0, r0, r5
 800c798:	6060      	str	r0, [r4, #4]
 800c79a:	6863      	ldr	r3, [r4, #4]
 800c79c:	6123      	str	r3, [r4, #16]
 800c79e:	2300      	movs	r3, #0
 800c7a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c7a4:	e7a8      	b.n	800c6f8 <_printf_i+0x150>
 800c7a6:	6923      	ldr	r3, [r4, #16]
 800c7a8:	462a      	mov	r2, r5
 800c7aa:	4649      	mov	r1, r9
 800c7ac:	4640      	mov	r0, r8
 800c7ae:	47d0      	blx	sl
 800c7b0:	3001      	adds	r0, #1
 800c7b2:	d0ab      	beq.n	800c70c <_printf_i+0x164>
 800c7b4:	6823      	ldr	r3, [r4, #0]
 800c7b6:	079b      	lsls	r3, r3, #30
 800c7b8:	d413      	bmi.n	800c7e2 <_printf_i+0x23a>
 800c7ba:	68e0      	ldr	r0, [r4, #12]
 800c7bc:	9b03      	ldr	r3, [sp, #12]
 800c7be:	4298      	cmp	r0, r3
 800c7c0:	bfb8      	it	lt
 800c7c2:	4618      	movlt	r0, r3
 800c7c4:	e7a4      	b.n	800c710 <_printf_i+0x168>
 800c7c6:	2301      	movs	r3, #1
 800c7c8:	4632      	mov	r2, r6
 800c7ca:	4649      	mov	r1, r9
 800c7cc:	4640      	mov	r0, r8
 800c7ce:	47d0      	blx	sl
 800c7d0:	3001      	adds	r0, #1
 800c7d2:	d09b      	beq.n	800c70c <_printf_i+0x164>
 800c7d4:	3501      	adds	r5, #1
 800c7d6:	68e3      	ldr	r3, [r4, #12]
 800c7d8:	9903      	ldr	r1, [sp, #12]
 800c7da:	1a5b      	subs	r3, r3, r1
 800c7dc:	42ab      	cmp	r3, r5
 800c7de:	dcf2      	bgt.n	800c7c6 <_printf_i+0x21e>
 800c7e0:	e7eb      	b.n	800c7ba <_printf_i+0x212>
 800c7e2:	2500      	movs	r5, #0
 800c7e4:	f104 0619 	add.w	r6, r4, #25
 800c7e8:	e7f5      	b.n	800c7d6 <_printf_i+0x22e>
 800c7ea:	bf00      	nop
 800c7ec:	0800dc85 	.word	0x0800dc85
 800c7f0:	0800dc96 	.word	0x0800dc96

0800c7f4 <_scanf_chars>:
 800c7f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7f8:	4615      	mov	r5, r2
 800c7fa:	688a      	ldr	r2, [r1, #8]
 800c7fc:	4680      	mov	r8, r0
 800c7fe:	460c      	mov	r4, r1
 800c800:	b932      	cbnz	r2, 800c810 <_scanf_chars+0x1c>
 800c802:	698a      	ldr	r2, [r1, #24]
 800c804:	2a00      	cmp	r2, #0
 800c806:	bf0c      	ite	eq
 800c808:	2201      	moveq	r2, #1
 800c80a:	f04f 32ff 	movne.w	r2, #4294967295
 800c80e:	608a      	str	r2, [r1, #8]
 800c810:	6822      	ldr	r2, [r4, #0]
 800c812:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800c8a4 <_scanf_chars+0xb0>
 800c816:	06d1      	lsls	r1, r2, #27
 800c818:	bf5f      	itttt	pl
 800c81a:	681a      	ldrpl	r2, [r3, #0]
 800c81c:	1d11      	addpl	r1, r2, #4
 800c81e:	6019      	strpl	r1, [r3, #0]
 800c820:	6816      	ldrpl	r6, [r2, #0]
 800c822:	2700      	movs	r7, #0
 800c824:	69a0      	ldr	r0, [r4, #24]
 800c826:	b188      	cbz	r0, 800c84c <_scanf_chars+0x58>
 800c828:	2801      	cmp	r0, #1
 800c82a:	d107      	bne.n	800c83c <_scanf_chars+0x48>
 800c82c:	682a      	ldr	r2, [r5, #0]
 800c82e:	7811      	ldrb	r1, [r2, #0]
 800c830:	6962      	ldr	r2, [r4, #20]
 800c832:	5c52      	ldrb	r2, [r2, r1]
 800c834:	b952      	cbnz	r2, 800c84c <_scanf_chars+0x58>
 800c836:	2f00      	cmp	r7, #0
 800c838:	d031      	beq.n	800c89e <_scanf_chars+0xaa>
 800c83a:	e022      	b.n	800c882 <_scanf_chars+0x8e>
 800c83c:	2802      	cmp	r0, #2
 800c83e:	d120      	bne.n	800c882 <_scanf_chars+0x8e>
 800c840:	682b      	ldr	r3, [r5, #0]
 800c842:	781b      	ldrb	r3, [r3, #0]
 800c844:	f813 3009 	ldrb.w	r3, [r3, r9]
 800c848:	071b      	lsls	r3, r3, #28
 800c84a:	d41a      	bmi.n	800c882 <_scanf_chars+0x8e>
 800c84c:	6823      	ldr	r3, [r4, #0]
 800c84e:	06da      	lsls	r2, r3, #27
 800c850:	bf5e      	ittt	pl
 800c852:	682b      	ldrpl	r3, [r5, #0]
 800c854:	781b      	ldrbpl	r3, [r3, #0]
 800c856:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c85a:	682a      	ldr	r2, [r5, #0]
 800c85c:	686b      	ldr	r3, [r5, #4]
 800c85e:	3201      	adds	r2, #1
 800c860:	602a      	str	r2, [r5, #0]
 800c862:	68a2      	ldr	r2, [r4, #8]
 800c864:	3b01      	subs	r3, #1
 800c866:	3a01      	subs	r2, #1
 800c868:	606b      	str	r3, [r5, #4]
 800c86a:	3701      	adds	r7, #1
 800c86c:	60a2      	str	r2, [r4, #8]
 800c86e:	b142      	cbz	r2, 800c882 <_scanf_chars+0x8e>
 800c870:	2b00      	cmp	r3, #0
 800c872:	dcd7      	bgt.n	800c824 <_scanf_chars+0x30>
 800c874:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c878:	4629      	mov	r1, r5
 800c87a:	4640      	mov	r0, r8
 800c87c:	4798      	blx	r3
 800c87e:	2800      	cmp	r0, #0
 800c880:	d0d0      	beq.n	800c824 <_scanf_chars+0x30>
 800c882:	6823      	ldr	r3, [r4, #0]
 800c884:	f013 0310 	ands.w	r3, r3, #16
 800c888:	d105      	bne.n	800c896 <_scanf_chars+0xa2>
 800c88a:	68e2      	ldr	r2, [r4, #12]
 800c88c:	3201      	adds	r2, #1
 800c88e:	60e2      	str	r2, [r4, #12]
 800c890:	69a2      	ldr	r2, [r4, #24]
 800c892:	b102      	cbz	r2, 800c896 <_scanf_chars+0xa2>
 800c894:	7033      	strb	r3, [r6, #0]
 800c896:	6923      	ldr	r3, [r4, #16]
 800c898:	443b      	add	r3, r7
 800c89a:	6123      	str	r3, [r4, #16]
 800c89c:	2000      	movs	r0, #0
 800c89e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8a2:	bf00      	nop
 800c8a4:	0800dcc3 	.word	0x0800dcc3

0800c8a8 <_scanf_i>:
 800c8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8ac:	4698      	mov	r8, r3
 800c8ae:	4b76      	ldr	r3, [pc, #472]	; (800ca88 <_scanf_i+0x1e0>)
 800c8b0:	460c      	mov	r4, r1
 800c8b2:	4682      	mov	sl, r0
 800c8b4:	4616      	mov	r6, r2
 800c8b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c8ba:	b087      	sub	sp, #28
 800c8bc:	ab03      	add	r3, sp, #12
 800c8be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c8c2:	4b72      	ldr	r3, [pc, #456]	; (800ca8c <_scanf_i+0x1e4>)
 800c8c4:	69a1      	ldr	r1, [r4, #24]
 800c8c6:	4a72      	ldr	r2, [pc, #456]	; (800ca90 <_scanf_i+0x1e8>)
 800c8c8:	2903      	cmp	r1, #3
 800c8ca:	bf18      	it	ne
 800c8cc:	461a      	movne	r2, r3
 800c8ce:	68a3      	ldr	r3, [r4, #8]
 800c8d0:	9201      	str	r2, [sp, #4]
 800c8d2:	1e5a      	subs	r2, r3, #1
 800c8d4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c8d8:	bf88      	it	hi
 800c8da:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c8de:	4627      	mov	r7, r4
 800c8e0:	bf82      	ittt	hi
 800c8e2:	eb03 0905 	addhi.w	r9, r3, r5
 800c8e6:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c8ea:	60a3      	strhi	r3, [r4, #8]
 800c8ec:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c8f0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c8f4:	bf98      	it	ls
 800c8f6:	f04f 0900 	movls.w	r9, #0
 800c8fa:	6023      	str	r3, [r4, #0]
 800c8fc:	463d      	mov	r5, r7
 800c8fe:	f04f 0b00 	mov.w	fp, #0
 800c902:	6831      	ldr	r1, [r6, #0]
 800c904:	ab03      	add	r3, sp, #12
 800c906:	7809      	ldrb	r1, [r1, #0]
 800c908:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c90c:	2202      	movs	r2, #2
 800c90e:	f7f3 fc87 	bl	8000220 <memchr>
 800c912:	b328      	cbz	r0, 800c960 <_scanf_i+0xb8>
 800c914:	f1bb 0f01 	cmp.w	fp, #1
 800c918:	d159      	bne.n	800c9ce <_scanf_i+0x126>
 800c91a:	6862      	ldr	r2, [r4, #4]
 800c91c:	b92a      	cbnz	r2, 800c92a <_scanf_i+0x82>
 800c91e:	6822      	ldr	r2, [r4, #0]
 800c920:	2308      	movs	r3, #8
 800c922:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c926:	6063      	str	r3, [r4, #4]
 800c928:	6022      	str	r2, [r4, #0]
 800c92a:	6822      	ldr	r2, [r4, #0]
 800c92c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c930:	6022      	str	r2, [r4, #0]
 800c932:	68a2      	ldr	r2, [r4, #8]
 800c934:	1e51      	subs	r1, r2, #1
 800c936:	60a1      	str	r1, [r4, #8]
 800c938:	b192      	cbz	r2, 800c960 <_scanf_i+0xb8>
 800c93a:	6832      	ldr	r2, [r6, #0]
 800c93c:	1c51      	adds	r1, r2, #1
 800c93e:	6031      	str	r1, [r6, #0]
 800c940:	7812      	ldrb	r2, [r2, #0]
 800c942:	f805 2b01 	strb.w	r2, [r5], #1
 800c946:	6872      	ldr	r2, [r6, #4]
 800c948:	3a01      	subs	r2, #1
 800c94a:	2a00      	cmp	r2, #0
 800c94c:	6072      	str	r2, [r6, #4]
 800c94e:	dc07      	bgt.n	800c960 <_scanf_i+0xb8>
 800c950:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800c954:	4631      	mov	r1, r6
 800c956:	4650      	mov	r0, sl
 800c958:	4790      	blx	r2
 800c95a:	2800      	cmp	r0, #0
 800c95c:	f040 8085 	bne.w	800ca6a <_scanf_i+0x1c2>
 800c960:	f10b 0b01 	add.w	fp, fp, #1
 800c964:	f1bb 0f03 	cmp.w	fp, #3
 800c968:	d1cb      	bne.n	800c902 <_scanf_i+0x5a>
 800c96a:	6863      	ldr	r3, [r4, #4]
 800c96c:	b90b      	cbnz	r3, 800c972 <_scanf_i+0xca>
 800c96e:	230a      	movs	r3, #10
 800c970:	6063      	str	r3, [r4, #4]
 800c972:	6863      	ldr	r3, [r4, #4]
 800c974:	4947      	ldr	r1, [pc, #284]	; (800ca94 <_scanf_i+0x1ec>)
 800c976:	6960      	ldr	r0, [r4, #20]
 800c978:	1ac9      	subs	r1, r1, r3
 800c97a:	f000 f88d 	bl	800ca98 <__sccl>
 800c97e:	f04f 0b00 	mov.w	fp, #0
 800c982:	68a3      	ldr	r3, [r4, #8]
 800c984:	6822      	ldr	r2, [r4, #0]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d03d      	beq.n	800ca06 <_scanf_i+0x15e>
 800c98a:	6831      	ldr	r1, [r6, #0]
 800c98c:	6960      	ldr	r0, [r4, #20]
 800c98e:	f891 c000 	ldrb.w	ip, [r1]
 800c992:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c996:	2800      	cmp	r0, #0
 800c998:	d035      	beq.n	800ca06 <_scanf_i+0x15e>
 800c99a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800c99e:	d124      	bne.n	800c9ea <_scanf_i+0x142>
 800c9a0:	0510      	lsls	r0, r2, #20
 800c9a2:	d522      	bpl.n	800c9ea <_scanf_i+0x142>
 800c9a4:	f10b 0b01 	add.w	fp, fp, #1
 800c9a8:	f1b9 0f00 	cmp.w	r9, #0
 800c9ac:	d003      	beq.n	800c9b6 <_scanf_i+0x10e>
 800c9ae:	3301      	adds	r3, #1
 800c9b0:	f109 39ff 	add.w	r9, r9, #4294967295
 800c9b4:	60a3      	str	r3, [r4, #8]
 800c9b6:	6873      	ldr	r3, [r6, #4]
 800c9b8:	3b01      	subs	r3, #1
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	6073      	str	r3, [r6, #4]
 800c9be:	dd1b      	ble.n	800c9f8 <_scanf_i+0x150>
 800c9c0:	6833      	ldr	r3, [r6, #0]
 800c9c2:	3301      	adds	r3, #1
 800c9c4:	6033      	str	r3, [r6, #0]
 800c9c6:	68a3      	ldr	r3, [r4, #8]
 800c9c8:	3b01      	subs	r3, #1
 800c9ca:	60a3      	str	r3, [r4, #8]
 800c9cc:	e7d9      	b.n	800c982 <_scanf_i+0xda>
 800c9ce:	f1bb 0f02 	cmp.w	fp, #2
 800c9d2:	d1ae      	bne.n	800c932 <_scanf_i+0x8a>
 800c9d4:	6822      	ldr	r2, [r4, #0]
 800c9d6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c9da:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c9de:	d1bf      	bne.n	800c960 <_scanf_i+0xb8>
 800c9e0:	2310      	movs	r3, #16
 800c9e2:	6063      	str	r3, [r4, #4]
 800c9e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c9e8:	e7a2      	b.n	800c930 <_scanf_i+0x88>
 800c9ea:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800c9ee:	6022      	str	r2, [r4, #0]
 800c9f0:	780b      	ldrb	r3, [r1, #0]
 800c9f2:	f805 3b01 	strb.w	r3, [r5], #1
 800c9f6:	e7de      	b.n	800c9b6 <_scanf_i+0x10e>
 800c9f8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c9fc:	4631      	mov	r1, r6
 800c9fe:	4650      	mov	r0, sl
 800ca00:	4798      	blx	r3
 800ca02:	2800      	cmp	r0, #0
 800ca04:	d0df      	beq.n	800c9c6 <_scanf_i+0x11e>
 800ca06:	6823      	ldr	r3, [r4, #0]
 800ca08:	05db      	lsls	r3, r3, #23
 800ca0a:	d50d      	bpl.n	800ca28 <_scanf_i+0x180>
 800ca0c:	42bd      	cmp	r5, r7
 800ca0e:	d909      	bls.n	800ca24 <_scanf_i+0x17c>
 800ca10:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ca14:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ca18:	4632      	mov	r2, r6
 800ca1a:	4650      	mov	r0, sl
 800ca1c:	4798      	blx	r3
 800ca1e:	f105 39ff 	add.w	r9, r5, #4294967295
 800ca22:	464d      	mov	r5, r9
 800ca24:	42bd      	cmp	r5, r7
 800ca26:	d02d      	beq.n	800ca84 <_scanf_i+0x1dc>
 800ca28:	6822      	ldr	r2, [r4, #0]
 800ca2a:	f012 0210 	ands.w	r2, r2, #16
 800ca2e:	d113      	bne.n	800ca58 <_scanf_i+0x1b0>
 800ca30:	702a      	strb	r2, [r5, #0]
 800ca32:	6863      	ldr	r3, [r4, #4]
 800ca34:	9e01      	ldr	r6, [sp, #4]
 800ca36:	4639      	mov	r1, r7
 800ca38:	4650      	mov	r0, sl
 800ca3a:	47b0      	blx	r6
 800ca3c:	6821      	ldr	r1, [r4, #0]
 800ca3e:	f8d8 3000 	ldr.w	r3, [r8]
 800ca42:	f011 0f20 	tst.w	r1, #32
 800ca46:	d013      	beq.n	800ca70 <_scanf_i+0x1c8>
 800ca48:	1d1a      	adds	r2, r3, #4
 800ca4a:	f8c8 2000 	str.w	r2, [r8]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	6018      	str	r0, [r3, #0]
 800ca52:	68e3      	ldr	r3, [r4, #12]
 800ca54:	3301      	adds	r3, #1
 800ca56:	60e3      	str	r3, [r4, #12]
 800ca58:	1bed      	subs	r5, r5, r7
 800ca5a:	44ab      	add	fp, r5
 800ca5c:	6925      	ldr	r5, [r4, #16]
 800ca5e:	445d      	add	r5, fp
 800ca60:	6125      	str	r5, [r4, #16]
 800ca62:	2000      	movs	r0, #0
 800ca64:	b007      	add	sp, #28
 800ca66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca6a:	f04f 0b00 	mov.w	fp, #0
 800ca6e:	e7ca      	b.n	800ca06 <_scanf_i+0x15e>
 800ca70:	1d1a      	adds	r2, r3, #4
 800ca72:	f8c8 2000 	str.w	r2, [r8]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	f011 0f01 	tst.w	r1, #1
 800ca7c:	bf14      	ite	ne
 800ca7e:	8018      	strhne	r0, [r3, #0]
 800ca80:	6018      	streq	r0, [r3, #0]
 800ca82:	e7e6      	b.n	800ca52 <_scanf_i+0x1aa>
 800ca84:	2001      	movs	r0, #1
 800ca86:	e7ed      	b.n	800ca64 <_scanf_i+0x1bc>
 800ca88:	0800d86c 	.word	0x0800d86c
 800ca8c:	0800ccf5 	.word	0x0800ccf5
 800ca90:	0800cc0d 	.word	0x0800cc0d
 800ca94:	0800dcc0 	.word	0x0800dcc0

0800ca98 <__sccl>:
 800ca98:	b570      	push	{r4, r5, r6, lr}
 800ca9a:	780b      	ldrb	r3, [r1, #0]
 800ca9c:	4604      	mov	r4, r0
 800ca9e:	2b5e      	cmp	r3, #94	; 0x5e
 800caa0:	bf0b      	itete	eq
 800caa2:	784b      	ldrbeq	r3, [r1, #1]
 800caa4:	1c48      	addne	r0, r1, #1
 800caa6:	1c88      	addeq	r0, r1, #2
 800caa8:	2200      	movne	r2, #0
 800caaa:	bf08      	it	eq
 800caac:	2201      	moveq	r2, #1
 800caae:	1e61      	subs	r1, r4, #1
 800cab0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800cab4:	f801 2f01 	strb.w	r2, [r1, #1]!
 800cab8:	42a9      	cmp	r1, r5
 800caba:	d1fb      	bne.n	800cab4 <__sccl+0x1c>
 800cabc:	b90b      	cbnz	r3, 800cac2 <__sccl+0x2a>
 800cabe:	3801      	subs	r0, #1
 800cac0:	bd70      	pop	{r4, r5, r6, pc}
 800cac2:	f082 0201 	eor.w	r2, r2, #1
 800cac6:	54e2      	strb	r2, [r4, r3]
 800cac8:	4605      	mov	r5, r0
 800caca:	4628      	mov	r0, r5
 800cacc:	f810 1b01 	ldrb.w	r1, [r0], #1
 800cad0:	292d      	cmp	r1, #45	; 0x2d
 800cad2:	d006      	beq.n	800cae2 <__sccl+0x4a>
 800cad4:	295d      	cmp	r1, #93	; 0x5d
 800cad6:	d0f3      	beq.n	800cac0 <__sccl+0x28>
 800cad8:	b909      	cbnz	r1, 800cade <__sccl+0x46>
 800cada:	4628      	mov	r0, r5
 800cadc:	e7f0      	b.n	800cac0 <__sccl+0x28>
 800cade:	460b      	mov	r3, r1
 800cae0:	e7f1      	b.n	800cac6 <__sccl+0x2e>
 800cae2:	786e      	ldrb	r6, [r5, #1]
 800cae4:	2e5d      	cmp	r6, #93	; 0x5d
 800cae6:	d0fa      	beq.n	800cade <__sccl+0x46>
 800cae8:	42b3      	cmp	r3, r6
 800caea:	dcf8      	bgt.n	800cade <__sccl+0x46>
 800caec:	3502      	adds	r5, #2
 800caee:	4619      	mov	r1, r3
 800caf0:	3101      	adds	r1, #1
 800caf2:	428e      	cmp	r6, r1
 800caf4:	5462      	strb	r2, [r4, r1]
 800caf6:	dcfb      	bgt.n	800caf0 <__sccl+0x58>
 800caf8:	1af1      	subs	r1, r6, r3
 800cafa:	3901      	subs	r1, #1
 800cafc:	1c58      	adds	r0, r3, #1
 800cafe:	42b3      	cmp	r3, r6
 800cb00:	bfa8      	it	ge
 800cb02:	2100      	movge	r1, #0
 800cb04:	1843      	adds	r3, r0, r1
 800cb06:	e7e0      	b.n	800caca <__sccl+0x32>

0800cb08 <_strtol_l.constprop.0>:
 800cb08:	2b01      	cmp	r3, #1
 800cb0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb0e:	d001      	beq.n	800cb14 <_strtol_l.constprop.0+0xc>
 800cb10:	2b24      	cmp	r3, #36	; 0x24
 800cb12:	d906      	bls.n	800cb22 <_strtol_l.constprop.0+0x1a>
 800cb14:	f7ff f8ea 	bl	800bcec <__errno>
 800cb18:	2316      	movs	r3, #22
 800cb1a:	6003      	str	r3, [r0, #0]
 800cb1c:	2000      	movs	r0, #0
 800cb1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb22:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800cc08 <_strtol_l.constprop.0+0x100>
 800cb26:	460d      	mov	r5, r1
 800cb28:	462e      	mov	r6, r5
 800cb2a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cb2e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800cb32:	f017 0708 	ands.w	r7, r7, #8
 800cb36:	d1f7      	bne.n	800cb28 <_strtol_l.constprop.0+0x20>
 800cb38:	2c2d      	cmp	r4, #45	; 0x2d
 800cb3a:	d132      	bne.n	800cba2 <_strtol_l.constprop.0+0x9a>
 800cb3c:	782c      	ldrb	r4, [r5, #0]
 800cb3e:	2701      	movs	r7, #1
 800cb40:	1cb5      	adds	r5, r6, #2
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d05b      	beq.n	800cbfe <_strtol_l.constprop.0+0xf6>
 800cb46:	2b10      	cmp	r3, #16
 800cb48:	d109      	bne.n	800cb5e <_strtol_l.constprop.0+0x56>
 800cb4a:	2c30      	cmp	r4, #48	; 0x30
 800cb4c:	d107      	bne.n	800cb5e <_strtol_l.constprop.0+0x56>
 800cb4e:	782c      	ldrb	r4, [r5, #0]
 800cb50:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800cb54:	2c58      	cmp	r4, #88	; 0x58
 800cb56:	d14d      	bne.n	800cbf4 <_strtol_l.constprop.0+0xec>
 800cb58:	786c      	ldrb	r4, [r5, #1]
 800cb5a:	2310      	movs	r3, #16
 800cb5c:	3502      	adds	r5, #2
 800cb5e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800cb62:	f108 38ff 	add.w	r8, r8, #4294967295
 800cb66:	f04f 0c00 	mov.w	ip, #0
 800cb6a:	fbb8 f9f3 	udiv	r9, r8, r3
 800cb6e:	4666      	mov	r6, ip
 800cb70:	fb03 8a19 	mls	sl, r3, r9, r8
 800cb74:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800cb78:	f1be 0f09 	cmp.w	lr, #9
 800cb7c:	d816      	bhi.n	800cbac <_strtol_l.constprop.0+0xa4>
 800cb7e:	4674      	mov	r4, lr
 800cb80:	42a3      	cmp	r3, r4
 800cb82:	dd24      	ble.n	800cbce <_strtol_l.constprop.0+0xc6>
 800cb84:	f1bc 0f00 	cmp.w	ip, #0
 800cb88:	db1e      	blt.n	800cbc8 <_strtol_l.constprop.0+0xc0>
 800cb8a:	45b1      	cmp	r9, r6
 800cb8c:	d31c      	bcc.n	800cbc8 <_strtol_l.constprop.0+0xc0>
 800cb8e:	d101      	bne.n	800cb94 <_strtol_l.constprop.0+0x8c>
 800cb90:	45a2      	cmp	sl, r4
 800cb92:	db19      	blt.n	800cbc8 <_strtol_l.constprop.0+0xc0>
 800cb94:	fb06 4603 	mla	r6, r6, r3, r4
 800cb98:	f04f 0c01 	mov.w	ip, #1
 800cb9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cba0:	e7e8      	b.n	800cb74 <_strtol_l.constprop.0+0x6c>
 800cba2:	2c2b      	cmp	r4, #43	; 0x2b
 800cba4:	bf04      	itt	eq
 800cba6:	782c      	ldrbeq	r4, [r5, #0]
 800cba8:	1cb5      	addeq	r5, r6, #2
 800cbaa:	e7ca      	b.n	800cb42 <_strtol_l.constprop.0+0x3a>
 800cbac:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800cbb0:	f1be 0f19 	cmp.w	lr, #25
 800cbb4:	d801      	bhi.n	800cbba <_strtol_l.constprop.0+0xb2>
 800cbb6:	3c37      	subs	r4, #55	; 0x37
 800cbb8:	e7e2      	b.n	800cb80 <_strtol_l.constprop.0+0x78>
 800cbba:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800cbbe:	f1be 0f19 	cmp.w	lr, #25
 800cbc2:	d804      	bhi.n	800cbce <_strtol_l.constprop.0+0xc6>
 800cbc4:	3c57      	subs	r4, #87	; 0x57
 800cbc6:	e7db      	b.n	800cb80 <_strtol_l.constprop.0+0x78>
 800cbc8:	f04f 3cff 	mov.w	ip, #4294967295
 800cbcc:	e7e6      	b.n	800cb9c <_strtol_l.constprop.0+0x94>
 800cbce:	f1bc 0f00 	cmp.w	ip, #0
 800cbd2:	da05      	bge.n	800cbe0 <_strtol_l.constprop.0+0xd8>
 800cbd4:	2322      	movs	r3, #34	; 0x22
 800cbd6:	6003      	str	r3, [r0, #0]
 800cbd8:	4646      	mov	r6, r8
 800cbda:	b942      	cbnz	r2, 800cbee <_strtol_l.constprop.0+0xe6>
 800cbdc:	4630      	mov	r0, r6
 800cbde:	e79e      	b.n	800cb1e <_strtol_l.constprop.0+0x16>
 800cbe0:	b107      	cbz	r7, 800cbe4 <_strtol_l.constprop.0+0xdc>
 800cbe2:	4276      	negs	r6, r6
 800cbe4:	2a00      	cmp	r2, #0
 800cbe6:	d0f9      	beq.n	800cbdc <_strtol_l.constprop.0+0xd4>
 800cbe8:	f1bc 0f00 	cmp.w	ip, #0
 800cbec:	d000      	beq.n	800cbf0 <_strtol_l.constprop.0+0xe8>
 800cbee:	1e69      	subs	r1, r5, #1
 800cbf0:	6011      	str	r1, [r2, #0]
 800cbf2:	e7f3      	b.n	800cbdc <_strtol_l.constprop.0+0xd4>
 800cbf4:	2430      	movs	r4, #48	; 0x30
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d1b1      	bne.n	800cb5e <_strtol_l.constprop.0+0x56>
 800cbfa:	2308      	movs	r3, #8
 800cbfc:	e7af      	b.n	800cb5e <_strtol_l.constprop.0+0x56>
 800cbfe:	2c30      	cmp	r4, #48	; 0x30
 800cc00:	d0a5      	beq.n	800cb4e <_strtol_l.constprop.0+0x46>
 800cc02:	230a      	movs	r3, #10
 800cc04:	e7ab      	b.n	800cb5e <_strtol_l.constprop.0+0x56>
 800cc06:	bf00      	nop
 800cc08:	0800dcc3 	.word	0x0800dcc3

0800cc0c <_strtol_r>:
 800cc0c:	f7ff bf7c 	b.w	800cb08 <_strtol_l.constprop.0>

0800cc10 <_strtoul_l.constprop.0>:
 800cc10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cc14:	4f36      	ldr	r7, [pc, #216]	; (800ccf0 <_strtoul_l.constprop.0+0xe0>)
 800cc16:	4686      	mov	lr, r0
 800cc18:	460d      	mov	r5, r1
 800cc1a:	4628      	mov	r0, r5
 800cc1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cc20:	5de6      	ldrb	r6, [r4, r7]
 800cc22:	f016 0608 	ands.w	r6, r6, #8
 800cc26:	d1f8      	bne.n	800cc1a <_strtoul_l.constprop.0+0xa>
 800cc28:	2c2d      	cmp	r4, #45	; 0x2d
 800cc2a:	d12f      	bne.n	800cc8c <_strtoul_l.constprop.0+0x7c>
 800cc2c:	782c      	ldrb	r4, [r5, #0]
 800cc2e:	2601      	movs	r6, #1
 800cc30:	1c85      	adds	r5, r0, #2
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d057      	beq.n	800cce6 <_strtoul_l.constprop.0+0xd6>
 800cc36:	2b10      	cmp	r3, #16
 800cc38:	d109      	bne.n	800cc4e <_strtoul_l.constprop.0+0x3e>
 800cc3a:	2c30      	cmp	r4, #48	; 0x30
 800cc3c:	d107      	bne.n	800cc4e <_strtoul_l.constprop.0+0x3e>
 800cc3e:	7828      	ldrb	r0, [r5, #0]
 800cc40:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800cc44:	2858      	cmp	r0, #88	; 0x58
 800cc46:	d149      	bne.n	800ccdc <_strtoul_l.constprop.0+0xcc>
 800cc48:	786c      	ldrb	r4, [r5, #1]
 800cc4a:	2310      	movs	r3, #16
 800cc4c:	3502      	adds	r5, #2
 800cc4e:	f04f 38ff 	mov.w	r8, #4294967295
 800cc52:	2700      	movs	r7, #0
 800cc54:	fbb8 f8f3 	udiv	r8, r8, r3
 800cc58:	fb03 f908 	mul.w	r9, r3, r8
 800cc5c:	ea6f 0909 	mvn.w	r9, r9
 800cc60:	4638      	mov	r0, r7
 800cc62:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800cc66:	f1bc 0f09 	cmp.w	ip, #9
 800cc6a:	d814      	bhi.n	800cc96 <_strtoul_l.constprop.0+0x86>
 800cc6c:	4664      	mov	r4, ip
 800cc6e:	42a3      	cmp	r3, r4
 800cc70:	dd22      	ble.n	800ccb8 <_strtoul_l.constprop.0+0xa8>
 800cc72:	2f00      	cmp	r7, #0
 800cc74:	db1d      	blt.n	800ccb2 <_strtoul_l.constprop.0+0xa2>
 800cc76:	4580      	cmp	r8, r0
 800cc78:	d31b      	bcc.n	800ccb2 <_strtoul_l.constprop.0+0xa2>
 800cc7a:	d101      	bne.n	800cc80 <_strtoul_l.constprop.0+0x70>
 800cc7c:	45a1      	cmp	r9, r4
 800cc7e:	db18      	blt.n	800ccb2 <_strtoul_l.constprop.0+0xa2>
 800cc80:	fb00 4003 	mla	r0, r0, r3, r4
 800cc84:	2701      	movs	r7, #1
 800cc86:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cc8a:	e7ea      	b.n	800cc62 <_strtoul_l.constprop.0+0x52>
 800cc8c:	2c2b      	cmp	r4, #43	; 0x2b
 800cc8e:	bf04      	itt	eq
 800cc90:	782c      	ldrbeq	r4, [r5, #0]
 800cc92:	1c85      	addeq	r5, r0, #2
 800cc94:	e7cd      	b.n	800cc32 <_strtoul_l.constprop.0+0x22>
 800cc96:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800cc9a:	f1bc 0f19 	cmp.w	ip, #25
 800cc9e:	d801      	bhi.n	800cca4 <_strtoul_l.constprop.0+0x94>
 800cca0:	3c37      	subs	r4, #55	; 0x37
 800cca2:	e7e4      	b.n	800cc6e <_strtoul_l.constprop.0+0x5e>
 800cca4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800cca8:	f1bc 0f19 	cmp.w	ip, #25
 800ccac:	d804      	bhi.n	800ccb8 <_strtoul_l.constprop.0+0xa8>
 800ccae:	3c57      	subs	r4, #87	; 0x57
 800ccb0:	e7dd      	b.n	800cc6e <_strtoul_l.constprop.0+0x5e>
 800ccb2:	f04f 37ff 	mov.w	r7, #4294967295
 800ccb6:	e7e6      	b.n	800cc86 <_strtoul_l.constprop.0+0x76>
 800ccb8:	2f00      	cmp	r7, #0
 800ccba:	da07      	bge.n	800cccc <_strtoul_l.constprop.0+0xbc>
 800ccbc:	2322      	movs	r3, #34	; 0x22
 800ccbe:	f8ce 3000 	str.w	r3, [lr]
 800ccc2:	f04f 30ff 	mov.w	r0, #4294967295
 800ccc6:	b932      	cbnz	r2, 800ccd6 <_strtoul_l.constprop.0+0xc6>
 800ccc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cccc:	b106      	cbz	r6, 800ccd0 <_strtoul_l.constprop.0+0xc0>
 800ccce:	4240      	negs	r0, r0
 800ccd0:	2a00      	cmp	r2, #0
 800ccd2:	d0f9      	beq.n	800ccc8 <_strtoul_l.constprop.0+0xb8>
 800ccd4:	b107      	cbz	r7, 800ccd8 <_strtoul_l.constprop.0+0xc8>
 800ccd6:	1e69      	subs	r1, r5, #1
 800ccd8:	6011      	str	r1, [r2, #0]
 800ccda:	e7f5      	b.n	800ccc8 <_strtoul_l.constprop.0+0xb8>
 800ccdc:	2430      	movs	r4, #48	; 0x30
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d1b5      	bne.n	800cc4e <_strtoul_l.constprop.0+0x3e>
 800cce2:	2308      	movs	r3, #8
 800cce4:	e7b3      	b.n	800cc4e <_strtoul_l.constprop.0+0x3e>
 800cce6:	2c30      	cmp	r4, #48	; 0x30
 800cce8:	d0a9      	beq.n	800cc3e <_strtoul_l.constprop.0+0x2e>
 800ccea:	230a      	movs	r3, #10
 800ccec:	e7af      	b.n	800cc4e <_strtoul_l.constprop.0+0x3e>
 800ccee:	bf00      	nop
 800ccf0:	0800dcc3 	.word	0x0800dcc3

0800ccf4 <_strtoul_r>:
 800ccf4:	f7ff bf8c 	b.w	800cc10 <_strtoul_l.constprop.0>

0800ccf8 <__submore>:
 800ccf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccfc:	460c      	mov	r4, r1
 800ccfe:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800cd00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd04:	4299      	cmp	r1, r3
 800cd06:	d11d      	bne.n	800cd44 <__submore+0x4c>
 800cd08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800cd0c:	f000 f8b6 	bl	800ce7c <_malloc_r>
 800cd10:	b918      	cbnz	r0, 800cd1a <__submore+0x22>
 800cd12:	f04f 30ff 	mov.w	r0, #4294967295
 800cd16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd1e:	63a3      	str	r3, [r4, #56]	; 0x38
 800cd20:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800cd24:	6360      	str	r0, [r4, #52]	; 0x34
 800cd26:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800cd2a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800cd2e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800cd32:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800cd36:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800cd3a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800cd3e:	6020      	str	r0, [r4, #0]
 800cd40:	2000      	movs	r0, #0
 800cd42:	e7e8      	b.n	800cd16 <__submore+0x1e>
 800cd44:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800cd46:	0077      	lsls	r7, r6, #1
 800cd48:	463a      	mov	r2, r7
 800cd4a:	f000 f90b 	bl	800cf64 <_realloc_r>
 800cd4e:	4605      	mov	r5, r0
 800cd50:	2800      	cmp	r0, #0
 800cd52:	d0de      	beq.n	800cd12 <__submore+0x1a>
 800cd54:	eb00 0806 	add.w	r8, r0, r6
 800cd58:	4601      	mov	r1, r0
 800cd5a:	4632      	mov	r2, r6
 800cd5c:	4640      	mov	r0, r8
 800cd5e:	f7fe ffef 	bl	800bd40 <memcpy>
 800cd62:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800cd66:	f8c4 8000 	str.w	r8, [r4]
 800cd6a:	e7e9      	b.n	800cd40 <__submore+0x48>

0800cd6c <__retarget_lock_acquire_recursive>:
 800cd6c:	4770      	bx	lr

0800cd6e <__retarget_lock_release_recursive>:
 800cd6e:	4770      	bx	lr

0800cd70 <memmove>:
 800cd70:	4288      	cmp	r0, r1
 800cd72:	b510      	push	{r4, lr}
 800cd74:	eb01 0402 	add.w	r4, r1, r2
 800cd78:	d902      	bls.n	800cd80 <memmove+0x10>
 800cd7a:	4284      	cmp	r4, r0
 800cd7c:	4623      	mov	r3, r4
 800cd7e:	d807      	bhi.n	800cd90 <memmove+0x20>
 800cd80:	1e43      	subs	r3, r0, #1
 800cd82:	42a1      	cmp	r1, r4
 800cd84:	d008      	beq.n	800cd98 <memmove+0x28>
 800cd86:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cd8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cd8e:	e7f8      	b.n	800cd82 <memmove+0x12>
 800cd90:	4402      	add	r2, r0
 800cd92:	4601      	mov	r1, r0
 800cd94:	428a      	cmp	r2, r1
 800cd96:	d100      	bne.n	800cd9a <memmove+0x2a>
 800cd98:	bd10      	pop	{r4, pc}
 800cd9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cd9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cda2:	e7f7      	b.n	800cd94 <memmove+0x24>

0800cda4 <_free_r>:
 800cda4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cda6:	2900      	cmp	r1, #0
 800cda8:	d044      	beq.n	800ce34 <_free_r+0x90>
 800cdaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cdae:	9001      	str	r0, [sp, #4]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	f1a1 0404 	sub.w	r4, r1, #4
 800cdb6:	bfb8      	it	lt
 800cdb8:	18e4      	addlt	r4, r4, r3
 800cdba:	f000 f913 	bl	800cfe4 <__malloc_lock>
 800cdbe:	4a1e      	ldr	r2, [pc, #120]	; (800ce38 <_free_r+0x94>)
 800cdc0:	9801      	ldr	r0, [sp, #4]
 800cdc2:	6813      	ldr	r3, [r2, #0]
 800cdc4:	b933      	cbnz	r3, 800cdd4 <_free_r+0x30>
 800cdc6:	6063      	str	r3, [r4, #4]
 800cdc8:	6014      	str	r4, [r2, #0]
 800cdca:	b003      	add	sp, #12
 800cdcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cdd0:	f000 b90e 	b.w	800cff0 <__malloc_unlock>
 800cdd4:	42a3      	cmp	r3, r4
 800cdd6:	d908      	bls.n	800cdea <_free_r+0x46>
 800cdd8:	6825      	ldr	r5, [r4, #0]
 800cdda:	1961      	adds	r1, r4, r5
 800cddc:	428b      	cmp	r3, r1
 800cdde:	bf01      	itttt	eq
 800cde0:	6819      	ldreq	r1, [r3, #0]
 800cde2:	685b      	ldreq	r3, [r3, #4]
 800cde4:	1949      	addeq	r1, r1, r5
 800cde6:	6021      	streq	r1, [r4, #0]
 800cde8:	e7ed      	b.n	800cdc6 <_free_r+0x22>
 800cdea:	461a      	mov	r2, r3
 800cdec:	685b      	ldr	r3, [r3, #4]
 800cdee:	b10b      	cbz	r3, 800cdf4 <_free_r+0x50>
 800cdf0:	42a3      	cmp	r3, r4
 800cdf2:	d9fa      	bls.n	800cdea <_free_r+0x46>
 800cdf4:	6811      	ldr	r1, [r2, #0]
 800cdf6:	1855      	adds	r5, r2, r1
 800cdf8:	42a5      	cmp	r5, r4
 800cdfa:	d10b      	bne.n	800ce14 <_free_r+0x70>
 800cdfc:	6824      	ldr	r4, [r4, #0]
 800cdfe:	4421      	add	r1, r4
 800ce00:	1854      	adds	r4, r2, r1
 800ce02:	42a3      	cmp	r3, r4
 800ce04:	6011      	str	r1, [r2, #0]
 800ce06:	d1e0      	bne.n	800cdca <_free_r+0x26>
 800ce08:	681c      	ldr	r4, [r3, #0]
 800ce0a:	685b      	ldr	r3, [r3, #4]
 800ce0c:	6053      	str	r3, [r2, #4]
 800ce0e:	4421      	add	r1, r4
 800ce10:	6011      	str	r1, [r2, #0]
 800ce12:	e7da      	b.n	800cdca <_free_r+0x26>
 800ce14:	d902      	bls.n	800ce1c <_free_r+0x78>
 800ce16:	230c      	movs	r3, #12
 800ce18:	6003      	str	r3, [r0, #0]
 800ce1a:	e7d6      	b.n	800cdca <_free_r+0x26>
 800ce1c:	6825      	ldr	r5, [r4, #0]
 800ce1e:	1961      	adds	r1, r4, r5
 800ce20:	428b      	cmp	r3, r1
 800ce22:	bf04      	itt	eq
 800ce24:	6819      	ldreq	r1, [r3, #0]
 800ce26:	685b      	ldreq	r3, [r3, #4]
 800ce28:	6063      	str	r3, [r4, #4]
 800ce2a:	bf04      	itt	eq
 800ce2c:	1949      	addeq	r1, r1, r5
 800ce2e:	6021      	streq	r1, [r4, #0]
 800ce30:	6054      	str	r4, [r2, #4]
 800ce32:	e7ca      	b.n	800cdca <_free_r+0x26>
 800ce34:	b003      	add	sp, #12
 800ce36:	bd30      	pop	{r4, r5, pc}
 800ce38:	20005064 	.word	0x20005064

0800ce3c <sbrk_aligned>:
 800ce3c:	b570      	push	{r4, r5, r6, lr}
 800ce3e:	4e0e      	ldr	r6, [pc, #56]	; (800ce78 <sbrk_aligned+0x3c>)
 800ce40:	460c      	mov	r4, r1
 800ce42:	6831      	ldr	r1, [r6, #0]
 800ce44:	4605      	mov	r5, r0
 800ce46:	b911      	cbnz	r1, 800ce4e <sbrk_aligned+0x12>
 800ce48:	f000 f8bc 	bl	800cfc4 <_sbrk_r>
 800ce4c:	6030      	str	r0, [r6, #0]
 800ce4e:	4621      	mov	r1, r4
 800ce50:	4628      	mov	r0, r5
 800ce52:	f000 f8b7 	bl	800cfc4 <_sbrk_r>
 800ce56:	1c43      	adds	r3, r0, #1
 800ce58:	d00a      	beq.n	800ce70 <sbrk_aligned+0x34>
 800ce5a:	1cc4      	adds	r4, r0, #3
 800ce5c:	f024 0403 	bic.w	r4, r4, #3
 800ce60:	42a0      	cmp	r0, r4
 800ce62:	d007      	beq.n	800ce74 <sbrk_aligned+0x38>
 800ce64:	1a21      	subs	r1, r4, r0
 800ce66:	4628      	mov	r0, r5
 800ce68:	f000 f8ac 	bl	800cfc4 <_sbrk_r>
 800ce6c:	3001      	adds	r0, #1
 800ce6e:	d101      	bne.n	800ce74 <sbrk_aligned+0x38>
 800ce70:	f04f 34ff 	mov.w	r4, #4294967295
 800ce74:	4620      	mov	r0, r4
 800ce76:	bd70      	pop	{r4, r5, r6, pc}
 800ce78:	20005068 	.word	0x20005068

0800ce7c <_malloc_r>:
 800ce7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce80:	1ccd      	adds	r5, r1, #3
 800ce82:	f025 0503 	bic.w	r5, r5, #3
 800ce86:	3508      	adds	r5, #8
 800ce88:	2d0c      	cmp	r5, #12
 800ce8a:	bf38      	it	cc
 800ce8c:	250c      	movcc	r5, #12
 800ce8e:	2d00      	cmp	r5, #0
 800ce90:	4607      	mov	r7, r0
 800ce92:	db01      	blt.n	800ce98 <_malloc_r+0x1c>
 800ce94:	42a9      	cmp	r1, r5
 800ce96:	d905      	bls.n	800cea4 <_malloc_r+0x28>
 800ce98:	230c      	movs	r3, #12
 800ce9a:	603b      	str	r3, [r7, #0]
 800ce9c:	2600      	movs	r6, #0
 800ce9e:	4630      	mov	r0, r6
 800cea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cea4:	4e2e      	ldr	r6, [pc, #184]	; (800cf60 <_malloc_r+0xe4>)
 800cea6:	f000 f89d 	bl	800cfe4 <__malloc_lock>
 800ceaa:	6833      	ldr	r3, [r6, #0]
 800ceac:	461c      	mov	r4, r3
 800ceae:	bb34      	cbnz	r4, 800cefe <_malloc_r+0x82>
 800ceb0:	4629      	mov	r1, r5
 800ceb2:	4638      	mov	r0, r7
 800ceb4:	f7ff ffc2 	bl	800ce3c <sbrk_aligned>
 800ceb8:	1c43      	adds	r3, r0, #1
 800ceba:	4604      	mov	r4, r0
 800cebc:	d14d      	bne.n	800cf5a <_malloc_r+0xde>
 800cebe:	6834      	ldr	r4, [r6, #0]
 800cec0:	4626      	mov	r6, r4
 800cec2:	2e00      	cmp	r6, #0
 800cec4:	d140      	bne.n	800cf48 <_malloc_r+0xcc>
 800cec6:	6823      	ldr	r3, [r4, #0]
 800cec8:	4631      	mov	r1, r6
 800ceca:	4638      	mov	r0, r7
 800cecc:	eb04 0803 	add.w	r8, r4, r3
 800ced0:	f000 f878 	bl	800cfc4 <_sbrk_r>
 800ced4:	4580      	cmp	r8, r0
 800ced6:	d13a      	bne.n	800cf4e <_malloc_r+0xd2>
 800ced8:	6821      	ldr	r1, [r4, #0]
 800ceda:	3503      	adds	r5, #3
 800cedc:	1a6d      	subs	r5, r5, r1
 800cede:	f025 0503 	bic.w	r5, r5, #3
 800cee2:	3508      	adds	r5, #8
 800cee4:	2d0c      	cmp	r5, #12
 800cee6:	bf38      	it	cc
 800cee8:	250c      	movcc	r5, #12
 800ceea:	4629      	mov	r1, r5
 800ceec:	4638      	mov	r0, r7
 800ceee:	f7ff ffa5 	bl	800ce3c <sbrk_aligned>
 800cef2:	3001      	adds	r0, #1
 800cef4:	d02b      	beq.n	800cf4e <_malloc_r+0xd2>
 800cef6:	6823      	ldr	r3, [r4, #0]
 800cef8:	442b      	add	r3, r5
 800cefa:	6023      	str	r3, [r4, #0]
 800cefc:	e00e      	b.n	800cf1c <_malloc_r+0xa0>
 800cefe:	6822      	ldr	r2, [r4, #0]
 800cf00:	1b52      	subs	r2, r2, r5
 800cf02:	d41e      	bmi.n	800cf42 <_malloc_r+0xc6>
 800cf04:	2a0b      	cmp	r2, #11
 800cf06:	d916      	bls.n	800cf36 <_malloc_r+0xba>
 800cf08:	1961      	adds	r1, r4, r5
 800cf0a:	42a3      	cmp	r3, r4
 800cf0c:	6025      	str	r5, [r4, #0]
 800cf0e:	bf18      	it	ne
 800cf10:	6059      	strne	r1, [r3, #4]
 800cf12:	6863      	ldr	r3, [r4, #4]
 800cf14:	bf08      	it	eq
 800cf16:	6031      	streq	r1, [r6, #0]
 800cf18:	5162      	str	r2, [r4, r5]
 800cf1a:	604b      	str	r3, [r1, #4]
 800cf1c:	4638      	mov	r0, r7
 800cf1e:	f104 060b 	add.w	r6, r4, #11
 800cf22:	f000 f865 	bl	800cff0 <__malloc_unlock>
 800cf26:	f026 0607 	bic.w	r6, r6, #7
 800cf2a:	1d23      	adds	r3, r4, #4
 800cf2c:	1af2      	subs	r2, r6, r3
 800cf2e:	d0b6      	beq.n	800ce9e <_malloc_r+0x22>
 800cf30:	1b9b      	subs	r3, r3, r6
 800cf32:	50a3      	str	r3, [r4, r2]
 800cf34:	e7b3      	b.n	800ce9e <_malloc_r+0x22>
 800cf36:	6862      	ldr	r2, [r4, #4]
 800cf38:	42a3      	cmp	r3, r4
 800cf3a:	bf0c      	ite	eq
 800cf3c:	6032      	streq	r2, [r6, #0]
 800cf3e:	605a      	strne	r2, [r3, #4]
 800cf40:	e7ec      	b.n	800cf1c <_malloc_r+0xa0>
 800cf42:	4623      	mov	r3, r4
 800cf44:	6864      	ldr	r4, [r4, #4]
 800cf46:	e7b2      	b.n	800ceae <_malloc_r+0x32>
 800cf48:	4634      	mov	r4, r6
 800cf4a:	6876      	ldr	r6, [r6, #4]
 800cf4c:	e7b9      	b.n	800cec2 <_malloc_r+0x46>
 800cf4e:	230c      	movs	r3, #12
 800cf50:	603b      	str	r3, [r7, #0]
 800cf52:	4638      	mov	r0, r7
 800cf54:	f000 f84c 	bl	800cff0 <__malloc_unlock>
 800cf58:	e7a1      	b.n	800ce9e <_malloc_r+0x22>
 800cf5a:	6025      	str	r5, [r4, #0]
 800cf5c:	e7de      	b.n	800cf1c <_malloc_r+0xa0>
 800cf5e:	bf00      	nop
 800cf60:	20005064 	.word	0x20005064

0800cf64 <_realloc_r>:
 800cf64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf68:	4680      	mov	r8, r0
 800cf6a:	4614      	mov	r4, r2
 800cf6c:	460e      	mov	r6, r1
 800cf6e:	b921      	cbnz	r1, 800cf7a <_realloc_r+0x16>
 800cf70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf74:	4611      	mov	r1, r2
 800cf76:	f7ff bf81 	b.w	800ce7c <_malloc_r>
 800cf7a:	b92a      	cbnz	r2, 800cf88 <_realloc_r+0x24>
 800cf7c:	f7ff ff12 	bl	800cda4 <_free_r>
 800cf80:	4625      	mov	r5, r4
 800cf82:	4628      	mov	r0, r5
 800cf84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf88:	f000 f838 	bl	800cffc <_malloc_usable_size_r>
 800cf8c:	4284      	cmp	r4, r0
 800cf8e:	4607      	mov	r7, r0
 800cf90:	d802      	bhi.n	800cf98 <_realloc_r+0x34>
 800cf92:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cf96:	d812      	bhi.n	800cfbe <_realloc_r+0x5a>
 800cf98:	4621      	mov	r1, r4
 800cf9a:	4640      	mov	r0, r8
 800cf9c:	f7ff ff6e 	bl	800ce7c <_malloc_r>
 800cfa0:	4605      	mov	r5, r0
 800cfa2:	2800      	cmp	r0, #0
 800cfa4:	d0ed      	beq.n	800cf82 <_realloc_r+0x1e>
 800cfa6:	42bc      	cmp	r4, r7
 800cfa8:	4622      	mov	r2, r4
 800cfaa:	4631      	mov	r1, r6
 800cfac:	bf28      	it	cs
 800cfae:	463a      	movcs	r2, r7
 800cfb0:	f7fe fec6 	bl	800bd40 <memcpy>
 800cfb4:	4631      	mov	r1, r6
 800cfb6:	4640      	mov	r0, r8
 800cfb8:	f7ff fef4 	bl	800cda4 <_free_r>
 800cfbc:	e7e1      	b.n	800cf82 <_realloc_r+0x1e>
 800cfbe:	4635      	mov	r5, r6
 800cfc0:	e7df      	b.n	800cf82 <_realloc_r+0x1e>
	...

0800cfc4 <_sbrk_r>:
 800cfc4:	b538      	push	{r3, r4, r5, lr}
 800cfc6:	4d06      	ldr	r5, [pc, #24]	; (800cfe0 <_sbrk_r+0x1c>)
 800cfc8:	2300      	movs	r3, #0
 800cfca:	4604      	mov	r4, r0
 800cfcc:	4608      	mov	r0, r1
 800cfce:	602b      	str	r3, [r5, #0]
 800cfd0:	f7f6 f95a 	bl	8003288 <_sbrk>
 800cfd4:	1c43      	adds	r3, r0, #1
 800cfd6:	d102      	bne.n	800cfde <_sbrk_r+0x1a>
 800cfd8:	682b      	ldr	r3, [r5, #0]
 800cfda:	b103      	cbz	r3, 800cfde <_sbrk_r+0x1a>
 800cfdc:	6023      	str	r3, [r4, #0]
 800cfde:	bd38      	pop	{r3, r4, r5, pc}
 800cfe0:	2000505c 	.word	0x2000505c

0800cfe4 <__malloc_lock>:
 800cfe4:	4801      	ldr	r0, [pc, #4]	; (800cfec <__malloc_lock+0x8>)
 800cfe6:	f7ff bec1 	b.w	800cd6c <__retarget_lock_acquire_recursive>
 800cfea:	bf00      	nop
 800cfec:	20005060 	.word	0x20005060

0800cff0 <__malloc_unlock>:
 800cff0:	4801      	ldr	r0, [pc, #4]	; (800cff8 <__malloc_unlock+0x8>)
 800cff2:	f7ff bebc 	b.w	800cd6e <__retarget_lock_release_recursive>
 800cff6:	bf00      	nop
 800cff8:	20005060 	.word	0x20005060

0800cffc <_malloc_usable_size_r>:
 800cffc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d000:	1f18      	subs	r0, r3, #4
 800d002:	2b00      	cmp	r3, #0
 800d004:	bfbc      	itt	lt
 800d006:	580b      	ldrlt	r3, [r1, r0]
 800d008:	18c0      	addlt	r0, r0, r3
 800d00a:	4770      	bx	lr

0800d00c <_init>:
 800d00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d00e:	bf00      	nop
 800d010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d012:	bc08      	pop	{r3}
 800d014:	469e      	mov	lr, r3
 800d016:	4770      	bx	lr

0800d018 <_fini>:
 800d018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d01a:	bf00      	nop
 800d01c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d01e:	bc08      	pop	{r3}
 800d020:	469e      	mov	lr, r3
 800d022:	4770      	bx	lr
